Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerExtensionsTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerExtensionsTests.cs,EncryptingCredentials_AddKey_RegistersCredentials,The length of the statement  "            var factory = Mock.Of<CryptoProviderFactory>(mock => mock.IsSupportedAlgorithm(SecurityAlgorithms.Aes256KW' It.IsAny<SecurityKey>())); " is 134.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeCryptographyEndpointAsync_RsaSecurityKeysAreCorrectlyExposed,The length of the statement  "                D = Convert.FromBase64String("Uj6NrYBnyddhlJefYEP2nleCntAKlWyIttJC4cJnNxNN+OT2fQXhpTXRwW4R5YIS3HDqK/Fg2yoYm+OTVntAAgRFKveRx/WKwFo6UpnJc5u3lElhFa7IfosO9qXjErpX9ruAVqipekDLwQ++KmVVdgH4PK/o//nEx5zklGCdlEJURZYJPs9/7g1cx3UwvPp8jM7LgZL5OZRNyI3Jz4efrwiI2/vd8P28lAbpv/Ao4NwUDq/WKEnZ8JYSjLEKnZCfbX1ZEwf0Ic48jEKHmi1WEwpru1fMPoYfakrsY/VEfatPiDs8a5HABP/KaXcM4AZsr7HbzqAaNycV2xgdZimGcQ==")' " is 377.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeCryptographyEndpointAsync_RsaSecurityKeysAreCorrectlyExposed,The length of the statement  "                DP = Convert.FromBase64String("hi1e+0eQ/iYrfT4zpZVbx3dyfA7Ch/aujMt6nGMF+1LGaut86vDHM2JI0Gc2BKc+uPEu2bNAorhSmuSyGpfGYl0MYFQoVF/jyiGpzYPmhYpL5yLuN9jWAqNwjfstuRDLU9zTEfZnr3OSN85rZcgT7NUxlY8im1Y2TWYxGiEXw9E=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeCryptographyEndpointAsync_RsaSecurityKeysAreCorrectlyExposed,The length of the statement  "                DQ = Convert.FromBase64String("laVNkWIbnSuGo7nAxyUSdL2sXU3GZWwItwzTG0IK/0woFjArtCxGgNXW+V+GhxT7iHGAVJJSBvJ65TXrUYuBmoWj2CsoUs2mzK8ax4zg3CXrU61esCsGUoS2owR4FXlhYPmoVnglGu89bH72eXKixZsuF7vKW19nG703BXYEaEU=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeCryptographyEndpointAsync_RsaSecurityKeysAreCorrectlyExposed,The length of the statement  "                InverseQ = Convert.FromBase64String("dhzLDS4F5WYHX+vH4+uL3Ei/K5lxw2A/dBHGtbS2X54gm7vARl+FrptOFFwIjjmsLuTjttAq9K1EP/XZIq8bjW6dXJ/IytnobIPSFkclEeQlMi4/2VDMG5915J0DwnKO9M+B8F3JViUyMv0pvb+ub+HHDVFkIr7zooCmY25i77Q=")' " is 212.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeCryptographyEndpointAsync_RsaSecurityKeysAreCorrectlyExposed,The length of the statement  "                Modulus = Convert.FromBase64String("kXv7Pxf6mSf7mu6mPAOAoKAXl5kU7Q3h9zevC5i4Mm5bMk17XCh7ZvVxDzGA+1JmyxOX6sw3gMUl31FtIFlDhis8VnXKAPn8i1zrmebq+7QKzpE2GpoIpXjXbkPaHG/DbC67M1bux7/dE7lSUSifHRRLsbMUC2D4UahJ6miH2iPFNFyoa6CLtwosD8tIJKwmZ9r9zfqc9BrVGu24lZySjTSRttpLaTkgkBjxHmYhinKNEtj9wUfi1S1wPJUvf+roc6o+7jeBBV3EXJCsb6XCCXI7/e3umWp19odeRShXLQNQbNuuVC7yre4iidUDrWJ1jiaB06svUG+fVEi4FCMvEQ==")' " is 383.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeCryptographyEndpointAsync_RsaSecurityKeysAreCorrectlyExposed,The length of the statement  "                P = Convert.FromBase64String("xQGczmp4qD7Sez/ZqgW+O4cciTHvSqJqJUSdDd2l1Pd/szQ8avvzorrbSWOIULyv6eJb32+HuyLgy6rTSJ6THFobAnUv4ZTR7EGK26AJmP/BhD+3G+n21+4fzfbAxpHihkCYmO8aEl8fm/r4qPVXmCzFoXDZLMNIxFsdEXiFRS0=")' " is 205.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeCryptographyEndpointAsync_RsaSecurityKeysAreCorrectlyExposed,The length of the statement  "                Q = Convert.FromBase64String("vQy5C++AzF+TRh6qwbKzOqt87ZHEHidIAh6ivRNewjzIgCWXpseVl7DimY1YdViOnw1VI7xY+EyiyTanq5caTqqB3KcDm2t40bJfrZuUcn/5puRIh1bKNDwIMLsuNCrjHmDlNbocqpYMOh0Pgw7ARNbqrnPjWsYGJPuMNFpax/U=") " is 204.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeCryptographyEndpointAsync_X509CertificatesAreCorrectlyExposed,The length of the statement  "            Assert.Equal("MIIDPjCCAiqgAwIBAgIQlLEp+P+WKYtEAemhSKSUTTAJBgUrDgMCHQUAMC0xKzApBgNVBAMTIk93aW4uU2VjdXJpdHkuT3BlbklkQ29ubmVjdC5TZXJ2ZXIwHhcNOTkxMjMxMjIwMDAwWhcNNDkxMjMxMjIwMDAwWjAtMSswKQYDVQQDEyJPd2luLlNlY3VyaXR5Lk9wZW5JZENvbm5lY3QuU2VydmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwD/4uMNSIu+JlPRrtFR8Tm2LAwSOmglvJai6edFrdvDvk6xWzxYkMoIt4v13lFiIAUfI1vyZ1M0hWQfrifyweuzZu06DyWTUZkp9ervhTxK27HFN7XTuaRxHaXLR4KnhA+Nk8bBXN895OZh9g9Hf5+zsHpe17zgikwcyZtF+9OEG16oz7lKRgXGCIeeVZuSZ5Qf4yePwKMZqsx+lTOiZJ3JMs+gytvIpdZ1NWzcMX0XTcVTgvnBeU0O3NR6DQ41+SrGsojk11bd6kP6mVmDkA0K9kc2eh7q1wyJOeTNuCKRqLthwJ5m46/KRsxgY7ND6qHc1L60SqsFlYCJNEy7EdwIDAQABo2IwYDBeBgNVHQEEVzBVgBDQX+HKPiztLNvT3jQeBXqToS8wLTErMCkGA1UEAxMiT3dpbi5TZWN1cml0eS5PcGVuSWRDb25uZWN0LlNlcnZlcoIQlLEp+P+WKYtEAemhSKSUTTAJBgUrDgMCHQUAA4IBAQCxbCF5thB+ypGpudLAjv+l3M2VhNITJeR9j7jMlCSMVHvW7iMOL5W++zKvHMMAWuITLgPXTZ4ktsjeVQxWdnS2IcU7SwB9SeLbOMk4lLizoUevkiNaf6v+Hskm5LiH6+k8Zsl0INHyIjF9XlALTh91EqQ820cotDXaQIhHabQy892+dBmGWhSE1kP56IvOPzlLdSTkrcfcOu9gzwPVfuTDWH8Hrmo3FXz/fADmE7ea+yE1ZBeKhaN8kaFTs5zrprJ1BnmegnrjDY3RFgqcTTetahv0VBS0/jHSTIsAXflEPGW7LbHimzcgMytFU4fFtPVbek5eunakhu/JdENbbVmT"' (string) key?[JsonWebKeyParameterNames.X5c]?[0]); " is 1178.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_BasicClaimsAreCorrectlyReturned,The length of the statement  "            Assert.Equal(OpenIdConnectConstants.TokenUsages.AccessToken' (string) response[OpenIdConnectConstants.Claims.TokenUsage]); " is 122.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                D = Convert.FromBase64String("Uj6NrYBnyddhlJefYEP2nleCntAKlWyIttJC4cJnNxNN+OT2fQXhpTXRwW4R5YIS3HDqK/Fg2yoYm+OTVntAAgRFKveRx/WKwFo6UpnJc5u3lElhFa7IfosO9qXjErpX9ruAVqipekDLwQ++KmVVdgH4PK/o//nEx5zklGCdlEJURZYJPs9/7g1cx3UwvPp8jM7LgZL5OZRNyI3Jz4efrwiI2/vd8P28lAbpv/Ao4NwUDq/WKEnZ8JYSjLEKnZCfbX1ZEwf0Ic48jEKHmi1WEwpru1fMPoYfakrsY/VEfatPiDs8a5HABP/KaXcM4AZsr7HbzqAaNycV2xgdZimGcQ==")' " is 377.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                DP = Convert.FromBase64String("hi1e+0eQ/iYrfT4zpZVbx3dyfA7Ch/aujMt6nGMF+1LGaut86vDHM2JI0Gc2BKc+uPEu2bNAorhSmuSyGpfGYl0MYFQoVF/jyiGpzYPmhYpL5yLuN9jWAqNwjfstuRDLU9zTEfZnr3OSN85rZcgT7NUxlY8im1Y2TWYxGiEXw9E=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                DQ = Convert.FromBase64String("laVNkWIbnSuGo7nAxyUSdL2sXU3GZWwItwzTG0IK/0woFjArtCxGgNXW+V+GhxT7iHGAVJJSBvJ65TXrUYuBmoWj2CsoUs2mzK8ax4zg3CXrU61esCsGUoS2owR4FXlhYPmoVnglGu89bH72eXKixZsuF7vKW19nG703BXYEaEU=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                InverseQ = Convert.FromBase64String("dhzLDS4F5WYHX+vH4+uL3Ei/K5lxw2A/dBHGtbS2X54gm7vARl+FrptOFFwIjjmsLuTjttAq9K1EP/XZIq8bjW6dXJ/IytnobIPSFkclEeQlMi4/2VDMG5915J0DwnKO9M+B8F3JViUyMv0pvb+ub+HHDVFkIr7zooCmY25i77Q=")' " is 212.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                Modulus = Convert.FromBase64String("kXv7Pxf6mSf7mu6mPAOAoKAXl5kU7Q3h9zevC5i4Mm5bMk17XCh7ZvVxDzGA+1JmyxOX6sw3gMUl31FtIFlDhis8VnXKAPn8i1zrmebq+7QKzpE2GpoIpXjXbkPaHG/DbC67M1bux7/dE7lSUSifHRRLsbMUC2D4UahJ6miH2iPFNFyoa6CLtwosD8tIJKwmZ9r9zfqc9BrVGu24lZySjTSRttpLaTkgkBjxHmYhinKNEtj9wUfi1S1wPJUvf+roc6o+7jeBBV3EXJCsb6XCCXI7/e3umWp19odeRShXLQNQbNuuVC7yre4iidUDrWJ1jiaB06svUG+fVEi4FCMvEQ==")' " is 383.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                P = Convert.FromBase64String("xQGczmp4qD7Sez/ZqgW+O4cciTHvSqJqJUSdDd2l1Pd/szQ8avvzorrbSWOIULyv6eJb32+HuyLgy6rTSJ6THFobAnUv4ZTR7EGK26AJmP/BhD+3G+n21+4fzfbAxpHihkCYmO8aEl8fm/r4qPVXmCzFoXDZLMNIxFsdEXiFRS0=")' " is 205.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                Q = Convert.FromBase64String("vQy5C++AzF+TRh6qwbKzOqt87ZHEHidIAh6ivRNewjzIgCWXpseVl7DimY1YdViOnw1VI7xY+EyiyTanq5caTqqB3KcDm2t40bJfrZuUcn/5puRIh1bKNDwIMLsuNCrjHmDlNbocqpYMOh0Pgw7ARNbqrnPjWsYGJPuMNFpax/U=") " is 204.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                D = Convert.FromBase64String("Uj6NrYBnyddhlJefYEP2nleCntAKlWyIttJC4cJnNxNN+OT2fQXhpTXRwW4R5YIS3HDqK/Fg2yoYm+OTVntAAgRFKveRx/WKwFo6UpnJc5u3lElhFa7IfosO9qXjErpX9ruAVqipekDLwQ++KmVVdgH4PK/o//nEx5zklGCdlEJURZYJPs9/7g1cx3UwvPp8jM7LgZL5OZRNyI3Jz4efrwiI2/vd8P28lAbpv/Ao4NwUDq/WKEnZ8JYSjLEKnZCfbX1ZEwf0Ic48jEKHmi1WEwpru1fMPoYfakrsY/VEfatPiDs8a5HABP/KaXcM4AZsr7HbzqAaNycV2xgdZimGcQ==")' " is 377.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                DP = Convert.FromBase64String("hi1e+0eQ/iYrfT4zpZVbx3dyfA7Ch/aujMt6nGMF+1LGaut86vDHM2JI0Gc2BKc+uPEu2bNAorhSmuSyGpfGYl0MYFQoVF/jyiGpzYPmhYpL5yLuN9jWAqNwjfstuRDLU9zTEfZnr3OSN85rZcgT7NUxlY8im1Y2TWYxGiEXw9E=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                DQ = Convert.FromBase64String("laVNkWIbnSuGo7nAxyUSdL2sXU3GZWwItwzTG0IK/0woFjArtCxGgNXW+V+GhxT7iHGAVJJSBvJ65TXrUYuBmoWj2CsoUs2mzK8ax4zg3CXrU61esCsGUoS2owR4FXlhYPmoVnglGu89bH72eXKixZsuF7vKW19nG703BXYEaEU=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                InverseQ = Convert.FromBase64String("dhzLDS4F5WYHX+vH4+uL3Ei/K5lxw2A/dBHGtbS2X54gm7vARl+FrptOFFwIjjmsLuTjttAq9K1EP/XZIq8bjW6dXJ/IytnobIPSFkclEeQlMi4/2VDMG5915J0DwnKO9M+B8F3JViUyMv0pvb+ub+HHDVFkIr7zooCmY25i77Q=")' " is 212.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                Modulus = Convert.FromBase64String("kXv7Pxf6mSf7mu6mPAOAoKAXl5kU7Q3h9zevC5i4Mm5bMk17XCh7ZvVxDzGA+1JmyxOX6sw3gMUl31FtIFlDhis8VnXKAPn8i1zrmebq+7QKzpE2GpoIpXjXbkPaHG/DbC67M1bux7/dE7lSUSifHRRLsbMUC2D4UahJ6miH2iPFNFyoa6CLtwosD8tIJKwmZ9r9zfqc9BrVGu24lZySjTSRttpLaTkgkBjxHmYhinKNEtj9wUfi1S1wPJUvf+roc6o+7jeBBV3EXJCsb6XCCXI7/e3umWp19odeRShXLQNQbNuuVC7yre4iidUDrWJ1jiaB06svUG+fVEi4FCMvEQ==")' " is 383.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                P = Convert.FromBase64String("xQGczmp4qD7Sez/ZqgW+O4cciTHvSqJqJUSdDd2l1Pd/szQ8avvzorrbSWOIULyv6eJb32+HuyLgy6rTSJ6THFobAnUv4ZTR7EGK26AJmP/BhD+3G+n21+4fzfbAxpHihkCYmO8aEl8fm/r4qPVXmCzFoXDZLMNIxFsdEXiFRS0=")' " is 205.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                Q = Convert.FromBase64String("vQy5C++AzF+TRh6qwbKzOqt87ZHEHidIAh6ivRNewjzIgCWXpseVl7DimY1YdViOnw1VI7xY+EyiyTanq5caTqqB3KcDm2t40bJfrZuUcn/5puRIh1bKNDwIMLsuNCrjHmDlNbocqpYMOh0Pgw7ARNbqrnPjWsYGJPuMNFpax/U=") " is 204.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                D = Convert.FromBase64String("Uj6NrYBnyddhlJefYEP2nleCntAKlWyIttJC4cJnNxNN+OT2fQXhpTXRwW4R5YIS3HDqK/Fg2yoYm+OTVntAAgRFKveRx/WKwFo6UpnJc5u3lElhFa7IfosO9qXjErpX9ruAVqipekDLwQ++KmVVdgH4PK/o//nEx5zklGCdlEJURZYJPs9/7g1cx3UwvPp8jM7LgZL5OZRNyI3Jz4efrwiI2/vd8P28lAbpv/Ao4NwUDq/WKEnZ8JYSjLEKnZCfbX1ZEwf0Ic48jEKHmi1WEwpru1fMPoYfakrsY/VEfatPiDs8a5HABP/KaXcM4AZsr7HbzqAaNycV2xgdZimGcQ==")' " is 377.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                DP = Convert.FromBase64String("hi1e+0eQ/iYrfT4zpZVbx3dyfA7Ch/aujMt6nGMF+1LGaut86vDHM2JI0Gc2BKc+uPEu2bNAorhSmuSyGpfGYl0MYFQoVF/jyiGpzYPmhYpL5yLuN9jWAqNwjfstuRDLU9zTEfZnr3OSN85rZcgT7NUxlY8im1Y2TWYxGiEXw9E=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                DQ = Convert.FromBase64String("laVNkWIbnSuGo7nAxyUSdL2sXU3GZWwItwzTG0IK/0woFjArtCxGgNXW+V+GhxT7iHGAVJJSBvJ65TXrUYuBmoWj2CsoUs2mzK8ax4zg3CXrU61esCsGUoS2owR4FXlhYPmoVnglGu89bH72eXKixZsuF7vKW19nG703BXYEaEU=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                InverseQ = Convert.FromBase64String("dhzLDS4F5WYHX+vH4+uL3Ei/K5lxw2A/dBHGtbS2X54gm7vARl+FrptOFFwIjjmsLuTjttAq9K1EP/XZIq8bjW6dXJ/IytnobIPSFkclEeQlMi4/2VDMG5915J0DwnKO9M+B8F3JViUyMv0pvb+ub+HHDVFkIr7zooCmY25i77Q=")' " is 212.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                Modulus = Convert.FromBase64String("kXv7Pxf6mSf7mu6mPAOAoKAXl5kU7Q3h9zevC5i4Mm5bMk17XCh7ZvVxDzGA+1JmyxOX6sw3gMUl31FtIFlDhis8VnXKAPn8i1zrmebq+7QKzpE2GpoIpXjXbkPaHG/DbC67M1bux7/dE7lSUSifHRRLsbMUC2D4UahJ6miH2iPFNFyoa6CLtwosD8tIJKwmZ9r9zfqc9BrVGu24lZySjTSRttpLaTkgkBjxHmYhinKNEtj9wUfi1S1wPJUvf+roc6o+7jeBBV3EXJCsb6XCCXI7/e3umWp19odeRShXLQNQbNuuVC7yre4iidUDrWJ1jiaB06svUG+fVEi4FCMvEQ==")' " is 383.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                P = Convert.FromBase64String("xQGczmp4qD7Sez/ZqgW+O4cciTHvSqJqJUSdDd2l1Pd/szQ8avvzorrbSWOIULyv6eJb32+HuyLgy6rTSJ6THFobAnUv4ZTR7EGK26AJmP/BhD+3G+n21+4fzfbAxpHihkCYmO8aEl8fm/r4qPVXmCzFoXDZLMNIxFsdEXiFRS0=")' " is 205.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The length of the statement  "                Q = Convert.FromBase64String("vQy5C++AzF+TRh6qwbKzOqt87ZHEHidIAh6ivRNewjzIgCWXpseVl7DimY1YdViOnw1VI7xY+EyiyTanq5caTqqB3KcDm2t40bJfrZuUcn/5puRIh1bKNDwIMLsuNCrjHmDlNbocqpYMOh0Pgw7ARNbqrnPjWsYGJPuMNFpax/U=") " is 204.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                D = Convert.FromBase64String("Uj6NrYBnyddhlJefYEP2nleCntAKlWyIttJC4cJnNxNN+OT2fQXhpTXRwW4R5YIS3HDqK/Fg2yoYm+OTVntAAgRFKveRx/WKwFo6UpnJc5u3lElhFa7IfosO9qXjErpX9ruAVqipekDLwQ++KmVVdgH4PK/o//nEx5zklGCdlEJURZYJPs9/7g1cx3UwvPp8jM7LgZL5OZRNyI3Jz4efrwiI2/vd8P28lAbpv/Ao4NwUDq/WKEnZ8JYSjLEKnZCfbX1ZEwf0Ic48jEKHmi1WEwpru1fMPoYfakrsY/VEfatPiDs8a5HABP/KaXcM4AZsr7HbzqAaNycV2xgdZimGcQ==")' " is 377.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                DP = Convert.FromBase64String("hi1e+0eQ/iYrfT4zpZVbx3dyfA7Ch/aujMt6nGMF+1LGaut86vDHM2JI0Gc2BKc+uPEu2bNAorhSmuSyGpfGYl0MYFQoVF/jyiGpzYPmhYpL5yLuN9jWAqNwjfstuRDLU9zTEfZnr3OSN85rZcgT7NUxlY8im1Y2TWYxGiEXw9E=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                DQ = Convert.FromBase64String("laVNkWIbnSuGo7nAxyUSdL2sXU3GZWwItwzTG0IK/0woFjArtCxGgNXW+V+GhxT7iHGAVJJSBvJ65TXrUYuBmoWj2CsoUs2mzK8ax4zg3CXrU61esCsGUoS2owR4FXlhYPmoVnglGu89bH72eXKixZsuF7vKW19nG703BXYEaEU=")' " is 206.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                InverseQ = Convert.FromBase64String("dhzLDS4F5WYHX+vH4+uL3Ei/K5lxw2A/dBHGtbS2X54gm7vARl+FrptOFFwIjjmsLuTjttAq9K1EP/XZIq8bjW6dXJ/IytnobIPSFkclEeQlMi4/2VDMG5915J0DwnKO9M+B8F3JViUyMv0pvb+ub+HHDVFkIr7zooCmY25i77Q=")' " is 212.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                Modulus = Convert.FromBase64String("kXv7Pxf6mSf7mu6mPAOAoKAXl5kU7Q3h9zevC5i4Mm5bMk17XCh7ZvVxDzGA+1JmyxOX6sw3gMUl31FtIFlDhis8VnXKAPn8i1zrmebq+7QKzpE2GpoIpXjXbkPaHG/DbC67M1bux7/dE7lSUSifHRRLsbMUC2D4UahJ6miH2iPFNFyoa6CLtwosD8tIJKwmZ9r9zfqc9BrVGu24lZySjTSRttpLaTkgkBjxHmYhinKNEtj9wUfi1S1wPJUvf+roc6o+7jeBBV3EXJCsb6XCCXI7/e3umWp19odeRShXLQNQbNuuVC7yre4iidUDrWJ1jiaB06svUG+fVEi4FCMvEQ==")' " is 383.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                P = Convert.FromBase64String("xQGczmp4qD7Sez/ZqgW+O4cciTHvSqJqJUSdDd2l1Pd/szQ8avvzorrbSWOIULyv6eJb32+HuyLgy6rTSJ6THFobAnUv4ZTR7EGK26AJmP/BhD+3G+n21+4fzfbAxpHihkCYmO8aEl8fm/r4qPVXmCzFoXDZLMNIxFsdEXiFRS0=")' " is 205.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The length of the statement  "                Q = Convert.FromBase64String("vQy5C++AzF+TRh6qwbKzOqt87ZHEHidIAh6ivRNewjzIgCWXpseVl7DimY1YdViOnw1VI7xY+EyiyTanq5caTqqB3KcDm2t40bJfrZuUcn/5puRIh1bKNDwIMLsuNCrjHmDlNbocqpYMOh0Pgw7ARNbqrnPjWsYGJPuMNFpax/U=") " is 204.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerMiddlewareTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerMiddlewareTests.cs,Constructor_MissingProviderThrowsAnException,The length of the statement  "            Assert.StartsWith("The authorization provider registered in the options cannot be null."' exception.InnerException.Message); " is 124.
Long Statement,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerMiddlewareTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerMiddlewareTests.cs,Constructor_RelativeIssuerThrowsAnException,The length of the statement  "            Assert.StartsWith("The issuer registered in the options must be a valid absolute URI."' exception.InnerException.Message); " is 122.
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeAuthorizationEndpointAsync_IdTokenResponseTypeCausesAnErrorWhenNoAsymmetricSigningKeyIsRegistered,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.SigningCredentials.Clear();                  options.SigningCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeAuthorizationEndpointAsync_IdTokenResponseTypeCausesAnErrorWhenNoAsymmetricSigningKeyIsRegistered,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.SigningCredentials.Clear();                  options.SigningCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeConfigurationEndpointAsync_IdTokenResponseTypesAreExcludedWhenNoAsymmetricSigningKeyIsRegistered,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.SigningCredentials.Clear();                  options.SigningCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeConfigurationEndpointAsync_IdTokenResponseTypesAreExcludedWhenNoAsymmetricSigningKeyIsRegistered,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.SigningCredentials.Clear();                  options.SigningCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeConfigurationEndpointAsync_SymmetricSigningKeysAreIgnored,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.SigningCredentials.Clear();                  options.SigningCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeConfigurationEndpointAsync_SymmetricSigningKeysAreIgnored,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.SigningCredentials.Clear();                  options.SigningCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_BasicClaimsAreCorrectlyReturned,The following statement contains a magic number: clock.SetupGet(mock => mock.UtcNow)                   .Returns(new DateTimeOffset(2016' 1' 1' 0' 0' 0' TimeSpan.Zero));
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_BasicClaimsAreCorrectlyReturned,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.SystemClock = clock.Object;                    options.Provider.OnDeserializeAccessToken = context =>                  {                      Assert.Equal("2YotnFZFEjr1zCsicMWpAA"' context.AccessToken);                        var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        context.Ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      context.Ticket.SetAudiences("Fabrikam");                      context.Ticket.SetPresenters("Contoso"' "AdventureWorks Cycles");                      context.Ticket.SetTokenId("66B65AED-4033-4E9C-B975-A8CA7FB6FA79");                        context.Ticket.Properties.IssuedUtc = new DateTimeOffset(2016' 1' 1' 0' 0' 0' TimeSpan.Zero);                      context.Ticket.Properties.ExpiresUtc = new DateTimeOffset(2017' 1' 1' 0' 0' 0' TimeSpan.Zero);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateIntrospectionRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_BasicClaimsAreCorrectlyReturned,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.SystemClock = clock.Object;                    options.Provider.OnDeserializeAccessToken = context =>                  {                      Assert.Equal("2YotnFZFEjr1zCsicMWpAA"' context.AccessToken);                        var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        context.Ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      context.Ticket.SetAudiences("Fabrikam");                      context.Ticket.SetPresenters("Contoso"' "AdventureWorks Cycles");                      context.Ticket.SetTokenId("66B65AED-4033-4E9C-B975-A8CA7FB6FA79");                        context.Ticket.Properties.IssuedUtc = new DateTimeOffset(2016' 1' 1' 0' 0' 0' TimeSpan.Zero);                      context.Ticket.Properties.ExpiresUtc = new DateTimeOffset(2017' 1' 1' 0' 0' 0' TimeSpan.Zero);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateIntrospectionRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_BasicClaimsAreCorrectlyReturned,The following statement contains a magic number: Assert.Equal(11' response.GetParameters().Count());
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_BasicClaimsAreCorrectlyReturned,The following statement contains a magic number: Assert.Equal(1451606400' (long) response[OpenIdConnectConstants.Claims.IssuedAt]);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_BasicClaimsAreCorrectlyReturned,The following statement contains a magic number: Assert.Equal(1451606400' (long) response[OpenIdConnectConstants.Claims.NotBefore]);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_BasicClaimsAreCorrectlyReturned,The following statement contains a magic number: Assert.Equal(1483228800' (long) response[OpenIdConnectConstants.Claims.ExpiresAt]);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_ClaimValueTypesAreHonored,The following statement contains a magic number: Assert.Equal(42' (long) response["integer_claim"]);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_MultipleClaimsAreReturnedAsArrays,The following statement contains a magic number: Assert.Equal(new JArray(new[] { 42' 43 })' (JArray) response["integer_claim"]);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeIntrospectionEndpointAsync_MultipleClaimsAreReturnedAsArrays,The following statement contains a magic number: Assert.Equal(new JArray(new[] { 42' 43 })' (JArray) response["integer_claim"]);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAuthorizationCodeAsync_ExpirationDateCanBeOverridenFromUserCode,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.Provider.OnSerializeAuthorizationCode = context =>                  {                      // Assert                      Assert.NotNull(context.Ticket.Properties.IssuedUtc);                      Assert.NotNull(context.Ticket.Properties.ExpiresUtc);                        Assert.Equal(context.Ticket.Properties.IssuedUtc + TimeSpan.FromDays(42)'                                   context.Ticket.Properties.ExpiresUtc);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateAuthorizationRequest = context =>                  {                      context.Validate();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleAuthorizationRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        var ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      ticket.SetAuthorizationCodeLifetime(TimeSpan.FromDays(42));                        context.Validate(ticket);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAuthorizationCodeAsync_ExpirationDateCanBeOverridenFromUserCode,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.Provider.OnSerializeAuthorizationCode = context =>                  {                      // Assert                      Assert.NotNull(context.Ticket.Properties.IssuedUtc);                      Assert.NotNull(context.Ticket.Properties.ExpiresUtc);                        Assert.Equal(context.Ticket.Properties.IssuedUtc + TimeSpan.FromDays(42)'                                   context.Ticket.Properties.ExpiresUtc);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateAuthorizationRequest = context =>                  {                      context.Validate();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleAuthorizationRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        var ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      ticket.SetAuthorizationCodeLifetime(TimeSpan.FromDays(42));                        context.Validate(ticket);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_ExpirationDateCanBeOverridenFromUserCode,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.Provider.OnSerializeAccessToken = context =>                  {                      // Assert                      Assert.NotNull(context.Ticket.Properties.IssuedUtc);                      Assert.NotNull(context.Ticket.Properties.ExpiresUtc);                        Assert.Equal(context.Ticket.Properties.IssuedUtc + TimeSpan.FromDays(42)'                                   context.Ticket.Properties.ExpiresUtc);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        var ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      ticket.SetAccessTokenLifetime(TimeSpan.FromDays(42));                        context.Validate(ticket);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_ExpirationDateCanBeOverridenFromUserCode,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.Provider.OnSerializeAccessToken = context =>                  {                      // Assert                      Assert.NotNull(context.Ticket.Properties.IssuedUtc);                      Assert.NotNull(context.Ticket.Properties.ExpiresUtc);                        Assert.Equal(context.Ticket.Properties.IssuedUtc + TimeSpan.FromDays(42)'                                   context.Ticket.Properties.ExpiresUtc);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        var ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      ticket.SetAccessTokenLifetime(TimeSpan.FromDays(42));                        context.Validate(ticket);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.Insert(0' credentials);                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                    options.Provider.OnSerializeAccessToken = context =>                  {                      // Assert                      Assert.NotSame(credentials' context.EncryptingCredentials);                      Assert.Same(context.Options.EncryptingCredentials[1]' context.EncryptingCredentials);                      Assert.IsType<SymmetricSecurityKey>(context.EncryptingCredentials.Key);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        context.Validate(identity);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.Insert(0' credentials);                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                    options.Provider.OnSerializeAccessToken = context =>                  {                      // Assert                      Assert.NotSame(credentials' context.EncryptingCredentials);                      Assert.Same(context.Options.EncryptingCredentials[1]' context.EncryptingCredentials);                      Assert.IsType<SymmetricSecurityKey>(context.EncryptingCredentials.Key);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        context.Validate(identity);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_UsesSymmetricEncryptingKey,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                    options.Provider.OnSerializeAccessToken = context =>                  {                      // Assert                      Assert.Same(context.Options.EncryptingCredentials[0]' context.EncryptingCredentials);                      Assert.IsType<SymmetricSecurityKey>(context.EncryptingCredentials.Key);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        context.Validate(identity);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_UsesSymmetricEncryptingKey,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                    options.Provider.OnSerializeAccessToken = context =>                  {                      // Assert                      Assert.Same(context.Options.EncryptingCredentials[0]' context.EncryptingCredentials);                      Assert.IsType<SymmetricSecurityKey>(context.EncryptingCredentials.Key);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        context.Validate(identity);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_PrefersSymmetricSigningKeyWhenAvailable,The following statement contains a magic number: var credentials = new SigningCredentials(                  new SymmetricSecurityKey(new byte[256 / 8])'                  SecurityAlgorithms.HmacSha256);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeAccessTokenAsync_PrefersSymmetricSigningKeyWhenAvailable,The following statement contains a magic number: var credentials = new SigningCredentials(                  new SymmetricSecurityKey(new byte[256 / 8])'                  SecurityAlgorithms.HmacSha256);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_ExpirationDateCanBeOverridenFromUserCode,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.Provider.OnSerializeIdentityToken = context =>                  {                      // Assert                      Assert.NotNull(context.Ticket.Properties.IssuedUtc);                      Assert.NotNull(context.Ticket.Properties.ExpiresUtc);                        Assert.Equal(context.Ticket.Properties.IssuedUtc + TimeSpan.FromDays(42)'                                   context.Ticket.Properties.ExpiresUtc);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        var ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      ticket.SetIdentityTokenLifetime(TimeSpan.FromDays(42));                        context.Validate(ticket);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_ExpirationDateCanBeOverridenFromUserCode,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.Provider.OnSerializeIdentityToken = context =>                  {                      // Assert                      Assert.NotNull(context.Ticket.Properties.IssuedUtc);                      Assert.NotNull(context.Ticket.Properties.ExpiresUtc);                        Assert.Equal(context.Ticket.Properties.IssuedUtc + TimeSpan.FromDays(42)'                                   context.Ticket.Properties.ExpiresUtc);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        var ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      ticket.SetIdentityTokenLifetime(TimeSpan.FromDays(42));                        context.Validate(ticket);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                  options.EncryptingCredentials.Add(credentials);                    options.Provider.OnSerializeIdentityToken = context =>                  {                      // Assert                      Assert.Null(context.EncryptingCredentials);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        context.Validate(identity);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresEncryptingKeys,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                  options.EncryptingCredentials.Add(credentials);                    options.Provider.OnSerializeIdentityToken = context =>                  {                      // Assert                      Assert.Null(context.EncryptingCredentials);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        context.Validate(identity);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresSymmetricSigningKeys,The following statement contains a magic number: var credentials = new SigningCredentials(                  new SymmetricSecurityKey(new byte[256 / 8])'                  SecurityAlgorithms.HmacSha256);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeIdentityTokenAsync_IgnoresSymmetricSigningKeys,The following statement contains a magic number: var credentials = new SigningCredentials(                  new SymmetricSecurityKey(new byte[256 / 8])'                  SecurityAlgorithms.HmacSha256);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeRefreshTokenAsync_ExpirationDateCanBeOverridenFromUserCode,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.Provider.OnSerializeRefreshToken = context =>                  {                      // Assert                      Assert.NotNull(context.Ticket.Properties.IssuedUtc);                      Assert.NotNull(context.Ticket.Properties.ExpiresUtc);                        Assert.Equal(context.Ticket.Properties.IssuedUtc + TimeSpan.FromDays(42)'                                   context.Ticket.Properties.ExpiresUtc);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        var ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      ticket.SetScopes(OpenIdConnectConstants.Scopes.OfflineAccess);                      ticket.SetRefreshTokenLifetime(TimeSpan.FromDays(42));                        context.Validate(ticket);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,SerializeRefreshTokenAsync_ExpirationDateCanBeOverridenFromUserCode,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.Provider.OnSerializeRefreshToken = context =>                  {                      // Assert                      Assert.NotNull(context.Ticket.Properties.IssuedUtc);                      Assert.NotNull(context.Ticket.Properties.ExpiresUtc);                        Assert.Equal(context.Ticket.Properties.IssuedUtc + TimeSpan.FromDays(42)'                                   context.Ticket.Properties.ExpiresUtc);                        return Task.CompletedTask;                  };                    options.Provider.OnValidateTokenRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };                    options.Provider.OnHandleTokenRequest = context =>                  {                      var identity = new ClaimsIdentity(context.Options.AuthenticationType);                      identity.AddClaim(OpenIdConnectConstants.Claims.Subject' "Bob le Magnifique");                        var ticket = new AuthenticationTicket(identity' new AuthenticationProperties());                      ticket.SetScopes(OpenIdConnectConstants.Scopes.OfflineAccess);                      ticket.SetRefreshTokenLifetime(TimeSpan.FromDays(42));                        context.Validate(ticket);                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.Add(credentials);                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                    options.Provider.OnDeserializeAccessToken = context =>                  {                      var keys = context.TokenValidationParameters.TokenDecryptionKeys.ToArray();                        // Assert                      Assert.Single(keys);                      Assert.NotSame(credentials' keys[0]);                      Assert.Same(context.Options.EncryptingCredentials[1].Key' keys[0]);                      Assert.IsType<SymmetricSecurityKey>(keys[0]);                        context.Ticket = new AuthenticationTicket(                          new ClaimsIdentity()'                          new AuthenticationProperties());                        context.HandleDeserialization();                        return Task.CompletedTask;                  };                    options.Provider.OnValidateIntrospectionRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeAccessTokenAsync_IgnoresAsymmetricEncryptingKeys,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.Add(credentials);                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                    options.Provider.OnDeserializeAccessToken = context =>                  {                      var keys = context.TokenValidationParameters.TokenDecryptionKeys.ToArray();                        // Assert                      Assert.Single(keys);                      Assert.NotSame(credentials' keys[0]);                      Assert.Same(context.Options.EncryptingCredentials[1].Key' keys[0]);                      Assert.IsType<SymmetricSecurityKey>(keys[0]);                        context.Ticket = new AuthenticationTicket(                          new ClaimsIdentity()'                          new AuthenticationProperties());                        context.HandleDeserialization();                        return Task.CompletedTask;                  };                    options.Provider.OnValidateIntrospectionRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                  options.EncryptingCredentials.Add(credentials);                    options.Provider.OnDeserializeIdentityToken = context =>                  {                      // Assert                      Assert.Null(context.TokenValidationParameters.TokenDecryptionKey);                      Assert.Null(context.TokenValidationParameters.TokenDecryptionKeys);                        context.Ticket = new AuthenticationTicket(                          new ClaimsIdentity()'                          new AuthenticationProperties());                        context.HandleDeserialization();                        return Task.CompletedTask;                  };                    options.Provider.OnValidateIntrospectionRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresEncryptingKeys,The following statement contains a magic number: var server = CreateAuthorizationServer(options =>              {                  options.EncryptingCredentials.AddKey(new SymmetricSecurityKey(new byte[256 / 8]));                  options.EncryptingCredentials.Add(credentials);                    options.Provider.OnDeserializeIdentityToken = context =>                  {                      // Assert                      Assert.Null(context.TokenValidationParameters.TokenDecryptionKey);                      Assert.Null(context.TokenValidationParameters.TokenDecryptionKeys);                        context.Ticket = new AuthenticationTicket(                          new ClaimsIdentity()'                          new AuthenticationProperties());                        context.HandleDeserialization();                        return Task.CompletedTask;                  };                    options.Provider.OnValidateIntrospectionRequest = context =>                  {                      context.Skip();                        return Task.CompletedTask;                  };              });
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresSymmetricSigningKeys,The following statement contains a magic number: var credentials = new SigningCredentials(                  new SymmetricSecurityKey(new byte[256 / 8])'                  SecurityAlgorithms.HmacSha256);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,DeserializeIdentityTokenAsync_IgnoresSymmetricSigningKeys,The following statement contains a magic number: var credentials = new SigningCredentials(                  new SymmetricSecurityKey(new byte[256 / 8])'                  SecurityAlgorithms.HmacSha256);
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeUserinfoEndpointAsync_BasicClaimsAreCorrectlyReturned,The following statement contains a magic number: Assert.Equal(3' response.GetParameters().Count());
Magic Number,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,InvokeUserinfoEndpointAsync_NonBasicClaimsAreNotReturnedWhenNoScopeWasGranted,The following statement contains a magic number: Assert.Equal(3' response.GetParameters().Count());
Missing Default,Owin.Security.OpenIdConnect.Server.Tests,OpenIdConnectServerHandlerTests,D:\research\architectureSmells\repos\aspnet-contrib_AspNet.Security.OpenIdConnect.Server\test\Owin.Security.OpenIdConnect.Server.Tests\OpenIdConnectServerHandlerTests.Authentication.cs,HandleRequestAsync_MatchEndpoint_AllowsOverridingEndpoint,The following switch statement is missing a default case: switch (address)                      {                          case "/custom/connect/authorize":                              context.MatchAuthorizationEndpoint();                              break;                            case "/custom/.well-known/openid-configuration":                              context.MatchConfigurationEndpoint();                              break;                            case "/custom/.well-known/jwks":                              context.MatchCryptographyEndpoint();                              break;                            case "/custom/connect/introspect":                              context.MatchIntrospectionEndpoint();                              break;                            case "/custom/connect/logout":                              context.MatchLogoutEndpoint();                              break;                            case "/custom/connect/revoke":                              context.MatchRevocationEndpoint();                              break;                            case "/custom/connect/token":                              context.MatchTokenEndpoint();                              break;                            case "/custom/connect/userinfo":                              context.MatchUserinfoEndpoint();                              break;                      }
