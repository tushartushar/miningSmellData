Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Engine.Model.Common,NotifierGenerator,C:\repos\Nirklav_TCPChat\Engine\Model\Common\NotifierGenerator.cs,CreateInvoker,Cyclomatic complexity of the method is 8
Long Parameter List,Engine,RecordedEventArgs,C:\repos\Nirklav_TCPChat\Engine\EventArgs\RecordedEventArgs.cs,RecordedEventArgs,The method has 5 parameters. Parameters: data' availableData' channels' bits' frequency
Long Parameter List,Engine.Model.Common.Dto,RoomDto,C:\repos\Nirklav_TCPChat\Engine\Model\Common\Dto\RoomDto.cs,RoomDto,The method has 7 parameters. Parameters: name' admin' users' files' messages' type' connectTo
Long Parameter List,Engine.Network,AsyncPeer,C:\repos\Nirklav_TCPChat\Engine\Network\AsyncPeer.cs,SendMessage,The method has 5 parameters. Parameters: peerId' id' content' rawData' unreliable
Long Statement,Engine.Api.Client,ClientCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Client\ClientCommand.cs,Run,The length of the statement  "          throw new ModelException(ErrorCode.IllegalInvoker' string.Format("Command cannot be runned from server package. {0}"' GetType().FullName)); " is 139.
Long Statement,Engine.Api.Client,ClientCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Client\ClientCommand.cs,Run,The length of the statement  "          throw new ModelException(ErrorCode.IllegalInvoker' string.Format("Command cannot be runned from peer package. {0}"' GetType().FullName)); " is 137.
Long Statement,Engine.Api.Client.Files,ClientAddFileAction,C:\repos\Nirklav_TCPChat\Engine\Api\Client\Files\ClientAddFileAction.cs,Perform,The length of the statement  "        var sendingContent = new ServerAddFileToRoomCommand.MessageContent { RoomName = _roomName' File = posted.File.ToDto() }; " is 120.
Long Statement,Engine.Api.Client.Messages,ClientSendMessageAction,C:\repos\Nirklav_TCPChat\Engine\Api\Client\Messages\ClientSendMessageAction.cs,Perform,The length of the statement  "      var sendingContent = new ServerSendRoomMessageCommand.MessageContent { RoomName = _roomName' MessageId = _messageId' Text = _text }; " is 132.
Long Statement,Engine.Api.Server.Messages,ServerSendSystemMessageAction,C:\repos\Nirklav_TCPChat\Engine\Api\Server\Messages\ServerSendSystemMessageAction.cs,Perform,The length of the statement  "      var sendingContent = new ClientOutSystemMessageCommand.MessageContent { Message = _message' FormatParams = _formatParams }; " is 123.
Long Statement,Engine.Api.Client.P2P,ClientWaitPeerConnectionCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Client\P2P\ClientWaitPeerConnectionCommand.cs,OnRun,The length of the statement  "      ClientModel.Logger.WriteDebug("ClientWaitPeerConnectionCommand: {0}|{1}|{2}|{3}"' sendingContent.PeerIPAddress' sendingContent.PeerPort' sendingContent.ReceiverNick' sendingContent.RemoteInfo.Nick); " is 198.
Long Statement,Engine.Api.Server.Admin,ServerAdminCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Server\Admin\ServerAdminCommand.cs,ClearRoom,The length of the statement  "        ServerModel.Api.Perform(new ServerSendSystemMessageAction(args.ConnectionId' SystemMessageId.TextCommandInvalidParams)); " is 120.
Long Statement,Engine.Api.Server.Admin,ServerAdminCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Server\Admin\ServerAdminCommand.cs,ClearRoom,The length of the statement  "          ServerModel.Api.Perform(new ServerSendSystemMessageAction(args.ConnectionId' SystemMessageId.TextCommandInvalidParams)); " is 120.
Long Statement,Engine.Api.Server.Admin,ServerAdminCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Server\Admin\ServerAdminCommand.cs,Help,The length of the statement  "      ServerModel.Api.Perform(new ServerSendSystemMessageAction(args.ConnectionId' SystemMessageId.TextCommandsList' commandsBuilder.ToString())); " is 140.
Long Statement,Engine.Api.Server.Admin,ServerAdminCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Server\Admin\ServerAdminCommand.cs,Kick,The length of the statement  "        ServerModel.Api.Perform(new ServerSendSystemMessageAction(args.ConnectionId' SystemMessageId.TextCommandInvalidParams)); " is 120.
Long Statement,Engine.Api.Server.Admin,ServerAdminCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Server\Admin\ServerAdminCommand.cs,Kick,The length of the statement  "          ServerModel.Api.Perform(new ServerSendSystemMessageAction(args.ConnectionId' SystemMessageId.TextCommandInvalidParams)); " is 120.
Long Statement,Engine.Api.Server.Registrations,ServerRegisterCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Server\Registrations\ServerRegisterCommand.cs,SendFail,The length of the statement  "      var regResponseContent = new ClientRegistrationResponseCommand.MessageContent { Registered = false' Message = message }; " is 120.
Long Statement,Engine.Api.Server,ServerCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Server\ServerCommand.cs,Run,The length of the statement  "        throw new ModelException(ErrorCode.IllegalInvoker' string.Format("For the server command ConnectionId is required {0}"' GetType().FullName)); " is 141.
Long Statement,Engine.Api.Server.Rooms,ServerSetRoomAdminCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Server\Rooms\ServerSetRoomAdminCommand.cs,OnRun,The length of the statement  "        ServerModel.Api.Perform(new ServerSendSystemMessageAction(content.NewAdmin' SystemMessageId.RoomAdminChanged' room.Name)); " is 122.
Long Statement,Engine.Model.Common,NotifierGenerator,C:\repos\Nirklav_TCPChat\Engine\Model\Common\NotifierGenerator.cs,CreateEvents,The length of the statement  "        var invokeBuilder = builder.DefineMethod(InvokeEventPrefix + eventInfo.Name' MethodAttributes.Public' null' parameters); " is 120.
Long Statement,Engine.Model.Common,NotifierGenerator,C:\repos\Nirklav_TCPChat\Engine\Model\Common\NotifierGenerator.cs,AddEvent,The length of the statement  "      var add = typeof(NotifierEvents).GetMethod("Add"' BindingFlags.Instance | BindingFlags.NonPublic).MakeGenericMethod(eventGenericArg); " is 133.
Long Statement,Engine.Model.Common,NotifierGenerator,C:\repos\Nirklav_TCPChat\Engine\Model\Common\NotifierGenerator.cs,AddEvent,The length of the statement  "      var remove = typeof(NotifierEvents).GetMethod("Remove"' BindingFlags.Instance | BindingFlags.NonPublic).MakeGenericMethod(eventGenericArg); " is 139.
Long Statement,Engine.Model.Common,NotifierGenerator,C:\repos\Nirklav_TCPChat\Engine\Model\Common\NotifierGenerator.cs,GenerateEventMethod,The length of the statement  "      var methodBuilder = builder.DefineMethod(overriding.Name' MethodAttributes.Public | MethodAttributes.Virtual' overriding.ReturnType' methodParameters); " is 151.
Long Statement,Engine.Model.Common,NotifierGenerator,C:\repos\Nirklav_TCPChat\Engine\Model\Common\NotifierGenerator.cs,CreateInvoker,The length of the statement  "      var getEnumerator = typeof(IEnumerable<object>).GetMethod("GetEnumerator"' BindingFlags.Instance | BindingFlags.Public); " is 120.
Long Statement,Engine.Model.Common,NotifierGenerator,C:\repos\Nirklav_TCPChat\Engine\Model\Common\NotifierGenerator.cs,CreateInvoker,The length of the statement  "        var methodBuilder = builder.DefineMethod(method.Name' MethodAttributes.Public | MethodAttributes.Virtual' returnType' methodParameters); " is 136.
Long Statement,Engine.Network,AsyncPeer,C:\repos\Nirklav_TCPChat\Engine\Network\AsyncPeer.cs,ConnectToService,The length of the statement  "      if (Interlocked.CompareExchange(ref _state' (int)PeerState.ConnectedToService' (int)PeerState.NotConnected) != (int)PeerState.NotConnected) " is 139.
Long Statement,Engine.Network,AsyncPeer,C:\repos\Nirklav_TCPChat\Engine\Network\AsyncPeer.cs,WaitConnection,The length of the statement  "      int oldState = Interlocked.CompareExchange(ref _state' (int)PeerState.ConnectedToPeers' (int)PeerState.ConnectedToService); " is 123.
Long Statement,Engine.Network,AsyncPeer,C:\repos\Nirklav_TCPChat\Engine\Network\AsyncPeer.cs,ConnectToPeer,The length of the statement  "      int oldState = Interlocked.CompareExchange(ref _state' (int)PeerState.ConnectedToPeers' (int)PeerState.ConnectedToService); " is 123.
Long Statement,Engine.Network,AsyncPeer,C:\repos\Nirklav_TCPChat\Engine\Network\AsyncPeer.cs,OnPeerConnected,The length of the statement  "        _logger.WriteWarning("ConnectionId is null [Message: {0}' SenderEndPoint: {1}]"' message.ToString()' message.SenderEndPoint); " is 125.
Long Statement,Engine.Network,P2PService,C:\repos\Nirklav_TCPChat\Engine\Network\P2PService.cs,TryDoneAllRequest,The length of the statement  "            _api.Perform(new ServerIntroduceConnectionsAction(request.SenderId' senderEndPoint' request.RequestId' requestEndPoint)); " is 121.
Long Statement,Engine.Plugins,PluginInfoLoader,C:\repos\Nirklav_TCPChat\Engine\Plugins\PluginInfoLoader.cs,LoadFrom,The length of the statement  "      permmisions.AddPermission(new FileIOPermission(FileIOPermissionAccess.PathDiscovery | FileIOPermissionAccess.Read' inputPluginLibs)); " is 133.
Long Statement,Engine.Plugins,PluginManager<TPlugin;TModel;TCommand>,C:\repos\Nirklav_TCPChat\Engine\Plugins\PluginManager.cs,LoadPlugin,The length of the statement  "        var domain = AppDomain.CreateDomain(domainName' null' domainSetup' permissions' engineStrongName' binSerializerStrongName); " is 123.
Long Statement,Engine.Plugins,PluginManager<TPlugin;TModel;TCommand>,C:\repos\Nirklav_TCPChat\Engine\Plugins\PluginManager.cs,OnPluginLoaded,The length of the statement  "        NotifierEvents = new Dictionary<string' object>(NotifierEvents); // Create new (NotifierEvents.Values returned from outside) " is 124.
Long Statement,Engine.Plugins,PluginManager<TPlugin;TModel;TCommand>,C:\repos\Nirklav_TCPChat\Engine\Plugins\PluginManager.cs,OnPluginLoaded,The length of the statement  "          throw new ArgumentException(string.Format("In manager already loaded plugin with same command id [CommandId: {0}]"' command.Id)); " is 129.
Long Statement,Engine.Plugins,PluginManager<TPlugin;TModel;TCommand>,C:\repos\Nirklav_TCPChat\Engine\Plugins\PluginManager.cs,OnPluginUnlodaing,The length of the statement  "      NotifierEvents = new Dictionary<string' object>(NotifierEvents); // Create new (NotifierEvents.Values returned from outside) " is 124.
Complex Conditional,Engine.Network,Connection,C:\repos\Nirklav_TCPChat\Engine\Network\Connection.cs,GetIpAddress,The conditional expression  "ip.AddressFamily == type             && !IPAddress.IsLoopback(ip)             && !ip.IsIPv6LinkLocal             && !ip.IsIPv6SiteLocal             && !ip.IsIPv6Multicast"  is complex.
Magic Number,Engine.Api.Client.Files,ClientWriteFilePartCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Client\Files\ClientWriteFilePartCommand.cs,OnRun,The following statement contains a magic number: using (var client = ClientModel.Get())        {          var chat = client.Chat;            var downloading = chat.TryGetFileDownload(fileId);          if (downloading == null)            return;            var stream = downloading.WriteStream;          var filePart = args.Unpacked.RawData;          var filePartLength = args.Unpacked.RawLength;            if (stream.Position == content.StartPartPosition)            stream.Write(filePart' 0' filePartLength);            if (stream.Position >= content.File.Size)          {            chat.RemoveFileDownload(fileId);              progress = 100;          }          else          {            var sendingContent = new ClientReadFilePartCommand.MessageContent            {              File = content.File'              Length = AsyncClient.DefaultFilePartSize'              RoomName = content.RoomName'              StartPartPosition = stream.Position'            };              ClientModel.Peer.SendMessage(args.ConnectionId' ClientReadFilePartCommand.CommandId' sendingContent);              progress = (int)((stream.Position * 100) / content.File.Size);          }        }
Magic Number,Engine.Api.Client.Files,ClientWriteFilePartCommand,C:\repos\Nirklav_TCPChat\Engine\Api\Client\Files\ClientWriteFilePartCommand.cs,OnRun,The following statement contains a magic number: using (var client = ClientModel.Get())        {          var chat = client.Chat;            var downloading = chat.TryGetFileDownload(fileId);          if (downloading == null)            return;            var stream = downloading.WriteStream;          var filePart = args.Unpacked.RawData;          var filePartLength = args.Unpacked.RawLength;            if (stream.Position == content.StartPartPosition)            stream.Write(filePart' 0' filePartLength);            if (stream.Position >= content.File.Size)          {            chat.RemoveFileDownload(fileId);              progress = 100;          }          else          {            var sendingContent = new ClientReadFilePartCommand.MessageContent            {              File = content.File'              Length = AsyncClient.DefaultFilePartSize'              RoomName = content.RoomName'              StartPartPosition = stream.Position'            };              ClientModel.Peer.SendMessage(args.ConnectionId' ClientReadFilePartCommand.CommandId' sendingContent);              progress = (int)((stream.Position * 100) / content.File.Size);          }        }
Magic Number,Engine,RecordedEventArgs,C:\repos\Nirklav_TCPChat\Engine\EventArgs\RecordedEventArgs.cs,RecordedEventArgs,The following statement contains a magic number: DataSize = availableData * channels * (bits / 8);
Magic Number,Engine.Helpers,Crypter,C:\repos\Nirklav_TCPChat\Engine\Helpers\Crypter.cs,Crypter,The following statement contains a magic number: _algorithm = new AesCryptoServiceProvider()        {          KeySize = 256'          Mode = CipherMode.CBC'          Padding = PaddingMode.PKCS7        };
Magic Number,Engine.Helpers,Crypter,C:\repos\Nirklav_TCPChat\Engine\Helpers\Crypter.cs,Decrypt,The following statement contains a magic number: using (var reader = new BinaryReader(inputWrapper))        {          _algorithm.IV = reader.ReadBytes(_algorithm.BlockSize / 8);            using (var transform = _algorithm.CreateDecryptor())          using (var decryptor = new CryptoStream(inputWrapper' transform' CryptoStreamMode.Read))          {            var dataBuffer = new byte[BufferSize];            while (inputWrapper.Position < inputWrapper.Length)            {              var readed = decryptor.Read(dataBuffer' 0' BufferSize);              outputStream.Write(dataBuffer' 0' readed);            }          }        }
Magic Number,Engine.Helpers,Logger,C:\repos\Nirklav_TCPChat\Engine\Helpers\Logger.cs,CreateLogMessage,The following statement contains a magic number: var builder = new StringBuilder(200);
Magic Number,Engine.Audio.OpenAL,SourceDescription,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALPlayer.cs,GetFormat,The following statement contains a magic number: if (pack.Channels != 2 && pack.Channels != 1)            throw new ArgumentException("channels");
Magic Number,Engine.Audio.OpenAL,SourceDescription,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALPlayer.cs,GetFormat,The following statement contains a magic number: if (pack.BitPerChannel != 8 && pack.BitPerChannel != 16)            throw new ArgumentException("bitPerChannel");
Magic Number,Engine.Audio.OpenAL,SourceDescription,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALPlayer.cs,GetFormat,The following statement contains a magic number: if (pack.BitPerChannel != 8 && pack.BitPerChannel != 16)            throw new ArgumentException("bitPerChannel");
Magic Number,Engine.Audio.OpenAL,SourceDescription,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALPlayer.cs,GetFormat,The following statement contains a magic number: if (pack.Channels == 1)            return pack.BitPerChannel == 8 ? ALFormat.Mono8 : ALFormat.Mono16;          else            return pack.BitPerChannel == 8 ? ALFormat.Stereo8 : ALFormat.Stereo16;
Magic Number,Engine.Audio.OpenAL,SourceDescription,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALPlayer.cs,GetFormat,The following statement contains a magic number: if (pack.Channels == 1)            return pack.BitPerChannel == 8 ? ALFormat.Mono8 : ALFormat.Mono16;          else            return pack.BitPerChannel == 8 ? ALFormat.Stereo8 : ALFormat.Stereo16;
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,OpenALRecorder,The following statement contains a magic number: Initialize(deviceName' new AudioQuality(1' 16' 44100));
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,OpenALRecorder,The following statement contains a magic number: Initialize(deviceName' new AudioQuality(1' 16' 44100));
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,Initialize,The following statement contains a magic number: try        {          _quality = quality;          _samplesSize = DefaultBufferSize;            ALFormat format;            if (quality.Channels == 1)            format = quality.Bits == 8 ? ALFormat.Mono8 : ALFormat.Mono16;          else            format = quality.Bits == 8 ? ALFormat.Stereo8 : ALFormat.Stereo16;            lock (_syncObj)          {            _buffer = new byte[quality.Channels * (quality.Bits / 8) * _samplesSize * 2];              if (string.IsNullOrEmpty(deviceName))              deviceName = AudioCapture.DefaultDevice;              if (!AudioCapture.AvailableDevices.Contains(deviceName))              deviceName = AudioCapture.DefaultDevice;              _capture = new AudioCapture(deviceName' quality.Frequency' format' _samplesSize);          }        }        catch (Exception e)        {          if (_capture != null)            _capture.Dispose();            _capture = null;            ClientModel.Logger.Write(e);          throw new ModelException(ErrorCode.AudioNotEnabled' "Audio recorder do not initialized."' e' deviceName);        }
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,Initialize,The following statement contains a magic number: try        {          _quality = quality;          _samplesSize = DefaultBufferSize;            ALFormat format;            if (quality.Channels == 1)            format = quality.Bits == 8 ? ALFormat.Mono8 : ALFormat.Mono16;          else            format = quality.Bits == 8 ? ALFormat.Stereo8 : ALFormat.Stereo16;            lock (_syncObj)          {            _buffer = new byte[quality.Channels * (quality.Bits / 8) * _samplesSize * 2];              if (string.IsNullOrEmpty(deviceName))              deviceName = AudioCapture.DefaultDevice;              if (!AudioCapture.AvailableDevices.Contains(deviceName))              deviceName = AudioCapture.DefaultDevice;              _capture = new AudioCapture(deviceName' quality.Frequency' format' _samplesSize);          }        }        catch (Exception e)        {          if (_capture != null)            _capture.Dispose();            _capture = null;            ClientModel.Logger.Write(e);          throw new ModelException(ErrorCode.AudioNotEnabled' "Audio recorder do not initialized."' e' deviceName);        }
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,Initialize,The following statement contains a magic number: try        {          _quality = quality;          _samplesSize = DefaultBufferSize;            ALFormat format;            if (quality.Channels == 1)            format = quality.Bits == 8 ? ALFormat.Mono8 : ALFormat.Mono16;          else            format = quality.Bits == 8 ? ALFormat.Stereo8 : ALFormat.Stereo16;            lock (_syncObj)          {            _buffer = new byte[quality.Channels * (quality.Bits / 8) * _samplesSize * 2];              if (string.IsNullOrEmpty(deviceName))              deviceName = AudioCapture.DefaultDevice;              if (!AudioCapture.AvailableDevices.Contains(deviceName))              deviceName = AudioCapture.DefaultDevice;              _capture = new AudioCapture(deviceName' quality.Frequency' format' _samplesSize);          }        }        catch (Exception e)        {          if (_capture != null)            _capture.Dispose();            _capture = null;            ClientModel.Logger.Write(e);          throw new ModelException(ErrorCode.AudioNotEnabled' "Audio recorder do not initialized."' e' deviceName);        }
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,Initialize,The following statement contains a magic number: try        {          _quality = quality;          _samplesSize = DefaultBufferSize;            ALFormat format;            if (quality.Channels == 1)            format = quality.Bits == 8 ? ALFormat.Mono8 : ALFormat.Mono16;          else            format = quality.Bits == 8 ? ALFormat.Stereo8 : ALFormat.Stereo16;            lock (_syncObj)          {            _buffer = new byte[quality.Channels * (quality.Bits / 8) * _samplesSize * 2];              if (string.IsNullOrEmpty(deviceName))              deviceName = AudioCapture.DefaultDevice;              if (!AudioCapture.AvailableDevices.Contains(deviceName))              deviceName = AudioCapture.DefaultDevice;              _capture = new AudioCapture(deviceName' quality.Frequency' format' _samplesSize);          }        }        catch (Exception e)        {          if (_capture != null)            _capture.Dispose();            _capture = null;            ClientModel.Logger.Write(e);          throw new ModelException(ErrorCode.AudioNotEnabled' "Audio recorder do not initialized."' e' deviceName);        }
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,OnRecording,The following statement contains a magic number: lock (_syncObj)        {          if (_capture == null)            return;            var availableSamples = _capture.AvailableSamples;          if (availableSamples > 0)          {            var availableDataSize = availableSamples * _quality.Channels * (_quality.Bits / 8);            if (availableDataSize > _buffer.Length)              _buffer = new byte[availableDataSize * 2];              _capture.ReadSamples(_buffer' availableSamples);              var temp = Interlocked.CompareExchange(ref _recorded' null' null);            if (temp != null)              temp(this' new RecordedEventArgs(_buffer' availableSamples' _quality.Channels' _quality.Bits' _quality.Frequency));          }            if (_capture.IsRunning)          {            _captureTimer.Change(GetTimerTimeOut()' -1);          }          else          {            _captureTimer.Dispose();            _captureTimer = null;          }        }
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,OnRecording,The following statement contains a magic number: lock (_syncObj)        {          if (_capture == null)            return;            var availableSamples = _capture.AvailableSamples;          if (availableSamples > 0)          {            var availableDataSize = availableSamples * _quality.Channels * (_quality.Bits / 8);            if (availableDataSize > _buffer.Length)              _buffer = new byte[availableDataSize * 2];              _capture.ReadSamples(_buffer' availableSamples);              var temp = Interlocked.CompareExchange(ref _recorded' null' null);            if (temp != null)              temp(this' new RecordedEventArgs(_buffer' availableSamples' _quality.Channels' _quality.Bits' _quality.Frequency));          }            if (_capture.IsRunning)          {            _captureTimer.Change(GetTimerTimeOut()' -1);          }          else          {            _captureTimer.Dispose();            _captureTimer = null;          }        }
Magic Number,Engine.Audio.OpenAL,OpenALRecorder,C:\repos\Nirklav_TCPChat\Engine\Audio\OpenAL\OpenALRecorder.cs,GetTimerTimeOut,The following statement contains a magic number: var bufferFillMs = (double)_samplesSize * 1000 / _quality.Frequency;
Magic Number,Engine.Model.Common,NotifierGenerator,C:\repos\Nirklav_TCPChat\Engine\Model\Common\NotifierGenerator.cs,CreateInvoker,The following statement contains a magic number: foreach (var method in methods)        {          var eventInvoker = eventsType.GetMethod(InvokeEventPrefix + method.Name' BindingFlags.Instance | BindingFlags.Public);            var returnType = method.ReturnType;          var methodParameters = method            .GetParameters()            .Select(p => p.ParameterType)            .ToArray();            if (methodParameters.Length == 1)          {            if (!typeof(EventArgs).IsAssignableFrom(methodParameters[0]))              throw new InvalidOperationException("First argument should be EventArgs");          }          else if (methodParameters.Length == 2)          {            if (!typeof(EventArgs).IsAssignableFrom(methodParameters[0]))              throw new InvalidOperationException("First argument should be EventArgs");              if (typeof(Action<Exception>) != methodParameters[1])              throw new InvalidOperationException("Second argument should be Action<Exception>");          }          else            throw new InvalidOperationException("Invalid parameters count");            var methodBuilder = builder.DefineMethod(method.Name' MethodAttributes.Public | MethodAttributes.Virtual' returnType' methodParameters);          builder.DefineMethodOverride(methodBuilder' method);            var il = methodBuilder.GetILGenerator();            var cycleLabel = il.DefineLabel();          var donotExitLabel = il.DefineLabel();          var exitLabel = il.DefineLabel();            il.DeclareLocal(typeof(IEnumerator<object>));            // Set enumerator local          il.Emit(OpCodes.Ldarg_0);                 // Load notifier          il.Emit(OpCodes.Callvirt' getEvents);     // Call get event method (returns IEnumearable)          il.Emit(OpCodes.Callvirt' getEnumerator); // Call get enumerator method          il.Emit(OpCodes.Stloc_0);                 // Set enumerator to local            il.BeginExceptionBlock();            il.MarkLabel(cycleLabel);            il.Emit(OpCodes.Ldloc_0);                  // Load enumerator          il.Emit(OpCodes.Callvirt' moveNext);       // Call move next          il.Emit(OpCodes.Brtrue_S' donotExitLabel); // Check move next result' if false - break method          il.Emit(OpCodes.Leave_S' exitLabel);       // Exit and call finally block            il.MarkLabel(donotExitLabel);            il.Emit(OpCodes.Ldloc_0);                          // Load enumerator          il.Emit(OpCodes.Callvirt' current.GetGetMethod()); // Get current          il.Emit(OpCodes.Ldnull);                           // Load null (sender)          il.Emit(OpCodes.Ldarg_1);                          // Load args            if (methodParameters.Length == 1)                  // Load callback            il.Emit(OpCodes.Ldnull);            else            il.Emit(OpCodes.Ldarg_2);            il.Emit(OpCodes.Callvirt' eventInvoker);           // Call invoker            il.Emit(OpCodes.Br' cycleLabel);                   // Process next element            il.BeginFinallyBlock();            // Call enumerator dispose          il.Emit(OpCodes.Ldloc_0);          il.Emit(OpCodes.Callvirt' dispose);            il.EndExceptionBlock();            il.MarkLabel(exitLabel);          il.Emit(OpCodes.Ret);        }
Magic Number,Engine.Model.Common.Entities,AudioQuality,C:\repos\Nirklav_TCPChat\Engine\Model\Common\Entities\AudioQuality.cs,AudioQuality,The following statement contains a magic number: if (channels != 2 && channels != 1)          throw new ArgumentException("channels");
Magic Number,Engine.Model.Common.Entities,AudioQuality,C:\repos\Nirklav_TCPChat\Engine\Model\Common\Entities\AudioQuality.cs,AudioQuality,The following statement contains a magic number: if (bits != 8 && bits != 16)          throw new ArgumentException("bitPerChannel");
Magic Number,Engine.Model.Common.Entities,AudioQuality,C:\repos\Nirklav_TCPChat\Engine\Model\Common\Entities\AudioQuality.cs,AudioQuality,The following statement contains a magic number: if (bits != 8 && bits != 16)          throw new ArgumentException("bitPerChannel");
Magic Number,Engine.Model.Common.Entities,AudioQuality,C:\repos\Nirklav_TCPChat\Engine\Model\Common\Entities\AudioQuality.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode ^ 397) * Bits;
Magic Number,Engine.Model.Common.Entities,AudioQuality,C:\repos\Nirklav_TCPChat\Engine\Model\Common\Entities\AudioQuality.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode ^ 397) * Frequency;
Magic Number,Engine.Model.Common.Entities,FileId,C:\repos\Nirklav_TCPChat\Engine\Model\Common\Entities\FileId.cs,GetHashCode,The following statement contains a magic number: return (Id * 397) ^ Owner.GetHashCode();
Magic Number,Engine.Network,P2PService,C:\repos\Nirklav_TCPChat\Engine\Network\P2PService.cs,P2PService,The following statement contains a magic number: config.MaximumConnections = 100;
Missing Default,Engine.Network,AsyncPeer,C:\repos\Nirklav_TCPChat\Engine\Network\AsyncPeer.cs,OnReceive,The following switch statement is missing a default case: switch (message.MessageType)          {            case NetIncomingMessageType.ErrorMessage:            case NetIncomingMessageType.WarningMessage:              var error = new NetException(message.ReadString());              _notifier.AsyncError(new AsyncErrorEventArgs(error));              break;              case NetIncomingMessageType.ConnectionApproval:              OnApprove(message);              break;              case NetIncomingMessageType.StatusChanged:              NetConnectionStatus status = (NetConnectionStatus)message.ReadByte();                if (status == NetConnectionStatus.Connected && _state == (int)PeerState.ConnectedToPeers)                OnPeerConnected(message);                if (status == NetConnectionStatus.Connected && _state == (int)PeerState.ConnectedToService)                OnServiceConnected(message);                if (status == NetConnectionStatus.Disconnecting || status == NetConnectionStatus.Disconnected)                OnDisconnected(message);              break;              case NetIncomingMessageType.Data:            case NetIncomingMessageType.UnconnectedData:              if (_state == (int)PeerState.ConnectedToPeers)                OnPackageReceived(message);              break;          }
Missing Default,Engine.Network,P2PService,C:\repos\Nirklav_TCPChat\Engine\Network\P2PService.cs,OnReceive,The following switch statement is missing a default case: switch (message.MessageType)            {              case NetIncomingMessageType.ErrorMessage:              case NetIncomingMessageType.WarningMessage:                _logger.Write(new NetException(message.ReadString()));                break;                case NetIncomingMessageType.StatusChanged:                var status = (NetConnectionStatus)message.ReadByte();                  if (status != NetConnectionStatus.Connected)                  break;                  var hailMessage = message.SenderConnection.RemoteHailMessage;                if (hailMessage == null)                  continue;                  var id = hailMessage.ReadString();                var localPoint = hailMessage.ReadIPEndPoint();                var publicPoint = message.SenderEndPoint;                  lock (_syncObject)                {                  _clientsEndPoints.Add(id' new ClientDescription(localPoint' publicPoint));                    TryDoneAllRequest();                }                break;            }
