Implementation smell,Namespace,Class,File,Method,Description
Long Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,The method has 149 lines of code.
Long Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Divide,The method has 128 lines of code.
Long Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ModPow,The method has 161 lines of code.
Long Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Remainder,The method has 104 lines of code.
Long Method,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The method has 131 lines of code.
Long Method,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedHandshake,The method has 153 lines of code.
Long Method,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The method has 206 lines of code.
Long Method,Lidgren.Network,NetReliableSenderChannel,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetReliableSenderChannel.cs,ReceiveAcknowledge,The method has 103 lines of code.
Complex Method,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,NetAESEncryption,Cyclomatic complexity of the method is 9
Complex Method,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,NetDESEncryption,Cyclomatic complexity of the method is 9
Complex Method,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,NetRC2Encryption,Cyclomatic complexity of the method is 9
Complex Method,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,NetTripleDESEncryption,Cyclomatic complexity of the method is 9
Complex Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,Cyclomatic complexity of the method is 14
Complex Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MakeMagnitude,Cyclomatic complexity of the method is 8
Complex Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Divide,Cyclomatic complexity of the method is 18
Complex Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ModPow,Cyclomatic complexity of the method is 20
Complex Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Remainder,Cyclomatic complexity of the method is 17
Complex Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Remainder,Cyclomatic complexity of the method is 8
Complex Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToByteArray,Cyclomatic complexity of the method is 10
Complex Method,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToString,Cyclomatic complexity of the method is 14
Complex Method,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,Cyclomatic complexity of the method is 9
Complex Method,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,Cyclomatic complexity of the method is 17
Complex Method,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedLibraryMessage,Cyclomatic complexity of the method is 9
Complex Method,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,UnconnectedHeartbeat,Cyclomatic complexity of the method is 13
Complex Method,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedHandshake,Cyclomatic complexity of the method is 24
Complex Method,Lidgren.Network,NetConnectionStatistics,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnectionStatistics.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,ReadHeader,Cyclomatic complexity of the method is 9
Complex Method,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,ExecutePeerShutdown,Cyclomatic complexity of the method is 8
Complex Method,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,Cyclomatic complexity of the method is 14
Complex Method,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,ReceivedUnconnectedLibraryMessage,Cyclomatic complexity of the method is 14
Complex Method,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendMessage,Cyclomatic complexity of the method is 10
Complex Method,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,GetNetworkInterface,Cyclomatic complexity of the method is 10
Long Parameter List,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The method has 5 parameters. Parameters: a' x' y' m' mQuote
Long Parameter List,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadBytes,The method has 5 parameters. Parameters: fromBuffer' numberOfBytes' readBitOffset' destination' destinationByteOffset
Long Parameter List,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteBytes,The method has 5 parameters. Parameters: source' sourceByteOffset' numberOfBytes' destination' destBitOffset
Long Parameter List,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,WriteHeader,The method has 6 parameters. Parameters: destination' ptr' group' totalBits' chunkByteSize' chunkNumber
Long Parameter List,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,ReadHeader,The method has 6 parameters. Parameters: buffer' ptr' group' totalBits' chunkByteSize' chunkNumber
Long Parameter List,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Introduce,The method has 5 parameters. Parameters: hostInternal' hostExternal' clientInternal' clientExternal' token
Long Parameter List,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,ReceivedUnconnectedLibraryMessage,The method has 5 parameters. Parameters: now' senderEndPoint' tp' ptr' payloadByteLength
Long Identifier,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,Encrypt,The length of the parameter tripleDESCryptoServiceProvider is 30.
Long Identifier,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,Decrypt,The length of the parameter tripleDESCryptoServiceProvider is 30.
Long Identifier,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,,The length of the parameter m_defaultOutgoingMessageCapacity is 32.
Long Statement,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,Encrypt,The length of the statement  "				using (AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider { KeySize = m_bitSize' Mode = CipherMode.CBC })" is 135.
Long Statement,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,Decrypt,The length of the statement  "				using (AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider { KeySize = m_bitSize' Mode = CipherMode.CBC })" is 135.
Long Statement,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,Encrypt,The length of the statement  "				using (DESCryptoServiceProvider desCryptoServiceProvider = new DESCryptoServiceProvider { KeySize = m_bitSize' Mode = CipherMode.CBC })" is 135.
Long Statement,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,Decrypt,The length of the statement  "				using (DESCryptoServiceProvider desCryptoServiceProvider = new DESCryptoServiceProvider { KeySize = m_bitSize' Mode = CipherMode.CBC })" is 135.
Long Statement,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,Encrypt,The length of the statement  "				using (RC2CryptoServiceProvider rc2CryptoServiceProvider = new RC2CryptoServiceProvider { KeySize = m_bitSize' Mode = CipherMode.CBC })" is 135.
Long Statement,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,Decrypt,The length of the statement  "				using (RC2CryptoServiceProvider rc2CryptoServiceProvider = new RC2CryptoServiceProvider { KeySize = m_bitSize' Mode = CipherMode.CBC })" is 135.
Long Statement,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,Encrypt,The length of the statement  "				using (TripleDESCryptoServiceProvider tripleDESCryptoServiceProvider = new TripleDESCryptoServiceProvider { KeySize = m_bitSize' Mode = CipherMode.CBC })" is 153.
Long Statement,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,Decrypt,The length of the statement  "				using (TripleDESCryptoServiceProvider tripleDESCryptoServiceProvider = new TripleDESCryptoServiceProvider { KeySize = m_bitSize' Mode = CipherMode.CBC })" is 153.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt64,The length of the statement  "			NetException.Assert(((numberOfBits > 0) && (numberOfBits < 65))' "ReadInt64(bits) can only read between 1 and 64 bits");" is 120.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt64,The length of the statement  "			NetException.Assert(((numberOfBits > 0) && (numberOfBits <= 64))' "ReadInt64(bits) can only read between 1 and 64 bits");" is 121.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadAllFields,The length of the statement  "			ReadAllFields(target' BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 120.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadAllProperties,The length of the statement  "			ReadAllProperties(target' BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 124.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The length of the statement  "			NetException.Assert((numberOfBits > 0 && numberOfBits <= 8)' "Write(byte' numberOfBits) can only write between 1 and 8 bits");" is 126.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The length of the statement  "			NetException.Assert((numberOfBits > 0 && numberOfBits <= 16)' "Write(ushort' numberOfBits) can only write between 1 and 16 bits");" is 130.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The length of the statement  "			NetException.Assert((numberOfBits > 0 && numberOfBits <= 32)' "Write(uint' numberOfBits) can only write between 1 and 32 bits");" is 128.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The length of the statement  "			NetException.Assert((numberOfBits > 0 && numberOfBits <= 32)' "Write(int' numberOfBits) can only write between 1 and 32 bits");" is 127.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteSignedSingle,The length of the statement  "			NetException.Assert(((value >= -1.0) && (value <= 1.0))' " WriteSignedSingle() must be passed a float in the range -1 to 1; val is " + value);" is 142.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteUnitSingle,The length of the statement  "			NetException.Assert(((value >= 0.0) && (value <= 1.0))' " WriteUnitSingle() must be passed a float in the range 0 to 1; val is " + value);" is 138.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteRangedSingle,The length of the statement  "			NetException.Assert(((value >= min) && (value <= max))' " WriteRangedSingle() must be passed a float in the range MIN to MAX; val is " + value);" is 144.
Long Statement,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteAllProperties,The length of the statement  "			WriteAllProperties(ob' BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);" is 121.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SetStatus,The length of the statement  "				NetIncomingMessage info = m_peer.CreateIncomingMessage(NetIncomingMessageType.StatusChanged' 4 + reason.Length + (reason.Length > 126 ? 2 : 1));" is 144.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The length of the statement  "			NetException.Assert(m_status != NetConnectionStatus.InitiatedConnect && m_status != NetConnectionStatus.RespondedConnect);" is 122.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The length of the statement  "			// Note: at this point m_sendBufferWritePtr and m_sendBufferNumMessages may be non-null; resends may already be queued up" is 121.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,QueueSendMessage,The length of the statement  "				NetException.Assert(m_sendBufferWritePtr > 0 && m_sendBufferNumMessages > 0); // or else the message should have been fragmented earlier" is 136.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedLibraryMessage,The length of the statement  "						// need to enqueue this and handle it in the netconnection heartbeat; so be able to send resends together with normal sends" is 123.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedLibraryMessage,The length of the statement  "					// Unusual situation where server is actually already known' but got a nat introduction - oh well' lets handle it as usual" is 122.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SendConnectResponse,The length of the statement  "			NetOutgoingMessage om = m_peer.CreateMessage(m_peerConfiguration.AppIdentifier.Length + 13 + (m_localHailMessage == null ? 0 : m_localHailMessage.LengthBytes));" is 160.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SendConnectResponse,The length of the statement  "				m_peer.m_unsentUnconnectedMessages.Enqueue(new NetTuple<System.Net.IPEndPoint' NetOutgoingMessage>(m_remoteEndPoint' om));" is 122.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SendDisconnect,The length of the statement  "				m_peer.m_unsentUnconnectedMessages.Enqueue(new NetTuple<System.Net.IPEndPoint' NetOutgoingMessage>(m_remoteEndPoint' om));" is 122.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,WriteLocalHail,The length of the statement  "						throw new NetException("Hail message too large; can maximally be " + (m_peerConfiguration.m_maximumTransmissionUnit - 10 - om.LengthBytes));" is 140.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedHandshake,The length of the statement  "								NetIncomingMessage appMsg = m_peer.CreateIncomingMessage(NetIncomingMessageType.ConnectionApproval' (m_remoteHailMessage == null ? 0 : m_remoteHailMessage.LengthBytes));" is 169.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedPong,The length of the statement  "				m_peer.LogDebug("Initiated average roundtrip time to " + NetTime.ToReadable(m_averageRoundtripTime) + " Remote time is: " + (now + diff));" is 138.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedPong,The length of the statement  "				m_peer.LogVerbose("Updated average roundtrip time to " + NetTime.ToReadable(m_averageRoundtripTime) + "' remote time to " + (now + m_remoteTimeOffset) + " (ie. diff " + m_remoteTimeOffset + ")");" is 195.
Long Statement,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,InitExpandMTU,The length of the statement  "			m_lastSentMTUAttemptTime = now + m_peerConfiguration.m_expandMTUFrequency + 1.5f + m_averageRoundtripTime; // wait a tiny bit before starting to expand mtu" is 155.
Long Statement,Lidgren.Network,NetConnectionStatistics,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnectionStatistics.cs,ToString,The length of the statement  "			bdr.AppendLine("Received " + m_receivedBytes + " bytes in " + m_receivedMessages + " messages in " + m_receivedPackets + " packets");" is 133.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,DiscoverLocalPeers,The length of the statement  "			m_unsentUnconnectedMessages.Enqueue(new NetTuple<IPEndPoint' NetOutgoingMessage>(new IPEndPoint(IPAddress.Broadcast' serverPort)' om));" is 135.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendDiscoveryResponse,The length of the statement  "				throw new NetException("Cannot send discovery message larger than MTU (currently " + m_configuration.MaximumTransmissionUnit + " bytes)");" is 138.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,HandleReleasedFragment,The length of the statement  "			//LogVerbose("Found fragment #" + chunkNumber + " in group " + group + " offset " + offset + " of total bits " + totalBits + " (total chunks done " + cnt + ")");" is 161.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,RegisterReceivedCallback,The length of the statement  "			m_receiveCallbacks.Add(new NetTuple<SynchronizationContext' SendOrPostCallback>(SynchronizationContext.Current' callback)); " is 123.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,UnregisterReceivedCallback,The length of the statement  "			m_receiveCallbacks.Remove(new NetTuple<SynchronizationContext' SendOrPostCallback>(SynchronizationContext.Current' callback)); " is 126.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The length of the statement  "						// we should shut down the connection; but m_senderRemote seemingly cannot be trusted' so which connection should we shut down?! " is 128.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The length of the statement  "						LogWarning("Malformed packet; stated payload length " + payloadByteLength + "' remaining bytes " + (bytesReceived - ptr)); " is 122.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,VerifyNetworkThread,The length of the statement  "				throw new NetException("Executing on wrong thread! Should be library system thread (is " + ct.Name + " mId " + ct.ManagedThreadId + ")"); " is 137.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendPacket,The length of the statement  "				delay = m_configuration.m_minimumOneWayLatency + (NetRandom.Instance.NextSingle() * m_configuration.m_randomOneWayLatency);" is 123.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Recycle,The length of the statement  "			// TODO: find a way to recycle large message after all fragments has been acknowledged; or? possibly better just to garbage collect them" is 136.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendMessage,The length of the statement  "				throw new NetException("This message has already been sent! Use NetPeer.SendMessage() to send to multiple recipients efficiently");" is 131.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendMessage,The length of the statement  "			int len = NetConstants.UnfragmentedMessageHeaderSize + msg.LengthBytes; // headers + length' faster than calling msg.GetEncodedSize" is 131.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendMessage,The length of the statement  "				throw new NetException("This message has already been sent! Use NetPeer.SendMessage() to send to multiple recipients efficiently");" is 131.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendUnconnectedMessage,The length of the statement  "				throw new NetException("This message has already been sent! Use NetPeer.SendMessage() to send to multiple recipients efficiently");" is 131.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendUnconnectedMessage,The length of the statement  "				throw new NetException("Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTransmissionUnit (currently " + m_configuration.MaximumTransmissionUnit + ")");" is 179.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendUnconnectedMessage,The length of the statement  "				throw new NetException("This message has already been sent! Use NetPeer.SendMessage() to send to multiple recipients efficiently");" is 131.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendUnconnectedMessage,The length of the statement  "				throw new NetException("Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTransmissionUnit (currently " + m_configuration.MaximumTransmissionUnit + ")");" is 179.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendUnconnectedMessage,The length of the statement  "				throw new NetException("This message has already been sent! Use NetPeer.SendMessage() to send to multiple recipients efficiently");" is 131.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendUnconnectedMessage,The length of the statement  "				throw new NetException("Unconnected messages too long! Must be shorter than NetConfiguration.MaximumTransmissionUnit (currently " + m_configuration.MaximumTransmissionUnit + ")");" is 179.
Long Statement,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendUnconnectedToSelf,The length of the statement  "				throw new NetException("This message has already been sent! Use NetPeer.SendMessage() to send to multiple recipients efficiently");" is 131.
Long Statement,Lidgren.Network,NetOutgoingMessage,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetOutgoingMessage.cs,Encode,The length of the statement  "				ptr = NetFragmentationHelper.WriteHeader(intoBuffer' ptr' m_fragmentGroup' m_fragmentGroupTotalBits' m_fragmentChunkByteSize' m_fragmentChunkNumber);" is 149.
Long Statement,Lidgren.Network,NetOutgoingMessage,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetOutgoingMessage.cs,GetEncodedSize,The length of the statement  "				retval += NetFragmentationHelper.GetFragmentationHeaderSize(m_fragmentGroup' m_fragmentGroupTotalBits / 8' m_fragmentChunkByteSize' m_fragmentChunkNumber);" is 155.
Long Statement,Lidgren.Network,NetPeerStatistics,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerStatistics.cs,ToString,The length of the statement  "			bdr.AppendLine("Received " + m_receivedBytes + " bytes in " + m_receivedMessages + " messages in " + m_receivedPackets + " packets");" is 133.
Long Statement,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The length of the statement  "				return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));" is 141.
Long Statement,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The length of the statement  "			return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);" is 128.
Long Statement,Lidgren.Network,NetReliableSenderChannel,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetReliableSenderChannel.cs,GetAllowedSends,The length of the statement  "			int retval = m_windowSize - ((m_sendStart + NetConstants.NumSequenceNumbers) - m_windowStart) % NetConstants.NumSequenceNumbers;" is 128.
Long Statement,Lidgren.Network,NetReliableSenderChannel,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetReliableSenderChannel.cs,Enqueue,The length of the statement  "			int left = m_windowSize - ((m_sendStart + NetConstants.NumSequenceNumbers) - m_windowStart) % NetConstants.NumSequenceNumbers;" is 126.
Long Statement,Lidgren.Network,NetReliableSenderChannel,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetReliableSenderChannel.cs,SendQueuedMessages,The length of the statement  "					//m_connection.m_peer.LogVerbose("Resending due to delay #" + m_storedMessages[i].SequenceNumber + " " + om.ToString());" is 120.
Long Statement,Lidgren.Network,NetReliableSenderChannel,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetReliableSenderChannel.cs,DestoreMessage,The length of the statement  "				throw new NetException("m_storedMessages[" + storeIndex + "].Message is null; sent " + m_storedMessages[storeIndex].NumSent + " times' last time " + (NetTime.Now - m_storedMessages[storeIndex].LastSent) + " seconds ago");" is 221.
Long Statement,Lidgren.Network,NetUnreliableSenderChannel,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUnreliableSenderChannel.cs,Enqueue,The length of the statement  "			int left = m_windowSize - ((m_sendStart + NetConstants.NumSequenceNumbers) - m_windowStart) % NetConstants.NumSequenceNumbers;" is 126.
Long Statement,Lidgren.Network,NetUPnP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUPnP.cs,ExtractServiceUrl,The length of the statement  "			XmlNode node = desc.SelectSingleNode("//tns:service[tns:serviceType=\"urn:schemas-upnp-org:service:" + m_serviceName + ":1\"]/tns:controlURL/text()"' nsMgr);" is 157.
Long Statement,Lidgren.Network,NetUPnP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUPnP.cs,ExtractServiceUrl,The length of the statement  "				node = desc.SelectSingleNode("//tns:service[tns:serviceType=\"urn:schemas-upnp-org:service:" + m_serviceName + ":1\"]/tns:controlURL/text()"' nsMgr);" is 149.
Long Statement,Lidgren.Network,NetUPnP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUPnP.cs,GetExternalIP,The length of the statement  "				XmlDocument xdoc = SOAPRequest(m_serviceUrl' "<u:GetExternalIPAddress xmlns:u=\"urn:schemas-upnp-org:service:" + m_serviceName + ":1\">" +" is 138.
Long Statement,Lidgren.Network,NetUPnP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUPnP.cs,SOAPRequest,The length of the statement  "			"<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" +" is 132.
Long Statement,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,GetNetworkInterface,The length of the statement  "				if (adapter.NetworkInterfaceType == NetworkInterfaceType.Loopback || adapter.NetworkInterfaceType == NetworkInterfaceType.Unknown)" is 130.
Long Statement,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,GetNetworkInterface,The length of the statement  "					if (unicastAddress != null && unicastAddress.Address != null && unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork)" is 131.
Long Statement,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,GetBroadcastAddress,The length of the statement  "			Android.Net.Wifi.WifiManager wifi = (Android.Net.Wifi.WifiManager)Android.App.Application.Context.GetSystemService(Android.App.Activity.WifiService);" is 149.
Long Statement,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,GetBroadcastAddress,The length of the statement  "					if (unicastAddress != null && unicastAddress.Address != null && unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork)" is 131.
Long Statement,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,GetMyAddress,The length of the statement  "				Android.Net.Wifi.WifiManager wifi = (Android.Net.Wifi.WifiManager)Android.App.Application.Context.GetSystemService(Android.App.Activity.WifiService);" is 149.
Long Statement,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,GetMyAddress,The length of the statement  "				if (unicastAddress != null && unicastAddress.Address != null && unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork)" is 131.
Long Statement,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,RelativeSequenceNumber,The length of the statement  "			return (nr - expected + NetConstants.NumSequenceNumbers + (NetConstants.NumSequenceNumbers / 2)) % NetConstants.NumSequenceNumbers - (NetConstants.NumSequenceNumbers / 2);" is 171.
Empty Catch Block,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedHandshake,The method has an empty catch block.
Empty Catch Block,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,InitializeNetwork,The method has an empty catch block.
Empty Catch Block,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,InitializeNetwork,The method has an empty catch block.
Empty Catch Block,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,ExecutePeerShutdown,The method has an empty catch block.
Empty Catch Block,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The method has an empty catch block.
Empty Catch Block,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,FlushDelayedPackets,The method has an empty catch block.
Magic Number,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,NetAESEncryption,The following statement contains a magic number: !m_keysizes.Contains(key.Length * 8)
Magic Number,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,NetAESEncryption,The following statement contains a magic number: !m_blocksizes.Contains(iv.Length * 8)
Magic Number,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,NetAESEncryption,The following statement contains a magic number: m_bitSize = m_key.Length * 8;
Magic Number,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,NetAESEncryption,The following statement contains a magic number: i < 1000
Magic Number,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,NetAESEncryption,The following statement contains a magic number: int keylen = bitsize / 8;
Magic Number,Lidgren.Network,NetAESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetAESEncryption.cs,NetAESEncryption,The following statement contains a magic number: m_iv = new byte[m_blocksizes[0] / 8];
Magic Number,Lidgren.Network,NetBlockEncryptionBase,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetBlockEncryptionBase.cs,Encrypt,The following statement contains a magic number: msg.EnsureBufferSize(dstSize * 8 + (4 * 8));
Magic Number,Lidgren.Network,NetBlockEncryptionBase,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetBlockEncryptionBase.cs,Encrypt,The following statement contains a magic number: msg.EnsureBufferSize(dstSize * 8 + (4 * 8));
Magic Number,Lidgren.Network,NetBlockEncryptionBase,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetBlockEncryptionBase.cs,Encrypt,The following statement contains a magic number: msg.EnsureBufferSize(dstSize * 8 + (4 * 8));
Magic Number,Lidgren.Network,NetBlockEncryptionBase,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetBlockEncryptionBase.cs,Encrypt,The following statement contains a magic number: msg.LengthBits = dstSize * 8;
Magic Number,Lidgren.Network,NetBlockEncryptionBase,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetBlockEncryptionBase.cs,Decrypt,The following statement contains a magic number: int numEncryptedBytes = msg.LengthBytes - 4;
Magic Number,Lidgren.Network,NetBlockEncryptionBase,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetBlockEncryptionBase.cs,Decrypt,The following statement contains a magic number: uint realSize = NetBitWriter.ReadUInt32(msg.m_data' 32' (numEncryptedBytes * 8));
Magic Number,Lidgren.Network,NetBlockEncryptionBase,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetBlockEncryptionBase.cs,Decrypt,The following statement contains a magic number: uint realSize = NetBitWriter.ReadUInt32(msg.m_data' 32' (numEncryptedBytes * 8));
Magic Number,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,NetDESEncryption,The following statement contains a magic number: !m_keysizes.Contains(key.Length * 8)
Magic Number,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,NetDESEncryption,The following statement contains a magic number: !m_blocksizes.Contains(iv.Length * 8)
Magic Number,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,NetDESEncryption,The following statement contains a magic number: m_bitSize = m_key.Length * 8;
Magic Number,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,NetDESEncryption,The following statement contains a magic number: i < 1000
Magic Number,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,NetDESEncryption,The following statement contains a magic number: int keylen = bitsize / 8;
Magic Number,Lidgren.Network,NetDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetDESEncryption.cs,NetDESEncryption,The following statement contains a magic number: m_iv = new byte[m_blocksizes[0] / 8];
Magic Number,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,NetRC2Encryption,The following statement contains a magic number: !m_keysizes.Contains(key.Length * 8)
Magic Number,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,NetRC2Encryption,The following statement contains a magic number: !m_blocksizes.Contains(iv.Length * 8)
Magic Number,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,NetRC2Encryption,The following statement contains a magic number: m_bitSize = m_key.Length * 8;
Magic Number,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,NetRC2Encryption,The following statement contains a magic number: i < 1000
Magic Number,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,NetRC2Encryption,The following statement contains a magic number: int keylen = bitsize / 8;
Magic Number,Lidgren.Network,NetRC2Encryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetRC2Encryption.cs,NetRC2Encryption,The following statement contains a magic number: m_iv = new byte[m_blocksizes[0] / 8];
Magic Number,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,NetTripleDESEncryption,The following statement contains a magic number: !m_keysizes.Contains(key.Length * 8)
Magic Number,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,NetTripleDESEncryption,The following statement contains a magic number: !m_blocksizes.Contains(iv.Length * 8)
Magic Number,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,NetTripleDESEncryption,The following statement contains a magic number: m_bitSize = m_key.Length * 8;
Magic Number,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,NetTripleDESEncryption,The following statement contains a magic number: i < 1000
Magic Number,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,NetTripleDESEncryption,The following statement contains a magic number: int keylen = bitsize / 8;
Magic Number,Lidgren.Network,NetTripleDESEncryption,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetTripleDESEncryption.cs,NetTripleDESEncryption,The following statement contains a magic number: m_iv = new byte[m_blocksizes[0] / 8];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,NetXtea,The following statement contains a magic number: uint[] tmp = new uint[8];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,NetXtea,The following statement contains a magic number: num2 += 4;
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,NetXtea,The following statement contains a magic number: index < 4
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,NetXtea,The following statement contains a magic number: m_sum0[index] = ((uint)num2) + tmp[num2 & 3];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,NetXtea,The following statement contains a magic number: num2 += -1640531527;
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,NetXtea,The following statement contains a magic number: m_sum1[index] = ((uint)num2) + tmp[(num2 >> 11) & 3];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,NetXtea,The following statement contains a magic number: m_sum1[index] = ((uint)num2) + tmp[(num2 >> 11) & 3];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,NetXtea,The following statement contains a magic number: index < 32
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,EncryptBlock,The following statement contains a magic number: uint v1 = BytesToUInt(source' sourceOffset + 4);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,EncryptBlock,The following statement contains a magic number: v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ m_sum0[i];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,EncryptBlock,The following statement contains a magic number: v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ m_sum0[i];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,EncryptBlock,The following statement contains a magic number: v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ m_sum1[i];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,EncryptBlock,The following statement contains a magic number: v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ m_sum1[i];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,EncryptBlock,The following statement contains a magic number: UIntToBytes(v1' destination' 0 + 4);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,DecryptBlock,The following statement contains a magic number: uint v1 = BytesToUInt(source' sourceOffset + 4);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,DecryptBlock,The following statement contains a magic number: v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ m_sum1[i];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,DecryptBlock,The following statement contains a magic number: v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ m_sum1[i];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,DecryptBlock,The following statement contains a magic number: v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ m_sum0[i];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,DecryptBlock,The following statement contains a magic number: v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ m_sum0[i];
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,DecryptBlock,The following statement contains a magic number: UIntToBytes(v1' destination' 0 + 4);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,BytesToUInt,The following statement contains a magic number: uint retval = (uint)(bytes[offset] << 24);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,BytesToUInt,The following statement contains a magic number: retval |= (uint)(bytes[++offset] << 16);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,BytesToUInt,The following statement contains a magic number: retval |= (uint)(bytes[++offset] << 8);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,UIntToBytes,The following statement contains a magic number: destination[destinationOffset++] = (byte)(value >> 24);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,UIntToBytes,The following statement contains a magic number: destination[destinationOffset++] = (byte)(value >> 16);
Magic Number,Lidgren.Network,NetXtea,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\Encryption\NetXteaEncryption.cs,UIntToBytes,The following statement contains a magic number: destination[destinationOffset++] = (byte)(value >> 8);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,The following statement contains a magic number: switch (radix) 			{ 				case 2: 					// Is there anyway to restrict to binary digits? 					style = NumberStyles.Integer; 					chunk = chunk2; 					r = radix2; 					rE = radix2E; 					break; 				case 10: 					// This style seems to handle spaces and minus sign already (our processing redundant?) 					style = NumberStyles.Integer; 					chunk = chunk10; 					r = radix10; 					rE = radix10E; 					break; 				case 16: 					// TODO Should this be HexNumber? 					style = NumberStyles.AllowHexSpecifier; 					chunk = chunk16; 					r = radix16; 					rE = radix16E; 					break; 				default: 					throw new FormatException("Only bases 2' 10' or 16 allowed"); 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,The following statement contains a magic number: switch (radix) 			{ 				case 2: 					// Is there anyway to restrict to binary digits? 					style = NumberStyles.Integer; 					chunk = chunk2; 					r = radix2; 					rE = radix2E; 					break; 				case 10: 					// This style seems to handle spaces and minus sign already (our processing redundant?) 					style = NumberStyles.Integer; 					chunk = chunk10; 					r = radix10; 					rE = radix10E; 					break; 				case 16: 					// TODO Should this be HexNumber? 					style = NumberStyles.AllowHexSpecifier; 					chunk = chunk16; 					r = radix16; 					rE = radix16E; 					break; 				default: 					throw new FormatException("Only bases 2' 10' or 16 allowed"); 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,The following statement contains a magic number: switch (radix) 			{ 				case 2: 					// Is there anyway to restrict to binary digits? 					style = NumberStyles.Integer; 					chunk = chunk2; 					r = radix2; 					rE = radix2E; 					break; 				case 10: 					// This style seems to handle spaces and minus sign already (our processing redundant?) 					style = NumberStyles.Integer; 					chunk = chunk10; 					r = radix10; 					rE = radix10E; 					break; 				case 16: 					// TODO Should this be HexNumber? 					style = NumberStyles.AllowHexSpecifier; 					chunk = chunk16; 					r = radix16; 					rE = radix16E; 					break; 				default: 					throw new FormatException("Only bases 2' 10' or 16 allowed"); 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,The following statement contains a magic number: switch (radix) 					{ 						case 2: 							if (i > 1) 								throw new FormatException("Bad character in radix 2 string: " + s);  							b = b.ShiftLeft(1); 							break; 						case 16: 							b = b.ShiftLeft(64); 							break; 						default: 							b = b.Multiply(rE); 							break; 					}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,The following statement contains a magic number: switch (radix) 					{ 						case 2: 							if (i > 1) 								throw new FormatException("Bad character in radix 2 string: " + s);  							b = b.ShiftLeft(1); 							break; 						case 16: 							b = b.ShiftLeft(64); 							break; 						default: 							b = b.Multiply(rE); 							break; 					}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,The following statement contains a magic number: switch (radix) 					{ 						case 2: 							if (i > 1) 								throw new FormatException("Bad character in radix 2 string: " + s);  							b = b.ShiftLeft(1); 							break; 						case 16: 							b = b.ShiftLeft(64); 							break; 						default: 							b = b.Multiply(rE); 							break; 					}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,NetBigInteger,The following statement contains a magic number: radix == 2
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MakeMagnitude,The following statement contains a magic number: int nInts = (end - firstSignificant + 3) / BytesPerInt;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MakeMagnitude,The following statement contains a magic number: v <<= 8;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,AddMagnitudes,The following statement contains a magic number: m = (long)((ulong)m >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,calcBitLength,The following statement contains a magic number: int bitLength = 32 * ((mag.Length - indx) - 1);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,BitLen,The following statement contains a magic number: return (w < 1 << 15 ? (w < 1 << 7 				? (w < 1 << 3 ? (w < 1 << 1 				? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1) 				: (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5 				? (w < 1 << 4 ? 4 : 5) 				: (w < 1 << 6 ? 6 : 7))) 				: (w < 1 << 11 				? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11)) 				: (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19 				? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19)) 				: (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27 				? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27)) 				: (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Divide,The following statement contains a magic number: iCount = new int[(shift >> 5) + 1];
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Divide,The following statement contains a magic number: iCount[0] = 1 << (shift % 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Divide,The following statement contains a magic number: xBitLength = 32 * (x.Length - xStart - 1) + BitLen(x[xStart]);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Divide,The following statement contains a magic number: shift < 2
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,DivideAndRemainder,The following statement contains a magic number: NetBigInteger[] biggies = new NetBigInteger[2];
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ModPow,The following statement contains a magic number: NetBigInteger tmp = ShiftLeft(32 * m.m_magnitude.Length).Mod(m);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ModPow,The following statement contains a magic number: yAccum = new int[m.m_magnitude.Length * 2];
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ModPow,The following statement contains a magic number: bits < 32
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Square,The following statement contains a magic number: u2 = u1 >> 32;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Square,The following statement contains a magic number: c = u2 + (u1 >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Square,The following statement contains a magic number: u2 = u1 >> 31;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Square,The following statement contains a magic number: c = u2 + (u1 >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Square,The following statement contains a magic number: w[wBase] = (int)(uint)(c >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Square,The following statement contains a magic number: u2 = u1 >> 32;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Square,The following statement contains a magic number: w[wBase] = (int)(uint)(u2 + (u1 >> 32) + (ulong)(uint)w[wBase]);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Multiply,The following statement contains a magic number: val = (long)((ulong)val >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,FastModInverse,The following statement contains a magic number: long[] x = new long[2];
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The following statement contains a magic number: long carry = (long)((ulong)prod1 >> 32) + (long)((ulong)prod2 >> 32) + (long)((ulong)tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The following statement contains a magic number: long carry = (long)((ulong)prod1 >> 32) + (long)((ulong)prod2 >> 32) + (long)((ulong)tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The following statement contains a magic number: long carry = (long)((ulong)prod1 >> 32) + (long)((ulong)prod2 >> 32) + (long)((ulong)tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The following statement contains a magic number: carry = (long)((ulong)carry >> 32) + (long)((ulong)prod1 >> 32) + 						(long)((ulong)prod2 >> 32) + (long)((ulong)tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The following statement contains a magic number: carry = (long)((ulong)carry >> 32) + (long)((ulong)prod1 >> 32) + 						(long)((ulong)prod2 >> 32) + (long)((ulong)tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The following statement contains a magic number: carry = (long)((ulong)carry >> 32) + (long)((ulong)prod1 >> 32) + 						(long)((ulong)prod2 >> 32) + (long)((ulong)tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The following statement contains a magic number: carry = (long)((ulong)carry >> 32) + (long)((ulong)prod1 >> 32) + 						(long)((ulong)prod2 >> 32) + (long)((ulong)tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMonty,The following statement contains a magic number: a[0] = (int)((ulong)carry >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMontyNIsOne,The following statement contains a magic number: ulong carry = (prod1 >> 32) + (prod2 >> 32) + (tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMontyNIsOne,The following statement contains a magic number: ulong carry = (prod1 >> 32) + (prod2 >> 32) + (tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,MultiplyMontyNIsOne,The following statement contains a magic number: ulong carry = (prod1 >> 32) + (prod2 >> 32) + (tmp >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Remainder,The following statement contains a magic number: acc = (acc << 32 | posVal) % m;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Remainder,The following statement contains a magic number: xBitLength = 32 * (x.Length - xStart - 1) + BitLen(x[xStart]);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Remainder,The following statement contains a magic number: shift < 2
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,LastNBits,The following statement contains a magic number: int hiBits = n % 32;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ShiftLeft,The following statement contains a magic number: int nInts = (int)((uint)n >> 5);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ShiftRightInPlace,The following statement contains a magic number: int nInts = (int)((uint)n >> 5) + start;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ShiftRightInPlace,The following statement contains a magic number: int nBits2 = 32 - nBits;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ShiftRightOneInPlace,The following statement contains a magic number: mag[i] = ((int)((uint)m >> 1)) | (next << 31);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ShiftRight,The following statement contains a magic number: int resultLength = (BitLength - n + 31) >> 5;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ShiftRight,The following statement contains a magic number: int resultLength = (BitLength - n + 31) >> 5;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ShiftRight,The following statement contains a magic number: int numInts = n >> 5;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ShiftRight,The following statement contains a magic number: int numBits = n & 31;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,Subtract,The following statement contains a magic number: borrow = (int)(m >> 63);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToByteArray,The following statement contains a magic number: bytes[--bytesIndex] = (byte)(mag >> 8);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToByteArray,The following statement contains a magic number: bytes[--bytesIndex] = (byte)(mag >> 16);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToByteArray,The following statement contains a magic number: bytes[--bytesIndex] = (byte)(mag >> 24);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToByteArray,The following statement contains a magic number: lastMag >>= 8;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToString,The following statement contains a magic number: return ToString(10);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToString,The following statement contains a magic number: switch (radix) 			{ 				case 2: 				case 10: 				case 16: 					break; 				default: 					throw new FormatException("Only bases 2' 10' 16 are allowed"); 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToString,The following statement contains a magic number: switch (radix) 			{ 				case 2: 				case 10: 				case 16: 					break; 				default: 					throw new FormatException("Only bases 2' 10' 16 are allowed"); 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToString,The following statement contains a magic number: switch (radix) 			{ 				case 2: 				case 10: 				case 16: 					break; 				default: 					throw new FormatException("Only bases 2' 10' 16 are allowed"); 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ToString,The following statement contains a magic number: radix == 16
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,createUValueOf,The following statement contains a magic number: int msw = (int)(value >> 32);
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ValueOf,The following statement contains a magic number: switch (value) 			{ 				case 0: 					return Zero; 				case 1: 					return One; 				case 2: 					return Two; 				case 3: 					return Three; 				case 10: 					return Ten; 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ValueOf,The following statement contains a magic number: switch (value) 			{ 				case 0: 					return Zero; 				case 1: 					return One; 				case 2: 					return Two; 				case 3: 					return Three; 				case 10: 					return Ten; 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ValueOf,The following statement contains a magic number: switch (value) 			{ 				case 0: 					return Zero; 				case 1: 					return One; 				case 2: 					return Two; 				case 3: 					return Three; 				case 10: 					return Ten; 			}
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,GetLowestSetBit,The following statement contains a magic number: int b = (word & 0x0000FFFF) == 0 				? (word & 0x00FF0000) == 0 					? 7 					: 15 				: (word & 0x000000FF) == 0 					? 23 					: 31;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,GetLowestSetBit,The following statement contains a magic number: int b = (word & 0x0000FFFF) == 0 				? (word & 0x00FF0000) == 0 					? 7 					: 15 				: (word & 0x000000FF) == 0 					? 23 					: 31;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,GetLowestSetBit,The following statement contains a magic number: int b = (word & 0x0000FFFF) == 0 				? (word & 0x00FF0000) == 0 					? 7 					: 15 				: (word & 0x000000FF) == 0 					? 23 					: 31;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,GetLowestSetBit,The following statement contains a magic number: int b = (word & 0x0000FFFF) == 0 				? (word & 0x00FF0000) == 0 					? 7 					: 15 				: (word & 0x000000FF) == 0 					? 23 					: 31;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,GetLowestSetBit,The following statement contains a magic number: return ((m_magnitude.Length - w) * 32 - (b + 1));
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,TestBit,The following statement contains a magic number: int wordNum = n / 32;
Magic Number,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,TestBit,The following statement contains a magic number: return ((word >> (n % 32)) & 1) > 0;
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,NetBitVector,The following statement contains a magic number: m_data = new int[(bitsCapacity + 31) / 32];
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,NetBitVector,The following statement contains a magic number: m_data = new int[(bitsCapacity + 31) / 32];
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,RotateDown,The following statement contains a magic number: m_data[i] = ((m_data[i] >> 1) & ~(1 << 31)) | m_data[i + 1] << 31;
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,RotateDown,The following statement contains a magic number: m_data[i] = ((m_data[i] >> 1) & ~(1 << 31)) | m_data[i + 1] << 31;
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,RotateDown,The following statement contains a magic number: int lastIndex = m_capacity - 1 - (32 * lenMinusOne);
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,GetFirstSetIndex,The following statement contains a magic number: return (idx * 32) + a;
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,Get,The following statement contains a magic number: return (m_data[bitIndex / 32] & (1 << (bitIndex % 32))) != 0;
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,Get,The following statement contains a magic number: return (m_data[bitIndex / 32] & (1 << (bitIndex % 32))) != 0;
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,Set,The following statement contains a magic number: int idx = bitIndex / 32;
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,Set,The following statement contains a magic number: (m_data[idx] & (1 << (bitIndex % 32))) == 0
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,Set,The following statement contains a magic number: m_data[idx] |= (1 << (bitIndex % 32));
Magic Number,Lidgren.Network,NetBitVector,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitVector.cs,ToString,The following statement contains a magic number: StringBuilder bdr = new StringBuilder(m_capacity + 2);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: NetException.Assert(((numberOfBits > 0) && (numberOfBits < 9))' "Read() can only read between 1 and 8 bits");
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: int bytePtr = readBitOffset >> 3;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: int startReadAtIndex = readBitOffset - (bytePtr * 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: startReadAtIndex == 0 && numberOfBits == 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: int numberOfBitsInSecondByte = numberOfBits - (8 - startReadAtIndex);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: return (byte)(returnValue & (255 >> (8 - numberOfBits)));
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: return (byte)(returnValue & (255 >> (8 - numberOfBits)));
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: second &= (byte)(255 >> (8 - numberOfBitsInSecondByte));
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadByte,The following statement contains a magic number: second &= (byte)(255 >> (8 - numberOfBitsInSecondByte));
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadBytes,The following statement contains a magic number: int readPtr = readBitOffset >> 3;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadBytes,The following statement contains a magic number: int startReadAtIndex = readBitOffset - (readPtr * 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadBytes,The following statement contains a magic number: int secondPartLen = 8 - startReadAtIndex;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadBytes,The following statement contains a magic number: int secondMask = 255 >> secondPartLen;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteByte,The following statement contains a magic number: NetException.Assert(((numberOfBits >= 0) && (numberOfBits <= 8))' "Must write between 0 and 8 bits!");
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteByte,The following statement contains a magic number: source = (byte)(source & (0xFF >> (8 - numberOfBits)));
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteByte,The following statement contains a magic number: int p = destBitOffset >> 3;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteByte,The following statement contains a magic number: int bitsFree = 8 - bitsUsed;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteByte,The following statement contains a magic number: int mask = (0xFF >> bitsFree) | (0xFF << (8 - bitsLeft));
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteBytes,The following statement contains a magic number: int dstBytePtr = destBitOffset >> 3;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteBytes,The following statement contains a magic number: int firstPartLen = (destBitOffset % 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteBytes,The following statement contains a magic number: int lastPartLen = 8 - firstPartLen;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteBytes,The following statement contains a magic number: destination[dstBytePtr] &= (byte)(255 >> lastPartLen);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteBytes,The following statement contains a magic number: destination[dstBytePtr] &= (byte)(255 << firstPartLen);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt16,The following statement contains a magic number: Debug.Assert(((numberOfBits > 0) && (numberOfBits <= 16))' "ReadUInt16() can only read between 1 and 16 bits");
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt16,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt16,The following statement contains a magic number: returnValue = ReadByte(fromBuffer' 8' readBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt16,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt16,The following statement contains a magic number: readBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt16,The following statement contains a magic number: returnValue |= (ushort)(ReadByte(fromBuffer' numberOfBits' readBitOffset) << 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt16,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: NetException.Assert(((numberOfBits > 0) && (numberOfBits <= 32))' "ReadUInt32() can only read between 1 and 32 bits");
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: returnValue = ReadByte(fromBuffer' 8' readBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: readBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: returnValue |= (uint)(ReadByte(fromBuffer' numberOfBits' readBitOffset) << 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: returnValue |= (uint)(ReadByte(fromBuffer' 8' readBitOffset) << 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: returnValue |= (uint)(ReadByte(fromBuffer' 8' readBitOffset) << 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: readBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: r <<= 16;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: returnValue |= (uint)(ReadByte(fromBuffer' 8' readBitOffset) << 16);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: returnValue |= (uint)(ReadByte(fromBuffer' 8' readBitOffset) << 16);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: readBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadUInt32,The following statement contains a magic number: returnValue |= (uint)(ReadByte(fromBuffer' numberOfBits' readBitOffset) << 24);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt16,The following statement contains a magic number: NetException.Assert((numberOfBits >= 0 && numberOfBits <= 16)' "numberOfBits must be between 0 and 16");
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt16,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt16,The following statement contains a magic number: NetBitWriter.WriteByte((byte)source' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt16,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt16,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 8)' numberOfBits' destination' destinationBitOffset + 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt16,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 8)' numberOfBits' destination' destinationBitOffset + 8);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: NetBitWriter.WriteByte((byte)source' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 8)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 8)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 8)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 16)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 16)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 16)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt32,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 24)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)source' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 8)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 8)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 8)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 16)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 16)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 16)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 24)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 24)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 24)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 32)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 32)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 32)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 40)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 40)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 40)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 48)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 48)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 48)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 56)' numberOfBits' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits <= 8
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 56)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: NetBitWriter.WriteByte((byte)(source >> 56)' 8' destination' destinationBitOffset);
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: destinationBitOffset += 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteUInt64,The following statement contains a magic number: numberOfBits -= 8;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,WriteVariableUInt32,The following statement contains a magic number: num1 = num1 >> 7;
Magic Number,Lidgren.Network,NetBitWriter,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBitWriter.cs,ReadVariableUInt32,The following statement contains a magic number: num2 += 7;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,NetBuffer,The following statement contains a magic number: mi.GetParameters().Length == 0 && mi.Name.StartsWith("Read"' StringComparison.InvariantCulture) && mi.Name.Substring(4) == mi.ReturnType.Name
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekByte,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 8' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekByte,The following statement contains a magic number: byte retval = NetBitWriter.ReadByte(m_data' 8' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekSByte,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 8' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekSByte,The following statement contains a magic number: byte retval = NetBitWriter.ReadByte(m_data' 8' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekBytes,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= (numberOfBytes * 8)' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekBytes,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= (numberOfBytes * 8)' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt16,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 16' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt16,The following statement contains a magic number: uint retval = NetBitWriter.ReadUInt16(m_data' 16' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt16,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 16' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt16,The following statement contains a magic number: uint retval = NetBitWriter.ReadUInt16(m_data' 16' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt32,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 32' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt32,The following statement contains a magic number: uint retval = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt32,The following statement contains a magic number: NetException.Assert((numberOfBits > 0 && numberOfBits <= 32)' "ReadInt() can only read between 1 and 32 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt32,The following statement contains a magic number: numberOfBits == 32
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt32,The following statement contains a magic number: uint mask = ((uint)-1) >> (33 - numberOfBits);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt32,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 32' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt32,The following statement contains a magic number: uint retval = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt32,The following statement contains a magic number: NetException.Assert((numberOfBits > 0 && numberOfBits <= 32)' "ReadUInt() can only read between 1 and 32 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt64,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 64' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt64,The following statement contains a magic number: ulong low = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt64,The following statement contains a magic number: ulong high = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition + 32);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt64,The following statement contains a magic number: ulong high = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition + 32);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt64,The following statement contains a magic number: ulong retval = low + (high << 32);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt64,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 64' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt64,The following statement contains a magic number: NetException.Assert((numberOfBits > 0 && numberOfBits <= 64)' "ReadUInt() can only read between 1 and 64 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekUInt64,The following statement contains a magic number: numberOfBits <= 32
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekInt64,The following statement contains a magic number: NetException.Assert(((numberOfBits > 0) && (numberOfBits < 65))' "ReadInt64(bits) can only read between 1 and 64 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekSingle,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 32' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekSingle,The following statement contains a magic number: float retval = BitConverter.ToSingle(m_data' m_readPosition >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekSingle,The following statement contains a magic number: (m_readPosition & 7) == 0
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekSingle,The following statement contains a magic number: byte[] bytes = PeekBytes(4);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekDouble,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 64' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekDouble,The following statement contains a magic number: double retval = BitConverter.ToDouble(m_data' m_readPosition >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekDouble,The following statement contains a magic number: (m_readPosition & 7) == 0
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,PeekDouble,The following statement contains a magic number: byte[] bytes = PeekBytes(8);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadByte,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 8' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadByte,The following statement contains a magic number: byte retval = NetBitWriter.ReadByte(m_data' 8' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadByte,The following statement contains a magic number: m_readPosition += 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadByte,The following statement contains a magic number: m_bitLength - m_readPosition < 8
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadByte,The following statement contains a magic number: result = NetBitWriter.ReadByte(m_data' 8' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadByte,The following statement contains a magic number: m_readPosition += 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSByte,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 8' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSByte,The following statement contains a magic number: byte retval = NetBitWriter.ReadByte(m_data' 8' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSByte,The following statement contains a magic number: m_readPosition += 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadByte,The following statement contains a magic number: NetException.Assert(numberOfBits > 0 && numberOfBits <= 8' "ReadByte(bits) can only read between 1 and 8 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition + 7 >= (numberOfBytes * 8)' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition + 7 >= (numberOfBytes * 8)' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: m_readPosition += (8 * numberOfBytes);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: m_bitLength - m_readPosition + 7 < (numberOfBytes * 8)
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: m_bitLength - m_readPosition + 7 < (numberOfBytes * 8)
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: m_readPosition += (8 * numberOfBytes);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition + 7 >= (numberOfBytes * 8)' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition + 7 >= (numberOfBytes * 8)' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBytes,The following statement contains a magic number: m_readPosition += (8 * numberOfBytes);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBits,The following statement contains a magic number: int numberOfWholeBytes = numberOfBits / 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBits,The following statement contains a magic number: int extraBits = numberOfBits - (numberOfWholeBytes * 8);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadBits,The following statement contains a magic number: m_readPosition += (8 * numberOfWholeBytes);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt16,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 16' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt16,The following statement contains a magic number: uint retval = NetBitWriter.ReadUInt16(m_data' 16' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt16,The following statement contains a magic number: m_readPosition += 16;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt16,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 16' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt16,The following statement contains a magic number: uint retval = NetBitWriter.ReadUInt16(m_data' 16' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt16,The following statement contains a magic number: m_readPosition += 16;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 32' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: uint retval = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: m_readPosition += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: m_bitLength - m_readPosition < 32
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: result = (Int32)NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: m_readPosition += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: NetException.Assert(numberOfBits > 0 && numberOfBits <= 32' "ReadInt32(bits) can only read between 1 and 32 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: numberOfBits == 32
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt32,The following statement contains a magic number: uint mask = ((uint)-1) >> (33 - numberOfBits);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt32,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 32' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt32,The following statement contains a magic number: uint retval = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt32,The following statement contains a magic number: m_readPosition += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt32,The following statement contains a magic number: m_bitLength - m_readPosition < 32
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt32,The following statement contains a magic number: result = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt32,The following statement contains a magic number: m_readPosition += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt32,The following statement contains a magic number: NetException.Assert(numberOfBits > 0 && numberOfBits <= 32' "ReadUInt32(bits) can only read between 1 and 32 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt64,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 64' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt64,The following statement contains a magic number: ulong low = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt64,The following statement contains a magic number: m_readPosition += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt64,The following statement contains a magic number: ulong high = NetBitWriter.ReadUInt32(m_data' 32' m_readPosition);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt64,The following statement contains a magic number: ulong retval = low + (high << 32);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt64,The following statement contains a magic number: m_readPosition += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt64,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 64' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt64,The following statement contains a magic number: NetException.Assert(numberOfBits > 0 && numberOfBits <= 64' "ReadUInt64(bits) can only read between 1 and 64 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadUInt64,The following statement contains a magic number: numberOfBits <= 32
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadInt64,The following statement contains a magic number: NetException.Assert(((numberOfBits > 0) && (numberOfBits <= 64))' "ReadInt64(bits) can only read between 1 and 64 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 32' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: float retval = BitConverter.ToSingle(m_data' m_readPosition >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: m_readPosition += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: (m_readPosition & 7) == 0
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: byte[] bytes = ReadBytes(4);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: m_bitLength - m_readPosition < 32
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: result = BitConverter.ToSingle(m_data' m_readPosition >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: m_readPosition += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: (m_readPosition & 7) == 0
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSingle,The following statement contains a magic number: byte[] bytes = ReadBytes(4);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadDouble,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= 64' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadDouble,The following statement contains a magic number: double retval = BitConverter.ToDouble(m_data' m_readPosition >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadDouble,The following statement contains a magic number: m_readPosition += 64;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadDouble,The following statement contains a magic number: (m_readPosition & 7) == 0
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadDouble,The following statement contains a magic number: byte[] bytes = ReadBytes(8);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadVariableUInt32,The following statement contains a magic number: num2 += 7;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadVariableUInt32,The following statement contains a magic number: num2 += 7;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadVariableUInt64,The following statement contains a magic number: num2 += 7;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSignedSingle,The following statement contains a magic number: return ((float)(encodedVal + 1) / (float)(maxVal + 1) - 0.5f) * 2.0f;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadSignedSingle,The following statement contains a magic number: return ((float)(encodedVal + 1) / (float)(maxVal + 1) - 0.5f) * 2.0f;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadString,The following statement contains a magic number: NetException.Assert(m_bitLength - m_readPosition >= (byteLen * 8)' c_readOverflowError);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadString,The following statement contains a magic number: string retval = System.Text.Encoding.UTF8.GetString(m_data' m_readPosition >> 3' byteLen);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadString,The following statement contains a magic number: m_readPosition += (8 * byteLen);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadString,The following statement contains a magic number: (m_readPosition & 7) == 0
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadString,The following statement contains a magic number: m_bitLength - m_readPosition < (byteLen * 8)
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadString,The following statement contains a magic number: result = System.Text.Encoding.UTF8.GetString(m_data' m_readPosition >> 3' (int)byteLen);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadString,The following statement contains a magic number: m_readPosition += (8 * (int)byteLen);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadString,The following statement contains a magic number: (m_readPosition & 7) == 0
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,SkipPadBits,The following statement contains a magic number: m_readPosition = ((m_readPosition + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,SkipPadBits,The following statement contains a magic number: m_readPosition = ((m_readPosition + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,SkipPadBits,The following statement contains a magic number: m_readPosition = ((m_readPosition + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadPadBits,The following statement contains a magic number: m_readPosition = ((m_readPosition + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadPadBits,The following statement contains a magic number: m_readPosition = ((m_readPosition + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,ReadPadBits,The following statement contains a magic number: m_readPosition = ((m_readPosition + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,EnsureBufferSize,The following statement contains a magic number: int byteLen = ((numberOfBits + 7) >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,EnsureBufferSize,The following statement contains a magic number: int byteLen = ((numberOfBits + 7) >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,InternalEnsureBufferSize,The following statement contains a magic number: int byteLen = ((numberOfBits + 7) >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,InternalEnsureBufferSize,The following statement contains a magic number: int byteLen = ((numberOfBits + 7) >> 3);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 8);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetBitWriter.WriteByte(source' 8' m_data' m_bitLength);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: m_bitLength += 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 8);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetBitWriter.WriteByte((byte)source' 8' m_data' m_bitLength);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: m_bitLength += 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetException.Assert((numberOfBits > 0 && numberOfBits <= 8)' "Write(byte' numberOfBits) can only write between 1 and 8 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: int bits = source.Length * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: int bits = numberOfBytes * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 16);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetBitWriter.WriteUInt16(source' 16' m_data' m_bitLength);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: m_bitLength += 16;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetException.Assert((numberOfBits > 0 && numberOfBits <= 16)' "Write(ushort' numberOfBits) can only write between 1 and 16 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 16);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetBitWriter.WriteUInt16((ushort)source' 16' m_data' m_bitLength);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: m_bitLength += 16;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 32);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetBitWriter.WriteUInt32((UInt32)source' 32' m_data' m_bitLength);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: m_bitLength += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 32);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetBitWriter.WriteUInt32(source' 32' m_data' m_bitLength);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: m_bitLength += 32;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetException.Assert((numberOfBits > 0 && numberOfBits <= 32)' "Write(uint' numberOfBits) can only write between 1 and 32 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetException.Assert((numberOfBits > 0 && numberOfBits <= 32)' "Write(int' numberOfBits) can only write between 1 and 32 bits");
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: numberOfBits != 32
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 64);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetBitWriter.WriteUInt64(source' 64' m_data' m_bitLength);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: m_bitLength += 64;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 64);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: NetBitWriter.WriteUInt64(usource' 64' m_data' m_bitLength);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: m_bitLength += 64;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteVariableUInt32,The following statement contains a magic number: num1 = num1 >> 7;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteVariableInt32,The following statement contains a magic number: uint zigzag = (uint)(value << 1) ^ (uint)(value >> 31);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteVariableInt64,The following statement contains a magic number: ulong zigzag = (ulong)(value << 1) ^ (ulong)(value >> 63);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteVariableUInt64,The following statement contains a magic number: num1 = num1 >> 7;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WriteSignedSingle,The following statement contains a magic number: float unit = (value + 1.0f) * 0.5f;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 8);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 8 + (bytes.Length * 8));
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + 8 + (bytes.Length * 8));
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WritePadBits,The following statement contains a magic number: m_bitLength = ((m_bitLength + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WritePadBits,The following statement contains a magic number: m_bitLength = ((m_bitLength + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,WritePadBits,The following statement contains a magic number: m_bitLength = ((m_bitLength + 7) >> 3) * 8;
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: EnsureBufferSize(m_bitLength + (buffer.LengthBytes * 8));
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: int bitsInLastByte = (buffer.m_bitLength % 8);
Magic Number,Lidgren.Network,NetBuffer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBuffer.cs,Write,The following statement contains a magic number: int excessBits = 8 - bitsInLastByte;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,GetResendDelay,The following statement contains a magic number: avgRtt = 0.1f;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,GetResendDelay,The following statement contains a magic number: return 0.02f + (avgRtt * 2.0f);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,GetResendDelay,The following statement contains a magic number: return 0.02f + (avgRtt * 2.0f);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,NetConnection,The following statement contains a magic number: m_queuedOutgoingAcks = new NetQueue<NetTuple<NetMessageType' int>>(4);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,NetConnection,The following statement contains a magic number: m_queuedIncomingAcks = new NetQueue<NetTuple<NetMessageType' int>>(4);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SetStatus,The following statement contains a magic number: NetIncomingMessage info = m_peer.CreateIncomingMessage(NetIncomingMessageType.StatusChanged' 4 + reason.Length + (reason.Length > 126 ? 2 : 1));
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SetStatus,The following statement contains a magic number: NetIncomingMessage info = m_peer.CreateIncomingMessage(NetIncomingMessageType.StatusChanged' 4 + reason.Length + (reason.Length > 126 ? 2 : 1));
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SetStatus,The following statement contains a magic number: NetIncomingMessage info = m_peer.CreateIncomingMessage(NetIncomingMessageType.StatusChanged' 4 + reason.Length + (reason.Length > 126 ? 2 : 1));
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The following statement contains a magic number: int acks = (mtu - (m_sendBufferWritePtr + 5)) / 3;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The following statement contains a magic number: int acks = (mtu - (m_sendBufferWritePtr + 5)) / 3;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The following statement contains a magic number: int len = (acks * 3) * 8;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The following statement contains a magic number: int len = (acks * 3) * 8;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The following statement contains a magic number: sendBuffer[m_sendBufferWritePtr++] = (byte)(len >> 8);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,Heartbeat,The following statement contains a magic number: sendBuffer[m_sendBufferWritePtr++] = (byte)(tuple.Item2 >> 8);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedLibraryMessage,The following statement contains a magic number: switch (tp) 			{ 				case NetMessageType.Disconnect: 					NetIncomingMessage msg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 					ExecuteDisconnect(msg.ReadString()' false); 					break; 				case NetMessageType.Acknowledge: 					for (int i = 0; i < payloadLength; i+=3) 					{ 						NetMessageType acktp = (NetMessageType)m_peer.m_receiveBuffer[ptr++]; // netmessagetype 						int seqNr = m_peer.m_receiveBuffer[ptr++]; 						seqNr |= (m_peer.m_receiveBuffer[ptr++] << 8);  						// need to enqueue this and handle it in the netconnection heartbeat; so be able to send resends together with normal sends 						m_queuedIncomingAcks.Enqueue(new NetTuple<NetMessageType' int>(acktp' seqNr)); 					} 					break; 				case NetMessageType.Ping: 					int pingNr = m_peer.m_receiveBuffer[ptr++]; 					SendPong(pingNr); 					break; 				case NetMessageType.Pong: 					NetIncomingMessage pmsg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 					int pongNr = pmsg.ReadByte(); 					float remoteSendTime = pmsg.ReadSingle(); 					ReceivedPong(now' pongNr' remoteSendTime); 					break; 				case NetMessageType.ExpandMTURequest: 					SendMTUSuccess(payloadLength); 					break; 				case NetMessageType.ExpandMTUSuccess: 					NetIncomingMessage emsg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 					int size = emsg.ReadInt32(); 					HandleExpandMTUSuccess(now' size); 					break; 				case NetMessageType.NatIntroduction: 					// Unusual situation where server is actually already known' but got a nat introduction - oh well' lets handle it as usual 					m_peer.HandleNatIntroduction(ptr); 					break; 				default: 					m_peer.LogWarning("Connection received unhandled library message: " + tp); 					break; 			}
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedLibraryMessage,The following statement contains a magic number: switch (tp) 			{ 				case NetMessageType.Disconnect: 					NetIncomingMessage msg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 					ExecuteDisconnect(msg.ReadString()' false); 					break; 				case NetMessageType.Acknowledge: 					for (int i = 0; i < payloadLength; i+=3) 					{ 						NetMessageType acktp = (NetMessageType)m_peer.m_receiveBuffer[ptr++]; // netmessagetype 						int seqNr = m_peer.m_receiveBuffer[ptr++]; 						seqNr |= (m_peer.m_receiveBuffer[ptr++] << 8);  						// need to enqueue this and handle it in the netconnection heartbeat; so be able to send resends together with normal sends 						m_queuedIncomingAcks.Enqueue(new NetTuple<NetMessageType' int>(acktp' seqNr)); 					} 					break; 				case NetMessageType.Ping: 					int pingNr = m_peer.m_receiveBuffer[ptr++]; 					SendPong(pingNr); 					break; 				case NetMessageType.Pong: 					NetIncomingMessage pmsg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 					int pongNr = pmsg.ReadByte(); 					float remoteSendTime = pmsg.ReadSingle(); 					ReceivedPong(now' pongNr' remoteSendTime); 					break; 				case NetMessageType.ExpandMTURequest: 					SendMTUSuccess(payloadLength); 					break; 				case NetMessageType.ExpandMTUSuccess: 					NetIncomingMessage emsg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 					int size = emsg.ReadInt32(); 					HandleExpandMTUSuccess(now' size); 					break; 				case NetMessageType.NatIntroduction: 					// Unusual situation where server is actually already known' but got a nat introduction - oh well' lets handle it as usual 					m_peer.HandleNatIntroduction(ptr); 					break; 				default: 					m_peer.LogWarning("Connection received unhandled library message: " + tp); 					break; 			}
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SendConnect,The following statement contains a magic number: int preAllocate = 13 + m_peerConfiguration.AppIdentifier.Length;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SendConnectResponse,The following statement contains a magic number: NetOutgoingMessage om = m_peer.CreateMessage(m_peerConfiguration.AppIdentifier.Length + 13 + (m_localHailMessage == null ? 0 : m_localHailMessage.LengthBytes));
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,WriteLocalHail,The following statement contains a magic number: throw new NetException("Hail message too large; can maximally be " + (m_peerConfiguration.m_maximumTransmissionUnit - 10 - om.LengthBytes));
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,WriteLocalHail,The following statement contains a magic number: om.LengthBytes + m_localHailMessage.LengthBytes > m_peerConfiguration.m_maximumTransmissionUnit - 10
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SendConnectionEstablished,The following statement contains a magic number: NetOutgoingMessage om = m_peer.CreateMessage(4);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedHandshake,The following statement contains a magic number: switch (tp) 			{ 				case NetMessageType.Connect: 					if (m_status == NetConnectionStatus.ReceivedInitiation) 					{ 						// Whee! Server full has already been checked 						bool ok = ValidateHandshakeData(ptr' payloadLength' out hail); 						if (ok) 						{ 							if (hail != null) 							{ 								m_remoteHailMessage = m_peer.CreateIncomingMessage(NetIncomingMessageType.Data' hail); 								m_remoteHailMessage.LengthBits = (hail.Length * 8); 							} 							else 							{ 								m_remoteHailMessage = null;  							}  							if (m_peerConfiguration.IsMessageTypeEnabled(NetIncomingMessageType.ConnectionApproval)) 							{ 								// ok' let's not add connection just yet 								NetIncomingMessage appMsg = m_peer.CreateIncomingMessage(NetIncomingMessageType.ConnectionApproval' (m_remoteHailMessage == null ? 0 : m_remoteHailMessage.LengthBytes)); 								appMsg.m_receiveTime = now; 								appMsg.m_senderConnection = this; 								appMsg.m_senderEndPoint = this.m_remoteEndPoint; 								if (m_remoteHailMessage != null) 									appMsg.Write(m_remoteHailMessage.m_data' 0' m_remoteHailMessage.LengthBytes); 								SetStatus(NetConnectionStatus.RespondedAwaitingApproval' "Awaiting approval"); 								m_peer.ReleaseMessage(appMsg); 								return; 							}  							SendConnectResponse((float)now' true); 						} 						return; 					} 					if (m_status == NetConnectionStatus.RespondedAwaitingApproval) 					{ 						m_peer.LogWarning("Ignoring multiple Connect() most likely due to a delayed Approval"); 						return; 					} 					if (m_status == NetConnectionStatus.RespondedConnect) 					{ 						// our ConnectResponse must have been lost 						SendConnectResponse((float)now' true); 						return; 					} 					m_peer.LogDebug("Unhandled Connect: " + tp + "' status is " + m_status + " length: " + payloadLength); 					break; 				case NetMessageType.ConnectResponse: 					switch (m_status) 					{ 						case NetConnectionStatus.InitiatedConnect: 							// awesome 							bool ok = ValidateHandshakeData(ptr' payloadLength' out hail); 							if (ok) 							{ 								if (hail != null) 								{ 									m_remoteHailMessage = m_peer.CreateIncomingMessage(NetIncomingMessageType.Data' hail); 									m_remoteHailMessage.LengthBits = (hail.Length * 8); 								} 								else 								{ 									m_remoteHailMessage = null; 								}  								m_peer.AcceptConnection(this); 								SendConnectionEstablished(); 								return; 							} 							break; 						case NetConnectionStatus.RespondedConnect: 							// hello' wtf? 							break; 						case NetConnectionStatus.Disconnecting: 						case NetConnectionStatus.Disconnected: 						case NetConnectionStatus.ReceivedInitiation: 						case NetConnectionStatus.None: 							// wtf? anyway' bye! 							break; 						case NetConnectionStatus.Connected: 							// my ConnectionEstablished must have been lost' send another one 							SendConnectionEstablished(); 							return; 					} 					break; 				case NetMessageType.ConnectionEstablished: 					switch (m_status) 					{ 						case NetConnectionStatus.Connected: 							// ok... 							break; 						case NetConnectionStatus.Disconnected: 						case NetConnectionStatus.Disconnecting: 						case NetConnectionStatus.None: 							// too bad' almost made it 							break; 						case NetConnectionStatus.ReceivedInitiation: 							// uh' a little premature... ignore 							break; 						case NetConnectionStatus.InitiatedConnect: 							// weird' should have been RespondedConnect... 							break; 						case NetConnectionStatus.RespondedConnect: 							// awesome 				 							NetIncomingMessage msg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 							InitializeRemoteTimeOffset(msg.ReadSingle());  							m_peer.AcceptConnection(this); 							InitializePing(); 							SetStatus(NetConnectionStatus.Connected' "Connected to " + NetUtility.ToHexString(m_remoteUniqueIdentifier)); 							return; 					} 					break;  				case NetMessageType.Disconnect: 					// ouch 					string reason = "Ouch"; 					try 					{ 						NetIncomingMessage inc = m_peer.SetupReadHelperMessage(ptr' payloadLength); 						reason = inc.ReadString(); 					} 					catch 					{ 					} 					ExecuteDisconnect(reason' false); 					break;  				case NetMessageType.Discovery: 					m_peer.HandleIncomingDiscoveryRequest(now' m_remoteEndPoint' ptr' payloadLength); 					return;  				case NetMessageType.DiscoveryResponse: 					m_peer.HandleIncomingDiscoveryResponse(now' m_remoteEndPoint' ptr' payloadLength); 					return;  				case NetMessageType.Ping: 					// silently ignore 					return;  				default: 					m_peer.LogDebug("Unhandled type during handshake: " + tp + " length: " + payloadLength); 					break; 			}
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedHandshake,The following statement contains a magic number: switch (tp) 			{ 				case NetMessageType.Connect: 					if (m_status == NetConnectionStatus.ReceivedInitiation) 					{ 						// Whee! Server full has already been checked 						bool ok = ValidateHandshakeData(ptr' payloadLength' out hail); 						if (ok) 						{ 							if (hail != null) 							{ 								m_remoteHailMessage = m_peer.CreateIncomingMessage(NetIncomingMessageType.Data' hail); 								m_remoteHailMessage.LengthBits = (hail.Length * 8); 							} 							else 							{ 								m_remoteHailMessage = null;  							}  							if (m_peerConfiguration.IsMessageTypeEnabled(NetIncomingMessageType.ConnectionApproval)) 							{ 								// ok' let's not add connection just yet 								NetIncomingMessage appMsg = m_peer.CreateIncomingMessage(NetIncomingMessageType.ConnectionApproval' (m_remoteHailMessage == null ? 0 : m_remoteHailMessage.LengthBytes)); 								appMsg.m_receiveTime = now; 								appMsg.m_senderConnection = this; 								appMsg.m_senderEndPoint = this.m_remoteEndPoint; 								if (m_remoteHailMessage != null) 									appMsg.Write(m_remoteHailMessage.m_data' 0' m_remoteHailMessage.LengthBytes); 								SetStatus(NetConnectionStatus.RespondedAwaitingApproval' "Awaiting approval"); 								m_peer.ReleaseMessage(appMsg); 								return; 							}  							SendConnectResponse((float)now' true); 						} 						return; 					} 					if (m_status == NetConnectionStatus.RespondedAwaitingApproval) 					{ 						m_peer.LogWarning("Ignoring multiple Connect() most likely due to a delayed Approval"); 						return; 					} 					if (m_status == NetConnectionStatus.RespondedConnect) 					{ 						// our ConnectResponse must have been lost 						SendConnectResponse((float)now' true); 						return; 					} 					m_peer.LogDebug("Unhandled Connect: " + tp + "' status is " + m_status + " length: " + payloadLength); 					break; 				case NetMessageType.ConnectResponse: 					switch (m_status) 					{ 						case NetConnectionStatus.InitiatedConnect: 							// awesome 							bool ok = ValidateHandshakeData(ptr' payloadLength' out hail); 							if (ok) 							{ 								if (hail != null) 								{ 									m_remoteHailMessage = m_peer.CreateIncomingMessage(NetIncomingMessageType.Data' hail); 									m_remoteHailMessage.LengthBits = (hail.Length * 8); 								} 								else 								{ 									m_remoteHailMessage = null; 								}  								m_peer.AcceptConnection(this); 								SendConnectionEstablished(); 								return; 							} 							break; 						case NetConnectionStatus.RespondedConnect: 							// hello' wtf? 							break; 						case NetConnectionStatus.Disconnecting: 						case NetConnectionStatus.Disconnected: 						case NetConnectionStatus.ReceivedInitiation: 						case NetConnectionStatus.None: 							// wtf? anyway' bye! 							break; 						case NetConnectionStatus.Connected: 							// my ConnectionEstablished must have been lost' send another one 							SendConnectionEstablished(); 							return; 					} 					break; 				case NetMessageType.ConnectionEstablished: 					switch (m_status) 					{ 						case NetConnectionStatus.Connected: 							// ok... 							break; 						case NetConnectionStatus.Disconnected: 						case NetConnectionStatus.Disconnecting: 						case NetConnectionStatus.None: 							// too bad' almost made it 							break; 						case NetConnectionStatus.ReceivedInitiation: 							// uh' a little premature... ignore 							break; 						case NetConnectionStatus.InitiatedConnect: 							// weird' should have been RespondedConnect... 							break; 						case NetConnectionStatus.RespondedConnect: 							// awesome 				 							NetIncomingMessage msg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 							InitializeRemoteTimeOffset(msg.ReadSingle());  							m_peer.AcceptConnection(this); 							InitializePing(); 							SetStatus(NetConnectionStatus.Connected' "Connected to " + NetUtility.ToHexString(m_remoteUniqueIdentifier)); 							return; 					} 					break;  				case NetMessageType.Disconnect: 					// ouch 					string reason = "Ouch"; 					try 					{ 						NetIncomingMessage inc = m_peer.SetupReadHelperMessage(ptr' payloadLength); 						reason = inc.ReadString(); 					} 					catch 					{ 					} 					ExecuteDisconnect(reason' false); 					break;  				case NetMessageType.Discovery: 					m_peer.HandleIncomingDiscoveryRequest(now' m_remoteEndPoint' ptr' payloadLength); 					return;  				case NetMessageType.DiscoveryResponse: 					m_peer.HandleIncomingDiscoveryResponse(now' m_remoteEndPoint' ptr' payloadLength); 					return;  				case NetMessageType.Ping: 					// silently ignore 					return;  				default: 					m_peer.LogDebug("Unhandled type during handshake: " + tp + " length: " + payloadLength); 					break; 			}
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,InitializeRemoteTimeOffset,The following statement contains a magic number: m_remoteTimeOffset = (remoteSendTime + (m_averageRoundtripTime / 2.0)) - NetTime.Now;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,InitializePing,The following statement contains a magic number: m_sentPingTime -= (m_peerConfiguration.PingInterval * 0.25f);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,InitializePing,The following statement contains a magic number: m_sentPingTime -= (NetRandom.Instance.NextSingle() * (m_peerConfiguration.PingInterval * 0.75f));
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,InitializePing,The following statement contains a magic number: m_timeoutDeadline = now + (m_peerConfiguration.m_connectionTimeout * 2.0f);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SendPong,The following statement contains a magic number: NetOutgoingMessage om = m_peer.CreateMessage(5);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedPong,The following statement contains a magic number: double diff = (remoteSendTime + (rtt / 2.0)) - now;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedPong,The following statement contains a magic number: NetIncomingMessage update = m_peer.CreateIncomingMessage(NetIncomingMessageType.ConnectionLatencyUpdated' 4);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,InitExpandMTU,The following statement contains a magic number: m_lastSentMTUAttemptTime = now + m_peerConfiguration.m_expandMTUFrequency + 1.5f + m_averageRoundtripTime;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,InitExpandMTU,The following statement contains a magic number: m_largestSuccessfulMTU = 512;
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,MTUExpansionHeartbeat,The following statement contains a magic number: m_mtuAttemptFails == 3
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ExpandMTU,The following statement contains a magic number: tryMTU = (int)((float)m_currentMTU * 1.25f);
Magic Number,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,SendMTUSuccess,The following statement contains a magic number: NetOutgoingMessage om = m_peer.CreateMessage(4);
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,WriteHeader,The following statement contains a magic number: num1 = num1 >> 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,WriteHeader,The following statement contains a magic number: num2 = num2 >> 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,WriteHeader,The following statement contains a magic number: num3 = num3 >> 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,WriteHeader,The following statement contains a magic number: num4 = num4 >> 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,ReadHeader,The following statement contains a magic number: num2 += 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,ReadHeader,The following statement contains a magic number: num2 += 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,ReadHeader,The following statement contains a magic number: num2 += 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,ReadHeader,The following statement contains a magic number: num2 += 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,GetFragmentationHeaderSize,The following statement contains a magic number: int len = 4;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,GetFragmentationHeaderSize,The following statement contains a magic number: num1 = num1 >> 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,GetFragmentationHeaderSize,The following statement contains a magic number: uint num2 = (uint)(totalBytes * 8);
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,GetFragmentationHeaderSize,The following statement contains a magic number: num2 = num2 >> 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,GetFragmentationHeaderSize,The following statement contains a magic number: num3 = num3 >> 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,GetFragmentationHeaderSize,The following statement contains a magic number: num4 = num4 >> 7;
Magic Number,Lidgren.Network,NetFragmentationHelper,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetFragmentationHelper.cs,GetBestChunkSize,The following statement contains a magic number: int tryChunkSize = mtu - NetConstants.HeaderByteSize - 4;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Introduce,The following statement contains a magic number: NetOutgoingMessage msg = CreateMessage(10 + token.Length + 1);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Introduce,The following statement contains a magic number: msg = CreateMessage(10 + token.Length + 1);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,HandleNatIntroduction,The following statement contains a magic number: NetIncomingMessage tmp = SetupReadHelperMessage(ptr' 1000);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,HandleNatPunch,The following statement contains a magic number: NetIncomingMessage tmp = SetupReadHelperMessage(ptr' 1000);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,HandleNatPunch,The following statement contains a magic number: NetIncomingMessage punchSuccess = CreateIncomingMessage(NetIncomingMessageType.NatIntroductionSuccess' 10);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,NetPeer,The following statement contains a magic number: m_releasedIncomingMessages = new NetQueue<NetIncomingMessage>(4);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,NetPeer,The following statement contains a magic number: m_unsentUnconnectedMessages = new NetQueue<NetTuple<IPEndPoint' NetOutgoingMessage>>(2);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Start,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendFragmentedMessage,The following statement contains a magic number: int bitsPerChunk = bytesPerChunk * 8;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SendFragmentedMessage,The following statement contains a magic number: chunk.m_fragmentGroupTotalBits = totalBytes * 8;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,InitializeNetwork,The following statement contains a magic number: uint SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,InitializeNetwork,The following statement contains a magic number: byte[] macBytes = new byte[8];
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,ExecutePeerShutdown,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,ExecutePeerShutdown,The following statement contains a magic number: m_socket.Close(2);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The following statement contains a magic number: int maxCHBpS = 1250 - m_connections.Count;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The following statement contains a magic number: maxCHBpS = 250;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The following statement contains a magic number: maxCHBpS < 250
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The following statement contains a magic number: (m_frameCounter % 3) == 0
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The following statement contains a magic number: !m_socket.Poll(1000' SelectMode.SelectRead)
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The following statement contains a magic number: resp = resp.Substring(resp.ToLower().IndexOf("location:") + 9);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The following statement contains a magic number: ushort sequenceNumber = (ushort)((low >> 1) | (((int)high) << 7));
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,Heartbeat,The following statement contains a magic number: ushort payloadBitLength = (ushort)(m_receiveBuffer[ptr++] | (m_receiveBuffer[ptr++] << 8));
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,HandleIncomingDiscoveryRequest,The following statement contains a magic number: dm.m_bitLength = payloadByteLength * 8;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,HandleIncomingDiscoveryResponse,The following statement contains a magic number: dr.m_bitLength = payloadByteLength * 8;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SetupReadHelperMessage,The following statement contains a magic number: m_readHelperMessage.m_bitLength = (ptr + payloadLength) * 8;
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,SetupReadHelperMessage,The following statement contains a magic number: m_readHelperMessage.m_readPosition = (ptr * 8);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,InitializePools,The following statement contains a magic number: m_storagePool = new List<byte[]>(16);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,InitializePools,The following statement contains a magic number: m_outgoingMessagesPool = new NetQueue<NetOutgoingMessage>(4);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,InitializePools,The following statement contains a magic number: m_incomingMessagesPool = new NetQueue<NetIncomingMessage>(4);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,CreateMessage,The following statement contains a magic number: NetOutgoingMessage om = CreateMessage(2 + bytes.Length);
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,CreateIncomingMessage,The following statement contains a magic number: retval = CreateIncomingMessage(tp' numBytes + (numBytes > 127 ? 2 : 1));
Magic Number,Lidgren.Network,NetPeer,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetNatIntroduction.cs,CreateIncomingMessage,The following statement contains a magic number: retval = CreateIncomingMessage(tp' numBytes + (numBytes > 127 ? 2 : 1));
Magic Number,Lidgren.Network,NetOutgoingMessage,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetOutgoingMessage.cs,Encode,The following statement contains a magic number: intoBuffer[ptr++] = (byte)(sequenceNumber >> 7);
Magic Number,Lidgren.Network,NetOutgoingMessage,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetOutgoingMessage.cs,Encode,The following statement contains a magic number: intoBuffer[ptr++] = (byte)(m_bitLength >> 8);
Magic Number,Lidgren.Network,NetOutgoingMessage,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetOutgoingMessage.cs,GetEncodedSize,The following statement contains a magic number: retval += NetFragmentationHelper.GetFragmentationHeaderSize(m_fragmentGroup' m_fragmentGroupTotalBits / 8' m_fragmentChunkByteSize' m_fragmentChunkNumber);
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_receiveBufferSize = 131071;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_sendBufferSize = 131071;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_maximumConnections = 32;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_defaultOutgoingMessageCapacity = 16;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_pingInterval = 4.0f;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_connectionTimeout = 25.0f;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_resendHandshakeInterval = 3.0f;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_maximumHandshakeAttempts = 5;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_maximumTransmissionUnit = 1408;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_expandMTUFrequency = 2.0f;
Magic Number,Lidgren.Network,NetPeerConfiguration,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetPeerConfiguration.cs,NetPeerConfiguration,The following statement contains a magic number: m_expandMTUFailAttempts = 5;
Magic Number,Lidgren.Network,NetQueue<T>,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetQueue.cs,Enqueue,The following statement contains a magic number: SetCapacity(m_items.Length + 8);
Magic Number,Lidgren.Network,NetQueue<T>,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetQueue.cs,Enqueue,The following statement contains a magic number: SetCapacity(m_items.Length + 8);
Magic Number,Lidgren.Network,NetQueue<T>,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetQueue.cs,EnqueueFirst,The following statement contains a magic number: SetCapacity(m_items.Length + 8);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: return (int)((REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: return (int)((REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextDouble,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextDouble,The following statement contains a magic number: return (REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextDouble,The following statement contains a magic number: return (REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: buffer[i++] = (byte)(w >> 8);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: buffer[i++] = (byte)(w >> 16);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: buffer[i++] = (byte)(w >> 24);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: buffer[i++] = (byte)(w >> 8);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: buffer[i++] = (byte)(w >> 16);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBytes,The following statement contains a magic number: buffer[i] = (byte)(w >> 24);
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextUInt,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextUInt,The following statement contains a magic number: return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextUInt,The following statement contains a magic number: return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextInt,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBool,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBool,The following statement contains a magic number: bitBuffer = w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,Lidgren.Network,NetRandom,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetRandom.cs,NextBool,The following statement contains a magic number: bitBuffer = w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,Lidgren.Network,NetReliableSenderChannel,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetReliableSenderChannel.cs,NetReliableSenderChannel,The following statement contains a magic number: m_queuedSends = new NetQueue<NetOutgoingMessage>(8);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeMultiplier,The following statement contains a magic number: return new NetBigInteger(NetUtility.ToHexString(ccHashed)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,CreateRandomSalt,The following statement contains a magic number: byte[] retval = new byte[16];
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,CreateRandomEphemeral,The following statement contains a magic number: byte[] retval = new byte[32];
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputePrivateKey,The following statement contains a magic number: return new NetBigInteger(NetUtility.ToHexString(sha.ComputeHash(total))' 16).ToByteArrayUnsigned();
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeServerVerifier,The following statement contains a magic number: NetBigInteger x = new NetBigInteger(NetUtility.ToHexString(privateKey)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeClientEphemeral,The following statement contains a magic number: NetBigInteger a = new NetBigInteger(NetUtility.ToHexString(clientPrivateEphemeral)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeServerEphemeral,The following statement contains a magic number: var b = new NetBigInteger(NetUtility.ToHexString(serverPrivateEphemeral)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeServerEphemeral,The following statement contains a magic number: var v = new NetBigInteger(NetUtility.ToHexString(verifier)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeU,The following statement contains a magic number: int len = 66;
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeU,The following statement contains a magic number: return new NetBigInteger(NetUtility.ToHexString(ccHashed)' 16).ToByteArrayUnsigned();
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeServerSessionValue,The following statement contains a magic number: var A = new NetBigInteger(NetUtility.ToHexString(clientPublicEphemeral)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeServerSessionValue,The following statement contains a magic number: var v = new NetBigInteger(NetUtility.ToHexString(verifier)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeServerSessionValue,The following statement contains a magic number: var u = new NetBigInteger(NetUtility.ToHexString(udata)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeServerSessionValue,The following statement contains a magic number: var b = new NetBigInteger(NetUtility.ToHexString(serverPrivateEphemeral)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeClientSessionValue,The following statement contains a magic number: var B = new NetBigInteger(NetUtility.ToHexString(serverPublicEphemeral)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeClientSessionValue,The following statement contains a magic number: var x = new NetBigInteger(NetUtility.ToHexString(xdata)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeClientSessionValue,The following statement contains a magic number: var u = new NetBigInteger(NetUtility.ToHexString(udata)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,ComputeClientSessionValue,The following statement contains a magic number: var a = new NetBigInteger(NetUtility.ToHexString(clientPrivateEphemeral)' 16);
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,CreateEncryption,The following statement contains a magic number: var key = new byte[16];
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,CreateEncryption,The following statement contains a magic number: key[i] ^= hash[i + (j * 16)];
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,CreateEncryption,The following statement contains a magic number: j < hash.Length / 16
Magic Number,Lidgren.Network,NetSRP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetSRP.cs,CreateEncryption,The following statement contains a magic number: i<16
Magic Number,Lidgren.Network,NetTime,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetTime.cs,ToReadable,The following statement contains a magic number: seconds > 60
Magic Number,Lidgren.Network,NetTime,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetTime.cs,ToReadable,The following statement contains a magic number: return (seconds * 1000.0).ToString("N2") + " ms";
Magic Number,Lidgren.Network,NetUnreliableSenderChannel,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUnreliableSenderChannel.cs,NetUnreliableSenderChannel,The following statement contains a magic number: m_queuedSends = new NetQueue<NetOutgoingMessage>(8);
Magic Number,Lidgren.Network,NetUPnP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUPnP.cs,Discover,The following statement contains a magic number: peer.RawSend(arr' 0' arr.Length' new IPEndPoint(IPAddress.Broadcast' 1900));
Magic Number,Lidgren.Network,NetUPnP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUPnP.cs,Discover,The following statement contains a magic number: m_discoveryResponseDeadline = (float)NetTime.Now + 6.0f;
Magic Number,Lidgren.Network,NetUPnP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUPnP.cs,ForwardPort,The following statement contains a magic number: System.Threading.Thread.Sleep(50);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHexString,The following statement contains a magic number: char[] c = new char[data.Length * 2];
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHexString,The following statement contains a magic number: b = ((byte)(data[i] >> 4));
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHexString,The following statement contains a magic number: c[i * 2] = (char)(b > 9 ? b + 0x37 : b + 0x30);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHexString,The following statement contains a magic number: c[i * 2] = (char)(b > 9 ? b + 0x37 : b + 0x30);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHexString,The following statement contains a magic number: c[i * 2 + 1] = (char)(b > 9 ? b + 0x37 : b + 0x30);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHexString,The following statement contains a magic number: c[i * 2 + 1] = (char)(b > 9 ? b + 0x37 : b + 0x30);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,GetBroadcastAddress,The following statement contains a magic number: broadcastAddress[i] = (byte)(ipAdressBytes[i] | (subnetMaskBytes[i] ^ 255));
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,BytesToHoldBits,The following statement contains a magic number: return (numBits + 7) / 8;
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,BytesToHoldBits,The following statement contains a magic number: return (numBits + 7) / 8;
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff000000) >> 24) | 				((value & 0x00ff0000) >> 8) | 				((value & 0x0000ff00) << 8) | 				((value & 0x000000ff) << 24);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff000000) >> 24) | 				((value & 0x00ff0000) >> 8) | 				((value & 0x0000ff00) << 8) | 				((value & 0x000000ff) << 24);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff000000) >> 24) | 				((value & 0x00ff0000) >> 8) | 				((value & 0x0000ff00) << 8) | 				((value & 0x000000ff) << 24);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff000000) >> 24) | 				((value & 0x00ff0000) >> 8) | 				((value & 0x0000ff00) << 8) | 				((value & 0x000000ff) << 24);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff00000000000000L) >> 56) | 				((value & 0x00ff000000000000L) >> 40) | 				((value & 0x0000ff0000000000L) >> 24) | 				((value & 0x000000ff00000000L) >> 8) | 				((value & 0x00000000ff000000L) << 8) | 				((value & 0x0000000000ff0000L) << 24) | 				((value & 0x000000000000ff00L) << 40) | 				((value & 0x00000000000000ffL) << 56);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff00000000000000L) >> 56) | 				((value & 0x00ff000000000000L) >> 40) | 				((value & 0x0000ff0000000000L) >> 24) | 				((value & 0x000000ff00000000L) >> 8) | 				((value & 0x00000000ff000000L) << 8) | 				((value & 0x0000000000ff0000L) << 24) | 				((value & 0x000000000000ff00L) << 40) | 				((value & 0x00000000000000ffL) << 56);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff00000000000000L) >> 56) | 				((value & 0x00ff000000000000L) >> 40) | 				((value & 0x0000ff0000000000L) >> 24) | 				((value & 0x000000ff00000000L) >> 8) | 				((value & 0x00000000ff000000L) << 8) | 				((value & 0x0000000000ff0000L) << 24) | 				((value & 0x000000000000ff00L) << 40) | 				((value & 0x00000000000000ffL) << 56);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff00000000000000L) >> 56) | 				((value & 0x00ff000000000000L) >> 40) | 				((value & 0x0000ff0000000000L) >> 24) | 				((value & 0x000000ff00000000L) >> 8) | 				((value & 0x00000000ff000000L) << 8) | 				((value & 0x0000000000ff0000L) << 24) | 				((value & 0x000000000000ff00L) << 40) | 				((value & 0x00000000000000ffL) << 56);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff00000000000000L) >> 56) | 				((value & 0x00ff000000000000L) >> 40) | 				((value & 0x0000ff0000000000L) >> 24) | 				((value & 0x000000ff00000000L) >> 8) | 				((value & 0x00000000ff000000L) << 8) | 				((value & 0x0000000000ff0000L) << 24) | 				((value & 0x000000000000ff00L) << 40) | 				((value & 0x00000000000000ffL) << 56);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff00000000000000L) >> 56) | 				((value & 0x00ff000000000000L) >> 40) | 				((value & 0x0000ff0000000000L) >> 24) | 				((value & 0x000000ff00000000L) >> 8) | 				((value & 0x00000000ff000000L) << 8) | 				((value & 0x0000000000ff0000L) << 24) | 				((value & 0x000000000000ff00L) << 40) | 				((value & 0x00000000000000ffL) << 56);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff00000000000000L) >> 56) | 				((value & 0x00ff000000000000L) >> 40) | 				((value & 0x0000ff0000000000L) >> 24) | 				((value & 0x000000ff00000000L) >> 8) | 				((value & 0x00000000ff000000L) << 8) | 				((value & 0x0000000000ff0000L) << 24) | 				((value & 0x000000000000ff00L) << 40) | 				((value & 0x00000000000000ffL) << 56);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SwapByteOrder,The following statement contains a magic number: return 				((value & 0xff00000000000000L) >> 56) | 				((value & 0x00ff000000000000L) >> 40) | 				((value & 0x0000ff0000000000L) >> 24) | 				((value & 0x000000ff00000000L) >> 8) | 				((value & 0x00000000ff000000L) << 8) | 				((value & 0x0000000000ff0000L) << 24) | 				((value & 0x000000000000ff00L) << 40) | 				((value & 0x00000000000000ffL) << 56);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToByteArray,The following statement contains a magic number: byte[] retval = new byte[hexString.Length / 2];
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToByteArray,The following statement contains a magic number: retval[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToByteArray,The following statement contains a magic number: retval[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToByteArray,The following statement contains a magic number: retval[i / 2] = Convert.ToByte(hexString.Substring(i' 2)' 16);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHumanReadable,The following statement contains a magic number: bytes < 4000
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHumanReadable,The following statement contains a magic number: return Math.Round(((double)bytes / 1000.0)' 2) + " kilobytes";
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHumanReadable,The following statement contains a magic number: return Math.Round(((double)bytes / 1000.0)' 2) + " kilobytes";
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHumanReadable,The following statement contains a magic number: bytes < 1000 * 1000
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHumanReadable,The following statement contains a magic number: bytes < 1000 * 1000
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHumanReadable,The following statement contains a magic number: return Math.Round(((double)bytes / (1000.0 * 1000.0))' 2) + " megabytes";
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHumanReadable,The following statement contains a magic number: return Math.Round(((double)bytes / (1000.0 * 1000.0))' 2) + " megabytes";
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,ToHumanReadable,The following statement contains a magic number: return Math.Round(((double)bytes / (1000.0 * 1000.0))' 2) + " megabytes";
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,RelativeSequenceNumber,The following statement contains a magic number: return (nr - expected + NetConstants.NumSequenceNumbers + (NetConstants.NumSequenceNumbers / 2)) % NetConstants.NumSequenceNumbers - (NetConstants.NumSequenceNumbers / 2);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,RelativeSequenceNumber,The following statement contains a magic number: return (nr - expected + NetConstants.NumSequenceNumbers + (NetConstants.NumSequenceNumbers / 2)) % NetConstants.NumSequenceNumbers - (NetConstants.NumSequenceNumbers / 2);
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SortMembersList,The following statement contains a magic number: h = 3 * h + 1;
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SortMembersList,The following statement contains a magic number: h * 3 + 1 <= list.Length
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,SortMembersList,The following statement contains a magic number: h /= 3;
Magic Number,Lidgren.Network,NetUtility,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUtility.cs,MakeCommaDelimitedList,The following statement contains a magic number: StringBuilder bdr = new StringBuilder(cnt * 5);
Missing Default,Lidgren.Network,NetBigInteger,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetBigInteger.cs,ValueOf,The following switch statement is missing a default case: switch (value) 			{ 				case 0: 					return Zero; 				case 1: 					return One; 				case 2: 					return Two; 				case 3: 					return Three; 				case 10: 					return Ten; 			}
Missing Default,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedHandshake,The following switch statement is missing a default case: switch (m_status) 					{ 						case NetConnectionStatus.InitiatedConnect: 							// awesome 							bool ok = ValidateHandshakeData(ptr' payloadLength' out hail); 							if (ok) 							{ 								if (hail != null) 								{ 									m_remoteHailMessage = m_peer.CreateIncomingMessage(NetIncomingMessageType.Data' hail); 									m_remoteHailMessage.LengthBits = (hail.Length * 8); 								} 								else 								{ 									m_remoteHailMessage = null; 								}  								m_peer.AcceptConnection(this); 								SendConnectionEstablished(); 								return; 							} 							break; 						case NetConnectionStatus.RespondedConnect: 							// hello' wtf? 							break; 						case NetConnectionStatus.Disconnecting: 						case NetConnectionStatus.Disconnected: 						case NetConnectionStatus.ReceivedInitiation: 						case NetConnectionStatus.None: 							// wtf? anyway' bye! 							break; 						case NetConnectionStatus.Connected: 							// my ConnectionEstablished must have been lost' send another one 							SendConnectionEstablished(); 							return; 					}
Missing Default,Lidgren.Network,NetConnection,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetConnection.cs,ReceivedHandshake,The following switch statement is missing a default case: switch (m_status) 					{ 						case NetConnectionStatus.Connected: 							// ok... 							break; 						case NetConnectionStatus.Disconnected: 						case NetConnectionStatus.Disconnecting: 						case NetConnectionStatus.None: 							// too bad' almost made it 							break; 						case NetConnectionStatus.ReceivedInitiation: 							// uh' a little premature... ignore 							break; 						case NetConnectionStatus.InitiatedConnect: 							// weird' should have been RespondedConnect... 							break; 						case NetConnectionStatus.RespondedConnect: 							// awesome 				 							NetIncomingMessage msg = m_peer.SetupReadHelperMessage(ptr' payloadLength); 							InitializeRemoteTimeOffset(msg.ReadSingle());  							m_peer.AcceptConnection(this); 							InitializePing(); 							SetStatus(NetConnectionStatus.Connected' "Connected to " + NetUtility.ToHexString(m_remoteUniqueIdentifier)); 							return; 					}
Missing Default,Lidgren.Network,NetUPnP,C:\research\architectureSmells\repos\Nirklav_TCPChat\Lidgren.Network\NetUPnP.cs,CheckAvailability,The following switch statement is missing a default case: switch (m_status) 			{ 				case UPnPStatus.NotAvailable: 					return false; 				case UPnPStatus.Available: 					return true; 				case UPnPStatus.Discovering: 					if (m_discoveryComplete.WaitOne(c_discoveryTimeOutMillis)) 						return true; 					if (NetTime.Now > m_discoveryResponseDeadline) 						m_status = UPnPStatus.NotAvailable; 					return false; 			}
