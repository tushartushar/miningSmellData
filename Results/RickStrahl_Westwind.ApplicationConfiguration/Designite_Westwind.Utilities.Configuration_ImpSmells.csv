Implementation smell,Namespace,Class,File,Method,Description
Long Method,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,Read,The method has 103 lines of code.
Long Method,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,StringToTypedValue,The method has 121 lines of code.
Long Method,Westwind.Utilities,ReflectionUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\ReflectionUtils.cs,StringToTypedValue,The method has 112 lines of code.
Complex Method,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Westwind.Utilities,DataUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\DataUtils.cs,DataReaderToObject,Cyclomatic complexity of the method is 10
Complex Method,Westwind.Utilities,Encryption,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\Encryption.cs,ComputeHash,Cyclomatic complexity of the method is 9
Complex Method,Westwind.Utilities,StringSerializer,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringSerializer.cs,SerializeObject,Cyclomatic complexity of the method is 9
Complex Method,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,ExtractString,Cyclomatic complexity of the method is 8
Complex Method,Westwind.Utilities.Data,DataAccessBase,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\DataAccessBase.cs,RunSqlScript,Cyclomatic complexity of the method is 9
Complex Method,Westwind.Utilities.Data,DataAccessBase,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\DataAccessBase.cs,GetEntity,Cyclomatic complexity of the method is 8
Long Parameter List,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,WriteConfigurationValue,The method has 5 parameters. Parameters: keyName' Value' Field' Dom' ConfigSection
Long Parameter List,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,ExtractString,The method has 6 parameters. Parameters: source' beginDelim' endDelim' caseSensitive' allowMissingEndDelimiter' returnDelimiters
Long Parameter List,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,ReplaceStringInstance,The method has 5 parameters. Parameters: origString' findString' replaceWith' instance' caseInsensitive
Long Parameter List,Westwind.Utilities.Data,DataAccessBase,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\DataAccessBase.cs,CreatePagingCommand,The method has 5 parameters. Parameters: sql' pageSize' page' sortOrderFields' Parameters
Long Parameter List,Westwind.Utilities.Data,DataAccessBase,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\DataAccessBase.cs,GetEntity,The method has 5 parameters. Parameters: Entity' Table' KeyField' KeyValue' FieldsToSkip
Long Parameter List,Westwind.Utilities.Data,DataAccessBase,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\DataAccessBase.cs,UpdateEntity,The method has 5 parameters. Parameters: Entity' Table' KeyField' FieldsToSkip' FieldsToUpdate
Long Parameter List,Westwind.Utilities.Data,SqlDataAccess,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\SqlDataAccess.cs,CreatePagingCommand,The method has 5 parameters. Parameters: sql' pageSize' page' sortOrderFields' Parameters
Long Statement,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,Write,The length of the statement  "                MemberInfo[] Fields = typeWebConfig.GetMembers(BindingFlags.Instance | BindingFlags.GetField | BindingFlags.GetProperty | BindingFlags.Public); " is 143.
Long Statement,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,CreateConfigSection,The length of the statement  "                    Attr2.Value = "System.Configuration.NameValueSectionHandler'System'Version=1.0.3300.0' Culture=neutral' PublicKeyToken=b77a5c561934e089"; " is 137.
Long Statement,Westwind.Utilities.Configuration,JsonFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\JsonFileConfigurationProvider.cs,Read,The length of the statement  "            var newConfig = JsonSerializationUtils.DeserializeFromFile(JsonConfigurationFile' typeof(TAppConfiguration)) as TAppConfiguration; " is 130.
Long Statement,Westwind.Utilities.Configuration,XmlFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\XmlFileConfigurationProvider.cs,Read,The length of the statement  "            var newConfig = SerializationUtils.DeSerializeObject(XmlConfigurationFile'typeof(TAppConfiguration)'UseBinarySerialization) as TAppConfiguration; " is 145.
Long Statement,Westwind.Utilities.Configuration,XmlFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\XmlFileConfigurationProvider.cs,Read,The length of the statement  "            var result = SerializationUtils.DeSerializeObject(XmlConfigurationFile'typeof(TAppConfig)'UseBinarySerialization) as TAppConfig; " is 128.
Long Statement,Westwind.Utilities,DataUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\DataUtils.cs,CopyObjectFromDataRow,The length of the statement  "            MemberInfo[] miT = targetObject.GetType().FindMembers(MemberTypes.Field | MemberTypes.Property' MemberAccess' null' null); " is 122.
Long Statement,Westwind.Utilities,ReflectionUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\ReflectionUtils.cs,CallMethod,The length of the statement  "                return instance.GetType().GetMethod(method' ReflectionUtils.MemberAccess | BindingFlags.InvokeMethod).Invoke(instance' parms); " is 126.
Long Statement,Westwind.Utilities,ReflectionUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\ReflectionUtils.cs,CallMethod,The length of the statement  "                return instance.GetType().GetMethod(method' ReflectionUtils.MemberAccess | BindingFlags.InvokeMethod' null' parameterTypes' null).Invoke(instance' parms); " is 154.
Long Statement,Westwind.Utilities,ReflectionUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\ReflectionUtils.cs,GetStaticProperty,The length of the statement  "                result = type.InvokeMember(property' BindingFlags.Static | BindingFlags.Public | BindingFlags.GetField | BindingFlags.GetProperty' null' type' null); " is 149.
Long Statement,Westwind.Utilities,SerializationUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\SerializationUtils.cs,SerializeObject,The length of the statement  "                Debug.Write("SerializeObject failed with : " + ex.GetBaseException().Message + "\r\n" + (ex.InnerException != null ? ex.InnerException.Message : "")' "West Wind"); " is 163.
Complex Conditional,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,TypedValueToString,The conditional expression  "valueType == typeof(int) || valueType == typeof(decimal) ||                  valueType == typeof(double) || valueType == typeof(float) || valueType == typeof(Single)"  is complex.
Complex Conditional,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,StringToTypedValue,The conditional expression  "!isEmpty &&                      sourceString.ToLower() == "true" || sourceString.ToLower() == "on" || sourceString == "1""  is complex.
Complex Conditional,Westwind.Utilities,DataUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Data\DataUtils.cs,SqlTypeToDotNetType,The conditional expression  "sqlType == SqlDbType.NText || sqlType == SqlDbType.Text ||                  sqlType == SqlDbType.VarChar || sqlType == SqlDbType.NVarChar"  is complex.
Complex Conditional,Westwind.Utilities,ReflectionUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\ReflectionUtils.cs,TypedValueToString,The conditional expression  "valueType == typeof(int) || valueType == typeof(decimal) ||                  valueType == typeof(double) || valueType == typeof(float) || valueType == typeof(Single)"  is complex.
Complex Conditional,Westwind.Utilities,ReflectionUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\ReflectionUtils.cs,StringToTypedValue,The conditional expression  "!isEmpty &&                      sourceString.ToLower() == "true" || sourceString.ToLower() == "on" || sourceString == "1""  is complex.
Complex Conditional,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,FromCamelCase,The conditional expression  "!first &&                        ( char.IsUpper(ch) ||                          char.IsDigit(ch) && !char.IsDigit(lastChar))"  is complex.
Empty Catch Block,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,Read,The method has an empty catch block.
Empty Catch Block,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,Read,The method has an empty catch block.
Empty Catch Block,Westwind.Utilities.Configuration,ConfigurationFileConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\ConfigurationFileConfigurationProvider.cs,StringToTypedValue,The method has an empty catch block.
Empty Catch Block,Westwind.Utilities,StringSerializer,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringSerializer.cs,DeserializeObject,The method has an empty catch block.
Magic Number,Westwind.Utilities.Configuration,MyAppConfiguration,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\AppConfiguration.cs,MyAppConfiguration,The following statement contains a magic number: MaxPageListItems = 15;
Magic Number,Westwind.Utilities.Configuration,SqlServerConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\SqlServerConfigurationProvider.cs,Read,The following statement contains a magic number: using (SqlDataAccess data = new SqlDataAccess(ConnectionString' ProviderName))              {                  string sql = "select * from [" + Tablename + "] where id=" + Key.ToString();                    DbDataReader reader = null;                  try                  {                      DbCommand command = data.CreateCommand(sql);                      if (command == null)                      {                          SetError(data.ErrorMessage);                          return null;                      }                      reader = command.ExecuteReader();                      if (reader == null)                      {                          SetError(data.ErrorMessage);                          return null;                      }                  }                  catch (SqlException ex)                  {                      if (ex.Number == 208)                      {                            sql =      @"CREATE TABLE [" + Tablename + @"]    ( [id] [int] ' [ConfigData] [ntext] COLLATE SQL_Latin1_General_CP1_CI_AS)";                          try                          {                              data.ExecuteNonQuery(sql);                          }                          catch                          {                              return null;                          }                            // try again if we were able to create the table                           return Read<T>();                      }                    }                  catch (DbException dbEx)                  {                      // SQL CE Table doesn't exist                      if (dbEx.ErrorCode == -2147467259)                      {                          sql = String.Format(                              @"CREATE TABLE [{0}] ( [id] [int] ' [ConfigData] [ntext] )"'                              Tablename);                          try                          {                              data.ExecuteNonQuery(sql);                          }                          catch                          {                              return null;                          }                            // try again if we were able to create the table                           var inst = Read<T>();                            // if we got it write it to the db                          Write(inst);                            return inst;                      }                      return null;                  }                  catch (Exception ex)                  {                      this.SetError(ex);                                            if (reader != null)                          reader.Close();                                            data.CloseConnection();                      return null;                  }                      string xmlConfig = null;                    if (reader.Read())                      xmlConfig = (string)reader["ConfigData"];                    reader.Close();                  data.CloseConnection();                    if (string.IsNullOrEmpty(xmlConfig))                  {                      T newInstance = new T();                      newInstance.Provider = this;                      return newInstance;                  }                    T instance = Read<T>(xmlConfig);                    return instance;              }
Magic Number,Westwind.Utilities.Configuration,SqlServerConfigurationProvider<TAppConfiguration>,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Providers\SqlServerConfigurationProvider.cs,Read,The following statement contains a magic number: using (SqlDataAccess data = new SqlDataAccess(ConnectionString' ProviderName))              {                  string sql = "select * from [" + Tablename + "] where id=" + Key.ToString();                    DbDataReader reader = null;                  try                  {                      DbCommand command = data.CreateCommand(sql);                      if (command == null)                      {                          SetError(data.ErrorMessage);                          return null;                      }                      reader = command.ExecuteReader();                      if (reader == null)                      {                          SetError(data.ErrorMessage);                          return null;                      }                  }                  catch (SqlException ex)                  {                      if (ex.Number == 208)                      {                            sql =      @"CREATE TABLE [" + Tablename + @"]    ( [id] [int] ' [ConfigData] [ntext] COLLATE SQL_Latin1_General_CP1_CI_AS)";                          try                          {                              data.ExecuteNonQuery(sql);                          }                          catch                          {                              return null;                          }                            // try again if we were able to create the table                           return Read<T>();                      }                    }                  catch (DbException dbEx)                  {                      // SQL CE Table doesn't exist                      if (dbEx.ErrorCode == -2147467259)                      {                          sql = String.Format(                              @"CREATE TABLE [{0}] ( [id] [int] ' [ConfigData] [ntext] )"'                              Tablename);                          try                          {                              data.ExecuteNonQuery(sql);                          }                          catch                          {                              return null;                          }                            // try again if we were able to create the table                           var inst = Read<T>();                            // if we got it write it to the db                          Write(inst);                            return inst;                      }                      return null;                  }                  catch (Exception ex)                  {                      this.SetError(ex);                                            if (reader != null)                          reader.Close();                                            data.CloseConnection();                      return null;                  }                      string xmlConfig = null;                    if (reader.Read())                      xmlConfig = (string)reader["ConfigData"];                    reader.Close();                  data.CloseConnection();                    if (string.IsNullOrEmpty(xmlConfig))                  {                      T newInstance = new T();                      newInstance.Provider = this;                      return newInstance;                  }                    T instance = Read<T>(xmlConfig);                    return instance;              }
Magic Number,Westwind.Utilities,Encryption,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\Encryption.cs,ComputeHash,The following statement contains a magic number: if (saltBytes == null)              {                  // Define min and max salt sizes.                  int minSaltSize = 4;                  int maxSaltSize = 8;                    // Generate a random number for the size of the salt.                  Random random = new Random();                  int saltSize = random.Next(minSaltSize' maxSaltSize);                    // Allocate a byte array' which will hold the salt.                  saltBytes = new byte[saltSize];                    // Initialize a random number generator.                  RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();                    // Fill the salt with cryptographically strong byte values.                  rng.GetNonZeroBytes(saltBytes);              }
Magic Number,Westwind.Utilities,Encryption,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\Encryption.cs,ComputeHash,The following statement contains a magic number: if (saltBytes == null)              {                  // Define min and max salt sizes.                  int minSaltSize = 4;                  int maxSaltSize = 8;                    // Generate a random number for the size of the salt.                  Random random = new Random();                  int saltSize = random.Next(minSaltSize' maxSaltSize);                    // Allocate a byte array' which will hold the salt.                  saltBytes = new byte[saltSize];                    // Initialize a random number generator.                  RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();                    // Fill the salt with cryptographically strong byte values.                  rng.GetNonZeroBytes(saltBytes);              }
Magic Number,Westwind.Utilities,SerializationUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: if (!binarySerialization)              {                  XmlTextWriter writer = null;                  try                  {                      XmlSerializer serializer =                          new XmlSerializer(instance.GetType());                        // Create an XmlTextWriter using a FileStream.                      Stream fs = new FileStream(fileName' FileMode.Create);                      writer = new XmlTextWriter(fs' new UTF8Encoding());                      writer.Formatting = Formatting.Indented;                      writer.IndentChar = ' ';                      writer.Indentation = 3;                        // Serialize using the XmlTextWriter.                      serializer.Serialize(writer' instance);                  }                  catch(Exception ex)                  {                      Debug.Write("SerializeObject failed with : " + ex.Message' "West Wind");                      retVal = false;                  }                  finally                  {                      if (writer != null)                          writer.Close();                  }              }              else              {                  Stream fs = null;                  try                  {                      BinaryFormatter serializer = new BinaryFormatter();                      fs = new FileStream(fileName' FileMode.Create);                      serializer.Serialize(fs' instance);                  }                  catch                  {                      retVal = false;                  }                  finally                  {                      if (fs != null)                          fs.Close();                  }              }
Magic Number,Westwind.Utilities,SerializationUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\SerializationUtils.cs,SerializeObject,The following statement contains a magic number: try              {                  XmlSerializer serializer =                      new XmlSerializer(instance.GetType());                    // Create an XmlTextWriter using a FileStream.                  writer.Formatting = Formatting.Indented;                  writer.IndentChar = ' ';                  writer.Indentation = 3;                    // Serialize using the XmlTextWriter.                  serializer.Serialize(writer' instance);              }              catch (Exception ex)              {                              Debug.Write("SerializeObject failed with : " + ex.GetBaseException().Message + "\r\n" + (ex.InnerException != null ? ex.InnerException.Message : "")' "West Wind");                    if (throwExceptions)                      throw;                    retVal = false;              }
Magic Number,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  switch (text[i])                  {                        case '<':                          sb.Append("&lt;");                          break;                      case '>':                          sb.Append("&gt;");                          break;                      case '"':                          sb.Append("&quot;");                          break;                      case '&':                          sb.Append("&amp;");                          break;                      default:                          if (text[i] > 159)                          {                              // decimal numeric entity                              sb.Append("&#");                              sb.Append(((int)text[i]).ToString(CultureInfo.InvariantCulture));                              sb.Append(";");                          }                          else                              sb.Append(text[i]);                          break;                  }              }
Magic Number,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,FromCamelCase,The following statement contains a magic number: StringBuilder sb = new StringBuilder(camelCase.Length + 10);
Magic Number,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,NormalizeIndentation,The following statement contains a magic number: string[] lines = text.Split(new string[3] { "\r\n"' "\r"' "\n" }' StringSplitOptions.None);
Magic Number,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,NormalizeIndentation,The following statement contains a magic number: int minPadding = 1000;
Magic Number,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,StringToStream,The following statement contains a magic number: MemoryStream ms = new MemoryStream(text.Length * 2);
Magic Number,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,GetUrlEncodedKey,The following statement contains a magic number: int lnStart = Index + 2 + key.Length;
Magic Number,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,Base36Encode,The following statement contains a magic number: do              {                  returnValue = base36CharArray[value % base36CharArray.Length] + returnValue;                  value /= 36;              } while (value != 0);
Magic Number,Westwind.Utilities,StringUtils,C:\repos\RickStrahl_Westwind.ApplicationConfiguration\Westwind.Utilities.Configuration\Support\Utilities\StringUtils.cs,Base36Decode,The following statement contains a magic number: for (long i = 0; i < arrInput.Length; i++)              {                  long valueindex = base36Chars.IndexOf(arrInput[i]);                  returnValue += Convert.ToInt64(valueindex * Math.Pow(36' i));              }
