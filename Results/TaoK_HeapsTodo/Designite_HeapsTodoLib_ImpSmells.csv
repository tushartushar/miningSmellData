Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,Cyclomatic complexity of the method is 11
Complex Method,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,AppendTask,Cyclomatic complexity of the method is 10
Complex Method,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,Cyclomatic complexity of the method is 10
Long Statement,HeapsTodoLib,TaskListFactory,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TaskListFactory.cs,ReadList,The length of the statement  "	if (fileContentLines.Length > 0 && fileContentLines [0].StartsWith (HeapsTodoTaskList.HEAPSTODO_HEADER_COMMENT' StringComparison.InvariantCultureIgnoreCase)) " is 157.
Long Statement,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,AppendTask,The length of the statement  "	//figure out how key/value pairs fit in' like due date - maybe there should be an easy way to add them so they default to the end? " is 130.
Long Statement,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,The length of the statement  "		if (!strings [stringIndex].StartsWith ("#") && !(stringIndex == strings.Length - 1 && strings [stringIndex].Length == 0)) { " is 123.
Long Statement,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,MergeToNewList,The length of the statement  "	//this is technically wrong...  the merge COULD technically return something that was not a "ITaskList2" - I just know it doesn't right now... " is 142.
Long Statement,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,AppendTask,The length of the statement  "	//figure out how key/value pairs fit in' like due date - maybe there should be an easy way to add them so they default to the end? " is 130.
Long Statement,HeapsTodoLib,TodoTxtTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTaskList.cs,MergeToNewList,The length of the statement  "	//this is technically wrong...  the merge COULD technically return something that was not a "ITaskList2" - I just know it doesn't right now... " is 142.
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (remainingText.StartsWith ("x "' StringComparison.InvariantCulture)) {  	Completed = true;  	remainingText = remainingText.Substring (2);  	var completionDateMatch = startingDateMatcher.Match (remainingText);  	if (completionDateMatch.Success) {  		CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  		remainingText = remainingText.Substring (completionDateMatch.Length);  	}  }  else if (remainingText.StartsWith ("- ")) {  	//leading hyphen is decoration only.  	remainingText = remainingText.Substring (2);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (remainingText.StartsWith ("x "' StringComparison.InvariantCulture)) {  	Completed = true;  	remainingText = remainingText.Substring (2);  	var completionDateMatch = startingDateMatcher.Match (remainingText);  	if (completionDateMatch.Success) {  		CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  		remainingText = remainingText.Substring (completionDateMatch.Length);  	}  }  else if (remainingText.StartsWith ("- ")) {  	//leading hyphen is decoration only.  	remainingText = remainingText.Substring (2);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (remainingText.StartsWith ("x "' StringComparison.InvariantCulture)) {  	Completed = true;  	remainingText = remainingText.Substring (2);  	var completionDateMatch = startingDateMatcher.Match (remainingText);  	if (completionDateMatch.Success) {  		CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  		remainingText = remainingText.Substring (completionDateMatch.Length);  	}  }  else if (remainingText.StartsWith ("- ")) {  	//leading hyphen is decoration only.  	remainingText = remainingText.Substring (2);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (remainingText.StartsWith ("x "' StringComparison.InvariantCulture)) {  	Completed = true;  	remainingText = remainingText.Substring (2);  	var completionDateMatch = startingDateMatcher.Match (remainingText);  	if (completionDateMatch.Success) {  		CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  		remainingText = remainingText.Substring (completionDateMatch.Length);  	}  }  else if (remainingText.StartsWith ("- ")) {  	//leading hyphen is decoration only.  	remainingText = remainingText.Substring (2);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: remainingText = remainingText.Substring (2);  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (completionDateMatch.Success) {  	CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  	remainingText = remainingText.Substring (completionDateMatch.Length);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (completionDateMatch.Success) {  	CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  	remainingText = remainingText.Substring (completionDateMatch.Length);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (remainingText.StartsWith ("- ")) {  	//leading hyphen is decoration only.  	remainingText = remainingText.Substring (2);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: remainingText = remainingText.Substring (2);  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (creationDateMatch.Success) {  	CreationDate = new DateTime (int.Parse (creationDateMatch.Groups [1].Value)' int.Parse (creationDateMatch.Groups [2].Value)' int.Parse (creationDateMatch.Groups [3].Value));  	remainingText = remainingText.Substring (creationDateMatch.Length);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: if (creationDateMatch.Success) {  	CreationDate = new DateTime (int.Parse (creationDateMatch.Groups [1].Value)' int.Parse (creationDateMatch.Groups [2].Value)' int.Parse (creationDateMatch.Groups [3].Value));  	remainingText = remainingText.Substring (creationDateMatch.Length);  }  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: CreationDate = new DateTime (int.Parse (creationDateMatch.Groups [1].Value)' int.Parse (creationDateMatch.Groups [2].Value)' int.Parse (creationDateMatch.Groups [3].Value));  
Magic Number,HeapsTodoLib,HeapsTodoTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTask.cs,HeapsTodoTask,The following statement contains a magic number: CreationDate = new DateTime (int.Parse (creationDateMatch.Groups [1].Value)' int.Parse (creationDateMatch.Groups [2].Value)' int.Parse (creationDateMatch.Groups [3].Value));  
Magic Number,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,The following statement contains a magic number: while (stringIndex < strings.Length) {  	var leadingWhiteSpaceMatch = _leadingSpaceMatcher.Match (strings [stringIndex]);  	//will always match' even when 0-length  	int leadingSpaceCount = leadingWhiteSpaceMatch.Value.Replace ("\t"' "    ").Length;  	//exit if nothing interesting  	if (leadingSpaceCount < indentLevel)  		break;  	if (!strings [stringIndex].StartsWith ("#") && !(stringIndex == strings.Length - 1 && strings [stringIndex].Length == 0)) {  		int fromIndex = stringIndex;  		if (Regex.Matches (strings [stringIndex]' "```").Count % 2 == 1) {  			stringIndex++;  			while (stringIndex < strings.Length && Regex.Matches (strings [stringIndex]' "```").Count % 2 == 0)  				stringIndex++;  		}  		if (stringIndex == strings.Length)  			//we overshot  			stringIndex--;  		string[] interestingStrings = new string[stringIndex - fromIndex + 1];  		Array.Copy (strings' fromIndex' interestingStrings' 0' stringIndex - fromIndex + 1);  		var outTask = new HeapsTodoTask (string.Join (Environment.NewLine' interestingStrings));  		stringIndex++;  		foreach (HeapsTodoTask subtask in ReadTasksRecurse (strings' ref stringIndex' leadingSpaceCount + 1))  			outTask.SubTasks.Add (subtask);  		outList.Add (outTask);  	}  	else  		stringIndex++;  }  
Magic Number,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,The following statement contains a magic number: while (stringIndex < strings.Length) {  	var leadingWhiteSpaceMatch = _leadingSpaceMatcher.Match (strings [stringIndex]);  	//will always match' even when 0-length  	int leadingSpaceCount = leadingWhiteSpaceMatch.Value.Replace ("\t"' "    ").Length;  	//exit if nothing interesting  	if (leadingSpaceCount < indentLevel)  		break;  	if (!strings [stringIndex].StartsWith ("#") && !(stringIndex == strings.Length - 1 && strings [stringIndex].Length == 0)) {  		int fromIndex = stringIndex;  		if (Regex.Matches (strings [stringIndex]' "```").Count % 2 == 1) {  			stringIndex++;  			while (stringIndex < strings.Length && Regex.Matches (strings [stringIndex]' "```").Count % 2 == 0)  				stringIndex++;  		}  		if (stringIndex == strings.Length)  			//we overshot  			stringIndex--;  		string[] interestingStrings = new string[stringIndex - fromIndex + 1];  		Array.Copy (strings' fromIndex' interestingStrings' 0' stringIndex - fromIndex + 1);  		var outTask = new HeapsTodoTask (string.Join (Environment.NewLine' interestingStrings));  		stringIndex++;  		foreach (HeapsTodoTask subtask in ReadTasksRecurse (strings' ref stringIndex' leadingSpaceCount + 1))  			outTask.SubTasks.Add (subtask);  		outList.Add (outTask);  	}  	else  		stringIndex++;  }  
Magic Number,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,The following statement contains a magic number: if (!strings [stringIndex].StartsWith ("#") && !(stringIndex == strings.Length - 1 && strings [stringIndex].Length == 0)) {  	int fromIndex = stringIndex;  	if (Regex.Matches (strings [stringIndex]' "```").Count % 2 == 1) {  		stringIndex++;  		while (stringIndex < strings.Length && Regex.Matches (strings [stringIndex]' "```").Count % 2 == 0)  			stringIndex++;  	}  	if (stringIndex == strings.Length)  		//we overshot  		stringIndex--;  	string[] interestingStrings = new string[stringIndex - fromIndex + 1];  	Array.Copy (strings' fromIndex' interestingStrings' 0' stringIndex - fromIndex + 1);  	var outTask = new HeapsTodoTask (string.Join (Environment.NewLine' interestingStrings));  	stringIndex++;  	foreach (HeapsTodoTask subtask in ReadTasksRecurse (strings' ref stringIndex' leadingSpaceCount + 1))  		outTask.SubTasks.Add (subtask);  	outList.Add (outTask);  }  else  	stringIndex++;  
Magic Number,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,The following statement contains a magic number: if (!strings [stringIndex].StartsWith ("#") && !(stringIndex == strings.Length - 1 && strings [stringIndex].Length == 0)) {  	int fromIndex = stringIndex;  	if (Regex.Matches (strings [stringIndex]' "```").Count % 2 == 1) {  		stringIndex++;  		while (stringIndex < strings.Length && Regex.Matches (strings [stringIndex]' "```").Count % 2 == 0)  			stringIndex++;  	}  	if (stringIndex == strings.Length)  		//we overshot  		stringIndex--;  	string[] interestingStrings = new string[stringIndex - fromIndex + 1];  	Array.Copy (strings' fromIndex' interestingStrings' 0' stringIndex - fromIndex + 1);  	var outTask = new HeapsTodoTask (string.Join (Environment.NewLine' interestingStrings));  	stringIndex++;  	foreach (HeapsTodoTask subtask in ReadTasksRecurse (strings' ref stringIndex' leadingSpaceCount + 1))  		outTask.SubTasks.Add (subtask);  	outList.Add (outTask);  }  else  	stringIndex++;  
Magic Number,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,The following statement contains a magic number: if (Regex.Matches (strings [stringIndex]' "```").Count % 2 == 1) {  	stringIndex++;  	while (stringIndex < strings.Length && Regex.Matches (strings [stringIndex]' "```").Count % 2 == 0)  		stringIndex++;  }  
Magic Number,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,The following statement contains a magic number: if (Regex.Matches (strings [stringIndex]' "```").Count % 2 == 1) {  	stringIndex++;  	while (stringIndex < strings.Length && Regex.Matches (strings [stringIndex]' "```").Count % 2 == 0)  		stringIndex++;  }  
Magic Number,HeapsTodoLib,HeapsTodoTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\HeapsTodoTaskList.cs,ReadTasksRecurse,The following statement contains a magic number: while (stringIndex < strings.Length && Regex.Matches (strings [stringIndex]' "```").Count % 2 == 0)  	stringIndex++;  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: if (remainingText.StartsWith ("x "' StringComparison.InvariantCulture)) {  	Completed = true;  	remainingText = remainingText.Substring (2);  	var completionDateMatch = startingDateMatcher.Match (remainingText);  	if (completionDateMatch.Success) {  		CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  		remainingText = remainingText.Substring (completionDateMatch.Length);  	}  }  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: if (remainingText.StartsWith ("x "' StringComparison.InvariantCulture)) {  	Completed = true;  	remainingText = remainingText.Substring (2);  	var completionDateMatch = startingDateMatcher.Match (remainingText);  	if (completionDateMatch.Success) {  		CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  		remainingText = remainingText.Substring (completionDateMatch.Length);  	}  }  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: if (remainingText.StartsWith ("x "' StringComparison.InvariantCulture)) {  	Completed = true;  	remainingText = remainingText.Substring (2);  	var completionDateMatch = startingDateMatcher.Match (remainingText);  	if (completionDateMatch.Success) {  		CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  		remainingText = remainingText.Substring (completionDateMatch.Length);  	}  }  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: remainingText = remainingText.Substring (2);  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: if (completionDateMatch.Success) {  	CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  	remainingText = remainingText.Substring (completionDateMatch.Length);  }  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: if (completionDateMatch.Success) {  	CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  	remainingText = remainingText.Substring (completionDateMatch.Length);  }  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: CompletionDate = new DateTime (int.Parse (completionDateMatch.Groups [1].Value)' int.Parse (completionDateMatch.Groups [2].Value)' int.Parse (completionDateMatch.Groups [3].Value));  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: if (creationDateMatch.Success) {  	CreationDate = new DateTime (int.Parse (creationDateMatch.Groups [1].Value)' int.Parse (creationDateMatch.Groups [2].Value)' int.Parse (creationDateMatch.Groups [3].Value));  	remainingText = remainingText.Substring (creationDateMatch.Length);  }  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: if (creationDateMatch.Success) {  	CreationDate = new DateTime (int.Parse (creationDateMatch.Groups [1].Value)' int.Parse (creationDateMatch.Groups [2].Value)' int.Parse (creationDateMatch.Groups [3].Value));  	remainingText = remainingText.Substring (creationDateMatch.Length);  }  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: CreationDate = new DateTime (int.Parse (creationDateMatch.Groups [1].Value)' int.Parse (creationDateMatch.Groups [2].Value)' int.Parse (creationDateMatch.Groups [3].Value));  
Magic Number,HeapsTodoLib,TodoTxtTask,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTask.cs,TodoTxtTask,The following statement contains a magic number: CreationDate = new DateTime (int.Parse (creationDateMatch.Groups [1].Value)' int.Parse (creationDateMatch.Groups [2].Value)' int.Parse (creationDateMatch.Groups [3].Value));  
Magic Number,HeapsTodoLib,TodoTxtTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTaskList.cs,ConvertFromHeapsTodo,The following statement contains a magic number: if (outPrint.StartsWith ("- "))  	outPrint = outPrint.Substring (2);  
Magic Number,HeapsTodoLib,TodoTxtTaskList,C:\repos\TaoK_HeapsTodo\HeapsTodoLib\TodoTxtTaskList.cs,ConvertFromHeapsTodo,The following statement contains a magic number: outPrint = outPrint.Substring (2);  
