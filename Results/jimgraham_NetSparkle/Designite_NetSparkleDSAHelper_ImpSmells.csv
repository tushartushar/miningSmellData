Implementation smell,Namespace,Class,File,Method,Description
Long Method,NetSparkleDSAHelper,Program,C:\repos\jimgraham_NetSparkle\NetSparkleDSAHelper\Program.cs,Main,The method has 112 lines of code.
Long Statement,NetSparkleDSAHelper,Program,C:\repos\jimgraham_NetSparkle\NetSparkleDSAHelper\Program.cs,Usage,The length of the statement  "            Console.WriteLine("NetSparkleDSAHelper.exe /verify_update {YourPackage.msi} {NetSparkle_DSA.pub} \"{Base64SignatureString}\""); " is 127.
Magic Number,NetSparkleDSAHelper,Program,C:\repos\jimgraham_NetSparkle\NetSparkleDSAHelper\Program.cs,Main,The following statement contains a magic number: try              {                  // check if we have some parameters                  if (!args.Any())                  {                      Usage();                      return;                  }                    // check what parameter we have                  switch (args[0].ToLower())                  {                      case "/genkey_pair":                          {                              // show headline                              ShowHeadLine();                                // verify if output file exists                              if (File.Exists(_dsaPrivKey) || File.Exists(_dsaPubKey))                              {                                  Console.WriteLine("Error: Output files are currently exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // start key generation                              Console.WriteLine("Generating key pair with 1024 Bits...");                              DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                                Console.WriteLine("Storing private key to " + _dsaPrivKey);                              using (StreamWriter sw = new StreamWriter(_dsaPrivKey))                              {                                  sw.Write(prv.ToXmlString(true));                              }                                Console.WriteLine("Storing public key to " + _dsaPubKey);                              using (StreamWriter sw = new StreamWriter(_dsaPubKey))                              {                                  sw.Write(prv.ToXmlString(false));                              }                                Console.WriteLine("");                          }                          break;                      case "/sign_update":                          {                              if (args.Count() != 3)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String privKey = args[2];                                if (!File.Exists(binary))                              {                                  Console.Error.WriteLine("Target binary " + binary + " does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                if (!File.Exists(privKey))                              {                                  Console.Error.WriteLine("Private key file does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // Reading private key                              String key;                              using (StreamReader reader = new StreamReader(privKey))                              {                                  key = reader.ReadToEnd();                              }                                DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                              prv.FromXmlString(key);                                // open stream                              Byte[] hash;                              using (Stream inputStream = File.OpenRead(binary))                              {                                  hash = prv.SignData(inputStream);                              }                                String base64Hash = Convert.ToBase64String(hash);                              Console.WriteLine(base64Hash);                          }                          break;                      case "/verify_update":                          {                              if (args.Count() != 4)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String pubKey = args[2];                              String sign = args[3];                                sign = sign.TrimStart('"');                              sign = sign.TrimEnd('"');                                AppLimit.NetSparkle.NetSparkleDSAVerificator dsaVerif = new AppLimit.NetSparkle.NetSparkleDSAVerificator(pubKey);                              if (dsaVerif.VerifyDSASignature(sign' binary))                                  Console.WriteLine("Binary " + binary + " is valid");                              else                                  Console.WriteLine("Binary " + binary + " is NOT valid");                          }                          break;                      default:                           Usage();                          break;                  }              }              catch (Exception e)              {                  Console.WriteLine("Something went wrong :-(");                  Console.WriteLine(e.StackTrace);              }
Magic Number,NetSparkleDSAHelper,Program,C:\repos\jimgraham_NetSparkle\NetSparkleDSAHelper\Program.cs,Main,The following statement contains a magic number: try              {                  // check if we have some parameters                  if (!args.Any())                  {                      Usage();                      return;                  }                    // check what parameter we have                  switch (args[0].ToLower())                  {                      case "/genkey_pair":                          {                              // show headline                              ShowHeadLine();                                // verify if output file exists                              if (File.Exists(_dsaPrivKey) || File.Exists(_dsaPubKey))                              {                                  Console.WriteLine("Error: Output files are currently exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // start key generation                              Console.WriteLine("Generating key pair with 1024 Bits...");                              DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                                Console.WriteLine("Storing private key to " + _dsaPrivKey);                              using (StreamWriter sw = new StreamWriter(_dsaPrivKey))                              {                                  sw.Write(prv.ToXmlString(true));                              }                                Console.WriteLine("Storing public key to " + _dsaPubKey);                              using (StreamWriter sw = new StreamWriter(_dsaPubKey))                              {                                  sw.Write(prv.ToXmlString(false));                              }                                Console.WriteLine("");                          }                          break;                      case "/sign_update":                          {                              if (args.Count() != 3)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String privKey = args[2];                                if (!File.Exists(binary))                              {                                  Console.Error.WriteLine("Target binary " + binary + " does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                if (!File.Exists(privKey))                              {                                  Console.Error.WriteLine("Private key file does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // Reading private key                              String key;                              using (StreamReader reader = new StreamReader(privKey))                              {                                  key = reader.ReadToEnd();                              }                                DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                              prv.FromXmlString(key);                                // open stream                              Byte[] hash;                              using (Stream inputStream = File.OpenRead(binary))                              {                                  hash = prv.SignData(inputStream);                              }                                String base64Hash = Convert.ToBase64String(hash);                              Console.WriteLine(base64Hash);                          }                          break;                      case "/verify_update":                          {                              if (args.Count() != 4)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String pubKey = args[2];                              String sign = args[3];                                sign = sign.TrimStart('"');                              sign = sign.TrimEnd('"');                                AppLimit.NetSparkle.NetSparkleDSAVerificator dsaVerif = new AppLimit.NetSparkle.NetSparkleDSAVerificator(pubKey);                              if (dsaVerif.VerifyDSASignature(sign' binary))                                  Console.WriteLine("Binary " + binary + " is valid");                              else                                  Console.WriteLine("Binary " + binary + " is NOT valid");                          }                          break;                      default:                           Usage();                          break;                  }              }              catch (Exception e)              {                  Console.WriteLine("Something went wrong :-(");                  Console.WriteLine(e.StackTrace);              }
Magic Number,NetSparkleDSAHelper,Program,C:\repos\jimgraham_NetSparkle\NetSparkleDSAHelper\Program.cs,Main,The following statement contains a magic number: try              {                  // check if we have some parameters                  if (!args.Any())                  {                      Usage();                      return;                  }                    // check what parameter we have                  switch (args[0].ToLower())                  {                      case "/genkey_pair":                          {                              // show headline                              ShowHeadLine();                                // verify if output file exists                              if (File.Exists(_dsaPrivKey) || File.Exists(_dsaPubKey))                              {                                  Console.WriteLine("Error: Output files are currently exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // start key generation                              Console.WriteLine("Generating key pair with 1024 Bits...");                              DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                                Console.WriteLine("Storing private key to " + _dsaPrivKey);                              using (StreamWriter sw = new StreamWriter(_dsaPrivKey))                              {                                  sw.Write(prv.ToXmlString(true));                              }                                Console.WriteLine("Storing public key to " + _dsaPubKey);                              using (StreamWriter sw = new StreamWriter(_dsaPubKey))                              {                                  sw.Write(prv.ToXmlString(false));                              }                                Console.WriteLine("");                          }                          break;                      case "/sign_update":                          {                              if (args.Count() != 3)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String privKey = args[2];                                if (!File.Exists(binary))                              {                                  Console.Error.WriteLine("Target binary " + binary + " does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                if (!File.Exists(privKey))                              {                                  Console.Error.WriteLine("Private key file does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // Reading private key                              String key;                              using (StreamReader reader = new StreamReader(privKey))                              {                                  key = reader.ReadToEnd();                              }                                DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                              prv.FromXmlString(key);                                // open stream                              Byte[] hash;                              using (Stream inputStream = File.OpenRead(binary))                              {                                  hash = prv.SignData(inputStream);                              }                                String base64Hash = Convert.ToBase64String(hash);                              Console.WriteLine(base64Hash);                          }                          break;                      case "/verify_update":                          {                              if (args.Count() != 4)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String pubKey = args[2];                              String sign = args[3];                                sign = sign.TrimStart('"');                              sign = sign.TrimEnd('"');                                AppLimit.NetSparkle.NetSparkleDSAVerificator dsaVerif = new AppLimit.NetSparkle.NetSparkleDSAVerificator(pubKey);                              if (dsaVerif.VerifyDSASignature(sign' binary))                                  Console.WriteLine("Binary " + binary + " is valid");                              else                                  Console.WriteLine("Binary " + binary + " is NOT valid");                          }                          break;                      default:                           Usage();                          break;                  }              }              catch (Exception e)              {                  Console.WriteLine("Something went wrong :-(");                  Console.WriteLine(e.StackTrace);              }
Magic Number,NetSparkleDSAHelper,Program,C:\repos\jimgraham_NetSparkle\NetSparkleDSAHelper\Program.cs,Main,The following statement contains a magic number: try              {                  // check if we have some parameters                  if (!args.Any())                  {                      Usage();                      return;                  }                    // check what parameter we have                  switch (args[0].ToLower())                  {                      case "/genkey_pair":                          {                              // show headline                              ShowHeadLine();                                // verify if output file exists                              if (File.Exists(_dsaPrivKey) || File.Exists(_dsaPubKey))                              {                                  Console.WriteLine("Error: Output files are currently exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // start key generation                              Console.WriteLine("Generating key pair with 1024 Bits...");                              DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                                Console.WriteLine("Storing private key to " + _dsaPrivKey);                              using (StreamWriter sw = new StreamWriter(_dsaPrivKey))                              {                                  sw.Write(prv.ToXmlString(true));                              }                                Console.WriteLine("Storing public key to " + _dsaPubKey);                              using (StreamWriter sw = new StreamWriter(_dsaPubKey))                              {                                  sw.Write(prv.ToXmlString(false));                              }                                Console.WriteLine("");                          }                          break;                      case "/sign_update":                          {                              if (args.Count() != 3)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String privKey = args[2];                                if (!File.Exists(binary))                              {                                  Console.Error.WriteLine("Target binary " + binary + " does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                if (!File.Exists(privKey))                              {                                  Console.Error.WriteLine("Private key file does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // Reading private key                              String key;                              using (StreamReader reader = new StreamReader(privKey))                              {                                  key = reader.ReadToEnd();                              }                                DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                              prv.FromXmlString(key);                                // open stream                              Byte[] hash;                              using (Stream inputStream = File.OpenRead(binary))                              {                                  hash = prv.SignData(inputStream);                              }                                String base64Hash = Convert.ToBase64String(hash);                              Console.WriteLine(base64Hash);                          }                          break;                      case "/verify_update":                          {                              if (args.Count() != 4)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String pubKey = args[2];                              String sign = args[3];                                sign = sign.TrimStart('"');                              sign = sign.TrimEnd('"');                                AppLimit.NetSparkle.NetSparkleDSAVerificator dsaVerif = new AppLimit.NetSparkle.NetSparkleDSAVerificator(pubKey);                              if (dsaVerif.VerifyDSASignature(sign' binary))                                  Console.WriteLine("Binary " + binary + " is valid");                              else                                  Console.WriteLine("Binary " + binary + " is NOT valid");                          }                          break;                      default:                           Usage();                          break;                  }              }              catch (Exception e)              {                  Console.WriteLine("Something went wrong :-(");                  Console.WriteLine(e.StackTrace);              }
Magic Number,NetSparkleDSAHelper,Program,C:\repos\jimgraham_NetSparkle\NetSparkleDSAHelper\Program.cs,Main,The following statement contains a magic number: try              {                  // check if we have some parameters                  if (!args.Any())                  {                      Usage();                      return;                  }                    // check what parameter we have                  switch (args[0].ToLower())                  {                      case "/genkey_pair":                          {                              // show headline                              ShowHeadLine();                                // verify if output file exists                              if (File.Exists(_dsaPrivKey) || File.Exists(_dsaPubKey))                              {                                  Console.WriteLine("Error: Output files are currently exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // start key generation                              Console.WriteLine("Generating key pair with 1024 Bits...");                              DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                                Console.WriteLine("Storing private key to " + _dsaPrivKey);                              using (StreamWriter sw = new StreamWriter(_dsaPrivKey))                              {                                  sw.Write(prv.ToXmlString(true));                              }                                Console.WriteLine("Storing public key to " + _dsaPubKey);                              using (StreamWriter sw = new StreamWriter(_dsaPubKey))                              {                                  sw.Write(prv.ToXmlString(false));                              }                                Console.WriteLine("");                          }                          break;                      case "/sign_update":                          {                              if (args.Count() != 3)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String privKey = args[2];                                if (!File.Exists(binary))                              {                                  Console.Error.WriteLine("Target binary " + binary + " does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                if (!File.Exists(privKey))                              {                                  Console.Error.WriteLine("Private key file does not exists");                                  Environment.ExitCode = -1;                                  return;                              }                                // Reading private key                              String key;                              using (StreamReader reader = new StreamReader(privKey))                              {                                  key = reader.ReadToEnd();                              }                                DSACryptoServiceProvider prv = new DSACryptoServiceProvider();                              prv.FromXmlString(key);                                // open stream                              Byte[] hash;                              using (Stream inputStream = File.OpenRead(binary))                              {                                  hash = prv.SignData(inputStream);                              }                                String base64Hash = Convert.ToBase64String(hash);                              Console.WriteLine(base64Hash);                          }                          break;                      case "/verify_update":                          {                              if (args.Count() != 4)                              {                                  Usage();                                  Environment.ExitCode = -1;                                  return;                              }                                // get parameter                              String binary = args[1];                              String pubKey = args[2];                              String sign = args[3];                                sign = sign.TrimStart('"');                              sign = sign.TrimEnd('"');                                AppLimit.NetSparkle.NetSparkleDSAVerificator dsaVerif = new AppLimit.NetSparkle.NetSparkleDSAVerificator(pubKey);                              if (dsaVerif.VerifyDSASignature(sign' binary))                                  Console.WriteLine("Binary " + binary + " is valid");                              else                                  Console.WriteLine("Binary " + binary + " is NOT valid");                          }                          break;                      default:                           Usage();                          break;                  }              }              catch (Exception e)              {                  Console.WriteLine("Something went wrong :-(");                  Console.WriteLine(e.StackTrace);              }
