Implementation smell,Namespace,Class,File,Method,Description
Complex Method,m.Util.Options,Option,C:\repos\mcjs_mcjs\MC.Util\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,m.Util.Options,Option,C:\repos\mcjs_mcjs\MC.Util\Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Complex Method,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,GetLines,Cyclomatic complexity of the method is 8
Complex Method,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,GetLineEnd,Cyclomatic complexity of the method is 11
Long Parameter List,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,GetOptionParts,The method has 5 parameters.
Long Statement,m.Util.Diagnose,Diagnostics,C:\repos\mcjs_mcjs\MC.Util\Diagnose.cs,GetStackTrace,The length of the statement  "	sb.AppendFormat ("{0}({1})"' sf.GetMethod ().Name' string.Join ("' "' sf.GetMethod ().GetParameters ().Select (pi => string.Format ("{0} {1}"' pi.ParameterType.Name' pi.Name)).ToArray ())); " is 189.
Long Statement,m.Util.Diagnose,Diagnostics,C:\repos\mcjs_mcjs\MC.Util\Diagnose.cs,Fail,The length of the statement  "			throw new System.Exception (string.Format ("FAIL ERROR (FUNCTION {0} LINE {1} CHAR {2})"' location.Function' location.Line' location.Character)' exception); " is 156.
Long Statement,m.Util.Diagnose,Diagnostics,C:\repos\mcjs_mcjs\MC.Util\Diagnose.cs,WriteException,The length of the statement  "	if (!RedirectAllExceptions && (e is NullReferenceException || e is InvalidProgramException || e is OutOfMemoryException || e is MissingMethodException || e is MissingFieldException)) { " is 184.
Long Statement,m.Util.Diagnose,Diagnostics,C:\repos\mcjs_mcjs\MC.Util\Diagnose.cs,PreserveStackTrace,The length of the statement  "	FieldInfo remoteStackTraceString = typeof(Exception).GetField ("_remoteStackTraceString"' BindingFlags.Instance | BindingFlags.NonPublic); " is 138.
Long Statement,m.Util.Diagnose,Diagnostics,C:\repos\mcjs_mcjs\MC.Util\Diagnose.cs,PreserveStackTrace,The length of the statement  "		remoteStackTraceString = typeof(Exception).GetField ("remote_stack_trace"' BindingFlags.Instance | BindingFlags.NonPublic); " is 123.
Long Statement,m.Util.Options,OptionValueCollection,C:\repos\mcjs_mcjs\MC.Util\Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,m.Util.Options,Option,C:\repos\mcjs_mcjs\MC.Util\Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' typeof(T).Name' c.OptionName)' c.OptionName' e); " is 192.
Long Statement,m.Util.Options,Option,C:\repos\mcjs_mcjs\MC.Util\Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,m.Util.Options,Option,C:\repos\mcjs_mcjs\MC.Util\Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' StringSplitOptions.None) : new string[] { " is 137.
Long Statement,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Complex Conditional,m.Util.Diagnose,Diagnostics,C:\repos\mcjs_mcjs\MC.Util\Diagnose.cs,WriteException,The conditional expression  "!RedirectAllExceptions && (e is NullReferenceException || e is InvalidProgramException || e is OutOfMemoryException || e is MissingMethodException || e is MissingFieldException)"  is complex.
Complex Conditional,m.Util.Options,Option,C:\repos\mcjs_mcjs\MC.Util\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Magic Number,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	List<string> lines = GetLines (localizer (GetDescription (p.Description)));  	o.WriteLine (lines [0]);  	string prefix = new string (' '' OptionWidth + 2);  	for (int i = 1; i < lines.Count; ++i) {  		o.Write (prefix);  		o.WriteLine (lines [i]);  	}  }  
Missing Default,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
Missing Default,m.Util.Options,OptionSet,C:\repos\mcjs_mcjs\MC.Util\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description [i]) {  case ' ':  case '\t':  case '\v':  case '-':  case ''':  case '.':  case ';':  	sep = i;  	break;  case '\n':  	return i;  }  
