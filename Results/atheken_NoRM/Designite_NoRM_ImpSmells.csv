Implementation smell,Namespace,Class,File,Method,Description
Long Method,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,The method has 142 lines of code.
Complex Method,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,Cyclomatic complexity of the method is 17
Complex Method,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,Cyclomatic complexity of the method is 15
Complex Method,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,Cyclomatic complexity of the method is 15
Complex Method,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Norm.Linq,ExpressionVisitor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 16
Complex Method,Norm.Linq,LinqTypeHelper,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\LinqTypeHelper.cs,FindIEnumerable,Cyclomatic complexity of the method is 10
Complex Method,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,Cyclomatic complexity of the method is 14
Complex Method,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMemberAccess,Cyclomatic complexity of the method is 12
Complex Method,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitBinaryOperator,Cyclomatic complexity of the method is 19
Complex Method,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitConstant,Cyclomatic complexity of the method is 11
Complex Method,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,Cyclomatic complexity of the method is 22
Complex Method,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleMethodCall,Cyclomatic complexity of the method is 10
Long Parameter List,Norm,MongoCollectionExtensions,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionExtensions.cs,CreateIndex,The method has 5 parameters. Parameters: collection' index' indexName' isUnique' direction
Long Parameter List,Norm,MongoCollectionExtensions,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionExtensions.cs,Find,The method has 6 parameters. Parameters: collection' template' orderBy' limit' skip' fieldSelection
Long Parameter List,Norm,MongoCollectionExtensions,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionExtensions.cs,Find,The method has 5 parameters. Parameters: collection' template' limit' skip' fullyQualifiedName
Long Parameter List,Norm,MongoCollectionExtensions,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionExtensions.cs,Find,The method has 5 parameters. Parameters: collection' template' orderby' limit' skip
Long Parameter List,Norm.Collections,IMongoCollection,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\IMongoCollectionGeneric.cs,Find,The method has 5 parameters. Parameters: template' orderBy' limit' skip' fullyQualifiedName
Long Parameter List,Norm.Collections,IMongoCollection,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\IMongoCollectionGeneric.cs,Find,The method has 5 parameters. Parameters: template' orderBy' fieldSelector' limit' skip
Long Parameter List,Norm.Collections,IMongoCollection,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\IMongoCollectionGeneric.cs,Find,The method has 6 parameters. Parameters: template' orderBy' limit' skip' fullName' fieldSelection
Long Parameter List,Norm.Collections,MongoCollection<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionGeneric.cs,Find,The method has 5 parameters. Parameters: template' orderBy' limit' skip' fullyQualifiedName
Long Parameter List,Norm.Collections,MongoCollection<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionGeneric.cs,Find,The method has 5 parameters. Parameters: template' orderBy' fieldSelector' limit' skip
Long Parameter List,Norm.Collections,MongoCollection<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionGeneric.cs,Find,The method has 6 parameters. Parameters: template' orderBy' limit' skip' fullName' fieldSelection
Long Parameter List,Norm.Collections,MongoCollection<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionGeneric.cs,FindFieldSelection,The method has 6 parameters. Parameters: template' orderBy' limit' skip' fullName' fieldSelection
Long Parameter List,Norm.Protocol.Messages,UpdateMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,UpdateMessage,The method has 5 parameters. Parameters: connection' collection' options' matchDocument' valueDocument
Long Parameter List,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The method has 5 parameters. Parameters: connection' fullyQualifiedCollestionName' reply' originalOperation' limit
Long Identifier,Norm.BSON,IdPropertyFinder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\IdPropertyFinder.cs,PropertyIsAttributeDefinedId,The length of the parameter interfacePropertiesWithSameNameAsCandidate is 42.
Long Statement,Norm,ConnectionProvider,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionProvider.cs,Authenticate,The length of the statement  "            var nonce = new MongoCollection<GetNonceResponse>("$cmd"' new MongoDatabase("admin"' connection)' connection).FindOne(new { getnonce = 1 }); " is 140.
Long Statement,Norm,ConnectionProvider,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionProvider.cs,Authenticate,The length of the statement  "                var result = new QueryMessage<GenericCommandResponse' AuthenticationRequest>(connection' string.Concat(connection.Database' ".$cmd")) " is 133.
Long Statement,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,Create,The length of the statement  "                    throw new MongoException("Connection String must start with 'mongodb://' or be the name of a connection string in the app.config."); " is 132.
Long Statement,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The length of the statement  "                        throw new MongoException("Found type declaration after processing properties - data loss would occur - the object has been incorrectly serialized"); " is 148.
Long Statement,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The length of the statement  "                    throw new MongoException("Could not find the type to instantiate in the document' and " + type.Name + " is an interface or abstract type. Add a MongoDiscriminatedAttribute to the type or base type' or try to work with a concrete type next time."); " is 247.
Long Statement,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The length of the statement  "                    throw new MongoException(string.Format("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 132.
Long Statement,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The length of the statement  "                var propertyType = property != null ? property.Type : _typeMap.ContainsKey(storageType) ? _typeMap[storageType] : typeof(object); " is 129.
Long Statement,Norm.BSON,IdPropertyFinder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\IdPropertyFinder.cs,CheckForConflictingCandidates,The length of the statement  "                    throw new MongoConfigurationMapException(_type.Name + " exposes a property called _id and defines a an Id using MongoIndentifier or by explicit mapping."); " is 155.
Long Statement,Norm.BSON,IdPropertyFinder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\IdPropertyFinder.cs,PropertyIsAttributeDefinedId,The length of the statement  "                var interfacePropertiesWithSameNameAsCandidate = _interfaceProperties.Where(propertyInfo => propertyInfo.Name == idPropertyCandidate.Name); " is 139.
Long Statement,Norm.Collections,MongoCollection<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionGeneric.cs,AssertUpdatable,The length of the statement  "                throw new MongoException("This collection does not accept insertions/updates' this is due to the fact that the collection's type " + typeof(T).FullName + " does not specify an identifier property"); " is 198.
Long Statement,Norm.Configuration,MongoConfiguration,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Configuration\MongoConfiguration.cs,GetPropertyAlias,The length of the statement  "            return _configuration != null ? _configuration.GetConfigurationMap().GetPropertyAlias(type' propertyName) : propertyName; " is 121.
Long Statement,Norm.Configuration,MongoConfigurationMap,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Configuration\MongoConfigurationMap.cs,TypeConverterFor,The length of the statement  "                throw new ArgumentException(string.Format("The type '{0}' has already a type converter registered ({1}). You are trying to register '{2}'"' " is 139.
Long Statement,Norm.Configuration,MongoConfigurationMap,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Configuration\MongoConfigurationMap.cs,GetTypeDescriminator,The length of the statement  "            var discriminatingType = inheritanceChain.FirstOrDefault(t => discriminatedTypes.ContainsKey(t) && discriminatedTypes[t] == true); " is 130.
Long Statement,Norm.Configuration,MongoTypeConfiguration,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Configuration\MongoTypeConfiguration.cs,RemoveMappings,The length of the statement  "                throw new NotSupportedException("You may not remove mappings for Norm types. The type you attempted to remove was " + t.FullName); " is 130.
Long Statement,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,The length of the statement  "            IMongoCollection<T> collection = new MongoCollection<T>(_translationResults.CollectionName' _db' _db.CurrentConnection); " is 120.
Long Statement,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,The length of the statement  "                        result = collection.Find(_translationResults.Where' _translationResults.Sort' _translationResults.Take' _translationResults.Skip' collection.FullyQualifiedName); " is 161.
Long Statement,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,InitializeDefaultMapReduceParameters,The length of the statement  "                    map = "function(){if (" + _translationResults.Query + ") {emit(0' {val:this." + _translationResults.AggregatePropName + "'tSize:1} )};}"; " is 137.
Long Statement,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,BuildSumMapReduce,The length of the statement  "            parameters.Reduce = "function(key' values){var sum = 0; for(var i = 0; i < values.length; i++){ sum+=values[i].val;} return {val:sum};}"; " is 137.
Long Statement,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,BuildAverageMapReduce,The length of the statement  "            parameters.Reduce = "function(key' values){var sum = 0' tot = 0; for(var i = 0; i < values.length; i++){sum += values[i].val; tot += values[i].tSize; } return {val:sum'tSize:tot};}"; " is 182.
Long Statement,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,BuildMinMapReduce,The length of the statement  "            parameters.Reduce = "function(key' values){var least = 0; for(var i = 0; i < values.length; i++){if(i==0 || least > values[i].val){least=values[i].val;}} return {val:least};}"; " is 176.
Long Statement,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,BuildMaxMapReduce,The length of the statement  "            parameters.Reduce = "function(key' values){var least = 0; for(var i = 0; i < values.length; i++){if(i==0 || least < values[i].val){least=values[i].val;}} return {val:least};}"; " is 176.
Long Statement,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,ExecuteMapReduce,The length of the statement  "            var response = mr.Execute(new MapReduceOptions(typeName) { Map = parameters.Map' Reduce = parameters.Reduce' Finalize = parameters.Finalize }); " is 143.
Long Statement,Norm.Linq,MongoQueryProvider,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryProvider.cs,CreateQuery,The length of the statement  "                return (IQueryable)Activator.CreateInstance(typeof(MongoQuery<>).MakeGenericType(elementType)' new object[] { this' expression }); " is 130.
Long Statement,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,ProcessGuards,The length of the statement  "                    throw new NotSupportedException("You cannot use deep graph resolution when using the following aggregates: " + string.Join("' "' aggMethods)); " is 142.
Long Statement,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitRegexOptions,The length of the statement  "                    throw new NotSupportedException(string.Format("Only the RegexOptions.Ignore and RegexOptions.Multiline options are supported."' m.Method.Name)); " is 144.
Long Statement,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The length of the statement  "                throw new TimeoutException("MongoDB did not return a reply in the specified time for this context: " + _connection.QueryTimeout.ToString()); " is 140.
Long Statement,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The length of the statement  "            return new ReplyMessage<T>(_connection' this._collection' new BinaryReader(new BufferedStream(stream))' MongoOp.Query' this.NumberToTake); " is 138.
Long Statement,Norm.Protocol.Messages,DeleteMessage<U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The length of the statement  "            var length = 24 + payload.Length + collection.Length + 1; //+1 is for collection's null terminator which we'll be adding in a bit " is 129.
Long Statement,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The length of the statement  "                throw new TimeoutException("MongoDB did not return a reply in the specified time for this context: " + _connection.QueryTimeout.ToString()); " is 140.
Long Statement,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The length of the statement  "            return new ReplyMessage<T>(_connection' _collection' new BinaryReader(new BufferedStream(stream))' MongoOp.GetMore' this._limit); " is 129.
Complex Conditional,Norm.Collections,MongoCollection<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\MongoCollectionGeneric.cs,Save,The conditional expression  "id == null && (                  (typeof(ObjectId).IsAssignableFrom(idProperty.Type)) ||                  (typeof(long?).IsAssignableFrom(idProperty.Type)) ||                  (typeof(int?).IsAssignableFrom(idProperty.Type)))"  is complex.
Complex Conditional,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,CanGetQualifier,The conditional expression  "value != null && (value.GetType().IsAssignableFrom(typeof(double))                          || value.GetType().IsAssignableFrom(typeof(double?))                          || value.GetType().IsAssignableFrom(typeof(int))                          || value.GetType().IsAssignableFrom(typeof(int?))                          || value.GetType().IsAssignableFrom(typeof(long))                          || value.GetType().IsAssignableFrom(typeof(long?))                          || value.GetType().IsAssignableFrom(typeof(float))                          || value.GetType().IsAssignableFrom(typeof(float?))                          || value.GetType().IsAssignableFrom(typeof(DateTime))                          || value.GetType().IsAssignableFrom(typeof(DateTime?)))"  is complex.
Empty Catch Block,Norm.BSON,Expando,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\Expando.cs,TryGet,The method has an empty catch block.
Magic Number,Norm,ObjectId,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,TryParse,The following statement contains a magic number: value == null || value.Length != 24
Magic Number,Norm,ObjectId,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: var bytes = new byte[numberChars / 2];
Magic Number,Norm,ObjectId,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);
Magic Number,Norm,ObjectId,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);
Magic Number,Norm,ObjectId,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: bytes[i / 2] = Convert.ToByte(new string(chars' i' 2)' 16);
Magic Number,Norm,Connection,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\Connection.cs,Connection,The following statement contains a magic number: _client = new TcpClient              {                  NoDelay = true'                  ReceiveTimeout = builder.QueryTimeout * 1000'                  SendTimeout = builder.QueryTimeout * 1000              };
Magic Number,Norm,Connection,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\Connection.cs,Connection,The following statement contains a magic number: _client = new TcpClient              {                  NoDelay = true'                  ReceiveTimeout = builder.QueryTimeout * 1000'                  SendTimeout = builder.QueryTimeout * 1000              };
Magic Number,Norm,Connection,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\Connection.cs,Digest,The following statement contains a magic number: var sb = new StringBuilder(hashed.Length * 2);
Magic Number,Norm,Connection,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\Connection.cs,CreatePasswordDigest,The following statement contains a magic number: var sb = new StringBuilder(hashed.Length * 2);
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,Create,The following statement contains a magic number: var options = parts.Length == 2 ? parts[1] : null;
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,Create,The following statement contains a magic number: var builder = new ConnectionStringBuilder              {                  QueryTimeout = 30'                  Timeout = 30'                  StrictMode = true'                  Pooled = true'                  PoolSize = 25'                  Lifetime = 15'              };
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,Create,The following statement contains a magic number: var builder = new ConnectionStringBuilder              {                  QueryTimeout = 30'                  Timeout = 30'                  StrictMode = true'                  Pooled = true'                  PoolSize = 25'                  Lifetime = 15'              };
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,Create,The following statement contains a magic number: var builder = new ConnectionStringBuilder              {                  QueryTimeout = 30'                  Timeout = 30'                  StrictMode = true'                  Pooled = true'                  PoolSize = 25'                  Lifetime = 15'              };
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,Create,The following statement contains a magic number: var builder = new ConnectionStringBuilder              {                  QueryTimeout = 30'                  Timeout = 30'                  StrictMode = true'                  Pooled = true'                  PoolSize = 25'                  Lifetime = 15'              };
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildOptions,The following statement contains a magic number: kvp.Length != 2
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildAuthentication,The following statement contains a magic number: parts.Length != 2
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildServerList,The following statement contains a magic number: parts.Length > 2
Magic Number,Norm,ConnectionStringBuilder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildServerList,The following statement contains a magic number: list.Add(new Server                               {                                   Host = parts[0]'                                   Port = parts.Length == 2 ? int.Parse(parts[1]) : DEFAULT_PORT                               });
Magic Number,Norm,PooledConnectionProvider,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\PooledConnectionProvider.cs,PooledConnectionProvider,The following statement contains a magic number: _timeout = builder.Timeout * 1000;
Magic Number,Norm,PooledConnectionProvider,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\PooledConnectionProvider.cs,PooledConnectionProvider,The following statement contains a magic number: _maintenanceTimer = new Timer(o => Cleanup()' null' 30000' 30000);
Magic Number,Norm,PooledConnectionProvider,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\PooledConnectionProvider.cs,PooledConnectionProvider,The following statement contains a magic number: _maintenanceTimer = new Timer(o => Cleanup()' null' 30000' 30000);
Magic Number,Norm,TimedLock,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Connections\TimedLock.cs,Lock,The following statement contains a magic number: return Lock(o' TimeSpan.FromSeconds(10));
Magic Number,Norm,MapReduce,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\MapReduce\MapReduce.cs,MapReduce,The following statement contains a magic number: this._temporaryCollections = new List<string>(5);
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,NewDocument,The following statement contains a magic number: _current = new Document { Length = length' Parent = old' Digested = 4 };
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: Read(8);
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: Read(12);
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: return new ObjectId(_reader.ReadBytes(12));
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: Read(8);
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: Read(5);
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: length == 5
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadBinary,The following statement contains a magic number: Read(5 + length);
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadBinary,The following statement contains a magic number: subType == 2
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadBinary,The following statement contains a magic number: subType == 3
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadName,The following statement contains a magic number: var buffer = new List<byte>(128);
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadString,The following statement contains a magic number: Read(4 + length);
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case BSONTypes.Int32:                      Read(4);                      return _reader.ReadInt32();                  case BSONTypes.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case BSONTypes.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new MongoException("Could not create an int from " + storedType);              }
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case BSONTypes.Int32:                      Read(4);                      return _reader.ReadInt32();                  case BSONTypes.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case BSONTypes.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new MongoException("Could not create an int from " + storedType);              }
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: switch (storedType)              {                  case BSONTypes.Int32:                      Read(4);                      return _reader.ReadInt32();                  case BSONTypes.Int64:                      Read(8);                      return (int)_reader.ReadInt64();                  case BSONTypes.Double:                      Read(8);                      return (int)_reader.ReadDouble();                  default:                      throw new MongoException("Could not create an int from " + storedType);              }
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case BSONTypes.Int32:                      Read(4);                      return _reader.ReadInt32();                  case BSONTypes.Int64:                      Read(8);                      return _reader.ReadInt64();                  case BSONTypes.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new MongoException("Could not create an int64 from " + storedType);              }
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case BSONTypes.Int32:                      Read(4);                      return _reader.ReadInt32();                  case BSONTypes.Int64:                      Read(8);                      return _reader.ReadInt64();                  case BSONTypes.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new MongoException("Could not create an int64 from " + storedType);              }
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: switch (storedType)              {                  case BSONTypes.Int32:                      Read(4);                      return _reader.ReadInt32();                  case BSONTypes.Int64:                      Read(8);                      return _reader.ReadInt64();                  case BSONTypes.Double:                      Read(8);                      return (long)_reader.ReadDouble();                  default:                      throw new MongoException("Could not create an int64 from " + storedType);              }
Magic Number,Norm.BSON,BsonDeserializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadScopedCode,The following statement contains a magic number: Read(4);
Magic Number,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,NewDocument,The following statement contains a magic number: _current = new Document { Parent = old' Length = (int)_writer.BaseStream.Position' Digested = 4 };
Magic Number,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case BSONTypes.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case BSONTypes.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case BSONTypes.String:                      Write((string)value);                      return;                  case BSONTypes.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case BSONTypes.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case BSONTypes.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime()                          .Subtract(BsonHelper.EPOCH).TotalMilliseconds);                      return;                  case BSONTypes.Binary:                      WriteBinary(value);                      return;                  case BSONTypes.ScopedCode:                      Write((ScopedCode)value);                      return;                  case BSONTypes.MongoOID:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case BSONTypes.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case BSONTypes.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case BSONTypes.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case BSONTypes.String:                      Write((string)value);                      return;                  case BSONTypes.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case BSONTypes.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case BSONTypes.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime()                          .Subtract(BsonHelper.EPOCH).TotalMilliseconds);                      return;                  case BSONTypes.Binary:                      WriteBinary(value);                      return;                  case BSONTypes.ScopedCode:                      Write((ScopedCode)value);                      return;                  case BSONTypes.MongoOID:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case BSONTypes.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case BSONTypes.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case BSONTypes.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case BSONTypes.String:                      Write((string)value);                      return;                  case BSONTypes.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case BSONTypes.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case BSONTypes.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime()                          .Subtract(BsonHelper.EPOCH).TotalMilliseconds);                      return;                  case BSONTypes.Binary:                      WriteBinary(value);                      return;                  case BSONTypes.ScopedCode:                      Write((ScopedCode)value);                      return;                  case BSONTypes.MongoOID:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case BSONTypes.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: switch (storageType)              {                  case BSONTypes.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case BSONTypes.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case BSONTypes.String:                      Write((string)value);                      return;                  case BSONTypes.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case BSONTypes.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case BSONTypes.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime()                          .Subtract(BsonHelper.EPOCH).TotalMilliseconds);                      return;                  case BSONTypes.Binary:                      WriteBinary(value);                      return;                  case BSONTypes.ScopedCode:                      Write((ScopedCode)value);                      return;                  case BSONTypes.MongoOID:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case BSONTypes.Regex:                      Write((Regex)value);                      break;              }
Magic Number,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: Written(5 + length);
Magic Number,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,Write,The following statement contains a magic number: Written(bytes.Length + 5);
Magic Number,Norm.BSON,IdPropertyFinder,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\IdPropertyFinder.cs,IdPropertyFinder,The following statement contains a magic number: _idDictionary = new Dictionary<IdType' PropertyInfo>(4)                                  {                                      { IdType.MongoDefault' null }'                                      { IdType.MapDefined' null }'                                      { IdType.AttributeDefined' null }'                                      { IdType.Conventional' null }                                  };
Magic Number,Norm.BSON,ReflectionHelper,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\ReflectionHelper.cs,GetTypeDiscriminator,The following statement contains a magic number: return String.Join("'"' _type.AssemblyQualifiedName.Split(''')' 0' 2);
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: var oid = new byte[12];
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateTime())' 0' oid' copyidx' 4);
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: copyidx += 4;
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: Array.Copy(machineHash' 0' oid' copyidx' 3);
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: copyidx += 3;
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: Array.Copy(procID' 0' oid' copyidx' 2);
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: copyidx += 2;
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(GenerateInc())' 0' oid' copyidx' 3);
Magic Number,Norm.Collections,HiLoIdGenerator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Collections\HiLoIdGenerator.cs,GetNextHi,The following statement contains a magic number: database.GetCollection<NormHiLoKey>().Insert(new NormHiLoKey { CollectionName = collectionName' ServerHi = 2 });
Magic Number,Norm.Configuration,MongoConfigurationMap,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Configuration\MongoConfigurationMap.cs,GetTypeDescriminator,The following statement contains a magic number: return String.Join("'"' type.AssemblyQualifiedName.Split(''')' 0' 2);
Magic Number,Norm.GridFS,GridFile,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\GridFS\GridFile.cs,GridFile,The following statement contains a magic number: this.ChunkSize = (256 * 1024);
Magic Number,Norm.GridFS,GridFile,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\GridFS\GridFile.cs,GridFile,The following statement contains a magic number: this.ChunkSize = (256 * 1024);
Magic Number,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (m.Method.Name)                  {                      case "StartsWith":                          {                              string value = m.Arguments[0].GetConstantValue<string>();                                _sbWhere.Append("(");                              Visit(m.Object);                              _sbWhere.AppendFormat(".indexOf(\"{0}\")===0)"' value.EscapeJavaScriptString());                                SetFlyValue(new Regex("^" + Regex.Escape(value)));                                return m;                          }                      case "EndsWith":                          {                              string value = m.Arguments[0].GetConstantValue<string>();                                //_sbWhere.Append("(");                              //Visit(m.Object);                              //_sbWhere.AppendFormat(".match(\"{0}$\")==\"{0}\")"' value.EscapeDoubleQuotes());                                //Seems 10% quicker than above when complex query invoked                              _sbWhere.Append("((");                              Visit(m.Object);                              _sbWhere.AppendFormat(".length - {0}) >= 0 && "' value.Length);                              Visit(m.Object);                              _sbWhere.AppendFormat(".lastIndexOf(\"{0}\") === ("' value.EscapeJavaScriptString());                              Visit(m.Object);                              _sbWhere.AppendFormat(".length - {0}))"' value.Length);                                SetFlyValue(new Regex(Regex.Escape(value) + "$"));                                return m;                          }                      case "Contains":                          {                              string value = m.Arguments[0].GetConstantValue<string>();                                _sbWhere.Append("(");                              Visit(m.Object);                              _sbWhere.AppendFormat(".indexOf(\"{0}\")>-1)"' value.EscapeJavaScriptString());                                SetFlyValue(new Regex(Regex.Escape(value)));                                return m;                          }                      case "IndexOf":                          Visit(m.Object);                          _sbWhere.Append(".indexOf(");                          Visit(m.Arguments[0]);                          _sbWhere.Append(")");                          IsComplex = true;                          return m;                      case "LastIndexOf":                          Visit(m.Object);                          _sbWhere.Append(".lastIndexOf(");                          Visit(m.Arguments[0]);                          _sbWhere.Append(")");                          IsComplex = true;                          return m;                      case "IsNullOrEmpty":                          _sbWhere.Append("(");                          Visit(m.Arguments[0]);                          _sbWhere.Append(" == '' ||  ");                          Visit(m.Arguments[0]);                          _sbWhere.Append(" == null  )");                          IsComplex = true;                          return m;                      case "ToLower":                      case "ToLowerInvariant":                          Visit(m.Object);                          _sbWhere.Append(".toLowerCase()");                          IsComplex = true;                          return m;                      case "ToUpper":                      case "ToUpperInvariant":                          Visit(m.Object);                          _sbWhere.Append(".toUpperCase()");                          IsComplex = true;                          return m;                      case "Substring":                          Visit(m.Object);                          _sbWhere.Append(".substr(");                          Visit(m.Arguments[0]);                          if (m.Arguments.Count == 2)                          {                              _sbWhere.Append("'");                              Visit(m.Arguments[1]);                          }                          _sbWhere.Append(")");                          IsComplex = true;                          return m;                      case "Replace":                          Visit(m.Object);                          _sbWhere.Append(".replace(new RegExp(");                          _sbWhere.Append(GetJavaScriptConstantValue(Regex.Escape(m.Arguments[0].GetConstantValue<string>())));                          _sbWhere.Append("''g')'");                          Visit(m.Arguments[1]);                          _sbWhere.Append(")");                          IsComplex = true;                          return m;                  }
Magic Number,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleAggregate,The following statement contains a magic number: exp.Arguments.Count == 2
Magic Number,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,TranslateToWhere,The following statement contains a magic number: exp.Arguments.Count == 2
Magic Number,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleContains,The following statement contains a magic number: _sbWhere.Remove(_sbWhere.Length - 4' 4);
Magic Number,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleContains,The following statement contains a magic number: _sbWhere.Remove(_sbWhere.Length - 4' 4);
Magic Number,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleRegexIsMatch,The following statement contains a magic number: options = m.Arguments[2].GetConstantValue<RegexOptions>();
Magic Number,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleRegexIsMatch,The following statement contains a magic number: m.Arguments.Count == 3
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: var headLength = 28 + collectionLength;
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(length)' 0' header' 0' 4);
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(collection' 0' header' 20' collection.Length);
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(NumberToSkip)' 0' header' 20 + collectionLength' 4);
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(NumberToSkip)' 0' header' 20 + collectionLength' 4);
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(NumberToTake)' 0' header' 24 + collectionLength' 4);
Magic Number,Norm.Protocol.Messages,QueryMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(NumberToTake)' 0' header' 24 + collectionLength' 4);
Magic Number,Norm.Protocol.Messages,UpdateMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: var length = 24 + payload1.Length + payload2.Length + collectionLength;
Magic Number,Norm.Protocol.Messages,UpdateMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(length)' 0' header' 0' 4);
Magic Number,Norm.Protocol.Messages,UpdateMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,UpdateMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,UpdateMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(collection' 0' header' 20' collection.Length);
Magic Number,Norm.Protocol.Messages,UpdateMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes((int) _options)' 0' header' 20 + collectionLength' 4);
Magic Number,Norm.Protocol.Messages,UpdateMessage<T;U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes((int) _options)' 0' header' 20 + collectionLength' 4);
Magic Number,Norm.Protocol.Messages,DeleteMessage<U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: var length = 24 + payload.Length + collection.Length + 1;
Magic Number,Norm.Protocol.Messages,DeleteMessage<U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(length)' 0' header' 0' 4);
Magic Number,Norm.Protocol.Messages,DeleteMessage<U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,DeleteMessage<U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,DeleteMessage<U>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(collection' 0' header' 20' collection.Length);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: var length = 32 + collectionLength;
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(length)' 0' header' 0' 4);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(_requestID)' 0' header' 4' 4);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(_requestID)' 0' header' 4' 4);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(collection' 0' header' 20' collection.Length);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_numberToGet' 0' header' 20 + collectionLength' 4);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_numberToGet' 0' header' 20 + collectionLength' 4);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(_cursorId)' 0' header' 24 + collectionLength' 8);
Magic Number,Norm.Protocol.Messages,GetMoreMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(_cursorId)' 0' header' 24 + collectionLength' 8);
Magic Number,Norm.Protocol.Messages,InsertMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: var length = 20 + payload.Count + collectionLength;
Magic Number,Norm.Protocol.Messages,InsertMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(BitConverter.GetBytes(length)' 0' header' 0' 4);
Magic Number,Norm.Protocol.Messages,InsertMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,InsertMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(_opBytes' 0' header' 12' 4);
Magic Number,Norm.Protocol.Messages,InsertMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy(collection' 0' header' 20' collection.Length);
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Magic Number,Norm.Protocol.Messages,ReplyMessage<T>,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;
Missing Default,Norm.BSON,BsonSerializer,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType)              {                  case BSONTypes.Int32:                      Written(4);                      _writer.Write((int)value);                      return;                  case BSONTypes.Int64:                      Written(8);                      _writer.Write((long)value);                      return;                  case BSONTypes.String:                      Write((string)value);                      return;                  case BSONTypes.Double:                      Written(8);                      if (value is float)                      {                          _writer.Write(Convert.ToDouble((float)value));                      }                      else                      {                          _writer.Write((double)value);                      }                        return;                  case BSONTypes.Boolean:                      Written(1);                      _writer.Write((bool)value ? (byte)1 : (byte)0);                      return;                  case BSONTypes.DateTime:                      Written(8);                      _writer.Write((long)((DateTime)value).ToUniversalTime()                          .Subtract(BsonHelper.EPOCH).TotalMilliseconds);                      return;                  case BSONTypes.Binary:                      WriteBinary(value);                      return;                  case BSONTypes.ScopedCode:                      Write((ScopedCode)value);                      return;                  case BSONTypes.MongoOID:                      Written(((ObjectId)value).Value.Length);                      _writer.Write(((ObjectId)value).Value);                      return;                  case BSONTypes.Regex:                      Write((Regex)value);                      break;              }
Missing Default,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,The following switch statement is missing a default case: switch (_translationResults.MethodCall)                          {                              case "SingleOrDefault": result = ((IEnumerable<T>)result).SingleOrDefault(); break;                              case "Single": result = ((IEnumerable<T>)result).Single(); break;                              case "FirstOrDefault": result = ((IEnumerable<T>)result).FirstOrDefault(); break;                              case "First": result = ((IEnumerable<T>)result).First(); break;                          }
Missing Default,Norm.Linq,MongoQueryExecutor,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,The following switch statement is missing a default case: switch (_translationResults.MethodCall)                          {                              case "SingleOrDefault": result = ((IEnumerable)result).OfType<Object>().SingleOrDefault(); break;                              case "Single": result = ((IEnumerable)result).OfType<Object>().Single(); break;                              case "FirstOrDefault": result = ((IEnumerable)result).OfType<Object>().FirstOrDefault(); break;                              case "First": result = ((IEnumerable)result).OfType<Object>().First(); break;                          }
Missing Default,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMemberAccess,The following switch statement is missing a default case: switch (m.Member.Name)                  {                      case "Length":                          IsComplex = true;                          Visit(m.Expression);                          _sbWhere.Append(".length");                          return m;                  }
Missing Default,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMemberAccess,The following switch statement is missing a default case: switch (m.Member.Name)                  {                      case "Day":                          Visit(m.Expression);                          _sbWhere.Append(".getDate()");                          return m;                      case "Month":                          Visit(m.Expression);                          _sbWhere.Append(".getMonth()");                          return m;                      case "Year":                          Visit(m.Expression);                          _sbWhere.Append(".getFullYear()");                          return m;                      case "Hour":                          Visit(m.Expression);                          _sbWhere.Append(".getHours()");                          return m;                      case "Minute":                          Visit(m.Expression);                          _sbWhere.Append(".getMinutes()");                          return m;                      case "Second":                          Visit(m.Expression);                          _sbWhere.Append(".getSeconds()");                          return m;                      case "DayOfWeek":                          Visit(m.Expression);                          _sbWhere.Append(".getDay()");                          return m;                  }
Missing Default,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitBinary,The following switch statement is missing a default case: switch (b.NodeType)              {                  case ExpressionType.And:                  case ExpressionType.AndAlso:                  case ExpressionType.Or:                  case ExpressionType.OrElse:                      if (IsBoolean(b.Left.Type))                      {                          VisitPredicate(b.Left);                          VisitBinaryOperator(b);                          VisitPredicate(b.Right);                            hasVisited = true;                      }                      break;              }
Missing Default,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)                  {                      case "StartsWith":                          {                              string value = m.Arguments[0].GetConstantValue<string>();                                _sbWhere.Append("(");                              Visit(m.Object);                              _sbWhere.AppendFormat(".indexOf(\"{0}\")===0)"' value.EscapeJavaScriptString());                                SetFlyValue(new Regex("^" + Regex.Escape(value)));                                return m;                          }                      case "EndsWith":                          {                              string value = m.Arguments[0].GetConstantValue<string>();                                //_sbWhere.Append("(");                              //Visit(m.Object);                              //_sbWhere.AppendFormat(".match(\"{0}$\")==\"{0}\")"' value.EscapeDoubleQuotes());                                //Seems 10% quicker than above when complex query invoked                              _sbWhere.Append("((");                              Visit(m.Object);                              _sbWhere.AppendFormat(".length - {0}) >= 0 && "' value.Length);                              Visit(m.Object);                              _sbWhere.AppendFormat(".lastIndexOf(\"{0}\") === ("' value.EscapeJavaScriptString());                              Visit(m.Object);                              _sbWhere.AppendFormat(".length - {0}))"' value.Length);                                SetFlyValue(new Regex(Regex.Escape(value) + "$"));                                return m;                          }                      case "Contains":                          {                              string value = m.Arguments[0].GetConstantValue<string>();                                _sbWhere.Append("(");                              Visit(m.Object);                              _sbWhere.AppendFormat(".indexOf(\"{0}\")>-1)"' value.EscapeJavaScriptString());                                SetFlyValue(new Regex(Regex.Escape(value)));                                return m;                          }                      case "IndexOf":                          Visit(m.Object);                          _sbWhere.Append(".indexOf(");                          Visit(m.Arguments[0]);                          _sbWhere.Append(")");                          IsComplex = true;                          return m;                      case "LastIndexOf":                          Visit(m.Object);                          _sbWhere.Append(".lastIndexOf(");                          Visit(m.Arguments[0]);                          _sbWhere.Append(")");                          IsComplex = true;                          return m;                      case "IsNullOrEmpty":                          _sbWhere.Append("(");                          Visit(m.Arguments[0]);                          _sbWhere.Append(" == '' ||  ");                          Visit(m.Arguments[0]);                          _sbWhere.Append(" == null  )");                          IsComplex = true;                          return m;                      case "ToLower":                      case "ToLowerInvariant":                          Visit(m.Object);                          _sbWhere.Append(".toLowerCase()");                          IsComplex = true;                          return m;                      case "ToUpper":                      case "ToUpperInvariant":                          Visit(m.Object);                          _sbWhere.Append(".toUpperCase()");                          IsComplex = true;                          return m;                      case "Substring":                          Visit(m.Object);                          _sbWhere.Append(".substr(");                          Visit(m.Arguments[0]);                          if (m.Arguments.Count == 2)                          {                              _sbWhere.Append("'");                              Visit(m.Arguments[1]);                          }                          _sbWhere.Append(")");                          IsComplex = true;                          return m;                      case "Replace":                          Visit(m.Object);                          _sbWhere.Append(".replace(new RegExp(");                          _sbWhere.Append(GetJavaScriptConstantValue(Regex.Escape(m.Arguments[0].GetConstantValue<string>())));                          _sbWhere.Append("''g')'");                          Visit(m.Arguments[1]);                          _sbWhere.Append(")");                          IsComplex = true;                          return m;                  }
Missing Default,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,CanGetQualifier,The following switch statement is missing a default case: switch (op)                  {                      case " > ":                      case " < ":                      case " <= ":                      case " >= ":                          return true;                  }
Missing Default,Norm.Linq,MongoQueryTranslator,D:\research\architectureSmells\repos\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,GetQualifier,The following switch statement is missing a default case: switch (op)              {                  case " === ":                      return value;                  case " !== ":                      return Q.NotEqual(value).AsExpando();                  case " > ":                      return Q.GreaterThan(value).AsExpando();                  case " < ":                      return Q.LessThan(value).AsExpando();                  case " <= ":                      return Q.LessOrEqual(value).AsExpando();                  case " >= ":                      return Q.GreaterOrEqual(value).AsExpando();              }
