Implementation smell,Namespace,Class,File,Method,Description
Long Method,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,The method has 121 lines of code.
Complex Method,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,Cyclomatic complexity of the method is 17
Complex Method,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,Cyclomatic complexity of the method is 15
Complex Method,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,Cyclomatic complexity of the method is 8
Complex Method,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,Cyclomatic complexity of the method is 8
Complex Method,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadRegularExpression,Cyclomatic complexity of the method is 8
Complex Method,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,Cyclomatic complexity of the method is 32
Complex Method,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Norm.BSON,ReflectionHelper,F:\newReposMay17\atheken_NoRM\NoRM\BSON\ReflectionHelper.cs,FindProperty,Cyclomatic complexity of the method is 14
Complex Method,Norm.Linq,ExpressionVisitor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 46
Complex Method,Norm.Linq,LinqTypeHelper,F:\newReposMay17\atheken_NoRM\NoRM\Linq\LinqTypeHelper.cs,FindIEnumerable,Cyclomatic complexity of the method is 10
Complex Method,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,Cyclomatic complexity of the method is 46
Complex Method,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMemberAccess,Cyclomatic complexity of the method is 29
Complex Method,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitUnary,Cyclomatic complexity of the method is 17
Complex Method,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitBinaryOperator,Cyclomatic complexity of the method is 84
Complex Method,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitBinary,Cyclomatic complexity of the method is 8
Complex Method,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitConstant,Cyclomatic complexity of the method is 25
Complex Method,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,Cyclomatic complexity of the method is 62
Complex Method,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleMethodCall,Cyclomatic complexity of the method is 38
Long Parameter List,Norm,MongoCollectionExtensions,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollectionExtensions.cs,CreateIndex,The method has 5 parameters.
Long Parameter List,Norm,MongoCollectionExtensions,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollectionExtensions.cs,Find,The method has 6 parameters.
Long Parameter List,Norm,MongoCollectionExtensions,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollectionExtensions.cs,Find,The method has 5 parameters.
Long Parameter List,Norm,MongoCollectionExtensions,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollectionExtensions.cs,Find,The method has 5 parameters.
Long Parameter List,Norm.Collections,IMongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\IMongoCollectionGeneric.cs,Find,The method has 5 parameters.
Long Parameter List,Norm.Collections,IMongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\IMongoCollectionGeneric.cs,Find,The method has 5 parameters.
Long Parameter List,Norm.Collections,IMongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\IMongoCollectionGeneric.cs,Find,The method has 6 parameters.
Long Parameter List,Norm.Collections,MongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollection.cs,Find,The method has 5 parameters.
Long Parameter List,Norm.Collections,MongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollection.cs,Find,The method has 5 parameters.
Long Parameter List,Norm.Collections,MongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollection.cs,Find,The method has 6 parameters.
Long Parameter List,Norm.Collections,MongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollection.cs,FindFieldSelection,The method has 6 parameters.
Long Parameter List,Norm.Protocol.Messages,UpdateMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,UpdateMessage,The method has 5 parameters.
Long Parameter List,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The method has 5 parameters.
Long Identifier,Norm.BSON,IdPropertyFinder,F:\newReposMay17\atheken_NoRM\NoRM\BSON\IdPropertyFinder.cs,PropertyIsAttributeDefinedId,The length of the parameter interfacePropertiesWithSameNameAsCandidate is 42.
Long Statement,Norm,ConnectionProvider,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionProvider.cs,Authenticate,The length of the statement  "	var nonce = new MongoCollection<GetNonceResponse> ("$cmd"' new MongoDatabase ("admin"' connection)' connection).FindOne (new { " is 126.
Long Statement,Norm,ConnectionProvider,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionProvider.cs,Authenticate,The length of the statement  "		var result = new QueryMessage<GenericCommandResponse' AuthenticationRequest> (connection' string.Concat (connection.Database' ".$cmd")) { " is 137.
Long Statement,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,Create,The length of the statement  "			throw new MongoException ("Connection String must start with 'mongodb://' or be the name of a connection string in the app.config."); " is 133.
Long Statement,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildServerList,The length of the statement  "			throw new MongoException (string.Format ("Invalid connection string: {0} is not a valid server configuration"' server)); " is 120.
Long Statement,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The length of the statement  "				throw new MongoException ("Found type declaration after processing properties - data loss would occur - the object has been incorrectly serialized"); " is 149.
Long Statement,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The length of the statement  "			throw new MongoException ("Could not find the type to instantiate in the document' and " + type.Name + " is an interface or abstract type. Add a MongoDiscriminatedAttribute to the type or base type' or try to work with a concrete type next time."); " is 248.
Long Statement,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The length of the statement  "			throw new MongoException (string.Format ("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name)); " is 134.
Long Statement,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The length of the statement  "		var propertyType = property != null ? property.Type : _typeMap.ContainsKey (storageType) ? _typeMap [storageType] : typeof(object); " is 131.
Long Statement,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadDictionary,The length of the statement  "	var container = existingContainer == null ? ListHelper.CreateDictionary (listType' ListHelper.GetDictionarKeyType (listType)' valueType) : (IDictionary)existingContainer; " is 170.
Long Statement,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,IsDbReference,The length of the statement  "	return type.IsGenericType && (type.GetGenericTypeDefinition () == typeof(DbReference<>) || type.GetGenericTypeDefinition () == typeof(DbReference<' >)); " is 152.
Long Statement,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteObject,The length of the statement  "		var name = property == idProperty && !IsDbReference (property.DeclaringType) ? "_id" : MongoConfiguration.GetPropertyAlias (documentType' property.Name); " is 153.
Long Statement,Norm.BSON,IdPropertyFinder,F:\newReposMay17\atheken_NoRM\NoRM\BSON\IdPropertyFinder.cs,CheckForConflictingCandidates,The length of the statement  "			throw new MongoConfigurationMapException (_type.Name + " exposes a property called _id and defines a an Id using MongoIndentifier or by explicit mapping."); " is 156.
Long Statement,Norm.BSON,IdPropertyFinder,F:\newReposMay17\atheken_NoRM\NoRM\BSON\IdPropertyFinder.cs,PropertyIsAttributeDefinedId,The length of the statement  "		var interfacePropertiesWithSameNameAsCandidate = _interfaceProperties.Where (propertyInfo => propertyInfo.Name == idPropertyCandidate.Name); " is 140.
Long Statement,Norm.BSON,ListHelper,F:\newReposMay17\atheken_NoRM\NoRM\BSON\Lists\ListHelper.cs,CreateDictionary,The length of the statement  "	} else if (dictionaryType.GetConstructor (BindingFlags.Instance | BindingFlags.Public' null' new Type[0]' null) != null) { " is 122.
Long Statement,Norm.BSON,ReflectionHelper,F:\newReposMay17\atheken_NoRM\NoRM\BSON\ReflectionHelper.cs,GetProperties,The length of the statement  "	return type.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy); " is 129.
Long Statement,Norm.BSON,ReflectionHelper,F:\newReposMay17\atheken_NoRM\NoRM\BSON\ReflectionHelper.cs,FindProperty,The length of the statement  "			if (memberExpression.Expression.NodeType != ExpressionType.Parameter && memberExpression.Expression.NodeType != ExpressionType.Convert) { " is 137.
Long Statement,Norm.BSON,ReflectionHelper,F:\newReposMay17\atheken_NoRM\NoRM\BSON\ReflectionHelper.cs,FindProperty,The length of the statement  "				throw new ArgumentException (string.Format ("Expression '{0}' must resolve to top-level member."' lambdaExpression)' "lambdaExpression"); " is 137.
Long Statement,Norm.BSON,ReflectionHelper,F:\newReposMay17\atheken_NoRM\NoRM\BSON\ReflectionHelper.cs,FindIdProperty,The length of the statement  "	return _properties.ContainsKey ("$_id") ? _properties ["$_id"] : _properties.ContainsKey ("$id") ? _properties ["$id"] : null; " is 126.
Long Statement,Norm.Collections,MongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollection.cs,Save,The length of the statement  "	if (id == null && ((typeof(ObjectId).IsAssignableFrom (idProperty.Type)) || (typeof(long?).IsAssignableFrom (idProperty.Type)) || (typeof(int?).IsAssignableFrom (idProperty.Type)))) { " is 183.
Long Statement,Norm.Collections,MongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollection.cs,AssertUpdatable,The length of the statement  "		throw new MongoException ("This collection does not accept insertions/updates' this is due to the fact that the collection's type " + typeof(T).FullName + " does not specify an identifier property"); " is 199.
Long Statement,Norm.Configuration,MongoConfiguration,F:\newReposMay17\atheken_NoRM\NoRM\Configuration\MongoConfiguration.cs,GetPropertyAlias,The length of the statement  "	return _configuration != null ? _configuration.GetConfigurationMap ().GetPropertyAlias (type' propertyName) : propertyName; " is 123.
Long Statement,Norm.Configuration,MongoConfiguration,F:\newReposMay17\atheken_NoRM\NoRM\Configuration\MongoConfiguration.cs,GetCollectionName,The length of the statement  "	return _configuration != null ? _configuration.GetConfigurationMap ().GetCollectionName (type) : ReflectionHelper.GetScrubbedGenericName (type); " is 144.
Long Statement,Norm.Configuration,MongoConfigurationMap,F:\newReposMay17\atheken_NoRM\NoRM\Configuration\MongoConfigurationMap.cs,TypeConverterFor,The length of the statement  "		throw new ArgumentException (string.Format ("The type '{0}' has already a type converter registered ({1}). You are trying to register '{2}'"' ClrType' TypeConverters [ClrType]' CnvType)); " is 187.
Long Statement,Norm.Configuration,MongoConfigurationMap,F:\newReposMay17\atheken_NoRM\NoRM\Configuration\MongoConfigurationMap.cs,IsDbReference,The length of the statement  "	return type.IsGenericType && (type.GetGenericTypeDefinition () == typeof(DbReference<>) || type.GetGenericTypeDefinition () == typeof(DbReference<' >)); " is 152.
Long Statement,Norm.Configuration,MongoConfigurationMap,F:\newReposMay17\atheken_NoRM\NoRM\Configuration\MongoConfigurationMap.cs,GetTypeDescriminator,The length of the statement  "	var discriminatingType = inheritanceChain.FirstOrDefault (t => discriminatedTypes.ContainsKey (t) && discriminatedTypes [t] == true); " is 133.
Long Statement,Norm.Configuration,MongoTypeConfiguration,F:\newReposMay17\atheken_NoRM\NoRM\Configuration\MongoTypeConfiguration.cs,RemoveMappings,The length of the statement  "		throw new NotSupportedException ("You may not remove mappings for Norm types. The type you attempted to remove was " + t.FullName); " is 131.
Long Statement,Norm.GridFS,Helpers,F:\newReposMay17\atheken_NoRM\NoRM\GridFS\Helpers.cs,Files,The length of the statement  "	return new GridFileCollection (rootCollection.GetChildCollection<GridFile> ("files")' rootCollection.GetChildCollection<FileChunk> ("chunks")); " is 143.
Long Statement,Norm.GridFS,Helpers,F:\newReposMay17\atheken_NoRM\NoRM\GridFS\Helpers.cs,Files,The length of the statement  "	return new GridFileCollection (database.GetCollection<GridFile> ("files")' database.GetCollection<FileChunk> ("chunks")); " is 121.
Long Statement,Norm.Linq,ExpressionVisitor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\ExpressionVisitor.cs,VisitNew,The length of the statement  "		return nex.Members != null ? Expression.New (nex.Constructor' args' nex.Members) : Expression.New (nex.Constructor' args); " is 122.
Long Statement,Norm.Linq,ExpressionVisitor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\ExpressionVisitor.cs,VisitNewArray,The length of the statement  "		return na.NodeType == ExpressionType.NewArrayInit ? Expression.NewArrayInit (na.Type.GetElementType ()' exprs) : Expression.NewArrayBounds (na.Type.GetElementType ()' exprs); " is 174.
Long Statement,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,The length of the statement  "	IMongoCollection<T> collection = new MongoCollection<T> (_translationResults.CollectionName' _db' _db.CurrentConnection); " is 121.
Long Statement,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,The length of the statement  "			result = collection.Find (_translationResults.Where' _translationResults.Sort' _translationResults.Take' _translationResults.Skip' collection.FullyQualifiedName); " is 162.
Long Statement,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,InitializeDefaultMapReduceParameters,The length of the statement  "			map = "function(){if (" + _translationResults.Query + ") {emit(0' {val:this." + _translationResults.AggregatePropName + "'tSize:1} )};}"; " is 137.
Long Statement,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,BuildSumMapReduce,The length of the statement  "	parameters.Reduce = "function(key' values){var sum = 0; for(var i = 0; i < values.length; i++){ sum+=values[i].val;} return {val:sum};}"; " is 137.
Long Statement,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,BuildAverageMapReduce,The length of the statement  "	parameters.Reduce = "function(key' values){var sum = 0' tot = 0; for(var i = 0; i < values.length; i++){sum += values[i].val; tot += values[i].tSize; } return {val:sum'tSize:tot};}"; " is 182.
Long Statement,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,BuildMinMapReduce,The length of the statement  "	parameters.Reduce = "function(key' values){var least = 0; for(var i = 0; i < values.length; i++){if(i==0 || least > values[i].val){least=values[i].val;}} return {val:least};}"; " is 176.
Long Statement,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,BuildMaxMapReduce,The length of the statement  "	parameters.Reduce = "function(key' values){var least = 0; for(var i = 0; i < values.length; i++){if(i==0 || least < values[i].val){least=values[i].val;}} return {val:least};}"; " is 176.
Long Statement,Norm.Linq,MongoQueryProvider,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryProvider.cs,Execute,The length of the statement  "		return typeof(MongoQueryProvider).GetMethod ("ExecuteQuery").MakeGenericMethod (elementType).Invoke (this' new object[] { " is 121.
Long Statement,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,ProcessGuards,The length of the statement  "			throw new NotSupportedException ("You cannot use deep graph resolution when using the following aggregates: " + string.Join ("' "' aggMethods)); " is 144.
Long Statement,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitDeepAlias,The length of the statement  "	var fixedName = fullName.Skip (1).Select (x => Regex.Replace (x' @"^get_Item\(([0-9]+)\)$"' "$1|Ind")).Select (x => Regex.Replace (x' @"\[([0-9]+)\]$"' "$1|Ind")).Select (x => x.Replace ("First()"' "0|Ind")).ToArray (); " is 219.
Long Statement,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,CanGetQualifier,The length of the statement  "	if (value != null && (value.GetType ().IsAssignableFrom (typeof(double)) || value.GetType ().IsAssignableFrom (typeof(double?)) || value.GetType ().IsAssignableFrom (typeof(int)) || value.GetType ().IsAssignableFrom (typeof(int?)) || value.GetType ().IsAssignableFrom (typeof(long)) || value.GetType ().IsAssignableFrom (typeof(long?)) || value.GetType ().IsAssignableFrom (typeof(float)) || value.GetType ().IsAssignableFrom (typeof(float?)) || value.GetType ().IsAssignableFrom (typeof(DateTime)) || value.GetType ().IsAssignableFrom (typeof(DateTime?)))) { " is 559.
Long Statement,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitRegexOptions,The length of the statement  "			throw new NotSupportedException (string.Format ("Only the RegexOptions.Ignore and RegexOptions.Multiline options are supported."' m.Method.Name)); " is 146.
Long Statement,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The length of the statement  "		throw new TimeoutException ("MongoDB did not return a reply in the specified time for this context: " + _connection.QueryTimeout.ToString ()); " is 142.
Long Statement,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The length of the statement  "	return new ReplyMessage<T> (_connection' this._collection' new BinaryReader (new BufferedStream (stream))' MongoOp.Query' this.NumberToTake); " is 141.
Long Statement,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The length of the statement  "		throw new TimeoutException ("MongoDB did not return a reply in the specified time for this context: " + _connection.QueryTimeout.ToString ()); " is 142.
Long Statement,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The length of the statement  "	return new ReplyMessage<T> (_connection' _collection' new BinaryReader (new BufferedStream (stream))' MongoOp.GetMore' this._limit); " is 132.
Complex Conditional,Norm.Collections,MongoCollection,F:\newReposMay17\atheken_NoRM\NoRM\Collections\MongoCollection.cs,Save,The conditional expression  "id == null && ((typeof(ObjectId).IsAssignableFrom (idProperty.Type)) || (typeof(long?).IsAssignableFrom (idProperty.Type)) || (typeof(int?).IsAssignableFrom (idProperty.Type)))"  is complex.
Complex Conditional,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,CanGetQualifier,The conditional expression  "value != null && (value.GetType ().IsAssignableFrom (typeof(double)) || value.GetType ().IsAssignableFrom (typeof(double?)) || value.GetType ().IsAssignableFrom (typeof(int)) || value.GetType ().IsAssignableFrom (typeof(int?)) || value.GetType ().IsAssignableFrom (typeof(long)) || value.GetType ().IsAssignableFrom (typeof(long?)) || value.GetType ().IsAssignableFrom (typeof(float)) || value.GetType ().IsAssignableFrom (typeof(float?)) || value.GetType ().IsAssignableFrom (typeof(DateTime)) || value.GetType ().IsAssignableFrom (typeof(DateTime?)))"  is complex.
Empty Catch Block,Norm.BSON,Expando,F:\newReposMay17\atheken_NoRM\NoRM\BSON\Expando.cs,TryGet,The method has an empty catch block.
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,TryParse,The following statement contains a magic number: if (value == null || value.Length != 24) {  	return false;  }  
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2) {  	bytes [i / 2] = Convert.ToByte (new string (chars' i' 2)' 16);  }  
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2) {  	bytes [i / 2] = Convert.ToByte (new string (chars' i' 2)' 16);  }  
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2) {  	bytes [i / 2] = Convert.ToByte (new string (chars' i' 2)' 16);  }  
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: for (var i = 0; i < numberChars; i += 2) {  	bytes [i / 2] = Convert.ToByte (new string (chars' i' 2)' 16);  }  
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: i += 2
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (new string (chars' i' 2)' 16);  
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (new string (chars' i' 2)' 16);  
Magic Number,Norm,ObjectId,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectId.cs,DecodeHex,The following statement contains a magic number: bytes [i / 2] = Convert.ToByte (new string (chars' i' 2)' 16);  
Magic Number,Norm,Connection,F:\newReposMay17\atheken_NoRM\NoRM\Connections\Connection.cs,Connection,The following statement contains a magic number: _client = new TcpClient {  	NoDelay = true'  	ReceiveTimeout = builder.QueryTimeout * 1000'  	SendTimeout = builder.QueryTimeout * 1000  };  
Magic Number,Norm,Connection,F:\newReposMay17\atheken_NoRM\NoRM\Connections\Connection.cs,Connection,The following statement contains a magic number: _client = new TcpClient {  	NoDelay = true'  	ReceiveTimeout = builder.QueryTimeout * 1000'  	SendTimeout = builder.QueryTimeout * 1000  };  
Magic Number,Norm,Connection,F:\newReposMay17\atheken_NoRM\NoRM\Connections\Connection.cs,Digest,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var rawDigest = Encoding.UTF8.GetBytes (string.Concat (nonce' UserName' CreatePasswordDigest ()));  	var hashed = md5.ComputeHash (rawDigest);  	var sb = new StringBuilder (hashed.Length * 2);  	Array.ForEach (hashed' b => sb.Append (b.ToString ("X2")));  	return sb.ToString ().ToLower ();  }  
Magic Number,Norm,Connection,F:\newReposMay17\atheken_NoRM\NoRM\Connections\Connection.cs,CreatePasswordDigest,The following statement contains a magic number: using (var md5 = MD5.Create ()) {  	var rawDigest = Encoding.UTF8.GetBytes (string.Concat (_builder.UserName' ":mongo:"' _builder.Password));  	var hashed = md5.ComputeHash (rawDigest);  	var sb = new StringBuilder (hashed.Length * 2);  	Array.ForEach (hashed' b => sb.Append (b.ToString ("X2")));  	return sb.ToString ().ToLower ();  }  
Magic Number,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildOptions,The following statement contains a magic number: foreach (var part in parts) {  	var kvp = part.Split (new[] {  		'='  	}' StringSplitOptions.RemoveEmptyEntries);  	if (kvp.Length != 2) {  		throw new MongoException ("Invalid connection option: " + part);  	}  	_optionsHandler [kvp [0].ToLower ()] (kvp [1]' container);  }  
Magic Number,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildOptions,The following statement contains a magic number: if (kvp.Length != 2) {  	throw new MongoException ("Invalid connection option: " + part);  }  
Magic Number,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildAuthentication,The following statement contains a magic number: if (parts.Length != 2) {  	throw new MongoException ("Invalid connection string: authentication should be in the form of username:password");  }  
Magic Number,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildServerList,The following statement contains a magic number: foreach (var server in servers) {  	var parts = server.Split (new[] {  		':'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length > 2) {  		throw new MongoException (string.Format ("Invalid connection string: {0} is not a valid server configuration"' server));  	}  	list.Add (new Server {  		Host = parts [0]'  		Port = parts.Length == 2 ? int.Parse (parts [1]) : DEFAULT_PORT  	});  }  
Magic Number,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildServerList,The following statement contains a magic number: foreach (var server in servers) {  	var parts = server.Split (new[] {  		':'  	}' StringSplitOptions.RemoveEmptyEntries);  	if (parts.Length > 2) {  		throw new MongoException (string.Format ("Invalid connection string: {0} is not a valid server configuration"' server));  	}  	list.Add (new Server {  		Host = parts [0]'  		Port = parts.Length == 2 ? int.Parse (parts [1]) : DEFAULT_PORT  	});  }  
Magic Number,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildServerList,The following statement contains a magic number: if (parts.Length > 2) {  	throw new MongoException (string.Format ("Invalid connection string: {0} is not a valid server configuration"' server));  }  
Magic Number,Norm,ConnectionStringBuilder,F:\newReposMay17\atheken_NoRM\NoRM\Connections\ConnectionStringBuilder.cs,BuildServerList,The following statement contains a magic number: list.Add (new Server {  	Host = parts [0]'  	Port = parts.Length == 2 ? int.Parse (parts [1]) : DEFAULT_PORT  });  
Magic Number,Norm,PooledConnectionProvider,F:\newReposMay17\atheken_NoRM\NoRM\Connections\PooledConnectionProvider.cs,PooledConnectionProvider,The following statement contains a magic number: _timeout = builder.Timeout * 1000;  
Magic Number,Norm,PooledConnectionProvider,F:\newReposMay17\atheken_NoRM\NoRM\Connections\PooledConnectionProvider.cs,PooledConnectionProvider,The following statement contains a magic number: _maintenanceTimer = new Timer (o => Cleanup ()' null' 30000' 30000);  
Magic Number,Norm,PooledConnectionProvider,F:\newReposMay17\atheken_NoRM\NoRM\Connections\PooledConnectionProvider.cs,PooledConnectionProvider,The following statement contains a magic number: _maintenanceTimer = new Timer (o => Cleanup ()' null' 30000' 30000);  
Magic Number,Norm,TimedLock,F:\newReposMay17\atheken_NoRM\NoRM\Connections\TimedLock.cs,Lock,The following statement contains a magic number: return Lock (o' TimeSpan.FromSeconds (10));  
Magic Number,Norm,MapReduce,F:\newReposMay17\atheken_NoRM\NoRM\MapReduce\MapReduce.cs,MapReduce,The following statement contains a magic number: this._temporaryCollections = new List<string> (5);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,NewDocument,The following statement contains a magic number: _current = new Document {  	Length = length'  	Parent = old'  	Digested = 4  };  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: if (type == typeof(float)) {  	Read (8);  	return (float)_reader.ReadDouble ();  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: Read (8);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: if (type == typeof(ObjectId)) {  	Read (12);  	return new ObjectId (_reader.ReadBytes (12));  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: if (type == typeof(ObjectId)) {  	Read (12);  	return new ObjectId (_reader.ReadBytes (12));  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: Read (12);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: return new ObjectId (_reader.ReadBytes (12));  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: if (type == typeof(double)) {  	Read (8);  	return _reader.ReadDouble ();  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,DeserializeValueAfterConversion,The following statement contains a magic number: Read (8);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: while (true) {  	var storageType = ReadType ();  	var name = ReadName ();  	if (name == "$err" || name == "errmsg") {  		HandleError ((string)DeserializeValue (typeof(string)' BSONTypes.String));  	}  	// This should work' because the serializer always serialises this property first  	if (name == "__type") {  		if (processedNonTypeProperties)  			throw new MongoException ("Found type declaration after processing properties - data loss would occur - the object has been incorrectly serialized");  		var typeName = ReadString ();  		type = Type.GetType (typeName' true);  		typeHelper = ReflectionHelper.GetHelperForType (type);  		instance = Activator.CreateInstance (type' true);  		typeHelper.ApplyDefaultValues (instance);  		continue;  	}  	if (instance == null) {  		throw new MongoException ("Could not find the type to instantiate in the document' and " + type.Name + " is an interface or abstract type. Add a MongoDiscriminatedAttribute to the type or base type' or try to work with a concrete type next time.");  	}  	processedNonTypeProperties = true;  	var property = (name == "_id" || name == "$id") ? typeHelper.FindIdProperty () : typeHelper.FindProperty (name);  	if (property == null && !typeHelper.IsExpando) {  		throw new MongoException (string.Format ("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));  	}  	var isNull = false;  	if (storageType == BSONTypes.Object) {  		var length = _reader.ReadInt32 ();  		if (length == 5) {  			_reader.ReadByte ();  			//eoo  			Read (5);  			isNull = true;  		} else {  			NewDocument (length);  		}  	}  	object container = null;  	if (property != null && property.Setter == null) {  		container = property.Getter (instance);  	}  	var propertyType = property != null ? property.Type : _typeMap.ContainsKey (storageType) ? _typeMap [storageType] : typeof(object);  	var value = isNull ? null : DeserializeValue (propertyType' storageType' container);  	if (property == null) {  		((IExpando)instance) [name] = value;  	} else if (container == null && value != null) {  		property.Setter (instance' value);  	}  	if (IsDone ()) {  		break;  	}  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: while (true) {  	var storageType = ReadType ();  	var name = ReadName ();  	if (name == "$err" || name == "errmsg") {  		HandleError ((string)DeserializeValue (typeof(string)' BSONTypes.String));  	}  	// This should work' because the serializer always serialises this property first  	if (name == "__type") {  		if (processedNonTypeProperties)  			throw new MongoException ("Found type declaration after processing properties - data loss would occur - the object has been incorrectly serialized");  		var typeName = ReadString ();  		type = Type.GetType (typeName' true);  		typeHelper = ReflectionHelper.GetHelperForType (type);  		instance = Activator.CreateInstance (type' true);  		typeHelper.ApplyDefaultValues (instance);  		continue;  	}  	if (instance == null) {  		throw new MongoException ("Could not find the type to instantiate in the document' and " + type.Name + " is an interface or abstract type. Add a MongoDiscriminatedAttribute to the type or base type' or try to work with a concrete type next time.");  	}  	processedNonTypeProperties = true;  	var property = (name == "_id" || name == "$id") ? typeHelper.FindIdProperty () : typeHelper.FindProperty (name);  	if (property == null && !typeHelper.IsExpando) {  		throw new MongoException (string.Format ("Deserialization failed: type {0} does not have a property named {1}"' type.FullName' name));  	}  	var isNull = false;  	if (storageType == BSONTypes.Object) {  		var length = _reader.ReadInt32 ();  		if (length == 5) {  			_reader.ReadByte ();  			//eoo  			Read (5);  			isNull = true;  		} else {  			NewDocument (length);  		}  	}  	object container = null;  	if (property != null && property.Setter == null) {  		container = property.Getter (instance);  	}  	var propertyType = property != null ? property.Type : _typeMap.ContainsKey (storageType) ? _typeMap [storageType] : typeof(object);  	var value = isNull ? null : DeserializeValue (propertyType' storageType' container);  	if (property == null) {  		((IExpando)instance) [name] = value;  	} else if (container == null && value != null) {  		property.Setter (instance' value);  	}  	if (IsDone ()) {  		break;  	}  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: if (storageType == BSONTypes.Object) {  	var length = _reader.ReadInt32 ();  	if (length == 5) {  		_reader.ReadByte ();  		//eoo  		Read (5);  		isNull = true;  	} else {  		NewDocument (length);  	}  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: if (storageType == BSONTypes.Object) {  	var length = _reader.ReadInt32 ();  	if (length == 5) {  		_reader.ReadByte ();  		//eoo  		Read (5);  		isNull = true;  	} else {  		NewDocument (length);  	}  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: if (length == 5) {  	_reader.ReadByte ();  	//eoo  	Read (5);  	isNull = true;  } else {  	NewDocument (length);  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: if (length == 5) {  	_reader.ReadByte ();  	//eoo  	Read (5);  	isNull = true;  } else {  	NewDocument (length);  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadObject,The following statement contains a magic number: Read (5);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadBinary,The following statement contains a magic number: Read (5 + length);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadBinary,The following statement contains a magic number: if (subType == 2) {  	return _reader.ReadBytes (_reader.ReadInt32 ());  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadBinary,The following statement contains a magic number: if (subType == 3) {  	return new Guid (_reader.ReadBytes (length));  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadString,The following statement contains a magic number: Read (4 + length);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: switch (storedType) {  case BSONTypes.Int32:  	Read (4);  	return _reader.ReadInt32 ();  case BSONTypes.Int64:  	Read (8);  	return (int)_reader.ReadInt64 ();  case BSONTypes.Double:  	Read (8);  	return (int)_reader.ReadDouble ();  default:  	throw new MongoException ("Could not create an int from " + storedType);  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: switch (storedType) {  case BSONTypes.Int32:  	Read (4);  	return _reader.ReadInt32 ();  case BSONTypes.Int64:  	Read (8);  	return (int)_reader.ReadInt64 ();  case BSONTypes.Double:  	Read (8);  	return (int)_reader.ReadDouble ();  default:  	throw new MongoException ("Could not create an int from " + storedType);  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: switch (storedType) {  case BSONTypes.Int32:  	Read (4);  	return _reader.ReadInt32 ();  case BSONTypes.Int64:  	Read (8);  	return (int)_reader.ReadInt64 ();  case BSONTypes.Double:  	Read (8);  	return (int)_reader.ReadDouble ();  default:  	throw new MongoException ("Could not create an int from " + storedType);  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: Read (4);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: Read (8);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadInt,The following statement contains a magic number: Read (8);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: switch (storedType) {  case BSONTypes.Int32:  	Read (4);  	return _reader.ReadInt32 ();  case BSONTypes.Int64:  	Read (8);  	return _reader.ReadInt64 ();  case BSONTypes.Double:  	Read (8);  	return (long)_reader.ReadDouble ();  default:  	throw new MongoException ("Could not create an int64 from " + storedType);  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: switch (storedType) {  case BSONTypes.Int32:  	Read (4);  	return _reader.ReadInt32 ();  case BSONTypes.Int64:  	Read (8);  	return _reader.ReadInt64 ();  case BSONTypes.Double:  	Read (8);  	return (long)_reader.ReadDouble ();  default:  	throw new MongoException ("Could not create an int64 from " + storedType);  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: switch (storedType) {  case BSONTypes.Int32:  	Read (4);  	return _reader.ReadInt32 ();  case BSONTypes.Int64:  	Read (8);  	return _reader.ReadInt64 ();  case BSONTypes.Double:  	Read (8);  	return (long)_reader.ReadDouble ();  default:  	throw new MongoException ("Could not create an int64 from " + storedType);  }  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: Read (4);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: Read (8);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadLong,The following statement contains a magic number: Read (8);  
Magic Number,Norm.BSON,BsonDeserializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonDeserializer.cs,ReadScopedCode,The following statement contains a magic number: Read (4);  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,Serialize,The following statement contains a magic number: using (var ms = new MemoryStream (250))  	using (var writer = new BinaryWriter (ms)) {  		new BsonSerializer (writer).WriteDocument (document);  		return ms.ToArray ();  	}  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,NewDocument,The following statement contains a magic number: _current = new Document {  	Parent = old'  	Length = (int)_writer.BaseStream.Position'  	Digested = 4  };  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: switch (storageType) {  case BSONTypes.Int32:  	Written (4);  	_writer.Write ((int)value);  	return;  case BSONTypes.Int64:  	Written (8);  	_writer.Write ((long)value);  	return;  case BSONTypes.String:  	Write ((string)value);  	return;  case BSONTypes.Double:  	Written (8);  	if (value is float) {  		_writer.Write (Convert.ToDouble ((float)value));  	} else {  		_writer.Write ((double)value);  	}  	return;  case BSONTypes.Boolean:  	Written (1);  	_writer.Write ((bool)value ? (byte)1 : (byte)0);  	return;  case BSONTypes.DateTime:  	Written (8);  	_writer.Write ((long)((DateTime)value).ToUniversalTime ().Subtract (BsonHelper.EPOCH).TotalMilliseconds);  	return;  case BSONTypes.Binary:  	WriteBinary (value);  	return;  case BSONTypes.ScopedCode:  	Write ((ScopedCode)value);  	return;  case BSONTypes.MongoOID:  	Written (((ObjectId)value).Value.Length);  	_writer.Write (((ObjectId)value).Value);  	return;  case BSONTypes.Regex:  	Write ((Regex)value);  	break;  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: switch (storageType) {  case BSONTypes.Int32:  	Written (4);  	_writer.Write ((int)value);  	return;  case BSONTypes.Int64:  	Written (8);  	_writer.Write ((long)value);  	return;  case BSONTypes.String:  	Write ((string)value);  	return;  case BSONTypes.Double:  	Written (8);  	if (value is float) {  		_writer.Write (Convert.ToDouble ((float)value));  	} else {  		_writer.Write ((double)value);  	}  	return;  case BSONTypes.Boolean:  	Written (1);  	_writer.Write ((bool)value ? (byte)1 : (byte)0);  	return;  case BSONTypes.DateTime:  	Written (8);  	_writer.Write ((long)((DateTime)value).ToUniversalTime ().Subtract (BsonHelper.EPOCH).TotalMilliseconds);  	return;  case BSONTypes.Binary:  	WriteBinary (value);  	return;  case BSONTypes.ScopedCode:  	Write ((ScopedCode)value);  	return;  case BSONTypes.MongoOID:  	Written (((ObjectId)value).Value.Length);  	_writer.Write (((ObjectId)value).Value);  	return;  case BSONTypes.Regex:  	Write ((Regex)value);  	break;  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: switch (storageType) {  case BSONTypes.Int32:  	Written (4);  	_writer.Write ((int)value);  	return;  case BSONTypes.Int64:  	Written (8);  	_writer.Write ((long)value);  	return;  case BSONTypes.String:  	Write ((string)value);  	return;  case BSONTypes.Double:  	Written (8);  	if (value is float) {  		_writer.Write (Convert.ToDouble ((float)value));  	} else {  		_writer.Write ((double)value);  	}  	return;  case BSONTypes.Boolean:  	Written (1);  	_writer.Write ((bool)value ? (byte)1 : (byte)0);  	return;  case BSONTypes.DateTime:  	Written (8);  	_writer.Write ((long)((DateTime)value).ToUniversalTime ().Subtract (BsonHelper.EPOCH).TotalMilliseconds);  	return;  case BSONTypes.Binary:  	WriteBinary (value);  	return;  case BSONTypes.ScopedCode:  	Write ((ScopedCode)value);  	return;  case BSONTypes.MongoOID:  	Written (((ObjectId)value).Value.Length);  	_writer.Write (((ObjectId)value).Value);  	return;  case BSONTypes.Regex:  	Write ((Regex)value);  	break;  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: switch (storageType) {  case BSONTypes.Int32:  	Written (4);  	_writer.Write ((int)value);  	return;  case BSONTypes.Int64:  	Written (8);  	_writer.Write ((long)value);  	return;  case BSONTypes.String:  	Write ((string)value);  	return;  case BSONTypes.Double:  	Written (8);  	if (value is float) {  		_writer.Write (Convert.ToDouble ((float)value));  	} else {  		_writer.Write ((double)value);  	}  	return;  case BSONTypes.Boolean:  	Written (1);  	_writer.Write ((bool)value ? (byte)1 : (byte)0);  	return;  case BSONTypes.DateTime:  	Written (8);  	_writer.Write ((long)((DateTime)value).ToUniversalTime ().Subtract (BsonHelper.EPOCH).TotalMilliseconds);  	return;  case BSONTypes.Binary:  	WriteBinary (value);  	return;  case BSONTypes.ScopedCode:  	Write ((ScopedCode)value);  	return;  case BSONTypes.MongoOID:  	Written (((ObjectId)value).Value.Length);  	_writer.Write (((ObjectId)value).Value);  	return;  case BSONTypes.Regex:  	Write ((Regex)value);  	break;  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: Written (4);  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: Written (8);  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: Written (8);  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following statement contains a magic number: Written (8);  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: if (value is byte[]) {  	var bytes = (byte[])value;  	var length = bytes.Length;  	_writer.Write (length);  	_writer.Write ((byte)0);  	_writer.Write (bytes);  	Written (5 + length);  } else if (value is Guid) {  	var guid = (Guid)value;  	var bytes = guid.ToByteArray ();  	_writer.Write (bytes.Length);  	_writer.Write ((byte)3);  	_writer.Write (bytes);  	Written (5 + bytes.Length);  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: if (value is byte[]) {  	var bytes = (byte[])value;  	var length = bytes.Length;  	_writer.Write (length);  	_writer.Write ((byte)0);  	_writer.Write (bytes);  	Written (5 + length);  } else if (value is Guid) {  	var guid = (Guid)value;  	var bytes = guid.ToByteArray ();  	_writer.Write (bytes.Length);  	_writer.Write ((byte)3);  	_writer.Write (bytes);  	Written (5 + bytes.Length);  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: if (value is byte[]) {  	var bytes = (byte[])value;  	var length = bytes.Length;  	_writer.Write (length);  	_writer.Write ((byte)0);  	_writer.Write (bytes);  	Written (5 + length);  } else if (value is Guid) {  	var guid = (Guid)value;  	var bytes = guid.ToByteArray ();  	_writer.Write (bytes.Length);  	_writer.Write ((byte)3);  	_writer.Write (bytes);  	Written (5 + bytes.Length);  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: Written (5 + length);  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: if (value is Guid) {  	var guid = (Guid)value;  	var bytes = guid.ToByteArray ();  	_writer.Write (bytes.Length);  	_writer.Write ((byte)3);  	_writer.Write (bytes);  	Written (5 + bytes.Length);  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: if (value is Guid) {  	var guid = (Guid)value;  	var bytes = guid.ToByteArray ();  	_writer.Write (bytes.Length);  	_writer.Write ((byte)3);  	_writer.Write (bytes);  	Written (5 + bytes.Length);  }  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: _writer.Write ((byte)3);  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,WriteBinary,The following statement contains a magic number: Written (5 + bytes.Length);  
Magic Number,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,Write,The following statement contains a magic number: Written (bytes.Length + 5);  
Magic Number,Norm.BSON,IdPropertyFinder,F:\newReposMay17\atheken_NoRM\NoRM\BSON\IdPropertyFinder.cs,IdPropertyFinder,The following statement contains a magic number: _idDictionary = new Dictionary<IdType' PropertyInfo> (4) {  	{  		IdType.MongoDefault'  		null  	}'  	{  		IdType.MapDefined'  		null  	}'  	{  		IdType.AttributeDefined'  		null  	}'  	{  		IdType.Conventional'  		null  	}  };  
Magic Number,Norm.BSON,ReflectionHelper,F:\newReposMay17\atheken_NoRM\NoRM\BSON\ReflectionHelper.cs,GetTypeDiscriminator,The following statement contains a magic number: if (discriminatingType != null) {  	return String.Join ("'"' _type.AssemblyQualifiedName.Split (''')' 0' 2);  }  
Magic Number,Norm.BSON,ReflectionHelper,F:\newReposMay17\atheken_NoRM\NoRM\BSON\ReflectionHelper.cs,GetTypeDiscriminator,The following statement contains a magic number: return String.Join ("'"' _type.AssemblyQualifiedName.Split (''')' 0' 2);  
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (GenerateTime ())' 0' oid' copyidx' 4);  
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: copyidx += 4;  
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: Array.Copy (machineHash' 0' oid' copyidx' 3);  
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: copyidx += 3;  
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: Array.Copy (procID' 0' oid' copyidx' 2);  
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: copyidx += 2;  
Magic Number,Norm.BSON.DbTypes,ObjectIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\BSON\DbTypes\ObjectIdGenerator.cs,Generate,The following statement contains a magic number: Array.Copy (BitConverter.GetBytes (GenerateInc ())' 0' oid' copyidx' 3);  
Magic Number,Norm.Collections,HiLoIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\Collections\HiLoIdGenerator.cs,GetNextHi,The following statement contains a magic number: while (true) {  	try {  		var update = new Expando ();  		update ["$inc"] = new {  			ServerHi = 1  		};  		var hiLoKey = database.GetCollection<NormHiLoKey> ().FindAndModify (new {  			_id = collectionName  		}' update);  		if (hiLoKey == null) {  			database.GetCollection<NormHiLoKey> ().Insert (new NormHiLoKey {  				CollectionName = collectionName'  				ServerHi = 2  			});  			return 1;  		}  		var newHi = hiLoKey.ServerHi;  		return newHi;  	} catch (MongoException ex) {  		if (!ex.Message.Contains ("duplicate key"))  			throw;  	}  }  
Magic Number,Norm.Collections,HiLoIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\Collections\HiLoIdGenerator.cs,GetNextHi,The following statement contains a magic number: try {  	var update = new Expando ();  	update ["$inc"] = new {  		ServerHi = 1  	};  	var hiLoKey = database.GetCollection<NormHiLoKey> ().FindAndModify (new {  		_id = collectionName  	}' update);  	if (hiLoKey == null) {  		database.GetCollection<NormHiLoKey> ().Insert (new NormHiLoKey {  			CollectionName = collectionName'  			ServerHi = 2  		});  		return 1;  	}  	var newHi = hiLoKey.ServerHi;  	return newHi;  } catch (MongoException ex) {  	if (!ex.Message.Contains ("duplicate key"))  		throw;  }  
Magic Number,Norm.Collections,HiLoIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\Collections\HiLoIdGenerator.cs,GetNextHi,The following statement contains a magic number: if (hiLoKey == null) {  	database.GetCollection<NormHiLoKey> ().Insert (new NormHiLoKey {  		CollectionName = collectionName'  		ServerHi = 2  	});  	return 1;  }  
Magic Number,Norm.Collections,HiLoIdGenerator,F:\newReposMay17\atheken_NoRM\NoRM\Collections\HiLoIdGenerator.cs,GetNextHi,The following statement contains a magic number: database.GetCollection<NormHiLoKey> ().Insert (new NormHiLoKey {  	CollectionName = collectionName'  	ServerHi = 2  });  
Magic Number,Norm.Configuration,MongoConfigurationMap,F:\newReposMay17\atheken_NoRM\NoRM\Configuration\MongoConfigurationMap.cs,GetTypeDescriminator,The following statement contains a magic number: if (discriminatingType != null) {  	return String.Join ("'"' type.AssemblyQualifiedName.Split (''')' 0' 2);  }  
Magic Number,Norm.Configuration,MongoConfigurationMap,F:\newReposMay17\atheken_NoRM\NoRM\Configuration\MongoConfigurationMap.cs,GetTypeDescriminator,The following statement contains a magic number: return String.Join ("'"' type.AssemblyQualifiedName.Split (''')' 0' 2);  
Magic Number,Norm.GridFS,GridFile,F:\newReposMay17\atheken_NoRM\NoRM\GridFS\GridFile.cs,GridFile,The following statement contains a magic number: this.ChunkSize = (256 * 1024);  
Magic Number,Norm.GridFS,GridFile,F:\newReposMay17\atheken_NoRM\NoRM\GridFS\GridFile.cs,GridFile,The following statement contains a magic number: this.ChunkSize = (256 * 1024);  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitConstant,The following statement contains a magic number: if (q != null) {  	// set the collection retval  	TypeName = q.ElementType.Name;  	// this is our Query wrapper - see if it has an expression  	var qry = (IMongoQuery)c.Value;  	var innerExpression = qry.GetExpression ();  	if (innerExpression.NodeType == ExpressionType.Call) {  		VisitMethodCall (innerExpression as MethodCallExpression);  	}  } else if (c.Value == null) {  	_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  	SetFlyValue (null);  } else {  	switch (Type.GetTypeCode (c.Value.GetType ())) {  	case TypeCode.Boolean:  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  		break;  	case TypeCode.DateTime:  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  		break;  	case TypeCode.String:  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  		break;  	case TypeCode.Object:  		if (c.Value is ObjectId) {  			if (_lastOperator == " === " || _lastOperator == " !== ") {  				_sbWhere.Remove (_sbWhere.Length - 2' 1);  			}  			_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  			SetFlyValue (c.Value);  		} else if (c.Value is Guid) {  			_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  			SetFlyValue (c.Value);  		} else {  			throw new NotSupportedException (string.Format ("The constant for '{0}' is not supported"' c.Value));  		}  		break;  	default:  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  		break;  	}  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitConstant,The following statement contains a magic number: if (c.Value == null) {  	_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  	SetFlyValue (null);  } else {  	switch (Type.GetTypeCode (c.Value.GetType ())) {  	case TypeCode.Boolean:  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  		break;  	case TypeCode.DateTime:  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  		break;  	case TypeCode.String:  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  		break;  	case TypeCode.Object:  		if (c.Value is ObjectId) {  			if (_lastOperator == " === " || _lastOperator == " !== ") {  				_sbWhere.Remove (_sbWhere.Length - 2' 1);  			}  			_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  			SetFlyValue (c.Value);  		} else if (c.Value is Guid) {  			_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  			SetFlyValue (c.Value);  		} else {  			throw new NotSupportedException (string.Format ("The constant for '{0}' is not supported"' c.Value));  		}  		break;  	default:  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  		break;  	}  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitConstant,The following statement contains a magic number: switch (Type.GetTypeCode (c.Value.GetType ())) {  case TypeCode.Boolean:  	_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  	SetFlyValue (c.Value);  	break;  case TypeCode.DateTime:  	_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  	SetFlyValue (c.Value);  	break;  case TypeCode.String:  	_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  	SetFlyValue (c.Value);  	break;  case TypeCode.Object:  	if (c.Value is ObjectId) {  		if (_lastOperator == " === " || _lastOperator == " !== ") {  			_sbWhere.Remove (_sbWhere.Length - 2' 1);  		}  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  	} else if (c.Value is Guid) {  		_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  		SetFlyValue (c.Value);  	} else {  		throw new NotSupportedException (string.Format ("The constant for '{0}' is not supported"' c.Value));  	}  	break;  default:  	_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  	SetFlyValue (c.Value);  	break;  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitConstant,The following statement contains a magic number: if (c.Value is ObjectId) {  	if (_lastOperator == " === " || _lastOperator == " !== ") {  		_sbWhere.Remove (_sbWhere.Length - 2' 1);  	}  	_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  	SetFlyValue (c.Value);  } else if (c.Value is Guid) {  	_sbWhere.Append (GetJavaScriptConstantValue (c.Value));  	SetFlyValue (c.Value);  } else {  	throw new NotSupportedException (string.Format ("The constant for '{0}' is not supported"' c.Value));  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitConstant,The following statement contains a magic number: if (_lastOperator == " === " || _lastOperator == " !== ") {  	_sbWhere.Remove (_sbWhere.Length - 2' 1);  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitConstant,The following statement contains a magic number: _sbWhere.Remove (_sbWhere.Length - 2' 1);  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,The following statement contains a magic number: if (m.Method.DeclaringType == typeof(string)) {  	switch (m.Method.Name) {  	case "StartsWith": {  		string value = m.Arguments [0].GetConstantValue<string> ();  		_sbWhere.Append ("(");  		Visit (m.Object);  		_sbWhere.AppendFormat (".indexOf(\"{0}\")===0)"' value.EscapeJavaScriptString ());  		SetFlyValue (new Regex ("^" + Regex.Escape (value)));  		return m;  	}  	case "EndsWith": {  		string value = m.Arguments [0].GetConstantValue<string> ();  		//_sbWhere.Append("(");  		//Visit(m.Object);  		//_sbWhere.AppendFormat(".match(\"{0}$\")==\"{0}\")"' value.EscapeDoubleQuotes());  		//Seems 10% quicker than above when complex query invoked  		_sbWhere.Append ("((");  		Visit (m.Object);  		_sbWhere.AppendFormat (".length - {0}) >= 0 && "' value.Length);  		Visit (m.Object);  		_sbWhere.AppendFormat (".lastIndexOf(\"{0}\") === ("' value.EscapeJavaScriptString ());  		Visit (m.Object);  		_sbWhere.AppendFormat (".length - {0}))"' value.Length);  		SetFlyValue (new Regex (Regex.Escape (value) + "$"));  		return m;  	}  	case "Contains": {  		string value = m.Arguments [0].GetConstantValue<string> ();  		_sbWhere.Append ("(");  		Visit (m.Object);  		_sbWhere.AppendFormat (".indexOf(\"{0}\")>-1)"' value.EscapeJavaScriptString ());  		SetFlyValue (new Regex (Regex.Escape (value)));  		return m;  	}  	case "IndexOf":  		Visit (m.Object);  		_sbWhere.Append (".indexOf(");  		Visit (m.Arguments [0]);  		_sbWhere.Append (")");  		IsComplex = true;  		return m;  	case "LastIndexOf":  		Visit (m.Object);  		_sbWhere.Append (".lastIndexOf(");  		Visit (m.Arguments [0]);  		_sbWhere.Append (")");  		IsComplex = true;  		return m;  	case "IsNullOrEmpty":  		_sbWhere.Append ("(");  		Visit (m.Arguments [0]);  		_sbWhere.Append (" == '' ||  ");  		Visit (m.Arguments [0]);  		_sbWhere.Append (" == null  )");  		IsComplex = true;  		return m;  	case "ToLower":  	case "ToLowerInvariant":  		Visit (m.Object);  		_sbWhere.Append (".toLowerCase()");  		IsComplex = true;  		return m;  	case "ToUpper":  	case "ToUpperInvariant":  		Visit (m.Object);  		_sbWhere.Append (".toUpperCase()");  		IsComplex = true;  		return m;  	case "Substring":  		Visit (m.Object);  		_sbWhere.Append (".substr(");  		Visit (m.Arguments [0]);  		if (m.Arguments.Count == 2) {  			_sbWhere.Append ("'");  			Visit (m.Arguments [1]);  		}  		_sbWhere.Append (")");  		IsComplex = true;  		return m;  	case "Replace":  		Visit (m.Object);  		_sbWhere.Append (".replace(new RegExp(");  		_sbWhere.Append (GetJavaScriptConstantValue (Regex.Escape (m.Arguments [0].GetConstantValue<string> ())));  		_sbWhere.Append ("''g')'");  		Visit (m.Arguments [1]);  		_sbWhere.Append (")");  		IsComplex = true;  		return m;  	}  } else if (m.Method.DeclaringType == typeof(Regex)) {  	if (m.Method.Name == "IsMatch") {  		HandleRegexIsMatch (m);  		return m;  	}  	throw new NotSupportedException (string.Format ("Only the static Regex.IsMatch is supported."' m.Method.Name));  } else if (m.Method.DeclaringType == typeof(DateTime)) {  } else if (m.Method.DeclaringType == typeof(Queryable) && IsCallableMethod (m.Method.Name)) {  	return HandleMethodCall (m);  } else if (typeof(IEnumerable).IsAssignableFrom (m.Method.DeclaringType)) {  	if (m.Method.Name == "Contains") {  		HandleContains (m);  		return m;  	}  	throw new NotSupportedException (string.Format ("Subqueries with {0} are not currently supported"' m.Method.Name));  } else if (typeof(Enumerable).IsAssignableFrom (m.Method.DeclaringType)) {  	if (m.Method.Name == "Count" && m.Arguments.Count == 1) {  		HandleSubCount (m);  		return m;  	}  	if (m.Method.Name == "Any") {  		HandleSubAny (m);  		return m;  	}  	throw new NotSupportedException (string.Format ("Subqueries with {0} are not currently supported"' m.Method.Name));  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "StartsWith": {  	string value = m.Arguments [0].GetConstantValue<string> ();  	_sbWhere.Append ("(");  	Visit (m.Object);  	_sbWhere.AppendFormat (".indexOf(\"{0}\")===0)"' value.EscapeJavaScriptString ());  	SetFlyValue (new Regex ("^" + Regex.Escape (value)));  	return m;  }  case "EndsWith": {  	string value = m.Arguments [0].GetConstantValue<string> ();  	//_sbWhere.Append("(");  	//Visit(m.Object);  	//_sbWhere.AppendFormat(".match(\"{0}$\")==\"{0}\")"' value.EscapeDoubleQuotes());  	//Seems 10% quicker than above when complex query invoked  	_sbWhere.Append ("((");  	Visit (m.Object);  	_sbWhere.AppendFormat (".length - {0}) >= 0 && "' value.Length);  	Visit (m.Object);  	_sbWhere.AppendFormat (".lastIndexOf(\"{0}\") === ("' value.EscapeJavaScriptString ());  	Visit (m.Object);  	_sbWhere.AppendFormat (".length - {0}))"' value.Length);  	SetFlyValue (new Regex (Regex.Escape (value) + "$"));  	return m;  }  case "Contains": {  	string value = m.Arguments [0].GetConstantValue<string> ();  	_sbWhere.Append ("(");  	Visit (m.Object);  	_sbWhere.AppendFormat (".indexOf(\"{0}\")>-1)"' value.EscapeJavaScriptString ());  	SetFlyValue (new Regex (Regex.Escape (value)));  	return m;  }  case "IndexOf":  	Visit (m.Object);  	_sbWhere.Append (".indexOf(");  	Visit (m.Arguments [0]);  	_sbWhere.Append (")");  	IsComplex = true;  	return m;  case "LastIndexOf":  	Visit (m.Object);  	_sbWhere.Append (".lastIndexOf(");  	Visit (m.Arguments [0]);  	_sbWhere.Append (")");  	IsComplex = true;  	return m;  case "IsNullOrEmpty":  	_sbWhere.Append ("(");  	Visit (m.Arguments [0]);  	_sbWhere.Append (" == '' ||  ");  	Visit (m.Arguments [0]);  	_sbWhere.Append (" == null  )");  	IsComplex = true;  	return m;  case "ToLower":  case "ToLowerInvariant":  	Visit (m.Object);  	_sbWhere.Append (".toLowerCase()");  	IsComplex = true;  	return m;  case "ToUpper":  case "ToUpperInvariant":  	Visit (m.Object);  	_sbWhere.Append (".toUpperCase()");  	IsComplex = true;  	return m;  case "Substring":  	Visit (m.Object);  	_sbWhere.Append (".substr(");  	Visit (m.Arguments [0]);  	if (m.Arguments.Count == 2) {  		_sbWhere.Append ("'");  		Visit (m.Arguments [1]);  	}  	_sbWhere.Append (")");  	IsComplex = true;  	return m;  case "Replace":  	Visit (m.Object);  	_sbWhere.Append (".replace(new RegExp(");  	_sbWhere.Append (GetJavaScriptConstantValue (Regex.Escape (m.Arguments [0].GetConstantValue<string> ())));  	_sbWhere.Append ("''g')'");  	Visit (m.Arguments [1]);  	_sbWhere.Append (")");  	IsComplex = true;  	return m;  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2) {  	_sbWhere.Append ("'");  	Visit (m.Arguments [1]);  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleAggregate,The following statement contains a magic number: if (exp.Arguments.Count == 2) {  	var stripped = GetLambda (exp.Arguments [1]);  	var member = stripped.Body as MemberExpression;  	if (member == null)  		throw new NotSupportedException ("Aggregate clause supplied is not supported");  	AggregatePropName = VisitDeepAlias (member);  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,TranslateToWhere,The following statement contains a magic number: if (exp.Arguments.Count == 2) {  	HandleWhere (exp.Arguments [1]);  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleContains,The following statement contains a magic number: if (collection.Length > 0) {  	_sbWhere.Append ("(");  	foreach (var item in collection) {  		if (UseScopedQualifier)  			_sbWhere.Append ("this.");  		_sbWhere.Append (member);  		_sbWhere.Append (" === ");  		_sbWhere.Append (GetJavaScriptConstantValue (item));  		_sbWhere.Append (" || ");  	}  	_sbWhere.Remove (_sbWhere.Length - 4' 4);  	_sbWhere.Append (")");  } else {  	//Handle no items in the contains list  	_sbWhere.Append ("(1===2)");  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleContains,The following statement contains a magic number: if (collection.Length > 0) {  	_sbWhere.Append ("(");  	foreach (var item in collection) {  		if (UseScopedQualifier)  			_sbWhere.Append ("this.");  		_sbWhere.Append (member);  		_sbWhere.Append (" === ");  		_sbWhere.Append (GetJavaScriptConstantValue (item));  		_sbWhere.Append (" || ");  	}  	_sbWhere.Remove (_sbWhere.Length - 4' 4);  	_sbWhere.Append (")");  } else {  	//Handle no items in the contains list  	_sbWhere.Append ("(1===2)");  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleContains,The following statement contains a magic number: _sbWhere.Remove (_sbWhere.Length - 4' 4);  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleContains,The following statement contains a magic number: _sbWhere.Remove (_sbWhere.Length - 4' 4);  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleSubAny,The following statement contains a magic number: if (m.Arguments.Count == 1) {  	Visit (m.Arguments [0]);  	_sbWhere.Append (".length > 0");  	IsComplex = true;  } else if (m.Arguments.Count == 2) {  	_prefixAlias.Add (VisitDeepAlias ((MemberExpression)m.Arguments [0]));  	VisitPredicate (GetLambda (m.Arguments [1]).Body);  	_prefixAlias.RemoveAt (_prefixAlias.Count - 1);  	if (IsComplex)  		throw new NotSupportedException ("Subqueries with Any are not supported with complex queries");  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleSubAny,The following statement contains a magic number: if (m.Arguments.Count == 2) {  	_prefixAlias.Add (VisitDeepAlias ((MemberExpression)m.Arguments [0]));  	VisitPredicate (GetLambda (m.Arguments [1]).Body);  	_prefixAlias.RemoveAt (_prefixAlias.Count - 1);  	if (IsComplex)  		throw new NotSupportedException ("Subqueries with Any are not supported with complex queries");  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleRegexIsMatch,The following statement contains a magic number: if (m.Arguments.Count == 3) {  	options = m.Arguments [2].GetConstantValue<RegexOptions> ();  	jsoptions = VisitRegexOptions (m' options);  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleRegexIsMatch,The following statement contains a magic number: if (m.Arguments.Count == 3) {  	options = m.Arguments [2].GetConstantValue<RegexOptions> ();  	jsoptions = VisitRegexOptions (m' options);  }  
Magic Number,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,HandleRegexIsMatch,The following statement contains a magic number: options = m.Arguments [2].GetConstantValue<RegexOptions> ();  
Magic Number,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (length)' 0' header' 0' 4);  
Magic Number,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (collection' 0' header' 20' collection.Length);  
Magic Number,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (NumberToSkip)' 0' header' 20 + collectionLength' 4);  
Magic Number,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (NumberToSkip)' 0' header' 20 + collectionLength' 4);  
Magic Number,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (NumberToTake)' 0' header' 24 + collectionLength' 4);  
Magic Number,Norm.Protocol.Messages,QueryMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\QueryMessageGeneric.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (NumberToTake)' 0' header' 24 + collectionLength' 4);  
Magic Number,Norm.Protocol.Messages,UpdateMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (length)' 0' header' 0' 4);  
Magic Number,Norm.Protocol.Messages,UpdateMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,UpdateMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,UpdateMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (collection' 0' header' 20' collection.Length);  
Magic Number,Norm.Protocol.Messages,UpdateMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes ((int)_options)' 0' header' 20 + collectionLength' 4);  
Magic Number,Norm.Protocol.Messages,UpdateMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\UpdateMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes ((int)_options)' 0' header' 20 + collectionLength' 4);  
Magic Number,Norm.Protocol.Messages,DeleteMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (length)' 0' header' 0' 4);  
Magic Number,Norm.Protocol.Messages,DeleteMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,DeleteMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,DeleteMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\DeleteMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (collection' 0' header' 20' collection.Length);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (length)' 0' header' 0' 4);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (_requestID)' 0' header' 4' 4);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (_requestID)' 0' header' 4' 4);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (collection' 0' header' 20' collection.Length);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_numberToGet' 0' header' 20 + collectionLength' 4);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_numberToGet' 0' header' 20 + collectionLength' 4);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (_cursorId)' 0' header' 24 + collectionLength' 8);  
Magic Number,Norm.Protocol.Messages,GetMoreMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\GetMoreMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (_cursorId)' 0' header' 24 + collectionLength' 8);  
Magic Number,Norm.Protocol.Messages,InsertMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (BitConverter.GetBytes (length)' 0' header' 0' 4);  
Magic Number,Norm.Protocol.Messages,InsertMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,InsertMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (_opBytes' 0' header' 12' 4);  
Magic Number,Norm.Protocol.Messages,InsertMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\InsertMessage.cs,Execute,The following statement contains a magic number: Buffer.BlockCopy (collection' 0' header' 20' collection.Length);  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Magic Number,Norm.Protocol.Messages,ReplyMessage,F:\newReposMay17\atheken_NoRM\NoRM\Protocol\Messages\ReplyMessage.cs,ReplyMessage,The following statement contains a magic number: _messageLength -= 4 + 4 + 4 + 4 + 4 + 4 + 8 + 4 + 4;  
Missing Default,Norm.BSON,BsonSerializer,F:\newReposMay17\atheken_NoRM\NoRM\BSON\BsonSerializer.cs,SerializeMember,The following switch statement is missing a default case: switch (storageType) {  case BSONTypes.Int32:  	Written (4);  	_writer.Write ((int)value);  	return;  case BSONTypes.Int64:  	Written (8);  	_writer.Write ((long)value);  	return;  case BSONTypes.String:  	Write ((string)value);  	return;  case BSONTypes.Double:  	Written (8);  	if (value is float) {  		_writer.Write (Convert.ToDouble ((float)value));  	} else {  		_writer.Write ((double)value);  	}  	return;  case BSONTypes.Boolean:  	Written (1);  	_writer.Write ((bool)value ? (byte)1 : (byte)0);  	return;  case BSONTypes.DateTime:  	Written (8);  	_writer.Write ((long)((DateTime)value).ToUniversalTime ().Subtract (BsonHelper.EPOCH).TotalMilliseconds);  	return;  case BSONTypes.Binary:  	WriteBinary (value);  	return;  case BSONTypes.ScopedCode:  	Write ((ScopedCode)value);  	return;  case BSONTypes.MongoOID:  	Written (((ObjectId)value).Value.Length);  	_writer.Write (((ObjectId)value).Value);  	return;  case BSONTypes.Regex:  	Write ((Regex)value);  	break;  }  
Missing Default,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,The following switch statement is missing a default case: switch (_translationResults.MethodCall) {  case "SingleOrDefault":  	result = ((IEnumerable<T>)result).SingleOrDefault ();  	break;  case "Single":  	result = ((IEnumerable<T>)result).Single ();  	break;  case "FirstOrDefault":  	result = ((IEnumerable<T>)result).FirstOrDefault ();  	break;  case "First":  	result = ((IEnumerable<T>)result).First ();  	break;  }  
Missing Default,Norm.Linq,MongoQueryExecutor,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryExecutor.cs,Execute,The following switch statement is missing a default case: switch (_translationResults.MethodCall) {  case "SingleOrDefault":  	result = ((IEnumerable)result).OfType<Object> ().SingleOrDefault ();  	break;  case "Single":  	result = ((IEnumerable)result).OfType<Object> ().Single ();  	break;  case "FirstOrDefault":  	result = ((IEnumerable)result).OfType<Object> ().FirstOrDefault ();  	break;  case "First":  	result = ((IEnumerable)result).OfType<Object> ().First ();  	break;  }  
Missing Default,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMemberAccess,The following switch statement is missing a default case: switch (m.Member.Name) {  case "Length":  	IsComplex = true;  	Visit (m.Expression);  	_sbWhere.Append (".length");  	return m;  }  
Missing Default,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMemberAccess,The following switch statement is missing a default case: switch (m.Member.Name) {  case "Day":  	Visit (m.Expression);  	_sbWhere.Append (".getDate()");  	return m;  case "Month":  	Visit (m.Expression);  	_sbWhere.Append (".getMonth()");  	return m;  case "Year":  	Visit (m.Expression);  	_sbWhere.Append (".getFullYear()");  	return m;  case "Hour":  	Visit (m.Expression);  	_sbWhere.Append (".getHours()");  	return m;  case "Minute":  	Visit (m.Expression);  	_sbWhere.Append (".getMinutes()");  	return m;  case "Second":  	Visit (m.Expression);  	_sbWhere.Append (".getSeconds()");  	return m;  case "DayOfWeek":  	Visit (m.Expression);  	_sbWhere.Append (".getDay()");  	return m;  }  
Missing Default,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitBinary,The following switch statement is missing a default case: switch (b.NodeType) {  case ExpressionType.And:  case ExpressionType.AndAlso:  case ExpressionType.Or:  case ExpressionType.OrElse:  	if (IsBoolean (b.Left.Type)) {  		VisitPredicate (b.Left);  		VisitBinaryOperator (b);  		VisitPredicate (b.Right);  		hasVisited = true;  	}  	break;  }  
Missing Default,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,VisitMethodCall,The following switch statement is missing a default case: switch (m.Method.Name) {  case "StartsWith": {  	string value = m.Arguments [0].GetConstantValue<string> ();  	_sbWhere.Append ("(");  	Visit (m.Object);  	_sbWhere.AppendFormat (".indexOf(\"{0}\")===0)"' value.EscapeJavaScriptString ());  	SetFlyValue (new Regex ("^" + Regex.Escape (value)));  	return m;  }  case "EndsWith": {  	string value = m.Arguments [0].GetConstantValue<string> ();  	//_sbWhere.Append("(");  	//Visit(m.Object);  	//_sbWhere.AppendFormat(".match(\"{0}$\")==\"{0}\")"' value.EscapeDoubleQuotes());  	//Seems 10% quicker than above when complex query invoked  	_sbWhere.Append ("((");  	Visit (m.Object);  	_sbWhere.AppendFormat (".length - {0}) >= 0 && "' value.Length);  	Visit (m.Object);  	_sbWhere.AppendFormat (".lastIndexOf(\"{0}\") === ("' value.EscapeJavaScriptString ());  	Visit (m.Object);  	_sbWhere.AppendFormat (".length - {0}))"' value.Length);  	SetFlyValue (new Regex (Regex.Escape (value) + "$"));  	return m;  }  case "Contains": {  	string value = m.Arguments [0].GetConstantValue<string> ();  	_sbWhere.Append ("(");  	Visit (m.Object);  	_sbWhere.AppendFormat (".indexOf(\"{0}\")>-1)"' value.EscapeJavaScriptString ());  	SetFlyValue (new Regex (Regex.Escape (value)));  	return m;  }  case "IndexOf":  	Visit (m.Object);  	_sbWhere.Append (".indexOf(");  	Visit (m.Arguments [0]);  	_sbWhere.Append (")");  	IsComplex = true;  	return m;  case "LastIndexOf":  	Visit (m.Object);  	_sbWhere.Append (".lastIndexOf(");  	Visit (m.Arguments [0]);  	_sbWhere.Append (")");  	IsComplex = true;  	return m;  case "IsNullOrEmpty":  	_sbWhere.Append ("(");  	Visit (m.Arguments [0]);  	_sbWhere.Append (" == '' ||  ");  	Visit (m.Arguments [0]);  	_sbWhere.Append (" == null  )");  	IsComplex = true;  	return m;  case "ToLower":  case "ToLowerInvariant":  	Visit (m.Object);  	_sbWhere.Append (".toLowerCase()");  	IsComplex = true;  	return m;  case "ToUpper":  case "ToUpperInvariant":  	Visit (m.Object);  	_sbWhere.Append (".toUpperCase()");  	IsComplex = true;  	return m;  case "Substring":  	Visit (m.Object);  	_sbWhere.Append (".substr(");  	Visit (m.Arguments [0]);  	if (m.Arguments.Count == 2) {  		_sbWhere.Append ("'");  		Visit (m.Arguments [1]);  	}  	_sbWhere.Append (")");  	IsComplex = true;  	return m;  case "Replace":  	Visit (m.Object);  	_sbWhere.Append (".replace(new RegExp(");  	_sbWhere.Append (GetJavaScriptConstantValue (Regex.Escape (m.Arguments [0].GetConstantValue<string> ())));  	_sbWhere.Append ("''g')'");  	Visit (m.Arguments [1]);  	_sbWhere.Append (")");  	IsComplex = true;  	return m;  }  
Missing Default,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,CanGetQualifier,The following switch statement is missing a default case: switch (op) {  case " > ":  case " < ":  case " <= ":  case " >= ":  	return true;  }  
Missing Default,Norm.Linq,MongoQueryTranslator,F:\newReposMay17\atheken_NoRM\NoRM\Linq\MongoQueryTranslator.cs,GetQualifier,The following switch statement is missing a default case: switch (op) {  case " === ":  	return value;  case " !== ":  	return Q.NotEqual (value).AsExpando ();  case " > ":  	return Q.GreaterThan (value).AsExpando ();  case " < ":  	return Q.LessThan (value).AsExpando ();  case " <= ":  	return Q.LessOrEqual (value).AsExpando ();  case " >= ":  	return Q.GreaterOrEqual (value).AsExpando ();  }  
