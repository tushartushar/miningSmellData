Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The method has 141 lines of code.
Long Method,MonoDevelop.Database.Sql.SqlServer,SqlServerDialect,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDialect.cs,IsReservedWord,The method has 181 lines of code.
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDatabases,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetCollations,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTables,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,Cyclomatic complexity of the method is 29
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetViews,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetViewColumns,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetProcedures,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableConstraints,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,Cyclomatic complexity of the method is 132
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,CreateDatabase,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableCreateStatement,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetConstraintString,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTriggerCreateStatement,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetSource,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerDialect,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDialect.cs,QuoteIdentifier,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Database.Sql.SqlServer,SqlServerDialect,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDialect.cs,IsReservedWord,Cyclomatic complexity of the method is 174
Long Parameter List,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,Generate,The method has 16 parameters.
Long Parameter List,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,Generate,The method has 14 parameters.
Long Statement,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The length of the statement  "						column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL"); " is 218.
Long Statement,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The length of the statement  "					System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)")); " is 294.
Long Statement,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,CreateDatabase,The length of the statement  "			db.AppendFormat ("'{0}FILEGROWTH = {1}{2}"' newLine' schema.FileGrowth.Size.ToString ()' schema.FileGrowth.Type == SizeType.PERCENTAGE ? "%" : schema.FileGrowth.Type.ToString ()); " is 179.
Long Statement,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,Rename,The length of the statement  "	IDbCommand command = conn.CreateStoredProcedure (String.Format ("EXEC sp_rename '{0}'' '{1}'' '{2}'"' oldName' newName' type)); " is 127.
Long Statement,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,Generate,The length of the statement  "	return SqlMetalServices.Generate (Provider' connection' outputType' outputFile' language' style' defaultNamespace' entityBase' entityAttr' membersAttr' generateTypes' culture' generateSchema' generateTimestamp' overrideEqualAndHash' extractProcedures' pluralize); " is 263.
Long Statement,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,Generate,The length of the statement  "	return SqlMetalServices.Generate (Provider' connection' outputType' outputFile' defaultNamespace' entityBase' entityAttr' membersAttr' generateTypes' culture' generateSchema' generateTimestamp' overrideEqualAndHash' extractProcedures' pluralize); " is 246.
Long Statement,MonoDevelop.Database.Sql.SqlServer,SqlServerPooledDbConnection,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerPooledDbConnection.cs,ExecuteNonQuery,The length of the statement  "	if (sql.IndexOf (String.Concat (Environment.NewLine' "go"' Environment.NewLine)' StringComparison.OrdinalIgnoreCase) < 0) " is 121.
Virtual Method Call from Constructor,MonoDevelop.Database.Sql.SqlServer,SqlServerCreateDatabaseDialog,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\Dialogs\SqlServerCreateDatabaseDialog.cs,SqlServerCreateDatabaseDialog,The constructor "SqlServerCreateDatabaseDialog" calls a virtual method "ValidateFields".
Empty Catch Block,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetCollations,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetCollations,The method has an empty catch block.
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTables,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (@"SELECT   															su.name AS owner'   															so.name as table_name'   															so.id as table_id'										  															so.crdate as created_date'   															so.xtype as table_type  														FROM dbo.sysobjects so'   															dbo.sysusers su   														WHERE  															xtype IN ('S'''U')  															AND su.uid = so.uid  														ORDER BY 1' 2")) {  		try {  			using (command) {  				using (IDataReader r = command.ExecuteReader ()) {  					while (r.Read ()) {  						TableSchema table = new TableSchema (this);  						table.Name = r.GetString (1);  						if (r.GetString (4) == "S")  							table.IsSystemTable = true;  						else if (Array.Exists (system_tables' delegate (string s) {  							return s == table.Name;  						}))  							table.IsSystemTable = true;  						else  							table.IsSystemTable = false;  						table.OwnerName = r.GetString (0);  						tables.Add (table);  					}  					r.Close ();  				}  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTables,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   															su.name AS owner'   															so.name as table_name'   															so.id as table_id'										  															so.crdate as created_date'   															so.xtype as table_type  														FROM dbo.sysobjects so'   															dbo.sysusers su   														WHERE  															xtype IN ('S'''U')  															AND su.uid = so.uid  														ORDER BY 1' 2")) {  	try {  		using (command) {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					TableSchema table = new TableSchema (this);  					table.Name = r.GetString (1);  					if (r.GetString (4) == "S")  						table.IsSystemTable = true;  					else if (Array.Exists (system_tables' delegate (string s) {  						return s == table.Name;  					}))  						table.IsSystemTable = true;  					else  						table.IsSystemTable = false;  					table.OwnerName = r.GetString (0);  					tables.Add (table);  				}  				r.Close ();  			}  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTables,The following statement contains a magic number: try {  	using (command) {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				TableSchema table = new TableSchema (this);  				table.Name = r.GetString (1);  				if (r.GetString (4) == "S")  					table.IsSystemTable = true;  				else if (Array.Exists (system_tables' delegate (string s) {  					return s == table.Name;  				}))  					table.IsSystemTable = true;  				else  					table.IsSystemTable = false;  				table.OwnerName = r.GetString (0);  				tables.Add (table);  			}  			r.Close ();  		}  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTables,The following statement contains a magic number: using (command) {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			TableSchema table = new TableSchema (this);  			table.Name = r.GetString (1);  			if (r.GetString (4) == "S")  				table.IsSystemTable = true;  			else if (Array.Exists (system_tables' delegate (string s) {  				return s == table.Name;  			}))  				table.IsSystemTable = true;  			else  				table.IsSystemTable = false;  			table.OwnerName = r.GetString (0);  			tables.Add (table);  		}  		r.Close ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTables,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		TableSchema table = new TableSchema (this);  		table.Name = r.GetString (1);  		if (r.GetString (4) == "S")  			table.IsSystemTable = true;  		else if (Array.Exists (system_tables' delegate (string s) {  			return s == table.Name;  		}))  			table.IsSystemTable = true;  		else  			table.IsSystemTable = false;  		table.OwnerName = r.GetString (0);  		tables.Add (table);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTables,The following statement contains a magic number: while (r.Read ()) {  	TableSchema table = new TableSchema (this);  	table.Name = r.GetString (1);  	if (r.GetString (4) == "S")  		table.IsSystemTable = true;  	else if (Array.Exists (system_tables' delegate (string s) {  		return s == table.Name;  	}))  		table.IsSystemTable = true;  	else  		table.IsSystemTable = false;  	table.OwnerName = r.GetString (0);  	tables.Add (table);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTables,The following statement contains a magic number: if (r.GetString (4) == "S")  	table.IsSystemTable = true;  else if (Array.Exists (system_tables' delegate (string s) {  	return s == table.Name;  }))  	table.IsSystemTable = true;  else  	table.IsSystemTable = false;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (2);  					column.DataTypeName = r.GetString (3);  					column.DefaultValue = String.Empty;  					column.Comment = String.Empty;  					column.OwnerName = table.OwnerName;  					column.SchemaName = table.SchemaName;  					column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  					column.DataType.LengthRange.Default = r.GetInt16 (4);  					column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  					column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  					column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  					//TODO: append " DEFAULT ..." if column.Default.Length > 0  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (2);  					column.DataTypeName = r.GetString (3);  					column.DefaultValue = String.Empty;  					column.Comment = String.Empty;  					column.OwnerName = table.OwnerName;  					column.SchemaName = table.SchemaName;  					column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  					column.DataType.LengthRange.Default = r.GetInt16 (4);  					column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  					column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  					column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  					//TODO: append " DEFAULT ..." if column.Default.Length > 0  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (2);  					column.DataTypeName = r.GetString (3);  					column.DefaultValue = String.Empty;  					column.Comment = String.Empty;  					column.OwnerName = table.OwnerName;  					column.SchemaName = table.SchemaName;  					column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  					column.DataType.LengthRange.Default = r.GetInt16 (4);  					column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  					column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  					column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  					//TODO: append " DEFAULT ..." if column.Default.Length > 0  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (2);  					column.DataTypeName = r.GetString (3);  					column.DefaultValue = String.Empty;  					column.Comment = String.Empty;  					column.OwnerName = table.OwnerName;  					column.SchemaName = table.SchemaName;  					column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  					column.DataType.LengthRange.Default = r.GetInt16 (4);  					column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  					column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  					column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  					//TODO: append " DEFAULT ..." if column.Default.Length > 0  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (2);  					column.DataTypeName = r.GetString (3);  					column.DefaultValue = String.Empty;  					column.Comment = String.Empty;  					column.OwnerName = table.OwnerName;  					column.SchemaName = table.SchemaName;  					column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  					column.DataType.LengthRange.Default = r.GetInt16 (4);  					column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  					column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  					column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  					//TODO: append " DEFAULT ..." if column.Default.Length > 0  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (2);  					column.DataTypeName = r.GetString (3);  					column.DefaultValue = String.Empty;  					column.Comment = String.Empty;  					column.OwnerName = table.OwnerName;  					column.SchemaName = table.SchemaName;  					column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  					column.DataType.LengthRange.Default = r.GetInt16 (4);  					column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  					column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  					column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  					//TODO: append " DEFAULT ..." if column.Default.Length > 0  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (2);  					column.DataTypeName = r.GetString (3);  					column.DefaultValue = String.Empty;  					column.Comment = String.Empty;  					column.OwnerName = table.OwnerName;  					column.SchemaName = table.SchemaName;  					column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  					column.DataType.LengthRange.Default = r.GetInt16 (4);  					column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  					column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  					column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  					//TODO: append " DEFAULT ..." if column.Default.Length > 0  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (2);  					column.DataTypeName = r.GetString (3);  					column.DefaultValue = String.Empty;  					column.Comment = String.Empty;  					column.OwnerName = table.OwnerName;  					column.SchemaName = table.SchemaName;  					column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  					column.DataType.LengthRange.Default = r.GetInt16 (4);  					column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  					column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  					column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  					//TODO: append " DEFAULT ..." if column.Default.Length > 0  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (2);  				column.DataTypeName = r.GetString (3);  				column.DefaultValue = String.Empty;  				column.Comment = String.Empty;  				column.OwnerName = table.OwnerName;  				column.SchemaName = table.SchemaName;  				column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  				column.DataType.LengthRange.Default = r.GetInt16 (4);  				column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  				column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  				column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  				//TODO: append " DEFAULT ..." if column.Default.Length > 0  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (2);  				column.DataTypeName = r.GetString (3);  				column.DefaultValue = String.Empty;  				column.Comment = String.Empty;  				column.OwnerName = table.OwnerName;  				column.SchemaName = table.SchemaName;  				column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  				column.DataType.LengthRange.Default = r.GetInt16 (4);  				column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  				column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  				column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  				//TODO: append " DEFAULT ..." if column.Default.Length > 0  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (2);  				column.DataTypeName = r.GetString (3);  				column.DefaultValue = String.Empty;  				column.Comment = String.Empty;  				column.OwnerName = table.OwnerName;  				column.SchemaName = table.SchemaName;  				column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  				column.DataType.LengthRange.Default = r.GetInt16 (4);  				column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  				column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  				column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  				//TODO: append " DEFAULT ..." if column.Default.Length > 0  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (2);  				column.DataTypeName = r.GetString (3);  				column.DefaultValue = String.Empty;  				column.Comment = String.Empty;  				column.OwnerName = table.OwnerName;  				column.SchemaName = table.SchemaName;  				column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  				column.DataType.LengthRange.Default = r.GetInt16 (4);  				column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  				column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  				column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  				//TODO: append " DEFAULT ..." if column.Default.Length > 0  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (2);  				column.DataTypeName = r.GetString (3);  				column.DefaultValue = String.Empty;  				column.Comment = String.Empty;  				column.OwnerName = table.OwnerName;  				column.SchemaName = table.SchemaName;  				column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  				column.DataType.LengthRange.Default = r.GetInt16 (4);  				column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  				column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  				column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  				//TODO: append " DEFAULT ..." if column.Default.Length > 0  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (2);  				column.DataTypeName = r.GetString (3);  				column.DefaultValue = String.Empty;  				column.Comment = String.Empty;  				column.OwnerName = table.OwnerName;  				column.SchemaName = table.SchemaName;  				column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  				column.DataType.LengthRange.Default = r.GetInt16 (4);  				column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  				column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  				column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  				//TODO: append " DEFAULT ..." if column.Default.Length > 0  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (2);  				column.DataTypeName = r.GetString (3);  				column.DefaultValue = String.Empty;  				column.Comment = String.Empty;  				column.OwnerName = table.OwnerName;  				column.SchemaName = table.SchemaName;  				column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  				column.DataType.LengthRange.Default = r.GetInt16 (4);  				column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  				column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  				column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  				//TODO: append " DEFAULT ..." if column.Default.Length > 0  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   																			su.name as owner'   																			so.name as table_name'  																			sc.name as column_name'  																			st.name as date_type'   																			sc.length as column_length'  																			sc.xprec as data_precision'   																			sc.xscale as data_scale' 																			sc.isnullable'   																			sc.colid as column_id  																		FROM   																			dbo.syscolumns sc'   																			dbo.sysobjects so'  																			dbo.systypes st' dbo.sysusers su 																		WHERE   																			sc.id = so.id   																			AND so.xtype in ('U'''S')  																			AND so.name = '{0}'   																			AND su.name = '{1}'  																			AND sc.xusertype = st.xusertype  																			AND su.uid = so.uid  																		ORDER BY sc.colid"' table.Name' table.OwnerName)))  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (2);  				column.DataTypeName = r.GetString (3);  				column.DefaultValue = String.Empty;  				column.Comment = String.Empty;  				column.OwnerName = table.OwnerName;  				column.SchemaName = table.SchemaName;  				column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  				column.DataType.LengthRange.Default = r.GetInt16 (4);  				column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  				column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  				column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  				//TODO: append " DEFAULT ..." if column.Default.Length > 0  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (2);  			column.DataTypeName = r.GetString (3);  			column.DefaultValue = String.Empty;  			column.Comment = String.Empty;  			column.OwnerName = table.OwnerName;  			column.SchemaName = table.SchemaName;  			column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  			column.DataType.LengthRange.Default = r.GetInt16 (4);  			column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  			column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  			column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  			//TODO: append " DEFAULT ..." if column.Default.Length > 0  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (2);  			column.DataTypeName = r.GetString (3);  			column.DefaultValue = String.Empty;  			column.Comment = String.Empty;  			column.OwnerName = table.OwnerName;  			column.SchemaName = table.SchemaName;  			column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  			column.DataType.LengthRange.Default = r.GetInt16 (4);  			column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  			column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  			column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  			//TODO: append " DEFAULT ..." if column.Default.Length > 0  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (2);  			column.DataTypeName = r.GetString (3);  			column.DefaultValue = String.Empty;  			column.Comment = String.Empty;  			column.OwnerName = table.OwnerName;  			column.SchemaName = table.SchemaName;  			column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  			column.DataType.LengthRange.Default = r.GetInt16 (4);  			column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  			column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  			column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  			//TODO: append " DEFAULT ..." if column.Default.Length > 0  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (2);  			column.DataTypeName = r.GetString (3);  			column.DefaultValue = String.Empty;  			column.Comment = String.Empty;  			column.OwnerName = table.OwnerName;  			column.SchemaName = table.SchemaName;  			column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  			column.DataType.LengthRange.Default = r.GetInt16 (4);  			column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  			column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  			column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  			//TODO: append " DEFAULT ..." if column.Default.Length > 0  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (2);  			column.DataTypeName = r.GetString (3);  			column.DefaultValue = String.Empty;  			column.Comment = String.Empty;  			column.OwnerName = table.OwnerName;  			column.SchemaName = table.SchemaName;  			column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  			column.DataType.LengthRange.Default = r.GetInt16 (4);  			column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  			column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  			column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  			//TODO: append " DEFAULT ..." if column.Default.Length > 0  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (2);  			column.DataTypeName = r.GetString (3);  			column.DefaultValue = String.Empty;  			column.Comment = String.Empty;  			column.OwnerName = table.OwnerName;  			column.SchemaName = table.SchemaName;  			column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  			column.DataType.LengthRange.Default = r.GetInt16 (4);  			column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  			column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  			column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  			//TODO: append " DEFAULT ..." if column.Default.Length > 0  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (2);  			column.DataTypeName = r.GetString (3);  			column.DefaultValue = String.Empty;  			column.Comment = String.Empty;  			column.OwnerName = table.OwnerName;  			column.SchemaName = table.SchemaName;  			column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  			column.DataType.LengthRange.Default = r.GetInt16 (4);  			column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  			column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  			column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  			//TODO: append " DEFAULT ..." if column.Default.Length > 0  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (2);  			column.DataTypeName = r.GetString (3);  			column.DefaultValue = String.Empty;  			column.Comment = String.Empty;  			column.OwnerName = table.OwnerName;  			column.SchemaName = table.SchemaName;  			column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  			column.DataType.LengthRange.Default = r.GetInt16 (4);  			column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  			column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  			column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  			//TODO: append " DEFAULT ..." if column.Default.Length > 0  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (2);  		column.DataTypeName = r.GetString (3);  		column.DefaultValue = String.Empty;  		column.Comment = String.Empty;  		column.OwnerName = table.OwnerName;  		column.SchemaName = table.SchemaName;  		column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  		column.DataType.LengthRange.Default = r.GetInt16 (4);  		column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  		column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  		column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  		//TODO: append " DEFAULT ..." if column.Default.Length > 0  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (2);  		column.DataTypeName = r.GetString (3);  		column.DefaultValue = String.Empty;  		column.Comment = String.Empty;  		column.OwnerName = table.OwnerName;  		column.SchemaName = table.SchemaName;  		column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  		column.DataType.LengthRange.Default = r.GetInt16 (4);  		column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  		column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  		column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  		//TODO: append " DEFAULT ..." if column.Default.Length > 0  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (2);  		column.DataTypeName = r.GetString (3);  		column.DefaultValue = String.Empty;  		column.Comment = String.Empty;  		column.OwnerName = table.OwnerName;  		column.SchemaName = table.SchemaName;  		column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  		column.DataType.LengthRange.Default = r.GetInt16 (4);  		column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  		column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  		column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  		//TODO: append " DEFAULT ..." if column.Default.Length > 0  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (2);  		column.DataTypeName = r.GetString (3);  		column.DefaultValue = String.Empty;  		column.Comment = String.Empty;  		column.OwnerName = table.OwnerName;  		column.SchemaName = table.SchemaName;  		column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  		column.DataType.LengthRange.Default = r.GetInt16 (4);  		column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  		column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  		column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  		//TODO: append " DEFAULT ..." if column.Default.Length > 0  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (2);  		column.DataTypeName = r.GetString (3);  		column.DefaultValue = String.Empty;  		column.Comment = String.Empty;  		column.OwnerName = table.OwnerName;  		column.SchemaName = table.SchemaName;  		column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  		column.DataType.LengthRange.Default = r.GetInt16 (4);  		column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  		column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  		column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  		//TODO: append " DEFAULT ..." if column.Default.Length > 0  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (2);  		column.DataTypeName = r.GetString (3);  		column.DefaultValue = String.Empty;  		column.Comment = String.Empty;  		column.OwnerName = table.OwnerName;  		column.SchemaName = table.SchemaName;  		column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  		column.DataType.LengthRange.Default = r.GetInt16 (4);  		column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  		column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  		column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  		//TODO: append " DEFAULT ..." if column.Default.Length > 0  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (2);  		column.DataTypeName = r.GetString (3);  		column.DefaultValue = String.Empty;  		column.Comment = String.Empty;  		column.OwnerName = table.OwnerName;  		column.SchemaName = table.SchemaName;  		column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  		column.DataType.LengthRange.Default = r.GetInt16 (4);  		column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  		column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  		column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  		//TODO: append " DEFAULT ..." if column.Default.Length > 0  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (2);  		column.DataTypeName = r.GetString (3);  		column.DefaultValue = String.Empty;  		column.Comment = String.Empty;  		column.OwnerName = table.OwnerName;  		column.SchemaName = table.SchemaName;  		column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  		column.DataType.LengthRange.Default = r.GetInt16 (4);  		column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  		column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  		column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  		//TODO: append " DEFAULT ..." if column.Default.Length > 0  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (2);  	column.DataTypeName = r.GetString (3);  	column.DefaultValue = String.Empty;  	column.Comment = String.Empty;  	column.OwnerName = table.OwnerName;  	column.SchemaName = table.SchemaName;  	column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  	column.DataType.LengthRange.Default = r.GetInt16 (4);  	column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  	column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  	column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  	//TODO: append " DEFAULT ..." if column.Default.Length > 0  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (2);  	column.DataTypeName = r.GetString (3);  	column.DefaultValue = String.Empty;  	column.Comment = String.Empty;  	column.OwnerName = table.OwnerName;  	column.SchemaName = table.SchemaName;  	column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  	column.DataType.LengthRange.Default = r.GetInt16 (4);  	column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  	column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  	column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  	//TODO: append " DEFAULT ..." if column.Default.Length > 0  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (2);  	column.DataTypeName = r.GetString (3);  	column.DefaultValue = String.Empty;  	column.Comment = String.Empty;  	column.OwnerName = table.OwnerName;  	column.SchemaName = table.SchemaName;  	column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  	column.DataType.LengthRange.Default = r.GetInt16 (4);  	column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  	column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  	column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  	//TODO: append " DEFAULT ..." if column.Default.Length > 0  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (2);  	column.DataTypeName = r.GetString (3);  	column.DefaultValue = String.Empty;  	column.Comment = String.Empty;  	column.OwnerName = table.OwnerName;  	column.SchemaName = table.SchemaName;  	column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  	column.DataType.LengthRange.Default = r.GetInt16 (4);  	column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  	column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  	column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  	//TODO: append " DEFAULT ..." if column.Default.Length > 0  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (2);  	column.DataTypeName = r.GetString (3);  	column.DefaultValue = String.Empty;  	column.Comment = String.Empty;  	column.OwnerName = table.OwnerName;  	column.SchemaName = table.SchemaName;  	column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  	column.DataType.LengthRange.Default = r.GetInt16 (4);  	column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  	column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  	column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  	//TODO: append " DEFAULT ..." if column.Default.Length > 0  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (2);  	column.DataTypeName = r.GetString (3);  	column.DefaultValue = String.Empty;  	column.Comment = String.Empty;  	column.OwnerName = table.OwnerName;  	column.SchemaName = table.SchemaName;  	column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  	column.DataType.LengthRange.Default = r.GetInt16 (4);  	column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  	column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  	column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  	//TODO: append " DEFAULT ..." if column.Default.Length > 0  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (2);  	column.DataTypeName = r.GetString (3);  	column.DefaultValue = String.Empty;  	column.Comment = String.Empty;  	column.OwnerName = table.OwnerName;  	column.SchemaName = table.SchemaName;  	column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  	column.DataType.LengthRange.Default = r.GetInt16 (4);  	column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  	column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  	column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  	//TODO: append " DEFAULT ..." if column.Default.Length > 0  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (2);  	column.DataTypeName = r.GetString (3);  	column.DefaultValue = String.Empty;  	column.Comment = String.Empty;  	column.OwnerName = table.OwnerName;  	column.SchemaName = table.SchemaName;  	column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  	column.DataType.LengthRange.Default = r.GetInt16 (4);  	column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  	column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  	column.Definition = String.Concat (column.Name' " "' column.DataTypeName' " "' column.DataType.LengthRange.Default > 0 ? "(" + column.DataType.LengthRange.Default + ")" : ""' column.IsNullable ? " NULL" : " NOT NULL");  	//TODO: append " DEFAULT ..." if column.Default.Length > 0  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.Name = r.GetString (2);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DataTypeName = r.GetString (3);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.IsNullable = r.GetValue (7).ToString () == "0" ? true : false;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DataType.LengthRange.Default = r.GetInt16 (4);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DataType.PrecisionRange.Default = r.IsDBNull (5) ? 0 : (int)r.GetByte (5);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DataType.ScaleRange.Default = r.IsDBNull (6) ? 0 : (int)r.GetByte (6);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	string sql = string.Format (@"SELECT   							 					Tables.Name TableName'  	      										Triggers.name TriggerName'  	      										Triggers.crdate TriggerCreatedDate'  	      										Comments.Text TriggerText  											FROM sysobjects Triggers  											INNER JOIN sysobjects Tables On  	      										 Triggers.parent_obj = Tables.id  											INNER JOIN syscomments Comments On   	      										Triggers.id = Comments.id  											WHERE   												Triggers.xtype = 'TR'  												AND Tables.xtype = 'U'   												AND Tables.Name = '{0}'  											ORDER BY   												Tables.Name'   												Triggers.name"' table.Name);  	using (IDbCommand command = conn.CreateCommand (sql)) {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  				TriggerSchema trigger = new TriggerSchema (this);  				trigger.TableName = table.Name;  				trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  				sql = r.GetString (r.GetOrdinal ("TriggerText"));  				System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  				if (matchs.Count > 0) {  					trigger.TriggerFireType = TriggerFireType.ForEachRow;  					switch (matchs [0].Groups [7].Value.ToLower ()) {  					case "insert":  						trigger.TriggerEvent = TriggerEvent.Insert;  						break;  					case "update":  						trigger.TriggerEvent = TriggerEvent.Update;  						break;  					case "delete":  						trigger.TriggerEvent = TriggerEvent.Delete;  						break;  					default:  						throw new NotImplementedException ();  					}  					switch (matchs [0].Groups [7].Value.ToLower ()) {  					case "before":  						trigger.TriggerType = TriggerType.Before;  						break;  					case "after":  						trigger.TriggerType = TriggerType.After;  						break;  					default:  						throw new NotImplementedException ();  					}  					StringBuilder sbSource = new StringBuilder ();  					foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  						sbSource.Append (c.Value);  					trigger.Source = sbSource.ToString ();  				}  				triggers.Add (trigger);  			}  		}  	}  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	string sql = string.Format (@"SELECT   							 					Tables.Name TableName'  	      										Triggers.name TriggerName'  	      										Triggers.crdate TriggerCreatedDate'  	      										Comments.Text TriggerText  											FROM sysobjects Triggers  											INNER JOIN sysobjects Tables On  	      										 Triggers.parent_obj = Tables.id  											INNER JOIN syscomments Comments On   	      										Triggers.id = Comments.id  											WHERE   												Triggers.xtype = 'TR'  												AND Tables.xtype = 'U'   												AND Tables.Name = '{0}'  											ORDER BY   												Tables.Name'   												Triggers.name"' table.Name);  	using (IDbCommand command = conn.CreateCommand (sql)) {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  				TriggerSchema trigger = new TriggerSchema (this);  				trigger.TableName = table.Name;  				trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  				sql = r.GetString (r.GetOrdinal ("TriggerText"));  				System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  				if (matchs.Count > 0) {  					trigger.TriggerFireType = TriggerFireType.ForEachRow;  					switch (matchs [0].Groups [7].Value.ToLower ()) {  					case "insert":  						trigger.TriggerEvent = TriggerEvent.Insert;  						break;  					case "update":  						trigger.TriggerEvent = TriggerEvent.Update;  						break;  					case "delete":  						trigger.TriggerEvent = TriggerEvent.Delete;  						break;  					default:  						throw new NotImplementedException ();  					}  					switch (matchs [0].Groups [7].Value.ToLower ()) {  					case "before":  						trigger.TriggerType = TriggerType.Before;  						break;  					case "after":  						trigger.TriggerType = TriggerType.After;  						break;  					default:  						throw new NotImplementedException ();  					}  					StringBuilder sbSource = new StringBuilder ();  					foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  						sbSource.Append (c.Value);  					trigger.Source = sbSource.ToString ();  				}  				triggers.Add (trigger);  			}  		}  	}  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	string sql = string.Format (@"SELECT   							 					Tables.Name TableName'  	      										Triggers.name TriggerName'  	      										Triggers.crdate TriggerCreatedDate'  	      										Comments.Text TriggerText  											FROM sysobjects Triggers  											INNER JOIN sysobjects Tables On  	      										 Triggers.parent_obj = Tables.id  											INNER JOIN syscomments Comments On   	      										Triggers.id = Comments.id  											WHERE   												Triggers.xtype = 'TR'  												AND Tables.xtype = 'U'   												AND Tables.Name = '{0}'  											ORDER BY   												Tables.Name'   												Triggers.name"' table.Name);  	using (IDbCommand command = conn.CreateCommand (sql)) {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  				TriggerSchema trigger = new TriggerSchema (this);  				trigger.TableName = table.Name;  				trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  				sql = r.GetString (r.GetOrdinal ("TriggerText"));  				System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  				if (matchs.Count > 0) {  					trigger.TriggerFireType = TriggerFireType.ForEachRow;  					switch (matchs [0].Groups [7].Value.ToLower ()) {  					case "insert":  						trigger.TriggerEvent = TriggerEvent.Insert;  						break;  					case "update":  						trigger.TriggerEvent = TriggerEvent.Update;  						break;  					case "delete":  						trigger.TriggerEvent = TriggerEvent.Delete;  						break;  					default:  						throw new NotImplementedException ();  					}  					switch (matchs [0].Groups [7].Value.ToLower ()) {  					case "before":  						trigger.TriggerType = TriggerType.Before;  						break;  					case "after":  						trigger.TriggerType = TriggerType.After;  						break;  					default:  						throw new NotImplementedException ();  					}  					StringBuilder sbSource = new StringBuilder ();  					foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  						sbSource.Append (c.Value);  					trigger.Source = sbSource.ToString ();  				}  				triggers.Add (trigger);  			}  		}  	}  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (sql)) {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  			TriggerSchema trigger = new TriggerSchema (this);  			trigger.TableName = table.Name;  			trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  			sql = r.GetString (r.GetOrdinal ("TriggerText"));  			System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  			if (matchs.Count > 0) {  				trigger.TriggerFireType = TriggerFireType.ForEachRow;  				switch (matchs [0].Groups [7].Value.ToLower ()) {  				case "insert":  					trigger.TriggerEvent = TriggerEvent.Insert;  					break;  				case "update":  					trigger.TriggerEvent = TriggerEvent.Update;  					break;  				case "delete":  					trigger.TriggerEvent = TriggerEvent.Delete;  					break;  				default:  					throw new NotImplementedException ();  				}  				switch (matchs [0].Groups [7].Value.ToLower ()) {  				case "before":  					trigger.TriggerType = TriggerType.Before;  					break;  				case "after":  					trigger.TriggerType = TriggerType.After;  					break;  				default:  					throw new NotImplementedException ();  				}  				StringBuilder sbSource = new StringBuilder ();  				foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  					sbSource.Append (c.Value);  				trigger.Source = sbSource.ToString ();  			}  			triggers.Add (trigger);  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (sql)) {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  			TriggerSchema trigger = new TriggerSchema (this);  			trigger.TableName = table.Name;  			trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  			sql = r.GetString (r.GetOrdinal ("TriggerText"));  			System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  			if (matchs.Count > 0) {  				trigger.TriggerFireType = TriggerFireType.ForEachRow;  				switch (matchs [0].Groups [7].Value.ToLower ()) {  				case "insert":  					trigger.TriggerEvent = TriggerEvent.Insert;  					break;  				case "update":  					trigger.TriggerEvent = TriggerEvent.Update;  					break;  				case "delete":  					trigger.TriggerEvent = TriggerEvent.Delete;  					break;  				default:  					throw new NotImplementedException ();  				}  				switch (matchs [0].Groups [7].Value.ToLower ()) {  				case "before":  					trigger.TriggerType = TriggerType.Before;  					break;  				case "after":  					trigger.TriggerType = TriggerType.After;  					break;  				default:  					throw new NotImplementedException ();  				}  				StringBuilder sbSource = new StringBuilder ();  				foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  					sbSource.Append (c.Value);  				trigger.Source = sbSource.ToString ();  			}  			triggers.Add (trigger);  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (sql)) {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  			TriggerSchema trigger = new TriggerSchema (this);  			trigger.TableName = table.Name;  			trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  			sql = r.GetString (r.GetOrdinal ("TriggerText"));  			System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  			if (matchs.Count > 0) {  				trigger.TriggerFireType = TriggerFireType.ForEachRow;  				switch (matchs [0].Groups [7].Value.ToLower ()) {  				case "insert":  					trigger.TriggerEvent = TriggerEvent.Insert;  					break;  				case "update":  					trigger.TriggerEvent = TriggerEvent.Update;  					break;  				case "delete":  					trigger.TriggerEvent = TriggerEvent.Delete;  					break;  				default:  					throw new NotImplementedException ();  				}  				switch (matchs [0].Groups [7].Value.ToLower ()) {  				case "before":  					trigger.TriggerType = TriggerType.Before;  					break;  				case "after":  					trigger.TriggerType = TriggerType.After;  					break;  				default:  					throw new NotImplementedException ();  				}  				StringBuilder sbSource = new StringBuilder ();  				foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  					sbSource.Append (c.Value);  				trigger.Source = sbSource.ToString ();  			}  			triggers.Add (trigger);  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  		TriggerSchema trigger = new TriggerSchema (this);  		trigger.TableName = table.Name;  		trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  		sql = r.GetString (r.GetOrdinal ("TriggerText"));  		System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  		if (matchs.Count > 0) {  			trigger.TriggerFireType = TriggerFireType.ForEachRow;  			switch (matchs [0].Groups [7].Value.ToLower ()) {  			case "insert":  				trigger.TriggerEvent = TriggerEvent.Insert;  				break;  			case "update":  				trigger.TriggerEvent = TriggerEvent.Update;  				break;  			case "delete":  				trigger.TriggerEvent = TriggerEvent.Delete;  				break;  			default:  				throw new NotImplementedException ();  			}  			switch (matchs [0].Groups [7].Value.ToLower ()) {  			case "before":  				trigger.TriggerType = TriggerType.Before;  				break;  			case "after":  				trigger.TriggerType = TriggerType.After;  				break;  			default:  				throw new NotImplementedException ();  			}  			StringBuilder sbSource = new StringBuilder ();  			foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  				sbSource.Append (c.Value);  			trigger.Source = sbSource.ToString ();  		}  		triggers.Add (trigger);  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  		TriggerSchema trigger = new TriggerSchema (this);  		trigger.TableName = table.Name;  		trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  		sql = r.GetString (r.GetOrdinal ("TriggerText"));  		System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  		if (matchs.Count > 0) {  			trigger.TriggerFireType = TriggerFireType.ForEachRow;  			switch (matchs [0].Groups [7].Value.ToLower ()) {  			case "insert":  				trigger.TriggerEvent = TriggerEvent.Insert;  				break;  			case "update":  				trigger.TriggerEvent = TriggerEvent.Update;  				break;  			case "delete":  				trigger.TriggerEvent = TriggerEvent.Delete;  				break;  			default:  				throw new NotImplementedException ();  			}  			switch (matchs [0].Groups [7].Value.ToLower ()) {  			case "before":  				trigger.TriggerType = TriggerType.Before;  				break;  			case "after":  				trigger.TriggerType = TriggerType.After;  				break;  			default:  				throw new NotImplementedException ();  			}  			StringBuilder sbSource = new StringBuilder ();  			foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  				sbSource.Append (c.Value);  			trigger.Source = sbSource.ToString ();  		}  		triggers.Add (trigger);  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  		TriggerSchema trigger = new TriggerSchema (this);  		trigger.TableName = table.Name;  		trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  		sql = r.GetString (r.GetOrdinal ("TriggerText"));  		System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  		if (matchs.Count > 0) {  			trigger.TriggerFireType = TriggerFireType.ForEachRow;  			switch (matchs [0].Groups [7].Value.ToLower ()) {  			case "insert":  				trigger.TriggerEvent = TriggerEvent.Insert;  				break;  			case "update":  				trigger.TriggerEvent = TriggerEvent.Update;  				break;  			case "delete":  				trigger.TriggerEvent = TriggerEvent.Delete;  				break;  			default:  				throw new NotImplementedException ();  			}  			switch (matchs [0].Groups [7].Value.ToLower ()) {  			case "before":  				trigger.TriggerType = TriggerType.Before;  				break;  			case "after":  				trigger.TriggerType = TriggerType.After;  				break;  			default:  				throw new NotImplementedException ();  			}  			StringBuilder sbSource = new StringBuilder ();  			foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  				sbSource.Append (c.Value);  			trigger.Source = sbSource.ToString ();  		}  		triggers.Add (trigger);  	}  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: while (r.Read ()) {  	System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  	TriggerSchema trigger = new TriggerSchema (this);  	trigger.TableName = table.Name;  	trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  	sql = r.GetString (r.GetOrdinal ("TriggerText"));  	System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  	if (matchs.Count > 0) {  		trigger.TriggerFireType = TriggerFireType.ForEachRow;  		switch (matchs [0].Groups [7].Value.ToLower ()) {  		case "insert":  			trigger.TriggerEvent = TriggerEvent.Insert;  			break;  		case "update":  			trigger.TriggerEvent = TriggerEvent.Update;  			break;  		case "delete":  			trigger.TriggerEvent = TriggerEvent.Delete;  			break;  		default:  			throw new NotImplementedException ();  		}  		switch (matchs [0].Groups [7].Value.ToLower ()) {  		case "before":  			trigger.TriggerType = TriggerType.Before;  			break;  		case "after":  			trigger.TriggerType = TriggerType.After;  			break;  		default:  			throw new NotImplementedException ();  		}  		StringBuilder sbSource = new StringBuilder ();  		foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  			sbSource.Append (c.Value);  		trigger.Source = sbSource.ToString ();  	}  	triggers.Add (trigger);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: while (r.Read ()) {  	System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  	TriggerSchema trigger = new TriggerSchema (this);  	trigger.TableName = table.Name;  	trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  	sql = r.GetString (r.GetOrdinal ("TriggerText"));  	System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  	if (matchs.Count > 0) {  		trigger.TriggerFireType = TriggerFireType.ForEachRow;  		switch (matchs [0].Groups [7].Value.ToLower ()) {  		case "insert":  			trigger.TriggerEvent = TriggerEvent.Insert;  			break;  		case "update":  			trigger.TriggerEvent = TriggerEvent.Update;  			break;  		case "delete":  			trigger.TriggerEvent = TriggerEvent.Delete;  			break;  		default:  			throw new NotImplementedException ();  		}  		switch (matchs [0].Groups [7].Value.ToLower ()) {  		case "before":  			trigger.TriggerType = TriggerType.Before;  			break;  		case "after":  			trigger.TriggerType = TriggerType.After;  			break;  		default:  			throw new NotImplementedException ();  		}  		StringBuilder sbSource = new StringBuilder ();  		foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  			sbSource.Append (c.Value);  		trigger.Source = sbSource.ToString ();  	}  	triggers.Add (trigger);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: while (r.Read ()) {  	System.Text.RegularExpressions.Regex parseRegEx = new System.Text.RegularExpressions.Regex (string.Concat (@"((CREATE\s*(Temp|Temporary)?\s*TRIGGER){1}\s?(\w+)\s?(IF NOT"' @" EXISTS)?\s?(BEFORE|AFTER|INSTEAD OF){1}\s?(\w+)\s*ON(\s+\w*"' @")\s*(FOR EACH ROW){1}\s*(BEGIN){1})\s+(\w|\W)*(END)"));  	TriggerSchema trigger = new TriggerSchema (this);  	trigger.TableName = table.Name;  	trigger.Name = r.GetString (r.GetOrdinal ("TriggerName"));  	sql = r.GetString (r.GetOrdinal ("TriggerText"));  	System.Text.RegularExpressions.MatchCollection matchs = parseRegEx.Matches (sql);  	if (matchs.Count > 0) {  		trigger.TriggerFireType = TriggerFireType.ForEachRow;  		switch (matchs [0].Groups [7].Value.ToLower ()) {  		case "insert":  			trigger.TriggerEvent = TriggerEvent.Insert;  			break;  		case "update":  			trigger.TriggerEvent = TriggerEvent.Update;  			break;  		case "delete":  			trigger.TriggerEvent = TriggerEvent.Delete;  			break;  		default:  			throw new NotImplementedException ();  		}  		switch (matchs [0].Groups [7].Value.ToLower ()) {  		case "before":  			trigger.TriggerType = TriggerType.Before;  			break;  		case "after":  			trigger.TriggerType = TriggerType.After;  			break;  		default:  			throw new NotImplementedException ();  		}  		StringBuilder sbSource = new StringBuilder ();  		foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  			sbSource.Append (c.Value);  		trigger.Source = sbSource.ToString ();  	}  	triggers.Add (trigger);  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: if (matchs.Count > 0) {  	trigger.TriggerFireType = TriggerFireType.ForEachRow;  	switch (matchs [0].Groups [7].Value.ToLower ()) {  	case "insert":  		trigger.TriggerEvent = TriggerEvent.Insert;  		break;  	case "update":  		trigger.TriggerEvent = TriggerEvent.Update;  		break;  	case "delete":  		trigger.TriggerEvent = TriggerEvent.Delete;  		break;  	default:  		throw new NotImplementedException ();  	}  	switch (matchs [0].Groups [7].Value.ToLower ()) {  	case "before":  		trigger.TriggerType = TriggerType.Before;  		break;  	case "after":  		trigger.TriggerType = TriggerType.After;  		break;  	default:  		throw new NotImplementedException ();  	}  	StringBuilder sbSource = new StringBuilder ();  	foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  		sbSource.Append (c.Value);  	trigger.Source = sbSource.ToString ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: if (matchs.Count > 0) {  	trigger.TriggerFireType = TriggerFireType.ForEachRow;  	switch (matchs [0].Groups [7].Value.ToLower ()) {  	case "insert":  		trigger.TriggerEvent = TriggerEvent.Insert;  		break;  	case "update":  		trigger.TriggerEvent = TriggerEvent.Update;  		break;  	case "delete":  		trigger.TriggerEvent = TriggerEvent.Delete;  		break;  	default:  		throw new NotImplementedException ();  	}  	switch (matchs [0].Groups [7].Value.ToLower ()) {  	case "before":  		trigger.TriggerType = TriggerType.Before;  		break;  	case "after":  		trigger.TriggerType = TriggerType.After;  		break;  	default:  		throw new NotImplementedException ();  	}  	StringBuilder sbSource = new StringBuilder ();  	foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  		sbSource.Append (c.Value);  	trigger.Source = sbSource.ToString ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: if (matchs.Count > 0) {  	trigger.TriggerFireType = TriggerFireType.ForEachRow;  	switch (matchs [0].Groups [7].Value.ToLower ()) {  	case "insert":  		trigger.TriggerEvent = TriggerEvent.Insert;  		break;  	case "update":  		trigger.TriggerEvent = TriggerEvent.Update;  		break;  	case "delete":  		trigger.TriggerEvent = TriggerEvent.Delete;  		break;  	default:  		throw new NotImplementedException ();  	}  	switch (matchs [0].Groups [7].Value.ToLower ()) {  	case "before":  		trigger.TriggerType = TriggerType.Before;  		break;  	case "after":  		trigger.TriggerType = TriggerType.After;  		break;  	default:  		throw new NotImplementedException ();  	}  	StringBuilder sbSource = new StringBuilder ();  	foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  		sbSource.Append (c.Value);  	trigger.Source = sbSource.ToString ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: switch (matchs [0].Groups [7].Value.ToLower ()) {  case "insert":  	trigger.TriggerEvent = TriggerEvent.Insert;  	break;  case "update":  	trigger.TriggerEvent = TriggerEvent.Update;  	break;  case "delete":  	trigger.TriggerEvent = TriggerEvent.Delete;  	break;  default:  	throw new NotImplementedException ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: switch (matchs [0].Groups [7].Value.ToLower ()) {  case "before":  	trigger.TriggerType = TriggerType.Before;  	break;  case "after":  	trigger.TriggerType = TriggerType.After;  	break;  default:  	throw new NotImplementedException ();  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetTableTriggers,The following statement contains a magic number: foreach (System.Text.RegularExpressions.Capture c in matchs [0].Groups [11].Captures)  	sbSource.Append (c.Value);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: switch (name) {  case "bigint":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "binary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Binary;  	break;  case "bit":  	dts.LengthRange = new Range (1);  	dts.DataTypeCategory = DataTypeCategory.Bit;  	break;  case "char":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (1' 8000);  	dts.DataTypeCategory = DataTypeCategory.Char;  	break;  case "datetime":  	dts.LengthRange = new Range (8);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "decimal":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "float":  	dts.LengthRange = new Range (8);  	dts.ScaleRange = new Range (1' 15);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "image":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "int":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (1' 10);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "money":  	dts.LengthRange = new Range (8);  	dts.PrecisionRange = new Range (1' 19);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "nchar":  	dts.LengthRange = new Range (2' 8000);  	dts.PrecisionRange = new Range (1' 4000);  	dts.DataTypeCategory = DataTypeCategory.NChar;  	break;  case "ntext":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' 1073741823);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "numeric":  	dts.LengthRange = new Range (5' 17);  	dts.PrecisionRange = new Range (1' 38);  	dts.ScaleRange = new Range (0' 37);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "nvarchar":  	dts.LengthRange = new Range (0' 8000);  	dts.PrecisionRange = new Range (0' 4000);  	dts.DataTypeCategory = DataTypeCategory.NVarChar;  	break;  case "real":  	dts.LengthRange = new Range (4);  	dts.ScaleRange = new Range (7);  	dts.DataTypeCategory = DataTypeCategory.Float;  	break;  case "smalldatetime":  	dts.LengthRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.DateTime;  	break;  case "smallint":  	dts.LengthRange = new Range (2);  	dts.PrecisionRange = new Range (5);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "smallmoney":  	dts.LengthRange = new Range (4);  	dts.PrecisionRange = new Range (10);  	dts.ScaleRange = new Range (4);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "text":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "timestamp":  	dts.LengthRange = new Range (1' 8);  	dts.DataTypeCategory = DataTypeCategory.TimeStamp;  	break;  case "tinyint":  	dts.LengthRange = new Range (1);  	dts.PrecisionRange = new Range (1' 3);  	dts.DataTypeCategory = DataTypeCategory.Integer;  	break;  case "varbinary":  	dts.LengthRange = new Range (1' 8004);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarBinary;  	break;  case "varchar":  	dts.LengthRange = new Range (1' 8000);  	dts.PrecisionRange = new Range (0' 8000);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "uniqueidentifier":  	dts.LengthRange = new Range (16);  	dts.DataTypeCategory = DataTypeCategory.Uid;  	break;  case "xml":  	dts.LengthRange = new Range (0' int.MaxValue);  	dts.PrecisionRange = new Range (0' int.MaxValue);  	dts.DataTypeCategory = DataTypeCategory.VarChar;  	break;  case "cursor":  case "table":  case "sql_variant":  	dts.DataTypeCategory = DataTypeCategory.Other;  	break;  default:  	break;  }  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (8);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 19);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (1' 8004);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (1' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (8);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (5' 17);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (5' 17);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 38);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.ScaleRange = new Range (0' 37);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (8);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.ScaleRange = new Range (1' 15);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (4);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 10);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (8);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 19);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.ScaleRange = new Range (4);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (2' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (2' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 4000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (0' 1073741823);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (5' 17);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (5' 17);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 38);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.ScaleRange = new Range (0' 37);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (0' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (0' 4000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (4);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.ScaleRange = new Range (7);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (4);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (2);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (5);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (4);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (10);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.ScaleRange = new Range (4);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (1' 8);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (1' 3);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (1' 8004);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (0' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (1' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.PrecisionRange = new Range (0' 8000);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetDataType,The following statement contains a magic number: dts.LengthRange = new Range (16);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetProcedureAlterStatement,The following statement contains a magic number: if (procedure.Definition.Substring (0' 6).ToLower () == "create")  	sp = string.Concat ("ALTER"' procedure.Definition.Substring (6));  else  	sp = procedure.Definition;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetProcedureAlterStatement,The following statement contains a magic number: if (procedure.Definition.Substring (0' 6).ToLower () == "create")  	sp = string.Concat ("ALTER"' procedure.Definition.Substring (6));  else  	sp = procedure.Definition;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerSchemaProvider.cs,GetProcedureAlterStatement,The following statement contains a magic number: sp = string.Concat ("ALTER"' procedure.Definition.Substring (6));  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,GetDefaultConnectionSettings,The following statement contains a magic number: settings.Port = 1433;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,GetDefaultConnectionSettings,The following statement contains a magic number: settings.MaxPoolSize = 5;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,GetDefaultConnectionSettings,The following statement contains a magic number: if ((p == 4) || (p == 6) || (p == 128))  	settings.UseIntegratedSecurity = false;  else  	settings.UseIntegratedSecurity = true;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,GetDefaultConnectionSettings,The following statement contains a magic number: if ((p == 4) || (p == 6) || (p == 128))  	settings.UseIntegratedSecurity = false;  else  	settings.UseIntegratedSecurity = true;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\SqlServerDbFactory.cs,GetDefaultConnectionSettings,The following statement contains a magic number: if ((p == 4) || (p == 6) || (p == 128))  	settings.UseIntegratedSecurity = false;  else  	settings.UseIntegratedSecurity = true;  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerCreateDatabaseWidget,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\Widgets\SqlServerCreateDatabaseWidget.cs,OnComboFilegrowthChanged,The following statement contains a magic number: if (((Gtk.ComboBox)sender).ActiveText == "%") {  	spinFilegrowth.Adjustment = new Adjustment (0' 0' 100' 1' 1' 1);  	spinFilegrowth.GrabFocus ();  }  else  	spinFilegrowth.Adjustment = new Adjustment (0' 0' 2147483647' 1' 1' 1);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerCreateDatabaseWidget,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\Widgets\SqlServerCreateDatabaseWidget.cs,OnComboFilegrowthChanged,The following statement contains a magic number: if (((Gtk.ComboBox)sender).ActiveText == "%") {  	spinFilegrowth.Adjustment = new Adjustment (0' 0' 100' 1' 1' 1);  	spinFilegrowth.GrabFocus ();  }  else  	spinFilegrowth.Adjustment = new Adjustment (0' 0' 2147483647' 1' 1' 1);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerCreateDatabaseWidget,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\Widgets\SqlServerCreateDatabaseWidget.cs,OnComboFilegrowthChanged,The following statement contains a magic number: spinFilegrowth.Adjustment = new Adjustment (0' 0' 100' 1' 1' 1);  
Magic Number,MonoDevelop.Database.Sql.SqlServer,SqlServerCreateDatabaseWidget,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.SqlServer\Widgets\SqlServerCreateDatabaseWidget.cs,OnComboFilegrowthChanged,The following statement contains a magic number: spinFilegrowth.Adjustment = new Adjustment (0' 0' 2147483647' 1' 1' 1);  
