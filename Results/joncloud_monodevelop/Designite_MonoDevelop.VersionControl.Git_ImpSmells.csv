Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Rebase,The method has 106 lines of code.
Long Method,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The method has 102 lines of code.
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetDirectoryVersionInfo,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Rebase,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Merge,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnRevert,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnDeleteDirectories,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetUnifiedDiffInfo,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Push,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetPushChangeSet,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetPushDiff,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.VersionControl.Git,GitService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitService.cs,ShowMergeDialog,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.VersionControl.Git,GitService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitService.cs,GetMergeResultErrorDetail,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.VersionControl.Git,EditBranchDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\EditBranchDialog.cs,EditBranchDialog,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,HardReset,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.VersionControl.Git,CredentialsDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\CredentialsDialog.cs,CredentialsDialog,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.VersionControl.Git,GitCommitDialogExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitCommitDialogExtension.cs,OnBeginCommit,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.VersionControl.Git,MyersDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\MyersDiff.cs,Call,Cyclomatic complexity of the method is 13
Long Parameter List,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetDirectoryVersionInfo,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetDirectoryVersionInfoCore,The method has 8 parameters.
Long Parameter List,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnPublish,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,NotifyFileChanges,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl.Git,GitRevision,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GitRevision,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl.Git,GitNodeBuilderExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitNodeBuilderExtension.cs,BuildNode,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,CreateCommit,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,MergeTrees,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl.Git,GitCredentials,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitCredentials.cs,TryGetUsernamePassword,The method has 5 parameters.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnGetHistory,The length of the statement  "		GitRevision rev = new GitRevision (this' repository' commit.Id.Name' author.GetWhen ().ToLocalTime ()' author.GetName ()' commit.GetFullMessage ()); " is 148.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetDirectoryVersionInfoCore,The length of the statement  "			versions.Add (new VersionInfo (statFile' ""' false' fstatus' rev' fstatus == VersionStatus.Ignored ? VersionStatus.Unversioned : VersionStatus.Versioned' null)); " is 161.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnPublish,The length of the statement  "			throw new UserException ("The remote repository already contains branches. Publishing is only possible to an empty repository"); " is 128.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnUpdate,The length of the statement  "	GitUpdateOptions options = GitService.StashUnstashWhenUpdating ? GitUpdateOptions.NormalUpdate : GitUpdateOptions.UpdateSubmodules; " is 131.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetSubmodulesToUpdate,The length of the statement  "		AlertButton response = MessageService.GenericAlert (MonoDevelop.Ide.Gui.Stock.Question' GettextCatalog.GetString ("You have local changes in the submodules below")' GettextCatalog.GetString ("Do you want continue? Detached HEADs will have their changes lost.{0}"' submodules.ToString ())' new AlertButton[] { " is 308.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Rebase,The length of the statement  "				if (MessageService.GenericAlert (MonoDevelop.Ide.Gui.Stock.Question' GettextCatalog.GetString ("You have uncommitted changes")' GettextCatalog.GetString ("What do you want to do?")' AlertButton.Cancel' new AlertButton ("Stash")) == AlertButton.Cancel) " is 251.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Merge,The length of the statement  "				if (MessageService.GenericAlert (MonoDevelop.Ide.Gui.Stock.Question' GettextCatalog.GetString ("You have uncommitted changes")' GettextCatalog.GetString ("What do you want to do?")' AlertButton.Cancel' new AlertButton ("Stash")) == AlertButton.Cancel) " is 251.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnCommit,The length of the statement  "		commit.SetAuthor ((string)changeSet.ExtendedProperties ["Git.AuthorName"]' (string)changeSet.ExtendedProperties ["Git.AuthorEmail"]); " is 133.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetDirectoryFiles,The length of the statement  "	FileTreeIterator iter = new FileTreeIterator (dir.FullName' RootRepository.FileSystem' WorkingTreeOptions.KEY.Parse (RootRepository.GetConfig ())); " is 147.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnCheckout,The length of the statement  "			if (e.InnerException is NGit.Errors.MissingObjectException || e.InnerException is NGit.Errors.TransportException || e.InnerException is NGit.Errors.NotSupportedException) { " is 172.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GenerateDiff,The length of the statement  "	var edits = DiffAlgorithm.GetAlgorithm (DiffAlgorithm.SupportedAlgorithm.MYERS).Diff (RawTextComparator.DEFAULT' text1' text2); " is 127.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Push,The length of the statement  "			monitor.ReportError (GettextCatalog.GetString ("The update is a non-fast-forward update. Merge the remote changes before pushing again.")' null); " is 145.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,SwitchToBranch,The length of the statement  "	monitor.BeginTask (GettextCatalog.GetString ("Switching to branch {0}"' branch)' GitService.StashUnstashWhenSwitchingBranches ? 4 : 2); " is 135.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,NotifyFileChanges,The length of the statement  "	var removed = changes.Where (c => c.GetChangeType () == DiffEntry.ChangeType.ADD).Select (c => GetRepository (c.GetNewPath ()).FromGitPath (c.GetNewPath ())).ToList (); " is 168.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,NotifyFileChanges,The length of the statement  "	var modified = changes.Where (c => c.GetChangeType () != DiffEntry.ChangeType.ADD).Select (c => GetRepository (c.GetNewPath ()).FromGitPath (c.GetNewPath ())).ToList (); " is 169.
Long Statement,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetPushChangeSet,The length of the statement  "		VersionInfo vi = new VersionInfo (RootRepository.FromGitPath (change.GetNewPath ())' ""' false' status | VersionStatus.Versioned' null' VersionStatus.Versioned' null); " is 167.
Long Statement,MonoDevelop.VersionControl.Git,SwitchToBranchHandler,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Commands.cs,Update,The length of the statement  "	if (((wob is WorkspaceItem) && ((WorkspaceItem)wob).ParentWorkspace == null) || (wob.BaseDirectory.CanonicalPath == repo.RootPath.CanonicalPath)) { " is 147.
Long Statement,MonoDevelop.VersionControl.Git,GitService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitService.cs,Push,The length of the statement  "		IProgressMonitor monitor = VersionControlService.GetProgressMonitor (GettextCatalog.GetString ("Pushing changes...")' VersionControlOperationType.Push); " is 152.
Long Statement,MonoDevelop.VersionControl.Git,GitService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitService.cs,ShowMergeDialog,The length of the statement  "				using (IProgressMonitor monitor = VersionControlService.GetProgressMonitor (GettextCatalog.GetString ("Rebasing branch '{0}'..."' dlg.SelectedBranch))) { " is 153.
Long Statement,MonoDevelop.VersionControl.Git,GitService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitService.cs,ShowMergeDialog,The length of the statement  "					repo.Rebase (dlg.SelectedBranch' dlg.StageChanges ? GitUpdateOptions.SaveLocalChanges : GitUpdateOptions.None' monitor); " is 120.
Long Statement,MonoDevelop.VersionControl.Git,GitService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitService.cs,ShowMergeDialog,The length of the statement  "				using (IProgressMonitor monitor = VersionControlService.GetProgressMonitor (GettextCatalog.GetString ("Merging branch '{0}'..."' dlg.SelectedBranch))) { " is 152.
Long Statement,MonoDevelop.VersionControl.Git,GitConfigurationDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitConfigurationDialog.cs,OnButtonRemoveBranchClicked,The length of the statement  "	if (MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to delete the branch '{0}'?"' b.Name)' txt' AlertButton.Delete)) { " is 143.
Long Statement,MonoDevelop.VersionControl.Git,GitConfigurationDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitConfigurationDialog.cs,OnButtonRemoveRemoteClicked,The length of the statement  "	if (MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to delete the remote '{0}'?"' remote.Name)' AlertButton.Delete)) { " is 143.
Long Statement,MonoDevelop.VersionControl.Git,GitConfigurationDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitConfigurationDialog.cs,UpdateRemoteButtons,The length of the statement  "		buttonAddRemote.Sensitive = buttonEditRemote.Sensitive = buttonRemoveRemote.Sensitive = buttonTrackRemote.Sensitive = false; " is 124.
Long Statement,MonoDevelop.VersionControl.Git,EditBranchDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\EditBranchDialog.cs,UpdateStatus,The length of the statement  "		labelError.Markup = "<span color='red'>" + GettextCatalog.GetString ("A branch with this name already exists") + "</span>"; " is 123.
Long Statement,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The length of the statement  "	this.labelHeader.LabelProp = global::Mono.Unix.Catalog.GetString ("Select the branch to be merged with the current branch:"); " is 125.
Long Statement,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The length of the statement  "	PersonIdent author = new PersonIdent (config.GetAuthorName () ?? "unknown"' config.GetAuthorEmail () ?? "unknown@(none)."); " is 123.
Long Statement,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The length of the statement  "			else if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) { " is 151.
Long Statement,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,MergeTrees,The length of the statement  "				newHead = new NGit.Api.Git (repo).Commit ().SetMessage (srcCommit.GetFullMessage ()).SetAuthor (srcCommit.GetAuthorIdent ()).Call (); " is 133.
Long Statement,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,IsGitRepository,The length of the statement  "	return Directory.Exists (newPath) && Directory.Exists (newPath.Combine ("objects")) && Directory.Exists (newPath.Combine ("refs")); " is 131.
Long Statement,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,IsValidBranchName,The length of the statement  "	if (name.StartsWith ("."' StringComparison.Ordinal) || name.EndsWith ("/"' StringComparison.Ordinal) || name.EndsWith (".lock"' StringComparison.Ordinal)) " is 154.
Long Statement,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,IsValidBranchName,The length of the statement  "	if (name.Contains (" ") || name.Contains ("~") || name.Contains ("..") || name.Contains ("^") || name.Contains (":") || name.Contains ("\\") || name.Contains ("?") || name.Contains ("[")) " is 187.
Long Statement,MonoDevelop.VersionControl.Git,GitCredentials,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitCredentials.cs,Get,The length of the statement  "			PasswordService.AddWebUserNameAndPassword (new Uri (uri.ToString ())' user.GetValue ()' new string (passwordItem.GetValue ())); " is 127.
Long Statement,MonoDevelop.VersionControl.Git,GitCommitDialogExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitCommitDialogExtension.cs,HighlightTextIfTooLong,The length of the statement  "		textView.TooltipText = String.Format (GettextCatalog.GetString ("When using GIT' it is not recommended to surpass the character count of {0} in the first line of the commit message")' maxLengthConventionForFirstLineOfCommitMessage); " is 232.
Long Statement,MonoDevelop.VersionControl.Git,GitSupportFeature,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitSupportFeature.cs,GetSupportLevel,The length of the statement  "	if (parentFolder != null && !parentFolder.ParentSolution.FileName.IsNullOrEmpty && System.IO.File.Exists (parentFolder.ParentSolution.FileName)) " is 144.
Long Statement,MonoDevelop.VersionControl.Git,GitSupportFeature,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitSupportFeature.cs,CreateFeatureEditor,The length of the statement  "	Gtk.Label label = new Gtk.Label (GettextCatalog.GetString ("A new local Git Repository for the solution will be created")); " is 123.
Long Statement,MonoDevelop.VersionControl.Git,GitSupportFeature,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitSupportFeature.cs,ApplyFeature,The length of the statement  "	if (parentFolder.ParentSolution.FileName.IsNullOrEmpty || !System.IO.File.Exists (parentFolder.ParentSolution.FileName)) " is 120.
Long Statement,MonoDevelop.VersionControl.Git,GitSupportFeature,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitSupportFeature.cs,OnSolutionSaved,The length of the statement  "	gitRepo.Add (sol.GetItemFiles (true).ToArray ()' false' new MonoDevelop.Core.ProgressMonitoring.NullProgressMonitor ()); " is 120.
Long Statement,MonoDevelop.VersionControl.Git,GitSelectRevisionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitSelectRevisionDialog.cs,CheckSensitive,The length of the statement  "	if (!String.IsNullOrWhiteSpace (tagNameEntry.Text) && GitUtil.IsValidBranchName (tagNameEntry.Text) && revisionList.SelectedRow != -1) { " is 136.
Complex Conditional,MonoDevelop.VersionControl.Git,GitVersionControl,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitVersionControl.cs,GetRepositoryReference,The conditional expression  "path.IsEmpty || path.ParentDirectory.IsEmpty || path.IsNull || path.ParentDirectory.IsNull"  is complex.
Complex Conditional,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,IsValidBranchName,The conditional expression  "name.Contains (" ") || name.Contains ("~") || name.Contains ("..") || name.Contains ("^") || name.Contains (":") || name.Contains ("\\") || name.Contains ("?") || name.Contains ("[")"  is complex.
Empty Catch Block,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,IsUrlValid,The method has an empty catch block.
Empty Catch Block,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnPublish,The method has an empty catch block.
Empty Catch Block,MonoDevelop.VersionControl.Git,MyersDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\MyersDiff.cs,Call,The method has an empty catch block.
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnUpdate,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Updating")' 5);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Rebase,The following statement contains a magic number: try {  	monitor.BeginTask (GettextCatalog.GetString ("Rebasing")' 5);  	List<string> UpdateSubmodules = new List<string> ();  	// TODO: Fix stash so we don't have to do update before the main repo update.  	if ((options & GitUpdateOptions.UpdateSubmodules) == GitUpdateOptions.UpdateSubmodules) {  		monitor.Log.WriteLine (GettextCatalog.GetString ("Checking repository submodules"));  		if (!GetSubmodulesToUpdate (UpdateSubmodules))  			return;  		monitor.Log.WriteLine (GettextCatalog.GetString ("Updating repository submodules"));  		var submoduleUpdate = git.SubmoduleUpdate ();  		foreach (var submodule in UpdateSubmodules)  			submoduleUpdate.AddPath (submodule);  		submoduleUpdate.Call ();  		monitor.Step (1);  	}  	if ((options & GitUpdateOptions.SaveLocalChanges) != GitUpdateOptions.SaveLocalChanges) {  		const VersionStatus unclean = VersionStatus.Modified | VersionStatus.ScheduledAdd | VersionStatus.ScheduledDelete;  		bool modified = false;  		if (GetDirectoryVersionInfo (RootPath' false' true).Any (v => (v.Status & unclean) != VersionStatus.Unversioned))  			modified = true;  		if (modified) {  			if (MessageService.GenericAlert (MonoDevelop.Ide.Gui.Stock.Question' GettextCatalog.GetString ("You have uncommitted changes")' GettextCatalog.GetString ("What do you want to do?")' AlertButton.Cancel' new AlertButton ("Stash")) == AlertButton.Cancel)  				return;  			options |= GitUpdateOptions.SaveLocalChanges;  		}  	}  	if ((options & GitUpdateOptions.SaveLocalChanges) == GitUpdateOptions.SaveLocalChanges) {  		monitor.Log.WriteLine (GettextCatalog.GetString ("Saving local changes"));  		using (var gm = new GitMonitor (monitor))  			stash = stashes.Create (gm' GetStashName ("_tmp_"));  		monitor.Step (1);  	}  	RebaseCommand rebase = git.Rebase ();  	rebase.SetOperation (RebaseCommand.Operation.BEGIN);  	rebase.SetUpstream (upstreamRef);  	var gmonitor = new GitMonitor (monitor);  	rebase.SetProgressMonitor (gmonitor);  	bool aborted = false;  	try {  		var result = rebase.Call ();  		while (!aborted && result.GetStatus () == RebaseResult.Status.STOPPED) {  			rebase = git.Rebase ();  			rebase.SetProgressMonitor (gmonitor);  			rebase.SetOperation (RebaseCommand.Operation.CONTINUE);  			bool commitChanges = true;  			var conflicts = GitUtil.GetConflictedFiles (RootRepository);  			foreach (string conflictFile in conflicts) {  				ConflictResult res = ResolveConflict (RootRepository.FromGitPath (conflictFile));  				if (res == ConflictResult.Abort) {  					aborted = true;  					commitChanges = false;  					rebase.SetOperation (RebaseCommand.Operation.ABORT);  					break;  				}  				else if (res == ConflictResult.Skip) {  					rebase.SetOperation (RebaseCommand.Operation.SKIP);  					commitChanges = false;  					break;  				}  			}  			if (commitChanges) {  				NGit.Api.AddCommand cmd = git.Add ();  				foreach (string conflictFile in conflicts)  					cmd.AddFilepattern (conflictFile);  				cmd.Call ();  			}  			result = rebase.Call ();  		}  		if ((options & GitUpdateOptions.UpdateSubmodules) == GitUpdateOptions.UpdateSubmodules) {  			monitor.Log.WriteLine (GettextCatalog.GetString ("Updating repository submodules"));  			var submoduleUpdate = git.SubmoduleUpdate ();  			foreach (var submodule in UpdateSubmodules)  				submoduleUpdate.AddPath (submodule);  			submoduleUpdate.Call ();  		}  	}  	catch {  		if (!aborted) {  			rebase = git.Rebase ();  			rebase.SetOperation (RebaseCommand.Operation.ABORT);  			rebase.SetProgressMonitor (gmonitor);  			rebase.Call ();  		}  		throw;  	}  	finally {  		gmonitor.Dispose ();  	}  }  finally {  	if ((options & GitUpdateOptions.SaveLocalChanges) == GitUpdateOptions.SaveLocalChanges)  		monitor.Step (1);  	// Restore local changes  	if (stash != null) {  		monitor.Log.WriteLine (GettextCatalog.GetString ("Restoring local changes"));  		using (var gm = new GitMonitor (monitor))  			stash.Apply (gm);  		stashes.Remove (stash);  	}  	monitor.EndTask ();  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Rebase,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Rebasing")' 5);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Merge,The following statement contains a magic number: try {  	monitor.BeginTask (GettextCatalog.GetString ("Merging")' 5);  	List<string> UpdateSubmodules = new List<string> ();  	// TODO: Fix stash so we don't have to do update before the main repo update.  	if ((options & GitUpdateOptions.UpdateSubmodules) == GitUpdateOptions.UpdateSubmodules) {  		monitor.Log.WriteLine (GettextCatalog.GetString ("Checking repository submodules"));  		if (!GetSubmodulesToUpdate (UpdateSubmodules))  			return;  		monitor.Log.WriteLine (GettextCatalog.GetString ("Updating repository submodules"));  		var submoduleUpdate = git.SubmoduleUpdate ();  		foreach (var submodule in UpdateSubmodules)  			submoduleUpdate.AddPath (submodule);  		submoduleUpdate.Call ();  		monitor.Step (1);  	}  	// Get a list of files that are different in the target branch  	statusList = GitUtil.GetChangedFiles (RootRepository' branch);  	monitor.Step (1);  	if ((options & GitUpdateOptions.SaveLocalChanges) != GitUpdateOptions.SaveLocalChanges) {  		const VersionStatus unclean = VersionStatus.Modified | VersionStatus.ScheduledAdd | VersionStatus.ScheduledDelete;  		bool modified = false;  		if (GetDirectoryVersionInfo (RootPath' false' true).Any (v => (v.Status & unclean) != VersionStatus.Unversioned))  			modified = true;  		if (modified) {  			if (MessageService.GenericAlert (MonoDevelop.Ide.Gui.Stock.Question' GettextCatalog.GetString ("You have uncommitted changes")' GettextCatalog.GetString ("What do you want to do?")' AlertButton.Cancel' new AlertButton ("Stash")) == AlertButton.Cancel)  				return;  			options |= GitUpdateOptions.SaveLocalChanges;  		}  	}  	if ((options & GitUpdateOptions.SaveLocalChanges) == GitUpdateOptions.SaveLocalChanges) {  		monitor.Log.WriteLine (GettextCatalog.GetString ("Saving local changes"));  		using (var gm = new GitMonitor (monitor))  			stash = stashes.Create (gm' GetStashName ("_tmp_"));  		monitor.Step (1);  	}  	// Apply changes  	ObjectId branchId = RootRepository.Resolve (branch);  	MergeCommandResult mergeResult = git.Merge ().SetStrategy (MergeStrategy.RESOLVE).Include (branchId).Call ();  	if (mergeResult.GetMergeStatus () == MergeStatus.CONFLICTING || mergeResult.GetMergeStatus () == MergeStatus.FAILED) {  		var conflicts = mergeResult.GetConflicts ();  		bool commit = true;  		if (conflicts != null) {  			foreach (string conflictFile in conflicts.Keys) {  				ConflictResult res = ResolveConflict (RootRepository.FromGitPath (conflictFile));  				if (res == ConflictResult.Abort) {  					GitUtil.HardReset (RootRepository' GetHeadCommit (RootRepository));  					commit = false;  					break;  				}  				else if (res == ConflictResult.Skip) {  					Revert (RootRepository.FromGitPath (conflictFile)' false' monitor);  					break;  				}  			}  		}  		if (commit)  			git.Commit ().Call ();  	}  	if ((options & GitUpdateOptions.UpdateSubmodules) == GitUpdateOptions.UpdateSubmodules) {  		monitor.Log.WriteLine (GettextCatalog.GetString ("Updating repository submodules"));  		var submoduleUpdate = git.SubmoduleUpdate ();  		foreach (var submodule in CachedSubmodules)  			submoduleUpdate.AddPath (submodule.Item1);  		submoduleUpdate.Call ();  		monitor.Step (1);  	}  }  finally {  	if ((options & GitUpdateOptions.SaveLocalChanges) == GitUpdateOptions.SaveLocalChanges)  		monitor.Step (1);  	// Restore local changes  	if (stash != null) {  		monitor.Log.WriteLine (GettextCatalog.GetString ("Restoring local changes"));  		using (var gm = new GitMonitor (monitor))  			stash.Apply (gm);  		stashes.Remove (stash);  		monitor.Step (1);  	}  	monitor.EndTask ();  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Merge,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Merging")' 5);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnCheckout,The following statement contains a magic number: using (var gm = new GitMonitor (monitor' 4)) {  	cmd.SetProgressMonitor (gm);  	try {  		cmd.Call ();  	}  	catch (NGit.Api.Errors.JGitInternalException e) {  		// We cancelled and NGit throws.  		// Or URL is wrong.  		if (e.InnerException is NGit.Errors.MissingObjectException || e.InnerException is NGit.Errors.TransportException || e.InnerException is NGit.Errors.NotSupportedException) {  			FileService.DeleteDirectory (targetLocalPath);  		}  	}  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnRevert,The following statement contains a magic number: foreach (var group in GroupByRepository (localPaths)) {  	var repository = group.Key;  	var files = group.ToArray ();  	var c = GetHeadCommit (repository);  	RevTree tree = c != null ? c.Tree : null;  	List<FilePath> changedFiles = new List<FilePath> ();  	List<FilePath> removedFiles = new List<FilePath> ();  	monitor.BeginTask (GettextCatalog.GetString ("Reverting files")' 3);  	monitor.BeginStepTask (GettextCatalog.GetString ("Reverting files")' files.Length' 2);  	DirCache dc = repository.LockDirCache ();  	DirCacheBuilder builder = dc.Builder ();  	try {  		HashSet<string> entriesToRemove = new HashSet<string> ();  		HashSet<string> foldersToRemove = new HashSet<string> ();  		// Add the new entries  		foreach (FilePath fp in files) {  			string p = repository.ToGitPath (fp);  			// Register entries to be removed from the index  			if (Directory.Exists (fp))  				foldersToRemove.Add (p);  			else  				entriesToRemove.Add (p);  			TreeWalk tw = tree != null ? TreeWalk.ForPath (repository' p' tree) : null;  			if (tw == null) {  				// Removed from the index  			}  			else {  				// Add new entries  				TreeWalk r;  				if (tw.IsSubtree) {  					// It's a directory. Make sure we remove existing index entries of this directory  					foldersToRemove.Add (p);  					// We have to iterate through all folder files. We need a new iterator since the  					// existing rw is not recursive  					r = new TreeWalk (repository);  					r.Reset (tree);  					r.Filter = PathFilterGroup.CreateFromStrings (new string[] {  						p  					});  					r.Recursive = true;  					r.Next ();  				}  				else {  					r = tw;  				}  				do {  					// There can be more than one entry if reverting a whole directory  					string rpath = repository.FromGitPath (r.PathString);  					DirCacheEntry e = new DirCacheEntry (r.PathString);  					e.SetObjectId (r.GetObjectId (0));  					e.FileMode = r.GetFileMode (0);  					if (!Directory.Exists (Path.GetDirectoryName (rpath)))  						Directory.CreateDirectory (rpath);  					DirCacheCheckout.CheckoutEntry (repository' rpath' e);  					builder.Add (e);  					changedFiles.Add (rpath);  				}  				while (r.Next ());  			}  			monitor.Step (1);  		}  		// Add entries we want to keep  		int count = dc.GetEntryCount ();  		for (int n = 0; n < count; n++) {  			DirCacheEntry e = dc.GetEntry (n);  			string path = e.PathString;  			if (!entriesToRemove.Contains (path) && !foldersToRemove.Any (f => IsSubpath (f' path)))  				builder.Add (e);  		}  		builder.Commit ();  	}  	catch {  		dc.Unlock ();  		throw;  	}  	monitor.EndTask ();  	monitor.BeginTask (null' files.Length);  	foreach (FilePath p in changedFiles) {  		FileService.NotifyFileChanged (p' true);  		monitor.Step (1);  	}  	foreach (FilePath p in removedFiles) {  		FileService.NotifyFileRemoved (p);  		monitor.Step (1);  	}  	monitor.EndTask ();  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnRevert,The following statement contains a magic number: foreach (var group in GroupByRepository (localPaths)) {  	var repository = group.Key;  	var files = group.ToArray ();  	var c = GetHeadCommit (repository);  	RevTree tree = c != null ? c.Tree : null;  	List<FilePath> changedFiles = new List<FilePath> ();  	List<FilePath> removedFiles = new List<FilePath> ();  	monitor.BeginTask (GettextCatalog.GetString ("Reverting files")' 3);  	monitor.BeginStepTask (GettextCatalog.GetString ("Reverting files")' files.Length' 2);  	DirCache dc = repository.LockDirCache ();  	DirCacheBuilder builder = dc.Builder ();  	try {  		HashSet<string> entriesToRemove = new HashSet<string> ();  		HashSet<string> foldersToRemove = new HashSet<string> ();  		// Add the new entries  		foreach (FilePath fp in files) {  			string p = repository.ToGitPath (fp);  			// Register entries to be removed from the index  			if (Directory.Exists (fp))  				foldersToRemove.Add (p);  			else  				entriesToRemove.Add (p);  			TreeWalk tw = tree != null ? TreeWalk.ForPath (repository' p' tree) : null;  			if (tw == null) {  				// Removed from the index  			}  			else {  				// Add new entries  				TreeWalk r;  				if (tw.IsSubtree) {  					// It's a directory. Make sure we remove existing index entries of this directory  					foldersToRemove.Add (p);  					// We have to iterate through all folder files. We need a new iterator since the  					// existing rw is not recursive  					r = new TreeWalk (repository);  					r.Reset (tree);  					r.Filter = PathFilterGroup.CreateFromStrings (new string[] {  						p  					});  					r.Recursive = true;  					r.Next ();  				}  				else {  					r = tw;  				}  				do {  					// There can be more than one entry if reverting a whole directory  					string rpath = repository.FromGitPath (r.PathString);  					DirCacheEntry e = new DirCacheEntry (r.PathString);  					e.SetObjectId (r.GetObjectId (0));  					e.FileMode = r.GetFileMode (0);  					if (!Directory.Exists (Path.GetDirectoryName (rpath)))  						Directory.CreateDirectory (rpath);  					DirCacheCheckout.CheckoutEntry (repository' rpath' e);  					builder.Add (e);  					changedFiles.Add (rpath);  				}  				while (r.Next ());  			}  			monitor.Step (1);  		}  		// Add entries we want to keep  		int count = dc.GetEntryCount ();  		for (int n = 0; n < count; n++) {  			DirCacheEntry e = dc.GetEntry (n);  			string path = e.PathString;  			if (!entriesToRemove.Contains (path) && !foldersToRemove.Any (f => IsSubpath (f' path)))  				builder.Add (e);  		}  		builder.Commit ();  	}  	catch {  		dc.Unlock ();  		throw;  	}  	monitor.EndTask ();  	monitor.BeginTask (null' files.Length);  	foreach (FilePath p in changedFiles) {  		FileService.NotifyFileChanged (p' true);  		monitor.Step (1);  	}  	foreach (FilePath p in removedFiles) {  		FileService.NotifyFileRemoved (p);  		monitor.Step (1);  	}  	monitor.EndTask ();  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnRevert,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Reverting files")' 3);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,OnRevert,The following statement contains a magic number: monitor.BeginStepTask (GettextCatalog.GetString ("Reverting files")' files.Length' 2);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetUnifiedDiffInfo,The following statement contains a magic number: using (StringReader sr = new StringReader (diffContent)) {  	string line;  	StringBuilder content = new StringBuilder ();  	string fileName = null;  	while ((line = sr.ReadLine ()) != null) {  		if (line.StartsWith ("+++ "' StringComparison.Ordinal) || line.StartsWith ("--- "' StringComparison.Ordinal)) {  			string newFile = RootPath.Combine (line.Substring (6));  			if (fileName != null && fileName != newFile) {  				list.Add (new DiffInfo (basePath' fileName' content.ToString ().Trim ('\n')));  				content = new StringBuilder ();  			}  			fileName = newFile;  		}  		else if (!line.StartsWith ("diff"' StringComparison.Ordinal) && !line.StartsWith ("index"' StringComparison.Ordinal)) {  			content.Append (line).Append ('\n');  		}  	}  	if (fileName != null) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ().Trim ('\n')));  	}  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetUnifiedDiffInfo,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	if (line.StartsWith ("+++ "' StringComparison.Ordinal) || line.StartsWith ("--- "' StringComparison.Ordinal)) {  		string newFile = RootPath.Combine (line.Substring (6));  		if (fileName != null && fileName != newFile) {  			list.Add (new DiffInfo (basePath' fileName' content.ToString ().Trim ('\n')));  			content = new StringBuilder ();  		}  		fileName = newFile;  	}  	else if (!line.StartsWith ("diff"' StringComparison.Ordinal) && !line.StartsWith ("index"' StringComparison.Ordinal)) {  		content.Append (line).Append ('\n');  	}  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetUnifiedDiffInfo,The following statement contains a magic number: if (line.StartsWith ("+++ "' StringComparison.Ordinal) || line.StartsWith ("--- "' StringComparison.Ordinal)) {  	string newFile = RootPath.Combine (line.Substring (6));  	if (fileName != null && fileName != newFile) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ().Trim ('\n')));  		content = new StringBuilder ();  	}  	fileName = newFile;  }  else if (!line.StartsWith ("diff"' StringComparison.Ordinal) && !line.StartsWith ("index"' StringComparison.Ordinal)) {  	content.Append (line).Append ('\n');  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,SwitchToBranch,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Switching to branch {0}"' branch)' GitService.StashUnstashWhenSwitchingBranches ? 4 : 2);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,SwitchToBranch,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Switching to branch {0}"' branch)' GitService.StashUnstashWhenSwitchingBranches ? 4 : 2);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetStashBranchName,The following statement contains a magic number: if (stashName.StartsWith ("__MD_"' StringComparison.Ordinal))  	return stashName.Substring (5);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetStashBranchName,The following statement contains a magic number: return stashName.Substring (5);  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetAnnotations,The following statement contains a magic number: for (int i = 0; i < result.GetResultContents ().Size (); i++) {  	var commit = result.GetSourceCommit (i);  	var author = result.GetSourceAuthor (i);  	if (commit != null && author != null) {  		var commitTime = new DateTime (1970' 1' 1).AddSeconds (commit.CommitTime);  		string authorName = author.GetName () ?? commit.GetAuthorIdent ().GetName ();  		string email = author.GetEmailAddress () ?? commit.GetAuthorIdent ().GetEmailAddress ();  		list.Add (new Annotation (commit.Name' authorName' commitTime' String.Format ("<{0}>"' email)));  	}  	else {  		list.Add (new Annotation (GettextCatalog.GetString ("working copy")' "<uncommitted>"' DateTime.Now));  	}  }  
Magic Number,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,GetAnnotations,The following statement contains a magic number: if (commit != null && author != null) {  	var commitTime = new DateTime (1970' 1' 1).AddSeconds (commit.CommitTime);  	string authorName = author.GetName () ?? commit.GetAuthorIdent ().GetName ();  	string email = author.GetEmailAddress () ?? commit.GetAuthorIdent ().GetEmailAddress ();  	list.Add (new Annotation (commit.Name' authorName' commitTime' String.Format ("<{0}>"' email)));  }  else {  	list.Add (new Annotation (GettextCatalog.GetString ("working copy")' "<uncommitted>"' DateTime.Now));  }  
Magic Number,MonoDevelop.VersionControl.Git,GitMonitor,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,Update,The following statement contains a magic number: if (currentStep >= (currentWork / 100)) {  	monitor.Step (currentStep);  	currentStep = 0;  }  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(9));  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.mergeWidget.Events = ((global::Gdk.EventMask)(256));  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: w5.Spacing = 10;  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: w5.BorderWidth = ((uint)(5));  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: w5.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -7);  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.button24' -5);  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: w8.Position = 2;  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 991;  
Magic Number,MonoDevelop.VersionControl.Git,ConflictResolutionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.ConflictResolutionDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 534;  
Magic Number,MonoDevelop.VersionControl.Git,GitConfigurationDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitConfigurationDialog.cs,GitConfigurationDialog,The following statement contains a magic number: listBranches.AppendColumn (GettextCatalog.GetString ("Tracking")' new CellRendererText ()' "text"' 2);  
Magic Number,MonoDevelop.VersionControl.Git,GitConfigurationDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitConfigurationDialog.cs,GitConfigurationDialog,The following statement contains a magic number: treeRemotes.AppendColumn ("Url"' new CellRendererText ()' "text"' 2);  
Magic Number,MonoDevelop.VersionControl.Git,EditBranchDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\EditBranchDialog.cs,EditBranchDialog,The following statement contains a magic number: comboSources.AddAttribute (crt' "text"' 2);  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(9));  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: this.labelOper.WidthRequest = 443;  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: w5.Position = 2;  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: w6.Position = 3;  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: w8.Spacing = 10;  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: w8.BorderWidth = ((uint)(5));  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: w8.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 469;  
Magic Number,MonoDevelop.VersionControl.Git,MergeDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\gtk-gui\MonoDevelop.VersionControl.Git.MergeDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 487;  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Stash,The following statement contains a magic number: this.Comment = comment.Substring (i + 2);  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Stash,The following statement contains a magic number: sb.Append (prevStashCommitId ?? new string ('0'' 40)).Append (' ');  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: s.PrevStashCommitId = line.Substring (0' 40);  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: s.CommitId = line.Substring (41' 40);  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: s.CommitId = line.Substring (41' 40);  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1) {  	aname = line.Substring (82' i - 82 - 1);  	i++;  	int i2 = line.IndexOf ('>'' i);  	if (i2 != -1)  		amail = line.Substring (i' i2 - i);  	i2 += 2;  	i = line.IndexOf (' '' i2);  	int secs = int.Parse (line.Substring (i2' i - i2));  	DateTime t = new DateTime (1970' 1' 1) + TimeSpan.FromSeconds (secs);  	string st = t.ToString ("yyyy-MM-ddTHH:mm:ss") + line.Substring (i + 1' 3) + ":" + line.Substring (i + 4' 2);  	s.DateTime = DateTimeOffset.Parse (st' System.Globalization.CultureInfo.InvariantCulture.DateTimeFormat);  	s.Comment = line.Substring (i + 7);  	i = s.Comment.IndexOf (':');  	if (i != -1)  		s.Comment = s.Comment.Substring (i + 2);  }  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: aname = line.Substring (82' i - 82 - 1);  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: aname = line.Substring (82' i - 82 - 1);  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: i2 += 2;  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: s.Comment = line.Substring (i + 7);  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: if (i != -1)  	s.Comment = s.Comment.Substring (i + 2);  
Magic Number,MonoDevelop.VersionControl.Git,Stash,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Parse,The following statement contains a magic number: s.Comment = s.Comment.Substring (i + 2);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: if (monitor != null) {  	monitor.Start (1);  	monitor.BeginTask ("Stashing changes"' 100);  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: monitor.BeginTask ("Stashing changes"' 100);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: if (string.IsNullOrEmpty (message)) {  	// Use the commit summary as message  	message = parent.Abbreviate (7) + " " + parent.GetShortMessage ();  	int i = message.IndexOfAny (new char[] {  		'\r''  		'\n'  	});  	if (i != -1)  		message = message.Substring (0' i);  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: message = parent.Abbreviate (7) + " " + parent.GetShortMessage ();  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: if (monitor != null)  	monitor.Update (10);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: monitor.Update (10);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: if (monitor != null)  	monitor.Update (10);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: monitor.Update (10);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: if (monitor != null)  	monitor.Update (20);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: monitor.Update (20);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: if (monitor != null)  	monitor.Update (20);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: monitor.Update (20);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: if (monitor != null)  	monitor.Update (5);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Create,The following statement contains a magic number: monitor.Update (5);  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The following statement contains a magic number: try {  	TreeWalk tw = new TreeWalk (_repo);  	tw.Reset ();  	tw.AddTree (new FileTreeIterator (_repo));  	tw.AddTree (headTree);  	tw.AddTree (new DirCacheIterator (index));  	while (tw.Next ()) {  		// Ignore untracked files  		if (tw.IsSubtree)  			tw.EnterSubtree ();  		else if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) {  			WorkingTreeIterator f = tw.GetTree<WorkingTreeIterator> (0);  			DirCacheIterator dcIter = tw.GetTree<DirCacheIterator> (2);  			DirCacheEntry currentEntry = dcIter.GetDirCacheEntry ();  			DirCacheEntry ce = new DirCacheEntry (tw.PathString);  			if (!f.IsModified (currentEntry' true)) {  				ce.SetLength (currentEntry.Length);  				ce.LastModified = currentEntry.LastModified;  				ce.FileMode = currentEntry.FileMode;  				ce.SetObjectId (currentEntry.GetObjectId ());  			}  			else {  				long sz = f.GetEntryLength ();  				ce.SetLength (sz);  				ce.LastModified = f.GetEntryLastModified ();  				ce.FileMode = f.EntryFileMode;  				var data = f.OpenEntryStream ();  				try {  					ce.SetObjectId (oi.Insert (Constants.OBJ_BLOB' sz' data));  				}  				finally {  					data.Close ();  				}  			}  			cb.Add (ce);  		}  	}  	cb.Finish ();  	return dc.WriteTree (oi);  }  finally {  	oi.Release ();  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The following statement contains a magic number: try {  	TreeWalk tw = new TreeWalk (_repo);  	tw.Reset ();  	tw.AddTree (new FileTreeIterator (_repo));  	tw.AddTree (headTree);  	tw.AddTree (new DirCacheIterator (index));  	while (tw.Next ()) {  		// Ignore untracked files  		if (tw.IsSubtree)  			tw.EnterSubtree ();  		else if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) {  			WorkingTreeIterator f = tw.GetTree<WorkingTreeIterator> (0);  			DirCacheIterator dcIter = tw.GetTree<DirCacheIterator> (2);  			DirCacheEntry currentEntry = dcIter.GetDirCacheEntry ();  			DirCacheEntry ce = new DirCacheEntry (tw.PathString);  			if (!f.IsModified (currentEntry' true)) {  				ce.SetLength (currentEntry.Length);  				ce.LastModified = currentEntry.LastModified;  				ce.FileMode = currentEntry.FileMode;  				ce.SetObjectId (currentEntry.GetObjectId ());  			}  			else {  				long sz = f.GetEntryLength ();  				ce.SetLength (sz);  				ce.LastModified = f.GetEntryLastModified ();  				ce.FileMode = f.EntryFileMode;  				var data = f.OpenEntryStream ();  				try {  					ce.SetObjectId (oi.Insert (Constants.OBJ_BLOB' sz' data));  				}  				finally {  					data.Close ();  				}  			}  			cb.Add (ce);  		}  	}  	cb.Finish ();  	return dc.WriteTree (oi);  }  finally {  	oi.Release ();  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The following statement contains a magic number: while (tw.Next ()) {  	// Ignore untracked files  	if (tw.IsSubtree)  		tw.EnterSubtree ();  	else if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) {  		WorkingTreeIterator f = tw.GetTree<WorkingTreeIterator> (0);  		DirCacheIterator dcIter = tw.GetTree<DirCacheIterator> (2);  		DirCacheEntry currentEntry = dcIter.GetDirCacheEntry ();  		DirCacheEntry ce = new DirCacheEntry (tw.PathString);  		if (!f.IsModified (currentEntry' true)) {  			ce.SetLength (currentEntry.Length);  			ce.LastModified = currentEntry.LastModified;  			ce.FileMode = currentEntry.FileMode;  			ce.SetObjectId (currentEntry.GetObjectId ());  		}  		else {  			long sz = f.GetEntryLength ();  			ce.SetLength (sz);  			ce.LastModified = f.GetEntryLastModified ();  			ce.FileMode = f.EntryFileMode;  			var data = f.OpenEntryStream ();  			try {  				ce.SetObjectId (oi.Insert (Constants.OBJ_BLOB' sz' data));  			}  			finally {  				data.Close ();  			}  		}  		cb.Add (ce);  	}  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The following statement contains a magic number: while (tw.Next ()) {  	// Ignore untracked files  	if (tw.IsSubtree)  		tw.EnterSubtree ();  	else if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) {  		WorkingTreeIterator f = tw.GetTree<WorkingTreeIterator> (0);  		DirCacheIterator dcIter = tw.GetTree<DirCacheIterator> (2);  		DirCacheEntry currentEntry = dcIter.GetDirCacheEntry ();  		DirCacheEntry ce = new DirCacheEntry (tw.PathString);  		if (!f.IsModified (currentEntry' true)) {  			ce.SetLength (currentEntry.Length);  			ce.LastModified = currentEntry.LastModified;  			ce.FileMode = currentEntry.FileMode;  			ce.SetObjectId (currentEntry.GetObjectId ());  		}  		else {  			long sz = f.GetEntryLength ();  			ce.SetLength (sz);  			ce.LastModified = f.GetEntryLastModified ();  			ce.FileMode = f.EntryFileMode;  			var data = f.OpenEntryStream ();  			try {  				ce.SetObjectId (oi.Insert (Constants.OBJ_BLOB' sz' data));  			}  			finally {  				data.Close ();  			}  		}  		cb.Add (ce);  	}  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The following statement contains a magic number: if (tw.IsSubtree)  	tw.EnterSubtree ();  else if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) {  	WorkingTreeIterator f = tw.GetTree<WorkingTreeIterator> (0);  	DirCacheIterator dcIter = tw.GetTree<DirCacheIterator> (2);  	DirCacheEntry currentEntry = dcIter.GetDirCacheEntry ();  	DirCacheEntry ce = new DirCacheEntry (tw.PathString);  	if (!f.IsModified (currentEntry' true)) {  		ce.SetLength (currentEntry.Length);  		ce.LastModified = currentEntry.LastModified;  		ce.FileMode = currentEntry.FileMode;  		ce.SetObjectId (currentEntry.GetObjectId ());  	}  	else {  		long sz = f.GetEntryLength ();  		ce.SetLength (sz);  		ce.LastModified = f.GetEntryLastModified ();  		ce.FileMode = f.EntryFileMode;  		var data = f.OpenEntryStream ();  		try {  			ce.SetObjectId (oi.Insert (Constants.OBJ_BLOB' sz' data));  		}  		finally {  			data.Close ();  		}  	}  	cb.Add (ce);  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The following statement contains a magic number: if (tw.IsSubtree)  	tw.EnterSubtree ();  else if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) {  	WorkingTreeIterator f = tw.GetTree<WorkingTreeIterator> (0);  	DirCacheIterator dcIter = tw.GetTree<DirCacheIterator> (2);  	DirCacheEntry currentEntry = dcIter.GetDirCacheEntry ();  	DirCacheEntry ce = new DirCacheEntry (tw.PathString);  	if (!f.IsModified (currentEntry' true)) {  		ce.SetLength (currentEntry.Length);  		ce.LastModified = currentEntry.LastModified;  		ce.FileMode = currentEntry.FileMode;  		ce.SetObjectId (currentEntry.GetObjectId ());  	}  	else {  		long sz = f.GetEntryLength ();  		ce.SetLength (sz);  		ce.LastModified = f.GetEntryLastModified ();  		ce.FileMode = f.EntryFileMode;  		var data = f.OpenEntryStream ();  		try {  			ce.SetObjectId (oi.Insert (Constants.OBJ_BLOB' sz' data));  		}  		finally {  			data.Close ();  		}  	}  	cb.Add (ce);  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The following statement contains a magic number: if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) {  	WorkingTreeIterator f = tw.GetTree<WorkingTreeIterator> (0);  	DirCacheIterator dcIter = tw.GetTree<DirCacheIterator> (2);  	DirCacheEntry currentEntry = dcIter.GetDirCacheEntry ();  	DirCacheEntry ce = new DirCacheEntry (tw.PathString);  	if (!f.IsModified (currentEntry' true)) {  		ce.SetLength (currentEntry.Length);  		ce.LastModified = currentEntry.LastModified;  		ce.FileMode = currentEntry.FileMode;  		ce.SetObjectId (currentEntry.GetObjectId ());  	}  	else {  		long sz = f.GetEntryLength ();  		ce.SetLength (sz);  		ce.LastModified = f.GetEntryLastModified ();  		ce.FileMode = f.EntryFileMode;  		var data = f.OpenEntryStream ();  		try {  			ce.SetObjectId (oi.Insert (Constants.OBJ_BLOB' sz' data));  		}  		finally {  			data.Close ();  		}  	}  	cb.Add (ce);  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,WriteWorkingDirectoryTree,The following statement contains a magic number: if (tw.GetFileMode (0) != NGit.FileMode.MISSING && (tw.GetFileMode (1) != NGit.FileMode.MISSING || tw.GetFileMode (2) != NGit.FileMode.MISSING)) {  	WorkingTreeIterator f = tw.GetTree<WorkingTreeIterator> (0);  	DirCacheIterator dcIter = tw.GetTree<DirCacheIterator> (2);  	DirCacheEntry currentEntry = dcIter.GetDirCacheEntry ();  	DirCacheEntry ce = new DirCacheEntry (tw.PathString);  	if (!f.IsModified (currentEntry' true)) {  		ce.SetLength (currentEntry.Length);  		ce.LastModified = currentEntry.LastModified;  		ce.FileMode = currentEntry.FileMode;  		ce.SetObjectId (currentEntry.GetObjectId ());  	}  	else {  		long sz = f.GetEntryLength ();  		ce.SetLength (sz);  		ce.LastModified = f.GetEntryLastModified ();  		ce.FileMode = f.EntryFileMode;  		var data = f.OpenEntryStream ();  		try {  			ce.SetObjectId (oi.Insert (Constants.OBJ_BLOB' sz' data));  		}  		finally {  			data.Close ();  		}  	}  	cb.Add (ce);  }  
Magic Number,MonoDevelop.VersionControl.Git,StashCollection,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\Stash.cs,Apply,The following statement contains a magic number: monitor.BeginTask ("Applying stash"' 100);  
Magic Number,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,MergeTrees,The following statement contains a magic number: try {  	// get the head commit  	Ref headRef = repo.GetRef (Constants.HEAD);  	if (headRef == null) {  		throw new NoHeadException (JGitText.Get ().commitOnRepoWithoutHEADCurrentlyNotSupported);  	}  	RevCommit headCommit = revWalk.ParseCommit (headRef.GetObjectId ());  	ResolveMerger merger = (ResolveMerger)((ThreeWayMerger)MergeStrategy.RESOLVE.NewMerger (repo));  	merger.SetWorkingTreeIterator (new FileTreeIterator (repo));  	merger.SetBase (srcBase);  	bool noProblems;  	IDictionary<string' MergeResult<Sequence>> lowLevelResults = null;  	IDictionary<string' ResolveMerger.MergeFailureReason> failingPaths = null;  	IList<string> modifiedFiles = null;  	ResolveMerger resolveMerger = merger;  	resolveMerger.SetCommitNames (new string[] {  		"BASE"'  		"HEAD"'  		sourceDisplayName  	});  	noProblems = merger.Merge (headCommit' srcCommit);  	lowLevelResults = resolveMerger.GetMergeResults ();  	modifiedFiles = resolveMerger.GetModifiedFiles ();  	failingPaths = resolveMerger.GetFailingPaths ();  	if (monitor != null)  		monitor.Update (50);  	if (noProblems) {  		if (modifiedFiles != null && modifiedFiles.Count == 0) {  			return new MergeCommandResult (headCommit' null' new ObjectId[] {  				headCommit.Id'  				srcCommit.Id  			}' MergeStatus.ALREADY_UP_TO_DATE' MergeStrategy.RESOLVE' null' null);  		}  		DirCacheCheckout dco = new DirCacheCheckout (repo' headCommit.Tree' repo.LockDirCache ()' merger.GetResultTreeId ());  		dco.SetFailOnConflict (true);  		dco.Checkout ();  		if (commitResult) {  			newHead = new NGit.Api.Git (repo).Commit ().SetMessage (srcCommit.GetFullMessage ()).SetAuthor (srcCommit.GetAuthorIdent ()).Call ();  			return new MergeCommandResult (newHead.Id' null' new ObjectId[] {  				headCommit.Id'  				srcCommit.Id  			}' MergeStatus.MERGED' MergeStrategy.RESOLVE' null' null);  		}  		else {  			return new MergeCommandResult (headCommit' null' new ObjectId[] {  				headCommit.Id'  				srcCommit.Id  			}' MergeStatus.MERGED' MergeStrategy.RESOLVE' null' null);  		}  	}  	else {  		if (failingPaths != null) {  			return new MergeCommandResult (null' merger.GetBaseCommit (0' 1)' new ObjectId[] {  				headCommit.Id'  				srcCommit.Id  			}' MergeStatus.FAILED' MergeStrategy.RESOLVE' lowLevelResults' failingPaths' null);  		}  		else {  			return new MergeCommandResult (null' merger.GetBaseCommit (0' 1)' new ObjectId[] {  				headCommit.Id'  				srcCommit.Id  			}' MergeStatus.CONFLICTING' MergeStrategy.RESOLVE' lowLevelResults' null);  		}  	}  }  finally {  	revWalk.Release ();  }  
Magic Number,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,MergeTrees,The following statement contains a magic number: if (monitor != null)  	monitor.Update (50);  
Magic Number,MonoDevelop.VersionControl.Git,GitUtil,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitUtil.cs,MergeTrees,The following statement contains a magic number: monitor.Update (50);  
Magic Number,MonoDevelop.VersionControl.Git,CredentialsDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\CredentialsDialog.cs,CredentialsDialog,The following statement contains a magic number: table.ColumnSpacing = 6;  
Magic Number,MonoDevelop.VersionControl.Git,CredentialsDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\CredentialsDialog.cs,CredentialsDialog,The following statement contains a magic number: foreach (CredentialItem c in credentials) {  	Label lab = new Label (c.GetPromptText () + ":");  	lab.Xalign = 0;  	table.Attach (lab' 0' 1' r' r + 1);  	Table.TableChild tc = (Table.TableChild)table [lab];  	tc.XOptions = AttachOptions.Shrink;  	Widget editor = null;  	if (c is CredentialItem.YesNoType) {  		CredentialItem.YesNoType cred = (CredentialItem.YesNoType)c;  		if (credentials.Count (i => i is CredentialItem.YesNoType) == 1) {  			singleYesNoCred = cred;  			buttonOk.Hide ();  			buttonYes.Show ();  			buttonNo.Show ();  			// Remove the last colon  			lab.Text = lab.Text.Substring (0' lab.Text.Length - 1);  		}  		else {  			CheckButton btn = new CheckButton ();  			editor = btn;  			btn.Toggled += delegate {  				cred.SetValue (btn.Active);  			};  		}  	}  	else if (c is CredentialItem.StringType || c is CredentialItem.CharArrayType) {  		CredentialItem cred = c;  		Entry e = new Entry ();  		editor = e;  		e.ActivatesDefault = true;  		if (cred.IsValueSecure ())  			e.Visibility = false;  		e.Changed += delegate {  			if (cred is CredentialItem.StringType)  				((CredentialItem.StringType)cred).SetValue (e.Text);  			else  				((CredentialItem.CharArrayType)cred).SetValue (e.Text.ToCharArray ());  		};  		if (c is CredentialItem.Username)  			e.Text = uri.GetUser () ?? "";  	}  	if (editor != null) {  		table.Attach (editor' 1' 2' r' r + 1);  		tc = (Table.TableChild)table [lab];  		tc.XOptions = AttachOptions.Fill;  		if (firstEditor == null)  			firstEditor = editor;  	}  	r++;  }  
Magic Number,MonoDevelop.VersionControl.Git,CredentialsDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\CredentialsDialog.cs,CredentialsDialog,The following statement contains a magic number: if (editor != null) {  	table.Attach (editor' 1' 2' r' r + 1);  	tc = (Table.TableChild)table [lab];  	tc.XOptions = AttachOptions.Fill;  	if (firstEditor == null)  		firstEditor = editor;  }  
Magic Number,MonoDevelop.VersionControl.Git,CredentialsDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\CredentialsDialog.cs,CredentialsDialog,The following statement contains a magic number: table.Attach (editor' 1' 2' r' r + 1);  
Magic Number,MonoDevelop.VersionControl.Git,GitCredentials,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitCredentials.cs,TryGetUsernamePassword,The following statement contains a magic number: if (items.Length == 2 && username != null && password != null) {  	passwordItem = password;  	var cred = PasswordService.GetWebUserNameAndPassword (actualUrl);  	if (cred != null) {  		username.SetValue (cred.Item1);  		password.SetValueNoCopy (cred.Item2.ToArray ());  		return true;  	}  }  else {  	passwordItem = null;  }  
Magic Number,MonoDevelop.VersionControl.Git,StashManagerDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\StashManagerDialog.cs,StashManagerDialog,The following statement contains a magic number: list.AppendColumn (GettextCatalog.GetString ("Comment")' new CellRendererText ()' "text"' 2);  
Magic Number,MonoDevelop.VersionControl.Git,GitSelectRevisionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitSelectRevisionDialog.cs,GitSelectRevisionDialog,The following statement contains a magic number: vbox.MinHeight = 400;  
Magic Number,MonoDevelop.VersionControl.Git,GitSelectRevisionDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitSelectRevisionDialog.cs,GitSelectRevisionDialog,The following statement contains a magic number: vbox.MinWidth = 600;  
Missing Default,MonoDevelop.VersionControl.Git,GitRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitRepository.cs,ResolveConflict,The following switch statement is missing a default case: switch (dres) {  case Gtk.ResponseType.Cancel:  	res = ConflictResult.Abort;  	break;  case Gtk.ResponseType.Close:  	res = ConflictResult.Skip;  	break;  case Gtk.ResponseType.Ok:  	res = ConflictResult.Continue;  	dlg.Save (file);  	break;  }  
Missing Default,MonoDevelop.VersionControl.Git,GitService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl.Git\MonoDevelop.VersionControl.Git\GitService.cs,GetMergeResultErrorDetail,The following switch statement is missing a default case: switch (f.Value) {  case NGit.Merge.ResolveMerger.MergeFailureReason.DIRTY_WORKTREE:  	msg += GettextCatalog.GetString ("The file '{0}' has unstaged changes"' f.Key);  	break;  case NGit.Merge.ResolveMerger.MergeFailureReason.DIRTY_INDEX:  	msg += GettextCatalog.GetString ("The file '{0}' has staged changes"' f.Key);  	break;  case NGit.Merge.ResolveMerger.MergeFailureReason.COULD_NOT_DELETE:  	msg += GettextCatalog.GetString ("The file '{0}' could not be deleted"' f.Key);  	break;  }  
