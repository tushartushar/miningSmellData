Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The method has 100 lines of code.
Long Method,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The method has 136 lines of code.
Long Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteNode,The method has 101 lines of code.
Complex Method,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetParentElementPath,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsNamespaceDeclaration,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetAttributeNameAtIndex,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsInsideAttributeValue,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetAttributeValueAtIndex,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetAttributeName,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,ConvertPath,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,GetSchemaObjectSelected,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,RunXslTransformCommand,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,SelectPath,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.XmlEditor.Completion,XmlSchemaCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Completion\XmlSchemaCompletionData.cs,GetChildElementCompletionData,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.XmlEditor.Completion,XmlSchemaCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Completion\XmlSchemaCompletionData.cs,FindElement,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.XmlEditor.Completion,InferredXmlCompletionProvider,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Completion\InferredXmlCompletionProvider.cs,Populate,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,Push,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Xml.StateEngine,XmlAttributeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlAttributeState.cs,PushChar,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Xml.StateEngine,XmlClosingTagState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlClosingTagState.cs,PushChar,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,PushChar,Cyclomatic complexity of the method is 27
Complex Method,MonoDevelop.Xml.StateEngine,XmlNameState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlNameState.cs,PushChar,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Xml.StateEngine,XmlTagState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlTagState.cs,PushChar,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,Cyclomatic complexity of the method is 38
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteNode,Cyclomatic complexity of the method is 36
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteDocType,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteStartElement,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,CloseStartElementCore,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteEndElementCore,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteStartAttribute,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteEndAttribute,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteQualifiedName,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,ShiftStateTopLevel,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,ShiftStateContent,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteEscapedBuffer,Cyclomatic complexity of the method is 28
Complex Method,MonoDevelop.Xml.Formatting,XmlNamespaceManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,AddNamespace,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Xml.Formatting,XmlNamespaceManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,GetNamespacesInScopeImpl,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Xml.Formatting,CStringsConverter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicy.cs,EscapeString,Cyclomatic complexity of the method is 34
Complex Method,MonoDevelop.Xml.Formatting,CStringsConverter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicy.cs,UnescapeString,Cyclomatic complexity of the method is 36
Long Parameter List,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetAttributeName,The method has 5 parameters.
Long Parameter List,MonoDevelop.XmlEditor,XmlEditorService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlEditorService.cs,AddTask,The method has 5 parameters.
Long Parameter List,MonoDevelop.XmlEditor,XmlEditorService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlEditorService.cs,ValidateXml,The method has 5 parameters.
Long Parameter List,MonoDevelop.XmlEditor,XmlEditorService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlEditorService.cs,ValidateSchema,The method has 5 parameters.
Long Parameter List,MonoDevelop.XmlEditor.Gui,XmlSchemasPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\XmlSchemasPanelWidget.cs,XmlSchemasPanelWidget,The method has 17 parameters.
Long Parameter List,MonoDevelop.XmlEditor.Completion,XmlTagCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Completion\XmlTagCompletionData.cs,InsertCompletionText,The method has 5 parameters.
Long Parameter List,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,XmlFreeState,The method has 6 parameters.
Long Parameter List,MonoDevelop.Xml.Formatting,XmlFormatter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatter.cs,FormatText,The method has 5 parameters.
Long Statement,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsAttributeValueChar,The length of the statement  "	if (Char.IsLetterOrDigit (ch) || (ch == ':') || (ch == '/') || (ch == '_') || (ch == '.') || (ch == '-') || (ch == '#')) { " is 122.
Long Statement,MonoDevelop.XmlEditor,XmlSchemaManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlSchemaManager.cs,AddUserSchema,The length of the statement  "		LoggingService.LogWarning ("XmlSchemaManager cannot register two schemas with the same namespace '{0}'."' schemaData.NamespaceUri); " is 131.
Long Statement,MonoDevelop.XmlEditor,XmlSchemaManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlSchemaManager.cs,LoadSchema,The length of the statement  "		LoggingService.LogWarning ("XmlSchemaManager is unable to read schema '{0}'' because of the following error: {1}"' fileName' ex.Message); " is 137.
Long Statement,MonoDevelop.XmlEditor,XmlSchemaManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlSchemaManager.cs,ReadLocalSchema,The length of the statement  "		LoggingService.LogWarning ("XmlSchemaManager is unable to read schema '{0}'' because of the following error: {1}"' uri' ex.Message); " is 132.
Long Statement,MonoDevelop.XmlEditor,XmlEditorService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlEditorService.cs,GenerateFileName,The length of the statement  "	return GenerateFileName (Path.Combine (Path.GetDirectoryName (sourceName)' Path.GetFileNameWithoutExtension (sourceName)) + extensionFormat); " is 141.
Long Statement,MonoDevelop.XmlEditor,XmlEditorService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlEditorService.cs,ValidateXml,The length of the statement  "	settings.ValidationFlags = XmlSchemaValidationFlags.ProcessIdentityConstraints | XmlSchemaValidationFlags.ProcessInlineSchema | XmlSchemaValidationFlags.ProcessSchemaLocation | XmlSchemaValidationFlags.ReportValidationWarnings; " is 227.
Long Statement,MonoDevelop.XmlEditor,XmlEditorService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlEditorService.cs,ValidateXml,The length of the statement  "			AddTask (fileName' args.Exception.Message' args.Exception.LinePosition' args.Exception.LineNumber' TaskSeverity.Warning); " is 121.
Long Statement,MonoDevelop.XmlEditor,XmlEditorService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlEditorService.cs,ValidateSchema,The length of the statement  "			AddTask (fileName' args.Message' args.Exception.LinePosition' args.Exception.LineNumber' (args.Severity == XmlSeverityType.Warning) ? TaskSeverity.Warning : TaskSeverity.Error); " is 177.
Long Statement,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,Initialize,The length of the statement  "			LoggingService.LogWarning ("XmlTextEditorExtension could not get SyntaxMode for mimetype '" + ApplicationXmlMimeType + "'."); " is 125.
Long Statement,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,GoToSchemaDefinitionCommand,The length of the statement  "			IdeApp.Workbench.OpenDocument (schemaFileName' Math.Max (1' schemaObject.LineNumber)' Math.Max (1' schemaObject.LinePosition)); " is 127.
Long Statement,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,RunXslTransformCommand,The length of the statement  "			System.Xml.Xsl.XslCompiledTransform xslt = XmlEditorService.ValidateStylesheet (monitor' xsltContent' stylesheetFileName); " is 122.
Long Statement,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,GetFileContent,The length of the statement  "	MonoDevelop.Projects.Text.IEditableTextFile tf = MonoDevelop.Ide.TextFileProvider.Instance.GetEditableTextFile (fileName); " is 122.
Long Statement,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,QueueInference,The length of the statement  "	if (inferredCompletionData == null || (doc.LastWriteTimeUtc - inferredCompletionData.TimeStampUtc).TotalSeconds >= 5 && doc.Errors.Count <= inferredCompletionData.ErrorCount) { " is 176.
Long Statement,MonoDevelop.XmlEditor.Gui,XmlSchemasPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\XmlSchemasPanelWidget.cs,GetChangedXmlFileAssociations,The length of the statement  "			yield return new XmlFileAssociation (ext' ((string)defaultAssociationsStore.GetValue (iter' COL_NS)) ?? ""' ((string)defaultAssociationsStore.GetValue (iter' COL_PREFIX)) ?? ""); " is 178.
Long Statement,MonoDevelop.XmlEditor.Gui,XmlSchemasPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\XmlSchemasPanelWidget.cs,addFileAssociation,The length of the statement  "	defaultAssociationsView.SetCursor (defaultAssociationsStore.GetPath (newIter)' defaultAssociationsView.GetColumn (COL_EXT)' true); " is 130.
Long Statement,MonoDevelop.XmlEditor.Gui,XmlSchemasPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\XmlSchemasPanelWidget.cs,removeFileAssocation,The length of the statement  "		throw new InvalidOperationException ("Should not be able to activate removeFileAssocation button while no row is selected."); " is 125.
Long Statement,MonoDevelop.XmlEditor.Gui,XmlSchemasPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\XmlSchemasPanelWidget.cs,removeRegisteredSchema,The length of the statement  "		throw new InvalidOperationException ("Should not be able to activate removeRegisteredSchema button while no row is selected."); " is 127.
Long Statement,MonoDevelop.XmlEditor.Gui,XmlSchemasPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\XmlSchemasPanelWidget.cs,addRegisteredSchema,The length of the statement  "		bool replace = MessageService.Confirm (GettextCatalog.GetString ("A schema is already registered with the namespace '{0}'. Would you like to replace it?"' schema.NamespaceUri)' new AlertButton (GettextCatalog.GetString ("Replace"))); " is 233.
Long Statement,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The length of the statement  "	LoggingService.LogDebug ("Attempting completion for state '{0}'x{1}' previousChar='{2}''" + " currentChar='{3}'' forced='{4}'"' tracker.Engine.CurrentState' tracker.Engine.CurrentStateLength' previousChar' currentChar' forced); " is 227.
Long Statement,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The length of the statement  "	if (currentChar == '&' && (tracker.Engine.CurrentState is XmlFreeState || tracker.Engine.CurrentState is XmlAttributeValueState)) { " is 131.
Long Statement,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The length of the statement  "	if ((forced && Tracker.Engine.Nodes.Peek () is IAttributedXObject && !tracker.Engine.Nodes.Peek ().IsEnded) || (Tracker.Engine.CurrentState is XmlNameState && Tracker.Engine.CurrentState.Parent is XmlAttributeState && Tracker.Engine.CurrentStateLength == 1)) { " is 260.
Long Statement,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The length of the statement  "		IAttributedXObject attributedOb = (Tracker.Engine.Nodes.Peek () as IAttributedXObject) ?? Tracker.Engine.Nodes.Peek (1) as IAttributedXObject; " is 142.
Long Statement,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The length of the statement  "	&& ((Tracker.Engine.CurrentStateLength == 1 && (currentChar == '\'' || currentChar == '"')) //or trigger on first letter of value' if unforced " is 142.
Long Statement,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,Push,The length of the statement  "		throw new InvalidOperationException ("Too many state changes for char '" + c + "'. Current state is " + currentState.ToString () + "."); " is 136.
Long Statement,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The length of the statement  "			builder.AppendFormat ("[{0}@{1}:{2}' {3}]\n"' err.ErrorType' err.Region.BeginLine' err.Region.BeginColumn' err.Message); " is 120.
Long Statement,MonoDevelop.Xml.StateEngine,XmlClosingTagState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlClosingTagState.cs,PushChar,The length of the statement  "		Debug.Assert (context.CurrentStateLength == 1' "IncompleteNode must not be an XClosingTag when CurrentStateLength is 1"); " is 121.
Long Statement,MonoDevelop.Xml.StateEngine,XmlClosingTagState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlClosingTagState.cs,PushChar,The length of the statement  "					context.LogError (string.Format ("Unclosed tag '{0}' at line {1}' column {2}."' el.Name.FullName' el.Region.BeginLine' el.Region.BeginColumn)' ct.Region); " is 154.
Long Statement,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,PushChar,The length of the statement  "			context.LogError ("Incomplete tag opening; encountered unexpected '<'."' new DomRegion (context.LocationMinus (LengthFromOpenBracket (context) + 1)' context.LocationMinus (1))); " is 177.
Long Statement,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,PushChar,The length of the statement  "	context.LogError ("Incomplete tag opening; encountered unexpected character '" + c + "'."' new DomRegion (context.LocationMinus (LengthFromOpenBracket (context))' context.Location)); " is 182.
Long Statement,MonoDevelop.Xml.StateEngine,XmlNameState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlNameState.cs,PushChar,The length of the statement  "	Debug.Assert (context.CurrentStateLength > 1 || char.IsLetter (c) || c == '_'' "First character pushed to a XmlTagNameState must be a letter."); " is 144.
Long Statement,MonoDevelop.Xml.StateEngine,XmlNameState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlNameState.cs,PushChar,The length of the statement  "	Debug.Assert (context.CurrentStateLength > 1 || context.KeywordBuilder.Length == 0' "Keyword builder must be empty when state begins."); " is 136.
Long Statement,MonoDevelop.Xml.StateEngine,XDocType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XDom.cs,ToString,The length of the statement  "	return string.Format ("[DocType: RootElement='{0}'' PublicFpi='{1}''  InternalDeclarationRegion='{2}'' Uri='{3}']"' RootElement.FullName' PublicFpi' InternalDeclarationRegion' Uri); " is 181.
Long Statement,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IndexOfInvalid,The length of the statement  "			if (!allowSurrogate || i + 1 == s.Length || s [i] < '\uD800' || s [i] >= '\uDC00' || s [i + 1] < '\uDC00' || s [i + 1] >= '\uE000') " is 131.
Long Statement,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IndexOfInvalid,The length of the statement  "			if (!allowSurrogate || i + 1 == end || s [i] < '\uD800' || s [i] >= '\uDC00' || s [i + 1] < '\uDC00' || s [i + 1] >= '\uE000') " is 126.
Long Statement,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsPubidChar,The length of the statement  "	return (IsWhitespace (ch) && ch != '\t') | ('a' <= ch && ch <= 'z') | ('A' <= ch && ch <= 'Z') | ('0' <= ch && ch <= '9') | "-'()+'./:=?;!*#@$_%".IndexOf ((char)ch) >= 0; " is 170.
Long Statement,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteNode,The length of the statement  "		WriteStartElement (elem.NamespaceURI == null || elem.NamespaceURI.Length == 0 ? String.Empty : elem.Prefix' elem.LocalName' elem.NamespaceURI); " is 143.
Long Statement,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteStartElement,The length of the statement  "	if (namespaces && prefix != null && prefix.Length == 3 && namespaceUri != XmlNamespace && (prefix [0] == 'x' || prefix [0] == 'X') && (prefix [1] == 'm' || prefix [1] == 'M') && (prefix [2] == 'l' || prefix [2] == 'L')) " is 219.
Long Statement,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteEndAttribute,The length of the statement  "					throw new XmlException (String.Format ("Cannot redefine the namespace for prefix '{0}' used at current element"' preserved_name)); " is 130.
Long Statement,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteCharacterEntity,The length of the statement  "		throw ArgumentError (String.Format ("Invalid surrogate pair was found. Low: &#x{0:X}; High: &#x{0:X};"' (int)ch' (int)high)); " is 125.
Long Statement,MonoDevelop.Xml.Formatting,XmlNamespaceManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,IsValidDeclaration,The length of the statement  "		message = String.Format ("Prefix \"xml\" can only be bound to the fixed namespace URI \"{0}\". \"{1}\" is invalid."' XmlnsXml' uri); " is 132.
Long Statement,MonoDevelop.Xml.Formatting,XmlFormattingSettings,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicy.cs,Equals,The length of the statement  "	return NewLineChars == other.NewLineChars && OmitXmlDeclaration == other.OmitXmlDeclaration && IndentContent == other.IndentContent && ContentIndentString == other.ContentIndentString && AttributesInNewLine == other.AttributesInNewLine && MaxAttributesPerLine == other.MaxAttributesPerLine && AttributesIndentString == other.AttributesIndentString && AlignAttributes == other.AlignAttributes && WrapAttributes == other.WrapAttributes && AlignAttributeValues == other.AlignAttributeValues && SpacesBeforeAssignment == other.SpacesBeforeAssignment && SpacesAfterAssignment == other.SpacesAfterAssignment && QuoteChar == other.QuoteChar && EmptyLinesBeforeStart == other.EmptyLinesBeforeStart && EmptyLinesAfterStart == other.EmptyLinesAfterStart && EmptyLinesBeforeEnd == other.EmptyLinesBeforeEnd && EmptyLinesAfterEnd == other.EmptyLinesAfterEnd; " is 846.
Complex Conditional,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsAttributeValueChar,The conditional expression  "Char.IsLetterOrDigit (ch) || (ch == ':') || (ch == '/') || (ch == '_') || (ch == '.') || (ch == '-') || (ch == '#')"  is complex.
Complex Conditional,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsXmlNameChar,The conditional expression  "Char.IsLetterOrDigit (ch) || (ch == ':') || (ch == '/') || (ch == '_') || (ch == '.') || (ch == '-')"  is complex.
Complex Conditional,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,QueueInference,The conditional expression  "defaultSchemaCompletionData != null || doc == null || doc.XDocument == null || inferenceQueued"  is complex.
Complex Conditional,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The conditional expression  "(forced && Tracker.Engine.Nodes.Peek () is IAttributedXObject && !tracker.Engine.Nodes.Peek ().IsEnded) || (Tracker.Engine.CurrentState is XmlNameState && Tracker.Engine.CurrentState.Parent is XmlAttributeState && Tracker.Engine.CurrentStateLength == 1)"  is complex.
Complex Conditional,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The conditional expression  "attributedOb.Name.IsValid && (forced || (char.IsWhiteSpace (previousChar) && char.IsLetter (currentChar)))"  is complex.
Complex Conditional,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The conditional expression  "(Tracker.Engine.CurrentState is XmlAttributeValueState) //trigger on the opening quote  && ((Tracker.Engine.CurrentStateLength == 1 && (currentChar == '\'' || currentChar == '"')) //or trigger on first letter of value' if unforced  || (!forced && Tracker.Engine.CurrentStateLength == 1))"  is complex.
Complex Conditional,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The conditional expression  "(compareChar == '"' || compareChar == '\'') && (next == compareChar || char.IsWhiteSpace (next))"  is complex.
Complex Conditional,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,ClosingTagCompletion,The conditional expression  "el != null && el.Region.End >= currentLocation && !el.IsClosed && el.IsNamed"  is complex.
Complex Conditional,MonoDevelop.Xml.StateEngine,XmlAttributeValueState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlAttributeValueState.cs,PushChar,The conditional expression  "(c == '"' && maskedTag == DOUBLEQUOTE) || c == '\'' && maskedTag == SINGLEQUOTE"  is complex.
Complex Conditional,MonoDevelop.Xml.StateEngine,XmlNameState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlNameState.cs,PushChar,The conditional expression  "XmlChar.IsWhitespace (c) || c == '<' || c == '>' || c == '/' || c == '='"  is complex.
Complex Conditional,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The conditional expression  "(ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')"  is complex.
Complex Conditional,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IndexOfInvalid,The conditional expression  "!allowSurrogate || i + 1 == s.Length || s [i] < '\uD800' || s [i] >= '\uDC00' || s [i + 1] < '\uDC00' || s [i + 1] >= '\uE000'"  is complex.
Complex Conditional,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IndexOfInvalid,The conditional expression  "!allowSurrogate || i + 1 == end || s [i] < '\uD800' || s [i] >= '\uDC00' || s [i + 1] < '\uDC00' || s [i + 1] >= '\uE000'"  is complex.
Complex Conditional,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The conditional expression  "(ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')"  is complex.
Complex Conditional,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsValidIANAEncoding,The conditional expression  "(c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')"  is complex.
Complex Conditional,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsValidIANAEncoding,The conditional expression  "(c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9') && c != '.' && c != '_' && c != '-'"  is complex.
Complex Conditional,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteStartElement,The conditional expression  "namespaces && prefix != null && prefix.Length == 3 && namespaceUri != XmlNamespace && (prefix [0] == 'x' || prefix [0] == 'X') && (prefix [1] == 'm' || prefix [1] == 'M') && (prefix [2] == 'l' || prefix [2] == 'L')"  is complex.
Complex Conditional,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteCharacterEntity,The conditional expression  "surrogate && ('\uD800' > high || high > '\uDC00' || '\uDC00' > ch || ch > '\uDFFF')"  is complex.
Empty Catch Block,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetParentElementPath,The method has an empty catch block.
Empty Catch Block,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetParentElementPath,The method has an empty catch block.
Magic Number,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsInsideAttributeValue,The following statement contains a magic number: if (foundEqualsSign) {  	// Odd number of quotes?  	if ((lastQuoteChar == '\"') && ((doubleQuotesCount % 2) > 0)) {  		isInside = true;  	}  	else if ((lastQuoteChar == '\'') && ((singleQuotesCount % 2) > 0)) {  		isInside = true;  	}  }  
Magic Number,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsInsideAttributeValue,The following statement contains a magic number: if (foundEqualsSign) {  	// Odd number of quotes?  	if ((lastQuoteChar == '\"') && ((doubleQuotesCount % 2) > 0)) {  		isInside = true;  	}  	else if ((lastQuoteChar == '\'') && ((singleQuotesCount % 2) > 0)) {  		isInside = true;  	}  }  
Magic Number,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsInsideAttributeValue,The following statement contains a magic number: if ((lastQuoteChar == '\"') && ((doubleQuotesCount % 2) > 0)) {  	isInside = true;  }  else if ((lastQuoteChar == '\'') && ((singleQuotesCount % 2) > 0)) {  	isInside = true;  }  
Magic Number,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsInsideAttributeValue,The following statement contains a magic number: if ((lastQuoteChar == '\"') && ((doubleQuotesCount % 2) > 0)) {  	isInside = true;  }  else if ((lastQuoteChar == '\'') && ((singleQuotesCount % 2) > 0)) {  	isInside = true;  }  
Magic Number,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,IsInsideAttributeValue,The following statement contains a magic number: if ((lastQuoteChar == '\'') && ((singleQuotesCount % 2) > 0)) {  	isInside = true;  }  
Magic Number,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetElementNamespace,The following statement contains a magic number: if (match.Success) {  	namespaceURI.Namespace = match.Groups [2].Value;  	string xmlns = match.Groups [1].Value.Trim ();  	int prefixIndex = xmlns.IndexOf (':');  	if (prefixIndex > 0) {  		namespaceURI.Prefix = xmlns.Substring (prefixIndex + 1);  	}  }  
Magic Number,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetElementNamespace,The following statement contains a magic number: namespaceURI.Namespace = match.Groups [2].Value;  
Magic Number,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,QueueInference,The following statement contains a magic number: if (inferredCompletionData == null || (doc.LastWriteTimeUtc - inferredCompletionData.TimeStampUtc).TotalSeconds >= 5 && doc.Errors.Count <= inferredCompletionData.ErrorCount) {  	inferenceQueued = true;  	System.Threading.ThreadPool.QueueUserWorkItem (delegate {  		InferredXmlCompletionProvider newData = new InferredXmlCompletionProvider ();  		newData.Populate (doc.XDocument);  		newData.TimeStampUtc = DateTime.UtcNow;  		newData.ErrorCount = doc.Errors.Count;  		this.inferenceQueued = false;  		this.inferredCompletionData = newData;  	});  }  
Magic Number,MonoDevelop.XmlEditor,XmlElementPath,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlElementPath.cs,FindNonMatchingParentElement,The following statement contains a magic number: if (elements.Count > 1) {  	// Start the check from the the last but one item.  	for (int i = elements.Count - 2; i >= 0; --i) {  		QualifiedName name = elements [i];  		if (name.Namespace != namespaceUri) {  			index = i;  			break;  		}  	}  }  
Magic Number,MonoDevelop.XmlEditor,XmlElementPath,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlElementPath.cs,FindNonMatchingParentElement,The following statement contains a magic number: for (int i = elements.Count - 2; i >= 0; --i) {  	QualifiedName name = elements [i];  	if (name.Namespace != namespaceUri) {  		index = i;  		break;  	}  }  
Magic Number,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The following statement contains a magic number: if ((Tracker.Engine.CurrentState is XmlAttributeValueState) //trigger on the opening quote  && ((Tracker.Engine.CurrentStateLength == 1 && (currentChar == '\'' || currentChar == '"')) //or trigger on first letter of value' if unforced  || (!forced && Tracker.Engine.CurrentStateLength == 1))) {  	var att = (XAttribute)Tracker.Engine.Nodes.Peek ();  	if (att.IsNamed) {  		var attributedOb = Tracker.Engine.Nodes.Peek (1) as IAttributedXObject;  		if (attributedOb == null)  			return null;  		char next = ' ';  		if (completionContext.TriggerOffset < buf.Length)  			next = buf.GetCharAt (completionContext.TriggerOffset);  		char compareChar = (Tracker.Engine.CurrentStateLength == 1) ? currentChar : previousChar;  		if ((compareChar == '"' || compareChar == '\'') && (next == compareChar || char.IsWhiteSpace (next))) {  			//if triggered by first letter of value' grab that letter  			if (Tracker.Engine.CurrentStateLength == 2)  				triggerWordLength = 1;  			return GetAttributeValueCompletions (attributedOb' att);  		}  	}  }  
Magic Number,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The following statement contains a magic number: if (att.IsNamed) {  	var attributedOb = Tracker.Engine.Nodes.Peek (1) as IAttributedXObject;  	if (attributedOb == null)  		return null;  	char next = ' ';  	if (completionContext.TriggerOffset < buf.Length)  		next = buf.GetCharAt (completionContext.TriggerOffset);  	char compareChar = (Tracker.Engine.CurrentStateLength == 1) ? currentChar : previousChar;  	if ((compareChar == '"' || compareChar == '\'') && (next == compareChar || char.IsWhiteSpace (next))) {  		//if triggered by first letter of value' grab that letter  		if (Tracker.Engine.CurrentStateLength == 2)  			triggerWordLength = 1;  		return GetAttributeValueCompletions (attributedOb' att);  	}  }  
Magic Number,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The following statement contains a magic number: if ((compareChar == '"' || compareChar == '\'') && (next == compareChar || char.IsWhiteSpace (next))) {  	//if triggered by first letter of value' grab that letter  	if (Tracker.Engine.CurrentStateLength == 2)  		triggerWordLength = 1;  	return GetAttributeValueCompletions (attributedOb' att);  }  
Magic Number,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,HandleCodeCompletion,The following statement contains a magic number: if (Tracker.Engine.CurrentStateLength == 2)  	triggerWordLength = 1;  
Magic Number,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,GetAttributeIndentDepth,The following statement contains a magic number: if (node is XAttribute)  	return node.IsEnded ? 1 : 2;  
Magic Number,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,GetAttributeIndentDepth,The following statement contains a magic number: return node.IsEnded ? 1 : 2;  
Magic Number,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,CursorPositionChanged,The following statement contains a magic number: GLib.Timeout.Add (500' delegate {  	pathUpdateQueued = false;  	UpdatePath ();  	return false;  });  
Magic Number,MonoDevelop.XmlEditor.Gui,BaseXmlEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor.Gui\BaseXmlEditorExtension.cs,RefreshOutline,The following statement contains a magic number: GLib.Timeout.Add (3000' refillOutlineStoreIdleHandler);  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,Push,The following statement contains a magic number: try {  	//track line' column  	if (c == '\n') {  		previousLineEnd = new TextLocation (location.Line' location.Column + 1);  		location = new TextLocation (location.Line + 1' 1);  	}  	else {  		location = new TextLocation (location.Line' location.Column + 1);  	}  	position++;  	for (int loopLimit = 0; loopLimit < 10; loopLimit++) {  		currentStateLength++;  		string rollback = null;  		if (currentState == null)  			return;  		State nextState = currentState.PushChar (c' this' ref rollback);  		// no state change  		if (nextState == currentState || nextState == null)  			return;  		// state changed; reset stuff  		previousState = currentState;  		currentState = nextState;  		stateTag = 0;  		currentStateLength = 0;  		if (keywordBuilder.Length < 50)  			keywordBuilder.Length = 0;  		else  			keywordBuilder = new StringBuilder ();  		// only loop if the same char should be run through the new state  		if (rollback == null)  			return;  		//"complex" rollbacks require actually skipping backwards.  		//Note the previous state is invalid for this operation.  		else if (rollback.Length > 0) {  			position -= (rollback.Length + 1);  			foreach (char rollChar in rollback)  				Push (rollChar);  			position++;  		}  	}  	throw new InvalidOperationException ("Too many state changes for char '" + c + "'. Current state is " + currentState.ToString () + ".");  }  catch (Exception ex) {  	//attach parser state to exceptions  	throw new Exception (ToString ()' ex);  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,Push,The following statement contains a magic number: try {  	//track line' column  	if (c == '\n') {  		previousLineEnd = new TextLocation (location.Line' location.Column + 1);  		location = new TextLocation (location.Line + 1' 1);  	}  	else {  		location = new TextLocation (location.Line' location.Column + 1);  	}  	position++;  	for (int loopLimit = 0; loopLimit < 10; loopLimit++) {  		currentStateLength++;  		string rollback = null;  		if (currentState == null)  			return;  		State nextState = currentState.PushChar (c' this' ref rollback);  		// no state change  		if (nextState == currentState || nextState == null)  			return;  		// state changed; reset stuff  		previousState = currentState;  		currentState = nextState;  		stateTag = 0;  		currentStateLength = 0;  		if (keywordBuilder.Length < 50)  			keywordBuilder.Length = 0;  		else  			keywordBuilder = new StringBuilder ();  		// only loop if the same char should be run through the new state  		if (rollback == null)  			return;  		//"complex" rollbacks require actually skipping backwards.  		//Note the previous state is invalid for this operation.  		else if (rollback.Length > 0) {  			position -= (rollback.Length + 1);  			foreach (char rollChar in rollback)  				Push (rollChar);  			position++;  		}  	}  	throw new InvalidOperationException ("Too many state changes for char '" + c + "'. Current state is " + currentState.ToString () + ".");  }  catch (Exception ex) {  	//attach parser state to exceptions  	throw new Exception (ToString ()' ex);  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,Push,The following statement contains a magic number: for (int loopLimit = 0; loopLimit < 10; loopLimit++) {  	currentStateLength++;  	string rollback = null;  	if (currentState == null)  		return;  	State nextState = currentState.PushChar (c' this' ref rollback);  	// no state change  	if (nextState == currentState || nextState == null)  		return;  	// state changed; reset stuff  	previousState = currentState;  	currentState = nextState;  	stateTag = 0;  	currentStateLength = 0;  	if (keywordBuilder.Length < 50)  		keywordBuilder.Length = 0;  	else  		keywordBuilder = new StringBuilder ();  	// only loop if the same char should be run through the new state  	if (rollback == null)  		return;  	//"complex" rollbacks require actually skipping backwards.  	//Note the previous state is invalid for this operation.  	else if (rollback.Length > 0) {  		position -= (rollback.Length + 1);  		foreach (char rollChar in rollback)  			Push (rollChar);  		position++;  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,Push,The following statement contains a magic number: for (int loopLimit = 0; loopLimit < 10; loopLimit++) {  	currentStateLength++;  	string rollback = null;  	if (currentState == null)  		return;  	State nextState = currentState.PushChar (c' this' ref rollback);  	// no state change  	if (nextState == currentState || nextState == null)  		return;  	// state changed; reset stuff  	previousState = currentState;  	currentState = nextState;  	stateTag = 0;  	currentStateLength = 0;  	if (keywordBuilder.Length < 50)  		keywordBuilder.Length = 0;  	else  		keywordBuilder = new StringBuilder ();  	// only loop if the same char should be run through the new state  	if (rollback == null)  		return;  	//"complex" rollbacks require actually skipping backwards.  	//Note the previous state is invalid for this operation.  	else if (rollback.Length > 0) {  		position -= (rollback.Length + 1);  		foreach (char rollChar in rollback)  			Push (rollChar);  		position++;  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,Push,The following statement contains a magic number: if (keywordBuilder.Length < 50)  	keywordBuilder.Length = 0;  else  	keywordBuilder = new StringBuilder ();  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: builder.Append (' '' 2);  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: foreach (XObject ob in nodes) {  	rootOb = ob;  	builder.Append (' '' 4);  	builder.Append (ob.ToString ());  	builder.AppendLine ();  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: builder.Append (' '' 4);  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: builder.Append (' '' 2);  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: while (s != null) {  	builder.Append (' '' 4);  	builder.Append (s.ToString ());  	builder.AppendLine ();  	s = s.Parent;  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: builder.Append (' '' 4);  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: if (buildTree && rootOb != null) {  	builder.Append (' '' 2);  	builder.AppendLine ("Tree=");  	rootOb.BuildTreeString (builder' 3);  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: if (buildTree && rootOb != null) {  	builder.Append (' '' 2);  	builder.AppendLine ("Tree=");  	rootOb.BuildTreeString (builder' 3);  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: builder.Append (' '' 2);  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: rootOb.BuildTreeString (builder' 3);  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: if (buildTree && errors.Count > 0) {  	builder.Append (' '' 2);  	builder.AppendLine ("Errors=");  	foreach (Error err in errors) {  		builder.Append (' '' 4);  		builder.AppendFormat ("[{0}@{1}:{2}' {3}]\n"' err.ErrorType' err.Region.BeginLine' err.Region.BeginColumn' err.Message);  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: if (buildTree && errors.Count > 0) {  	builder.Append (' '' 2);  	builder.AppendLine ("Errors=");  	foreach (Error err in errors) {  		builder.Append (' '' 4);  		builder.AppendFormat ("[{0}@{1}:{2}' {3}]\n"' err.ErrorType' err.Region.BeginLine' err.Region.BeginColumn' err.Message);  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: builder.Append (' '' 2);  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: foreach (Error err in errors) {  	builder.Append (' '' 4);  	builder.AppendFormat ("[{0}@{1}:{2}' {3}]\n"' err.ErrorType' err.Region.BeginLine' err.Region.BeginColumn' err.Message);  }  
Magic Number,MonoDevelop.Xml.StateEngine,Parser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\Parser.cs,ToString,The following statement contains a magic number: builder.Append (' '' 4);  
Magic Number,MonoDevelop.Xml.StateEngine,XmlClosingTagState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlClosingTagState.cs,PushChar,The following statement contains a magic number: if (ct == null) {  	Debug.Assert (context.CurrentStateLength == 1' "IncompleteNode must not be an XClosingTag when CurrentStateLength is 1");  	Debug.Assert (context.Nodes.Peek () is XElement);  	ct = new XClosingTag (context.LocationMinus (3));  	//3 = </ and the current char  	context.Nodes.Push (ct);  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlClosingTagState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlClosingTagState.cs,PushChar,The following statement contains a magic number: ct = new XClosingTag (context.LocationMinus (3));  
Magic Number,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,LengthFromOpenBracket,The following statement contains a magic number: switch (context.StateTag) {  case BRACKET:  	return 1;  case BRACKET_EXCLAM:  	return 2;  case COMMENT:  	return 3;  case CDATA:  case DOCTYPE:  	return 3 + context.KeywordBuilder.Length;  default:  	return 1;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,LengthFromOpenBracket,The following statement contains a magic number: switch (context.StateTag) {  case BRACKET:  	return 1;  case BRACKET_EXCLAM:  	return 2;  case COMMENT:  	return 3;  case CDATA:  case DOCTYPE:  	return 3 + context.KeywordBuilder.Length;  default:  	return 1;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,LengthFromOpenBracket,The following statement contains a magic number: switch (context.StateTag) {  case BRACKET:  	return 1;  case BRACKET_EXCLAM:  	return 2;  case COMMENT:  	return 3;  case CDATA:  case DOCTYPE:  	return 3 + context.KeywordBuilder.Length;  default:  	return 1;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,LengthFromOpenBracket,The following statement contains a magic number: return 2;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,LengthFromOpenBracket,The following statement contains a magic number: return 3;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,LengthFromOpenBracket,The following statement contains a magic number: return 3 + context.KeywordBuilder.Length;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlTagState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlTagState.cs,PushChar,The following statement contains a magic number: if (element == null || element.IsComplete) {  	element = new XElement (context.LocationMinus (2));  	// 2 == < + current char  	context.Nodes.Push (element);  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlTagState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlTagState.cs,PushChar,The following statement contains a magic number: element = new XElement (context.LocationMinus (2));  
Magic Number,MonoDevelop.Xml.StateEngine,XObject,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XDom.cs,BuildTreeString,The following statement contains a magic number: builder.Append (' '' indentLevel * 2);  
Magic Number,MonoDevelop.Xml.StateEngine,XElement,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XDom.cs,BuildTreeString,The following statement contains a magic number: builder.Append (' '' indentLevel * 2);  
Magic Number,MonoDevelop.Xml.StateEngine,XElement,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XDom.cs,BuildTreeString,The following statement contains a magic number: builder.Append (' '' indentLevel * 2);  
Magic Number,MonoDevelop.Xml.StateEngine,XElement,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XDom.cs,BuildTreeString,The following statement contains a magic number: builder.Append (' '' indentLevel * 2);  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (!doc.RootElement.IsValid) {  	if (XmlChar.IsWhitespace (c))  		return null;  	else if (XmlChar.IsFirstNameChar (c)) {  		rollback = "";  		return nameState;  	}  }  else if (doc.PublicFpi == null) {  	if (context.StateTag == 0) {  		if (c == 's' || c == 'S') {  			context.StateTag = 1;  			return null;  		}  		else if (c == 'p' || c == 'P') {  			context.StateTag = -1;  			return null;  		}  		if (XmlChar.IsWhitespace (c)) {  			return null;  		}  	}  	else if (Math.Abs (context.StateTag) < 6) {  		if (context.StateTag > 0) {  			if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  				context.StateTag++;  				if (context.StateTag == 6) {  					context.StateTag = 0;  					doc.PublicFpi = "";  				}  				return null;  			}  		}  		else {  			int absState = Math.Abs (context.StateTag) - 1;  			if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  				context.StateTag--;  				return null;  			}  		}  	}  	else {  		if (context.KeywordBuilder.Length == 0) {  			if (XmlChar.IsWhitespace (c))  				return null;  			else if (c == '"') {  				context.KeywordBuilder.Append (c);  				return null;  			}  		}  		else {  			if (c == '"') {  				context.KeywordBuilder.Remove (0' 1);  				doc.PublicFpi = context.KeywordBuilder.ToString ();  				context.KeywordBuilder.Length = 0;  				context.StateTag = 0;  			}  			else {  				context.KeywordBuilder.Append (c);  			}  			return null;  		}  	}  }  else if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (!doc.RootElement.IsValid) {  	if (XmlChar.IsWhitespace (c))  		return null;  	else if (XmlChar.IsFirstNameChar (c)) {  		rollback = "";  		return nameState;  	}  }  else if (doc.PublicFpi == null) {  	if (context.StateTag == 0) {  		if (c == 's' || c == 'S') {  			context.StateTag = 1;  			return null;  		}  		else if (c == 'p' || c == 'P') {  			context.StateTag = -1;  			return null;  		}  		if (XmlChar.IsWhitespace (c)) {  			return null;  		}  	}  	else if (Math.Abs (context.StateTag) < 6) {  		if (context.StateTag > 0) {  			if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  				context.StateTag++;  				if (context.StateTag == 6) {  					context.StateTag = 0;  					doc.PublicFpi = "";  				}  				return null;  			}  		}  		else {  			int absState = Math.Abs (context.StateTag) - 1;  			if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  				context.StateTag--;  				return null;  			}  		}  	}  	else {  		if (context.KeywordBuilder.Length == 0) {  			if (XmlChar.IsWhitespace (c))  				return null;  			else if (c == '"') {  				context.KeywordBuilder.Append (c);  				return null;  			}  		}  		else {  			if (c == '"') {  				context.KeywordBuilder.Remove (0' 1);  				doc.PublicFpi = context.KeywordBuilder.ToString ();  				context.KeywordBuilder.Length = 0;  				context.StateTag = 0;  			}  			else {  				context.KeywordBuilder.Append (c);  			}  			return null;  		}  	}  }  else if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (!doc.RootElement.IsValid) {  	if (XmlChar.IsWhitespace (c))  		return null;  	else if (XmlChar.IsFirstNameChar (c)) {  		rollback = "";  		return nameState;  	}  }  else if (doc.PublicFpi == null) {  	if (context.StateTag == 0) {  		if (c == 's' || c == 'S') {  			context.StateTag = 1;  			return null;  		}  		else if (c == 'p' || c == 'P') {  			context.StateTag = -1;  			return null;  		}  		if (XmlChar.IsWhitespace (c)) {  			return null;  		}  	}  	else if (Math.Abs (context.StateTag) < 6) {  		if (context.StateTag > 0) {  			if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  				context.StateTag++;  				if (context.StateTag == 6) {  					context.StateTag = 0;  					doc.PublicFpi = "";  				}  				return null;  			}  		}  		else {  			int absState = Math.Abs (context.StateTag) - 1;  			if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  				context.StateTag--;  				return null;  			}  		}  	}  	else {  		if (context.KeywordBuilder.Length == 0) {  			if (XmlChar.IsWhitespace (c))  				return null;  			else if (c == '"') {  				context.KeywordBuilder.Append (c);  				return null;  			}  		}  		else {  			if (c == '"') {  				context.KeywordBuilder.Remove (0' 1);  				doc.PublicFpi = context.KeywordBuilder.ToString ();  				context.KeywordBuilder.Length = 0;  				context.StateTag = 0;  			}  			else {  				context.KeywordBuilder.Append (c);  			}  			return null;  		}  	}  }  else if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (!doc.RootElement.IsValid) {  	if (XmlChar.IsWhitespace (c))  		return null;  	else if (XmlChar.IsFirstNameChar (c)) {  		rollback = "";  		return nameState;  	}  }  else if (doc.PublicFpi == null) {  	if (context.StateTag == 0) {  		if (c == 's' || c == 'S') {  			context.StateTag = 1;  			return null;  		}  		else if (c == 'p' || c == 'P') {  			context.StateTag = -1;  			return null;  		}  		if (XmlChar.IsWhitespace (c)) {  			return null;  		}  	}  	else if (Math.Abs (context.StateTag) < 6) {  		if (context.StateTag > 0) {  			if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  				context.StateTag++;  				if (context.StateTag == 6) {  					context.StateTag = 0;  					doc.PublicFpi = "";  				}  				return null;  			}  		}  		else {  			int absState = Math.Abs (context.StateTag) - 1;  			if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  				context.StateTag--;  				return null;  			}  		}  	}  	else {  		if (context.KeywordBuilder.Length == 0) {  			if (XmlChar.IsWhitespace (c))  				return null;  			else if (c == '"') {  				context.KeywordBuilder.Append (c);  				return null;  			}  		}  		else {  			if (c == '"') {  				context.KeywordBuilder.Remove (0' 1);  				doc.PublicFpi = context.KeywordBuilder.ToString ();  				context.KeywordBuilder.Length = 0;  				context.StateTag = 0;  			}  			else {  				context.KeywordBuilder.Append (c);  			}  			return null;  		}  	}  }  else if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (doc.PublicFpi == null) {  	if (context.StateTag == 0) {  		if (c == 's' || c == 'S') {  			context.StateTag = 1;  			return null;  		}  		else if (c == 'p' || c == 'P') {  			context.StateTag = -1;  			return null;  		}  		if (XmlChar.IsWhitespace (c)) {  			return null;  		}  	}  	else if (Math.Abs (context.StateTag) < 6) {  		if (context.StateTag > 0) {  			if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  				context.StateTag++;  				if (context.StateTag == 6) {  					context.StateTag = 0;  					doc.PublicFpi = "";  				}  				return null;  			}  		}  		else {  			int absState = Math.Abs (context.StateTag) - 1;  			if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  				context.StateTag--;  				return null;  			}  		}  	}  	else {  		if (context.KeywordBuilder.Length == 0) {  			if (XmlChar.IsWhitespace (c))  				return null;  			else if (c == '"') {  				context.KeywordBuilder.Append (c);  				return null;  			}  		}  		else {  			if (c == '"') {  				context.KeywordBuilder.Remove (0' 1);  				doc.PublicFpi = context.KeywordBuilder.ToString ();  				context.KeywordBuilder.Length = 0;  				context.StateTag = 0;  			}  			else {  				context.KeywordBuilder.Append (c);  			}  			return null;  		}  	}  }  else if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (doc.PublicFpi == null) {  	if (context.StateTag == 0) {  		if (c == 's' || c == 'S') {  			context.StateTag = 1;  			return null;  		}  		else if (c == 'p' || c == 'P') {  			context.StateTag = -1;  			return null;  		}  		if (XmlChar.IsWhitespace (c)) {  			return null;  		}  	}  	else if (Math.Abs (context.StateTag) < 6) {  		if (context.StateTag > 0) {  			if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  				context.StateTag++;  				if (context.StateTag == 6) {  					context.StateTag = 0;  					doc.PublicFpi = "";  				}  				return null;  			}  		}  		else {  			int absState = Math.Abs (context.StateTag) - 1;  			if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  				context.StateTag--;  				return null;  			}  		}  	}  	else {  		if (context.KeywordBuilder.Length == 0) {  			if (XmlChar.IsWhitespace (c))  				return null;  			else if (c == '"') {  				context.KeywordBuilder.Append (c);  				return null;  			}  		}  		else {  			if (c == '"') {  				context.KeywordBuilder.Remove (0' 1);  				doc.PublicFpi = context.KeywordBuilder.ToString ();  				context.KeywordBuilder.Length = 0;  				context.StateTag = 0;  			}  			else {  				context.KeywordBuilder.Append (c);  			}  			return null;  		}  	}  }  else if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (doc.PublicFpi == null) {  	if (context.StateTag == 0) {  		if (c == 's' || c == 'S') {  			context.StateTag = 1;  			return null;  		}  		else if (c == 'p' || c == 'P') {  			context.StateTag = -1;  			return null;  		}  		if (XmlChar.IsWhitespace (c)) {  			return null;  		}  	}  	else if (Math.Abs (context.StateTag) < 6) {  		if (context.StateTag > 0) {  			if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  				context.StateTag++;  				if (context.StateTag == 6) {  					context.StateTag = 0;  					doc.PublicFpi = "";  				}  				return null;  			}  		}  		else {  			int absState = Math.Abs (context.StateTag) - 1;  			if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  				context.StateTag--;  				return null;  			}  		}  	}  	else {  		if (context.KeywordBuilder.Length == 0) {  			if (XmlChar.IsWhitespace (c))  				return null;  			else if (c == '"') {  				context.KeywordBuilder.Append (c);  				return null;  			}  		}  		else {  			if (c == '"') {  				context.KeywordBuilder.Remove (0' 1);  				doc.PublicFpi = context.KeywordBuilder.ToString ();  				context.KeywordBuilder.Length = 0;  				context.StateTag = 0;  			}  			else {  				context.KeywordBuilder.Append (c);  			}  			return null;  		}  	}  }  else if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (doc.PublicFpi == null) {  	if (context.StateTag == 0) {  		if (c == 's' || c == 'S') {  			context.StateTag = 1;  			return null;  		}  		else if (c == 'p' || c == 'P') {  			context.StateTag = -1;  			return null;  		}  		if (XmlChar.IsWhitespace (c)) {  			return null;  		}  	}  	else if (Math.Abs (context.StateTag) < 6) {  		if (context.StateTag > 0) {  			if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  				context.StateTag++;  				if (context.StateTag == 6) {  					context.StateTag = 0;  					doc.PublicFpi = "";  				}  				return null;  			}  		}  		else {  			int absState = Math.Abs (context.StateTag) - 1;  			if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  				context.StateTag--;  				return null;  			}  		}  	}  	else {  		if (context.KeywordBuilder.Length == 0) {  			if (XmlChar.IsWhitespace (c))  				return null;  			else if (c == '"') {  				context.KeywordBuilder.Append (c);  				return null;  			}  		}  		else {  			if (c == '"') {  				context.KeywordBuilder.Remove (0' 1);  				doc.PublicFpi = context.KeywordBuilder.ToString ();  				context.KeywordBuilder.Length = 0;  				context.StateTag = 0;  			}  			else {  				context.KeywordBuilder.Append (c);  			}  			return null;  		}  	}  }  else if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (context.StateTag == 0) {  	if (c == 's' || c == 'S') {  		context.StateTag = 1;  		return null;  	}  	else if (c == 'p' || c == 'P') {  		context.StateTag = -1;  		return null;  	}  	if (XmlChar.IsWhitespace (c)) {  		return null;  	}  }  else if (Math.Abs (context.StateTag) < 6) {  	if (context.StateTag > 0) {  		if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  			context.StateTag++;  			if (context.StateTag == 6) {  				context.StateTag = 0;  				doc.PublicFpi = "";  			}  			return null;  		}  	}  	else {  		int absState = Math.Abs (context.StateTag) - 1;  		if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  			context.StateTag--;  			return null;  		}  	}  }  else {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.PublicFpi = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  			context.StateTag = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (context.StateTag == 0) {  	if (c == 's' || c == 'S') {  		context.StateTag = 1;  		return null;  	}  	else if (c == 'p' || c == 'P') {  		context.StateTag = -1;  		return null;  	}  	if (XmlChar.IsWhitespace (c)) {  		return null;  	}  }  else if (Math.Abs (context.StateTag) < 6) {  	if (context.StateTag > 0) {  		if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  			context.StateTag++;  			if (context.StateTag == 6) {  				context.StateTag = 0;  				doc.PublicFpi = "";  			}  			return null;  		}  	}  	else {  		int absState = Math.Abs (context.StateTag) - 1;  		if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  			context.StateTag--;  			return null;  		}  	}  }  else {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.PublicFpi = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  			context.StateTag = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (Math.Abs (context.StateTag) < 6) {  	if (context.StateTag > 0) {  		if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  			context.StateTag++;  			if (context.StateTag == 6) {  				context.StateTag = 0;  				doc.PublicFpi = "";  			}  			return null;  		}  	}  	else {  		int absState = Math.Abs (context.StateTag) - 1;  		if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  			context.StateTag--;  			return null;  		}  	}  }  else {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.PublicFpi = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  			context.StateTag = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (Math.Abs (context.StateTag) < 6) {  	if (context.StateTag > 0) {  		if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  			context.StateTag++;  			if (context.StateTag == 6) {  				context.StateTag = 0;  				doc.PublicFpi = "";  			}  			return null;  		}  	}  	else {  		int absState = Math.Abs (context.StateTag) - 1;  		if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  			context.StateTag--;  			return null;  		}  	}  }  else {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.PublicFpi = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  			context.StateTag = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (context.StateTag > 0) {  	if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  		context.StateTag++;  		if (context.StateTag == 6) {  			context.StateTag = 0;  			doc.PublicFpi = "";  		}  		return null;  	}  }  else {  	int absState = Math.Abs (context.StateTag) - 1;  	if ("UBLIC" [absState] == c || "ublic" [absState] == c) {  		context.StateTag--;  		return null;  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if ("YSTEM" [context.StateTag - 1] == c || "ystem" [context.StateTag - 1] == c) {  	context.StateTag++;  	if (context.StateTag == 6) {  		context.StateTag = 0;  		doc.PublicFpi = "";  	}  	return null;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (context.StateTag == 6) {  	context.StateTag = 0;  	doc.PublicFpi = "";  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (doc.Uri == null) {  	if (context.KeywordBuilder.Length == 0) {  		if (XmlChar.IsWhitespace (c))  			return null;  		else if (c == '"') {  			context.KeywordBuilder.Append (c);  			return null;  		}  	}  	else {  		if (c == '"') {  			context.KeywordBuilder.Remove (0' 1);  			doc.Uri = context.KeywordBuilder.ToString ();  			context.KeywordBuilder.Length = 0;  		}  		else {  			context.KeywordBuilder.Append (c);  		}  		return null;  	}  }  else if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (doc.InternalDeclarationRegion.EndLine <= 0) {  	if (XmlChar.IsWhitespace (c))  		return null;  	switch (context.StateTag) {  	case 0:  		if (c == '[') {  			doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  			context.StateTag = 1;  			return null;  		}  		break;  	case 1:  		if (c == '<') {  			context.StateTag = 2;  			return null;  		}  		else if (c == ']') {  			context.StateTag = 0;  			doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  			return null;  		}  		break;  	case 2:  		if (c == '>') {  			context.StateTag = 1;  		}  		return null;  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: switch (context.StateTag) {  case 0:  	if (c == '[') {  		doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  		context.StateTag = 1;  		return null;  	}  	break;  case 1:  	if (c == '<') {  		context.StateTag = 2;  		return null;  	}  	else if (c == ']') {  		context.StateTag = 0;  		doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  		return null;  	}  	break;  case 2:  	if (c == '>') {  		context.StateTag = 1;  	}  	return null;  default:  	throw new InvalidOperationException ();  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: switch (context.StateTag) {  case 0:  	if (c == '[') {  		doc.InternalDeclarationRegion = new DomRegion (context.Location' TextLocation.Empty);  		context.StateTag = 1;  		return null;  	}  	break;  case 1:  	if (c == '<') {  		context.StateTag = 2;  		return null;  	}  	else if (c == ']') {  		context.StateTag = 0;  		doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  		return null;  	}  	break;  case 2:  	if (c == '>') {  		context.StateTag = 1;  	}  	return null;  default:  	throw new InvalidOperationException ();  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: if (c == '<') {  	context.StateTag = 2;  	return null;  }  else if (c == ']') {  	context.StateTag = 0;  	doc.InternalDeclarationRegion = new DomRegion (doc.InternalDeclarationRegion.Begin' context.Location);  	return null;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlDocTypeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlDocTypeState.cs,PushChar,The following statement contains a magic number: context.StateTag = 2;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {  	return true;  }  else if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {  	return true;  }  else if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {  	return true;  }  else if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsFirstNameChar,The following statement contains a magic number: return (nameBitmap [(firstNamePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsInvalid,The following statement contains a magic number: switch (ch) {  case 9:  case 10:  case 13:  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsInvalid,The following statement contains a magic number: switch (ch) {  case 9:  case 10:  case 13:  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsInvalid,The following statement contains a magic number: switch (ch) {  case 9:  case 10:  case 13:  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsInvalid,The following statement contains a magic number: if (ch < 32)  	return true;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {  	return true;  }  else if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  else {  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {  	return true;  }  else if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  else {  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {  	return true;  }  else if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  else {  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  else {  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  else {  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: if ((uint)ch <= 0xFFFF) {  	return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  else {  	return false;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNameChar,The following statement contains a magic number: return (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNCNameChar,The following statement contains a magic number: if (ch >= 0 && ch <= 0xFFFF && ch != ':') {  	result = (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNCNameChar,The following statement contains a magic number: if (ch >= 0 && ch <= 0xFFFF && ch != ':') {  	result = (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNCNameChar,The following statement contains a magic number: if (ch >= 0 && ch <= 0xFFFF && ch != ':') {  	result = (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  }  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNCNameChar,The following statement contains a magic number: result = (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNCNameChar,The following statement contains a magic number: result = (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsNCNameChar,The following statement contains a magic number: result = (nameBitmap [(namePages [ch >> 8] << 3) + ((ch & 0xFF) >> 5)] & (1 << (ch & 0x1F))) != 0;  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteStartElement,The following statement contains a magic number: if (namespaces && prefix != null && prefix.Length == 3 && namespaceUri != XmlNamespace && (prefix [0] == 'x' || prefix [0] == 'X') && (prefix [1] == 'm' || prefix [1] == 'M') && (prefix [2] == 'l' || prefix [2] == 'L'))  	throw new ArgumentException ("A prefix cannot be equivalent to \"xml\" in case-insensitive match.");  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteStartElement,The following statement contains a magic number: if (namespaces && prefix != null && prefix.Length == 3 && namespaceUri != XmlNamespace && (prefix [0] == 'x' || prefix [0] == 'X') && (prefix [1] == 'm' || prefix [1] == 'M') && (prefix [2] == 'l' || prefix [2] == 'L'))  	throw new ArgumentException ("A prefix cannot be equivalent to \"xml\" in case-insensitive match.");  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteStartElement,The following statement contains a magic number: if (namespaces && prefix != null && prefix.Length == 3 && namespaceUri != XmlNamespace && (prefix [0] == 'x' || prefix [0] == 'X') && (prefix [1] == 'm' || prefix [1] == 'M') && (prefix [2] == 'l' || prefix [2] == 'L'))  	throw new ArgumentException ("A prefix cannot be equivalent to \"xml\" in case-insensitive match.");  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: for (int i = index; i < end; i++) {  	int val = buffer [i];  	int high = val >> 4;  	int low = val & 15;  	if (high > 9)  		w.Write ((char)(high + 55));  	else  		w.Write ((char)(high + 0x30));  	if (low > 9)  		w.Write ((char)(low + 55));  	else  		w.Write ((char)(low + 0x30));  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: for (int i = index; i < end; i++) {  	int val = buffer [i];  	int high = val >> 4;  	int low = val & 15;  	if (high > 9)  		w.Write ((char)(high + 55));  	else  		w.Write ((char)(high + 0x30));  	if (low > 9)  		w.Write ((char)(low + 55));  	else  		w.Write ((char)(low + 0x30));  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: for (int i = index; i < end; i++) {  	int val = buffer [i];  	int high = val >> 4;  	int low = val & 15;  	if (high > 9)  		w.Write ((char)(high + 55));  	else  		w.Write ((char)(high + 0x30));  	if (low > 9)  		w.Write ((char)(low + 55));  	else  		w.Write ((char)(low + 0x30));  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: for (int i = index; i < end; i++) {  	int val = buffer [i];  	int high = val >> 4;  	int low = val & 15;  	if (high > 9)  		w.Write ((char)(high + 55));  	else  		w.Write ((char)(high + 0x30));  	if (low > 9)  		w.Write ((char)(low + 55));  	else  		w.Write ((char)(low + 0x30));  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: for (int i = index; i < end; i++) {  	int val = buffer [i];  	int high = val >> 4;  	int low = val & 15;  	if (high > 9)  		w.Write ((char)(high + 55));  	else  		w.Write ((char)(high + 0x30));  	if (low > 9)  		w.Write ((char)(low + 55));  	else  		w.Write ((char)(low + 0x30));  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: for (int i = index; i < end; i++) {  	int val = buffer [i];  	int high = val >> 4;  	int low = val & 15;  	if (high > 9)  		w.Write ((char)(high + 55));  	else  		w.Write ((char)(high + 0x30));  	if (low > 9)  		w.Write ((char)(low + 55));  	else  		w.Write ((char)(low + 0x30));  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: if (high > 9)  	w.Write ((char)(high + 55));  else  	w.Write ((char)(high + 0x30));  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: if (high > 9)  	w.Write ((char)(high + 55));  else  	w.Write ((char)(high + 0x30));  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: w.Write ((char)(high + 55));  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: if (low > 9)  	w.Write ((char)(low + 55));  else  	w.Write ((char)(low + 0x30));  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: if (low > 9)  	w.Write ((char)(low + 55));  else  	w.Write ((char)(low + 0x30));  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteBinHex,The following statement contains a magic number: w.Write ((char)(low + 55));  
Magic Number,MonoDevelop.Xml.Formatting,XmlNamespaceManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,InitData,The following statement contains a magic number: decls = new NsDecl[10];  
Magic Number,MonoDevelop.Xml.Formatting,XmlNamespaceManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,InitData,The following statement contains a magic number: scopes = new NsScope[40];  
Magic Number,MonoDevelop.Xml.Formatting,XmlNamespaceManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,GrowDecls,The following statement contains a magic number: decls = new NsDecl[declPos * 2 + 1];  
Magic Number,MonoDevelop.Xml.Formatting,XmlNamespaceManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,GrowScopes,The following statement contains a magic number: scopes = new NsScope[scopePos * 2 + 1];  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingSettings,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicy.cs,XmlFormattingSettings,The following statement contains a magic number: MaxAttributesPerLine = 10;  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: for (uint n = 0; n < currentFormat.ScopeXPath.Count; n++) {  	int capn = (int)n;  	Label la = new Label (GettextCatalog.GetString ("XPath scope:"));  	la.Xalign = 0;  	tableScopes.Attach (la' 0' 1' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  	Entry en = new Entry ();  	en.Text = currentFormat.ScopeXPath [capn];  	tableScopes.Attach (en' 1' 2' n' n + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Shrink' 0' 0);  	en.Changed += delegate {  		currentFormat.ScopeXPath [capn] = en.Text;  		UpdateCurrentName ();  	};  	uint c = 2;  	if (currentFormat.ScopeXPath.Count != 1) {  		Button butRem = new Button (ImageService.GetImage (Gtk.Stock.Remove' IconSize.Menu));  		tableScopes.Attach (butRem' 2' 3' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  		butRem.Clicked += delegate {  			currentFormat.ScopeXPath.RemoveAt (capn);  			UpdateScopes ();  			UpdateCurrentName ();  		};  		c++;  	}  	if (n == currentFormat.ScopeXPath.Count - 1) {  		Button butAdd = new Button (ImageService.GetImage (Gtk.Stock.Add' IconSize.Menu));  		tableScopes.Attach (butAdd' c' c + 1' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  		butAdd.Clicked += delegate {  			currentFormat.ScopeXPath.Add ("");  			UpdateScopes ();  			UpdateCurrentName ();  		};  	}  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: for (uint n = 0; n < currentFormat.ScopeXPath.Count; n++) {  	int capn = (int)n;  	Label la = new Label (GettextCatalog.GetString ("XPath scope:"));  	la.Xalign = 0;  	tableScopes.Attach (la' 0' 1' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  	Entry en = new Entry ();  	en.Text = currentFormat.ScopeXPath [capn];  	tableScopes.Attach (en' 1' 2' n' n + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Shrink' 0' 0);  	en.Changed += delegate {  		currentFormat.ScopeXPath [capn] = en.Text;  		UpdateCurrentName ();  	};  	uint c = 2;  	if (currentFormat.ScopeXPath.Count != 1) {  		Button butRem = new Button (ImageService.GetImage (Gtk.Stock.Remove' IconSize.Menu));  		tableScopes.Attach (butRem' 2' 3' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  		butRem.Clicked += delegate {  			currentFormat.ScopeXPath.RemoveAt (capn);  			UpdateScopes ();  			UpdateCurrentName ();  		};  		c++;  	}  	if (n == currentFormat.ScopeXPath.Count - 1) {  		Button butAdd = new Button (ImageService.GetImage (Gtk.Stock.Add' IconSize.Menu));  		tableScopes.Attach (butAdd' c' c + 1' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  		butAdd.Clicked += delegate {  			currentFormat.ScopeXPath.Add ("");  			UpdateScopes ();  			UpdateCurrentName ();  		};  	}  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: for (uint n = 0; n < currentFormat.ScopeXPath.Count; n++) {  	int capn = (int)n;  	Label la = new Label (GettextCatalog.GetString ("XPath scope:"));  	la.Xalign = 0;  	tableScopes.Attach (la' 0' 1' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  	Entry en = new Entry ();  	en.Text = currentFormat.ScopeXPath [capn];  	tableScopes.Attach (en' 1' 2' n' n + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Shrink' 0' 0);  	en.Changed += delegate {  		currentFormat.ScopeXPath [capn] = en.Text;  		UpdateCurrentName ();  	};  	uint c = 2;  	if (currentFormat.ScopeXPath.Count != 1) {  		Button butRem = new Button (ImageService.GetImage (Gtk.Stock.Remove' IconSize.Menu));  		tableScopes.Attach (butRem' 2' 3' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  		butRem.Clicked += delegate {  			currentFormat.ScopeXPath.RemoveAt (capn);  			UpdateScopes ();  			UpdateCurrentName ();  		};  		c++;  	}  	if (n == currentFormat.ScopeXPath.Count - 1) {  		Button butAdd = new Button (ImageService.GetImage (Gtk.Stock.Add' IconSize.Menu));  		tableScopes.Attach (butAdd' c' c + 1' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  		butAdd.Clicked += delegate {  			currentFormat.ScopeXPath.Add ("");  			UpdateScopes ();  			UpdateCurrentName ();  		};  	}  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: for (uint n = 0; n < currentFormat.ScopeXPath.Count; n++) {  	int capn = (int)n;  	Label la = new Label (GettextCatalog.GetString ("XPath scope:"));  	la.Xalign = 0;  	tableScopes.Attach (la' 0' 1' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  	Entry en = new Entry ();  	en.Text = currentFormat.ScopeXPath [capn];  	tableScopes.Attach (en' 1' 2' n' n + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Shrink' 0' 0);  	en.Changed += delegate {  		currentFormat.ScopeXPath [capn] = en.Text;  		UpdateCurrentName ();  	};  	uint c = 2;  	if (currentFormat.ScopeXPath.Count != 1) {  		Button butRem = new Button (ImageService.GetImage (Gtk.Stock.Remove' IconSize.Menu));  		tableScopes.Attach (butRem' 2' 3' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  		butRem.Clicked += delegate {  			currentFormat.ScopeXPath.RemoveAt (capn);  			UpdateScopes ();  			UpdateCurrentName ();  		};  		c++;  	}  	if (n == currentFormat.ScopeXPath.Count - 1) {  		Button butAdd = new Button (ImageService.GetImage (Gtk.Stock.Add' IconSize.Menu));  		tableScopes.Attach (butAdd' c' c + 1' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  		butAdd.Clicked += delegate {  			currentFormat.ScopeXPath.Add ("");  			UpdateScopes ();  			UpdateCurrentName ();  		};  	}  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: tableScopes.Attach (en' 1' 2' n' n + 1' AttachOptions.Expand | AttachOptions.Fill' AttachOptions.Shrink' 0' 0);  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: if (currentFormat.ScopeXPath.Count != 1) {  	Button butRem = new Button (ImageService.GetImage (Gtk.Stock.Remove' IconSize.Menu));  	tableScopes.Attach (butRem' 2' 3' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  	butRem.Clicked += delegate {  		currentFormat.ScopeXPath.RemoveAt (capn);  		UpdateScopes ();  		UpdateCurrentName ();  	};  	c++;  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: if (currentFormat.ScopeXPath.Count != 1) {  	Button butRem = new Button (ImageService.GetImage (Gtk.Stock.Remove' IconSize.Menu));  	tableScopes.Attach (butRem' 2' 3' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  	butRem.Clicked += delegate {  		currentFormat.ScopeXPath.RemoveAt (capn);  		UpdateScopes ();  		UpdateCurrentName ();  	};  	c++;  }  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: tableScopes.Attach (butRem' 2' 3' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  
Magic Number,MonoDevelop.Xml.Formatting,XmlFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormattingPolicyPanelWidget.cs,UpdateScopes,The following statement contains a magic number: tableScopes.Attach (butRem' 2' 3' n' n + 1' AttachOptions.Shrink' AttachOptions.Shrink' 0' 0);  
Missing Default,MonoDevelop.XmlEditor,XmlParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlParser.cs,GetParentElementPath,The following switch statement is missing a default case: switch (xmlReader.NodeType) {  case XmlNodeType.Element:  	if (!xmlReader.IsEmptyElement) {  		QualifiedName elementName = new QualifiedName (xmlReader.LocalName' xmlReader.NamespaceURI' xmlReader.Prefix);  		path.Elements.Add (elementName);  	}  	break;  case XmlNodeType.EndElement:  	path.Elements.RemoveLast ();  	break;  }  
Missing Default,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,FindSchemaObjectReference,The following switch statement is missing a default case: switch (elementName) {  case "element":  	return schemaCompletionData.FindElement (qualifiedName);  case "attribute":  	return schemaCompletionData.FindAttribute (qualifiedName.Name);  case "group":  	return schemaCompletionData.FindGroup (qualifiedName.Name);  case "attributeGroup":  	return schemaCompletionData.FindAttributeGroup (qualifiedName.Name);  }  
Missing Default,MonoDevelop.XmlEditor,XmlTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.XmlEditor\XmlTextEditorExtension.cs,FindSchemaObjectType,The following switch statement is missing a default case: switch (elementName) {  case "element":  	return schemaCompletionData.FindComplexType (qualifiedName);  case "attribute":  	return schemaCompletionData.FindSimpleType (qualifiedName.Name);  }  
Missing Default,MonoDevelop.Xml.StateEngine,XmlFreeState,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlFreeState.cs,PushChar,The following switch statement is missing a default case: switch (context.StateTag) {  case FREE:  	//FIXME: handle entities?  	return null;  case BRACKET:  	if (c == '?') {  		rollback = string.Empty;  		return this.ProcessingInstructionState;  	}  	else if (c == '!') {  		context.StateTag = BRACKET_EXCLAM;  		return null;  	}  	else if (c == '/') {  		return this.ClosingTagState;  	}  	else if (char.IsLetter (c) || c == '_') {  		rollback = string.Empty;  		return TagState;  	}  	break;  case BRACKET_EXCLAM:  	if (c == '[') {  		context.StateTag = CDATA;  		return null;  	}  	else if (c == '-') {  		context.StateTag = COMMENT;  		return null;  	}  	else if (c == 'D') {  		context.StateTag = DOCTYPE;  		return null;  	}  	break;  case COMMENT:  	if (c == '-')  		return CommentState;  	break;  case CDATA:  	string cdataStr = "CDATA[";  	if (c == cdataStr [context.KeywordBuilder.Length]) {  		context.KeywordBuilder.Append (c);  		if (context.KeywordBuilder.Length < cdataStr.Length)  			return null;  		else  			return CDataState;  	}  	else {  		context.KeywordBuilder.Length = 0;  	}  	break;  case DOCTYPE:  	string docTypeStr = "OCTYPE";  	if (c == docTypeStr [context.KeywordBuilder.Length]) {  		context.KeywordBuilder.Append (c);  		if (context.KeywordBuilder.Length < docTypeStr.Length)  			return null;  		else  			return DocTypeState;  	}  	else {  		context.KeywordBuilder.Length = 0;  	}  	break;  }  
Missing Default,MonoDevelop.Xml.StateEngine,XmlChar,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.StateEngine\XmlChar.cs,IsInvalid,The following switch statement is missing a default case: switch (ch) {  case 9:  case 10:  case 13:  	return false;  }  
Missing Default,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteNode,The following switch statement is missing a default case: switch (node.NodeType) {  case XmlNodeType.Document: {  	WriteContent (node);  	break;  }  case XmlNodeType.Attribute: {  	XmlAttribute at = (XmlAttribute)node;  	if (at.Specified) {  		WriteStartAttribute (at.NamespaceURI.Length > 0 ? at.Prefix : String.Empty' at.LocalName' at.NamespaceURI);  		WriteContent (node);  		WriteEndAttribute ();  	}  	break;  }  case XmlNodeType.CDATA: {  	WriteCData (((XmlCDataSection)node).Data);  	break;  }  case XmlNodeType.Comment: {  	WriteComment (((XmlComment)node).Data);  	break;  }  case XmlNodeType.DocumentFragment: {  	for (int i = 0; i < node.ChildNodes.Count; i++)  		WriteNode (node.ChildNodes [i]);  	break;  }  case XmlNodeType.DocumentType: {  	XmlDocumentType dt = (XmlDocumentType)node;  	WriteDocType (dt.Name' dt.PublicId' dt.SystemId' dt.InternalSubset);  	break;  }  case XmlNodeType.Element: {  	XmlElement elem = (XmlElement)node;  	WriteStartElement (elem.NamespaceURI == null || elem.NamespaceURI.Length == 0 ? String.Empty : elem.Prefix' elem.LocalName' elem.NamespaceURI);  	if (elem.HasAttributes) {  		int oldBeforeSp = formatSettings.SpacesBeforeAssignment;  		int maxLen = 0;  		if (formatSettings.AlignAttributeValues) {  			foreach (XmlAttribute at in elem.Attributes) {  				string name = GetAttributeName (at);  				if (name.Length > maxLen)  					maxLen = name.Length;  			}  		}  		foreach (XmlAttribute at in elem.Attributes) {  			if (formatSettings.AlignAttributeValues) {  				string name = GetAttributeName (at);  				formatSettings.SpacesBeforeAssignment = (maxLen - name.Length) + oldBeforeSp;  			}  			WriteNode (at);  		}  		formatSettings.SpacesBeforeAssignment = oldBeforeSp;  	}  	if (!elem.IsEmpty) {  		CloseStartElement ();  		WriteContent (elem);  		WriteFullEndElement ();  	}  	else  		WriteEndElement ();  	break;  }  case XmlNodeType.EntityReference: {  	XmlEntityReference eref = (XmlEntityReference)node;  	WriteRaw ("&");  	WriteName (eref.Name);  	WriteRaw (";");  	break;  }  case XmlNodeType.ProcessingInstruction: {  	XmlProcessingInstruction pi = (XmlProcessingInstruction)node;  	WriteProcessingInstruction (pi.Target' pi.Data);  	break;  }  case XmlNodeType.SignificantWhitespace: {  	XmlSignificantWhitespace wn = (XmlSignificantWhitespace)node;  	WriteWhitespace (wn.Data);  	break;  }  case XmlNodeType.Text: {  	XmlText t = (XmlText)node;  	WriteString (t.Data);  	break;  }  case XmlNodeType.Whitespace: {  	XmlWhitespace wn = (XmlWhitespace)node;  	WriteWhitespace (wn.Data);  	break;  }  case XmlNodeType.XmlDeclaration: {  	XmlDeclaration dec = (XmlDeclaration)node;  	WriteRaw (String.Format ("<?xml {0}?>"' dec.Value));  	break;  }  }  
Missing Default,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteStartDocumentCore,The following switch statement is missing a default case: switch (xmldecl_state) {  case XmlDeclState.Ignore:  	return;  case XmlDeclState.Prohibit:  	throw InvalidOperation ("WriteStartDocument cannot be called when ConformanceLevel is Fragment.");  }  
Missing Default,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteEndDocument,The following switch statement is missing a default case: switch (state) {  case WriteState.Error:  case WriteState.Closed:  case WriteState.Start:  	throw StateError ("EndDocument");  }  
Missing Default,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,ShiftStateTopLevel,The following switch statement is missing a default case: switch (state) {  case WriteState.Error:  case WriteState.Closed:  	throw StateError (occured);  case WriteState.Start:  	if (isCharacter)  		CheckMixedContentState ();  	if (xmldecl_state == XmlDeclState.Auto && !dontCheckXmlDecl)  		OutputAutoStartDocument ();  	state = WriteState.Prolog;  	break;  case WriteState.Attribute:  	if (allowAttribute)  		break;  	goto case WriteState.Closed;  case WriteState.Element:  	if (isCharacter)  		CheckMixedContentState ();  	CloseStartElement ();  	break;  case WriteState.Content:  	if (isCharacter)  		CheckMixedContentState ();  	break;  }  
Missing Default,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,ShiftStateContent,The following switch statement is missing a default case: switch (state) {  case WriteState.Error:  case WriteState.Closed:  	throw StateError (occured);  case WriteState.Prolog:  case WriteState.Start:  	if (!allow_doc_fragment || is_document_entity)  		goto case WriteState.Closed;  	if (xmldecl_state == XmlDeclState.Auto)  		OutputAutoStartDocument ();  	CheckMixedContentState ();  	state = WriteState.Content;  	break;  case WriteState.Attribute:  	if (allowAttribute)  		break;  	goto case WriteState.Closed;  case WriteState.Element:  	CloseStartElement ();  	CheckMixedContentState ();  	break;  case WriteState.Content:  	CheckMixedContentState ();  	break;  }  
Missing Default,MonoDevelop.Xml.Formatting,XmlFormatterWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,WriteEscapedBuffer,The following switch statement is missing a default case: switch (text [i]) {  case '&':  	writer.Write ("amp;");  	break;  case '<':  	writer.Write ("lt;");  	break;  case '>':  	writer.Write ("gt;");  	break;  case '\'':  	writer.Write ("apos;");  	break;  case '"':  	writer.Write ("quot;");  	break;  }  
Missing Default,MonoDevelop.Xml.Formatting,XmlNamespaceManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.XmlEditor\MonoDevelop.Xml.Formatting\XmlFormatterWriter.cs,LookupNamespace,The following switch statement is missing a default case: switch (prefix) {  case PrefixXmlns:  	return nameTable.Get (XmlnsXmlns);  case PrefixXml:  	return nameTable.Get (XmlnsXml);  case "":  	return DefaultNamespace;  case null:  	return null;  }  
