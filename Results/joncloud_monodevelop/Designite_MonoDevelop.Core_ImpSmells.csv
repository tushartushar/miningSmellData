Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.Core.Serialization,XmlMapAttributeProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\XmlMapAttributeProvider.cs,AddMap,The method has 123 lines of code.
Long Method,MonoDevelop.Projects,BuildTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\BuildTool.cs,Run,The method has 105 lines of code.
Long Method,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The method has 135 lines of code.
Long Method,MonoDevelop.Core.Assemblies,TargetFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFramework.cs,FromFrameworkDirectory,The method has 109 lines of code.
Long Method,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,OnBuild,The method has 101 lines of code.
Long Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,Load,The method has 122 lines of code.
Long Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProject,The method has 205 lines of code.
Long Method,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The method has 229 lines of code.
Long Method,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The method has 100 lines of code.
Long Method,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,MatchString,The method has 144 lines of code.
Complex Method,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,SystemRename,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,HandleResponse,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Core,Properties,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Properties.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core,XmlReadHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\XmlReadHelper.cs,ReadList,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Core,GettextCatalog,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Gettext.cs,GettextCatalog,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core,UserProfile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\UserProfile.cs,GetLocation,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core,BrandingService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\BrandingService.cs,BrandingService,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core,SystemInformation,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\SystemInformation.cs,InternalGetDescription,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartConsoleProcess,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Core.Execution,ProcessArgumentBuilder,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessArgumentBuilder.cs,GetArgument,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Core.ProgressMonitoring,ConsoleProgressMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.ProgressMonitoring\ConsoleProgressMonitor.cs,WriteText,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core.AddIns,PlatformCondition,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.AddIns\PlatformCondition.cs,Evaluate,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Core.Logging,ConsoleLogger,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleLogger.cs,Log,Cyclomatic complexity of the method is 29
Complex Method,MonoDevelop.Core.Logging,FileLogger,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\FileLogger.cs,Log,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,Cyclomatic complexity of the method is 33
Complex Method,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,DetectXtermColors,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core.Logging,InstrumentationLogger,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\InstrumentationLogger.cs,Log,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Core.Logging,AssertLoggingTraceListener,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\AssertLoggingTraceListener.cs,FormatStackFrame,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,Initialize,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,AddProperty,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,AddProperty,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,OnDeserialize,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,Deserialize,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Core.Serialization,DataCollection,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataCollection.cs,FindData,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core.Serialization,DictionaryDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DictionaryDataType.cs,GetMapData,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Core.Serialization,XmlConfigurationReader,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\XmlDataSerializer.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Core.Serialization,XmlConfigurationReader,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\XmlDataSerializer.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Serialization,XmlMapAttributeProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\XmlMapAttributeProvider.cs,AddMap,Cyclomatic complexity of the method is 29
Complex Method,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,ReadSolutionItem,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,Export,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Projects,ProjectTagProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProjectConfiguration.cs,GetTagValue,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,GetBuildActions,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,CopySupportFiles,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,ResolveDependencies,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Projects,ProjectFileEventArgs,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectFileEventArgs.cs,CalcRootDir,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Projects,ProjectReference,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectReference.cs,GetReferencedFileName,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects,BuildTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\BuildTool.cs,Run,Cyclomatic complexity of the method is 27
Complex Method,MonoDevelop.Projects,BuildTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\BuildTool.cs,ReadArgument,Cyclomatic complexity of the method is 37
Complex Method,MonoDevelop.Projects,CustomCommand,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CustomCommand.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,Cyclomatic complexity of the method is 29
Complex Method,MonoDevelop.Projects,Solution,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Solution.cs,SetupNewItem,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Projects,SolutionFolder,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionFolder.cs,AddItem,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects,SolutionFolder,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionFolder.cs,OnRunTarget,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects,SolutionItemTagProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionItem.cs,GetTagValue,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,DotNetProject,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,PopulateSupportFileListInternal,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,GetAssemblyRefsRec,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,OnGetReferencedAssemblies,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,CheckNeedsBuild,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,GetDefaultNamespace,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Projects,HelpExtension,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\HelpService.cs,GetMonodocDocumentation,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects,CompiledAssemblyProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CompiledAssemblyProject.cs,LoadFrom,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core.Assemblies,PcFileCacheContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoTargetRuntime.cs,StoreCustomData,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core.Assemblies,MonoTargetRuntimeFactory,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoTargetRuntimeFactory.cs,CreateRuntimes,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Core.Assemblies,TargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetRuntime.cs,RegisterSystemAssemblies,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Assemblies,TargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetRuntime.cs,FindTargetFrameworks,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Assemblies,TargetFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFramework.cs,GetToolsVersion,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core.Assemblies,TargetFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFramework.cs,FromFrameworkDirectory,Cyclomatic complexity of the method is 48
Complex Method,MonoDevelop.Core.Assemblies,SystemAssemblyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\SystemAssemblyService.cs,GetTargetFrameworkForAssembly,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Assemblies,MonoRuntimeInfo,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoRuntimeInfo.cs,FromCurrentRuntime,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core.Assemblies,MsNetTargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetTargetRuntime.cs,OnInitialize,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Core.Assemblies,MsNetTargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetTargetRuntime.cs,GetGacDirectories,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Assemblies,MonoFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoFrameworkBackend.cs,GetFrameworkFolders,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Core.Assemblies,MonoFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoFrameworkBackend.cs,GetOldMcsName,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Core.Assemblies,MonoFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoFrameworkBackend.cs,GetToolPath,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core.Assemblies,MsNetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetFrameworkBackend.cs,GetFrameworkFolders,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Core.Assemblies,MsNetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetFrameworkBackend.cs,GetFrameworkToolsPaths,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,GetAssemblies,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,FindInstalledAssembly,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core.Assemblies,TargetFrameworkMoniker,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFrameworkMoniker.cs,ParseInternal,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Assemblies,SupportedFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\SupportedFramework.cs,Load,Cyclomatic complexity of the method is 30
Complex Method,Mono.PkgConfig,PcFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\PcFileCache.cs,Load,Cyclomatic complexity of the method is 20
Complex Method,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,ParsePackageInfo,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,Option,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,Option,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.Projects.Extensions,UnknownProjectTypeNode,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Extensions\UnknownProjectTypeNode.cs,GetInstructions,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,OnBuild,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,BuildResources,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,GetAssemblyReferences,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,CreateSolutionItem,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,MigrateProject,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,RemoveDuplicateItems,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,Load,Cyclomatic complexity of the method is 26
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ReadItem,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProject,Cyclomatic complexity of the method is 50
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProjectFile,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveReference,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,WriteBuildItemMetadata,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,WritePropertyGroupMetadata,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ReadProjectFile,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteFileInternal,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteProjects,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteProjectConfigurations,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,EncodeString,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,ReadDataNode,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,Cyclomatic complexity of the method is 37
Complex Method,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,FromMSBuildPath,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Projects.Formats.MSBuild,MSBuildEvaluationContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,EvaluateNode,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Build.BuildEngine,ConditionParser,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionParser.cs,ParseRelationalExpression,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.Build.BuildEngine,ConditionRelationalExpression,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionRelationalExpression.cs,NumberCompare,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,HandlePolicySetUpdated,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,HandlePolicyTypeUpdated,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,DiffSerialize,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,ApplyOverlay,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,ExtractOverlay,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,GetBestOverlayNode,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Policies,PolicyContainer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyContainer.cs,CopyFrom,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Text,TextFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFile.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Projects.Text,TextFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFile.cs,WriteFile,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Projects.Text,TextFormatter,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFormatter.cs,Append,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.Text,TextFormatter,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFormatter.cs,AppendChar,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Core.StringParsing,StringTagModel,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.StringParsing\StringTagModel.cs,Initialize,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Core.StringParsing,StringTagModelDescription,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.StringParsing\StringTagModelDescription.cs,Initialize,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,MatchString,Cyclomatic complexity of the method is 27
Complex Method,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,GetMatchChar,Cyclomatic complexity of the method is 10
Complex Method,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,GetResponse,Cyclomatic complexity of the method is 9
Long Parameter List,MonoDevelop.Core.Web,CredentialStore,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\CredentialStore.cs,Add,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Web,ICredentialProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\ICredentialProvider.cs,GetCredentials,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Web,CredentialProviderExtensions,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\CredentialProviderExtensions.cs,GetCredentials,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core,StringParserService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\StringParserService.cs,StringParserService,The method has 18 parameters.
Long Parameter List,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,Initialize,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,prctl,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,UpdateDownloadedCacheFile,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core,GettextCatalog,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Gettext.cs,GetPluralString,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core,GettextCatalog,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Gettext.cs,GetPluralString,The method has 6 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartProcess,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartProcess,The method has 6 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartProcess,The method has 7 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartProcess,The method has 6 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartProcess,The method has 7 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartProcess,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartConsoleProcess,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartConsoleProcess,The method has 6 parameters.
Long Parameter List,MonoDevelop.Core.Execution,DisposerFormatterSink,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\DisposerFormatterSink.cs,ProcessMessage,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Execution,RemotingService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\RemotingService.cs,RegisterMethodCallback,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Execution,ProcessArgumentBuilder,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessArgumentBuilder.cs,GetArgument,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.AddIns,AssemblyInstalledCondition,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.AddIns\AssemblyInstalledCondition.cs,Evaluate,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Logging,AssertLoggingTraceListener,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\AssertLoggingTraceListener.cs,TraceData,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Logging,AssertLoggingTraceListener,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\AssertLoggingTraceListener.cs,TraceData,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,Deserialize,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Serialization,CollectionDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\CollectionDataType.cs,Deserialize,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Serialization,DataContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataContext.cs,RegisterProperty,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Serialization,DataContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataContext.cs,RegisterProperty,The method has 6 parameters.
Long Parameter List,MonoDevelop.Core.Serialization,DataSerializer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataSerializer.cs,OnDeserialize,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Serialization,DataSerializer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataSerializer.cs,OnDeserializeProperty,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Serialization,IndexedCollectionHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\GenericCollectionHandler.cs,IndexedCollectionHandler,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,Export,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,Export,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,CopyFiles,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,ProjectFilePathChangedEventArgs,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectFile.cs,ProjectFilePathChangedEventArgs,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,CustomCommandCollection,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CustomCommandCollection.cs,ExecuteCommand,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,SolutionItem,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionItem.cs,Insert,The method has 6 parameters.
Long Parameter List,MonoDevelop.Projects,BuildResult,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\BuildResult.cs,AddError,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,BuildResult,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\BuildResult.cs,AddWarning,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,BuildError,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\BuildResult.cs,BuildError,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects,AuthorInformation,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\AuthorInformation.cs,AuthorInformation,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.Assemblies,SupportedFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\SupportedFramework.cs,SupportedFramework,The method has 6 parameters.
Long Parameter List,MonoDevelop.Core.Instrumentation,CounterValue,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Instrumentation\Counter.cs,CounterValue,The method has 5 parameters.
Long Parameter List,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,GetOptionParts,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The method has 7 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GenerateSatelliteAssemblies,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,Load,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,CreateSolutionItem,The method has 7 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,MigrateProject,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SetIfPresentOrNotDefaultValue,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveItem,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveReference,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteFile,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteFileInternal,The method has 6 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteProjects,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,FindSection,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,ReadDataNode,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadMonoDevelopConfigurationProperties,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,LoadItem,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Text,TextFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFile.cs,g_convert,The method has 7 parameters.
Long Parameter List,MonoDevelop.Projects.Text,TextFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFile.cs,WriteFile,The method has 5 parameters.
Long Parameter List,MonoDevelop.Projects.Text,TextFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFile.cs,WriteFile,The method has 5 parameters.
Long Parameter List,MonoDevelop.Core.LogReporting,CrashMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.LogReporting\CrashMonitor.cs,CrashMonitor,The method has 6 parameters.
Long Statement,MonoDevelop.Core.Web,CredentialStore,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\CredentialStore.cs,GetCredentials,The length of the statement  "		if (credentialType == CredentialType.RequestCredentials && credentialCache.TryGetValue (GetRootUri (uri)' out credentials)) " is 123.
Long Statement,MonoDevelop.Core.Web,WebService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\WebService.cs,Initialize,The length of the statement  "	CredentialProvider = AddinManager.GetExtensionObjects<ICredentialProvider> (WebCredentialProvidersPath).FirstOrDefault (); " is 122.
Long Statement,MonoDevelop.Core,StringParserService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\StringParserService.cs,Parse,The length of the statement  "			string tagValue = Replace (tag' customTags) ?? string.Format ("${0}{1}{2}"' open' tag' i < input.Length ? close.ToString () : ""); " is 130.
Long Statement,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,Initialize,The length of the statement  "	ServicePointManager.ServerCertificateValidationCallback += delegate (object sender' X509Certificate certificate' X509Chain chain' SslPolicyErrors sslPolicyErrors) { " is 164.
Long Statement,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,RegisterAddinRepositories,The length of the statement  "	var validUrls = Enum.GetValues (typeof(UpdateLevel)).Cast<UpdateLevel> ().Select (v => setupService.GetMainRepositoryUrl (v)).ToList (); " is 136.
Long Statement,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,RegisterAddinRepositories,The length of the statement  "		if (rep.Url.StartsWith ("http://go-mono.com/md/") || (rep.Url.StartsWith ("http://monodevelop.com/files/addins/")) || (rep.Url.StartsWith ("http://addins.monodevelop.com/") && !validUrls.Contains (rep.Url))) " is 207.
Long Statement,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,GetRepoUrl,The length of the statement  "	return "http://addins.monodevelop.com/" + quality + "/" + platform + "/" + AddinManager.CurrentAddin.Version + "/main.mrep"; " is 124.
Long Statement,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,UpdateExtensions,The length of the statement  "	var extensions = AddinManager.GetExtensionObjects (addinFileSystemExtensionPath' typeof(FileSystemExtension)).Cast<FileSystemExtension> ().ToArray (); " is 150.
Long Statement,MonoDevelop.Core,EventQueue,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,Thaw,The length of the statement  "				if (next != null && (next.Args.GetType () == ev.Args.GetType ()) && next.Delegate () == del && next.ThisObject == ev.ThisObject) { " is 130.
Long Statement,MonoDevelop.Core,Properties,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Properties.cs,Save,The length of the statement  "	string tempFileName = Path.GetDirectoryName (fileName) + Path.DirectorySeparatorChar + ".#" + Path.GetFileName (fileName); " is 122.
Long Statement,MonoDevelop.Core,XmlReadHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\XmlReadHelper.cs,ReadList,The length of the statement  "			LoggingService.LogWarning ("Encountered end node '{0}' when expecting one of '{1}'. Location ln:{2} col: {3}. Stack Trace:{4}"' reader.LocalName' ConcatString (endNodes)' xmlInfo.LineNumber' xmlInfo.LinePosition' new System.Diagnostics.StackTrace ()); " is 251.
Long Statement,MonoDevelop.Core,LoggingService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\LoggingService.cs,PurgeOldLogs,The length of the statement  "	var files = Directory.GetFiles (UserProfile.Current.LogDir).Select (f => new FileInfo (f)).Where (f => f.CreationTimeUtc < DateTime.UtcNow.Subtract (TimeSpan.FromDays (7))); " is 173.
Long Statement,MonoDevelop.Core,LoggingService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\LoggingService.cs,RedirectOutputToFileUnix,The length of the statement  "	Mono.Unix.Native.OpenFlags flags = Mono.Unix.Native.OpenFlags.O_WRONLY | Mono.Unix.Native.OpenFlags.O_CREAT | Mono.Unix.Native.OpenFlags.O_TRUNC; " is 145.
Long Statement,MonoDevelop.Core,LoggingService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\LoggingService.cs,RedirectOutputToFileUnix,The length of the statement  "	var mode = Mono.Unix.Native.FilePermissions.S_IFREG | Mono.Unix.Native.FilePermissions.S_IRUSR | Mono.Unix.Native.FilePermissions.S_IWUSR | Mono.Unix.Native.FilePermissions.S_IRGRP | Mono.Unix.Native.FilePermissions.S_IWGRP; " is 224.
Long Statement,MonoDevelop.Core,UserDataMigrationService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\UserDataMigrationService.cs,HandleUserDataMigration,The length of the statement  "		string message = string.Format ("{0}: Failed to migrate '{1}' to '{2}'"' node.Addin.Id' source.ToString () ?? ""' target.ToString () ?? ""); " is 140.
Long Statement,MonoDevelop.Core,FilePath,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FilePath.cs,HasExtension,The length of the statement  "	return fileName.Length > extension.Length && fileName.EndsWith (extension' StringComparison.OrdinalIgnoreCase) && fileName [fileName.Length - extension.Length - 1] != Path.PathSeparator; " is 186.
Long Statement,MonoDevelop.Core,SystemInformation,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\SystemInformation.cs,InternalGetDescription,The length of the statement  "	foreach (var info in AddinManager.GetExtensionObjects<ISystemInformationProvider> ("/MonoDevelop/Core/SystemInformation"' false)) { " is 131.
Long Statement,MonoDevelop.Core,SystemInformation,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\SystemInformation.cs,GetReleaseId,The length of the statement  "		var line = File.ReadAllLines (biFile).Select (l => l.Split (':')).FirstOrDefault (a => a.Length > 1 && a [0].Trim () == "Release ID"); " is 134.
Long Statement,MonoDevelop.Core,WebCertificateService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\WebCertificateService.cs,GetIsCertificateTrusted,The length of the statement  "	var provider = AddinManager.GetExtensionObjects<IWebCertificateProvider> (WebCertificateProvidersPath).FirstOrDefault (); " is 121.
Long Statement,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartProcess,The length of the statement  "	return StartProcess (command' arguments' workingDirectory' (ProcessEventHandler)null' (ProcessEventHandler)null' exited); " is 121.
Long Statement,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartProcess,The length of the statement  "	return StartProcess (CreateProcessStartInfo (command' arguments' workingDirectory' redirectStandardInput)' outputStreamChanged' errorStreamChanged' exited); " is 156.
Long Statement,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,StartConsoleProcess,The length of the statement  "		var p = externalConsoleHandler (command' arguments' workingDirectory' dict' GettextCatalog.GetString ("{0} External Console"' BrandingService.ApplicationName)' console != null ? !console.CloseOnDispose : false); " is 211.
Long Statement,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,CreateCommand,The length of the statement  "	foreach (ICommandFactory f in AddinManager.GetExtensionObjects<ICommandFactory> ("/MonoDevelop/Core/CommandFactories")) { " is 121.
Long Statement,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,CreateExternalProcessObject,The length of the statement  "	return (IDisposable)hc.CreateInstance (type.Assembly.Location' type.FullName' GetRequiredAddins (type)' userAssemblyPaths); " is 123.
Long Statement,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,CreateExternalProcessObject,The length of the statement  "	return (IDisposable)GetHost (type.ToString ()' false' executionHandler).CreateInstance (type.Assembly.Location' type.FullName' GetRequiredAddins (type)' userAssemblyPaths); " is 172.
Long Statement,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,CreateExternalProcessObject,The length of the statement  "	return (IDisposable)GetHost (typeName' false' executionHandler).CreateInstance (assemblyPath' typeName' requiredAddins); " is 120.
Long Statement,MonoDevelop.Core.Execution,ProcessMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,OnOperationCompleted,The length of the statement  "			console.Log.WriteLine (GettextCatalog.GetString ("The application was terminated by a signal: {0}")' Mono.Unix.Native.Syscall.WTERMSIG (operation.ExitCode)); " is 157.
Long Statement,MonoDevelop.Core.Execution,MonoPlatformExecutionHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\MonoPlatformExecutionHandler.cs,Execute,The length of the statement  "	NativeExecutionCommand cmd = new NativeExecutionCommand (monoPath' args' dotcmd.WorkingDirectory' dotcmd.EnvironmentVariables); " is 127.
Long Statement,MonoDevelop.Core.Execution,NativePlatformExecutionHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\NativePlatformExecutionHandler.cs,Execute,The length of the statement  "	return Runtime.ProcessService.StartConsoleProcess (cmd.Command' cmd.Arguments' cmd.WorkingDirectory' vars' console' null); " is 122.
Long Statement,MonoDevelop.Core.AddIns,AssemblyInstalledCondition,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.AddIns\AssemblyInstalledCondition.cs,Evaluate,The length of the statement  "	var assemblies = Runtime.SystemAssemblyService.CurrentRuntime.RuntimeAssemblyContext.GetAssemblies ().Where (asm => asm.Name == name).ToList (); " is 144.
Long Statement,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,Initialize,The length of the statement  "	IDataItemAttribute atd = (IDataItemAttribute)Context.AttributeProvider.GetCustomAttribute (ValueType' typeof(IDataItemAttribute)' false); " is 137.
Long Statement,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,AddProperty,The length of the statement  "			throw new InvalidOperationException ("ExpandedCollectionAttribute can't be applied to property '" + prop.Name + "' in type '" + ValueType + "' becuase it is not a valid collection."); " is 183.
Long Statement,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,AddProperty,The length of the statement  "			throw new InvalidOperationException ("Constructor not found for custom data type: " + at.SerializationDataType.Name + " (Type propertyType);"' ex); " is 147.
Long Statement,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,CreateNestedConflictException,The length of the statement  "	return new InvalidOperationException ("There is a conflict between the properties '" + p1.Name + "' and '" + p2.Name + "'. Nested element properties can't be mixed with normal element properties."); " is 198.
Long Statement,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,OnDeserialize,The length of the statement  "	ConstructorInfo ctor = ValueType.GetConstructor (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 148.
Long Statement,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,OnCreateInstance,The length of the statement  "	ConstructorInfo ctor = ValueType.GetConstructor (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 148.
Long Statement,MonoDevelop.Core.Serialization,ClassDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ClassDataType.cs,Deserialize,The length of the statement  "							throw new InvalidOperationException ("The property '" + prop.Name + "' is null and a new instance of '" + prop.PropertyType + "' can't be created."); " is 149.
Long Statement,MonoDevelop.Core.Serialization,CollectionDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\CollectionDataType.cs,Deserialize,The length of the statement  "		handler.AddItem (ref collectionInstance' ref position' mapData.ItemType.Deserialize (serCtx' mapData.ItemMapData' val)); " is 120.
Long Statement,MonoDevelop.Core.Serialization,DataContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataContext.cs,RegisterProperty,The length of the statement  "		throw new InvalidOperationException ("The type '" + targetType + "' does not implement the IExtendedDataItem interface and cannot be extended with new properties"); " is 164.
Long Statement,MonoDevelop.Core.Serialization,DataContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataContext.cs,RegisterProperty,The length of the statement  "		throw new InvalidOperationException ("The type '" + targetType + "' does not implement the IExtendedDataItem interface and cannot be extended with new properties"); " is 164.
Long Statement,MonoDevelop.Core.Serialization,XmlMapAttributeProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\XmlMapAttributeProvider.cs,AddMap,The length of the statement  "				throw new InvalidOperationException (string.Format ("Type name for type '{0}' in map '{1}' already specified in another serialization map for the same type ({2})."' type' fileId' map.FileId)); " is 192.
Long Statement,MonoDevelop.Core.Serialization,XmlMapAttributeProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\XmlMapAttributeProvider.cs,AddMap,The length of the statement  "				throw new InvalidOperationException (string.Format ("Fallback type for type '{0}' in map '{1}' already specified in another serialization map for the same type ({2})."' type' fileId' map.FileId)); " is 196.
Long Statement,MonoDevelop.Core.Serialization,XmlMapAttributeProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\XmlMapAttributeProvider.cs,AddMap,The length of the statement  "					LoggingService.LogError ("[SerializationMap " + fileId + "] Member '" + memberName + "' not found in type '" + tname + "'"); " is 124.
Long Statement,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,GetExtensionChain,The length of the statement  "		ProjectServiceExtension[] extensions = einfo.ExtensionContext.GetExtensionObjects ("/MonoDevelop/ProjectModel/ProjectServiceExtensions"' typeof(ProjectServiceExtension)).Cast<ProjectServiceExtension> ().ToArray (); " is 214.
Long Statement,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,GetExtensionChain,The length of the statement  "			ProjectServiceExtension[] extensions = ctx.GetExtensionObjects ("/MonoDevelop/ProjectModel/ProjectServiceExtensions"' typeof(ProjectServiceExtension)).Cast<ProjectServiceExtension> ().ToArray (); " is 195.
Long Statement,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,Export,The length of the statement  "						monitor.ReportError ("The solution '" + obj.Name + "' is referencing the file '" + f.FileName + "' which is located outside the root solution directory."' null); " is 161.
Long Statement,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,Export,The length of the statement  "						monitor.ReportError ("The project '" + obj.Name + "' is referencing the file '" + f.FileName + "' which is located outside the project directory."' null); " is 154.
Long Statement,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,CopyFiles,The length of the statement  "				monitor.ReportError ("The solution '" + obj.Name + "' is referencing the file '" + Path.GetFileName (file) + "' which is located outside the root solution directory."' null); " is 174.
Long Statement,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,CopyFiles,The length of the statement  "				monitor.ReportError ("The project '" + obj.Name + "' is referencing the file '" + Path.GetFileName (file) + "' which is located outside the project directory."' null); " is 167.
Long Statement,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,OnPropertiesExtensionChanged,The length of the statement  "		DataContext.RegisterProperty (cls.Addin' cls.TypeName' cls.PropertyName' cls.PropertyTypeName' cls.External' cls.SkipEmpty); " is 124.
Long Statement,MonoDevelop.Projects,SolutionItemConfiguration,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionItemConfiguration.cs,FindBestMatch,The length of the statement  "	return configs.FirstOrDefault (c => Name == c.Name && Platform == c.Platform) ?? configs.FirstOrDefault (c => Name == c.Name && (c.Platform == "" || c.Platform == "Any CPU")); " is 175.
Long Statement,MonoDevelop.Projects,DotNetProjectConfiguration,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProjectConfiguration.cs,FindBestMatch,The length of the statement  "	var matches = configurations.OfType<DotNetProjectConfiguration> ().Where (c => c.CompilationParameters.HasDefineSymbol ("DEBUG") == compilationParameters.HasDefineSymbol ("DEBUG")).ToArray (); " is 192.
Long Statement,MonoDevelop.Projects,DotNetProjectConfiguration,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProjectConfiguration.cs,FindBestMatch,The length of the statement  "	return base.FindBestMatch (configurations) ?? matches.FirstOrDefault (c => Platform == c.Platform) ?? matches.FirstOrDefault (c => c.Platform == ""); " is 149.
Long Statement,MonoDevelop.Projects,ProjectTagProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProjectConfiguration.cs,GetTags,The length of the statement  "	yield return new StringTagDescription ("ProjectConfigPlat"' GettextCatalog.GetString ("Project Configuration Platform")); " is 121.
Long Statement,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,OnBuild,The length of the statement  "		cres.AddError (GettextCatalog.GetString ("Configuration '{0}' not found in project '{1}'"' configuration.ToString ()' Name)); " is 125.
Long Statement,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,OnBuild,The length of the statement  "		throw new ApplicationException ("Can't create project output directory " + outputDir + " original exception:\n" + e.ToString ()); " is 129.
Long Statement,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,OnBuild,The length of the statement  "		string warningString = GettextCatalog.GetPluralString ("{0} warning"' "{0} warnings"' res.WarningCount' res.WarningCount); " is 122.
Long Statement,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,OnClean,The length of the statement  "		monitor.ReportError (GettextCatalog.GetString ("Configuration '{0}' not found in project '{1}'"' config.Id' Name)' null); " is 121.
Long Statement,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,OnClean,The length of the statement  "			if (file.ParentDirectory.CanonicalPath != config.OutputDirectory.CanonicalPath && Directory.GetFiles (file.ParentDirectory).Length == 0) " is 136.
Long Statement,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,OnExecute,The length of the statement  "		monitor.ReportError (GettextCatalog.GetString ("Configuration '{0}' not found in project '{1}'"' configuration' Name)' null); " is 125.
Long Statement,MonoDevelop.Projects,ProjectFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectFile.cs,ResolveParent,The length of the statement  "			LoggingService.LogWarning ("Cyclic dependency in project '{0}': file '{1}' depends on '{2}'"' project == null ? "(none)" : project.Name' FilePath' parentPath); " is 159.
Long Statement,MonoDevelop.Projects,ProjectReference,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectReference.cs,GetReferencedFileName,The length of the statement  "		string file = AssemblyContext.GetAssemblyLocation (Reference' package' ownerProject != null ? ownerProject.TargetFramework : null); " is 131.
Long Statement,MonoDevelop.Projects,ProjectReference,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectReference.cs,Equals,The length of the statement  "	return other != null && StoredReference == other.StoredReference && referenceType == other.referenceType && package == other.package; " is 133.
Long Statement,MonoDevelop.Projects,CustomCommand,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CustomCommand.cs,Execute,The length of the statement  "				oper = Runtime.ProcessService.StartProcess (cmd.Command' cmd.Arguments' cmd.WorkingDirectory' monitor.Log' monitor.Log' null' false); " is 133.
Long Statement,MonoDevelop.Projects,CustomCommand,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CustomCommand.cs,Execute,The length of the statement  "		monitor.ReportError (GettextCatalog.GetString ("Failed to execute custom command '{0}': {1}"' cmd.Command' w32ex.Message)' null); " is 129.
Long Statement,MonoDevelop.Projects,CustomCommandExtension,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CustomCommandExtension.cs,Execute,The length of the statement  "		ExecutionContext localContext = new ExecutionContext (Runtime.ProcessService.DefaultExecutionHandler' context.ConsoleFactory); " is 126.
Long Statement,MonoDevelop.Projects,CustomCommandExtension,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CustomCommandExtension.cs,Execute,The length of the statement  "		ExecutionContext localContext = new ExecutionContext (Runtime.ProcessService.DefaultExecutionHandler' context.ConsoleFactory); " is 126.
Long Statement,MonoDevelop.Projects,WorkspaceItem,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\WorkspaceItem.cs,InternalBuild,The length of the statement  "	return Services.ProjectService.GetExtensionChain (this).RunTarget (monitor' this' ProjectService.BuildTarget' configuration); " is 125.
Long Statement,MonoDevelop.Projects,SolutionFolder,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionFolder.cs,OnRunTarget,The length of the statement  "		monitor.BeginTask (GettextCatalog.GetString ("Building Solution: {0} ({1})"' Name' configuration.ToString ())' allProjects.Count); " is 130.
Long Statement,MonoDevelop.Projects,SolutionFolder,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionFolder.cs,OnClean,The length of the statement  "		monitor.BeginTask (GettextCatalog.GetString ("Cleaning Solution: {0} ({1})"' Name' configuration.ToString ())' Items.Count); " is 124.
Long Statement,MonoDevelop.Projects,SolutionFolder,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionFolder.cs,OnBuild,The length of the statement  "		monitor.BeginTask (GettextCatalog.GetString ("Building Solution: {0} ({1})"' Name' configuration.ToString ())' toBuild.Count); " is 126.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,StripImplicitNamespace,The length of the statement  "	if ((LanguageParameters is DotNetProjectParameters) && ((DotNetProjectParameters)LanguageParameters).DefaultNamespaceIsImplicit) { " is 130.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,PopulateSupportFileListInternal,The length of the statement  "	ProjectFile appConfig = Files.FirstOrDefault (f => f.FilePath.FileName.Equals ("app.config"' StringComparison.CurrentCultureIgnoreCase)); " is 137.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,PopulateSupportFileListInternal,The length of the statement  "				LoggingService.LogWarning ("Project '{0}' referenced from '{1}' could not be found"' projectReference.Reference' this.Name); " is 124.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,PopulateSupportFileListInternal,The length of the statement  "				// Indirectly referenced assemblies are only copied if a newer copy doesn't exist. This avoids overwritting directly referenced assemblies " is 138.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,GetReferencedAssemblies,The length of the statement  "	return Services.ProjectService.GetExtensionChain (this).GetReferencedAssemblies (this' configuration' includeProjectReferences); " is 128.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,OnGetReferencedAssemblies,The length of the statement  "	var sa = AssemblyContext.GetAssemblies (TargetFramework).FirstOrDefault (a => a.Name == "System.Core" && a.Package.IsFrameworkPackage); " is 135.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,FindLanguage,The length of the statement  "	IDotNetLanguageBinding binding = LanguageBindingService.GetBindingPerLanguageName (languageName) as IDotNetLanguageBinding; " is 123.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,CheckNeedsBuild,The length of the statement  "	return Files.Any (file => file.BuildAction == BuildAction.EmbeddedResource && String.Compare (Path.GetExtension (file.FilePath)' ".resx"' StringComparison.OrdinalIgnoreCase) == 0 && MD1DotNetProjectHandler.IsResgenRequired (file.FilePath' config.IntermediateOutputDirectory.Combine (file.ResourceId))); " is 302.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,GetUserAssemblyPaths,The length of the statement  "	return ParentSolution.RootFolder.GetAllBuildableEntries (configuration).OfType<DotNetProject> ().Select (d => (string)d.GetOutputFileName (configuration)).Where (d => !string.IsNullOrEmpty (d)).ToList (); " is 204.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,OnGetCanExecute,The length of the statement  "	return (compileTarget == CompileTarget.Exe || compileTarget == CompileTarget.WinExe) && context.ExecutionHandler.CanExecute (cmd); " is 130.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,GetDefaultNamespace,The length of the statement  "	string defaultNmspc = !string.IsNullOrEmpty (DefaultNamespace) ? DefaultNamespace : SanitisePotentialNamespace (Name) ?? "Application"; " is 135.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,SanitisePotentialNamespace,The length of the statement  "		if (char.IsLetter (c) || c == '_' || (sb.Length > 0 && (char.IsLetterOrDigit (sb [sb.Length - 1]) || sb [sb.Length - 1] == '_') && (c == '.' || char.IsNumber (c)))) { " is 166.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,UpdateSystemReferences,The length of the statement  "			string newRef = AssemblyContext.GetAssemblyNameForVersion (pref.Reference' pref.Package != null ? pref.Package.Name : null' this.TargetFramework); " is 146.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,DoExecute,The length of the statement  "	IConsole console = dotNetProjectConfig.ExternalConsole ? context.ExternalConsoleFactory.CreateConsole (!dotNetProjectConfig.PauseConsoleOutput) : context.ConsoleFactory.CreateConsole (!dotNetProjectConfig.PauseConsoleOutput); " is 225.
Long Statement,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,DoExecute,The length of the statement  "				monitor.ReportError (GettextCatalog.GetString ("Can not execute \"{0}\". The selected execution mode is not supported for .NET projects."' dotNetProjectConfig.CompiledOutputName)' null); " is 186.
Long Statement,MonoDevelop.Projects,DotNetAssemblyProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetAssemblyProject.cs,GetDefaultTargetPlatform,The length of the statement  "		ItemConfiguration conf = projectCreateInfo.ParentFolder.ParentSolution.GetConfiguration (projectCreateInfo.ActiveConfiguration); " is 128.
Long Statement,MonoDevelop.Projects,HelpExtension,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\HelpService.cs,GetMonodocDocumentation,The length of the statement  "	var declaringXml = HelpService.HelpTree != null && member.DeclaringTypeDefinition != null ? HelpService.HelpTree.GetHelpXml (member.DeclaringTypeDefinition.GetIdString ()) : null; " is 179.
Long Statement,MonoDevelop.Projects,CompiledAssemblyProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CompiledAssemblyProject.cs,LoadFrom,The length of the statement  "	var tid = Runtime.SystemAssemblyService.GetTargetFrameworkForAssembly (Runtime.SystemAssemblyService.DefaultRuntime' assemblyPath); " is 131.
Long Statement,MonoDevelop.Projects,CompiledAssemblyProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CompiledAssemblyProject.cs,OnExecute,The length of the statement  "	IConsole console = conf.ExternalConsole ? context.ExternalConsoleFactory.CreateConsole (!conf.PauseConsoleOutput) : context.ConsoleFactory.CreateConsole (!conf.PauseConsoleOutput); " is 180.
Long Statement,MonoDevelop.Projects,CompiledAssemblyProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CompiledAssemblyProject.cs,OnExecute,The length of the statement  "				monitor.ReportError (GettextCatalog.GetString ("Can not execute \"{0}\". The selected execution mode is not supported for .NET projects."' FileName)' null); " is 156.
Long Statement,MonoDevelop.Projects,PortableDotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\PortableDotNetProject.cs,OnGetReferencedAssemblies,The length of the statement  "	var asms = TargetRuntime.AssemblyContext.GetAssemblies (TargetFramework).Where (a => a.Package.IsFrameworkPackage).Select (a => a.Location); " is 140.
Long Statement,MonoDevelop.Core.Assemblies,SystemAssembly,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\SystemAssembly.cs,FromFile,The length of the statement  "	string token = (string.IsNullOrEmpty (ainfo.PublicKeyToken) || ainfo.PublicKeyToken == "null") ? String.Empty : "' PublicKeyToken=" + ainfo.PublicKeyToken; " is 155.
Long Statement,MonoDevelop.Core.Assemblies,MonoTargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoTargetRuntime.cs,GetAllPkgConfigFiles,The length of the statement  "			LoggingService.LogError (string.Format ("Runtime '{0}' error in pc file scan of directory '{1}'"' DisplayName' pcdir)' ex); " is 123.
Long Statement,MonoDevelop.Core.Assemblies,PcFileCacheContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoTargetRuntime.cs,StoreCustomData,The length of the statement  "		TargetFrameworkMoniker targetFramework = Runtime.SystemAssemblyService.GetTargetFrameworkForAssembly (Runtime.SystemAssemblyService.CurrentRuntime' pi.File); " is 157.
Long Statement,MonoDevelop.Core.Assemblies,TargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetRuntime.cs,ExecuteAssembly,The length of the statement  "			throw new InvalidOperationException (string.Format ("No compatible framework found for assembly '{0}' (required framework: {1})"' pinfo.FileName' fxId)); " is 153.
Long Statement,MonoDevelop.Core.Assemblies,TargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetRuntime.cs,EnsureInitialized,The length of the statement  "				// If we are here' that's because 1) the runtime has been initialized' or 2) the runtime is being initialized by *this* thread " is 126.
Long Statement,MonoDevelop.Core.Assemblies,TargetFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFramework.cs,FromFrameworkDirectory,The length of the statement  "					ainfo.ProcessorArchitecture = (ProcessorArchitecture)Enum.Parse (typeof(ProcessorArchitecture)' reader.ReadContentAsString ()' true); " is 133.
Long Statement,MonoDevelop.Core.Assemblies,SystemAssemblyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\SystemAssemblyService.cs,Initialize,The length of the statement  "	foreach (ITargetRuntimeFactory factory in AddinManager.GetExtensionObjects ("/MonoDevelop/Core/Runtimes"' typeof(ITargetRuntimeFactory))) { " is 139.
Long Statement,MonoDevelop.Core.Assemblies,SystemAssemblyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\SystemAssemblyService.cs,CreateClosedUniverse,The length of the statement  "	const IKVM.Reflection.UniverseOptions ikvmOptions = IKVM.Reflection.UniverseOptions.DisablePseudoCustomAttributeRetrieval | IKVM.Reflection.UniverseOptions.SupressReferenceTypeIdentityConversion | IKVM.Reflection.UniverseOptions.ResolveMissingMembers; " is 251.
Long Statement,MonoDevelop.Core.Assemblies,SystemAssemblyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\SystemAssemblyService.cs,GetTargetFrameworkForAssembly,The length of the statement  "		var att = assembly.CustomAttributes.FirstOrDefault (a => a.AttributeType.FullName == "System.Runtime.Versioning.TargetFrameworkAttribute"); " is 139.
Long Statement,MonoDevelop.Core.Assemblies,MonoRuntimeInfo,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoRuntimeInfo.cs,InternalInitialize,The length of the statement  "	envVars ["PATH"] = libDir + Path.PathSeparator + binDir + Path.PathSeparator + Environment.GetEnvironmentVariable ("PATH"); " is 123.
Long Statement,MonoDevelop.Core.Assemblies,MonoRuntimeInfo,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoRuntimeInfo.cs,FromCurrentRuntime,The length of the statement  "	string ver = (string)t.InvokeMember ("GetDisplayName"' BindingFlags.InvokeMethod | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public' null' null' null); " is 169.
Long Statement,MonoDevelop.Core.Assemblies,MonoRuntimeInfo,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoRuntimeInfo.cs,FromCurrentRuntime,The length of the statement  "	rt.SetupPkgconfigPaths (Environment.GetEnvironmentVariable ("PKG_CONFIG_PATH")' Environment.GetEnvironmentVariable ("PKG_CONFIG_LIBDIR")); " is 138.
Long Statement,MonoDevelop.Core.Assemblies,MsNetTargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetTargetRuntime.cs,GetProgramFilesX86,The length of the statement  "	return Environment.GetFolderPath (IntPtr.Size == 8 ? Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles); " is 137.
Long Statement,MonoDevelop.Core.Assemblies,MsNetTargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetTargetRuntime.cs,OnInitialize,The length of the statement  "		RegistryKey fxKey = Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\.NETFramework\v" + fx.Id.Version + @"\AssemblyFoldersEx"' false); " is 140.
Long Statement,MonoDevelop.Core.Assemblies,MsNetTargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetTargetRuntime.cs,OnInitialize,The length of the statement  "			fxKey = Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\.NETFramework\" + clrVer + @"\AssemblyFoldersEx"' false); " is 120.
Long Statement,MonoDevelop.Core.Assemblies,MsNetTargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetTargetRuntime.cs,GetMSBuildBinPath,The length of the statement  "	RegistryKey msb = Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\MSBuild\ToolsVersions\" + toolsVersion' false); " is 120.
Long Statement,MonoDevelop.Core.Assemblies,MonoFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoFrameworkBackend.cs,GetReferenceAssembliesFolder,The length of the statement  "			if (reader.ReadToDescendant ("FileList") && reader.MoveToAttribute ("TargetFrameworkDirectory") && reader.ReadAttributeValue ()) { " is 130.
Long Statement,MonoDevelop.Core.Assemblies,MsNetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetFrameworkBackend.cs,GetFrameworkFolders,The length of the statement  "		RegistryKey fxFolderKey = Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\.NETFramework\AssemblyFolders\v" + framework.Id.Version' false); " is 145.
Long Statement,MonoDevelop.Core.Assemblies,MsNetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetFrameworkBackend.cs,GetProgramFilesX86,The length of the statement  "	return Environment.GetFolderPath (IntPtr.Size == 8 ? Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles); " is 137.
Long Statement,MonoDevelop.Core.Assemblies,DirectoryAssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\DirectoryAssemblyContext.cs,RegisterAssembly,The length of the statement  "	spi.TargetFramework = Runtime.SystemAssemblyService.GetTargetFrameworkForAssembly (Runtime.SystemAssemblyService.CurrentRuntime' file); " is 135.
Long Statement,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,RegisterPackage,The length of the statement  "		if (pinfo.IsFrameworkPackage || !GetAssembliesFromFullNameInternal (asm.FullName' false).Any (a => a.Package != null && a.Package.IsFrameworkPackage)) " is 150.
Long Statement,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,GetAssemblyForVersion,The length of the statement  "			if (rpack.IsFrameworkPackage && fx.IncludesFramework (rpack.TargetFramework) && Path.GetFileName (fxAsm.Location) == fname) " is 123.
Long Statement,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,InternalAddPackage,The length of the statement  "	if (package.IsFrameworkPackage && !string.IsNullOrEmpty (package.Name) && packagesHash.TryGetValue (package.Name' out oldPackage) && !oldPackage.IsFrameworkPackage) { " is 166.
Long Statement,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,ParsePackageInfo,The length of the statement  "	monoPrefix = Path.GetFullPath (monoPrefix + Path.DirectorySeparatorChar + "lib" + Path.DirectorySeparatorChar + "mono" + Path.DirectorySeparatorChar); " is 150.
Long Statement,MonoDevelop.Core.Instrumentation,InstrumentationService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Instrumentation\InstrumentationService.cs,GetRemoteService,The length of the statement  "	return (IInstrumentationService)Activator.GetObject (typeof(IInstrumentationService)' "tcp://" + hostAndPort + "/InstrumentationService"); " is 138.
Long Statement,Mono.Options,OptionValueCollection,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,Mono.Options,Option,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,Parse,The length of the statement  "	bool nullable = tt.IsValueType && tt.IsGenericType && !tt.IsGenericTypeDefinition && tt.GetGenericTypeDefinition () == typeof(Nullable<>); " is 138.
Long Statement,Mono.Options,Option,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' targetType.Name' c.OptionName)' c.OptionName' e); " is 193.
Long Statement,Mono.Options,Option,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,Mono.Options,Option,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' StringSplitOptions.None) : new string[] { " is 137.
Long Statement,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Long Statement,MonoDevelop.Projects.Extensions,ItemTypeNode,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Extensions\ItemTypeNode.cs,CreateHandler,The length of the statement  "		throw new InvalidOperationException ("Error while creating a MSBuildHandler. Expected an object of type '" + typeof(T).FullName + "' found type '" + h.GetType ()); " is 163.
Long Statement,MonoDevelop.Projects.Extensions,ItemTypeNode,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Extensions\ItemTypeNode.cs,OnCreateHandler,The length of the statement  "			throw new InvalidOperationException ("Type '" + handlerType + "' must be a subclass of 'MonoDevelop.Projects.Formats.MSBuild.MSBuildHandler'"); " is 143.
Long Statement,MonoDevelop.Projects.Extensions,UnknownProjectTypeNode,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Extensions\UnknownProjectTypeNode.cs,GetInstructions,The length of the statement  "	return BrandingService.BrandApplicationName (GettextCatalog.GetString ("This project type is not supported by MonoDevelop.")); " is 126.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,OnBuild,The length of the statement  "		string msg = GettextCatalog.GetString ("Unknown language '{0}'. You may need to install an additional add-in to support this language."' project.LanguageName); " is 159.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,OnBuild,The length of the statement  "				msg = GettextCatalog.GetString ("Reference '{0}' not found on system. Using '{1}' instead."' pr.StoredReference' pr.Reference); " is 127.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,OnBuild,The length of the statement  "						msg = GettextCatalog.GetString ("Assembly '{0}' not found. Make sure that the assembly exists in disk. If the reference is required to build the project you may get compilation errors."' Path.GetFileName (asm)); " is 211.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,OnBuild,The length of the statement  "					msg = GettextCatalog.GetString ("The reference '{0}' is not valid for the target framework of the project."' pr.StoredReference' pr.Reference); " is 143.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,OnBuild,The length of the statement  "		if (!itemsToExclude.Contains (item) && (string.IsNullOrEmpty (item.Condition) || ConditionParser.ParseAndEvaluate (item.Condition' ctx))) " is 137.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,BuildResources,The length of the statement  "		CompilerError ce = GetResourceId (configuration.IntermediateOutputDirectory.Combine (finfo.ResourceId)' env' finfo' ref fname' resgen' out resourceId' monitor); " is 160.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,BuildResources,The length of the statement  "	CompilerError err = GenerateSatelliteAssemblies (resourcesByCulture' configuration.OutputDirectory' al' Path.GetFileName (configuration.OutputAssembly)' monitor); " is 162.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The length of the statement  "		return new CompilerError (fname' 0' 0' String.Empty' GettextCatalog.GetString ("Unable to build ResourceId for {0}."' fname)); " is 126.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The length of the statement  "			ProcessStartInfo info = Runtime.ProcessService.CreateProcessStartInfo (resgen' String.Format ("/compile \"{0}\""' fname)' Path.GetDirectoryName (fname)' false); " is 160.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The length of the statement  "			LoggingService.LogDebug (GettextCatalog.GetString ("Error while trying to invoke '{0}' to compile resource '{1}' :\n {2}"' resgen' fname' ex.ToString ())); " is 155.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The length of the statement  "			monitor.Log.WriteLine (GettextCatalog.GetString ("Error while trying to invoke '{0}' to compile resource '{1}' :\n {2}"' resgen' fname' ex.Message)); " is 149.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The length of the statement  "			LoggingService.LogDebug (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output)); " is 139.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The length of the statement  "			monitor.Log.WriteLine (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output)); " is 137.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GenerateSatelliteAssemblies,The length of the statement  "			monitor.Log.WriteLine (GettextCatalog.GetString ("Generating satellite assembly for '{0}' culture with {1}"' culture' al)); " is 123.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GenerateSatelliteAssemblies,The length of the statement  "				LoggingService.LogDebug (GettextCatalog.GetString ("Error while trying to invoke '{0}' to generate satellite assembly for '{1}' culture:\n {2}"' al' culture' ex.ToString ())); " is 175.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GenerateSatelliteAssemblies,The length of the statement  "				monitor.Log.WriteLine (GettextCatalog.GetString ("Error while trying to invoke '{0}' to generate satellite assembly for '{1}' culture:\n {2}"' al' culture' ex.Message)); " is 169.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GenerateSatelliteAssemblies,The length of the statement  "				LoggingService.LogDebug (GettextCatalog.GetString ("Unable to generate satellite assemblies for '{0}' culture with {1}.\nReason: \n{2}\n"' culture' al' output)); " is 161.
Long Statement,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GenerateSatelliteAssemblies,The length of the statement  "				monitor.Log.WriteLine (GettextCatalog.GetString ("Unable to generate satellite assemblies for '{0}' culture with {1}.\nReason: \n{2}\n"' culture' al' output)); " is 159.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildFileFormat.cs,GetCompatibilityWarnings,The length of the statement  "			GettextCatalog.GetString ("The project '{0}' is being saved using the file format '{1}'' but this version of Visual Studio " + "does not support the framework that the project is targetting ({2})"' prj.Name' ProductDescription' prj.TargetFramework.Name) " is 253.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,GetProjectBuilder,The length of the statement  "	if (projectBuilder == null || lastBuildToolsVersion != toolsVersion || lastBuildRuntime != runtime.Id || lastFileName != item.FileName) { " is 137.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,RunTarget,The length of the statement  "			MSBuildResult[] results = builder.RunTarget (target' configs' logWriter' MSBuildProjectService.DefaultMSBuildVerbosity); " is 120.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,Load,The length of the statement  "			monitor.ReportWarning (GettextCatalog.GetString ("Project '{0}' has a ToolsVersion that does not match the containing solution."' Path.GetFileNameWithoutExtension (fileName))); " is 176.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,MigrateProject,The length of the statement  "	var migrationType = st.MigrationHandler.CanPromptForMigration ? st.MigrationHandler.PromptForMigration (projectLoadMonitor' p' fileName' language) : projectLoadMonitor.ShouldMigrateProject (); " is 192.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,MigrateProject,The length of the statement  "			monitor.ReportError (string.Format ("{1} cannot open the project '{0}' unless it is migrated."' Path.GetFileName (fileName)' BrandingService.ApplicationName)' null); " is 165.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,Load,The length of the statement  "		targetFx = new TargetFrameworkMoniker (string.IsNullOrEmpty (frameworkIdentifier) ? def.Identifier : frameworkIdentifier' string.IsNullOrEmpty (frameworkVersion) ? def.Version : frameworkVersion' string.IsNullOrEmpty (frameworkProfile) ? def.Profile : frameworkProfile); " is 270.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,Load,The length of the statement  "	MSBuildPropertyGroup mergedToProjectProperties = ExtractMergedtoprojectProperties (ser' globalGroup' EntityItem.CreateConfiguration ("Dummy")); " is 143.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,GetMergedConfiguration,The length of the statement  "		if ((grp.Config == conf || grp.Config == Unspecified || conf == Unspecified) && (grp.Platform == platform || grp.Platform == Unspecified || platform == Unspecified)) { " is 167.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProject,The length of the statement  "		ClassDataType dt = (ClassDataType)ser.DataContext.GetConfigurationDataType (dotNetProject.LanguageParameters.GetType ()); " is 121.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProject,The length of the statement  "		var mergeToProjectProperties = new HashSet<MergedProperty> (GetMergeToProjectProperties (ser' eitem.Configurations [0])); " is 121.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProject,The length of the statement  "				ClassDataType dt = (ClassDataType)ser.DataContext.GetConfigurationDataType (netConfig.CompilationParameters.GetType ()); " is 120.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProject,The length of the statement  "			WritePropertyGroupMetadata (propGroup' ditem.ItemData' ser' conf' netConfig != null ? netConfig.CompilationParameters : null); " is 126.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProjectFile,The length of the statement  "		buildItem.SetMetadata ("DependentUpon"' MSBuildProjectService.ToMSBuildPath (Path.GetDirectoryName (file.FilePath)' file.DependsOn)); " is 133.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveReference,The length of the statement  "		if (supportedFrameworks != null && dnp != null && pkg != null && dnp.TargetFramework.Id.Identifier == TargetFrameworkMoniker.ID_NET_FRAMEWORK && pkg.IsFrameworkPackage && supportedFrameworks.Contains (pkg.TargetFramework) && pkg.TargetFramework.Version != "2.0" && supportedFrameworks.Count > 1) { " is 297.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveReference,The length of the statement  "			buildItem = AddOrGetBuildItem (msproject' oldItems' "ProjectReference"' MSBuildProjectService.ToMSBuildPath (Item.ItemDirectory' refProj.FileName)); " is 148.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,UpdateImports,The length of the statement  "	foreach (IMSBuildImportProvider ip in AddinManager.GetExtensionObjects ("/MonoDevelop/ProjectModel/MSBuildImportProviders")) { " is 126.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,WritePropertyGroupMetadata,The length of the statement  "		// In the other msbuild contexts (metadata' solution properties' etc) we TitleCase by default' so the node.Value is TitleCase. " is 126.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ReadProjectFile,The length of the statement  "			MonoDevelop.Core.LoggingService.LogWarning ("Unrecognised value {0} for CopyToOutputDirectory MSBuild property"' copyToOutputDirectory); " is 136.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteProjects,The length of the statement  "			writer.WriteLine (@"Project(""{0}"") = ""{1}""' ""{2}""' ""{3}"""' handler.TypeGuid' item.Name' FileService.NormalizeRelativePath (FileService.AbsoluteToRelativePath (baseDirectory' item.FileName)).Replace ('/'' '\\')' ce.ItemId); " is 230.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteProjects,The length of the statement  "			writer.WriteLine (@"Project(""{0}"") = ""{1}""' ""{2}""' ""{3}"""' MSBuildProjectService.FolderTypeGuid' ce.Name' ce.Name' ce.ItemId); " is 134.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteProjectConfigurations,The length of the statement  "			list.Add (String.Format ("\t\t{0}.{1}.ActiveCfg = {2}"' itemGuid' ToSlnConfigurationId (cc)' ToSlnConfigurationId (cce.ItemConfiguration))); " is 140.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteProjectConfigurations,The length of the statement  "				list.Add (String.Format ("\t\t{0}.{1}.Build.0 = {2}"' itemGuid' ToSlnConfigurationId (cc)' ToSlnConfigurationId (cce.ItemConfiguration))); " is 138.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteProjectConfigurations,The length of the statement  "				list.Add (String.Format ("\t\t{0}.{1}.Deploy.0 = {2}"' itemGuid' ToSlnConfigurationId (cc)' ToSlnConfigurationId (cce.ItemConfiguration))); " is 139.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "			LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project definition on line number #{0} in file '{1}'. Ignoring."' sec.Start + 1' fileName)); " is 152.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "			LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project type guid '{0}' on line #{1}. Ignoring."' match.Groups [1].Value' sec.Start + 1)); " is 150.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "			monitor.ReportWarning (GettextCatalog.GetString ("{0}({1}): Projects with non-local source (http://...) not supported. '{2}'."' fileName' sec.Start + 1' projectPath)); " is 167.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "			LoggingService.LogWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath)); " is 120.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "						LoggingService.LogWarning (string.Format ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ())); " is 143.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "						monitor.ReportWarning (GettextCatalog.GetString ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ())); " is 150.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "						monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name)); " is 126.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "				monitor.ReportWarning (GettextCatalog.GetString ("Error while trying to load the project '{0}': {1}"' projectPath' e.Message)); " is 127.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The length of the statement  "			monitor.ReportError (GettextCatalog.GetString ("Invalid solution file. There are two projects with the same GUID. The project {0} will be ignored."' projectPath)' null); " is 169.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The length of the statement  "			LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1)); " is 160.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The length of the statement  "			LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid)); " is 166.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,GetProjectBuilder,The length of the statement  "					error = "MSBuild 2013 is not installed. Please download and install it from " + "http://www.microsoft.com/en-us/download/details.aspx?id=40760"; " is 144.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,GetProjectBuilder,The length of the statement  "			throw new InvalidOperationException (error ?? string.Format ("Runtime '{0}' does not have MSBuild '{1}' ToolsVersion installed"' runtime.Id' toolsVersion)); " is 156.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,GetUnknownProjectTypeInfo,The length of the statement  "	var nodes = AddinManager.GetExtensionNodes<UnknownProjectTypeNode> ("/MonoDevelop/ProjectModel/UnknownMSBuildProjectTypes").Where (p => guids.Any (p.MatchesGuid)).ToList (); " is 173.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,RemoveImport,The length of the statement  "	XmlElement elem = (XmlElement)doc.DocumentElement.SelectSingleNode ("tns:Import[@Project='" + name + "']"' XmlNamespaceManager); " is 128.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,AddNewPropertyGroup,The length of the statement  "		XmlElement last = doc.DocumentElement.SelectSingleNode ("tns:PropertyGroup[last()]"' XmlNamespaceManager) as XmlElement; " is 120.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,GetProjectExtensions,The length of the statement  "	XmlElement elem = doc.DocumentElement.SelectSingleNode ("tns:ProjectExtensions/tns:" + section' XmlNamespaceManager) as XmlElement; " is 131.
Long Statement,MonoDevelop.Projects.Formats.MSBuild,MSBuildProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,RemoveProjectExtensions,The length of the statement  "	XmlElement elem = doc.DocumentElement.SelectSingleNode ("tns:ProjectExtensions/tns:" + section' XmlNamespaceManager) as XmlElement; " is 131.
Long Statement,Microsoft.Build.BuildEngine,ConditionParser,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionParser.cs,ParseCondition,The length of the statement  "		throw new ExpressionParseException (String.Format ("Unexpected token at end of condition: \"{0}\""' parser.tokenizer.Token.Value)); " is 131.
Long Statement,Microsoft.Build.BuildEngine,ConditionParser,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionParser.cs,ParseRelationalExpression,The length of the statement  "	if (tokenizer.IsToken (TokenType.Less) || tokenizer.IsToken (TokenType.Greater) || tokenizer.IsToken (TokenType.Equal) || tokenizer.IsToken (TokenType.NotEqual) || tokenizer.IsToken (TokenType.LessOrEqual) || tokenizer.IsToken (TokenType.GreaterOrEqual)) { " is 256.
Long Statement,Microsoft.Build.BuildEngine,ConditionParser,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionParser.cs,ExpectToken,The length of the statement  "		throw new ExpressionParseException ("Expected token type of type: " + type + "' got " + tokenizer.Token.Type + " (" + tokenizer.Token.Value + ") ."); " is 149.
Long Statement,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,Expect,The length of the statement  "		throw new ExpressionParseException ("Expected token type of type: " + type + "' got " + token.Type + " (" + token.Value + ") ."); " is 129.
Long Statement,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,ExtractOverlay,The length of the statement  "			throw new InvalidOperationException ("Data node '" + val.Name + "' has null value' which cannot safely " + "be diff-serialised."); " is 130.
Long Statement,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,ExtractOverlay,The length of the statement  "					throw new InvalidOperationException ("Data node '" + val.Name + "' has null value' which cannot safely " + "be diff-serialised."); " is 130.
Long Statement,MonoDevelop.Projects.Policies,PolicySet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicySet.cs,AddSerializedPolicies,The length of the statement  "			throw new InvalidOperationException ("Cannot add second policy of type '" + key.ToString () + "' to policy set '" + Id + "'"); " is 126.
Long Statement,MonoDevelop.Projects.Policies,PolicySet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicySet.cs,LoadFromXml,The length of the statement  "			throw new InvalidOperationException ("Cannot add second policy of type '" + key.ToString () + "' to policy set '" + Id + "'"); " is 126.
Long Statement,MonoDevelop.Projects.Policies,DotNetNamingPolicy,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\DotNetNamingPolicy.cs,Equals,The length of the statement  "	return other != null && other.DirectoryNamespaceAssociation == DirectoryNamespaceAssociation && other.ResourceNamePolicy == ResourceNamePolicy; " is 143.
Long Statement,MonoDevelop.Core.Setup,AddinSetupService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Setup\AddinSetupService.cs,GetMainRepositoryUrl,The length of the statement  "	return "http://addins.monodevelop.com/" + level + "/" + platform + "/" + AddinManager.CurrentAddin.Version + "/main.mrep"; " is 122.
Long Statement,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,GetResponse,The length of the statement  "			request.Proxy.Credentials = credentialCache.GetCredentials (proxyAddress' CredentialType.ProxyCredentials) ?? CredentialCache.DefaultCredentials; " is 145.
Long Statement,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,GetResponse,The length of the statement  "		if (!previousStatusCode.HasValue && (previousResponse == null || ShouldKeepAliveBeUsedInRequest (previousRequest' previousResponse))) { " is 135.
Long Statement,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,GetResponse,The length of the statement  "			request.Proxy.Credentials = credentialProvider.GetCredentials (request' oldCredentials' CredentialType.ProxyCredentials' retrying: retrying); " is 141.
Long Statement,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,GetResponse,The length of the statement  "			request.Credentials = credentialProvider.GetCredentials (request' oldCredentials' CredentialType.RequestCredentials' retrying: retrying); " is 137.
Long Statement,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,GetResponse,The length of the statement  "				if (previousStatusCode == HttpStatusCode.ProxyAuthenticationRequired && response.StatusCode != HttpStatusCode.ProxyAuthenticationRequired) { " is 140.
Long Statement,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,IsAuthenticationResponse,The length of the statement  "	return response.StatusCode == HttpStatusCode.Unauthorized || response.StatusCode == HttpStatusCode.ProxyAuthenticationRequired; " is 127.
Long Statement,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,SetKeepAliveHeaders,The length of the statement  "	// This is to work around the "The underlying connection was closed: An unexpected error occurred on a receive." exception. " is 123.
Long Statement,Xamarin.Components.Ide.Web,RequestHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Web\RequestHelper.cs,IsNtlmOrKerberos,The length of the statement  "	return authType.IndexOf ("NTLM"' StringComparison.OrdinalIgnoreCase) != -1 || authType.IndexOf ("Kerberos"' StringComparison.OrdinalIgnoreCase) != -1; " is 150.
Complex Conditional,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,RegisterAddinRepositories,The conditional expression  "rep.Url.StartsWith ("http://go-mono.com/md/") || (rep.Url.StartsWith ("http://monodevelop.com/files/addins/")) || (rep.Url.StartsWith ("http://addins.monodevelop.com/") && !validUrls.Contains (rep.Url))"  is complex.
Complex Conditional,MonoDevelop.Core,EventQueue,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,Thaw,The conditional expression  "next != null && (next.Args.GetType () == ev.Args.GetType ()) && next.Delegate () == del && next.ThisObject == ev.ThisObject"  is complex.
Complex Conditional,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,EscapeName,The conditional expression  "c != '.' && c != '-' && !char.IsLetter (c) && (!char.IsNumber (c) || n == 0)"  is complex.
Complex Conditional,MonoDevelop.Core.Serialization,GenericCollectionHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\GenericCollectionHandler.cs,CreateHandler,The conditional expression  "prop.CanWrite && pi != null && pi.Length == 1 && pi [0].ParameterType == typeof(int)"  is complex.
Complex Conditional,MonoDevelop.Core.Serialization,XmlConfigurationWriter,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\XmlDataSerializer.cs,WriteAttributes,The conditional expression  "val != null && (item.UniqueNames || val.StoreAsAttribute) && StoreAsAttribute (val)"  is complex.
Complex Conditional,MonoDevelop.Projects,Solution,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Solution.cs,ConvertToSolutionFormat,The conditional expression  "force || !FileFormat.Format.SupportsMixedFormats || eitem == null || !eitem.IsSaved"  is complex.
Complex Conditional,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,SanitisePotentialNamespace,The conditional expression  "char.IsLetter (c) || c == '_' || (sb.Length > 0 && (char.IsLetterOrDigit (sb [sb.Length - 1]) || sb [sb.Length - 1] == '_') && (c == '.' || char.IsNumber (c)))"  is complex.
Complex Conditional,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,InternalAddPackage,The conditional expression  "package.IsFrameworkPackage && !string.IsNullOrEmpty (package.Name) && packagesHash.TryGetValue (package.Name' out oldPackage) && !oldPackage.IsFrameworkPackage"  is complex.
Complex Conditional,MonoDevelop.Core.Assemblies,RuntimeAssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\RuntimeAssemblyContext.cs,GetGacFile,The conditional expression  "name == null || version == null || culture == null || token == null"  is complex.
Complex Conditional,MonoDevelop.Core.Assemblies,TargetFrameworkMoniker,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFrameworkMoniker.cs,TargetFrameworkMoniker,The conditional expression  "version == null || version.Length == 0 || (version.Length == 1 && version [0] == 'v')"  is complex.
Complex Conditional,Mono.Options,Option,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Complex Conditional,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,GetProjectBuilder,The conditional expression  "projectBuilder == null || lastBuildToolsVersion != toolsVersion || lastBuildRuntime != runtime.Id || lastFileName != item.FileName"  is complex.
Complex Conditional,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,GetMergedConfiguration,The conditional expression  "(grp.Config == conf || grp.Config == Unspecified || conf == Unspecified) && (grp.Platform == platform || grp.Platform == Unspecified || platform == Unspecified)"  is complex.
Complex Conditional,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveProject,The conditional expression  "(!cd.Exists && cd.FullySpecified) || (cd.IsNew && !cd.Group.Properties.Any ())"  is complex.
Complex Conditional,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,SaveReference,The conditional expression  "supportedFrameworks != null && dnp != null && pkg != null && dnp.TargetFramework.Id.Identifier == TargetFrameworkMoniker.ID_NET_FRAMEWORK && pkg.IsFrameworkPackage && supportedFrameworks.Contains (pkg.TargetFramework) && pkg.TargetFramework.Version != "2.0" && supportedFrameworks.Count > 1"  is complex.
Complex Conditional,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,EncodeString,The conditional expression  "fc == ' ' || fc == '"' || fc == '$' || lc == ' '"  is complex.
Complex Conditional,Microsoft.Build.BuildEngine,ConditionParser,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionParser.cs,ParseRelationalExpression,The conditional expression  "tokenizer.IsToken (TokenType.Less) || tokenizer.IsToken (TokenType.Greater) || tokenizer.IsToken (TokenType.Equal) || tokenizer.IsToken (TokenType.NotEqual) || tokenizer.IsToken (TokenType.LessOrEqual) || tokenizer.IsToken (TokenType.GreaterOrEqual)"  is complex.
Complex Conditional,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,GetMatchingSets,The conditional expression  "match != null && (ps.Visible || includeHidden) && match.Equals (policy)"  is complex.
Complex Conditional,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,GetMatchingSet,The conditional expression  "match != null && (ps.Visible || includeHidden) && match.Equals (policy)"  is complex.
Complex Conditional,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,GetMatchingSet,The conditional expression  "match != null && (ps.Visible || includeHidden) && match.Equals (policy)"  is complex.
Complex Conditional,MonoDevelop.Projects.Policies,PolicyContainer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyContainer.cs,CopyFrom,The conditional expression  "policies == null || !policies.TryGetValue (p.Key' out oldVal) || oldVal == null || !oldVal.Equals (p.Value)"  is complex.
Complex Conditional,MonoDevelop.Projects.Policies,PolicyContainer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyContainer.cs,Import,The conditional expression  "policies == null || !policies.TryGetValue (p.Key' out oldVal) || oldVal == null || !oldVal.Equals (p.Value)"  is complex.
Complex Conditional,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,MatchString,The conditional expression  "lane.MatchMode == MatchMode.Acronym && (wordStartMatch || (match && char.IsPunctuation (cfLower)))"  is complex.
Virtual Method Call from Constructor,MonoDevelop.Core.Serialization,DataSerializer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataSerializer.cs,DataSerializer,The constructor "DataSerializer" calls a virtual method "CreateSerializationContext".
Virtual Method Call from Constructor,MonoDevelop.Core.Serialization,DataSerializer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataSerializer.cs,DataSerializer,The constructor "DataSerializer" calls a virtual method "CreateSerializationContext".
Virtual Method Call from Constructor,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,DotNetProject,The constructor "DotNetProject" calls a virtual method "GetDefaultTargetPlatform".
Virtual Method Call from Constructor,MonoDevelop.Core.LogReporting,CrashMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.LogReporting\CrashMonitor.cs,CrashMonitor,The constructor "CrashMonitor" calls a virtual method "OnCrashDetected".
Virtual Method Call from Constructor,MonoDevelop.Core.LogReporting,CrashMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.LogReporting\CrashMonitor.cs,CrashMonitor,The constructor "CrashMonitor" calls a virtual method "OnApplicationExited".
Empty Catch Block,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,unixSetProcessName,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,SystemRename,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,HandleResponse,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core,LoggingService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\LoggingService.cs,LoggingService,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core,FilePath,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FilePath.cs,MakeWritable,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core,FilePath,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FilePath.cs,MakeWritable,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core,Platform,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Platform.cs,IsRunningOnMac,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core,Platform,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Platform.cs,InitWindowsNativeLibs,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,Start,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,RemoteProcessObjectDisposing,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,RemoteProcessObjectShuttingDown,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,WaitTimeout,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,ProcessWrapper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessWrapper.cs,Cancel,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,ProcessWrapper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessWrapper.cs,OnExited,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,ProcessWrapper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessWrapper.cs,OnExited,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,ProcessExtensions,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessExtensions.cs,KillProcessTree,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Serialization,GenericCollectionHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\GenericCollectionHandler.cs,CreateHandler,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects,ProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectService.cs,GetTargetFile,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,CheckNeedsBuild,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,CheckNeedsBuild,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects,Project,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Project.cs,OnFileChanged,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects,FileStatusTracker,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\WorkspaceItem.cs,GetLastWriteTime,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,CheckNeedsBuild,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,CheckNeedsBuild,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects,CompiledAssemblyProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\CompiledAssemblyProject.cs,LoadFrom,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Assemblies,MonoTargetRuntimeFactory,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoTargetRuntimeFactory.cs,SaveRuntimes,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Assemblies,TargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetRuntime.cs,RegisterSystemAssemblies,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,RegisterPackage,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Formats.MD1,MD1FileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1FileFormat.cs,WriteFile,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Formats.MSBuild,MSBuildFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildFileFormat.cs,ReadToolsVersion,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,WriteFile,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,GetProjectBuilder,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Formats.MSBuild,RemoteBuildEngine,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\RemoteProjectBuilder.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Formats.MSBuild,RemoteProjectBuilder,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\RemoteProjectBuilder.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Projects.Text,TextEncoding,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextEncoding.cs,TextEncoding,The method has an empty catch block.
Magic Number,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,unixSetProcessName,The following statement contains a magic number: try {  	if (prctl (15/* PR_SET_NAME */' Encoding.ASCII.GetBytes (name + "\0")' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero) != 0) {  		throw new ApplicationException ("Error setting process name: " + Mono.Unix.Native.Stdlib.GetLastError ());  	}  }  catch (EntryPointNotFoundException) {  	// Not every BSD has setproctitle  	try {  		setproctitle (Encoding.ASCII.GetBytes ("%s\0")' Encoding.ASCII.GetBytes (name + "\0"));  	}  	catch (EntryPointNotFoundException) {  	}  }  
Magic Number,MonoDevelop.Core,Runtime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Runtime.cs,unixSetProcessName,The following statement contains a magic number: if (prctl (15/* PR_SET_NAME */' Encoding.ASCII.GetBytes (name + "\0")' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero) != 0) {  	throw new ApplicationException ("Error setting process name: " + Mono.Unix.Native.Stdlib.GetLastError ());  }  
Magic Number,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,AbsoluteToRelativePath,The following statement contains a magic number: fixed (char* bPtr = baseDirectoryPath' aPtr = absPath) {  	var bEnd = bPtr + baseDirectoryPath.Length;  	var aEnd = aPtr + absPath.Length;  	char* lastStartA = aEnd;  	char* lastStartB = bEnd;  	int indx = 0;  	// search common base path  	var a = aPtr;  	var b = bPtr;  	while (a < aEnd) {  		if (*a != *b)  			break;  		if (IsSeparator (*a)) {  			indx++;  			lastStartA = a + 1;  			lastStartB = b;  		}  		a++;  		b++;  		if (b >= bEnd) {  			if (a >= aEnd || IsSeparator (*a)) {  				indx++;  				lastStartA = a + 1;  				lastStartB = b;  			}  			break;  		}  	}  	if (indx == 0)  		return absPath;  	if (lastStartA >= aEnd)  		return ".";  	// handle case a: some/path b: some/path/deeper...  	if (a >= aEnd) {  		if (IsSeparator (*b)) {  			lastStartA = a + 1;  			lastStartB = b;  		}  	}  	// look how many levels to go up into the base path  	int goUpCount = 0;  	while (lastStartB < bEnd) {  		if (IsSeparator (*lastStartB))  			goUpCount++;  		lastStartB++;  	}  	var size = goUpCount * 2 + goUpCount + aEnd - lastStartA;  	var result = new char[size];  	fixed (char* rPtr = result) {  		// go paths up  		var r = rPtr;  		for (int i = 0; i < goUpCount; i++) {  			*(r++) = '.';  			*(r++) = '.';  			*(r++) = Path.DirectorySeparatorChar;  		}  		// copy the remaining absulute path  		while (lastStartA < aEnd)  			*(r++) = *(lastStartA++);  	}  	return new string (result);  }  
Magic Number,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,NormalizeRelativePath,The following statement contains a magic number: while (result.StartsWith ("." + Path.DirectorySeparatorChar)) {  	result = result.Substring (2);  	result = result.Trim (Path.DirectorySeparatorChar);  }  
Magic Number,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,NormalizeRelativePath,The following statement contains a magic number: result = result.Substring (2);  
Magic Number,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,HandleResponse,The following statement contains a magic number: try {  	if (c.CancellationToken.IsCancellationRequested)  		c.Tcs.TrySetCanceled ();  	try {  		//TODO: limit this size in case open wifi hotspots provide bad data  		var response = (HttpWebResponse)c.Request.EndGetResponse (ar);  		if (response.StatusCode == HttpStatusCode.OK) {  			using (var fs = File.Create (tempFile))  				response.GetResponseStream ().CopyTo (fs' 2048);  		}  	}  	catch (WebException wex) {  		var httpResp = wex.Response as HttpWebResponse;  		if (httpResp != null) {  			if (httpResp.StatusCode == HttpStatusCode.NotModified) {  				c.Tcs.TrySetResult (false);  				return;  			}  			//is this valid? should we just return the WebException directly?  			else if (httpResp.StatusCode == HttpStatusCode.NotFound) {  				c.Tcs.TrySetException (new FileNotFoundException ("File not found on server"' c.Url' wex));  				return;  			}  		}  		throw;  	}  	//check the document is valid' might get bad ones from wifi hotspots etc  	if (c.ValidateDownload != null) {  		if (c.CancellationToken.IsCancellationRequested)  			c.Tcs.TrySetCanceled ();  		using (var f = File.OpenRead (tempFile)) {  			try {  				if (!c.ValidateDownload (f)) {  					c.Tcs.TrySetException (new Exception ("Failed to validate downloaded file"));  					return;  				}  			}  			catch (Exception ex) {  				c.Tcs.TrySetException (new Exception ("Failed to validate downloaded file"' ex));  			}  		}  	}  	if (c.CancellationToken.IsCancellationRequested)  		c.Tcs.TrySetCanceled ();  	SystemRename (tempFile' c.CacheFile);  	deleteTempFile = false;  	c.Tcs.TrySetResult (true);  }  catch (Exception ex) {  	c.Tcs.TrySetException (ex);  }  finally {  	if (deleteTempFile) {  		try {  			File.Delete (tempFile);  		}  		catch {  		}  	}  }  
Magic Number,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,HandleResponse,The following statement contains a magic number: try {  	//TODO: limit this size in case open wifi hotspots provide bad data  	var response = (HttpWebResponse)c.Request.EndGetResponse (ar);  	if (response.StatusCode == HttpStatusCode.OK) {  		using (var fs = File.Create (tempFile))  			response.GetResponseStream ().CopyTo (fs' 2048);  	}  }  catch (WebException wex) {  	var httpResp = wex.Response as HttpWebResponse;  	if (httpResp != null) {  		if (httpResp.StatusCode == HttpStatusCode.NotModified) {  			c.Tcs.TrySetResult (false);  			return;  		}  		//is this valid? should we just return the WebException directly?  		else if (httpResp.StatusCode == HttpStatusCode.NotFound) {  			c.Tcs.TrySetException (new FileNotFoundException ("File not found on server"' c.Url' wex));  			return;  		}  	}  	throw;  }  
Magic Number,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,HandleResponse,The following statement contains a magic number: if (response.StatusCode == HttpStatusCode.OK) {  	using (var fs = File.Create (tempFile))  		response.GetResponseStream ().CopyTo (fs' 2048);  }  
Magic Number,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,HandleResponse,The following statement contains a magic number: using (var fs = File.Create (tempFile))  	response.GetResponseStream ().CopyTo (fs' 2048);  
Magic Number,MonoDevelop.Core,FileService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\FileService.cs,HandleResponse,The following statement contains a magic number: response.GetResponseStream ().CopyTo (fs' 2048);  
Magic Number,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,UnescapeName,The following statement contains a magic number: for (int n = 0; n < str.Length; n++) {  	char c = str [n];  	if (c == '_') {  		if (n + 1 >= str.Length)  			return sb.ToString ();  		if (str [n + 1] == '_') {  			sb.Append (c);  			n++;  		}  		else {  			int len = int.Parse (str.Substring (n + 1' 1));  			if (n + 2 + len - 1 >= str.Length)  				return sb.ToString ();  			int ic;  			if (int.TryParse (str.Substring (n + 2' len)' NumberStyles.HexNumber' null' out ic))  				sb.Append ((char)ic);  			n += len + 1;  		}  	}  	else  		sb.Append (c);  }  
Magic Number,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,UnescapeName,The following statement contains a magic number: for (int n = 0; n < str.Length; n++) {  	char c = str [n];  	if (c == '_') {  		if (n + 1 >= str.Length)  			return sb.ToString ();  		if (str [n + 1] == '_') {  			sb.Append (c);  			n++;  		}  		else {  			int len = int.Parse (str.Substring (n + 1' 1));  			if (n + 2 + len - 1 >= str.Length)  				return sb.ToString ();  			int ic;  			if (int.TryParse (str.Substring (n + 2' len)' NumberStyles.HexNumber' null' out ic))  				sb.Append ((char)ic);  			n += len + 1;  		}  	}  	else  		sb.Append (c);  }  
Magic Number,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,UnescapeName,The following statement contains a magic number: if (c == '_') {  	if (n + 1 >= str.Length)  		return sb.ToString ();  	if (str [n + 1] == '_') {  		sb.Append (c);  		n++;  	}  	else {  		int len = int.Parse (str.Substring (n + 1' 1));  		if (n + 2 + len - 1 >= str.Length)  			return sb.ToString ();  		int ic;  		if (int.TryParse (str.Substring (n + 2' len)' NumberStyles.HexNumber' null' out ic))  			sb.Append ((char)ic);  		n += len + 1;  	}  }  else  	sb.Append (c);  
Magic Number,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,UnescapeName,The following statement contains a magic number: if (c == '_') {  	if (n + 1 >= str.Length)  		return sb.ToString ();  	if (str [n + 1] == '_') {  		sb.Append (c);  		n++;  	}  	else {  		int len = int.Parse (str.Substring (n + 1' 1));  		if (n + 2 + len - 1 >= str.Length)  			return sb.ToString ();  		int ic;  		if (int.TryParse (str.Substring (n + 2' len)' NumberStyles.HexNumber' null' out ic))  			sb.Append ((char)ic);  		n += len + 1;  	}  }  else  	sb.Append (c);  
Magic Number,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,UnescapeName,The following statement contains a magic number: if (str [n + 1] == '_') {  	sb.Append (c);  	n++;  }  else {  	int len = int.Parse (str.Substring (n + 1' 1));  	if (n + 2 + len - 1 >= str.Length)  		return sb.ToString ();  	int ic;  	if (int.TryParse (str.Substring (n + 2' len)' NumberStyles.HexNumber' null' out ic))  		sb.Append ((char)ic);  	n += len + 1;  }  
Magic Number,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,UnescapeName,The following statement contains a magic number: if (str [n + 1] == '_') {  	sb.Append (c);  	n++;  }  else {  	int len = int.Parse (str.Substring (n + 1' 1));  	if (n + 2 + len - 1 >= str.Length)  		return sb.ToString ();  	int ic;  	if (int.TryParse (str.Substring (n + 2' len)' NumberStyles.HexNumber' null' out ic))  		sb.Append ((char)ic);  	n += len + 1;  }  
Magic Number,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,UnescapeName,The following statement contains a magic number: if (n + 2 + len - 1 >= str.Length)  	return sb.ToString ();  
Magic Number,MonoDevelop.Core,PropertyBag,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\PropertyBag.cs,UnescapeName,The following statement contains a magic number: if (int.TryParse (str.Substring (n + 2' len)' NumberStyles.HexNumber' null' out ic))  	sb.Append ((char)ic);  
Magic Number,MonoDevelop.Core,UserDataMigrationService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\UserDataMigrationService.cs,CheckVersion,The following statement contains a magic number: if (sourceVersion.IndexOf ('-') > 0) {  	var split = sourceVersion.Split ('-');  	if (split.Length != 2) {  		throw new Exception ("Invalid migration sourceVersion range in " + node.Addin.Id);  	}  	var idx = IndexOfVersion (null' version);  	var lower = IndexOfVersion (node' split [0]);  	var upper = IndexOfVersion (node' split [1]);  	return lower >= 0 && upper >= 0 && idx >= lower && idx >= upper;  }  
Magic Number,MonoDevelop.Core,UserDataMigrationService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\UserDataMigrationService.cs,CheckVersion,The following statement contains a magic number: if (split.Length != 2) {  	throw new Exception ("Invalid migration sourceVersion range in " + node.Addin.Id);  }  
Magic Number,MonoDevelop.Core,Platform,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Platform.cs,IsRunningOnMac,The following statement contains a magic number: try {  	buf = Marshal.AllocHGlobal (8192);  	// This is a hacktastic way of getting sysname from uname ()  	if (uname (buf) == 0) {  		string os = Marshal.PtrToStringAnsi (buf);  		if (os == "Darwin")  			return true;  	}  }  catch {  }  finally {  	if (buf != IntPtr.Zero)  		Marshal.FreeHGlobal (buf);  }  
Magic Number,MonoDevelop.Core,Platform,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Platform.cs,IsRunningOnMac,The following statement contains a magic number: buf = Marshal.AllocHGlobal (8192);  
Magic Number,MonoDevelop.Core,MacSystemInformation,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\MacSystemInformation.cs,Gestalt,The following statement contains a magic number: System.Diagnostics.Debug.Assert (selector != null && selector.Length == 4);  
Magic Number,MonoDevelop.Core,WindowsSystemInformation,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\WindowsSystemInformation.cs,AppendOperatingSystem,The following statement contains a magic number: if (IntPtr.Size == 8 || Environment.GetEnvironmentVariable ("PROCESSOR_ARCHITEW6432") != null)  	sb.Append (" (64-bit)");  
Magic Number,MonoDevelop.Core,UnixSystemInformation,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\UnixSystemInformation.cs,AppendOperatingSystem,The following statement contains a magic number: process.WaitForExit (500);  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,Start,The following statement contains a magic number: lock (this) {  	if (starting)  		return;  	starting = true;  	exitRequestEvent.Reset ();  	RemotingService.RegisterRemotingChannel ();  	BinaryFormatter bf = new BinaryFormatter ();  	ObjRef oref = RemotingServices.Marshal (this);  	MemoryStream ms = new MemoryStream ();  	bf.Serialize (ms' oref);  	string sref = Convert.ToBase64String (ms.ToArray ());  	string tmpFile = null;  	if (executionHandlerFactory == null)  		executionHandlerFactory = Runtime.SystemAssemblyService.CurrentRuntime.GetExecutionHandler ();  	try {  		string location = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  		location = Path.Combine (location' "mdhost.exe");  		tmpFile = Path.GetTempFileName ();  		StreamWriter sw = new StreamWriter (tmpFile);  		sw.WriteLine (sref);  		sw.WriteLine (Process.GetCurrentProcess ().Id);  		sw.WriteLine (Runtime.SystemAssemblyService.CurrentRuntime.RuntimeId);  		// Explicitly load Mono.Addins since the target runtime may not have it installed  		sw.WriteLine (2);  		sw.WriteLine (typeof(AddinManager).Assembly.Location);  		sw.WriteLine (typeof(Mono.Addins.Setup.SetupService).Assembly.Location);  		sw.Close ();  		string arguments = string.Format ("{0} \"{1}\""' id' tmpFile);  		DotNetExecutionCommand cmd = new DotNetExecutionCommand (location' arguments' AppDomain.CurrentDomain.BaseDirectory);  		if (userAssemblyPaths != null)  			cmd.UserAssemblyPaths = userAssemblyPaths;  		cmd.DebugMode = isDebugMode;  		ProcessHostConsole cons = new ProcessHostConsole ();  		process = executionHandlerFactory.Execute (cmd' cons);  		Counters.ExternalHostProcesses++;  		process.Completed += ProcessExited;  	}  	catch (Exception ex) {  		if (tmpFile != null) {  			try {  				File.Delete (tmpFile);  			}  			catch {  			}  		}  		LoggingService.LogError (ex.ToString ());  		throw;  	}  }  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,Start,The following statement contains a magic number: try {  	string location = Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location);  	location = Path.Combine (location' "mdhost.exe");  	tmpFile = Path.GetTempFileName ();  	StreamWriter sw = new StreamWriter (tmpFile);  	sw.WriteLine (sref);  	sw.WriteLine (Process.GetCurrentProcess ().Id);  	sw.WriteLine (Runtime.SystemAssemblyService.CurrentRuntime.RuntimeId);  	// Explicitly load Mono.Addins since the target runtime may not have it installed  	sw.WriteLine (2);  	sw.WriteLine (typeof(AddinManager).Assembly.Location);  	sw.WriteLine (typeof(Mono.Addins.Setup.SetupService).Assembly.Location);  	sw.Close ();  	string arguments = string.Format ("{0} \"{1}\""' id' tmpFile);  	DotNetExecutionCommand cmd = new DotNetExecutionCommand (location' arguments' AppDomain.CurrentDomain.BaseDirectory);  	if (userAssemblyPaths != null)  		cmd.UserAssemblyPaths = userAssemblyPaths;  	cmd.DebugMode = isDebugMode;  	ProcessHostConsole cons = new ProcessHostConsole ();  	process = executionHandlerFactory.Execute (cmd' cons);  	Counters.ExternalHostProcesses++;  	process.Completed += ProcessExited;  }  catch (Exception ex) {  	if (tmpFile != null) {  		try {  			File.Delete (tmpFile);  		}  		catch {  		}  	}  	LoggingService.LogError (ex.ToString ());  	throw;  }  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,Start,The following statement contains a magic number: sw.WriteLine (2);  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,CreateInstance,The following statement contains a magic number: if (!runningEvent.WaitOne (15000' false)) {  	references--;  	throw new ApplicationException ("Couldn't create a remote process.");  }  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,CreateInstance,The following statement contains a magic number: if (!runningEvent.WaitOne (15000' false)) {  	references--;  	throw new ApplicationException ("Couldn't create a remote process.");  }  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,ReleaseInstance,The following statement contains a magic number: ReleaseInstance (obj' 2000);  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,ReleaseInstance,The following statement contains a magic number: lock (this) {  	for (int n = 0; n < remoteObjects.Count; n++) {  		if (remoteObjects [n] == proc) {  			remoteObjects.RemoveAt (n);  			break;  		}  	}  	references--;  	if (references == 0) {  		lastReleaseTime = DateTime.Now;  		if (!stopping) {  			stopping = true;  			this.shutdownTimeout = shutdownTimeout;  			if (stopDelay == 0) {  				// Always stop asyncrhonously' so the remote object  				// has time to end the dispose call.  				timer.Interval = 1000;  				timer.Enabled = true;  			}  			else {  				timer.Interval = stopDelay;  				timer.Enabled = true;  			}  		}  	}  }  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,ReleaseInstance,The following statement contains a magic number: if (references == 0) {  	lastReleaseTime = DateTime.Now;  	if (!stopping) {  		stopping = true;  		this.shutdownTimeout = shutdownTimeout;  		if (stopDelay == 0) {  			// Always stop asyncrhonously' so the remote object  			// has time to end the dispose call.  			timer.Interval = 1000;  			timer.Enabled = true;  		}  		else {  			timer.Interval = stopDelay;  			timer.Enabled = true;  		}  	}  }  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,ReleaseInstance,The following statement contains a magic number: if (!stopping) {  	stopping = true;  	this.shutdownTimeout = shutdownTimeout;  	if (stopDelay == 0) {  		// Always stop asyncrhonously' so the remote object  		// has time to end the dispose call.  		timer.Interval = 1000;  		timer.Enabled = true;  	}  	else {  		timer.Interval = stopDelay;  		timer.Enabled = true;  	}  }  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,ReleaseInstance,The following statement contains a magic number: if (stopDelay == 0) {  	// Always stop asyncrhonously' so the remote object  	// has time to end the dispose call.  	timer.Interval = 1000;  	timer.Enabled = true;  }  else {  	timer.Interval = stopDelay;  	timer.Enabled = true;  }  
Magic Number,MonoDevelop.Core.Execution,ProcessHostController,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessHostController.cs,ReleaseInstance,The following statement contains a magic number: timer.Interval = 1000;  
Magic Number,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,GetHost,The following statement contains a magic number: lock (this) {  	if (externalProcess == null)  		externalProcess = new ProcessHostController ("SharedHostProcess"' 10000' null);  	return externalProcess;  }  
Magic Number,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,GetHost,The following statement contains a magic number: if (externalProcess == null)  	externalProcess = new ProcessHostController ("SharedHostProcess"' 10000' null);  
Magic Number,MonoDevelop.Core.Execution,ProcessService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessService.cs,GetHost,The following statement contains a magic number: externalProcess = new ProcessHostController ("SharedHostProcess"' 10000' null);  
Magic Number,MonoDevelop.Core.Execution,ProcessWrapper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessWrapper.cs,CaptureOutput,The following statement contains a magic number: try {  	if (OutputStreamChanged != null) {  		char[] buffer = new char[1024];  		int nr;  		while ((nr = StandardOutput.Read (buffer' 0' buffer.Length)) > 0) {  			if (OutputStreamChanged != null)  				OutputStreamChanged (this' new string (buffer' 0' nr));  		}  	}  }  catch (ThreadAbortException) {  	// There is no need to keep propagating the abort exception  	Thread.ResetAbort ();  }  finally {  	// WORKAROUND for "Bug 410743 - wapi leak in System.Diagnostic.Process"  	// Process leaks when an exit event is registered  	if (endEventErr != null)  		endEventErr.WaitOne ();  	OnExited (this' EventArgs.Empty);  	lock (lockObj) {  		//call this AFTER the exit event' or the ProcessWrapper may get disposed and abort this thread  		if (endEventOut != null)  			endEventOut.Set ();  	}  }  
Magic Number,MonoDevelop.Core.Execution,ProcessWrapper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessWrapper.cs,CaptureOutput,The following statement contains a magic number: if (OutputStreamChanged != null) {  	char[] buffer = new char[1024];  	int nr;  	while ((nr = StandardOutput.Read (buffer' 0' buffer.Length)) > 0) {  		if (OutputStreamChanged != null)  			OutputStreamChanged (this' new string (buffer' 0' nr));  	}  }  
Magic Number,MonoDevelop.Core.Execution,ProcessWrapper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\ProcessWrapper.cs,CaptureError,The following statement contains a magic number: try {  	char[] buffer = new char[1024];  	int nr;  	while ((nr = StandardError.Read (buffer' 0' buffer.Length)) > 0) {  		if (ErrorStreamChanged != null)  			ErrorStreamChanged (this' new string (buffer' 0' nr));  	}  }  finally {  	lock (lockObj) {  		if (endEventErr != null)  			endEventErr.Set ();  	}  }  
Magic Number,MonoDevelop.Core.ProgressMonitoring,ProgressStatusMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.ProgressMonitoring\ProgressStatusMonitor.cs,ProgressStatusMonitor,The following statement contains a magic number: monitor.BeginTask (""' 100);  
Magic Number,MonoDevelop.Core.ProgressMonitoring,ProgressStatusMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.ProgressMonitoring\ProgressStatusMonitor.cs,SetMessage,The following statement contains a magic number: monitor.BeginTask (msg' 100 - step);  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: switch (desired) {  // Dark colours  case ConsoleColor.Black:  	light = false;  	return 0;  case ConsoleColor.DarkRed:  	light = false;  	return 1;  case ConsoleColor.DarkGreen:  	light = false;  	return 2;  case ConsoleColor.DarkYellow:  	light = false;  	return 3;  case ConsoleColor.DarkBlue:  	light = false;  	return 4;  case ConsoleColor.DarkMagenta:  	light = false;  	return 5;  case ConsoleColor.DarkCyan:  	light = false;  	return 6;  case ConsoleColor.Gray:  	light = false;  	return 7;  // Light colours  case ConsoleColor.DarkGray:  	light = true;  	return 0;  case ConsoleColor.Red:  	light = true;  	return 1;  case ConsoleColor.Green:  	light = true;  	return 2;  case ConsoleColor.Yellow:  	light = true;  	return 3;  case ConsoleColor.Blue:  	light = true;  	return 4;  case ConsoleColor.Magenta:  	light = true;  	return 5;  case ConsoleColor.Cyan:  	light = true;  	return 6;  default:  case ConsoleColor.White:  	light = true;  	return 7;  }  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 2;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 3;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 4;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 5;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 6;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 7;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 2;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 3;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 4;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 5;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 6;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,TranslateColor,The following statement contains a magic number: return 7;  
Magic Number,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,DetectXtermColors,The following statement contains a magic number: xterm_colors = _xterm_colors && isatty (1) && isatty (2);  
Magic Number,MonoDevelop.Core.Serialization,ArrayHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ArrayHandler.cs,CreateCollection,The following statement contains a magic number: return Array.CreateInstance (_elementType' size != -1 ? size : 5);  
Magic Number,MonoDevelop.Core.Serialization,ArrayHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\ArrayHandler.cs,AddItem,The following statement contains a magic number: if (i >= ar.Length) {  	Array newArray = Array.CreateInstance (_elementType' ar.Length + 5);  	Array.Copy (ar' newArray' ar.Length);  	collection = newArray;  	newArray.SetValue (item' i);  }  else  	ar.SetValue (item' i);  
Magic Number,MonoDevelop.Core.Serialization,DataItem,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataItem.cs,ToString,The following statement contains a magic number: foreach (DataNode nod in ItemData)  	str += nod.ToString (indent + 4) + "\n";  
Magic Number,MonoDevelop.Core.Serialization,DataItem,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DataItem.cs,ToString,The following statement contains a magic number: str += nod.ToString (indent + 4) + "\n";  
Magic Number,MonoDevelop.Core.Serialization,DictionaryDataType,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\DictionaryDataType.cs,GetMapData,The following statement contains a magic number: if (args.Length != 2)  	return false;  
Magic Number,MonoDevelop.Core.Serialization,BinaryConfigurationWriter,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\BinaryDataSerializer.cs,Write,The following statement contains a magic number: if (data is DataValue) {  	writer.Write ((byte)1);  	WriteString (writer' nameTable' data.Name);  	WriteString (writer' nameTable' ((DataValue)data).Value);  }  else if (data is DataItem) {  	writer.Write ((byte)2);  	WriteString (writer' nameTable' data.Name);  	DataItem item = (DataItem)data;  	writer.Write (item.ItemData.Count);  	foreach (DataNode cn in item.ItemData)  		Write (writer' nameTable' cn);  }  
Magic Number,MonoDevelop.Core.Serialization,BinaryConfigurationWriter,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\BinaryDataSerializer.cs,Write,The following statement contains a magic number: if (data is DataItem) {  	writer.Write ((byte)2);  	WriteString (writer' nameTable' data.Name);  	DataItem item = (DataItem)data;  	writer.Write (item.ItemData.Count);  	foreach (DataNode cn in item.ItemData)  		Write (writer' nameTable' cn);  }  
Magic Number,MonoDevelop.Core.Serialization,BinaryConfigurationWriter,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\BinaryDataSerializer.cs,Write,The following statement contains a magic number: writer.Write ((byte)2);  
Magic Number,MonoDevelop.Core.Serialization,BinaryConfigurationReader,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\BinaryDataSerializer.cs,Read,The following statement contains a magic number: if (type == 1) {  	string name = ReadString (reader' nameTable);  	string value = ReadString (reader' nameTable);  	return new DataValue (name' value);  }  else if (type == 2) {  	DataItem item = new DataItem ();  	item.Name = ReadString (reader' nameTable);  	int count = reader.ReadInt32 ();  	while (count-- > 0)  		item.ItemData.Add (Read (reader' nameTable));  	return item;  }  else  	throw new InvalidOperationException ("Unknown node type: " + type);  
Magic Number,MonoDevelop.Core.Serialization,BinaryConfigurationReader,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Serialization\BinaryDataSerializer.cs,Read,The following statement contains a magic number: if (type == 2) {  	DataItem item = new DataItem ();  	item.Name = ReadString (reader' nameTable);  	int count = reader.ReadInt32 ();  	while (count-- > 0)  		item.ItemData.Add (Read (reader' nameTable));  	return item;  }  else  	throw new InvalidOperationException ("Unknown node type: " + type);  
Magic Number,MonoDevelop.Projects,BuildTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\BuildTool.cs,ReadArgument,The following statement contains a magic number: if (argument.StartsWith ("--")) {  	optionValuePair = argument.Substring (2);  }  else if ((argument.StartsWith ("/") || argument.StartsWith ("-")) && !File.Exists (argument)) {  	optionValuePair = argument.Substring (1);  }  else {  	file = argument;  	return;  }  
Magic Number,MonoDevelop.Projects,BuildTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\BuildTool.cs,ReadArgument,The following statement contains a magic number: optionValuePair = argument.Substring (2);  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: foreach (string s in arguments) {  	if (s.StartsWith ("-d:"))  		destPath = s.Substring (3);  	else if (s.StartsWith ("-f:"))  		formatName = s.Substring (3);  	else if (s.StartsWith ("-p:"))  		projects.Add (s.Substring (3));  	else if (s == "-l")  		formatList = true;  	else if (projectFile != null) {  		Console.WriteLine ("Only one project can be converted at a time.");  		return 1;  	}  	else  		projectFile = s;  }  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: foreach (string s in arguments) {  	if (s.StartsWith ("-d:"))  		destPath = s.Substring (3);  	else if (s.StartsWith ("-f:"))  		formatName = s.Substring (3);  	else if (s.StartsWith ("-p:"))  		projects.Add (s.Substring (3));  	else if (s == "-l")  		formatList = true;  	else if (projectFile != null) {  		Console.WriteLine ("Only one project can be converted at a time.");  		return 1;  	}  	else  		projectFile = s;  }  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: foreach (string s in arguments) {  	if (s.StartsWith ("-d:"))  		destPath = s.Substring (3);  	else if (s.StartsWith ("-f:"))  		formatName = s.Substring (3);  	else if (s.StartsWith ("-p:"))  		projects.Add (s.Substring (3));  	else if (s == "-l")  		formatList = true;  	else if (projectFile != null) {  		Console.WriteLine ("Only one project can be converted at a time.");  		return 1;  	}  	else  		projectFile = s;  }  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: if (s.StartsWith ("-d:"))  	destPath = s.Substring (3);  else if (s.StartsWith ("-f:"))  	formatName = s.Substring (3);  else if (s.StartsWith ("-p:"))  	projects.Add (s.Substring (3));  else if (s == "-l")  	formatList = true;  else if (projectFile != null) {  	Console.WriteLine ("Only one project can be converted at a time.");  	return 1;  }  else  	projectFile = s;  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: if (s.StartsWith ("-d:"))  	destPath = s.Substring (3);  else if (s.StartsWith ("-f:"))  	formatName = s.Substring (3);  else if (s.StartsWith ("-p:"))  	projects.Add (s.Substring (3));  else if (s == "-l")  	formatList = true;  else if (projectFile != null) {  	Console.WriteLine ("Only one project can be converted at a time.");  	return 1;  }  else  	projectFile = s;  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: if (s.StartsWith ("-d:"))  	destPath = s.Substring (3);  else if (s.StartsWith ("-f:"))  	formatName = s.Substring (3);  else if (s.StartsWith ("-p:"))  	projects.Add (s.Substring (3));  else if (s == "-l")  	formatList = true;  else if (projectFile != null) {  	Console.WriteLine ("Only one project can be converted at a time.");  	return 1;  }  else  	projectFile = s;  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: destPath = s.Substring (3);  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: if (s.StartsWith ("-f:"))  	formatName = s.Substring (3);  else if (s.StartsWith ("-p:"))  	projects.Add (s.Substring (3));  else if (s == "-l")  	formatList = true;  else if (projectFile != null) {  	Console.WriteLine ("Only one project can be converted at a time.");  	return 1;  }  else  	projectFile = s;  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: if (s.StartsWith ("-f:"))  	formatName = s.Substring (3);  else if (s.StartsWith ("-p:"))  	projects.Add (s.Substring (3));  else if (s == "-l")  	formatList = true;  else if (projectFile != null) {  	Console.WriteLine ("Only one project can be converted at a time.");  	return 1;  }  else  	projectFile = s;  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: formatName = s.Substring (3);  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: if (s.StartsWith ("-p:"))  	projects.Add (s.Substring (3));  else if (s == "-l")  	formatList = true;  else if (projectFile != null) {  	Console.WriteLine ("Only one project can be converted at a time.");  	return 1;  }  else  	projectFile = s;  
Magic Number,MonoDevelop.Projects,ProjectConvertTool,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\ProjectConvertTool.cs,Run,The following statement contains a magic number: projects.Add (s.Substring (3));  
Magic Number,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,PopulateSupportFileListInternal,The following statement contains a magic number: if (supportReferDistance <= 2)  	base.PopulateSupportFileList (list' configuration);  
Magic Number,MonoDevelop.Projects,PortableDotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\PortableDotNetProject.cs,SupportsFormat,The following statement contains a magic number: return version >= 10;  
Magic Number,MonoDevelop.Core.Assemblies,MonoRuntimeInfo,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoRuntimeInfo.cs,InternalInitialize,The following statement contains a magic number: i += 8;  
Magic Number,MonoDevelop.Core.Assemblies,MonoRuntimeInfo,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoRuntimeInfo.cs,FromCurrentRuntime,The following statement contains a magic number: if (i != -1) {  	i += 15;  	int j = ver.IndexOf ('/'' i);  	if (j != -1)  		rt.monoVersion = ver.Substring (i' j - i).Replace ('-'' '.');  }  else if (ver.StartsWith ("/trunk/mono ")) {  	rt.monoVersion = "Trunk";  }  
Magic Number,MonoDevelop.Core.Assemblies,MonoRuntimeInfo,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoRuntimeInfo.cs,FromCurrentRuntime,The following statement contains a magic number: i += 15;  
Magic Number,MonoDevelop.Core.Assemblies,MonoRuntimeInfo,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoRuntimeInfo.cs,FromCurrentRuntime,The following statement contains a magic number: rt.prefix = PathUp (typeof(int).Assembly.Location' 4);  
Magic Number,MonoDevelop.Core.Assemblies,MsNetTargetRuntime,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetTargetRuntime.cs,GetProgramFilesX86,The following statement contains a magic number: return Environment.GetFolderPath (IntPtr.Size == 8 ? Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles);  
Magic Number,MonoDevelop.Core.Assemblies,TargetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFrameworkBackend.cs,GetToolsPaths,The following statement contains a magic number: foreach (string path in paths.Split (new char[] {  	Path.PathSeparator  }' StringSplitOptions.RemoveEmptyEntries)) {  	if (path.Length > 0 && path [0] == '"' && path [path.Length - 1] == '"')  		yield return path.Substring (1' path.Length - 2);  	else  		yield return path;  }  
Magic Number,MonoDevelop.Core.Assemblies,TargetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFrameworkBackend.cs,GetToolsPaths,The following statement contains a magic number: if (path.Length > 0 && path [0] == '"' && path [path.Length - 1] == '"')  	yield return path.Substring (1' path.Length - 2);  else  	yield return path;  
Magic Number,MonoDevelop.Core.Assemblies,TargetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFrameworkBackend.cs,GetToolsPaths,The following statement contains a magic number: yield return path.Substring (1' path.Length - 2);  
Magic Number,MonoDevelop.Core.Assemblies,MsNetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetFrameworkBackend.cs,GetProgramFilesX86,The following statement contains a magic number: return Environment.GetFolderPath (IntPtr.Size == 8 ? Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles);  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: if (parts.Length < 2)  	return;  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: if (parts.Length < 3)  	return;  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: i = parts [2].IndexOf ('=');  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: culture = i != -1 ? parts [2].Substring (i + 1).Trim () : parts [2].Trim ();  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: culture = i != -1 ? parts [2].Substring (i + 1).Trim () : parts [2].Trim ();  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: if (parts.Length < 4)  	return;  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: i = parts [3].IndexOf ('=');  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: token = i != -1 ? parts [3].Substring (i + 1).Trim () : parts [3].Trim ();  
Magic Number,MonoDevelop.Core.Assemblies,AssemblyContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\AssemblyContext.cs,ParseAssemblyName,The following statement contains a magic number: token = i != -1 ? parts [3].Substring (i + 1).Trim () : parts [3].Trim ();  
Magic Number,Mono.PkgConfig,PcFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\PcFileCache.cs,Evaluate,The following statement contains a magic number: while (i != -1 && i < value.Length) {  	sb.Append (value.Substring (last' i - last));  	if (i == 0 || value [i - 1] != '$') {  		// Evaluate if var is not escaped  		i += 2;  		int n = value.IndexOf ('}'' i);  		if (n == -1 || n == i) {  			// Closing bracket not found or empty name  			HasErrors = true;  			return value;  		}  		string rname = value.Substring (i' n - i);  		string rval;  		if (variables.TryGetValue (rname' out rval))  			sb.Append (rval);  		else {  			HasErrors = true;  			return value;  		}  		i = n + 1;  		last = i;  	}  	else  		last = i++;  	if (i < value.Length)  		i = value.IndexOf ("${"' i);  }  
Magic Number,Mono.PkgConfig,PcFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\PcFileCache.cs,Evaluate,The following statement contains a magic number: if (i == 0 || value [i - 1] != '$') {  	// Evaluate if var is not escaped  	i += 2;  	int n = value.IndexOf ('}'' i);  	if (n == -1 || n == i) {  		// Closing bracket not found or empty name  		HasErrors = true;  		return value;  	}  	string rname = value.Substring (i' n - i);  	string rval;  	if (variables.TryGetValue (rname' out rval))  		sb.Append (rval);  	else {  		HasErrors = true;  		return value;  	}  	i = n + 1;  	last = i;  }  else  	last = i++;  
Magic Number,Mono.PkgConfig,PcFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\PcFileCache.cs,Evaluate,The following statement contains a magic number: i += 2;  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithLibInfo,The following statement contains a magic number: foreach (string piece in line.Split (' ')) {  	if (piece.ToLower ().Trim ().StartsWith ("/r:") || piece.ToLower ().Trim ().StartsWith ("-r:")) {  		references.Add (piece.Substring (3).Trim ());  	}  	else if (piece.ToLower ().Trim ().StartsWith ("/lib:") || piece.ToLower ().Trim ().StartsWith ("-lib:")) {  		libdirs.Add (piece.Substring (5).Trim ());  	}  }  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithLibInfo,The following statement contains a magic number: foreach (string piece in line.Split (' ')) {  	if (piece.ToLower ().Trim ().StartsWith ("/r:") || piece.ToLower ().Trim ().StartsWith ("-r:")) {  		references.Add (piece.Substring (3).Trim ());  	}  	else if (piece.ToLower ().Trim ().StartsWith ("/lib:") || piece.ToLower ().Trim ().StartsWith ("-lib:")) {  		libdirs.Add (piece.Substring (5).Trim ());  	}  }  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithLibInfo,The following statement contains a magic number: if (piece.ToLower ().Trim ().StartsWith ("/r:") || piece.ToLower ().Trim ().StartsWith ("-r:")) {  	references.Add (piece.Substring (3).Trim ());  }  else if (piece.ToLower ().Trim ().StartsWith ("/lib:") || piece.ToLower ().Trim ().StartsWith ("-lib:")) {  	libdirs.Add (piece.Substring (5).Trim ());  }  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithLibInfo,The following statement contains a magic number: if (piece.ToLower ().Trim ().StartsWith ("/r:") || piece.ToLower ().Trim ().StartsWith ("-r:")) {  	references.Add (piece.Substring (3).Trim ());  }  else if (piece.ToLower ().Trim ().StartsWith ("/lib:") || piece.ToLower ().Trim ().StartsWith ("-lib:")) {  	libdirs.Add (piece.Substring (5).Trim ());  }  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithLibInfo,The following statement contains a magic number: references.Add (piece.Substring (3).Trim ());  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithLibInfo,The following statement contains a magic number: if (piece.ToLower ().Trim ().StartsWith ("/lib:") || piece.ToLower ().Trim ().StartsWith ("-lib:")) {  	libdirs.Add (piece.Substring (5).Trim ());  }  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithLibInfo,The following statement contains a magic number: libdirs.Add (piece.Substring (5).Trim ());  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithoutLibInfo,The following statement contains a magic number: foreach (string reference in line.Split (' ')) {  	if (reference.ToLower ().Trim ().StartsWith ("/r:") || reference.ToLower ().Trim ().StartsWith ("-r:")) {  		string final_ref = reference.Substring (3).Trim ();  		references.Add (final_ref);  	}  }  
Magic Number,Mono.PkgConfig,LibraryPcFileCache,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\LibraryPcFileCache.cs,GetAssembliesWithoutLibInfo,The following statement contains a magic number: if (reference.ToLower ().Trim ().StartsWith ("/r:") || reference.ToLower ().Trim ().StartsWith ("-r:")) {  	string final_ref = reference.Substring (3).Trim ();  	references.Add (final_ref);  }  
Magic Number,MonoDevelop.Core.Instrumentation,InstrumentationService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Instrumentation\InstrumentationService.cs,Stop,The following statement contains a magic number: if (autoSaveThread != null)  	autoSaveThread.Join (autoSaveInterval * 3);  
Magic Number,MonoDevelop.Core.Instrumentation,InstrumentationService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Instrumentation\InstrumentationService.cs,Stop,The following statement contains a magic number: autoSaveThread.Join (autoSaveInterval * 3);  
Magic Number,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	bool indent = false;  	string prefix = new string (' '' OptionWidth + 2);  	foreach (string line in GetLines (localizer (GetDescription (p.Description)))) {  		if (indent)  			o.Write (prefix);  		o.WriteLine (line);  		indent = true;  	}  }  
Magic Number,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,GetLines,The following statement contains a magic number: do {  	end = GetLineEnd (start' length' description);  	char c = description [end - 1];  	if (char.IsWhiteSpace (c))  		--end;  	bool writeContinuation = end != description.Length && !IsEolChar (c);  	string line = description.Substring (start' end - start) + (writeContinuation ? "-" : "");  	yield return line;  	start = end;  	if (char.IsWhiteSpace (c))  		++start;  	length = 80 - OptionWidth - 2 - 1;  }  while (end < description.Length);  
Magic Number,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,GetLines,The following statement contains a magic number: do {  	end = GetLineEnd (start' length' description);  	char c = description [end - 1];  	if (char.IsWhiteSpace (c))  		--end;  	bool writeContinuation = end != description.Length && !IsEolChar (c);  	string line = description.Substring (start' end - start) + (writeContinuation ? "-" : "");  	yield return line;  	start = end;  	if (char.IsWhiteSpace (c))  		++start;  	length = 80 - OptionWidth - 2 - 1;  }  while (end < description.Length);  
Magic Number,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;  
Magic Number,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;  
Magic Number,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The following statement contains a magic number: using (StringWriter sw = new StringWriter ()) {  	LoggingService.LogDebug ("Compiling resources\n{0}$ {1} /compile {2}"' Path.GetDirectoryName (fname)' resgen' fname);  	monitor.Log.WriteLine (GettextCatalog.GetString ("Compiling resource {0} with {1}"' fname' resgen));  	ProcessWrapper pw = null;  	try {  		ProcessStartInfo info = Runtime.ProcessService.CreateProcessStartInfo (resgen' String.Format ("/compile \"{0}\""' fname)' Path.GetDirectoryName (fname)' false);  		env.MergeTo (info);  		if (PlatformID.Unix == Environment.OSVersion.Platform)  			info.EnvironmentVariables ["MONO_IOMAP"] = "drive";  		pw = Runtime.ProcessService.StartProcess (info' sw' sw' null);  	}  	catch (System.ComponentModel.Win32Exception ex) {  		LoggingService.LogDebug (GettextCatalog.GetString ("Error while trying to invoke '{0}' to compile resource '{1}' :\n {2}"' resgen' fname' ex.ToString ()));  		monitor.Log.WriteLine (GettextCatalog.GetString ("Error while trying to invoke '{0}' to compile resource '{1}' :\n {2}"' resgen' fname' ex.Message));  		return new CompilerError (fname' 0' 0' String.Empty' ex.Message);  	}  	//FIXME: Handle exceptions  	pw.WaitForOutput ();  	if (pw.ExitCode == 0) {  		fname = Path.ChangeExtension (fname' ".resources");  	}  	else {  		string output = sw.ToString ();  		LoggingService.LogDebug (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output));  		monitor.Log.WriteLine (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output));  		//Try to get the line/pos  		int line = 0;  		int pos = 0;  		Match match = RegexErrorLinePos.Match (output);  		if (match.Success && match.Groups.Count == 3) {  			try {  				line = int.Parse (match.Groups [1].Value);  			}  			catch (FormatException) {  			}  			try {  				pos = int.Parse (match.Groups [2].Value);  			}  			catch (FormatException) {  			}  		}  		return new CompilerError (fname' line' pos' String.Empty' output);  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The following statement contains a magic number: using (StringWriter sw = new StringWriter ()) {  	LoggingService.LogDebug ("Compiling resources\n{0}$ {1} /compile {2}"' Path.GetDirectoryName (fname)' resgen' fname);  	monitor.Log.WriteLine (GettextCatalog.GetString ("Compiling resource {0} with {1}"' fname' resgen));  	ProcessWrapper pw = null;  	try {  		ProcessStartInfo info = Runtime.ProcessService.CreateProcessStartInfo (resgen' String.Format ("/compile \"{0}\""' fname)' Path.GetDirectoryName (fname)' false);  		env.MergeTo (info);  		if (PlatformID.Unix == Environment.OSVersion.Platform)  			info.EnvironmentVariables ["MONO_IOMAP"] = "drive";  		pw = Runtime.ProcessService.StartProcess (info' sw' sw' null);  	}  	catch (System.ComponentModel.Win32Exception ex) {  		LoggingService.LogDebug (GettextCatalog.GetString ("Error while trying to invoke '{0}' to compile resource '{1}' :\n {2}"' resgen' fname' ex.ToString ()));  		monitor.Log.WriteLine (GettextCatalog.GetString ("Error while trying to invoke '{0}' to compile resource '{1}' :\n {2}"' resgen' fname' ex.Message));  		return new CompilerError (fname' 0' 0' String.Empty' ex.Message);  	}  	//FIXME: Handle exceptions  	pw.WaitForOutput ();  	if (pw.ExitCode == 0) {  		fname = Path.ChangeExtension (fname' ".resources");  	}  	else {  		string output = sw.ToString ();  		LoggingService.LogDebug (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output));  		monitor.Log.WriteLine (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output));  		//Try to get the line/pos  		int line = 0;  		int pos = 0;  		Match match = RegexErrorLinePos.Match (output);  		if (match.Success && match.Groups.Count == 3) {  			try {  				line = int.Parse (match.Groups [1].Value);  			}  			catch (FormatException) {  			}  			try {  				pos = int.Parse (match.Groups [2].Value);  			}  			catch (FormatException) {  			}  		}  		return new CompilerError (fname' line' pos' String.Empty' output);  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The following statement contains a magic number: if (pw.ExitCode == 0) {  	fname = Path.ChangeExtension (fname' ".resources");  }  else {  	string output = sw.ToString ();  	LoggingService.LogDebug (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output));  	monitor.Log.WriteLine (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output));  	//Try to get the line/pos  	int line = 0;  	int pos = 0;  	Match match = RegexErrorLinePos.Match (output);  	if (match.Success && match.Groups.Count == 3) {  		try {  			line = int.Parse (match.Groups [1].Value);  		}  		catch (FormatException) {  		}  		try {  			pos = int.Parse (match.Groups [2].Value);  		}  		catch (FormatException) {  		}  	}  	return new CompilerError (fname' line' pos' String.Empty' output);  }  
Magic Number,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The following statement contains a magic number: if (pw.ExitCode == 0) {  	fname = Path.ChangeExtension (fname' ".resources");  }  else {  	string output = sw.ToString ();  	LoggingService.LogDebug (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output));  	monitor.Log.WriteLine (GettextCatalog.GetString ("Unable to compile ({0}) {1} to .resources. \nReason: \n{2}\n"' resgen' fname' output));  	//Try to get the line/pos  	int line = 0;  	int pos = 0;  	Match match = RegexErrorLinePos.Match (output);  	if (match.Success && match.Groups.Count == 3) {  		try {  			line = int.Parse (match.Groups [1].Value);  		}  		catch (FormatException) {  		}  		try {  			pos = int.Parse (match.Groups [2].Value);  		}  		catch (FormatException) {  		}  	}  	return new CompilerError (fname' line' pos' String.Empty' output);  }  
Magic Number,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The following statement contains a magic number: if (match.Success && match.Groups.Count == 3) {  	try {  		line = int.Parse (match.Groups [1].Value);  	}  	catch (FormatException) {  	}  	try {  		pos = int.Parse (match.Groups [2].Value);  	}  	catch (FormatException) {  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The following statement contains a magic number: if (match.Success && match.Groups.Count == 3) {  	try {  		line = int.Parse (match.Groups [1].Value);  	}  	catch (FormatException) {  	}  	try {  		pos = int.Parse (match.Groups [2].Value);  	}  	catch (FormatException) {  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The following statement contains a magic number: try {  	pos = int.Parse (match.Groups [2].Value);  }  catch (FormatException) {  }  
Magic Number,MonoDevelop.Projects.Formats.MD1,MD1DotNetProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MD1\MD1DotNetProjectHandler.cs,GetResourceId,The following statement contains a magic number: pos = int.Parse (match.Groups [2].Value);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,MigrateProject,The following statement contains a magic number: if (migrationType == MigrationType.BackupAndMigrate) {  	var backupDirFirst = baseDir.Combine ("backup");  	string backupDir = backupDirFirst;  	int i = 0;  	while (Directory.Exists (backupDir)) {  		backupDir = backupDirFirst + "-" + i.ToString ();  		if (i++ > 20) {  			throw new Exception ("Too many backup directories");  		}  	}  	Directory.CreateDirectory (backupDir);  	foreach (var file in st.MigrationHandler.FilesToBackup (fileName))  		File.Copy (file' Path.Combine (backupDir' Path.GetFileName (file)));  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,MigrateProject,The following statement contains a magic number: while (Directory.Exists (backupDir)) {  	backupDir = backupDirFirst + "-" + i.ToString ();  	if (i++ > 20) {  		throw new Exception ("Too many backup directories");  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,MigrateProject,The following statement contains a magic number: if (i++ > 20) {  	throw new Exception ("Too many backup directories");  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: if (cond.Substring (0' i).Trim () == "'$(Configuration)|$(Platform)'") {  	cond = cond.Substring (i + 2).Trim (' '' '\'');  	i = cond.IndexOf ('|');  	if (i != -1) {  		config = cond.Substring (0' i);  		platform = cond.Substring (i + 1);  	}  	else {  		// Invalid configuration  		return false;  	}  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  else if (cond.Substring (0' i).Trim () == "'$(Configuration)'") {  	config = cond.Substring (i + 2).Trim (' '' '\'');  	platform = Unspecified;  	return true;  }  else if (cond.Substring (0' i).Trim () == "'$(Platform)'") {  	config = Unspecified;  	platform = cond.Substring (i + 2).Trim (' '' '\'');  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: if (cond.Substring (0' i).Trim () == "'$(Configuration)|$(Platform)'") {  	cond = cond.Substring (i + 2).Trim (' '' '\'');  	i = cond.IndexOf ('|');  	if (i != -1) {  		config = cond.Substring (0' i);  		platform = cond.Substring (i + 1);  	}  	else {  		// Invalid configuration  		return false;  	}  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  else if (cond.Substring (0' i).Trim () == "'$(Configuration)'") {  	config = cond.Substring (i + 2).Trim (' '' '\'');  	platform = Unspecified;  	return true;  }  else if (cond.Substring (0' i).Trim () == "'$(Platform)'") {  	config = Unspecified;  	platform = cond.Substring (i + 2).Trim (' '' '\'');  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: if (cond.Substring (0' i).Trim () == "'$(Configuration)|$(Platform)'") {  	cond = cond.Substring (i + 2).Trim (' '' '\'');  	i = cond.IndexOf ('|');  	if (i != -1) {  		config = cond.Substring (0' i);  		platform = cond.Substring (i + 1);  	}  	else {  		// Invalid configuration  		return false;  	}  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  else if (cond.Substring (0' i).Trim () == "'$(Configuration)'") {  	config = cond.Substring (i + 2).Trim (' '' '\'');  	platform = Unspecified;  	return true;  }  else if (cond.Substring (0' i).Trim () == "'$(Platform)'") {  	config = Unspecified;  	platform = cond.Substring (i + 2).Trim (' '' '\'');  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: cond = cond.Substring (i + 2).Trim (' '' '\'');  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: if (cond.Substring (0' i).Trim () == "'$(Configuration)'") {  	config = cond.Substring (i + 2).Trim (' '' '\'');  	platform = Unspecified;  	return true;  }  else if (cond.Substring (0' i).Trim () == "'$(Platform)'") {  	config = Unspecified;  	platform = cond.Substring (i + 2).Trim (' '' '\'');  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: if (cond.Substring (0' i).Trim () == "'$(Configuration)'") {  	config = cond.Substring (i + 2).Trim (' '' '\'');  	platform = Unspecified;  	return true;  }  else if (cond.Substring (0' i).Trim () == "'$(Platform)'") {  	config = Unspecified;  	platform = cond.Substring (i + 2).Trim (' '' '\'');  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: config = cond.Substring (i + 2).Trim (' '' '\'');  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: if (cond.Substring (0' i).Trim () == "'$(Platform)'") {  	config = Unspecified;  	platform = cond.Substring (i + 2).Trim (' '' '\'');  	if (platform == "AnyCPU")  		platform = string.Empty;  	return true;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectHandler.cs,ParseConfigCondition,The following statement contains a magic number: platform = cond.Substring (i + 2).Trim (' '' '\'');  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,DecodeString,The following statement contains a magic number: if (val [0] == '\"')  	val = val.Substring (1' val.Length - 2);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,DecodeString,The following statement contains a magic number: val = val.Substring (1' val.Length - 2);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The following statement contains a magic number: foreach (Section sec in projectSections) {  	monitor.Step (1);  	Match match = ProjectRegex.Match (lines [sec.Start]);  	if (!match.Success) {  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project definition on line number #{0} in file '{1}'. Ignoring."' sec.Start + 1' fileName));  		continue;  	}  	try {  		// Valid guid?  		new Guid (match.Groups [1].Value);  	}  	catch (FormatException) {  		//Use default guid as projectGuid  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project type guid '{0}' on line #{1}. Ignoring."' match.Groups [1].Value' sec.Start + 1));  		continue;  	}  	string projTypeGuid = match.Groups [1].Value.ToUpper ();  	string projectName = match.Groups [2].Value;  	string projectPath = match.Groups [3].Value;  	string projectGuid = match.Groups [4].Value.ToUpper ();  	if (projTypeGuid == MSBuildProjectService.FolderTypeGuid) {  		//Solution folder  		SolutionFolder sfolder = new SolutionFolder ();  		sfolder.Name = projectName;  		MSBuildProjectService.InitializeItemHandler (sfolder);  		MSBuildProjectService.SetId (sfolder' projectGuid);  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DeserializeSolutionItem (sol' sfolder' projLines);  		foreach (string f in ReadFolderFiles (projLines))  			sfolder.Files.Add (MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' f));  		SlnData slnData = new SlnData ();  		slnData.Extra = projLines.ToArray ();  		sfolder.ExtendedProperties [typeof(SlnFileFormat)] = slnData;  		items.Add (projectGuid' sfolder);  		sortedList.Add (sfolder);  		continue;  	}  	if (projectPath.StartsWith ("http://")) {  		monitor.ReportWarning (GettextCatalog.GetString ("{0}({1}): Projects with non-local source (http://...) not supported. '{2}'."' fileName' sec.Start + 1' projectPath));  		data.UnknownProjects.AddRange (lines.GetRange (sec.Start' sec.Count));  		continue;  	}  	string path = MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' projectPath);  	if (String.IsNullOrEmpty (path)) {  		monitor.ReportWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		LoggingService.LogWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		continue;  	}  	projectPath = Path.GetFullPath (path);  	SolutionEntityItem item = null;  	try {  		item = ProjectExtensionUtil.LoadSolutionItem (monitor' projectPath' delegate {  			return MSBuildProjectService.LoadItem (monitor' projectPath' format' projTypeGuid' projectGuid);  		});  		if (item == null) {  			throw new UnknownSolutionItemTypeException (projTypeGuid);  		}  		MSBuildHandler handler = (MSBuildHandler)item.ItemHandler;  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DataItem it = GetSolutionItemData (projLines);  		handler.UnresolvedProjectDependencies = ReadSolutionItemDependencies (projLines);  		handler.SlnProjectContent = projLines.ToArray ();  		handler.ReadSlnData (it);  	}  	catch (Exception e) {  		// If we get a TargetInvocationException from using Activator.CreateInstance we  		// need to unwrap the real exception  		while (e is TargetInvocationException)  			e = ((TargetInvocationException)e).InnerException;  		if (e is UnknownSolutionItemTypeException) {  			var name = ((UnknownSolutionItemTypeException)e).TypeName;  			var relPath = new FilePath (path).ToRelative (sol.BaseDirectory);  			if (!string.IsNullOrEmpty (name)) {  				var guids = name.Split (';');  				var projectInfo = MSBuildProjectService.GetUnknownProjectTypeInfo (guids);  				if (projectInfo != null) {  					LoggingService.LogWarning (string.Format ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  				}  				else {  					LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  				}  			}  			else {  				LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type"' relPath));  				monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type"' relPath));  			}  		}  		else if (e is UserException) {  			var ex = (UserException)e;  			LoggingService.LogError ("{0}: {1}"' ex.Message' ex.Details);  			monitor.ReportError (string.Format ("{0}{1}{1}{2}"' ex.Message' Environment.NewLine' ex.Details)' null);  		}  		else {  			LoggingService.LogError (string.Format ("Error while trying to load the project {0}"' projectPath)' e);  			monitor.ReportWarning (GettextCatalog.GetString ("Error while trying to load the project '{0}': {1}"' projectPath' e.Message));  		}  		var uitem = new UnknownSolutionItem () {  			FileName = projectPath'  			LoadError = e.Message'  		};  		var h = new MSBuildHandler (projTypeGuid' projectGuid) {  			Item = uitem'  		};  		uitem.SetItemHandler (h);  		item = uitem;  	}  	if (!items.ContainsKey (projectGuid)) {  		items.Add (projectGuid' item);  		sortedList.Add (item);  		data.ItemsByGuid [projectGuid] = item;  	}  	else {  		monitor.ReportError (GettextCatalog.GetString ("Invalid solution file. There are two projects with the same GUID. The project {0} will be ignored."' projectPath)' null);  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The following statement contains a magic number: foreach (Section sec in projectSections) {  	monitor.Step (1);  	Match match = ProjectRegex.Match (lines [sec.Start]);  	if (!match.Success) {  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project definition on line number #{0} in file '{1}'. Ignoring."' sec.Start + 1' fileName));  		continue;  	}  	try {  		// Valid guid?  		new Guid (match.Groups [1].Value);  	}  	catch (FormatException) {  		//Use default guid as projectGuid  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project type guid '{0}' on line #{1}. Ignoring."' match.Groups [1].Value' sec.Start + 1));  		continue;  	}  	string projTypeGuid = match.Groups [1].Value.ToUpper ();  	string projectName = match.Groups [2].Value;  	string projectPath = match.Groups [3].Value;  	string projectGuid = match.Groups [4].Value.ToUpper ();  	if (projTypeGuid == MSBuildProjectService.FolderTypeGuid) {  		//Solution folder  		SolutionFolder sfolder = new SolutionFolder ();  		sfolder.Name = projectName;  		MSBuildProjectService.InitializeItemHandler (sfolder);  		MSBuildProjectService.SetId (sfolder' projectGuid);  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DeserializeSolutionItem (sol' sfolder' projLines);  		foreach (string f in ReadFolderFiles (projLines))  			sfolder.Files.Add (MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' f));  		SlnData slnData = new SlnData ();  		slnData.Extra = projLines.ToArray ();  		sfolder.ExtendedProperties [typeof(SlnFileFormat)] = slnData;  		items.Add (projectGuid' sfolder);  		sortedList.Add (sfolder);  		continue;  	}  	if (projectPath.StartsWith ("http://")) {  		monitor.ReportWarning (GettextCatalog.GetString ("{0}({1}): Projects with non-local source (http://...) not supported. '{2}'."' fileName' sec.Start + 1' projectPath));  		data.UnknownProjects.AddRange (lines.GetRange (sec.Start' sec.Count));  		continue;  	}  	string path = MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' projectPath);  	if (String.IsNullOrEmpty (path)) {  		monitor.ReportWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		LoggingService.LogWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		continue;  	}  	projectPath = Path.GetFullPath (path);  	SolutionEntityItem item = null;  	try {  		item = ProjectExtensionUtil.LoadSolutionItem (monitor' projectPath' delegate {  			return MSBuildProjectService.LoadItem (monitor' projectPath' format' projTypeGuid' projectGuid);  		});  		if (item == null) {  			throw new UnknownSolutionItemTypeException (projTypeGuid);  		}  		MSBuildHandler handler = (MSBuildHandler)item.ItemHandler;  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DataItem it = GetSolutionItemData (projLines);  		handler.UnresolvedProjectDependencies = ReadSolutionItemDependencies (projLines);  		handler.SlnProjectContent = projLines.ToArray ();  		handler.ReadSlnData (it);  	}  	catch (Exception e) {  		// If we get a TargetInvocationException from using Activator.CreateInstance we  		// need to unwrap the real exception  		while (e is TargetInvocationException)  			e = ((TargetInvocationException)e).InnerException;  		if (e is UnknownSolutionItemTypeException) {  			var name = ((UnknownSolutionItemTypeException)e).TypeName;  			var relPath = new FilePath (path).ToRelative (sol.BaseDirectory);  			if (!string.IsNullOrEmpty (name)) {  				var guids = name.Split (';');  				var projectInfo = MSBuildProjectService.GetUnknownProjectTypeInfo (guids);  				if (projectInfo != null) {  					LoggingService.LogWarning (string.Format ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  				}  				else {  					LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  				}  			}  			else {  				LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type"' relPath));  				monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type"' relPath));  			}  		}  		else if (e is UserException) {  			var ex = (UserException)e;  			LoggingService.LogError ("{0}: {1}"' ex.Message' ex.Details);  			monitor.ReportError (string.Format ("{0}{1}{1}{2}"' ex.Message' Environment.NewLine' ex.Details)' null);  		}  		else {  			LoggingService.LogError (string.Format ("Error while trying to load the project {0}"' projectPath)' e);  			monitor.ReportWarning (GettextCatalog.GetString ("Error while trying to load the project '{0}': {1}"' projectPath' e.Message));  		}  		var uitem = new UnknownSolutionItem () {  			FileName = projectPath'  			LoadError = e.Message'  		};  		var h = new MSBuildHandler (projTypeGuid' projectGuid) {  			Item = uitem'  		};  		uitem.SetItemHandler (h);  		item = uitem;  	}  	if (!items.ContainsKey (projectGuid)) {  		items.Add (projectGuid' item);  		sortedList.Add (item);  		data.ItemsByGuid [projectGuid] = item;  	}  	else {  		monitor.ReportError (GettextCatalog.GetString ("Invalid solution file. There are two projects with the same GUID. The project {0} will be ignored."' projectPath)' null);  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The following statement contains a magic number: foreach (Section sec in projectSections) {  	monitor.Step (1);  	Match match = ProjectRegex.Match (lines [sec.Start]);  	if (!match.Success) {  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project definition on line number #{0} in file '{1}'. Ignoring."' sec.Start + 1' fileName));  		continue;  	}  	try {  		// Valid guid?  		new Guid (match.Groups [1].Value);  	}  	catch (FormatException) {  		//Use default guid as projectGuid  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project type guid '{0}' on line #{1}. Ignoring."' match.Groups [1].Value' sec.Start + 1));  		continue;  	}  	string projTypeGuid = match.Groups [1].Value.ToUpper ();  	string projectName = match.Groups [2].Value;  	string projectPath = match.Groups [3].Value;  	string projectGuid = match.Groups [4].Value.ToUpper ();  	if (projTypeGuid == MSBuildProjectService.FolderTypeGuid) {  		//Solution folder  		SolutionFolder sfolder = new SolutionFolder ();  		sfolder.Name = projectName;  		MSBuildProjectService.InitializeItemHandler (sfolder);  		MSBuildProjectService.SetId (sfolder' projectGuid);  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DeserializeSolutionItem (sol' sfolder' projLines);  		foreach (string f in ReadFolderFiles (projLines))  			sfolder.Files.Add (MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' f));  		SlnData slnData = new SlnData ();  		slnData.Extra = projLines.ToArray ();  		sfolder.ExtendedProperties [typeof(SlnFileFormat)] = slnData;  		items.Add (projectGuid' sfolder);  		sortedList.Add (sfolder);  		continue;  	}  	if (projectPath.StartsWith ("http://")) {  		monitor.ReportWarning (GettextCatalog.GetString ("{0}({1}): Projects with non-local source (http://...) not supported. '{2}'."' fileName' sec.Start + 1' projectPath));  		data.UnknownProjects.AddRange (lines.GetRange (sec.Start' sec.Count));  		continue;  	}  	string path = MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' projectPath);  	if (String.IsNullOrEmpty (path)) {  		monitor.ReportWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		LoggingService.LogWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		continue;  	}  	projectPath = Path.GetFullPath (path);  	SolutionEntityItem item = null;  	try {  		item = ProjectExtensionUtil.LoadSolutionItem (monitor' projectPath' delegate {  			return MSBuildProjectService.LoadItem (monitor' projectPath' format' projTypeGuid' projectGuid);  		});  		if (item == null) {  			throw new UnknownSolutionItemTypeException (projTypeGuid);  		}  		MSBuildHandler handler = (MSBuildHandler)item.ItemHandler;  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DataItem it = GetSolutionItemData (projLines);  		handler.UnresolvedProjectDependencies = ReadSolutionItemDependencies (projLines);  		handler.SlnProjectContent = projLines.ToArray ();  		handler.ReadSlnData (it);  	}  	catch (Exception e) {  		// If we get a TargetInvocationException from using Activator.CreateInstance we  		// need to unwrap the real exception  		while (e is TargetInvocationException)  			e = ((TargetInvocationException)e).InnerException;  		if (e is UnknownSolutionItemTypeException) {  			var name = ((UnknownSolutionItemTypeException)e).TypeName;  			var relPath = new FilePath (path).ToRelative (sol.BaseDirectory);  			if (!string.IsNullOrEmpty (name)) {  				var guids = name.Split (';');  				var projectInfo = MSBuildProjectService.GetUnknownProjectTypeInfo (guids);  				if (projectInfo != null) {  					LoggingService.LogWarning (string.Format ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  				}  				else {  					LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  				}  			}  			else {  				LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type"' relPath));  				monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type"' relPath));  			}  		}  		else if (e is UserException) {  			var ex = (UserException)e;  			LoggingService.LogError ("{0}: {1}"' ex.Message' ex.Details);  			monitor.ReportError (string.Format ("{0}{1}{1}{2}"' ex.Message' Environment.NewLine' ex.Details)' null);  		}  		else {  			LoggingService.LogError (string.Format ("Error while trying to load the project {0}"' projectPath)' e);  			monitor.ReportWarning (GettextCatalog.GetString ("Error while trying to load the project '{0}': {1}"' projectPath' e.Message));  		}  		var uitem = new UnknownSolutionItem () {  			FileName = projectPath'  			LoadError = e.Message'  		};  		var h = new MSBuildHandler (projTypeGuid' projectGuid) {  			Item = uitem'  		};  		uitem.SetItemHandler (h);  		item = uitem;  	}  	if (!items.ContainsKey (projectGuid)) {  		items.Add (projectGuid' item);  		sortedList.Add (item);  		data.ItemsByGuid [projectGuid] = item;  	}  	else {  		monitor.ReportError (GettextCatalog.GetString ("Invalid solution file. There are two projects with the same GUID. The project {0} will be ignored."' projectPath)' null);  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The following statement contains a magic number: foreach (Section sec in projectSections) {  	monitor.Step (1);  	Match match = ProjectRegex.Match (lines [sec.Start]);  	if (!match.Success) {  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project definition on line number #{0} in file '{1}'. Ignoring."' sec.Start + 1' fileName));  		continue;  	}  	try {  		// Valid guid?  		new Guid (match.Groups [1].Value);  	}  	catch (FormatException) {  		//Use default guid as projectGuid  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project type guid '{0}' on line #{1}. Ignoring."' match.Groups [1].Value' sec.Start + 1));  		continue;  	}  	string projTypeGuid = match.Groups [1].Value.ToUpper ();  	string projectName = match.Groups [2].Value;  	string projectPath = match.Groups [3].Value;  	string projectGuid = match.Groups [4].Value.ToUpper ();  	if (projTypeGuid == MSBuildProjectService.FolderTypeGuid) {  		//Solution folder  		SolutionFolder sfolder = new SolutionFolder ();  		sfolder.Name = projectName;  		MSBuildProjectService.InitializeItemHandler (sfolder);  		MSBuildProjectService.SetId (sfolder' projectGuid);  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DeserializeSolutionItem (sol' sfolder' projLines);  		foreach (string f in ReadFolderFiles (projLines))  			sfolder.Files.Add (MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' f));  		SlnData slnData = new SlnData ();  		slnData.Extra = projLines.ToArray ();  		sfolder.ExtendedProperties [typeof(SlnFileFormat)] = slnData;  		items.Add (projectGuid' sfolder);  		sortedList.Add (sfolder);  		continue;  	}  	if (projectPath.StartsWith ("http://")) {  		monitor.ReportWarning (GettextCatalog.GetString ("{0}({1}): Projects with non-local source (http://...) not supported. '{2}'."' fileName' sec.Start + 1' projectPath));  		data.UnknownProjects.AddRange (lines.GetRange (sec.Start' sec.Count));  		continue;  	}  	string path = MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' projectPath);  	if (String.IsNullOrEmpty (path)) {  		monitor.ReportWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		LoggingService.LogWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		continue;  	}  	projectPath = Path.GetFullPath (path);  	SolutionEntityItem item = null;  	try {  		item = ProjectExtensionUtil.LoadSolutionItem (monitor' projectPath' delegate {  			return MSBuildProjectService.LoadItem (monitor' projectPath' format' projTypeGuid' projectGuid);  		});  		if (item == null) {  			throw new UnknownSolutionItemTypeException (projTypeGuid);  		}  		MSBuildHandler handler = (MSBuildHandler)item.ItemHandler;  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DataItem it = GetSolutionItemData (projLines);  		handler.UnresolvedProjectDependencies = ReadSolutionItemDependencies (projLines);  		handler.SlnProjectContent = projLines.ToArray ();  		handler.ReadSlnData (it);  	}  	catch (Exception e) {  		// If we get a TargetInvocationException from using Activator.CreateInstance we  		// need to unwrap the real exception  		while (e is TargetInvocationException)  			e = ((TargetInvocationException)e).InnerException;  		if (e is UnknownSolutionItemTypeException) {  			var name = ((UnknownSolutionItemTypeException)e).TypeName;  			var relPath = new FilePath (path).ToRelative (sol.BaseDirectory);  			if (!string.IsNullOrEmpty (name)) {  				var guids = name.Split (';');  				var projectInfo = MSBuildProjectService.GetUnknownProjectTypeInfo (guids);  				if (projectInfo != null) {  					LoggingService.LogWarning (string.Format ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  				}  				else {  					LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  				}  			}  			else {  				LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type"' relPath));  				monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type"' relPath));  			}  		}  		else if (e is UserException) {  			var ex = (UserException)e;  			LoggingService.LogError ("{0}: {1}"' ex.Message' ex.Details);  			monitor.ReportError (string.Format ("{0}{1}{1}{2}"' ex.Message' Environment.NewLine' ex.Details)' null);  		}  		else {  			LoggingService.LogError (string.Format ("Error while trying to load the project {0}"' projectPath)' e);  			monitor.ReportWarning (GettextCatalog.GetString ("Error while trying to load the project '{0}': {1}"' projectPath' e.Message));  		}  		var uitem = new UnknownSolutionItem () {  			FileName = projectPath'  			LoadError = e.Message'  		};  		var h = new MSBuildHandler (projTypeGuid' projectGuid) {  			Item = uitem'  		};  		uitem.SetItemHandler (h);  		item = uitem;  	}  	if (!items.ContainsKey (projectGuid)) {  		items.Add (projectGuid' item);  		sortedList.Add (item);  		data.ItemsByGuid [projectGuid] = item;  	}  	else {  		monitor.ReportError (GettextCatalog.GetString ("Invalid solution file. There are two projects with the same GUID. The project {0} will be ignored."' projectPath)' null);  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The following statement contains a magic number: foreach (Section sec in projectSections) {  	monitor.Step (1);  	Match match = ProjectRegex.Match (lines [sec.Start]);  	if (!match.Success) {  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project definition on line number #{0} in file '{1}'. Ignoring."' sec.Start + 1' fileName));  		continue;  	}  	try {  		// Valid guid?  		new Guid (match.Groups [1].Value);  	}  	catch (FormatException) {  		//Use default guid as projectGuid  		LoggingService.LogDebug (GettextCatalog.GetString ("Invalid Project type guid '{0}' on line #{1}. Ignoring."' match.Groups [1].Value' sec.Start + 1));  		continue;  	}  	string projTypeGuid = match.Groups [1].Value.ToUpper ();  	string projectName = match.Groups [2].Value;  	string projectPath = match.Groups [3].Value;  	string projectGuid = match.Groups [4].Value.ToUpper ();  	if (projTypeGuid == MSBuildProjectService.FolderTypeGuid) {  		//Solution folder  		SolutionFolder sfolder = new SolutionFolder ();  		sfolder.Name = projectName;  		MSBuildProjectService.InitializeItemHandler (sfolder);  		MSBuildProjectService.SetId (sfolder' projectGuid);  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DeserializeSolutionItem (sol' sfolder' projLines);  		foreach (string f in ReadFolderFiles (projLines))  			sfolder.Files.Add (MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' f));  		SlnData slnData = new SlnData ();  		slnData.Extra = projLines.ToArray ();  		sfolder.ExtendedProperties [typeof(SlnFileFormat)] = slnData;  		items.Add (projectGuid' sfolder);  		sortedList.Add (sfolder);  		continue;  	}  	if (projectPath.StartsWith ("http://")) {  		monitor.ReportWarning (GettextCatalog.GetString ("{0}({1}): Projects with non-local source (http://...) not supported. '{2}'."' fileName' sec.Start + 1' projectPath));  		data.UnknownProjects.AddRange (lines.GetRange (sec.Start' sec.Count));  		continue;  	}  	string path = MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' projectPath);  	if (String.IsNullOrEmpty (path)) {  		monitor.ReportWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		LoggingService.LogWarning (GettextCatalog.GetString ("Invalid project path found in {0} : {1}"' fileName' projectPath));  		continue;  	}  	projectPath = Path.GetFullPath (path);  	SolutionEntityItem item = null;  	try {  		item = ProjectExtensionUtil.LoadSolutionItem (monitor' projectPath' delegate {  			return MSBuildProjectService.LoadItem (monitor' projectPath' format' projTypeGuid' projectGuid);  		});  		if (item == null) {  			throw new UnknownSolutionItemTypeException (projTypeGuid);  		}  		MSBuildHandler handler = (MSBuildHandler)item.ItemHandler;  		List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  		DataItem it = GetSolutionItemData (projLines);  		handler.UnresolvedProjectDependencies = ReadSolutionItemDependencies (projLines);  		handler.SlnProjectContent = projLines.ToArray ();  		handler.ReadSlnData (it);  	}  	catch (Exception e) {  		// If we get a TargetInvocationException from using Activator.CreateInstance we  		// need to unwrap the real exception  		while (e is TargetInvocationException)  			e = ((TargetInvocationException)e).InnerException;  		if (e is UnknownSolutionItemTypeException) {  			var name = ((UnknownSolutionItemTypeException)e).TypeName;  			var relPath = new FilePath (path).ToRelative (sol.BaseDirectory);  			if (!string.IsNullOrEmpty (name)) {  				var guids = name.Split (';');  				var projectInfo = MSBuildProjectService.GetUnknownProjectTypeInfo (guids);  				if (projectInfo != null) {  					LoggingService.LogWarning (string.Format ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  				}  				else {  					LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  					monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  				}  			}  			else {  				LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type"' relPath));  				monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type"' relPath));  			}  		}  		else if (e is UserException) {  			var ex = (UserException)e;  			LoggingService.LogError ("{0}: {1}"' ex.Message' ex.Details);  			monitor.ReportError (string.Format ("{0}{1}{1}{2}"' ex.Message' Environment.NewLine' ex.Details)' null);  		}  		else {  			LoggingService.LogError (string.Format ("Error while trying to load the project {0}"' projectPath)' e);  			monitor.ReportWarning (GettextCatalog.GetString ("Error while trying to load the project '{0}': {1}"' projectPath' e.Message));  		}  		var uitem = new UnknownSolutionItem () {  			FileName = projectPath'  			LoadError = e.Message'  		};  		var h = new MSBuildHandler (projTypeGuid' projectGuid) {  			Item = uitem'  		};  		uitem.SetItemHandler (h);  		item = uitem;  	}  	if (!items.ContainsKey (projectGuid)) {  		items.Add (projectGuid' item);  		sortedList.Add (item);  		data.ItemsByGuid [projectGuid] = item;  	}  	else {  		monitor.ReportError (GettextCatalog.GetString ("Invalid solution file. There are two projects with the same GUID. The project {0} will be ignored."' projectPath)' null);  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The following statement contains a magic number: if (projTypeGuid == MSBuildProjectService.FolderTypeGuid) {  	//Solution folder  	SolutionFolder sfolder = new SolutionFolder ();  	sfolder.Name = projectName;  	MSBuildProjectService.InitializeItemHandler (sfolder);  	MSBuildProjectService.SetId (sfolder' projectGuid);  	List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  	DeserializeSolutionItem (sol' sfolder' projLines);  	foreach (string f in ReadFolderFiles (projLines))  		sfolder.Files.Add (MSBuildProjectService.FromMSBuildPath (Path.GetDirectoryName (fileName)' f));  	SlnData slnData = new SlnData ();  	slnData.Extra = projLines.ToArray ();  	sfolder.ExtendedProperties [typeof(SlnFileFormat)] = slnData;  	items.Add (projectGuid' sfolder);  	sortedList.Add (sfolder);  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolution,The following statement contains a magic number: try {  	item = ProjectExtensionUtil.LoadSolutionItem (monitor' projectPath' delegate {  		return MSBuildProjectService.LoadItem (monitor' projectPath' format' projTypeGuid' projectGuid);  	});  	if (item == null) {  		throw new UnknownSolutionItemTypeException (projTypeGuid);  	}  	MSBuildHandler handler = (MSBuildHandler)item.ItemHandler;  	List<string> projLines = lines.GetRange (sec.Start + 1' sec.Count - 2);  	DataItem it = GetSolutionItemData (projLines);  	handler.UnresolvedProjectDependencies = ReadSolutionItemDependencies (projLines);  	handler.SlnProjectContent = projLines.ToArray ();  	handler.ReadSlnData (it);  }  catch (Exception e) {  	// If we get a TargetInvocationException from using Activator.CreateInstance we  	// need to unwrap the real exception  	while (e is TargetInvocationException)  		e = ((TargetInvocationException)e).InnerException;  	if (e is UnknownSolutionItemTypeException) {  		var name = ((UnknownSolutionItemTypeException)e).TypeName;  		var relPath = new FilePath (path).ToRelative (sol.BaseDirectory);  		if (!string.IsNullOrEmpty (name)) {  			var guids = name.Split (';');  			var projectInfo = MSBuildProjectService.GetUnknownProjectTypeInfo (guids);  			if (projectInfo != null) {  				LoggingService.LogWarning (string.Format ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  				monitor.ReportWarning (GettextCatalog.GetString ("Could not load {0} project '{1}'. {2}"' projectInfo.Name' relPath' projectInfo.GetInstructions ()));  			}  			else {  				LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  				monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type '{1}'"' relPath' name));  			}  		}  		else {  			LoggingService.LogWarning (string.Format ("Could not load project '{0}' with unknown item type"' relPath));  			monitor.ReportWarning (GettextCatalog.GetString ("Could not load project '{0}' with unknown item type"' relPath));  		}  	}  	else if (e is UserException) {  		var ex = (UserException)e;  		LoggingService.LogError ("{0}: {1}"' ex.Message' ex.Details);  		monitor.ReportError (string.Format ("{0}{1}{1}{2}"' ex.Message' Environment.NewLine' ex.Details)' null);  	}  	else {  		LoggingService.LogError (string.Format ("Error while trying to load the project {0}"' projectPath)' e);  		monitor.ReportWarning (GettextCatalog.GetString ("Error while trying to load the project '{0}': {1}"' projectPath' e.Message));  	}  	var uitem = new UnknownSolutionItem () {  		FileName = projectPath'  		LoadError = e.Message'  	};  	var h = new MSBuildHandler (projTypeGuid' projectGuid) {  		Item = uitem'  	};  	uitem.SetItemHandler (h);  	item = uitem;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,ParseGlobal,The following statement contains a magic number: while (reader.Peek () >= 0) {  	string s = GetNextLine (reader' lines).Trim ();  	if (s.Length == 0)  		//Skip blank lines  		continue;  	Match m = GlobalSectionRegex.Match (s);  	if (!m.Success) {  		if (String.Compare (s' "EndGlobal"' true) == 0)  			return;  		continue;  	}  	Section sec = new Section (m.Groups [1].Value' m.Groups [2].Value' lines.Count - 1' 1);  	dict [sec.Key] = sec;  	sec.Count = ReadUntil ("EndGlobalSection"' reader' lines) - sec.Start + 1;  	//FIXME: sec.Count == -1 : No EndGlobalSection found' ignore entry?  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	extras.Add (s);  	//Format:  	// {projectGuid}.SolutionConfigName|SolutionPlatform.ActiveCfg = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Build.0 = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Deploy.0 = ProjConfigName|ProjPlatform  	string[] parts = s.Split (new char[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string action;  	string projConfig = parts [1].Trim ();  	string left = parts [0].Trim ();  	if (left.EndsWith (".ActiveCfg")) {  		action = "ActiveCfg";  		left = left.Substring (0' left.Length - 10);  	}  	else if (left.EndsWith (".Build.0")) {  		action = "Build.0";  		left = left.Substring (0' left.Length - 8);  	}  	else if (left.EndsWith (".Deploy.0")) {  		action = "Deploy.0";  		left = left.Substring (0' left.Length - 9);  	}  	else {  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  		continue;  	}  	string[] t = left.Split (new char[] {  		'.'  	}' 2);  	if (t.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string projGuid = t [0].ToUpper ();  	string slnConfig = t [1];  	if (!slnData.ItemsByGuid.ContainsKey (projGuid)) {  		if (ignoredProjects.ContainsKey (projGuid))  			// already warned  			continue;  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid));  		ignoredProjects [projGuid] = projGuid;  		continue;  	}  	SolutionEntityItem item;  	if (slnData.ItemsByGuid.TryGetValue (projGuid' out item)) {  		if (item is UnknownSolutionItem) {  			ItemSlnData data = ItemSlnData.ForItem (item);  			data.ConfigLines.Add (lines [lineNum]);  			extras.RemoveAt (extras.Count - 1);  			continue;  		}  		string key = projGuid + "." + slnConfig;  		SolutionConfigurationEntry combineConfigEntry = null;  		if (cache.ContainsKey (key)) {  			combineConfigEntry = cache [key];  		}  		else {  			combineConfigEntry = GetConfigEntry (sln' item' slnConfig);  			combineConfigEntry.Build = false;  			// Not buildable by default. Build will be enabled if a Build.0 entry is found  			cache [key] = combineConfigEntry;  		}  		/* If both ActiveCfg & Build.0 entries are missing 					 * for a project' then default values : 					 *	ActiveCfg : same as the solution config 					 *	Build : true 					 * 					 * ELSE 					 * if Build (true/false) for the project will  					 * will depend on presence/absence of Build.0 entry 					 */if (action == "ActiveCfg") {  			combineConfigEntry.ItemConfiguration = FromSlnConfigurationId (projConfig);  		}  		else if (action == "Build.0") {  			combineConfigEntry.Build = true;  		}  		else if (action == "Deploy.0") {  			combineConfigEntry.Deploy = true;  		}  	}  	extras.RemoveAt (extras.Count - 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	extras.Add (s);  	//Format:  	// {projectGuid}.SolutionConfigName|SolutionPlatform.ActiveCfg = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Build.0 = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Deploy.0 = ProjConfigName|ProjPlatform  	string[] parts = s.Split (new char[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string action;  	string projConfig = parts [1].Trim ();  	string left = parts [0].Trim ();  	if (left.EndsWith (".ActiveCfg")) {  		action = "ActiveCfg";  		left = left.Substring (0' left.Length - 10);  	}  	else if (left.EndsWith (".Build.0")) {  		action = "Build.0";  		left = left.Substring (0' left.Length - 8);  	}  	else if (left.EndsWith (".Deploy.0")) {  		action = "Deploy.0";  		left = left.Substring (0' left.Length - 9);  	}  	else {  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  		continue;  	}  	string[] t = left.Split (new char[] {  		'.'  	}' 2);  	if (t.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string projGuid = t [0].ToUpper ();  	string slnConfig = t [1];  	if (!slnData.ItemsByGuid.ContainsKey (projGuid)) {  		if (ignoredProjects.ContainsKey (projGuid))  			// already warned  			continue;  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid));  		ignoredProjects [projGuid] = projGuid;  		continue;  	}  	SolutionEntityItem item;  	if (slnData.ItemsByGuid.TryGetValue (projGuid' out item)) {  		if (item is UnknownSolutionItem) {  			ItemSlnData data = ItemSlnData.ForItem (item);  			data.ConfigLines.Add (lines [lineNum]);  			extras.RemoveAt (extras.Count - 1);  			continue;  		}  		string key = projGuid + "." + slnConfig;  		SolutionConfigurationEntry combineConfigEntry = null;  		if (cache.ContainsKey (key)) {  			combineConfigEntry = cache [key];  		}  		else {  			combineConfigEntry = GetConfigEntry (sln' item' slnConfig);  			combineConfigEntry.Build = false;  			// Not buildable by default. Build will be enabled if a Build.0 entry is found  			cache [key] = combineConfigEntry;  		}  		/* If both ActiveCfg & Build.0 entries are missing 					 * for a project' then default values : 					 *	ActiveCfg : same as the solution config 					 *	Build : true 					 * 					 * ELSE 					 * if Build (true/false) for the project will  					 * will depend on presence/absence of Build.0 entry 					 */if (action == "ActiveCfg") {  			combineConfigEntry.ItemConfiguration = FromSlnConfigurationId (projConfig);  		}  		else if (action == "Build.0") {  			combineConfigEntry.Build = true;  		}  		else if (action == "Deploy.0") {  			combineConfigEntry.Deploy = true;  		}  	}  	extras.RemoveAt (extras.Count - 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	extras.Add (s);  	//Format:  	// {projectGuid}.SolutionConfigName|SolutionPlatform.ActiveCfg = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Build.0 = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Deploy.0 = ProjConfigName|ProjPlatform  	string[] parts = s.Split (new char[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string action;  	string projConfig = parts [1].Trim ();  	string left = parts [0].Trim ();  	if (left.EndsWith (".ActiveCfg")) {  		action = "ActiveCfg";  		left = left.Substring (0' left.Length - 10);  	}  	else if (left.EndsWith (".Build.0")) {  		action = "Build.0";  		left = left.Substring (0' left.Length - 8);  	}  	else if (left.EndsWith (".Deploy.0")) {  		action = "Deploy.0";  		left = left.Substring (0' left.Length - 9);  	}  	else {  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  		continue;  	}  	string[] t = left.Split (new char[] {  		'.'  	}' 2);  	if (t.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string projGuid = t [0].ToUpper ();  	string slnConfig = t [1];  	if (!slnData.ItemsByGuid.ContainsKey (projGuid)) {  		if (ignoredProjects.ContainsKey (projGuid))  			// already warned  			continue;  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid));  		ignoredProjects [projGuid] = projGuid;  		continue;  	}  	SolutionEntityItem item;  	if (slnData.ItemsByGuid.TryGetValue (projGuid' out item)) {  		if (item is UnknownSolutionItem) {  			ItemSlnData data = ItemSlnData.ForItem (item);  			data.ConfigLines.Add (lines [lineNum]);  			extras.RemoveAt (extras.Count - 1);  			continue;  		}  		string key = projGuid + "." + slnConfig;  		SolutionConfigurationEntry combineConfigEntry = null;  		if (cache.ContainsKey (key)) {  			combineConfigEntry = cache [key];  		}  		else {  			combineConfigEntry = GetConfigEntry (sln' item' slnConfig);  			combineConfigEntry.Build = false;  			// Not buildable by default. Build will be enabled if a Build.0 entry is found  			cache [key] = combineConfigEntry;  		}  		/* If both ActiveCfg & Build.0 entries are missing 					 * for a project' then default values : 					 *	ActiveCfg : same as the solution config 					 *	Build : true 					 * 					 * ELSE 					 * if Build (true/false) for the project will  					 * will depend on presence/absence of Build.0 entry 					 */if (action == "ActiveCfg") {  			combineConfigEntry.ItemConfiguration = FromSlnConfigurationId (projConfig);  		}  		else if (action == "Build.0") {  			combineConfigEntry.Build = true;  		}  		else if (action == "Deploy.0") {  			combineConfigEntry.Deploy = true;  		}  	}  	extras.RemoveAt (extras.Count - 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	extras.Add (s);  	//Format:  	// {projectGuid}.SolutionConfigName|SolutionPlatform.ActiveCfg = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Build.0 = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Deploy.0 = ProjConfigName|ProjPlatform  	string[] parts = s.Split (new char[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string action;  	string projConfig = parts [1].Trim ();  	string left = parts [0].Trim ();  	if (left.EndsWith (".ActiveCfg")) {  		action = "ActiveCfg";  		left = left.Substring (0' left.Length - 10);  	}  	else if (left.EndsWith (".Build.0")) {  		action = "Build.0";  		left = left.Substring (0' left.Length - 8);  	}  	else if (left.EndsWith (".Deploy.0")) {  		action = "Deploy.0";  		left = left.Substring (0' left.Length - 9);  	}  	else {  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  		continue;  	}  	string[] t = left.Split (new char[] {  		'.'  	}' 2);  	if (t.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string projGuid = t [0].ToUpper ();  	string slnConfig = t [1];  	if (!slnData.ItemsByGuid.ContainsKey (projGuid)) {  		if (ignoredProjects.ContainsKey (projGuid))  			// already warned  			continue;  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid));  		ignoredProjects [projGuid] = projGuid;  		continue;  	}  	SolutionEntityItem item;  	if (slnData.ItemsByGuid.TryGetValue (projGuid' out item)) {  		if (item is UnknownSolutionItem) {  			ItemSlnData data = ItemSlnData.ForItem (item);  			data.ConfigLines.Add (lines [lineNum]);  			extras.RemoveAt (extras.Count - 1);  			continue;  		}  		string key = projGuid + "." + slnConfig;  		SolutionConfigurationEntry combineConfigEntry = null;  		if (cache.ContainsKey (key)) {  			combineConfigEntry = cache [key];  		}  		else {  			combineConfigEntry = GetConfigEntry (sln' item' slnConfig);  			combineConfigEntry.Build = false;  			// Not buildable by default. Build will be enabled if a Build.0 entry is found  			cache [key] = combineConfigEntry;  		}  		/* If both ActiveCfg & Build.0 entries are missing 					 * for a project' then default values : 					 *	ActiveCfg : same as the solution config 					 *	Build : true 					 * 					 * ELSE 					 * if Build (true/false) for the project will  					 * will depend on presence/absence of Build.0 entry 					 */if (action == "ActiveCfg") {  			combineConfigEntry.ItemConfiguration = FromSlnConfigurationId (projConfig);  		}  		else if (action == "Build.0") {  			combineConfigEntry.Build = true;  		}  		else if (action == "Deploy.0") {  			combineConfigEntry.Deploy = true;  		}  	}  	extras.RemoveAt (extras.Count - 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	extras.Add (s);  	//Format:  	// {projectGuid}.SolutionConfigName|SolutionPlatform.ActiveCfg = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Build.0 = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Deploy.0 = ProjConfigName|ProjPlatform  	string[] parts = s.Split (new char[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string action;  	string projConfig = parts [1].Trim ();  	string left = parts [0].Trim ();  	if (left.EndsWith (".ActiveCfg")) {  		action = "ActiveCfg";  		left = left.Substring (0' left.Length - 10);  	}  	else if (left.EndsWith (".Build.0")) {  		action = "Build.0";  		left = left.Substring (0' left.Length - 8);  	}  	else if (left.EndsWith (".Deploy.0")) {  		action = "Deploy.0";  		left = left.Substring (0' left.Length - 9);  	}  	else {  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  		continue;  	}  	string[] t = left.Split (new char[] {  		'.'  	}' 2);  	if (t.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string projGuid = t [0].ToUpper ();  	string slnConfig = t [1];  	if (!slnData.ItemsByGuid.ContainsKey (projGuid)) {  		if (ignoredProjects.ContainsKey (projGuid))  			// already warned  			continue;  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid));  		ignoredProjects [projGuid] = projGuid;  		continue;  	}  	SolutionEntityItem item;  	if (slnData.ItemsByGuid.TryGetValue (projGuid' out item)) {  		if (item is UnknownSolutionItem) {  			ItemSlnData data = ItemSlnData.ForItem (item);  			data.ConfigLines.Add (lines [lineNum]);  			extras.RemoveAt (extras.Count - 1);  			continue;  		}  		string key = projGuid + "." + slnConfig;  		SolutionConfigurationEntry combineConfigEntry = null;  		if (cache.ContainsKey (key)) {  			combineConfigEntry = cache [key];  		}  		else {  			combineConfigEntry = GetConfigEntry (sln' item' slnConfig);  			combineConfigEntry.Build = false;  			// Not buildable by default. Build will be enabled if a Build.0 entry is found  			cache [key] = combineConfigEntry;  		}  		/* If both ActiveCfg & Build.0 entries are missing 					 * for a project' then default values : 					 *	ActiveCfg : same as the solution config 					 *	Build : true 					 * 					 * ELSE 					 * if Build (true/false) for the project will  					 * will depend on presence/absence of Build.0 entry 					 */if (action == "ActiveCfg") {  			combineConfigEntry.ItemConfiguration = FromSlnConfigurationId (projConfig);  		}  		else if (action == "Build.0") {  			combineConfigEntry.Build = true;  		}  		else if (action == "Deploy.0") {  			combineConfigEntry.Deploy = true;  		}  	}  	extras.RemoveAt (extras.Count - 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	extras.Add (s);  	//Format:  	// {projectGuid}.SolutionConfigName|SolutionPlatform.ActiveCfg = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Build.0 = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Deploy.0 = ProjConfigName|ProjPlatform  	string[] parts = s.Split (new char[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string action;  	string projConfig = parts [1].Trim ();  	string left = parts [0].Trim ();  	if (left.EndsWith (".ActiveCfg")) {  		action = "ActiveCfg";  		left = left.Substring (0' left.Length - 10);  	}  	else if (left.EndsWith (".Build.0")) {  		action = "Build.0";  		left = left.Substring (0' left.Length - 8);  	}  	else if (left.EndsWith (".Deploy.0")) {  		action = "Deploy.0";  		left = left.Substring (0' left.Length - 9);  	}  	else {  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  		continue;  	}  	string[] t = left.Split (new char[] {  		'.'  	}' 2);  	if (t.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string projGuid = t [0].ToUpper ();  	string slnConfig = t [1];  	if (!slnData.ItemsByGuid.ContainsKey (projGuid)) {  		if (ignoredProjects.ContainsKey (projGuid))  			// already warned  			continue;  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid));  		ignoredProjects [projGuid] = projGuid;  		continue;  	}  	SolutionEntityItem item;  	if (slnData.ItemsByGuid.TryGetValue (projGuid' out item)) {  		if (item is UnknownSolutionItem) {  			ItemSlnData data = ItemSlnData.ForItem (item);  			data.ConfigLines.Add (lines [lineNum]);  			extras.RemoveAt (extras.Count - 1);  			continue;  		}  		string key = projGuid + "." + slnConfig;  		SolutionConfigurationEntry combineConfigEntry = null;  		if (cache.ContainsKey (key)) {  			combineConfigEntry = cache [key];  		}  		else {  			combineConfigEntry = GetConfigEntry (sln' item' slnConfig);  			combineConfigEntry.Build = false;  			// Not buildable by default. Build will be enabled if a Build.0 entry is found  			cache [key] = combineConfigEntry;  		}  		/* If both ActiveCfg & Build.0 entries are missing 					 * for a project' then default values : 					 *	ActiveCfg : same as the solution config 					 *	Build : true 					 * 					 * ELSE 					 * if Build (true/false) for the project will  					 * will depend on presence/absence of Build.0 entry 					 */if (action == "ActiveCfg") {  			combineConfigEntry.ItemConfiguration = FromSlnConfigurationId (projConfig);  		}  		else if (action == "Build.0") {  			combineConfigEntry.Build = true;  		}  		else if (action == "Deploy.0") {  			combineConfigEntry.Deploy = true;  		}  	}  	extras.RemoveAt (extras.Count - 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	extras.Add (s);  	//Format:  	// {projectGuid}.SolutionConfigName|SolutionPlatform.ActiveCfg = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Build.0 = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Deploy.0 = ProjConfigName|ProjPlatform  	string[] parts = s.Split (new char[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string action;  	string projConfig = parts [1].Trim ();  	string left = parts [0].Trim ();  	if (left.EndsWith (".ActiveCfg")) {  		action = "ActiveCfg";  		left = left.Substring (0' left.Length - 10);  	}  	else if (left.EndsWith (".Build.0")) {  		action = "Build.0";  		left = left.Substring (0' left.Length - 8);  	}  	else if (left.EndsWith (".Deploy.0")) {  		action = "Deploy.0";  		left = left.Substring (0' left.Length - 9);  	}  	else {  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  		continue;  	}  	string[] t = left.Split (new char[] {  		'.'  	}' 2);  	if (t.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string projGuid = t [0].ToUpper ();  	string slnConfig = t [1];  	if (!slnData.ItemsByGuid.ContainsKey (projGuid)) {  		if (ignoredProjects.ContainsKey (projGuid))  			// already warned  			continue;  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid));  		ignoredProjects [projGuid] = projGuid;  		continue;  	}  	SolutionEntityItem item;  	if (slnData.ItemsByGuid.TryGetValue (projGuid' out item)) {  		if (item is UnknownSolutionItem) {  			ItemSlnData data = ItemSlnData.ForItem (item);  			data.ConfigLines.Add (lines [lineNum]);  			extras.RemoveAt (extras.Count - 1);  			continue;  		}  		string key = projGuid + "." + slnConfig;  		SolutionConfigurationEntry combineConfigEntry = null;  		if (cache.ContainsKey (key)) {  			combineConfigEntry = cache [key];  		}  		else {  			combineConfigEntry = GetConfigEntry (sln' item' slnConfig);  			combineConfigEntry.Build = false;  			// Not buildable by default. Build will be enabled if a Build.0 entry is found  			cache [key] = combineConfigEntry;  		}  		/* If both ActiveCfg & Build.0 entries are missing 					 * for a project' then default values : 					 *	ActiveCfg : same as the solution config 					 *	Build : true 					 * 					 * ELSE 					 * if Build (true/false) for the project will  					 * will depend on presence/absence of Build.0 entry 					 */if (action == "ActiveCfg") {  			combineConfigEntry.ItemConfiguration = FromSlnConfigurationId (projConfig);  		}  		else if (action == "Build.0") {  			combineConfigEntry.Build = true;  		}  		else if (action == "Deploy.0") {  			combineConfigEntry.Deploy = true;  		}  	}  	extras.RemoveAt (extras.Count - 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	extras.Add (s);  	//Format:  	// {projectGuid}.SolutionConfigName|SolutionPlatform.ActiveCfg = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Build.0 = ProjConfigName|ProjPlatform  	// {projectGuid}.SolutionConfigName|SolutionPlatform.Deploy.0 = ProjConfigName|ProjPlatform  	string[] parts = s.Split (new char[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string action;  	string projConfig = parts [1].Trim ();  	string left = parts [0].Trim ();  	if (left.EndsWith (".ActiveCfg")) {  		action = "ActiveCfg";  		left = left.Substring (0' left.Length - 10);  	}  	else if (left.EndsWith (".Build.0")) {  		action = "Build.0";  		left = left.Substring (0' left.Length - 8);  	}  	else if (left.EndsWith (".Deploy.0")) {  		action = "Deploy.0";  		left = left.Substring (0' left.Length - 9);  	}  	else {  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  		continue;  	}  	string[] t = left.Split (new char[] {  		'.'  	}' 2);  	if (t.Length < 2) {  		LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  		continue;  	}  	string projGuid = t [0].ToUpper ();  	string slnConfig = t [1];  	if (!slnData.ItemsByGuid.ContainsKey (projGuid)) {  		if (ignoredProjects.ContainsKey (projGuid))  			// already warned  			continue;  		LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Project with guid = '{2}' not found or not loaded. Ignoring"' sln.FileName' lineNum + 1' projGuid));  		ignoredProjects [projGuid] = projGuid;  		continue;  	}  	SolutionEntityItem item;  	if (slnData.ItemsByGuid.TryGetValue (projGuid' out item)) {  		if (item is UnknownSolutionItem) {  			ItemSlnData data = ItemSlnData.ForItem (item);  			data.ConfigLines.Add (lines [lineNum]);  			extras.RemoveAt (extras.Count - 1);  			continue;  		}  		string key = projGuid + "." + slnConfig;  		SolutionConfigurationEntry combineConfigEntry = null;  		if (cache.ContainsKey (key)) {  			combineConfigEntry = cache [key];  		}  		else {  			combineConfigEntry = GetConfigEntry (sln' item' slnConfig);  			combineConfigEntry.Build = false;  			// Not buildable by default. Build will be enabled if a Build.0 entry is found  			cache [key] = combineConfigEntry;  		}  		/* If both ActiveCfg & Build.0 entries are missing 					 * for a project' then default values : 					 *	ActiveCfg : same as the solution config 					 *	Build : true 					 * 					 * ELSE 					 * if Build (true/false) for the project will  					 * will depend on presence/absence of Build.0 entry 					 */if (action == "ActiveCfg") {  			combineConfigEntry.ItemConfiguration = FromSlnConfigurationId (projConfig);  		}  		else if (action == "Build.0") {  			combineConfigEntry.Build = true;  		}  		else if (action == "Deploy.0") {  			combineConfigEntry.Deploy = true;  		}  	}  	extras.RemoveAt (extras.Count - 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: if (parts.Length < 2) {  	LoggingService.LogDebug ("{0} ({1}) : Invalid format. Ignoring"' sln.FileName' lineNum + 1);  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: if (left.EndsWith (".ActiveCfg")) {  	action = "ActiveCfg";  	left = left.Substring (0' left.Length - 10);  }  else if (left.EndsWith (".Build.0")) {  	action = "Build.0";  	left = left.Substring (0' left.Length - 8);  }  else if (left.EndsWith (".Deploy.0")) {  	action = "Deploy.0";  	left = left.Substring (0' left.Length - 9);  }  else {  	LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: if (left.EndsWith (".ActiveCfg")) {  	action = "ActiveCfg";  	left = left.Substring (0' left.Length - 10);  }  else if (left.EndsWith (".Build.0")) {  	action = "Build.0";  	left = left.Substring (0' left.Length - 8);  }  else if (left.EndsWith (".Deploy.0")) {  	action = "Deploy.0";  	left = left.Substring (0' left.Length - 9);  }  else {  	LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: if (left.EndsWith (".ActiveCfg")) {  	action = "ActiveCfg";  	left = left.Substring (0' left.Length - 10);  }  else if (left.EndsWith (".Build.0")) {  	action = "Build.0";  	left = left.Substring (0' left.Length - 8);  }  else if (left.EndsWith (".Deploy.0")) {  	action = "Deploy.0";  	left = left.Substring (0' left.Length - 9);  }  else {  	LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: left = left.Substring (0' left.Length - 10);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: if (left.EndsWith (".Build.0")) {  	action = "Build.0";  	left = left.Substring (0' left.Length - 8);  }  else if (left.EndsWith (".Deploy.0")) {  	action = "Deploy.0";  	left = left.Substring (0' left.Length - 9);  }  else {  	LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: if (left.EndsWith (".Build.0")) {  	action = "Build.0";  	left = left.Substring (0' left.Length - 8);  }  else if (left.EndsWith (".Deploy.0")) {  	action = "Deploy.0";  	left = left.Substring (0' left.Length - 9);  }  else {  	LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: left = left.Substring (0' left.Length - 8);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: if (left.EndsWith (".Deploy.0")) {  	action = "Deploy.0";  	left = left.Substring (0' left.Length - 9);  }  else {  	LoggingService.LogWarning (GettextCatalog.GetString ("{0} ({1}) : Unknown action. Only ActiveCfg' Build.0 and Deploy.0 supported."' sln.FileName' lineNum + 1));  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: left = left.Substring (0' left.Length - 9);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadProjectConfigurationMappings,The following statement contains a magic number: if (t.Length < 2) {  	LoggingService.LogDebug ("{0} ({1}) : Invalid format of the left side. Ignoring"' sln.FileName' lineNum + 1);  	continue;  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadSolutionConfigurations,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	//FIXME: expects both key and val to be on the same line  	int lineNum = i + sec.Start + 1;  	string s = lines [lineNum].Trim ();  	if (s.Length == 0)  		//Skip blank lines  		continue;  	KeyValuePair<string' string> pair = SplitKeyValue (s);  	string configId = FromSlnConfigurationId (pair.Key);  	SolutionConfiguration config = solution.Configurations [configId];  	if (config == null) {  		config = CreateSolutionConfigurationFromId (configId);  		solution.Configurations.Add (config);  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,LoadNestedProjects,The following statement contains a magic number: for (int i = 0; i < sec.Count - 2; i++) {  	// Guids should be upper case for VS compatibility  	KeyValuePair<string' string> pair = SplitKeyValue (lines [i + sec.Start + 1].Trim ());  	pair = new KeyValuePair<string' string> (pair.Key.ToUpper ()' pair.Value.ToUpper ());  	SolutionItem folderItem;  	SolutionItem item;  	if (!entries.TryGetValue (pair.Value' out folderItem)) {  		//Container not found  		LoggingService.LogWarning (GettextCatalog.GetString ("Project with guid '{0}' not found."' pair.Value));  		continue;  	}  	SolutionFolder folder = folderItem as SolutionFolder;  	if (folder == null) {  		LoggingService.LogWarning (GettextCatalog.GetString ("Item with guid '{0}' is not a folder."' pair.Value));  		continue;  	}  	if (!entries.TryGetValue (pair.Key' out item)) {  		//Containee not found  		LoggingService.LogWarning (GettextCatalog.GetString ("Project with guid '{0}' not found."' pair.Key));  		continue;  	}  	folder.Items.Add (item);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,SlnFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\SlnFileFormat.cs,SplitKeyValue,The following statement contains a magic number: if (pair.Length == 2)  	val = pair [1].Trim ();  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,EscapeString,The following statement contains a magic number: while (i != -1) {  	str = str.Substring (0' i) + '%' + ((int)str [i]).ToString ("X") + str.Substring (i + 1);  	i = str.IndexOfAny (specialCharacters' i + 3);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,EscapeString,The following statement contains a magic number: i = str.IndexOfAny (specialCharacters' i + 3);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,UnscapeString,The following statement contains a magic number: while (i != -1 && i < str.Length - 2) {  	int c;  	if (int.TryParse (str.Substring (i + 1' 2)' NumberStyles.HexNumber' null' out c))  		str = str.Substring (0' i) + (char)c + str.Substring (i + 3);  	i = str.IndexOf ('%'' i + 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,UnscapeString,The following statement contains a magic number: while (i != -1 && i < str.Length - 2) {  	int c;  	if (int.TryParse (str.Substring (i + 1' 2)' NumberStyles.HexNumber' null' out c))  		str = str.Substring (0' i) + (char)c + str.Substring (i + 3);  	i = str.IndexOf ('%'' i + 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,UnscapeString,The following statement contains a magic number: while (i != -1 && i < str.Length - 2) {  	int c;  	if (int.TryParse (str.Substring (i + 1' 2)' NumberStyles.HexNumber' null' out c))  		str = str.Substring (0' i) + (char)c + str.Substring (i + 3);  	i = str.IndexOf ('%'' i + 1);  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,UnscapeString,The following statement contains a magic number: if (int.TryParse (str.Substring (i + 1' 2)' NumberStyles.HexNumber' null' out c))  	str = str.Substring (0' i) + (char)c + str.Substring (i + 3);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,UnscapeString,The following statement contains a magic number: if (int.TryParse (str.Substring (i + 1' 2)' NumberStyles.HexNumber' null' out c))  	str = str.Substring (0' i) + (char)c + str.Substring (i + 3);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,UnscapeString,The following statement contains a magic number: str = str.Substring (0' i) + (char)c + str.Substring (i + 3);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,GetExeLocation,The following statement contains a magic number: if ((runtime is MsNetTargetRuntime) && int.Parse (toolsVersion.Split ('.') [0]) >= 4)  	toolsVersion = "dotnet." + toolsVersion;  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,ReleaseProjectBuilder,The following statement contains a magic number: lock (builders) {  	if (engine.ReferenceCount > 0) {  		if (--engine.ReferenceCount == 0) {  			engine.ReleaseTime = DateTime.Now.AddSeconds (3);  			ScheduleProjectBuilderCleanup (engine.ReleaseTime.AddMilliseconds (500));  		}  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,ReleaseProjectBuilder,The following statement contains a magic number: lock (builders) {  	if (engine.ReferenceCount > 0) {  		if (--engine.ReferenceCount == 0) {  			engine.ReleaseTime = DateTime.Now.AddSeconds (3);  			ScheduleProjectBuilderCleanup (engine.ReleaseTime.AddMilliseconds (500));  		}  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,ReleaseProjectBuilder,The following statement contains a magic number: if (engine.ReferenceCount > 0) {  	if (--engine.ReferenceCount == 0) {  		engine.ReleaseTime = DateTime.Now.AddSeconds (3);  		ScheduleProjectBuilderCleanup (engine.ReleaseTime.AddMilliseconds (500));  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,ReleaseProjectBuilder,The following statement contains a magic number: if (engine.ReferenceCount > 0) {  	if (--engine.ReferenceCount == 0) {  		engine.ReleaseTime = DateTime.Now.AddSeconds (3);  		ScheduleProjectBuilderCleanup (engine.ReleaseTime.AddMilliseconds (500));  	}  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,ReleaseProjectBuilder,The following statement contains a magic number: if (--engine.ReferenceCount == 0) {  	engine.ReleaseTime = DateTime.Now.AddSeconds (3);  	ScheduleProjectBuilderCleanup (engine.ReleaseTime.AddMilliseconds (500));  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,ReleaseProjectBuilder,The following statement contains a magic number: if (--engine.ReferenceCount == 0) {  	engine.ReleaseTime = DateTime.Now.AddSeconds (3);  	ScheduleProjectBuilderCleanup (engine.ReleaseTime.AddMilliseconds (500));  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,ReleaseProjectBuilder,The following statement contains a magic number: engine.ReleaseTime = DateTime.Now.AddSeconds (3);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProjectService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProjectService.cs,ReleaseProjectBuilder,The following statement contains a magic number: ScheduleProjectBuilderCleanup (engine.ReleaseTime.AddMilliseconds (500));  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,Load,The following statement contains a magic number: using (FileStream fs = File.OpenRead (file)) {  	byte[] buf = new byte[1024];  	int nread' i;  	if ((nread = fs.Read (buf' 0' buf.Length)) <= 0)  		return;  	if (ByteOrderMark.TryParse (buf' nread' out bom))  		i = bom.Length;  	else  		i = 0;  	do {  		// Read to the first newline to figure out which line endings this file is using  		while (i < nread) {  			if (buf [i] == '\r') {  				newLine = "\r\n";  				break;  			}  			else if (buf [i] == '\n') {  				newLine = "\n";  				break;  			}  			i++;  		}  		if (newLine == null) {  			if ((nread = fs.Read (buf' 0' buf.Length)) <= 0) {  				newLine = "\n";  				break;  			}  			i = 0;  		}  	}  	while (newLine == null);  	// Check for a blank line at the end  	endsWithEmptyLine = fs.Seek (-1' SeekOrigin.End) > 0 && fs.ReadByte () == (int)'\n';  }  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildEvaluationContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,Evaluate,The following statement contains a magic number: do {  	sb.Append (str' last' i - last);  	i += 2;  	int j = str.IndexOf (")"' i);  	if (j == -1) {  		allResolved = false;  		return "";  	}  	string prop = str.Substring (i' j - i);  	string val = GetPropertyValue (prop);  	if (val == null) {  		allResolved = false;  		return "";  	}  	sb.Append (val);  	last = j + 1;  	i = str.IndexOf ("$("' last);  }  while (i != -1);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildEvaluationContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,Evaluate,The following statement contains a magic number: i += 2;  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildEvaluationContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,EvaluateString,The following statement contains a magic number: if (value.StartsWith ("$(") && value.EndsWith (")"))  	return GetPropertyValue (value.Substring (2' value.Length - 3)) ?? value;  else  	return value;  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildEvaluationContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,EvaluateString,The following statement contains a magic number: if (value.StartsWith ("$(") && value.EndsWith (")"))  	return GetPropertyValue (value.Substring (2' value.Length - 3)) ?? value;  else  	return value;  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildEvaluationContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,EvaluateString,The following statement contains a magic number: return GetPropertyValue (value.Substring (2' value.Length - 3)) ?? value;  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildEvaluationContext,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildProject.cs,EvaluateString,The following statement contains a magic number: return GetPropertyValue (value.Substring (2' value.Length - 3)) ?? value;  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildHandler.cs,Save,The following statement contains a magic number: if (HasSlnData && !SavingSolution && Item.ParentSolution != null) {  	// The project has data that has to be saved in the solution' but the solution is not being saved. Do it now.  	monitor.BeginTask (null' 2);  	SaveItem (monitor);  	monitor.Step (1);  	Solution sol = Item.ParentSolution;  	targetFormat.SlnFileFormat.WriteFile (sol.FileName' sol' targetFormat' false' monitor);  	sol.NeedsReload = false;  	monitor.EndTask ();  }  else  	SaveItem (monitor);  
Magic Number,MonoDevelop.Projects.Formats.MSBuild,MSBuildHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildHandler.cs,Save,The following statement contains a magic number: monitor.BeginTask (null' 2);  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,ConditionTokenizer,The following statement contains a magic number: for (int i = 0; i < 128; i++)  	charIndexToTokenType [i] = TokenType.Invalid;  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '-' && PeekChar () == '>') {  	ReadChar ();  	token = new Token ("->"' TokenType.Transform);  }  else if (Char.IsDigit (ch) || ch == '-') {  	StringBuilder sb = new StringBuilder ();  	sb.Append (ch);  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (Char.IsDigit (ch) || ch == '.')  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	token = new Token (sb.ToString ()' TokenType.Number);  }  else if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '-' && PeekChar () == '>') {  	ReadChar ();  	token = new Token ("->"' TokenType.Transform);  }  else if (Char.IsDigit (ch) || ch == '-') {  	StringBuilder sb = new StringBuilder ();  	sb.Append (ch);  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (Char.IsDigit (ch) || ch == '.')  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	token = new Token (sb.ToString ()' TokenType.Number);  }  else if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '-' && PeekChar () == '>') {  	ReadChar ();  	token = new Token ("->"' TokenType.Transform);  }  else if (Char.IsDigit (ch) || ch == '-') {  	StringBuilder sb = new StringBuilder ();  	sb.Append (ch);  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (Char.IsDigit (ch) || ch == '.')  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	token = new Token (sb.ToString ()' TokenType.Number);  }  else if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (Char.IsDigit (ch) || ch == '-') {  	StringBuilder sb = new StringBuilder ();  	sb.Append (ch);  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (Char.IsDigit (ch) || ch == '.')  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	token = new Token (sb.ToString ()' TokenType.Number);  }  else if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (Char.IsDigit (ch) || ch == '-') {  	StringBuilder sb = new StringBuilder ();  	sb.Append (ch);  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (Char.IsDigit (ch) || ch == '.')  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	token = new Token (sb.ToString ()' TokenType.Number);  }  else if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (Char.IsDigit (ch) || ch == '-') {  	StringBuilder sb = new StringBuilder ();  	sb.Append (ch);  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (Char.IsDigit (ch) || ch == '.')  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	token = new Token (sb.ToString ()' TokenType.Number);  }  else if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '\'') {  	StringBuilder sb = new StringBuilder ();  	string temp;  	sb.Append (ch);  	bool is_itemref = (PeekChar () == '@');  	int num_open_braces = 0;  	bool in_literal = false;  	while ((i = PeekChar ()) != -1) {  		ch = (char)i;  		if (ch == '(' && !in_literal && is_itemref)  			num_open_braces++;  		if (ch == ')' && !in_literal && is_itemref)  			num_open_braces--;  		sb.Append ((char)ReadChar ());  		if (ch == '\'') {  			if (num_open_braces == 0)  				break;  			in_literal = !in_literal;  		}  	}  	temp = sb.ToString ();  	token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  }  else if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: token = new Token (temp.Substring (1' temp.Length - 2)' TokenType.String);  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '_' || Char.IsLetter (ch)) {  	StringBuilder sb = new StringBuilder ();  	sb.Append ((char)ch);  	while ((i = PeekChar ()) != -1) {  		if ((char)i == '_' || Char.IsLetterOrDigit ((char)i))  			sb.Append ((char)ReadChar ());  		else  			break;  	}  	string temp = sb.ToString ();  	if (keywords.ContainsKey (temp))  		token = new Token (temp' keywords [temp]);  	else  		token = new Token (temp' TokenType.String);  }  else if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '!' && PeekChar () == (int)'=') {  	token = new Token ("!="' TokenType.NotEqual);  	ReadChar ();  }  else if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '<' && PeekChar () == (int)'=') {  	token = new Token ("<="' TokenType.LessOrEqual);  	ReadChar ();  }  else if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '>' && PeekChar () == (int)'=') {  	token = new Token (">="' TokenType.GreaterOrEqual);  	ReadChar ();  }  else if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch == '=' && PeekChar () == (int)'=') {  	token = new Token ("=="' TokenType.Equal);  	ReadChar ();  }  else if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,Microsoft.Build.BuildEngine,ConditionTokenizer,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild.Conditions\ConditionTokenizer.cs,GetNextToken,The following statement contains a magic number: if (ch >= 32 && ch < 128) {  	if (charIndexToTokenType [ch] != TokenType.Invalid) {  		token = new Token (new String (ch' 1)' charIndexToTokenType [ch]);  		return;  	}  	else  		throw new ExpressionParseException (String.Format ("Invalid punctuation: {0}"' ch));  }  else  	throw new ExpressionParseException (String.Format ("Invalid token: {0}"' ch));  
Magic Number,MonoDevelop.Projects.Text,TextFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFile.cs,WriteFile,The following statement contains a magic number: if (onlyIfChanged) {  	FileInfo finfo = new FileInfo (fileName);  	if (finfo.Exists && finfo.Length == contentLength) {  		bool changed = false;  		// Open the file on disk and compare them byte by byte...  		using (FileStream stream = finfo.Open (FileMode.Open' FileAccess.Read' FileShare.Read)) {  			byte[] buf = new byte[4096];  			int bomOffset = 0;  			int offset = 0;  			int nread;  			int i;  			while (!changed && (nread = stream.Read (buf' 0' buf.Length)) > 0) {  				i = 0;  				if (bom != null && bomOffset < bom.Length) {  					while (i < nread && bomOffset < bom.Length) {  						if (bom.Bytes [bomOffset] != buf [i]) {  							changed = true;  							break;  						}  						bomOffset++;  						i++;  					}  					if (changed)  						break;  				}  				while (i < nread && offset < converted.Length) {  					if (converted [offset] != buf [i]) {  						changed = true;  						break;  					}  					offset++;  					i++;  				}  				if (offset == converted.Length && i < nread)  					changed = true;  			}  			if (offset < converted.Length)  				changed = true;  		}  		if (!changed)  			return;  	}  	// Content has changed...  }  
Magic Number,MonoDevelop.Projects.Text,TextFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFile.cs,WriteFile,The following statement contains a magic number: if (finfo.Exists && finfo.Length == contentLength) {  	bool changed = false;  	// Open the file on disk and compare them byte by byte...  	using (FileStream stream = finfo.Open (FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] buf = new byte[4096];  		int bomOffset = 0;  		int offset = 0;  		int nread;  		int i;  		while (!changed && (nread = stream.Read (buf' 0' buf.Length)) > 0) {  			i = 0;  			if (bom != null && bomOffset < bom.Length) {  				while (i < nread && bomOffset < bom.Length) {  					if (bom.Bytes [bomOffset] != buf [i]) {  						changed = true;  						break;  					}  					bomOffset++;  					i++;  				}  				if (changed)  					break;  			}  			while (i < nread && offset < converted.Length) {  				if (converted [offset] != buf [i]) {  					changed = true;  					break;  				}  				offset++;  				i++;  			}  			if (offset == converted.Length && i < nread)  				changed = true;  		}  		if (offset < converted.Length)  			changed = true;  	}  	if (!changed)  		return;  }  
Magic Number,MonoDevelop.Projects.Text,TextFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFile.cs,WriteFile,The following statement contains a magic number: using (FileStream stream = finfo.Open (FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] buf = new byte[4096];  	int bomOffset = 0;  	int offset = 0;  	int nread;  	int i;  	while (!changed && (nread = stream.Read (buf' 0' buf.Length)) > 0) {  		i = 0;  		if (bom != null && bomOffset < bom.Length) {  			while (i < nread && bomOffset < bom.Length) {  				if (bom.Bytes [bomOffset] != buf [i]) {  					changed = true;  					break;  				}  				bomOffset++;  				i++;  			}  			if (changed)  				break;  		}  		while (i < nread && offset < converted.Length) {  			if (converted [offset] != buf [i]) {  				changed = true;  				break;  			}  			offset++;  			i++;  		}  		if (offset == converted.Length && i < nread)  			changed = true;  	}  	if (offset < converted.Length)  		changed = true;  }  
Magic Number,MonoDevelop.Projects.Text,TextFormatter,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFormatter.cs,TextFormatter,The following statement contains a magic number: MaxColumns = 80;  
Magic Number,MonoDevelop.Projects.Text,TextFormatter,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\TextFormatter.cs,TextFormatter,The following statement contains a magic number: TabWidth = 4;  
Magic Number,MonoDevelop.Projects.Utility,ByteOrderMark,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Utility\ByteOrderMark.cs,TryParse,The following statement contains a magic number: if (buffer.Length >= 2) {  	for (int i = 0; i < table.Length; i++) {  		bool matched = true;  		if (available < table [i].Bytes.Length)  			continue;  		for (int j = 0; j < table [i].Bytes.Length; j++) {  			if (buffer [j] != table [i].Bytes [j]) {  				matched = false;  				break;  			}  		}  		if (matched) {  			bom = table [i];  			return true;  		}  	}  }  
Magic Number,MonoDevelop.Projects.Utility,ByteOrderMark,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Utility\ByteOrderMark.cs,TryParse,The following statement contains a magic number: if ((nread = stream.Read (buffer' 0' buffer.Length)) < 2) {  	bom = null;  	return false;  }  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	matchRank = filterLowerCase.Length - name.Length;  	matchRank -= lane.Positions [0];  	matchRank += (lane.WordStartsMatched - totalWords) * 100;  	// Favor matches where all parts are word starts  	if (lane.WordStartsMatched == lane.Index + 1)  		matchRank += 100;  	// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  	int baseRank = (filter.Length - lane.Index - 1) * 5000;  	// First matching letter close to the begining is better  	// The more matched letters the better  	matchRank = baseRank - (lane.Positions [0] + (name.Length - filterLowerCase.Length));  	matchRank += lane.ExactCaseMatches * 10;  	// rank up matches which start with a filter substring  	if (lane.Positions [0] == 0)  		matchRank += lane.Lengths [0] * 50;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	matchRank = filterLowerCase.Length - name.Length;  	matchRank -= lane.Positions [0];  	matchRank += (lane.WordStartsMatched - totalWords) * 100;  	// Favor matches where all parts are word starts  	if (lane.WordStartsMatched == lane.Index + 1)  		matchRank += 100;  	// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  	int baseRank = (filter.Length - lane.Index - 1) * 5000;  	// First matching letter close to the begining is better  	// The more matched letters the better  	matchRank = baseRank - (lane.Positions [0] + (name.Length - filterLowerCase.Length));  	matchRank += lane.ExactCaseMatches * 10;  	// rank up matches which start with a filter substring  	if (lane.Positions [0] == 0)  		matchRank += lane.Lengths [0] * 50;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	matchRank = filterLowerCase.Length - name.Length;  	matchRank -= lane.Positions [0];  	matchRank += (lane.WordStartsMatched - totalWords) * 100;  	// Favor matches where all parts are word starts  	if (lane.WordStartsMatched == lane.Index + 1)  		matchRank += 100;  	// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  	int baseRank = (filter.Length - lane.Index - 1) * 5000;  	// First matching letter close to the begining is better  	// The more matched letters the better  	matchRank = baseRank - (lane.Positions [0] + (name.Length - filterLowerCase.Length));  	matchRank += lane.ExactCaseMatches * 10;  	// rank up matches which start with a filter substring  	if (lane.Positions [0] == 0)  		matchRank += lane.Lengths [0] * 50;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	matchRank = filterLowerCase.Length - name.Length;  	matchRank -= lane.Positions [0];  	matchRank += (lane.WordStartsMatched - totalWords) * 100;  	// Favor matches where all parts are word starts  	if (lane.WordStartsMatched == lane.Index + 1)  		matchRank += 100;  	// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  	int baseRank = (filter.Length - lane.Index - 1) * 5000;  	// First matching letter close to the begining is better  	// The more matched letters the better  	matchRank = baseRank - (lane.Positions [0] + (name.Length - filterLowerCase.Length));  	matchRank += lane.ExactCaseMatches * 10;  	// rank up matches which start with a filter substring  	if (lane.Positions [0] == 0)  		matchRank += lane.Lengths [0] * 50;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	matchRank = filterLowerCase.Length - name.Length;  	matchRank -= lane.Positions [0];  	matchRank += (lane.WordStartsMatched - totalWords) * 100;  	// Favor matches where all parts are word starts  	if (lane.WordStartsMatched == lane.Index + 1)  		matchRank += 100;  	// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  	int baseRank = (filter.Length - lane.Index - 1) * 5000;  	// First matching letter close to the begining is better  	// The more matched letters the better  	matchRank = baseRank - (lane.Positions [0] + (name.Length - filterLowerCase.Length));  	matchRank += lane.ExactCaseMatches * 10;  	// rank up matches which start with a filter substring  	if (lane.Positions [0] == 0)  		matchRank += lane.Lengths [0] * 50;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: matchRank += (lane.WordStartsMatched - totalWords) * 100;  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane.WordStartsMatched == lane.Index + 1)  	matchRank += 100;  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: matchRank += 100;  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: matchRank += lane.ExactCaseMatches * 10;  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane.Positions [0] == 0)  	matchRank += lane.Lengths [0] * 50;  
Magic Number,MonoDevelop.Core.Text,LaneStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\LaneStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: matchRank += lane.Lengths [0] * 50;  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,BacktrackingStringMatcher,The following statement contains a magic number: if (filterText != null) {  	for (int i = 0; i < filterText.Length && i < 64; i++) {  		filterTextLowerCaseTable |= char.IsLower (filterText [i]) ? 1ul << i : 0;  		filterIsNonLetter |= !char.IsLetterOrDigit (filterText [i]) ? 1ul << i : 0;  		filterIsDigit |= char.IsDigit (filterText [i]) ? 1ul << i : 0;  	}  	filterTextUpperCase = filterText.ToUpper ();  }  else {  	filterTextUpperCase = "";  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,BacktrackingStringMatcher,The following statement contains a magic number: for (int i = 0; i < filterText.Length && i < 64; i++) {  	filterTextLowerCaseTable |= char.IsLower (filterText [i]) ? 1ul << i : 0;  	filterIsNonLetter |= !char.IsLetterOrDigit (filterText [i]) ? 1ul << i : 0;  	filterIsDigit |= char.IsDigit (filterText [i]) ? 1ul << i : 0;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	if (name.Length == filterText.Length) {  		matchRank = int.MaxValue;  		for (int n = 0; n < name.Length; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	// exact named parameter case see discussion in bug #9114  	if (name.Length - 1 == filterText.Length && name [name.Length - 1] == ':') {  		matchRank = int.MaxValue - 1;  		for (int n = 0; n < name.Length - 1; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	int capitalMatches = 0;  	int nonCapitalMatches = 0;  	int matching = 0;  	int fragments = 0;  	int lastIndex = -1;  	for (int n = 0; n < lane.Length; n++) {  		var ch = filterText [n];  		var i = lane [n];  		bool newFragment = i > lastIndex + 1;  		if (newFragment)  			fragments++;  		lastIndex = i;  		if (ch == name [i]) {  			matching += 1000 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  		}  		else if (newFragment || i == 0) {  			matching += 900 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 1000 - 100 * fragments);  		}  		else {  			var x = 600 / (1 + fragments);  			nonCapitalMatches += x;  		}  	}  	matchRank = capitalMatches + matching - fragments + nonCapitalMatches + filterText.Length - name.Length;  	// devalue named parameters.  	if (name [name.Length - 1] == ':')  		matchRank /= 2;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	if (name.Length == filterText.Length) {  		matchRank = int.MaxValue;  		for (int n = 0; n < name.Length; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	// exact named parameter case see discussion in bug #9114  	if (name.Length - 1 == filterText.Length && name [name.Length - 1] == ':') {  		matchRank = int.MaxValue - 1;  		for (int n = 0; n < name.Length - 1; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	int capitalMatches = 0;  	int nonCapitalMatches = 0;  	int matching = 0;  	int fragments = 0;  	int lastIndex = -1;  	for (int n = 0; n < lane.Length; n++) {  		var ch = filterText [n];  		var i = lane [n];  		bool newFragment = i > lastIndex + 1;  		if (newFragment)  			fragments++;  		lastIndex = i;  		if (ch == name [i]) {  			matching += 1000 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  		}  		else if (newFragment || i == 0) {  			matching += 900 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 1000 - 100 * fragments);  		}  		else {  			var x = 600 / (1 + fragments);  			nonCapitalMatches += x;  		}  	}  	matchRank = capitalMatches + matching - fragments + nonCapitalMatches + filterText.Length - name.Length;  	// devalue named parameters.  	if (name [name.Length - 1] == ':')  		matchRank /= 2;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	if (name.Length == filterText.Length) {  		matchRank = int.MaxValue;  		for (int n = 0; n < name.Length; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	// exact named parameter case see discussion in bug #9114  	if (name.Length - 1 == filterText.Length && name [name.Length - 1] == ':') {  		matchRank = int.MaxValue - 1;  		for (int n = 0; n < name.Length - 1; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	int capitalMatches = 0;  	int nonCapitalMatches = 0;  	int matching = 0;  	int fragments = 0;  	int lastIndex = -1;  	for (int n = 0; n < lane.Length; n++) {  		var ch = filterText [n];  		var i = lane [n];  		bool newFragment = i > lastIndex + 1;  		if (newFragment)  			fragments++;  		lastIndex = i;  		if (ch == name [i]) {  			matching += 1000 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  		}  		else if (newFragment || i == 0) {  			matching += 900 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 1000 - 100 * fragments);  		}  		else {  			var x = 600 / (1 + fragments);  			nonCapitalMatches += x;  		}  	}  	matchRank = capitalMatches + matching - fragments + nonCapitalMatches + filterText.Length - name.Length;  	// devalue named parameters.  	if (name [name.Length - 1] == ':')  		matchRank /= 2;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	if (name.Length == filterText.Length) {  		matchRank = int.MaxValue;  		for (int n = 0; n < name.Length; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	// exact named parameter case see discussion in bug #9114  	if (name.Length - 1 == filterText.Length && name [name.Length - 1] == ':') {  		matchRank = int.MaxValue - 1;  		for (int n = 0; n < name.Length - 1; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	int capitalMatches = 0;  	int nonCapitalMatches = 0;  	int matching = 0;  	int fragments = 0;  	int lastIndex = -1;  	for (int n = 0; n < lane.Length; n++) {  		var ch = filterText [n];  		var i = lane [n];  		bool newFragment = i > lastIndex + 1;  		if (newFragment)  			fragments++;  		lastIndex = i;  		if (ch == name [i]) {  			matching += 1000 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  		}  		else if (newFragment || i == 0) {  			matching += 900 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 1000 - 100 * fragments);  		}  		else {  			var x = 600 / (1 + fragments);  			nonCapitalMatches += x;  		}  	}  	matchRank = capitalMatches + matching - fragments + nonCapitalMatches + filterText.Length - name.Length;  	// devalue named parameters.  	if (name [name.Length - 1] == ':')  		matchRank /= 2;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	if (name.Length == filterText.Length) {  		matchRank = int.MaxValue;  		for (int n = 0; n < name.Length; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	// exact named parameter case see discussion in bug #9114  	if (name.Length - 1 == filterText.Length && name [name.Length - 1] == ':') {  		matchRank = int.MaxValue - 1;  		for (int n = 0; n < name.Length - 1; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	int capitalMatches = 0;  	int nonCapitalMatches = 0;  	int matching = 0;  	int fragments = 0;  	int lastIndex = -1;  	for (int n = 0; n < lane.Length; n++) {  		var ch = filterText [n];  		var i = lane [n];  		bool newFragment = i > lastIndex + 1;  		if (newFragment)  			fragments++;  		lastIndex = i;  		if (ch == name [i]) {  			matching += 1000 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  		}  		else if (newFragment || i == 0) {  			matching += 900 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 1000 - 100 * fragments);  		}  		else {  			var x = 600 / (1 + fragments);  			nonCapitalMatches += x;  		}  	}  	matchRank = capitalMatches + matching - fragments + nonCapitalMatches + filterText.Length - name.Length;  	// devalue named parameters.  	if (name [name.Length - 1] == ':')  		matchRank /= 2;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	if (name.Length == filterText.Length) {  		matchRank = int.MaxValue;  		for (int n = 0; n < name.Length; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	// exact named parameter case see discussion in bug #9114  	if (name.Length - 1 == filterText.Length && name [name.Length - 1] == ':') {  		matchRank = int.MaxValue - 1;  		for (int n = 0; n < name.Length - 1; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	int capitalMatches = 0;  	int nonCapitalMatches = 0;  	int matching = 0;  	int fragments = 0;  	int lastIndex = -1;  	for (int n = 0; n < lane.Length; n++) {  		var ch = filterText [n];  		var i = lane [n];  		bool newFragment = i > lastIndex + 1;  		if (newFragment)  			fragments++;  		lastIndex = i;  		if (ch == name [i]) {  			matching += 1000 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  		}  		else if (newFragment || i == 0) {  			matching += 900 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 1000 - 100 * fragments);  		}  		else {  			var x = 600 / (1 + fragments);  			nonCapitalMatches += x;  		}  	}  	matchRank = capitalMatches + matching - fragments + nonCapitalMatches + filterText.Length - name.Length;  	// devalue named parameters.  	if (name [name.Length - 1] == ':')  		matchRank /= 2;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	if (name.Length == filterText.Length) {  		matchRank = int.MaxValue;  		for (int n = 0; n < name.Length; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	// exact named parameter case see discussion in bug #9114  	if (name.Length - 1 == filterText.Length && name [name.Length - 1] == ':') {  		matchRank = int.MaxValue - 1;  		for (int n = 0; n < name.Length - 1; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	int capitalMatches = 0;  	int nonCapitalMatches = 0;  	int matching = 0;  	int fragments = 0;  	int lastIndex = -1;  	for (int n = 0; n < lane.Length; n++) {  		var ch = filterText [n];  		var i = lane [n];  		bool newFragment = i > lastIndex + 1;  		if (newFragment)  			fragments++;  		lastIndex = i;  		if (ch == name [i]) {  			matching += 1000 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  		}  		else if (newFragment || i == 0) {  			matching += 900 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 1000 - 100 * fragments);  		}  		else {  			var x = 600 / (1 + fragments);  			nonCapitalMatches += x;  		}  	}  	matchRank = capitalMatches + matching - fragments + nonCapitalMatches + filterText.Length - name.Length;  	// devalue named parameters.  	if (name [name.Length - 1] == ':')  		matchRank /= 2;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (lane != null) {  	if (name.Length == filterText.Length) {  		matchRank = int.MaxValue;  		for (int n = 0; n < name.Length; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	// exact named parameter case see discussion in bug #9114  	if (name.Length - 1 == filterText.Length && name [name.Length - 1] == ':') {  		matchRank = int.MaxValue - 1;  		for (int n = 0; n < name.Length - 1; n++) {  			if (filterText [n] != name [n])  				matchRank--;  		}  		return true;  	}  	int capitalMatches = 0;  	int nonCapitalMatches = 0;  	int matching = 0;  	int fragments = 0;  	int lastIndex = -1;  	for (int n = 0; n < lane.Length; n++) {  		var ch = filterText [n];  		var i = lane [n];  		bool newFragment = i > lastIndex + 1;  		if (newFragment)  			fragments++;  		lastIndex = i;  		if (ch == name [i]) {  			matching += 1000 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  		}  		else if (newFragment || i == 0) {  			matching += 900 / (1 + fragments);  			if (char.IsUpper (ch))  				capitalMatches += Math.Max (1' 1000 - 100 * fragments);  		}  		else {  			var x = 600 / (1 + fragments);  			nonCapitalMatches += x;  		}  	}  	matchRank = capitalMatches + matching - fragments + nonCapitalMatches + filterText.Length - name.Length;  	// devalue named parameters.  	if (name [name.Length - 1] == ':')  		matchRank /= 2;  	return true;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: for (int n = 0; n < lane.Length; n++) {  	var ch = filterText [n];  	var i = lane [n];  	bool newFragment = i > lastIndex + 1;  	if (newFragment)  		fragments++;  	lastIndex = i;  	if (ch == name [i]) {  		matching += 1000 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  	}  	else if (newFragment || i == 0) {  		matching += 900 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 1000 - 100 * fragments);  	}  	else {  		var x = 600 / (1 + fragments);  		nonCapitalMatches += x;  	}  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: for (int n = 0; n < lane.Length; n++) {  	var ch = filterText [n];  	var i = lane [n];  	bool newFragment = i > lastIndex + 1;  	if (newFragment)  		fragments++;  	lastIndex = i;  	if (ch == name [i]) {  		matching += 1000 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  	}  	else if (newFragment || i == 0) {  		matching += 900 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 1000 - 100 * fragments);  	}  	else {  		var x = 600 / (1 + fragments);  		nonCapitalMatches += x;  	}  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: for (int n = 0; n < lane.Length; n++) {  	var ch = filterText [n];  	var i = lane [n];  	bool newFragment = i > lastIndex + 1;  	if (newFragment)  		fragments++;  	lastIndex = i;  	if (ch == name [i]) {  		matching += 1000 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  	}  	else if (newFragment || i == 0) {  		matching += 900 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 1000 - 100 * fragments);  	}  	else {  		var x = 600 / (1 + fragments);  		nonCapitalMatches += x;  	}  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: for (int n = 0; n < lane.Length; n++) {  	var ch = filterText [n];  	var i = lane [n];  	bool newFragment = i > lastIndex + 1;  	if (newFragment)  		fragments++;  	lastIndex = i;  	if (ch == name [i]) {  		matching += 1000 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  	}  	else if (newFragment || i == 0) {  		matching += 900 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 1000 - 100 * fragments);  	}  	else {  		var x = 600 / (1 + fragments);  		nonCapitalMatches += x;  	}  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: for (int n = 0; n < lane.Length; n++) {  	var ch = filterText [n];  	var i = lane [n];  	bool newFragment = i > lastIndex + 1;  	if (newFragment)  		fragments++;  	lastIndex = i;  	if (ch == name [i]) {  		matching += 1000 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  	}  	else if (newFragment || i == 0) {  		matching += 900 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 1000 - 100 * fragments);  	}  	else {  		var x = 600 / (1 + fragments);  		nonCapitalMatches += x;  	}  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: for (int n = 0; n < lane.Length; n++) {  	var ch = filterText [n];  	var i = lane [n];  	bool newFragment = i > lastIndex + 1;  	if (newFragment)  		fragments++;  	lastIndex = i;  	if (ch == name [i]) {  		matching += 1000 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  	}  	else if (newFragment || i == 0) {  		matching += 900 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 1000 - 100 * fragments);  	}  	else {  		var x = 600 / (1 + fragments);  		nonCapitalMatches += x;  	}  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: for (int n = 0; n < lane.Length; n++) {  	var ch = filterText [n];  	var i = lane [n];  	bool newFragment = i > lastIndex + 1;  	if (newFragment)  		fragments++;  	lastIndex = i;  	if (ch == name [i]) {  		matching += 1000 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  	}  	else if (newFragment || i == 0) {  		matching += 900 / (1 + fragments);  		if (char.IsUpper (ch))  			capitalMatches += Math.Max (1' 1000 - 100 * fragments);  	}  	else {  		var x = 600 / (1 + fragments);  		nonCapitalMatches += x;  	}  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (ch == name [i]) {  	matching += 1000 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  }  else if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (ch == name [i]) {  	matching += 1000 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  }  else if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (ch == name [i]) {  	matching += 1000 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  }  else if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (ch == name [i]) {  	matching += 1000 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  }  else if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (ch == name [i]) {  	matching += 1000 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  }  else if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (ch == name [i]) {  	matching += 1000 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  }  else if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (ch == name [i]) {  	matching += 1000 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  }  else if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: matching += 1000 / (1 + fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (char.IsUpper (ch))  	capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (char.IsUpper (ch))  	capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: capitalMatches += Math.Max (1' 10000 - 1000 * fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (newFragment || i == 0) {  	matching += 900 / (1 + fragments);  	if (char.IsUpper (ch))  		capitalMatches += Math.Max (1' 1000 - 100 * fragments);  }  else {  	var x = 600 / (1 + fragments);  	nonCapitalMatches += x;  }  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: matching += 900 / (1 + fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (char.IsUpper (ch))  	capitalMatches += Math.Max (1' 1000 - 100 * fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (char.IsUpper (ch))  	capitalMatches += Math.Max (1' 1000 - 100 * fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: capitalMatches += Math.Max (1' 1000 - 100 * fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: capitalMatches += Math.Max (1' 1000 - 100 * fragments);  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: if (name [name.Length - 1] == ':')  	matchRank /= 2;  
Magic Number,MonoDevelop.Core.Text,BacktrackingStringMatcher,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Text\BacktrackingStringMatcher.cs,CalcMatchRank,The following statement contains a magic number: matchRank /= 2;  
Magic Number,MonoDevelop.Core.LogReporting,CrashMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.LogReporting\CrashMonitor.cs,CrashMonitor,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (o =>  {  	// Do a loop rather than calling WaitForExit or hooking into  	// the Exited event as those do not work on MacOS on mono 2.10.3  	var info = System.Diagnostics.Process.GetProcessById (Pid);  	while (!info.HasExited) {  		Thread.Sleep (1000);  		info.Refresh ();  	}  	// If the application has crashed we want to wait a few seconds before  	// raising this event so we allow time for the native crash reporter to  	// write its log files.  	Thread.Sleep (5000);  	OnApplicationExited ();  });  
Magic Number,MonoDevelop.Core.LogReporting,CrashMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.LogReporting\CrashMonitor.cs,CrashMonitor,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (o =>  {  	// Do a loop rather than calling WaitForExit or hooking into  	// the Exited event as those do not work on MacOS on mono 2.10.3  	var info = System.Diagnostics.Process.GetProcessById (Pid);  	while (!info.HasExited) {  		Thread.Sleep (1000);  		info.Refresh ();  	}  	// If the application has crashed we want to wait a few seconds before  	// raising this event so we allow time for the native crash reporter to  	// write its log files.  	Thread.Sleep (5000);  	OnApplicationExited ();  });  
Magic Number,MonoDevelop.Core.LogReporting,CrashMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.LogReporting\CrashMonitor.cs,CrashMonitor,The following statement contains a magic number: while (!info.HasExited) {  	Thread.Sleep (1000);  	info.Refresh ();  }  
Magic Number,MonoDevelop.Core.LogReporting,CrashMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.LogReporting\CrashMonitor.cs,CrashMonitor,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,MonoDevelop.Core.LogReporting,CrashMonitor,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.LogReporting\CrashMonitor.cs,CrashMonitor,The following statement contains a magic number: Thread.Sleep (5000);  
Missing Default,MonoDevelop.Core,StringParserService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\StringParserService.cs,Replace,The following switch statement is missing a default case: switch (tname.ToUpper ()) {  case "ENV":  	foreach (DictionaryEntry variable in Environment.GetEnvironmentVariables ()) {  		if (variable.Key.ToString ().ToUpper () == tformat.ToUpper ())  			return variable.Value.ToString ();  	}  	break;  case "PROPERTY":  	return PropertyService.Get<string> (tformat);  }  
Missing Default,MonoDevelop.Core,Properties,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Properties.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) {  case PropertyNode:  	string key = reader.GetAttribute (KeyAttribute);  	if (!reader.IsEmptyElement) {  		result.Set (key' new LazyXmlDeserializer (reader.ReadInnerXml ()));  	}  	else {  		result.Set (key' reader.GetAttribute (ValueAttribute));  	}  	return true;  }  
Missing Default,MonoDevelop.Core,Properties,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\Properties.cs,Load,The following switch statement is missing a default case: switch (reader.LocalName) {  case PropertiesRootNode:  	if (reader.GetAttribute (PropertiesVersionAttribute) == PropertiesVersion)  		return Read (reader);  	break;  }  
Missing Default,MonoDevelop.Core,XmlReadHelper,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core\XmlReadHelper.cs,ReadList,The following switch statement is missing a default case: switch (reader.NodeType) {  case XmlNodeType.EndElement:  	if (endNodes.Contains (reader.LocalName))  		return;  	IXmlLineInfo xmlInfo = (IXmlLineInfo)reader;  	LoggingService.LogWarning ("Encountered end node '{0}' when expecting one of '{1}'. Location ln:{2} col: {3}. Stack Trace:{4}"' reader.LocalName' ConcatString (endNodes)' xmlInfo.LineNumber' xmlInfo.LinePosition' new System.Diagnostics.StackTrace ());  	break;  case XmlNodeType.Element:  	if (!didReadStartNode && endNodes.Contains (reader.LocalName)) {  		didReadStartNode = true;  		break;  	}  	bool validNode = callback (data);  	if (!validNode)  		LoggingService.LogWarning ("Unknown node: " + reader.LocalName);  	break;  }  
Missing Default,MonoDevelop.Core.Logging,ConsoleCrayon,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\ConsoleCrayon.cs,DetectXtermColors,The following switch statement is missing a default case: switch (Environment.GetEnvironmentVariable ("TERM")) {  case "xterm":  case "linux":  	if (Environment.GetEnvironmentVariable ("COLORTERM") != null) {  		_xterm_colors = true;  	}  	break;  case "xterm-color":  	_xterm_colors = true;  	break;  }  
Missing Default,MonoDevelop.Core.Logging,InstrumentationLogger,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Logging\InstrumentationLogger.cs,Log,The following switch statement is missing a default case: switch (level) {  case LogLevel.Error:  	Counters.LogErrors.Inc (message);  	break;  case LogLevel.Debug:  	Counters.LogDebug.Inc (message);  	break;  case LogLevel.Fatal:  	Counters.LogFatalErrors.Inc (message);  	break;  case LogLevel.Warn:  	Counters.LogWarnings.Inc (message);  	break;  case LogLevel.Info:  	Counters.LogMessages.Inc (message);  	break;  }  
Missing Default,MonoDevelop.Projects,SolutionEntityItemTagProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionEntityItem.cs,GetTagValue,The following switch statement is missing a default case: switch (tag) {  case "ITEMFILE":  case "PROJECTFILE":  case "PROJECTFILENAME":  	return item.FileName;  }  
Missing Default,MonoDevelop.Projects,ProjectTagProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProjectConfiguration.cs,GetTagValue,The following switch statement is missing a default case: switch (tag) {  case "TARGETPATH":  case "TARGETFILE":  	return conf.CompiledOutputName;  case "TARGETNAME":  	return conf.CompiledOutputName.FileName;  case "TARGETDIR":  	return conf.CompiledOutputName.ParentDirectory;  case "TARGETEXT":  	return conf.CompiledOutputName.Extension;  case "PROJECTCONFIG":  	return conf.Name + "." + conf.Platform;  case "PROJECTCONFIGNAME":  	return conf.Name;  case "PROJECTCONFIGPLAT":  	return conf.Platform;  }  
Missing Default,MonoDevelop.Projects,WorkspaceItemTagProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\WorkspaceItem.cs,GetTagValue,The following switch statement is missing a default case: switch (tag) {  case "WORKSPACENAME":  	return item.Name;  case "WORKSPACEFILE":  	return item.FileName;  case "WORKSPACEDIR":  	return item.BaseDirectory;  }  
Missing Default,MonoDevelop.Projects,SolutionTagProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\Solution.cs,GetTagValue,The following switch statement is missing a default case: switch (tag) {  case "SOLUTIONNAME":  	return sol.Name;  case "COMBINEFILENAME":  case "SOLUTIONFILE":  	return sol.FileName;  case "SOLUTIONDIR":  	return sol.BaseDirectory;  }  
Missing Default,MonoDevelop.Projects,SolutionItemTagProvider,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\SolutionItem.cs,GetTagValue,The following switch statement is missing a default case: switch (tag) {  case "ITEMNAME":  case "PROJECTNAME":  	return item.Name;  case "AUTHORCOPYRIGHT":  	AuthorInformation authorInfo = item.AuthorInformation ?? AuthorInformation.Default;  	return authorInfo.Copyright;  case "AUTHORCOMPANY":  	authorInfo = item.AuthorInformation ?? AuthorInformation.Default;  	return authorInfo.Company;  case "AUTHORTRADEMARK":  	authorInfo = item.AuthorInformation ?? AuthorInformation.Default;  	return authorInfo.Trademark;  case "AUTHOREMAIL":  	authorInfo = item.AuthorInformation ?? AuthorInformation.Default;  	return authorInfo.Email;  case "AUTHORNAME":  	authorInfo = item.AuthorInformation ?? AuthorInformation.Default;  	return authorInfo.Name;  case "ITEMDIR":  case "PROJECTDIR":  	return item.BaseDirectory;  }  
Missing Default,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,CheckNeedsBuild,The following switch statement is missing a default case: switch (pref.ReferenceType) {  case ReferenceType.Assembly:  	foreach (var file in GetAssemblyRefsRec (pref.Reference' new HashSet<string> ())) {  		try {  			if (File.GetLastWriteTime (file) > mtime)  				return true;  		}  		catch (IOException) {  			// Ignore.  		}  	}  	break;  case ReferenceType.Package:  	if (pref.Package == null) {  		break;  	}  	foreach (var assembly in pref.Package.Assemblies) {  		try {  			if (File.GetLastWriteTime (assembly.Location) > mtime)  				return true;  		}  		catch (IOException) {  			// Ignore.  		}  	}  	break;  }  
Missing Default,MonoDevelop.Projects,DotNetProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetProject.cs,GetDefaultNamespace,The following switch statement is missing a default case: switch (pol.DirectoryNamespaceAssociation) {  case DirectoryNamespaceAssociation.PrefixedFlat:  	root = defaultNmspc;  	goto case DirectoryNamespaceAssociation.Flat;  case DirectoryNamespaceAssociation.Flat:  	//use the last component only  	dirNamespc = SanitisePotentialNamespace (Path.GetFileName (relativeDirname));  	break;  case DirectoryNamespaceAssociation.PrefixedHierarchical:  	root = defaultNmspc;  	goto case DirectoryNamespaceAssociation.Hierarchical;  case DirectoryNamespaceAssociation.Hierarchical:  	dirNamespc = SanitisePotentialNamespace (GetHierarchicalNamespace (relativeDirname));  	break;  }  
Missing Default,MonoDevelop.Projects,DotNetAssemblyProject,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\DotNetAssemblyProject.cs,GetDefaultTargetFrameworkForFormat,The following switch statement is missing a default case: switch (format.Id) {  case "MSBuild05":  	return TargetFrameworkMoniker.NET_2_0;  case "MSBuild08":  	return TargetFrameworkMoniker.NET_2_0;  case "MSBuild10":  case "MSBuild12":  	return TargetFrameworkMoniker.NET_4_0;  }  
Missing Default,MonoDevelop.Projects,LanguageBindingService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects\LanguageBindingService.cs,LanguageBindingService,The following switch statement is missing a default case: switch (args.Change) {  case ExtensionChange.Add:  	languageBindingCodons.Add (languageBindingCodon);  	IDotNetLanguageBinding dotNetBinding = languageBindingCodon as IDotNetLanguageBinding;  	if (dotNetBinding != null) {  		object par = dotNetBinding.CreateCompilationParameters (null);  		if (par != null)  			Services.ProjectService.DataContext.IncludeType (par.GetType ());  		par = dotNetBinding.CreateProjectParameters (null);  		if (par != null)  			Services.ProjectService.DataContext.IncludeType (par.GetType ());  	}  	break;  case ExtensionChange.Remove:  	languageBindingCodons.Remove (languageBindingCodon);  	break;  }  
Missing Default,MonoDevelop.Core.Assemblies,TargetFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFramework.cs,GetToolsVersion,The following switch statement is missing a default case: switch (id.Version) {  case "4.0":  	return TargetFrameworkToolsVersion.V4_0;  case "3.5":  	return TargetFrameworkToolsVersion.V3_5;  case "3.0":  case "2.0":  	return TargetFrameworkToolsVersion.V2_0;  case "1.1":  	return TargetFrameworkToolsVersion.V1_1;  }  
Missing Default,MonoDevelop.Core.Assemblies,TargetFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\TargetFramework.cs,GetToolsVersion,The following switch statement is missing a default case: switch (clrVersion) {  case MonoDevelop.Core.ClrVersion.Net_1_1:  	return TargetFrameworkToolsVersion.V1_1;  case MonoDevelop.Core.ClrVersion.Net_2_0:  	return TargetFrameworkToolsVersion.V2_0;  case MonoDevelop.Core.ClrVersion.Net_4_0:  	return TargetFrameworkToolsVersion.V4_0;  }  
Missing Default,MonoDevelop.Core.Assemblies,MonoFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoFrameworkBackend.cs,GetOldMcsName,The following switch statement is missing a default case: switch (fx.Identifier) {  case TargetFrameworkMoniker.ID_NET_FRAMEWORK:  	{  		switch (fx.Version) {  		case "1.1":  			return "mcs";  		case "2.0":  		case "3.0":  		case "3.5":  			return "gmcs";  		case "4.0":  			return "dmcs";  		}  	}  	break;  case TargetFrameworkMoniker.ID_MONODROID:  case TargetFrameworkMoniker.ID_MONOTOUCH:  case TargetFrameworkMoniker.ID_SILVERLIGHT:  	return "smcs";  }  
Missing Default,MonoDevelop.Core.Assemblies,MonoFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MonoFrameworkBackend.cs,GetOldMcsName,The following switch statement is missing a default case: switch (fx.Version) {  case "1.1":  	return "mcs";  case "2.0":  case "3.0":  case "3.5":  	return "gmcs";  case "4.0":  	return "dmcs";  }  
Missing Default,MonoDevelop.Core.Assemblies,MsNetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetFrameworkBackend.cs,GetFrameworkFolders,The following switch statement is missing a default case: switch (framework.Id.Version) {  case "1.1":  case "2.0":  	yield return targetRuntime.RootDirectory.Combine (GetClrVersion (framework.ClrVersion));  	break;  case "4.0":  case "4.5":  	var fx40dir = targetRuntime.RootDirectory.Combine (GetClrVersion (framework.ClrVersion));  	yield return fx40dir;  	yield return fx40dir.Combine ("WPF");  	break;  case "3.0":  case "3.5":  	RegistryKey fxFolderKey = Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\.NETFramework\AssemblyFolders\v" + framework.Id.Version' false);  	if (fxFolderKey != null) {  		string folder = fxFolderKey.GetValue ("All Assemblies In") as string;  		fxFolderKey.Close ();  		yield return folder;  	}  	break;  }  
Missing Default,MonoDevelop.Core.Assemblies,MsNetFrameworkBackend,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\MsNetFrameworkBackend.cs,GetClrVersion,The following switch statement is missing a default case: switch (v) {  case ClrVersion.Net_1_1:  	return "v1.1.4322";  case ClrVersion.Net_2_0:  	return "v2.0.50727";  case ClrVersion.Net_4_5:  // The 4_5 binaries have the same version as the NET_4_0 binaries  case ClrVersion.Net_4_0:  	return "v4.0.30319";  }  
Missing Default,MonoDevelop.Core.Assemblies,SupportedFramework,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\SupportedFramework.cs,Load,The following switch statement is missing a default case: switch (reader.Name) {  case "MaximumVersion":  	fx.MaximumVersion = ParseVersion (reader.Value' NoMaximumVersion);  	break;  case "MinimumVersion":  	fx.MinimumVersion = ParseVersion (reader.Value' NoMinumumVersion);  	break;  case "Profile":  	fx.Profile = reader.Value;  	break;  case "Identifier":  	fx.Identifier = reader.Value;  	break;  case "MinimumVersionDisplayName":  	fx.MinimumVersionDisplayName = reader.Value;  	break;  case "DisplayName":  	fx.DisplayName = reader.Value;  	break;  case "MonoSpecificVersion":  	fx.MonoSpecificVersion = reader.Value;  	break;  case "MonoSpecificVersionDisplayName":  	fx.MonoSpecificVersionDisplayName = reader.Value;  	break;  }  
Missing Default,Mono.PkgConfig,PcFile,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Assemblies\PcFileCache.cs,Load,The following switch statement is missing a default case: switch (var) {  case "Name":  	Name = value;  	break;  case "Description":  	Description = value;  	break;  case "Version":  	Version = value;  	break;  case "Libs":  	Libs = value;  	break;  case "Requires":  	Requires = value;  	break;  }  
Missing Default,Mono.Options,OptionSet,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\Mono.Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
Missing Default,MonoDevelop.Projects.Extensions,SolutionItemHandler,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Extensions\SolutionItemHandler.cs,RunTarget,The following switch statement is missing a default case: switch (target) {  case "Build":  	return OnBuild (monitor' configuration);  case "Clean":  	return OnClean (monitor' configuration);  }  
Missing Default,MonoDevelop.Projects.Formats.MSBuild,MSBuildFileFormat,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Formats.MSBuild\MSBuildFileFormat.cs,GetFormatForToolsVersion,The following switch statement is missing a default case: switch (toolsVersion) {  case "2.0":  	return new MSBuildFileFormatVS05 ();  case "3.5":  	return new MSBuildFileFormatVS08 ();  // since both VS2010 and 2012 support ToolVersion 4.0' just use the newer format  case "4.0":  case "12.0":  	return new MSBuildFileFormatVS12 ();  }  
Missing Default,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,HandlePolicySetUpdated,The following switch statement is missing a default case: switch (args.Change) {  case ExtensionChange.Add:  	PolicySet set = ((PolicySetNode)args.ExtensionNode).Set;  	set.ReadOnly = true;  	sets.Add (set);  	break;  case ExtensionChange.Remove:  	sets.Remove (((PolicySetNode)args.ExtensionNode).Set);  	break;  }  
Missing Default,MonoDevelop.Projects.Policies,PolicyService,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Policies\PolicyService.cs,HandlePolicyTypeUpdated,The following switch statement is missing a default case: switch (args.Change) {  case ExtensionChange.Add:  	if (policyTypes.ContainsKey (t))  		throw new UserException ("The Policy type '" + t.FullName + "' may only be registered once.");  	if (policyNames.ContainsKey (name))  		throw new UserException ("Only one Policy type may have the ID '" + name + "'");  	policyTypes.Add (t' name);  	policyNames.Add (name' t);  	if (invariantPolicies.Get (t) == null)  		invariantPolicies.InternalSet (t' null' Activator.CreateInstance (t));  	break;  case ExtensionChange.Remove:  	foreach (var s in sets)  		s.RemoveAll (t);  	policyTypes.Remove (t);  	policyNames.Remove (name);  	invariantPolicies.InternalRemove (t' null);  	break;  }  
Missing Default,MonoDevelop.Projects.Text,DocGenerator,C:\repos\joncloud_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Projects.Text\DocGenerator.cs,DocGenerator,The following switch statement is missing a default case: switch (args.Change) {  case ExtensionChange.Add:  	if (Instance != null)  		LoggingService.LogWarning ("Duplicate doc generator defined.");  	Instance = (DocGenerator)args.ExtensionObject;  	break;  }  
