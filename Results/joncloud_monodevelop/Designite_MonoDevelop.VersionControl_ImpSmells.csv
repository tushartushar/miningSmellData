Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The method has 185 lines of code.
Long Method,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The method has 121 lines of code.
Long Method,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The method has 108 lines of code.
Complex Method,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,Cyclomatic complexity of the method is 48
Complex Method,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,CompareNodes,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnFileStatusChanged,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.VersionControl.Views,FileTreeView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnButtonPressEvent,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,CompareNodes,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnDestroyed,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,TreeSelectionChanged,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,CommitDialog,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,OnButtonCommitClicked,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.VersionControl,PublishCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\PublishCommand.cs,Publish,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GetSupportedOperations,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,BuildNode,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.VersionControl,AddinCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,RunCommand,Cyclomatic complexity of the method is 51
Complex Method,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetCommitComments,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,SolutionItemAddFiles,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetProgressMonitor,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.VersionControl,ChangeLogWriter,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\ChangeLogWriter.cs,ToString,Cyclomatic complexity of the method is 13
Long Parameter List,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The method has 9 parameters.
Long Parameter List,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The method has 7 parameters.
Long Parameter List,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,GetSize,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl.Views,ComparisonWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ComparisonWidget.cs,SetRevision,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The method has 11 parameters.
Long Parameter List,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,GetDiffPaths,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,AdjustmentChanged,The method has 8 parameters.
Long Parameter List,MonoDevelop.VersionControl.Views,DiffWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffWidget.cs,DiffWidget,The method has 6 parameters.
Long Parameter List,MonoDevelop.VersionControl,PublishWorker,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\PublishCommand.cs,PublishWorker,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,Publish,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,OnPublish,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl,UnknownRepository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\UnknownRepository.cs,OnPublish,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,BuildNode,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,AddFolderOverlay,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,OnFileAdded,The method has 7 parameters.
Long Parameter List,MonoDevelop.VersionControl,VersionInfo,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionInfo.cs,VersionInfo,The method has 7 parameters.
Long Parameter List,MonoDevelop.VersionControl,RevertRevisionsCommands,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\RevertRevisionsCommands.cs,RevertRevisions,The method has 5 parameters.
Long Parameter List,MonoDevelop.VersionControl,VersionControlItem,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlItem.cs,VersionControlItem,The method has 5 parameters.
Long Statement,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The length of the statement  "		window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height); " is 137.
Long Statement,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The length of the statement  "					DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window); " is 131.
Long Statement,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The length of the statement  "			if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) { " is 165.
Long Statement,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The length of the statement  "			DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window); " is 131.
Long Statement,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The length of the statement  "			DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window); " is 124.
Long Statement,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The length of the statement  "	ctx.Rectangle (x + shadowSize + 0.5' firstBlock.YStart + bottomSpacing + spacing - shadowSize + 0.5' width - shadowSize * 2' shadowSize); " is 137.
Long Statement,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The length of the statement  "	ctx.Rectangle (x + 0.5' firstBlock.YStart + bottomSpacing + spacing + 0.5' width' lastBlock.YEnd - firstBlock.YStart - spacing); " is 128.
Long Statement,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The length of the statement  "	text = "<span size='x-small'>" + text.Replace ("+"' "</span><span size='small'>➜</span><span size='x-small'> ") + "</span>"; " is 124.
Long Statement,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The length of the statement  "	filestore = new TreeStore (typeof(Gdk.Pixbuf)' typeof(string)' typeof(string[])' typeof(string)' typeof(bool)' typeof(bool)' typeof(string)' typeof(bool)' typeof(bool)' typeof(Gdk.Pixbuf)' typeof(bool)' typeof(Gdk.Pixbuf)' typeof(string)' typeof(bool)' typeof(bool)); " is 267.
Long Statement,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,AppendFileInfo,The length of the statement  "	TreeIter it = filestore.AppendValues (statusicon' lstatus' GLib.Markup.EscapeText (localpath).Split ('\n')' rstatus' commit' false' n.LocalPath.ToString ()' true' hasComment' fileIcon' n.HasLocalChanges' rstatusicon' scolor' n.HasRemoteChange (VersionStatus.Modified)); " is 269.
Long Statement,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,AppendFileInfo,The length of the statement  "		filestore.AppendValues (it' statusicon' ""' new string[0]' ""' false' true' n.LocalPath.ToString ()' false' false' fileIcon' false' null' null' false); " is 151.
Long Statement,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnCommitClicked,The length of the statement  "		if (MessageService.AskQuestion (GettextCatalog.GetString ("Some of the files in this commit do not have ChangeLog messages.")' GettextCatalog.GetString ("You may have forgotten to unselect items.")' AlertButton.Cancel' AlertButton.Proceed) != AlertButton.Proceed) " is 263.
Long Statement,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,DoPopupMenu,The length of the statement  "				LoggingService.LogError ("Invalid type specified in extension point 'MonoDevelop/VersionControl/StatusViewCommands'. Subclass of 'VersionControlCommandHandler' expected."); " is 172.
Long Statement,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnOpen,The length of the statement  "		if (MessageService.AskQuestion (GettextCatalog.GetString ("Do you want to open all {0} files?"' files.Length)' AlertButton.Cancel' openAll) == openAll) { " is 153.
Long Statement,MonoDevelop.VersionControl.Views,FileTreeView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnButtonPressEvent,The length of the statement  "	handled = handled || (IsClickedNodeSelected ((int)evnt.X' (int)evnt.Y) && this.Selection.GetSelectedRows ().Length > 1 && (evnt.State & selectionModifiers) == 0); " is 162.
Long Statement,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The length of the statement  "				currentFile.BodyRegion = new DomRegion (currentFile.BodyRegion.BeginLine' currentFile.BodyRegion.BeginColumn' linenum - 1' int.MaxValue); " is 137.
Long Statement,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The length of the statement  "				currentRegion.BodyRegion = new DomRegion (currentRegion.BodyRegion.BeginLine' currentRegion.BodyRegion.BeginColumn' linenum - 1' int.MaxValue); " is 143.
Long Statement,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The length of the statement  "			currentFile.Region = currentFile.BodyRegion = new DomRegion (lastToken (lineMatch.Groups ["filepath"].Value)' linenum' line.Length + 1' linenum' int.MaxValue); " is 159.
Long Statement,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The length of the statement  "					currentRegion.BodyRegion = new DomRegion (currentRegion.BodyRegion.BeginLine' currentRegion.BodyRegion.BeginColumn' linenum - 1' int.MaxValue); " is 143.
Long Statement,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The length of the statement  "				currentRegion.Region = currentRegion.BodyRegion = new DomRegion (currentFile.Region.FileName' linenum' line.Length + 1' linenum' int.MaxValue); " is 143.
Long Statement,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The length of the statement  "		currentFile.BodyRegion = new DomRegion (currentFile.BodyRegion.BeginLine' currentFile.BodyRegion.BeginColumn' Math.Max (1' linenum - 2)' int.MaxValue); " is 151.
Long Statement,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The length of the statement  "		currentRegion.BodyRegion = new DomRegion (currentRegion.BodyRegion.BeginLine' currentRegion.BodyRegion.BeginColumn' Math.Max (1' linenum - 2)' int.MaxValue); " is 157.
Long Statement,MonoDevelop.VersionControl.Views,ComparisonWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ComparisonWidget.cs,SetRevision,The length of the statement  "			text = string.Format (GettextCatalog.GetString ("Error while getting the text of revision {0}:\n{1}")' workingRevision' ex.ToString ()); " is 136.
Long Statement,MonoDevelop.VersionControl.Views,ComparisonWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ComparisonWidget.cs,SetRevision,The length of the statement  "			box.SetItem (string.Format (GettextCatalog.GetString ("Revision {0}\t{1}\t{2}")' result.Key' result.Key.Time' result.Key.Author)' null' result.Key); " is 148.
Long Statement,MonoDevelop.VersionControl.Views,ComparisonWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ComparisonWidget.cs,SetRevision,The length of the statement  "	IdeApp.Workbench.StatusBar.BeginProgress (string.Format (GettextCatalog.GetString ("Retrieving revision {0}...")' rev.ToString ())); " is 132.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,ShowPopup,The length of the statement  "	CommandEntrySet cset = IdeApp.CommandService.CreateCommandEntrySet ("/MonoDevelop/VersionControl/BlameView/ContextMenu"); " is 121.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,OnSizeAllocated,The length of the statement  "	Rectangle childRectangle = new Rectangle (allocation.X + 1' allocation.Y + 1' allocation.Width - vwidth - 1' allocation.Height - hheight - 1); " is 142.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,OnSizeAllocated,The length of the statement  "		vScrollBar.SizeAllocate (new Rectangle (right' childRectangle.Y + vChildTopHeight' vwidth' Allocation.Height - v - vChildTopHeight - 1)); " is 137.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,OnSizeAllocated,The length of the statement  "		vScrollBar.Value = System.Math.Max (System.Math.Min (vAdjustment.Upper - vAdjustment.PageSize' vScrollBar.Value)' vAdjustment.Lower); " is 133.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,OnSizeAllocated,The length of the statement  "	overview.SizeAllocate (new Rectangle (childRectangle.Right - overviewWidth' childRectangle.Top' overviewWidth' childRectangle.Height)); " is 135.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,OnSizeAllocated,The length of the statement  "	editor.SizeAllocate (new Rectangle (childRectangle.X' childRectangle.Top' childRectangle.Width - overviewWidth' childRectangle.Height)); " is 136.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,OnSizeAllocated,The length of the statement  "		hScrollBar.SizeAllocate (new Rectangle (childRectangle.X' childRectangle.Y + childRectangle.Height' childRectangle.Width' hheight)); " is 132.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,OnSizeAllocated,The length of the statement  "		hScrollBar.Value = System.Math.Max (System.Math.Min (hAdjustment.Upper - hAdjustment.PageSize' hScrollBar.Value)' hAdjustment.Lower); " is 133.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The length of the statement  "		while (curY < editor.Allocation.Bottom && line <= overview.annotations.Count && ann != null && overview.annotations [line - 1] != null && overview.annotations [line - 1].Revision == ann.Revision); " is 196.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The length of the statement  "			if (ann != null && overview.highlightAnnotation.Revision == ann.Revision && curStart <= overview.highlightPositon && overview.highlightPositon < curY) { " is 152.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The length of the statement  "				cr.Rectangle (Editor.TextViewMargin.XOffset' curStart + cr.LineWidth' Editor.Allocation.Width - Editor.TextViewMargin.XOffset' curY - curStart - cr.LineWidth); " is 159.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The length of the statement  "				cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.1); " is 137.
Long Statement,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The length of the statement  "			cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2); " is 137.
Long Statement,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The length of the statement  "	// (default-border' inner-border' default-outside-border' etc - see http://git.gnome.org/browse/gtk+/tree/gtk/gtkbutton.c) " is 122.
Long Statement,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The length of the statement  "	Style.PaintBox (Style' args.Window' state' ShadowType.None' args.Area' this' "button"' Allocation.X - padding' Allocation.Y - padding' Allocation.Width + padding * 2' Allocation.Height + padding * 2); " is 200.
Long Statement,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The length of the statement  "		win.DrawPixbuf (this.Style.BaseGC (StateType.Normal)' Pixbuf' 0' 0' xPos + pixbufSpacing' Allocation.Y + (Allocation.Height - Pixbuf.Height) / 2' Pixbuf.Width' Pixbuf.Height' Gdk.RgbDither.None' 0' 0); " is 201.
Long Statement,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The length of the statement  "	Gtk.Style.PaintVline (this.Style' win' state' args.Area' this' ""' Allocation.Y + 3' Allocation.Bottom - 4' arrowXPos - 4); " is 123.
Long Statement,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The length of the statement  "	Gtk.Style.PaintArrow (this.Style' win' state' ShadowType.None' args.Area' this' ""' ArrowType.Down' true' arrowXPos' Allocation.Y' Allocation.Height / 2' Allocation.Height); " is 173.
Long Statement,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The length of the statement  "	//				win.DrawLine (this.Style.DarkGC (StateType.Normal)' Allocation.X + Allocation.Width - 1' Allocation.Y' Allocation.X + Allocation.Width - 1' Allocation.Y + Allocation.Height);			 " is 180.
Long Statement,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,AppendFileInfo,The length of the statement  "	TreeIter it = filestore.AppendValues (statusicon' lstatus' GLib.Markup.EscapeText (localpath).Split ('\n')' commit' false' n.LocalPath.ToString ()' true' hasComment' fileIcon' n.HasLocalChanges' scolor); " is 203.
Long Statement,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,AppendFileInfo,The length of the statement  "		filestore.AppendValues (it' statusicon' ""' new string[0]' false' true' n.LocalPath.ToString ()' false' false' fileIcon' false' null); " is 134.
Long Statement,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,OnOpen,The length of the statement  "		if (MessageService.AskQuestion (GettextCatalog.GetString ("Do you want to open all {0} files?"' files.Length)' AlertButton.Cancel' openAll) == openAll) { " is 153.
Long Statement,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,FillDifs,The length of the statement  "		MessageService.ShowException (ddata.diffException' GettextCatalog.GetString ("Could not get diff information. ") + ddata.diffException.Message); " is 144.
Long Statement,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,Conflicts,The length of the statement  "	while ((mergeStart = doc.IndexOf ("<<<<<<<"' mergeStart' doc.TextLength - mergeStart' StringComparison.Ordinal)) >= 0) { " is 120.
Long Statement,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,Conflicts,The length of the statement  "		yield return new Conflict (new TextSegment (start.EndOffsetIncludingDelimiter' divider.Offset - start.EndOffsetIncludingDelimiter)' new TextSegment (divider.EndOffsetIncludingDelimiter' end.Offset - divider.EndOffsetIncludingDelimiter)' start' divider' end); " is 258.
Long Statement,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,UpdateDiff,The length of the statement  "	LeftDiff.RemoveAll (item => null != (line = MainEditor.Document.GetLine (item.InsertStart)) && currentConflicts.Any (c => c.StartSegment.Offset <= line.Offset && line.Offset < c.EndSegment.EndOffset)); " is 201.
Long Statement,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,UpdateDiff,The length of the statement  "	RightDiff.RemoveAll (item => null != (line = MainEditor.Document.GetLine (item.InsertStart)) && currentConflicts.Any (c => c.StartSegment.Offset <= line.Offset && line.Offset < c.EndSegment.EndOffset)); " is 202.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,ShowPopup,The length of the statement  "	CommandEntrySet cset = IdeApp.CommandService.CreateCommandEntrySet ("/MonoDevelop/VersionControl/DiffView/ContextMenu"); " is 120.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,GetDiffRectangles,The length of the statement  "		Cairo.Point point = editor.LocationToPoint (editor.Document.OffsetToLocation (Math.Max (startOffset' line.Offset))' true); " is 122.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,GetDiffRectangles,The length of the statement  "		Cairo.Point point2 = editor.LocationToPoint (editor.Document.OffsetToLocation (Math.Min (line.EndOffset' endOffset))' true); " is 124.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,GetDiffRectangles,The length of the statement  "		rectangles.Add (new Cairo.Rectangle (point.X - editor.TextViewMargin.XOffset' point.Y' point2.X - point.X' editor.LineHeight)); " is 127.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,GetDiffPaths,The length of the statement  "	var wordDiff = new List<Hunk> (Diff.GetDiff (words.Select (w => editor.GetTextAt (w)).ToArray ()' cmpWords.Select (w => MainEditor.GetTextAt (w)).ToArray ())); " is 159.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,GetDiffPaths,The length of the statement  "	result = Tuple.Create (CalculateChunkPath (editor' wordDiff' words' true)' CalculateChunkPath (MainEditor' wordDiff' cmpWords' false)); " is 135.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,AdjustmentChanged,The length of the statement  "	vAdjustment.SetBounds (0' 1.0' attachedVAdjustments.Select (adj => adj.StepIncrement / (adj.Upper - adj.Lower)).Min ()' attachedVAdjustments.Select (adj => adj.PageIncrement / (adj.Upper - adj.Lower)).Min ()' attachedVAdjustments.Select (adj => adj.PageSize / (adj.Upper - adj.Lower)).Min ()); " is 293.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,AdjustmentChanged,The length of the statement  "	hAdjustment.SetBounds (0' 1.0' attachedHAdjustments.Select (adj => adj.StepIncrement / (adj.Upper - adj.Lower)).Min ()' attachedHAdjustments.Select (adj => adj.PageIncrement / (adj.Upper - adj.Lower)).Min ()' attachedHAdjustments.Select (adj => adj.PageSize / (adj.Upper - adj.Lower)).Min ()); " is 293.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,UpdateCaretPosition,The length of the statement  "	//			                                           caret.TextEditorData.IsSomethingSelected ? caret.TextEditorData.SelectionRange.Length : 0' " is 138.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The length of the statement  "	Rectangle childRectangle = new Rectangle (allocation.X + overviewWidth + 1' allocation.Y + headerSize + 1' allocation.Width - vwidth - overviewWidth * 2' allocation.Height - hheight - headerSize - 1); " is 200.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The length of the statement  "	leftDiffScrollBar.SizeAllocate (new Rectangle (allocation.Left' childRectangle.Y' overviewWidth - 1' childRectangle.Height)); " is 125.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The length of the statement  "	rightDiffScrollBar.SizeAllocate (new Rectangle (allocation.Right - overviewWidth + 1' childRectangle.Y' overviewWidth - 1' childRectangle.Height)); " is 147.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The length of the statement  "		Rectangle editorRectangle = new Rectangle (childRectangle.X + (editorWidth + middleAreaWidth) * i' childRectangle.Top' editorWidth' childRectangle.Height); " is 155.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The length of the statement  "			hScrollBars [i].SizeAllocate (new Rectangle (editorRectangle.X' editorRectangle.Y + editorRectangle.Height' editorRectangle.Width' hheight)); " is 141.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The length of the statement  "			headerWidgets [i].SizeAllocate (new Rectangle (editorRectangle.X' allocation.Y + 1' editorRectangle.Width' headerSize)); " is 120.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The length of the statement  "		middleAreas [i].SizeAllocate (new Rectangle (childRectangle.X + editorWidth * (i + 1) + middleAreaWidth * i' childRectangle.Top' middleAreaWidth + 1' childRectangle.Height)); " is 174.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,PaintEditorOverlay,The length of the statement  "		double y2 = editor.LineToY (paintRemoveSide ? hunk.RemoveStart + hunk.Removed : hunk.InsertStart + hunk.Inserted) - editor.VAdjustment.Value; " is 141.
Long Statement,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,UndoChange,The length of the statement  "			toEditor.Replace (toOffset' replaceLength' fromEditor.Document.GetTextBetween (start.Offset' end.EndOffsetIncludingDelimiter)); " is 127.
Long Statement,MonoDevelop.VersionControl.Views,DiffWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffWidget.cs,SetButtonSensitivity,The length of the statement  "	this.buttonNext.Sensitive = this.buttonPrev.Sensitive = notebook1.Page == 0 && comparisonWidget.Diff != null && comparisonWidget.Diff.Count > 0; " is 144.
Long Statement,MonoDevelop.VersionControl.Views,DiffWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffWidget.cs,UpdatePatchView,The length of the statement  "		diffTextEditor.Document.Text = Mono.TextEditor.Utils.Diff.GetDiffString (comparisonWidget.Diff' comparisonWidget.DiffEditor.Document' comparisonWidget.OriginalEditor.Document' (info.Item.Path) + "\t\t" + GetRevisionText (comparisonWidget.DiffEditor' comparisonWidget.diffRevision)' (info.Item.Path) + "\t\t" + GetRevisionText (comparisonWidget.OriginalEditor' comparisonWidget.originalRevision)); " is 396.
Long Statement,MonoDevelop.VersionControl.Views,SubviewAttachmentHandler,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\SubviewAttachmentHandler.cs,TryAttachView,The length of the statement  "	var handler = AddinManager.GetExtensionObjects<IVersionControlViewHandler<T>> (type).FirstOrDefault (h => h.CanHandle (info.Item' info.Document)); " is 146.
Long Statement,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,RevertToRevisionClicked,The length of the statement  "		VersionControlService.SetCommitComment (info.Item.Path' string.Format ("(Revert to revision {0})"' d.ToString ())' true); " is 121.
Long Statement,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,HandleTreeviewFilesDiffLineActivated,The length of the statement  "	var doc = IdeApp.Workbench.OpenDocument (fileName' line' 0' OpenDocumentOptions.Default | OpenDocumentOptions.OnlyInternalViewer); " is 130.
Long Statement,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,TreeSelectionChanged,The length of the statement  "		var iter = changedpathstore.AppendValues (actionIcon' action' fileIcon' System.IO.Path.GetFileName (rp.Path)' System.IO.Path.GetDirectoryName (rp.Path)' rp.Path' null); " is 168.
Long Statement,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,OnButtonCommitClicked,The length of the statement  "		AlertButton response = MessageService.GenericAlert (MonoDevelop.Ide.Gui.Stock.Question' GettextCatalog.GetString ("You are trying to commit files which have unsaved changes.")' GettextCatalog.GetString ("Do you want to save the changes before committing?")' new AlertButton[] { " is 277.
Long Statement,MonoDevelop.VersionControl,RemoveCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\AddRemoveMoveCommand.cs,Remove,The length of the statement  "	string msg = GettextCatalog.GetString ("Are you sure you want to remove the selected items from the version control system?"); " is 126.
Long Statement,MonoDevelop.VersionControl,CheckoutWorker,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\CheckoutCommand.cs,CreateProgressMonitor,The length of the statement  "	return new MonoDevelop.Core.ProgressMonitoring.AggregatedProgressMonitor (base.CreateProgressMonitor ()' new MonoDevelop.Ide.ProgressMonitoring.MessageDialogProgressMonitor (true' true' true' true)); " is 199.
Long Statement,MonoDevelop.VersionControl,PublishCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\PublishCommand.cs,Publish,The length of the statement  "				if (MessageService.AskQuestion (GettextCatalog.GetString ("Are you sure you want to publish the project?")' GettextCatalog.GetString ("The project will be published to the repository '{0}'' module '{1}'."' dlg.Repository.Name' dlg.ModuleName)' AlertButton.Cancel' publishButton) == publishButton) { " is 298.
Long Statement,MonoDevelop.VersionControl,PublishCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\PublishCommand.cs,GetFiles,The length of the statement  "		files.AddRange (((IWorkspaceFileObject)entry).GetItemFiles (true).Where (file => file.IsChildPathOf (entry.BaseDirectory))); " is 124.
Long Statement,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The length of the statement  "			if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) { " is 175.
Long Statement,MonoDevelop.VersionControl,Annotation,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,ToString,The length of the statement  "	return String.Format ("[Annotation: Revision={0}' Author={1}' Date={2}' HasDate={3}' Email={4}' HasEmail={5}]"' Revision' Author' Date' HasDate' Email' HasEmail); " is 162.
Long Statement,MonoDevelop.VersionControl,RevertCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\RevertCommand.cs,RevertInternal,The length of the statement  "		if (MessageService.AskQuestion (GettextCatalog.GetString ("Are you sure you want to revert the changes done in the selected files?")' GettextCatalog.GetString ("All changes made to the selected files will be permanently lost.")' AlertButton.Cancel' AlertButton.Revert) != AlertButton.Revert) " is 291.
Long Statement,MonoDevelop.VersionControl,UrlBasedRepositoryEditor,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\UrlBasedRepositoryEditor.cs,UpdateControls,The length of the statement  "	if (repo.Uri != null || repo.SupportedProtocols.Any (p => repositoryUrlEntry.Text.StartsWith (p + "://"' StringComparison.Ordinal))) { " is 134.
Long Statement,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,CanBuildNode,The length of the statement  "	return typeof(ProjectFile).IsAssignableFrom (dataType) || typeof(SystemFile).IsAssignableFrom (dataType) || typeof(ProjectFolder).IsAssignableFrom (dataType) || typeof(IWorkspaceObject).IsAssignableFrom (dataType); " is 214.
Long Statement,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,AddOverlay,The length of the statement  "	Gdk.Pixbuf res = new Gdk.Pixbuf (icon.Colorspace' icon.HasAlpha' icon.BitsPerSample' icon.Width + dx' icon.Height + dy); " is 120.
Long Statement,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,AddOverlay,The length of the statement  "	overlay.Composite (res' res.Width - overlay.Width' res.Height - overlay.Height' overlay.Width' overlay.Height' res.Width - overlay.Width' res.Height - overlay.Height' 1' 1' Gdk.InterpType.Bilinear' 255); " is 203.
Long Statement,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetRepository,The length of the statement  "	InternalRepositoryReference repoRef = (InternalRepositoryReference)entry.ExtendedProperties [typeof(InternalRepositoryReference)]; " is 130.
Long Statement,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,OnFileAdded,The length of the statement  "			var versionInfos = repo.GetVersionInfo (repoFiles.Select (f => f.ProjectFile.FilePath)' VersionInfoQueryFlags.IgnoreCache); " is 123.
Long Statement,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,OnFileAdded,The length of the statement  "			vargs.AddRange (repoFiles.Select (i => new FileUpdateEventInfo (repo' i.ProjectFile.FilePath' i.ProjectFile.Subtype == Subtype.Directory))); " is 140.
Long Statement,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetProgressMonitor,The length of the statement  "	IProgressMonitor monitor = IdeApp.Workbench.ProgressMonitors.GetOutputProgressMonitor ("MonoDevelop.VersionControlOutput"' "Version Control"' "md-version-control"' false' true); " is 177.
Long Statement,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetProgressMonitor,The length of the statement  "	mon.AddSlaveMonitor (IdeApp.Workbench.ProgressMonitors.GetStatusProgressMonitor (operation' icon' true' true' false' outPad)); " is 126.
Long Statement,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetStatusMonitor,The length of the statement  "	return IdeApp.Workbench.ProgressMonitors.GetStatusProgressMonitor (GettextCatalog.GetString ("Updating version control repository")' "vc-remote-status"' true); " is 159.
Long Statement,MonoDevelop.VersionControl,VersionInfo,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionInfo.cs,Equals,The length of the statement  "	return localPath == obj.localPath && repositoryPath == obj.repositoryPath && isDirectory == obj.isDirectory && status == obj.status && revision == obj.revision && remoteStatus == obj.remoteStatus && remoteRevision == obj.remoteRevision && AllowedOperations == obj.AllowedOperations; " is 282.
Long Statement,MonoDevelop.VersionControl,RevertRevisionsCommands,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\RevertRevisionsCommands.cs,RevertRevisions,The length of the statement  "		string question = GettextCatalog.GetString ("Are you sure you want to revert the selected resources to the revision specified (all local changes will be discarded)?"); " is 167.
Long Statement,MonoDevelop.VersionControl,RevertRevisionsCommands,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\RevertRevisionsCommands.cs,RevertRevisions,The length of the statement  "			question = GettextCatalog.GetString ("Are you sure you want to revert the changes from the revision selected on these resources?"); " is 131.
Long Statement,MonoDevelop.VersionControl,RevertRevisionsCommands,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\RevertRevisionsCommands.cs,RevertRevisions,The length of the statement  "		if (MessageService.AskQuestion (question' GettextCatalog.GetString ("Note: The reversion will occur in your working copy' so you will still need to perform a commit to complete it.")' AlertButton.Cancel' AlertButton.Revert) != AlertButton.Revert) " is 246.
Long Statement,MonoDevelop.VersionControl,CommitMessageStyle,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\CommitMessageStyle.cs,Equals,The length of the statement  "	return Indent == other.Indent && FirstFilePrefix == other.FirstFilePrefix && FileSeparator == other.FileSeparator && LastFilePostfix == other.LastFilePostfix && LineAlign == other.LineAlign && InterMessageLines == other.InterMessageLines && Header == other.Header && IncludeDirectoryPaths == other.IncludeDirectoryPaths && Wrap == other.Wrap; " is 342.
Long Statement,MonoDevelop.VersionControl,CreatePatchCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\CreatePatchCommand.cs,CreatePatch,The length of the statement  "	object[] exts = AddinManager.GetExtensionObjects ("/MonoDevelop/VersionControl/CommitDialogExtensions"' typeof(CommitDialogExtension)' false); " is 142.
Long Statement,MonoDevelop.VersionControl,CreatePatchCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\CreatePatchCommand.cs,CreatePatch,The length of the statement  "	string filename = string.Format ("{0}.diff"' ((string)items.BaseLocalPath.FullPath).TrimEnd (Path.DirectorySeparatorChar)); " is 123.
Long Statement,MonoDevelop.VersionControl,DefaultDiffViewHandler,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\DefaultDiffViewHandler.cs,CanHandle,The length of the statement  "	return (primaryView == null || primaryView.GetContent<ITextFile> () != null) && DesktopService.GetFileIsText (item.Path); " is 121.
Long Statement,MonoDevelop.VersionControl,DefaultBlameViewHandler,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\DefaultBlameViewHandler.cs,CanHandle,The length of the statement  "	return (primaryView == null || primaryView.GetContent<ITextFile> () != null) && DesktopService.GetFileIsText (item.Path); " is 121.
Long Statement,MonoDevelop.VersionControl,DefaultMergeViewHandler,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\DefaultMergeViewHandler.cs,CanHandle,The length of the statement  "	return (primaryView == null || primaryView.GetContent<ITextFile> () != null) && DesktopService.GetFileIsText (item.Path); " is 121.
Long Statement,MonoDevelop.VersionControl,LogCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\LogCommand.cs,CanShow,The length of the statement  "	return item.VersionInfo.IsVersioned && AddinManager.GetExtensionObjects<ILogViewHandler> (LogViewHandlers).Any (h => h.CanHandle (item' null)); " is 143.
Long Statement,MonoDevelop.VersionControl,LogCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\LogCommand.cs,Show,The length of the statement  "			document = IdeApp.Workbench.OpenDocument (item.Path' OpenDocumentOptions.Default | OpenDocumentOptions.OnlyInternalViewer); " is 123.
Long Statement,MonoDevelop.VersionControl,DiffCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\DiffCommand.cs,CanShow,The length of the statement  "	return !item.IsDirectory && item.VersionInfo.IsVersioned && AddinManager.GetExtensionObjects<IDiffViewHandler> (DiffViewHandlers).Any (h => h.CanHandle (item' null)); " is 166.
Long Statement,MonoDevelop.VersionControl,DiffCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\DiffCommand.cs,Show,The length of the statement  "		var document = IdeApp.Workbench.OpenDocument (item.Path' OpenDocumentOptions.Default | OpenDocumentOptions.OnlyInternalViewer); " is 127.
Long Statement,MonoDevelop.VersionControl,MergeCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\MergeCommand.cs,CanShow,The length of the statement  "	return !item.IsDirectory && item.VersionInfo.IsVersioned && AddinManager.GetExtensionObjects<IMergeViewHandler> (MergeViewHandlers).Any (h => h.CanHandle (item' null)); " is 168.
Long Statement,MonoDevelop.VersionControl,MergeCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\MergeCommand.cs,Show,The length of the statement  "		var document = IdeApp.Workbench.OpenDocument (item.Path' OpenDocumentOptions.Default | OpenDocumentOptions.OnlyInternalViewer); " is 127.
Long Statement,MonoDevelop.VersionControl,BlameCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\BlameCommand.cs,CanShow,The length of the statement  "	return !item.IsDirectory && item.VersionInfo.IsVersioned && AddinManager.GetExtensionObjects<IBlameViewHandler> (BlameViewHandlers).Any (h => h.CanHandle (item' null)); " is 168.
Long Statement,MonoDevelop.VersionControl,BlameCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\BlameCommand.cs,Show,The length of the statement  "		var document = IdeApp.Workbench.OpenDocument (item.Path' OpenDocumentOptions.Default | OpenDocumentOptions.OnlyInternalViewer); " is 127.
Long Statement,MonoDevelop.VersionControl,VersionInfoCache,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionInfoCache.cs,SetStatus,The length of the statement  "		VersionControlService.NotifyFileStatusChanged (new FileUpdateEventArgs (repo' versionInfo.LocalPath' versionInfo.IsDirectory)); " is 127.
Long Statement,MonoDevelop.VersionControl,IgnoreCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\IgnoreCommand.cs,IgnoreInternal,The length of the statement  "		if (MessageService.AskQuestion (GettextCatalog.GetString ("Are you sure you want to ignore the selected files?")' AlertButton.No' AlertButton.Yes) != AlertButton.Yes) " is 166.
Long Statement,MonoDevelop.VersionControl,UnignoreCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\IgnoreCommand.cs,UnignoreInternal,The length of the statement  "			return items.All (x => (x.VersionInfo.Status & (VersionStatus.ScheduledIgnore | VersionStatus.Ignored)) != VersionStatus.Unversioned); " is 134.
Long Statement,MonoDevelop.VersionControl,UnignoreCommand,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\IgnoreCommand.cs,UnignoreInternal,The length of the statement  "		if (MessageService.AskQuestion (GettextCatalog.GetString ("Are you sure you want to unignore the selected files?")' AlertButton.No' AlertButton.Yes) != AlertButton.Yes) " is 168.
Complex Conditional,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The conditional expression  "block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd"  is complex.
Complex Conditional,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The conditional expression  "curY < editor.Allocation.Bottom && line <= overview.annotations.Count && ann != null && overview.annotations [line - 1] != null && overview.annotations [line - 1].Revision == ann.Revision"  is complex.
Complex Conditional,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The conditional expression  "ann != null && overview.highlightAnnotation.Revision == ann.Revision && curStart <= overview.highlightPositon && overview.highlightPositon < curY"  is complex.
Complex Conditional,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GetDirectoryVersionInfo,The conditional expression  "status != null && !status.RequiresRefresh && (!getRemoteStatus || status.HasRemoteStatus)"  is complex.
Complex Conditional,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GetDirectoryVersionInfo,The conditional expression  "status != null && status.RequiresRefresh && (!getRemoteStatus || status.HasRemoteStatus)"  is complex.
Complex Conditional,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The conditional expression  "pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))"  is complex.
Virtual Method Call from Constructor,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,StatusView,The constructor "StatusView" calls a virtual method "CreateChangeSet".
Virtual Method Call from Constructor,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,CommitDialog,The constructor "CommitDialog" calls a virtual method "Initialize".
Virtual Method Call from Constructor,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,CommitDialog,The constructor "CommitDialog" calls a virtual method "CommitMessageTextViewHook".
Empty Catch Block,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,OnButtonCommitClicked,The method has an empty catch block.
Empty Catch Block,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,EndCommit,The method has an empty catch block.
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (diffMode) {  	if (path.Equals (selctedPath)) {  		selectedLine = -1;  		selctedPath = null;  	}  	int w' maxy;  	window.GetSize (out w' out maxy);  	if (DrawLeft) {  		cell_area.Width += cell_area.X - leftSpace;  		cell_area.X = leftSpace;  	}  	var treeview = widget as FileTreeView;  	var p = treeview != null ? treeview.CursorLocation : null;  	cell_area.Width -= RightPadding;  	window.DrawRectangle (widget.Style.BaseGC (Gtk.StateType.Normal)' true' cell_area.X' cell_area.Y' cell_area.Width - 1' cell_area.Height);  	Gdk.GC normalGC = widget.Style.TextGC (StateType.Normal);  	Gdk.GC removedGC = new Gdk.GC (window);  	removedGC.Copy (normalGC);  	removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  	Gdk.GC addedGC = new Gdk.GC (window);  	addedGC.Copy (normalGC);  	addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  	Gdk.GC infoGC = new Gdk.GC (window);  	infoGC.Copy (normalGC);  	infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  	Cairo.Context ctx = CairoHelper.Create (window);  	// Rendering is done in two steps:  	// 1) Get a list of blocks to render  	// 2) render the blocks  	int y = cell_area.Y + 2;  	// cline keeps track of the current source code line (the one to jump to when double clicking)  	int cline = 1;  	bool inHeader = true;  	BlockInfo currentBlock = null;  	List<BlockInfo> blocks = new List<BlockInfo> ();  	for (int n = 0; n < lines.Length; n++' y += lineHeight) {  		string line = lines [n];  		if (line.Length == 0) {  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		char tag = line [0];  		if (line.StartsWith ("---"' StringComparison.Ordinal) || line.StartsWith ("+++"' StringComparison.Ordinal)) {  			// Ignore this part of the header.  			currentBlock = null;  			y -= lineHeight;  			continue;  		}  		if (tag == '@') {  			int l = ParseCurrentLine (line);  			if (l != -1)  				cline = l - 1;  			inHeader = false;  		}  		else if (tag != '-' && !inHeader)  			cline++;  		BlockType type;  		switch (tag) {  		case '-':  			type = BlockType.Removed;  			break;  		case '+':  			type = BlockType.Added;  			break;  		case '@':  			type = BlockType.Info;  			break;  		default:  			type = BlockType.Unchanged;  			break;  		}  		if (currentBlock == null || type != currentBlock.Type) {  			if (y > maxy)  				break;  			// Starting a new block. Mark section ends between a change block and a normal code block  			if (currentBlock != null && IsChangeBlock (currentBlock.Type) && !IsChangeBlock (type))  				currentBlock.SectionEnd = true;  			currentBlock = new BlockInfo () {  				YStart = y'  				FirstLine = n'  				Type = type'  				SourceLineStart = cline'  				SectionStart = (blocks.Count == 0 || !IsChangeBlock (blocks [blocks.Count - 1].Type)) && IsChangeBlock (type)  			};  			blocks.Add (currentBlock);  		}  		// Include the line in the current block  		currentBlock.YEnd = y + lineHeight;  		currentBlock.LastLine = n;  	}  	// Now render the blocks  	// The y position of the highlighted line  	int selectedLineRowTop = -1;  	BlockInfo lastCodeSegmentStart = null;  	BlockInfo lastCodeSegmentEnd = null;  	foreach (BlockInfo block in blocks) {  		if (block.Type == BlockType.Info) {  			// Finished drawing the content of a code segment. Now draw the segment border and label.  			if (lastCodeSegmentStart != null)  				DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  			lastCodeSegmentStart = block;  		}  		lastCodeSegmentEnd = block;  		if (block.YEnd < 0)  			continue;  		// Draw the block background  		DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  		// Get all text for the current block  		StringBuilder sb = new StringBuilder ();  		for (int n = block.FirstLine; n <= block.LastLine; n++) {  			string s = ProcessLine (lines [n]);  			if (n > block.FirstLine)  				sb.Append ('\n');  			if (block.Type != BlockType.Info && s.Length > 0)  				sb.Append (s' 1' s.Length - 1);  			else  				sb.Append (s);  		}  		// Draw a special background for the selected line  		if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  			int row = (p.Value.Y - block.YStart) / lineHeight;  			double yrow = block.YStart + lineHeight * row;  			double xrow = cell_area.X + LeftPaddingBlock;  			int wrow = cell_area.Width - 1 - LeftPaddingBlock;  			if (block.Type == BlockType.Added)  				ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  			else if (block.Type == BlockType.Removed)  				ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  			else {  				ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  				xrow -= LeftPaddingBlock;  				wrow += LeftPaddingBlock;  			}  			ctx.Rectangle (xrow' yrow' wrow' lineHeight);  			ctx.Fill ();  			selectedLine = block.SourceLineStart + row;  			selctedPath = path;  			selectedLineRowTop = (int)yrow;  		}  		// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  		if (block.Type != BlockType.Info) {  			layout.SetMarkup ("");  			layout.SetText (sb.ToString ());  			Gdk.GC gc;  			switch (block.Type) {  			case BlockType.Removed:  				gc = removedGC;  				break;  			case BlockType.Added:  				gc = addedGC;  				break;  			case BlockType.Info:  				gc = infoGC;  				break;  			default:  				gc = normalGC;  				break;  			}  			window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  		}  		// Finally draw the change symbol at the left margin  		DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	}  	// Finish the drawing of the code segment  	if (lastCodeSegmentStart != null)  		DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  	// Draw the source line number at the current selected line. It must be done at the end because it must  	// be drawn over the source code text and segment borders.  	if (selectedLineRowTop != -1)  		DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  	((IDisposable)ctx).Dispose ();  	removedGC.Dispose ();  	addedGC.Dispose ();  	infoGC.Dispose ();  }  else {  	// Rendering a normal text row  	int y = cell_area.Y + (cell_area.Height - height) / 2;  	window.DrawLayout (widget.Style.TextGC (GetState (widget' flags))' cell_area.X' y' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: removedGC.RgbFgColor = baseRemoveColor.AddLight (-0.3);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: addedGC.RgbFgColor = baseAddColor.AddLight (-0.3);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: infoGC.RgbFgColor = widget.Style.Text (StateType.Normal).AddLight (0.2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: foreach (BlockInfo block in blocks) {  	if (block.Type == BlockType.Info) {  		// Finished drawing the content of a code segment. Now draw the segment border and label.  		if (lastCodeSegmentStart != null)  			DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  		lastCodeSegmentStart = block;  	}  	lastCodeSegmentEnd = block;  	if (block.YEnd < 0)  		continue;  	// Draw the block background  	DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	// Get all text for the current block  	StringBuilder sb = new StringBuilder ();  	for (int n = block.FirstLine; n <= block.LastLine; n++) {  		string s = ProcessLine (lines [n]);  		if (n > block.FirstLine)  			sb.Append ('\n');  		if (block.Type != BlockType.Info && s.Length > 0)  			sb.Append (s' 1' s.Length - 1);  		else  			sb.Append (s);  	}  	// Draw a special background for the selected line  	if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  		int row = (p.Value.Y - block.YStart) / lineHeight;  		double yrow = block.YStart + lineHeight * row;  		double xrow = cell_area.X + LeftPaddingBlock;  		int wrow = cell_area.Width - 1 - LeftPaddingBlock;  		if (block.Type == BlockType.Added)  			ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  		else if (block.Type == BlockType.Removed)  			ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  		else {  			ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  			xrow -= LeftPaddingBlock;  			wrow += LeftPaddingBlock;  		}  		ctx.Rectangle (xrow' yrow' wrow' lineHeight);  		ctx.Fill ();  		selectedLine = block.SourceLineStart + row;  		selctedPath = path;  		selectedLineRowTop = (int)yrow;  	}  	// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  	if (block.Type != BlockType.Info) {  		layout.SetMarkup ("");  		layout.SetText (sb.ToString ());  		Gdk.GC gc;  		switch (block.Type) {  		case BlockType.Removed:  			gc = removedGC;  			break;  		case BlockType.Added:  			gc = addedGC;  			break;  		case BlockType.Info:  			gc = infoGC;  			break;  		default:  			gc = normalGC;  			break;  		}  		window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  	}  	// Finally draw the change symbol at the left margin  	DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: foreach (BlockInfo block in blocks) {  	if (block.Type == BlockType.Info) {  		// Finished drawing the content of a code segment. Now draw the segment border and label.  		if (lastCodeSegmentStart != null)  			DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  		lastCodeSegmentStart = block;  	}  	lastCodeSegmentEnd = block;  	if (block.YEnd < 0)  		continue;  	// Draw the block background  	DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	// Get all text for the current block  	StringBuilder sb = new StringBuilder ();  	for (int n = block.FirstLine; n <= block.LastLine; n++) {  		string s = ProcessLine (lines [n]);  		if (n > block.FirstLine)  			sb.Append ('\n');  		if (block.Type != BlockType.Info && s.Length > 0)  			sb.Append (s' 1' s.Length - 1);  		else  			sb.Append (s);  	}  	// Draw a special background for the selected line  	if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  		int row = (p.Value.Y - block.YStart) / lineHeight;  		double yrow = block.YStart + lineHeight * row;  		double xrow = cell_area.X + LeftPaddingBlock;  		int wrow = cell_area.Width - 1 - LeftPaddingBlock;  		if (block.Type == BlockType.Added)  			ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  		else if (block.Type == BlockType.Removed)  			ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  		else {  			ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  			xrow -= LeftPaddingBlock;  			wrow += LeftPaddingBlock;  		}  		ctx.Rectangle (xrow' yrow' wrow' lineHeight);  		ctx.Fill ();  		selectedLine = block.SourceLineStart + row;  		selctedPath = path;  		selectedLineRowTop = (int)yrow;  	}  	// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  	if (block.Type != BlockType.Info) {  		layout.SetMarkup ("");  		layout.SetText (sb.ToString ());  		Gdk.GC gc;  		switch (block.Type) {  		case BlockType.Removed:  			gc = removedGC;  			break;  		case BlockType.Added:  			gc = addedGC;  			break;  		case BlockType.Info:  			gc = infoGC;  			break;  		default:  			gc = normalGC;  			break;  		}  		window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  	}  	// Finally draw the change symbol at the left margin  	DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: foreach (BlockInfo block in blocks) {  	if (block.Type == BlockType.Info) {  		// Finished drawing the content of a code segment. Now draw the segment border and label.  		if (lastCodeSegmentStart != null)  			DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  		lastCodeSegmentStart = block;  	}  	lastCodeSegmentEnd = block;  	if (block.YEnd < 0)  		continue;  	// Draw the block background  	DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	// Get all text for the current block  	StringBuilder sb = new StringBuilder ();  	for (int n = block.FirstLine; n <= block.LastLine; n++) {  		string s = ProcessLine (lines [n]);  		if (n > block.FirstLine)  			sb.Append ('\n');  		if (block.Type != BlockType.Info && s.Length > 0)  			sb.Append (s' 1' s.Length - 1);  		else  			sb.Append (s);  	}  	// Draw a special background for the selected line  	if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  		int row = (p.Value.Y - block.YStart) / lineHeight;  		double yrow = block.YStart + lineHeight * row;  		double xrow = cell_area.X + LeftPaddingBlock;  		int wrow = cell_area.Width - 1 - LeftPaddingBlock;  		if (block.Type == BlockType.Added)  			ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  		else if (block.Type == BlockType.Removed)  			ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  		else {  			ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  			xrow -= LeftPaddingBlock;  			wrow += LeftPaddingBlock;  		}  		ctx.Rectangle (xrow' yrow' wrow' lineHeight);  		ctx.Fill ();  		selectedLine = block.SourceLineStart + row;  		selctedPath = path;  		selectedLineRowTop = (int)yrow;  	}  	// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  	if (block.Type != BlockType.Info) {  		layout.SetMarkup ("");  		layout.SetText (sb.ToString ());  		Gdk.GC gc;  		switch (block.Type) {  		case BlockType.Removed:  			gc = removedGC;  			break;  		case BlockType.Added:  			gc = addedGC;  			break;  		case BlockType.Info:  			gc = infoGC;  			break;  		default:  			gc = normalGC;  			break;  		}  		window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  	}  	// Finally draw the change symbol at the left margin  	DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: foreach (BlockInfo block in blocks) {  	if (block.Type == BlockType.Info) {  		// Finished drawing the content of a code segment. Now draw the segment border and label.  		if (lastCodeSegmentStart != null)  			DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  		lastCodeSegmentStart = block;  	}  	lastCodeSegmentEnd = block;  	if (block.YEnd < 0)  		continue;  	// Draw the block background  	DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	// Get all text for the current block  	StringBuilder sb = new StringBuilder ();  	for (int n = block.FirstLine; n <= block.LastLine; n++) {  		string s = ProcessLine (lines [n]);  		if (n > block.FirstLine)  			sb.Append ('\n');  		if (block.Type != BlockType.Info && s.Length > 0)  			sb.Append (s' 1' s.Length - 1);  		else  			sb.Append (s);  	}  	// Draw a special background for the selected line  	if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  		int row = (p.Value.Y - block.YStart) / lineHeight;  		double yrow = block.YStart + lineHeight * row;  		double xrow = cell_area.X + LeftPaddingBlock;  		int wrow = cell_area.Width - 1 - LeftPaddingBlock;  		if (block.Type == BlockType.Added)  			ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  		else if (block.Type == BlockType.Removed)  			ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  		else {  			ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  			xrow -= LeftPaddingBlock;  			wrow += LeftPaddingBlock;  		}  		ctx.Rectangle (xrow' yrow' wrow' lineHeight);  		ctx.Fill ();  		selectedLine = block.SourceLineStart + row;  		selctedPath = path;  		selectedLineRowTop = (int)yrow;  	}  	// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  	if (block.Type != BlockType.Info) {  		layout.SetMarkup ("");  		layout.SetText (sb.ToString ());  		Gdk.GC gc;  		switch (block.Type) {  		case BlockType.Removed:  			gc = removedGC;  			break;  		case BlockType.Added:  			gc = addedGC;  			break;  		case BlockType.Info:  			gc = infoGC;  			break;  		default:  			gc = normalGC;  			break;  		}  		window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  	}  	// Finally draw the change symbol at the left margin  	DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: foreach (BlockInfo block in blocks) {  	if (block.Type == BlockType.Info) {  		// Finished drawing the content of a code segment. Now draw the segment border and label.  		if (lastCodeSegmentStart != null)  			DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  		lastCodeSegmentStart = block;  	}  	lastCodeSegmentEnd = block;  	if (block.YEnd < 0)  		continue;  	// Draw the block background  	DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	// Get all text for the current block  	StringBuilder sb = new StringBuilder ();  	for (int n = block.FirstLine; n <= block.LastLine; n++) {  		string s = ProcessLine (lines [n]);  		if (n > block.FirstLine)  			sb.Append ('\n');  		if (block.Type != BlockType.Info && s.Length > 0)  			sb.Append (s' 1' s.Length - 1);  		else  			sb.Append (s);  	}  	// Draw a special background for the selected line  	if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  		int row = (p.Value.Y - block.YStart) / lineHeight;  		double yrow = block.YStart + lineHeight * row;  		double xrow = cell_area.X + LeftPaddingBlock;  		int wrow = cell_area.Width - 1 - LeftPaddingBlock;  		if (block.Type == BlockType.Added)  			ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  		else if (block.Type == BlockType.Removed)  			ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  		else {  			ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  			xrow -= LeftPaddingBlock;  			wrow += LeftPaddingBlock;  		}  		ctx.Rectangle (xrow' yrow' wrow' lineHeight);  		ctx.Fill ();  		selectedLine = block.SourceLineStart + row;  		selctedPath = path;  		selectedLineRowTop = (int)yrow;  	}  	// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  	if (block.Type != BlockType.Info) {  		layout.SetMarkup ("");  		layout.SetText (sb.ToString ());  		Gdk.GC gc;  		switch (block.Type) {  		case BlockType.Removed:  			gc = removedGC;  			break;  		case BlockType.Added:  			gc = addedGC;  			break;  		case BlockType.Info:  			gc = infoGC;  			break;  		default:  			gc = normalGC;  			break;  		}  		window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  	}  	// Finally draw the change symbol at the left margin  	DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: foreach (BlockInfo block in blocks) {  	if (block.Type == BlockType.Info) {  		// Finished drawing the content of a code segment. Now draw the segment border and label.  		if (lastCodeSegmentStart != null)  			DrawCodeSegmentBorder (infoGC' ctx' cell_area.X' cell_area.Width' lastCodeSegmentStart' lastCodeSegmentEnd' lines' widget' window);  		lastCodeSegmentStart = block;  	}  	lastCodeSegmentEnd = block;  	if (block.YEnd < 0)  		continue;  	// Draw the block background  	DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  	// Get all text for the current block  	StringBuilder sb = new StringBuilder ();  	for (int n = block.FirstLine; n <= block.LastLine; n++) {  		string s = ProcessLine (lines [n]);  		if (n > block.FirstLine)  			sb.Append ('\n');  		if (block.Type != BlockType.Info && s.Length > 0)  			sb.Append (s' 1' s.Length - 1);  		else  			sb.Append (s);  	}  	// Draw a special background for the selected line  	if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  		int row = (p.Value.Y - block.YStart) / lineHeight;  		double yrow = block.YStart + lineHeight * row;  		double xrow = cell_area.X + LeftPaddingBlock;  		int wrow = cell_area.Width - 1 - LeftPaddingBlock;  		if (block.Type == BlockType.Added)  			ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  		else if (block.Type == BlockType.Removed)  			ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  		else {  			ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  			xrow -= LeftPaddingBlock;  			wrow += LeftPaddingBlock;  		}  		ctx.Rectangle (xrow' yrow' wrow' lineHeight);  		ctx.Fill ();  		selectedLine = block.SourceLineStart + row;  		selctedPath = path;  		selectedLineRowTop = (int)yrow;  	}  	// Draw the line text. Ignore header blocks' since they are drawn as labels in DrawCodeSegmentBorder  	if (block.Type != BlockType.Info) {  		layout.SetMarkup ("");  		layout.SetText (sb.ToString ());  		Gdk.GC gc;  		switch (block.Type) {  		case BlockType.Removed:  			gc = removedGC;  			break;  		case BlockType.Added:  			gc = addedGC;  			break;  		case BlockType.Info:  			gc = infoGC;  			break;  		default:  			gc = normalGC;  			break;  		}  		window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  	}  	// Finally draw the change symbol at the left margin  	DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: DrawBlockBg (ctx' cell_area.X + 1' cell_area.Width - 2' block);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  	int row = (p.Value.Y - block.YStart) / lineHeight;  	double yrow = block.YStart + lineHeight * row;  	double xrow = cell_area.X + LeftPaddingBlock;  	int wrow = cell_area.Width - 1 - LeftPaddingBlock;  	if (block.Type == BlockType.Added)  		ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  	else if (block.Type == BlockType.Removed)  		ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  	else {  		ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  		xrow -= LeftPaddingBlock;  		wrow += LeftPaddingBlock;  	}  	ctx.Rectangle (xrow' yrow' wrow' lineHeight);  	ctx.Fill ();  	selectedLine = block.SourceLineStart + row;  	selctedPath = path;  	selectedLineRowTop = (int)yrow;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  	int row = (p.Value.Y - block.YStart) / lineHeight;  	double yrow = block.YStart + lineHeight * row;  	double xrow = cell_area.X + LeftPaddingBlock;  	int wrow = cell_area.Width - 1 - LeftPaddingBlock;  	if (block.Type == BlockType.Added)  		ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  	else if (block.Type == BlockType.Removed)  		ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  	else {  		ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  		xrow -= LeftPaddingBlock;  		wrow += LeftPaddingBlock;  	}  	ctx.Rectangle (xrow' yrow' wrow' lineHeight);  	ctx.Fill ();  	selectedLine = block.SourceLineStart + row;  	selctedPath = path;  	selectedLineRowTop = (int)yrow;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type != BlockType.Info && p.HasValue && p.Value.X >= cell_area.X && p.Value.X <= cell_area.Right && p.Value.Y >= block.YStart && p.Value.Y <= block.YEnd) {  	int row = (p.Value.Y - block.YStart) / lineHeight;  	double yrow = block.YStart + lineHeight * row;  	double xrow = cell_area.X + LeftPaddingBlock;  	int wrow = cell_area.Width - 1 - LeftPaddingBlock;  	if (block.Type == BlockType.Added)  		ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  	else if (block.Type == BlockType.Removed)  		ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  	else {  		ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  		xrow -= LeftPaddingBlock;  		wrow += LeftPaddingBlock;  	}  	ctx.Rectangle (xrow' yrow' wrow' lineHeight);  	ctx.Fill ();  	selectedLine = block.SourceLineStart + row;  	selctedPath = path;  	selectedLineRowTop = (int)yrow;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type == BlockType.Added)  	ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  else if (block.Type == BlockType.Removed)  	ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  else {  	ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  	xrow -= LeftPaddingBlock;  	wrow += LeftPaddingBlock;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type == BlockType.Added)  	ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  else if (block.Type == BlockType.Removed)  	ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  else {  	ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  	xrow -= LeftPaddingBlock;  	wrow += LeftPaddingBlock;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type == BlockType.Added)  	ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  else if (block.Type == BlockType.Removed)  	ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  else {  	ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  	xrow -= LeftPaddingBlock;  	wrow += LeftPaddingBlock;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: ctx.SetSourceColor (baseAddColor.AddLight (0.1).ToCairoColor ());  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type == BlockType.Removed)  	ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  else {  	ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  	xrow -= LeftPaddingBlock;  	wrow += LeftPaddingBlock;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type == BlockType.Removed)  	ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  else {  	ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  	xrow -= LeftPaddingBlock;  	wrow += LeftPaddingBlock;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: ctx.SetSourceColor (baseRemoveColor.AddLight (0.1).ToCairoColor ());  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: ctx.SetSourceColor (widget.Style.Base (Gtk.StateType.Prelight).AddLight (0.1).ToCairoColor ());  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (block.Type != BlockType.Info) {  	layout.SetMarkup ("");  	layout.SetText (sb.ToString ());  	Gdk.GC gc;  	switch (block.Type) {  	case BlockType.Removed:  		gc = removedGC;  		break;  	case BlockType.Added:  		gc = addedGC;  		break;  	case BlockType.Info:  		gc = infoGC;  		break;  	default:  		gc = normalGC;  		break;  	}  	window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: window.DrawLayout (gc' cell_area.X + 2 + LeftPaddingBlock' block.YStart' layout);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: DrawChangeSymbol (ctx' cell_area.X + 1' cell_area.Width - 2' block);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: if (selectedLineRowTop != -1)  	DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,Render,The following statement contains a magic number: DrawLineBox (normalGC' ctx' ((Gtk.TreeView)widget).VisibleRect.Right - 4' selectedLineRowTop' selectedLine' widget' window);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + shadowSize + 0.5' firstBlock.YStart + bottomSpacing + spacing - shadowSize + 0.5' width - shadowSize * 2' shadowSize);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + shadowSize + 0.5' firstBlock.YStart + bottomSpacing + spacing - shadowSize + 0.5' width - shadowSize * 2' shadowSize);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + shadowSize + 0.5' firstBlock.YStart + bottomSpacing + spacing - shadowSize + 0.5' width - shadowSize * 2' shadowSize);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.9' 0.9' 0.9);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.9' 0.9' 0.9);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.9' 0.9' 0.9);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + shadowSize + 0.5' lastBlock.YEnd + bottomSpacing + 0.5' width - shadowSize * 2' shadowSize);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + shadowSize + 0.5' lastBlock.YEnd + bottomSpacing + 0.5' width - shadowSize * 2' shadowSize);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + shadowSize + 0.5' lastBlock.YEnd + bottomSpacing + 0.5' width - shadowSize * 2' shadowSize);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.9' 0.9' 0.9);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.9' 0.9' 0.9);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.9' 0.9' 0.9);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + 0.5' firstBlock.YStart + bottomSpacing + spacing + 0.5' width' lastBlock.YEnd - firstBlock.YStart - spacing);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + 0.5' firstBlock.YStart + bottomSpacing + spacing + 0.5' width' lastBlock.YEnd - firstBlock.YStart - spacing);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + 2 + LeftPaddingBlock - 1 + 0.5' firstBlock.YStart + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + 2 + LeftPaddingBlock - 1 + 0.5' firstBlock.YStart + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + 2 + LeftPaddingBlock - 1 + 0.5' firstBlock.YStart + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + 2 + LeftPaddingBlock - 1 + 0.5' firstBlock.YStart + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.Rectangle (x + 2 + LeftPaddingBlock - 1 + 0.5' firstBlock.YStart + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawCodeSegmentBorder,The following statement contains a magic number: window.DrawLayout (gc' (int)(x + 2 + LeftPaddingBlock)' firstBlock.YStart + dy' layout);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The following statement contains a magic number: ctx.Rectangle (right - tw - 2 + 0.5' top + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The following statement contains a magic number: ctx.Rectangle (right - tw - 2 + 0.5' top + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The following statement contains a magic number: ctx.Rectangle (right - tw - 2 + 0.5' top + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The following statement contains a magic number: ctx.Rectangle (right - tw - 2 + 0.5' top + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The following statement contains a magic number: ctx.Rectangle (right - tw - 2 + 0.5' top + dy - 1 + 0.5' tw + 2' th + 2);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawLineBox,The following statement contains a magic number: ctx.SetSourceRGB (0.7' 0.7' 0.7);  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: if (block.SectionStart) {  	ctx.Arc (x + rd' y + rd' rd' 180 * (Math.PI / 180)' 270 * (Math.PI / 180));  	ctx.LineTo (markerx' y);  }  else {  	ctx.MoveTo (markerx' y);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: if (block.SectionStart) {  	ctx.Arc (x + rd' y + rd' rd' 180 * (Math.PI / 180)' 270 * (Math.PI / 180));  	ctx.LineTo (markerx' y);  }  else {  	ctx.MoveTo (markerx' y);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: if (block.SectionStart) {  	ctx.Arc (x + rd' y + rd' rd' 180 * (Math.PI / 180)' 270 * (Math.PI / 180));  	ctx.LineTo (markerx' y);  }  else {  	ctx.MoveTo (markerx' y);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: if (block.SectionStart) {  	ctx.Arc (x + rd' y + rd' rd' 180 * (Math.PI / 180)' 270 * (Math.PI / 180));  	ctx.LineTo (markerx' y);  }  else {  	ctx.MoveTo (markerx' y);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.Arc (x + rd' y + rd' rd' 180 * (Math.PI / 180)' 270 * (Math.PI / 180));  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.Arc (x + rd' y + rd' rd' 180 * (Math.PI / 180)' 270 * (Math.PI / 180));  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.Arc (x + rd' y + rd' rd' 180 * (Math.PI / 180)' 270 * (Math.PI / 180));  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.Arc (x + rd' y + rd' rd' 180 * (Math.PI / 180)' 270 * (Math.PI / 180));  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: if (block.SectionEnd) {  	ctx.LineTo (x + rd' y + height);  	ctx.Arc (x + rd' y + height - rd' rd' 90 * (Math.PI / 180)' 180 * (Math.PI / 180));  }  else {  	ctx.LineTo (x' y + height);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: if (block.SectionEnd) {  	ctx.LineTo (x + rd' y + height);  	ctx.Arc (x + rd' y + height - rd' rd' 90 * (Math.PI / 180)' 180 * (Math.PI / 180));  }  else {  	ctx.LineTo (x' y + height);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: if (block.SectionEnd) {  	ctx.LineTo (x + rd' y + height);  	ctx.Arc (x + rd' y + height - rd' rd' 90 * (Math.PI / 180)' 180 * (Math.PI / 180));  }  else {  	ctx.LineTo (x' y + height);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: if (block.SectionEnd) {  	ctx.LineTo (x + rd' y + height);  	ctx.Arc (x + rd' y + height - rd' rd' 90 * (Math.PI / 180)' 180 * (Math.PI / 180));  }  else {  	ctx.LineTo (x' y + height);  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.Arc (x + rd' y + height - rd' rd' 90 * (Math.PI / 180)' 180 * (Math.PI / 180));  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.Arc (x + rd' y + height - rd' rd' 90 * (Math.PI / 180)' 180 * (Math.PI / 180));  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.Arc (x + rd' y + height - rd' rd' 90 * (Math.PI / 180)' 180 * (Math.PI / 180));  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.Arc (x + rd' y + height - rd' rd' 90 * (Math.PI / 180)' 180 * (Math.PI / 180));  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: ctx.SetSourceColor (color.AddLight (0.1).ToCairoColor ());  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: using (Cairo.Gradient pat = new Cairo.LinearGradient (x' y' x + width' y)) {  	pat.AddColorStop (0' color.AddLight (0.21).ToCairoColor ());  	pat.AddColorStop (1' color.AddLight (0.3).ToCairoColor ());  	ctx.SetSource (pat);  	ctx.Fill ();  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: using (Cairo.Gradient pat = new Cairo.LinearGradient (x' y' x + width' y)) {  	pat.AddColorStop (0' color.AddLight (0.21).ToCairoColor ());  	pat.AddColorStop (1' color.AddLight (0.3).ToCairoColor ());  	ctx.SetSource (pat);  	ctx.Fill ();  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: pat.AddColorStop (0' color.AddLight (0.21).ToCairoColor ());  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawBlockBg,The following statement contains a magic number: pat.AddColorStop (1' color.AddLight (0.3).ToCairoColor ());  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawChangeSymbol,The following statement contains a magic number: if (ssize - 2 > lineHeight)  	ssize = lineHeight - 2;  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawChangeSymbol,The following statement contains a magic number: if (ssize - 2 > lineHeight)  	ssize = lineHeight - 2;  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawChangeSymbol,The following statement contains a magic number: ssize = lineHeight - 2;  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,DrawChangeSymbol,The following statement contains a magic number: ctx.SetSourceColor (color.AddLight (-0.2).ToCairoColor ());  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,GetSize,The following statement contains a magic number: if (diffMode) {  	// Add some spacing for the margin  	c_width += 4;  	c_height += 4;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,GetSize,The following statement contains a magic number: if (diffMode) {  	// Add some spacing for the margin  	c_width += 4;  	c_height += 4;  }  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,GetSize,The following statement contains a magic number: c_width += 4;  
Magic Number,MonoDevelop.VersionControl.Views,CellRendererDiff,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\CellRendererDiff.cs,GetSize,The following statement contains a magic number: c_height += 4;  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: main = new VBox (false' 6);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: colCommit.Spacing = 2;  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: colFile.Spacing = 2;  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: commitMessageLabelBox.SetPadding (6' 6' 6' 6);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: commitMessageLabelBox.SetPadding (6' 6' 6' 6);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: commitMessageLabelBox.SetPadding (6' 6' 6' 6);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: commitMessageLabelBox.SetPadding (6' 6' 6' 6);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: labBox.PackStart (labelCommit' true' true' 3);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: frame.HeightRequest = 75;  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: filestore.SetSortFunc (2' CompareNodes);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: colCommit.SortColumnId = 2;  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: filestore.SetSortFunc (3' CompareNodes);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: colFile.SortColumnId = 3;  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,Init,The following statement contains a magic number: filestore.SetSortColumnId (3' Gtk.SortType.Ascending);  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,CompareNodes,The following statement contains a magic number: switch (col) {  case 0:  	val = ColStatus;  	break;  case 1:  	val = ColRemoteStatus;  	break;  case 2:  	val = ColCommit;  	break;  case 3:  	val = ColPath;  	break;  }  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,CompareNodes,The following statement contains a magic number: switch (col) {  case 0:  	val = ColStatus;  	break;  case 1:  	val = ColRemoteStatus;  	break;  case 2:  	val = ColCommit;  	break;  case 3:  	val = ColPath;  	break;  }  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnOpen,The following statement contains a magic number: if (files.Length == 0)  	return;  else if (files.Length == 1) {  	TreePath[] rows = filelist.Selection.GetSelectedRows ();  	int line = -1;  	if (rows.Length == 1 && rows [0].Depth == 2)  		line = diffRenderer.GetSelectedLine (rows [0]);  	IdeApp.Workbench.OpenDocument (files [0]' line' 0);  }  else {  	AlertButton openAll = new AlertButton (GettextCatalog.GetString ("_Open All"));  	if (MessageService.AskQuestion (GettextCatalog.GetString ("Do you want to open all {0} files?"' files.Length)' AlertButton.Cancel' openAll) == openAll) {  		for (int n = 0; n < files.Length; n++)  			IdeApp.Workbench.OpenDocument (files [n]' n == 0);  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnOpen,The following statement contains a magic number: if (files.Length == 1) {  	TreePath[] rows = filelist.Selection.GetSelectedRows ();  	int line = -1;  	if (rows.Length == 1 && rows [0].Depth == 2)  		line = diffRenderer.GetSelectedLine (rows [0]);  	IdeApp.Workbench.OpenDocument (files [0]' line' 0);  }  else {  	AlertButton openAll = new AlertButton (GettextCatalog.GetString ("_Open All"));  	if (MessageService.AskQuestion (GettextCatalog.GetString ("Do you want to open all {0} files?"' files.Length)' AlertButton.Cancel' openAll) == openAll) {  		for (int n = 0; n < files.Length; n++)  			IdeApp.Workbench.OpenDocument (files [n]' n == 0);  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnOpen,The following statement contains a magic number: if (rows.Length == 1 && rows [0].Depth == 2)  	line = diffRenderer.GetSelectedLine (rows [0]);  
Magic Number,MonoDevelop.VersionControl.Views,FileTreeView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnButtonPressEvent,The following statement contains a magic number: if (!ctxMenu) {  	TreePath path;  	GetPathAtPos ((int)evnt.X' (int)evnt.Y' out path);  	if (path != null && path.Depth == 2) {  		vpos = Vadjustment.Value;  		keepPos = true;  		if (Selection.PathIsSelected (path) && Selection.GetSelectedRows ().Length == 1 && evnt.Button == 1) {  			if (evnt.Type == Gdk.EventType.TwoButtonPress && DiffLineActivated != null)  				DiffLineActivated (this' EventArgs.Empty);  			handled = true;  		}  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,FileTreeView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnButtonPressEvent,The following statement contains a magic number: if (path != null && path.Depth == 2) {  	vpos = Vadjustment.Value;  	keepPos = true;  	if (Selection.PathIsSelected (path) && Selection.GetSelectedRows ().Length == 1 && evnt.Button == 1) {  		if (evnt.Type == Gdk.EventType.TwoButtonPress && DiffLineActivated != null)  			DiffLineActivated (this' EventArgs.Empty);  		handled = true;  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,FileTreeView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,OnMotionNotifyEvent,The following statement contains a magic number: if (path != null && path.Depth == 2) {  	CursorLocation = new Gdk.Point ((int)evnt.X' (int)evnt.Y);  	//FIXME: we should optimize these draws  	QueueDraw ();  }  else if (CursorLocation.HasValue) {  	CursorLocation = null;  	QueueDraw ();  }  
Magic Number,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The following statement contains a magic number: if (currentFile != null)  	currentFile.BodyRegion = new DomRegion (currentFile.BodyRegion.BeginLine' currentFile.BodyRegion.BeginColumn' Math.Max (1' linenum - 2)' int.MaxValue);  
Magic Number,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The following statement contains a magic number: currentFile.BodyRegion = new DomRegion (currentFile.BodyRegion.BeginLine' currentFile.BodyRegion.BeginColumn' Math.Max (1' linenum - 2)' int.MaxValue);  
Magic Number,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The following statement contains a magic number: if (currentRegion != null)  	currentRegion.BodyRegion = new DomRegion (currentRegion.BodyRegion.BeginLine' currentRegion.BodyRegion.BeginColumn' Math.Max (1' linenum - 2)' int.MaxValue);  
Magic Number,MonoDevelop.VersionControl.Views,DiffParser,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffParser.cs,Parse,The following statement contains a magic number: currentRegion.BodyRegion = new DomRegion (currentRegion.BodyRegion.BeginLine' currentRegion.BodyRegion.BeginColumn' Math.Max (1' linenum - 2)' int.MaxValue);  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: while (curY < editor.Allocation.Bottom && line <= editor.LineCount) {  	Annotation ann = line <= overview.annotations.Count ? overview.annotations [line - 1] : null;  	double curStart = curY;  	do {  		JumpOverFoldings (ref line);  		line++;  	}  	while (curY < editor.Allocation.Bottom && line <= overview.annotations.Count && ann != null && overview.annotations [line - 1] != null && overview.annotations [line - 1].Revision == ann.Revision);  	curY = Editor.LineToY (line) - Editor.VAdjustment.Value;  	if (overview.highlightAnnotation != null) {  		if (ann != null && overview.highlightAnnotation.Revision == ann.Revision && curStart <= overview.highlightPositon && overview.highlightPositon < curY) {  		}  		else {  			cr.Rectangle (Editor.TextViewMargin.XOffset' curStart + cr.LineWidth' Editor.Allocation.Width - Editor.TextViewMargin.XOffset' curY - curStart - cr.LineWidth);  			cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.1);  			cr.Fill ();  		}  	}  	if (ann != null) {  		cr.MoveTo (Editor.TextViewMargin.XOffset' curY + 0.5);  		cr.LineTo (Editor.Allocation.Width' curY + 0.5);  		cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2);  		cr.Stroke ();  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: while (curY < editor.Allocation.Bottom && line <= editor.LineCount) {  	Annotation ann = line <= overview.annotations.Count ? overview.annotations [line - 1] : null;  	double curStart = curY;  	do {  		JumpOverFoldings (ref line);  		line++;  	}  	while (curY < editor.Allocation.Bottom && line <= overview.annotations.Count && ann != null && overview.annotations [line - 1] != null && overview.annotations [line - 1].Revision == ann.Revision);  	curY = Editor.LineToY (line) - Editor.VAdjustment.Value;  	if (overview.highlightAnnotation != null) {  		if (ann != null && overview.highlightAnnotation.Revision == ann.Revision && curStart <= overview.highlightPositon && overview.highlightPositon < curY) {  		}  		else {  			cr.Rectangle (Editor.TextViewMargin.XOffset' curStart + cr.LineWidth' Editor.Allocation.Width - Editor.TextViewMargin.XOffset' curY - curStart - cr.LineWidth);  			cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.1);  			cr.Fill ();  		}  	}  	if (ann != null) {  		cr.MoveTo (Editor.TextViewMargin.XOffset' curY + 0.5);  		cr.LineTo (Editor.Allocation.Width' curY + 0.5);  		cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2);  		cr.Stroke ();  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: while (curY < editor.Allocation.Bottom && line <= editor.LineCount) {  	Annotation ann = line <= overview.annotations.Count ? overview.annotations [line - 1] : null;  	double curStart = curY;  	do {  		JumpOverFoldings (ref line);  		line++;  	}  	while (curY < editor.Allocation.Bottom && line <= overview.annotations.Count && ann != null && overview.annotations [line - 1] != null && overview.annotations [line - 1].Revision == ann.Revision);  	curY = Editor.LineToY (line) - Editor.VAdjustment.Value;  	if (overview.highlightAnnotation != null) {  		if (ann != null && overview.highlightAnnotation.Revision == ann.Revision && curStart <= overview.highlightPositon && overview.highlightPositon < curY) {  		}  		else {  			cr.Rectangle (Editor.TextViewMargin.XOffset' curStart + cr.LineWidth' Editor.Allocation.Width - Editor.TextViewMargin.XOffset' curY - curStart - cr.LineWidth);  			cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.1);  			cr.Fill ();  		}  	}  	if (ann != null) {  		cr.MoveTo (Editor.TextViewMargin.XOffset' curY + 0.5);  		cr.LineTo (Editor.Allocation.Width' curY + 0.5);  		cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2);  		cr.Stroke ();  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: while (curY < editor.Allocation.Bottom && line <= editor.LineCount) {  	Annotation ann = line <= overview.annotations.Count ? overview.annotations [line - 1] : null;  	double curStart = curY;  	do {  		JumpOverFoldings (ref line);  		line++;  	}  	while (curY < editor.Allocation.Bottom && line <= overview.annotations.Count && ann != null && overview.annotations [line - 1] != null && overview.annotations [line - 1].Revision == ann.Revision);  	curY = Editor.LineToY (line) - Editor.VAdjustment.Value;  	if (overview.highlightAnnotation != null) {  		if (ann != null && overview.highlightAnnotation.Revision == ann.Revision && curStart <= overview.highlightPositon && overview.highlightPositon < curY) {  		}  		else {  			cr.Rectangle (Editor.TextViewMargin.XOffset' curStart + cr.LineWidth' Editor.Allocation.Width - Editor.TextViewMargin.XOffset' curY - curStart - cr.LineWidth);  			cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.1);  			cr.Fill ();  		}  	}  	if (ann != null) {  		cr.MoveTo (Editor.TextViewMargin.XOffset' curY + 0.5);  		cr.LineTo (Editor.Allocation.Width' curY + 0.5);  		cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2);  		cr.Stroke ();  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: if (overview.highlightAnnotation != null) {  	if (ann != null && overview.highlightAnnotation.Revision == ann.Revision && curStart <= overview.highlightPositon && overview.highlightPositon < curY) {  	}  	else {  		cr.Rectangle (Editor.TextViewMargin.XOffset' curStart + cr.LineWidth' Editor.Allocation.Width - Editor.TextViewMargin.XOffset' curY - curStart - cr.LineWidth);  		cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.1);  		cr.Fill ();  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: if (ann != null && overview.highlightAnnotation.Revision == ann.Revision && curStart <= overview.highlightPositon && overview.highlightPositon < curY) {  }  else {  	cr.Rectangle (Editor.TextViewMargin.XOffset' curStart + cr.LineWidth' Editor.Allocation.Width - Editor.TextViewMargin.XOffset' curY - curStart - cr.LineWidth);  	cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.1);  	cr.Fill ();  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.1);  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: if (ann != null) {  	cr.MoveTo (Editor.TextViewMargin.XOffset' curY + 0.5);  	cr.LineTo (Editor.Allocation.Width' curY + 0.5);  	cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2);  	cr.Stroke ();  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: if (ann != null) {  	cr.MoveTo (Editor.TextViewMargin.XOffset' curY + 0.5);  	cr.LineTo (Editor.Allocation.Width' curY + 0.5);  	cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2);  	cr.Stroke ();  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: if (ann != null) {  	cr.MoveTo (Editor.TextViewMargin.XOffset' curY + 0.5);  	cr.LineTo (Editor.Allocation.Width' curY + 0.5);  	cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2);  	cr.Stroke ();  }  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: cr.MoveTo (Editor.TextViewMargin.XOffset' curY + 0.5);  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: cr.LineTo (Editor.Allocation.Width' curY + 0.5);  
Magic Number,MonoDevelop.VersionControl.Views,BlameWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\BlameWidget.cs,HandleEditorExposeEvent,The following statement contains a magic number: cr.SetSourceRGBA (color.Red / (double)ushort.MaxValue' color.Green / (double)ushort.MaxValue' color.Blue / (double)ushort.MaxValue' 0.2);  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnSizeRequested,The following statement contains a magic number: if (Pixbuf != null) {  	width += Pixbuf.Width + pixbufSpacing * 2;  	height = System.Math.Max (height' Pixbuf.Height);  }  else {  	height = System.Math.Max (height' defaultIconHeight);  }  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnSizeRequested,The following statement contains a magic number: width += Pixbuf.Width + pixbufSpacing * 2;  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height = height + ySpacing * 2;  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintBox (Style' args.Window' state' ShadowType.None' args.Area' this' "button"' Allocation.X - padding' Allocation.Y - padding' Allocation.Width + padding * 2' Allocation.Height + padding * 2);  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintBox (Style' args.Window' state' ShadowType.None' args.Area' this' "button"' Allocation.X - padding' Allocation.Y - padding' Allocation.Width + padding * 2' Allocation.Height + padding * 2);  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: if (Pixbuf != null) {  	win.DrawPixbuf (this.Style.BaseGC (StateType.Normal)' Pixbuf' 0' 0' xPos + pixbufSpacing' Allocation.Y + (Allocation.Height - Pixbuf.Height) / 2' Pixbuf.Width' Pixbuf.Height' Gdk.RgbDither.None' 0' 0);  	xPos += Pixbuf.Width + pixbufSpacing * 2;  }  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: if (Pixbuf != null) {  	win.DrawPixbuf (this.Style.BaseGC (StateType.Normal)' Pixbuf' 0' 0' xPos + pixbufSpacing' Allocation.Y + (Allocation.Height - Pixbuf.Height) / 2' Pixbuf.Width' Pixbuf.Height' Gdk.RgbDither.None' 0' 0);  	xPos += Pixbuf.Width + pixbufSpacing * 2;  }  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: win.DrawPixbuf (this.Style.BaseGC (StateType.Normal)' Pixbuf' 0' 0' xPos + pixbufSpacing' Allocation.Y + (Allocation.Height - Pixbuf.Height) / 2' Pixbuf.Width' Pixbuf.Height' Gdk.RgbDither.None' 0' 0);  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: xPos += Pixbuf.Width + pixbufSpacing * 2;  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintVline (this.Style' win' state' args.Area' this' ""' Allocation.Y + 3' Allocation.Bottom - 4' arrowXPos - 4);  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintVline (this.Style' win' state' args.Area' this' ""' Allocation.Y + 3' Allocation.Bottom - 4' arrowXPos - 4);  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintVline (this.Style' win' state' args.Area' this' ""' Allocation.Y + 3' Allocation.Bottom - 4' arrowXPos - 4);  
Magic Number,MonoDevelop.VersionControl.Views,DropDownBox,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintArrow (this.Style' win' state' ShadowType.None' args.Area' this' ""' ArrowType.Down' true' arrowXPos' Allocation.Y' Allocation.Height / 2' Allocation.Height);  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,ChangeSetView,The following statement contains a magic number: colCommit.Spacing = 2;  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,ChangeSetView,The following statement contains a magic number: colFile.Spacing = 2;  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,ChangeSetView,The following statement contains a magic number: filestore.SetSortFunc (2' CompareNodes);  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,ChangeSetView,The following statement contains a magic number: colFile.SortColumnId = 2;  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,ChangeSetView,The following statement contains a magic number: filestore.SetSortColumnId (2' Gtk.SortType.Ascending);  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,CompareNodes,The following statement contains a magic number: switch (col) {  case 0:  	val = ColStatus;  	break;  case 1:  	val = ColCommit;  	break;  case 2:  	val = ColPath;  	break;  }  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,OnOpen,The following statement contains a magic number: if (files.Length == 0)  	return;  else if (files.Length == 1) {  	TreePath[] rows = filelist.Selection.GetSelectedRows ();  	int line = -1;  	if (rows.Length == 1 && rows [0].Depth == 2)  		line = diffRenderer.GetSelectedLine (rows [0]);  	IdeApp.Workbench.OpenDocument (files [0]' line' 0);  }  else {  	AlertButton openAll = new AlertButton (GettextCatalog.GetString ("_Open All"));  	if (MessageService.AskQuestion (GettextCatalog.GetString ("Do you want to open all {0} files?"' files.Length)' AlertButton.Cancel' openAll) == openAll) {  		for (int n = 0; n < files.Length; n++)  			IdeApp.Workbench.OpenDocument (files [n]' n == 0);  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,OnOpen,The following statement contains a magic number: if (files.Length == 1) {  	TreePath[] rows = filelist.Selection.GetSelectedRows ();  	int line = -1;  	if (rows.Length == 1 && rows [0].Depth == 2)  		line = diffRenderer.GetSelectedLine (rows [0]);  	IdeApp.Workbench.OpenDocument (files [0]' line' 0);  }  else {  	AlertButton openAll = new AlertButton (GettextCatalog.GetString ("_Open All"));  	if (MessageService.AskQuestion (GettextCatalog.GetString ("Do you want to open all {0} files?"' files.Length)' AlertButton.Cancel' openAll) == openAll) {  		for (int n = 0; n < files.Length; n++)  			IdeApp.Workbench.OpenDocument (files [n]' n == 0);  	}  }  
Magic Number,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,OnOpen,The following statement contains a magic number: if (rows.Length == 1 && rows [0].Depth == 2)  	line = diffRenderer.GetSelectedLine (rows [0]);  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateComponents,The following statement contains a magic number: this.editors [2].Document.ReadOnly = true;  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,UpdateDiff,The following statement contains a magic number: RightDiff = new List<Hunk> (editors [2].Document.Diff (MainEditor.Document));  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: editors [2].Document.Text = "";  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: for (int i = 0; i < currentConflicts.Count; i++) {  	Conflict conflict = currentConflicts [i];  	string above = MainEditor.Document.GetTextBetween (curOffset' conflict.StartSegment.Offset);  	editors [0].Insert (editors [0].Document.TextLength' above);  	int leftA = editors [0].Document.LineCount;  	editors [0].Insert (editors [0].Document.TextLength' MainEditor.Document.GetTextAt (conflict.MySegment));  	int leftB = editors [0].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' above);  	int rightA = editors [2].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' MainEditor.Document.GetTextAt (conflict.TheirSegment));  	int rightB = editors [2].Document.LineCount;  	int middleA = MainEditor.Document.OffsetToLineNumber (conflict.StartSegment.Offset);  	int middleB = MainEditor.Document.OffsetToLineNumber (conflict.EndSegment.EndOffset);  	leftConflicts.Add (new Hunk (leftA' middleA' leftB - leftA' middleB - middleA));  	rightConflicts.Add (new Hunk (rightA' middleA' rightB - rightA' middleB - middleA));  }  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: for (int i = 0; i < currentConflicts.Count; i++) {  	Conflict conflict = currentConflicts [i];  	string above = MainEditor.Document.GetTextBetween (curOffset' conflict.StartSegment.Offset);  	editors [0].Insert (editors [0].Document.TextLength' above);  	int leftA = editors [0].Document.LineCount;  	editors [0].Insert (editors [0].Document.TextLength' MainEditor.Document.GetTextAt (conflict.MySegment));  	int leftB = editors [0].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' above);  	int rightA = editors [2].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' MainEditor.Document.GetTextAt (conflict.TheirSegment));  	int rightB = editors [2].Document.LineCount;  	int middleA = MainEditor.Document.OffsetToLineNumber (conflict.StartSegment.Offset);  	int middleB = MainEditor.Document.OffsetToLineNumber (conflict.EndSegment.EndOffset);  	leftConflicts.Add (new Hunk (leftA' middleA' leftB - leftA' middleB - middleA));  	rightConflicts.Add (new Hunk (rightA' middleA' rightB - rightA' middleB - middleA));  }  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: for (int i = 0; i < currentConflicts.Count; i++) {  	Conflict conflict = currentConflicts [i];  	string above = MainEditor.Document.GetTextBetween (curOffset' conflict.StartSegment.Offset);  	editors [0].Insert (editors [0].Document.TextLength' above);  	int leftA = editors [0].Document.LineCount;  	editors [0].Insert (editors [0].Document.TextLength' MainEditor.Document.GetTextAt (conflict.MySegment));  	int leftB = editors [0].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' above);  	int rightA = editors [2].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' MainEditor.Document.GetTextAt (conflict.TheirSegment));  	int rightB = editors [2].Document.LineCount;  	int middleA = MainEditor.Document.OffsetToLineNumber (conflict.StartSegment.Offset);  	int middleB = MainEditor.Document.OffsetToLineNumber (conflict.EndSegment.EndOffset);  	leftConflicts.Add (new Hunk (leftA' middleA' leftB - leftA' middleB - middleA));  	rightConflicts.Add (new Hunk (rightA' middleA' rightB - rightA' middleB - middleA));  }  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: for (int i = 0; i < currentConflicts.Count; i++) {  	Conflict conflict = currentConflicts [i];  	string above = MainEditor.Document.GetTextBetween (curOffset' conflict.StartSegment.Offset);  	editors [0].Insert (editors [0].Document.TextLength' above);  	int leftA = editors [0].Document.LineCount;  	editors [0].Insert (editors [0].Document.TextLength' MainEditor.Document.GetTextAt (conflict.MySegment));  	int leftB = editors [0].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' above);  	int rightA = editors [2].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' MainEditor.Document.GetTextAt (conflict.TheirSegment));  	int rightB = editors [2].Document.LineCount;  	int middleA = MainEditor.Document.OffsetToLineNumber (conflict.StartSegment.Offset);  	int middleB = MainEditor.Document.OffsetToLineNumber (conflict.EndSegment.EndOffset);  	leftConflicts.Add (new Hunk (leftA' middleA' leftB - leftA' middleB - middleA));  	rightConflicts.Add (new Hunk (rightA' middleA' rightB - rightA' middleB - middleA));  }  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: for (int i = 0; i < currentConflicts.Count; i++) {  	Conflict conflict = currentConflicts [i];  	string above = MainEditor.Document.GetTextBetween (curOffset' conflict.StartSegment.Offset);  	editors [0].Insert (editors [0].Document.TextLength' above);  	int leftA = editors [0].Document.LineCount;  	editors [0].Insert (editors [0].Document.TextLength' MainEditor.Document.GetTextAt (conflict.MySegment));  	int leftB = editors [0].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' above);  	int rightA = editors [2].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' MainEditor.Document.GetTextAt (conflict.TheirSegment));  	int rightB = editors [2].Document.LineCount;  	int middleA = MainEditor.Document.OffsetToLineNumber (conflict.StartSegment.Offset);  	int middleB = MainEditor.Document.OffsetToLineNumber (conflict.EndSegment.EndOffset);  	leftConflicts.Add (new Hunk (leftA' middleA' leftB - leftA' middleB - middleA));  	rightConflicts.Add (new Hunk (rightA' middleA' rightB - rightA' middleB - middleA));  }  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: for (int i = 0; i < currentConflicts.Count; i++) {  	Conflict conflict = currentConflicts [i];  	string above = MainEditor.Document.GetTextBetween (curOffset' conflict.StartSegment.Offset);  	editors [0].Insert (editors [0].Document.TextLength' above);  	int leftA = editors [0].Document.LineCount;  	editors [0].Insert (editors [0].Document.TextLength' MainEditor.Document.GetTextAt (conflict.MySegment));  	int leftB = editors [0].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' above);  	int rightA = editors [2].Document.LineCount;  	editors [2].Insert (editors [2].Document.TextLength' MainEditor.Document.GetTextAt (conflict.TheirSegment));  	int rightB = editors [2].Document.LineCount;  	int middleA = MainEditor.Document.OffsetToLineNumber (conflict.StartSegment.Offset);  	int middleB = MainEditor.Document.OffsetToLineNumber (conflict.EndSegment.EndOffset);  	leftConflicts.Add (new Hunk (leftA' middleA' leftB - leftA' middleB - middleA));  	rightConflicts.Add (new Hunk (rightA' middleA' rightB - rightA' middleB - middleA));  }  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: editors [2].Insert (editors [2].Document.TextLength' above);  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: editors [2].Insert (editors [2].Document.TextLength' above);  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: editors [2].Insert (editors [2].Document.TextLength' MainEditor.Document.GetTextAt (conflict.TheirSegment));  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: editors [2].Insert (editors [2].Document.TextLength' MainEditor.Document.GetTextAt (conflict.TheirSegment));  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: editors [2].Insert (editors [2].Document.TextLength' lastPart);  
Magic Number,MonoDevelop.VersionControl.Views,MergeWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\MergeWidget.cs,CreateDiff,The following statement contains a magic number: editors [2].Insert (editors [2].Document.TextLength' lastPart);  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: if (editors.Length == 2) {  	editors [0].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' true);  	};  	editors [1].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' false);  	};  	rightDiffScrollBar = new DiffScrollbar (this' editors [1]' true' true);  	Add (rightDiffScrollBar);  }  else {  	editors [0].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' true);  	};  	editors [1].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' false);  		PaintEditorOverlay (myEditor' args' RightDiff' false);  	};  	editors [2].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' RightDiff' true);  	};  	rightDiffScrollBar = new DiffScrollbar (this' editors [2]' false' false);  	Add (rightDiffScrollBar);  }  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: if (editors.Length == 2) {  	editors [0].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' true);  	};  	editors [1].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' false);  	};  	rightDiffScrollBar = new DiffScrollbar (this' editors [1]' true' true);  	Add (rightDiffScrollBar);  }  else {  	editors [0].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' true);  	};  	editors [1].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' false);  		PaintEditorOverlay (myEditor' args' RightDiff' false);  	};  	editors [2].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' RightDiff' true);  	};  	rightDiffScrollBar = new DiffScrollbar (this' editors [2]' false' false);  	Add (rightDiffScrollBar);  }  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: if (editors.Length == 2) {  	editors [0].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' true);  	};  	editors [1].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' false);  	};  	rightDiffScrollBar = new DiffScrollbar (this' editors [1]' true' true);  	Add (rightDiffScrollBar);  }  else {  	editors [0].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' true);  	};  	editors [1].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' LeftDiff' false);  		PaintEditorOverlay (myEditor' args' RightDiff' false);  	};  	editors [2].Painted += delegate (object sender' PaintEventArgs args) {  		var myEditor = (TextArea)sender;  		PaintEditorOverlay (myEditor' args' RightDiff' true);  	};  	rightDiffScrollBar = new DiffScrollbar (this' editors [2]' false' false);  	Add (rightDiffScrollBar);  }  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: editors [2].Painted += delegate (object sender' PaintEventArgs args) {  	var myEditor = (TextArea)sender;  	PaintEditorOverlay (myEditor' args' RightDiff' true);  };  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: rightDiffScrollBar = new DiffScrollbar (this' editors [2]' false' false);  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: if (middleAreas.Length <= 0 || middleAreas.Length > 2)  	throw new NotSupportedException ();  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: if (middleAreas.Length == 2) {  	middleAreas [1] = new MiddleArea (this' editors [2]' MainEditor' false);  	Add (middleAreas [1]);  }  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: if (middleAreas.Length == 2) {  	middleAreas [1] = new MiddleArea (this' editors [2]' MainEditor' false);  	Add (middleAreas [1]);  }  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,Intialize,The following statement contains a magic number: middleAreas [1] = new MiddleArea (this' editors [2]' MainEditor' false);  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The following statement contains a magic number: if (headerWidgets != null)  	headerSize = System.Math.Max (headerWidgets [0].SizeRequest ().Height' 16);  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,OnSizeAllocated,The following statement contains a magic number: headerSize = System.Math.Max (headerWidgets [0].SizeRequest ().Height' 16);  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,PaintEditorOverlay,The following statement contains a magic number: foreach (var hunk in diff) {  	double y1 = editor.LineToY (paintRemoveSide ? hunk.RemoveStart : hunk.InsertStart) - editor.VAdjustment.Value;  	double y2 = editor.LineToY (paintRemoveSide ? hunk.RemoveStart + hunk.Removed : hunk.InsertStart + hunk.Inserted) - editor.VAdjustment.Value;  	if (y1 == y2)  		y2 = y1 + 1;  	cr.Rectangle (0' y1' editor.Allocation.Width' y2 - y1);  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' false' 0.15));  	cr.Fill ();  	var paths = GetDiffPaths (diff' editors [0]' hunk);  	cr.Save ();  	cr.Translate (-editor.HAdjustment.Value + editor.TextViewMargin.XOffset' -editor.VAdjustment.Value);  	foreach (var rect in (paintRemoveSide ? paths.Item1 : paths.Item2)) {  		cr.Rectangle (rect);  	}  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' false' 0.3));  	cr.Fill ();  	cr.Restore ();  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' true' 0.15));  	cr.MoveTo (0' y1);  	cr.LineTo (editor.Allocation.Width' y1);  	cr.Stroke ();  	cr.MoveTo (0' y2);  	cr.LineTo (editor.Allocation.Width' y2);  	cr.Stroke ();  }  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,PaintEditorOverlay,The following statement contains a magic number: foreach (var hunk in diff) {  	double y1 = editor.LineToY (paintRemoveSide ? hunk.RemoveStart : hunk.InsertStart) - editor.VAdjustment.Value;  	double y2 = editor.LineToY (paintRemoveSide ? hunk.RemoveStart + hunk.Removed : hunk.InsertStart + hunk.Inserted) - editor.VAdjustment.Value;  	if (y1 == y2)  		y2 = y1 + 1;  	cr.Rectangle (0' y1' editor.Allocation.Width' y2 - y1);  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' false' 0.15));  	cr.Fill ();  	var paths = GetDiffPaths (diff' editors [0]' hunk);  	cr.Save ();  	cr.Translate (-editor.HAdjustment.Value + editor.TextViewMargin.XOffset' -editor.VAdjustment.Value);  	foreach (var rect in (paintRemoveSide ? paths.Item1 : paths.Item2)) {  		cr.Rectangle (rect);  	}  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' false' 0.3));  	cr.Fill ();  	cr.Restore ();  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' true' 0.15));  	cr.MoveTo (0' y1);  	cr.LineTo (editor.Allocation.Width' y1);  	cr.Stroke ();  	cr.MoveTo (0' y2);  	cr.LineTo (editor.Allocation.Width' y2);  	cr.Stroke ();  }  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,PaintEditorOverlay,The following statement contains a magic number: foreach (var hunk in diff) {  	double y1 = editor.LineToY (paintRemoveSide ? hunk.RemoveStart : hunk.InsertStart) - editor.VAdjustment.Value;  	double y2 = editor.LineToY (paintRemoveSide ? hunk.RemoveStart + hunk.Removed : hunk.InsertStart + hunk.Inserted) - editor.VAdjustment.Value;  	if (y1 == y2)  		y2 = y1 + 1;  	cr.Rectangle (0' y1' editor.Allocation.Width' y2 - y1);  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' false' 0.15));  	cr.Fill ();  	var paths = GetDiffPaths (diff' editors [0]' hunk);  	cr.Save ();  	cr.Translate (-editor.HAdjustment.Value + editor.TextViewMargin.XOffset' -editor.VAdjustment.Value);  	foreach (var rect in (paintRemoveSide ? paths.Item1 : paths.Item2)) {  		cr.Rectangle (rect);  	}  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' false' 0.3));  	cr.Fill ();  	cr.Restore ();  	cr.SetSourceColor (GetColor (hunk' paintRemoveSide' true' 0.15));  	cr.MoveTo (0' y1);  	cr.LineTo (editor.Allocation.Width' y1);  	cr.Stroke ();  	cr.MoveTo (0' y2);  	cr.LineTo (editor.Allocation.Width' y2);  	cr.Stroke ();  }  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,PaintEditorOverlay,The following statement contains a magic number: cr.SetSourceColor (GetColor (hunk' paintRemoveSide' false' 0.15));  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,PaintEditorOverlay,The following statement contains a magic number: cr.SetSourceColor (GetColor (hunk' paintRemoveSide' false' 0.3));  
Magic Number,MonoDevelop.VersionControl.Views,EditorCompareWidgetBase,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\EditorCompareWidgetBase.cs,PaintEditorOverlay,The following statement contains a magic number: cr.SetSourceColor (GetColor (hunk' paintRemoveSide' true' 0.15));  
Magic Number,MonoDevelop.VersionControl.Views,DiffView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffView.cs,Deselected,The following statement contains a magic number: if (sourceEditor != null) {  	sourceEditor.TextEditor.Caret.Location = ComparisonWidget.OriginalEditor.Caret.Location;  	int line = GetLineInCenter (ComparisonWidget.OriginalEditor);  	if (Math.Abs (GetLineInCenter (sourceEditor.TextEditor) - line) > 2)  		sourceEditor.TextEditor.CenterTo (line' 1);  }  
Magic Number,MonoDevelop.VersionControl.Views,DiffView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\DiffView.cs,Deselected,The following statement contains a magic number: if (Math.Abs (GetLineInCenter (sourceEditor.TextEditor) - line) > 2)  	sourceEditor.TextEditor.CenterTo (line' 1);  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: separator.HeightRequest = 4;  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: searchEntry.WidthRequest = 200;  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: colRevMessage.MinWidth = 350;  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: colChangedFile.AddAttribute (crp' "pixbuf"' 2);  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: colChangedFile.AddAttribute (crt' "text"' 3);  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: tb.ShadowSize = 4;  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: tb.SetPadding (8' 8' 8' 8);  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: tb.SetPadding (8' 8' 8' 8);  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: tb.SetPadding (8' 8' 8' 8);  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,LogWidget,The following statement contains a magic number: tb.SetPadding (8' 8' 8' 8);  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,OnRealized,The following statement contains a magic number: c.L *= 0.8;  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,HandleSearchEntryFilterChanged,The following statement contains a magic number: GLib.Timeout.Add (100' delegate {  	filtering = false;  	currentFilter = searchEntry.Entry.Text;  	UpdateHistory ();  	return false;  });  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,OnSizeAllocated,The following statement contains a magic number: if (old.Width != allocation.Width || old.Height != allocation.Height) {  	hpaned1.Position = allocation.Width - 380;  	vpaned1.Position = allocation.Height / 2;  }  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,OnSizeAllocated,The following statement contains a magic number: if (old.Width != allocation.Width || old.Height != allocation.Height) {  	hpaned1.Position = allocation.Width - 380;  	vpaned1.Position = allocation.Height / 2;  }  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,OnSizeAllocated,The following statement contains a magic number: hpaned1.Position = allocation.Width - 380;  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,OnSizeAllocated,The following statement contains a magic number: vpaned1.Position = allocation.Height / 2;  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,TreeSelectionChanged,The following statement contains a magic number: if (!string.IsNullOrEmpty (d.Email)) {  	imageUser.Show ();  	imageUser.LoadUserIcon (d.Email' 32);  }  else  	imageUser.Hide ();  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,TreeSelectionChanged,The following statement contains a magic number: imageUser.LoadUserIcon (d.Email' 32);  
Magic Number,MonoDevelop.VersionControl.Views,LogWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\LogWidget.cs,TreeSelectionChanged,The following statement contains a magic number: if (rev.Length > 15) {  	currentRevisionShortened = true;  	rev = d.ShortName;  }  else  	currentRevisionShortened = false;  
Magic Number,MonoDevelop.VersionControl.Views,VersionControlDocumentInfo,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\VersionControlDocumentInfo.cs,RunAfterUpdate,The following statement contains a magic number: while (!isUpdated)  	Thread.Sleep (10);  
Magic Number,MonoDevelop.VersionControl.Views,VersionControlDocumentInfo,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\VersionControlDocumentInfo.cs,RunAfterUpdate,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,CommitDialog,The following statement contains a magic number: colStatus.Spacing = 2;  
Magic Number,MonoDevelop.VersionControl.Dialogs,CommitDialog,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitDialog.cs,OnCommitToggledHandler,The following statement contains a magic number: store.SetValue (pos' 3' active);  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: using (StringReader sr = new StringReader (diffContent)) {  	string line;  	StringBuilder content = new StringBuilder ();  	string fileName = null;  	string pathRoot = null;  	while ((line = sr.ReadLine ()) != null) {  		if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  			line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  			content.Append (line).Append ('\n');  		}  		else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  			content.Append (line).Append ('\n');  		}  		else {  			if (fileName != null) {  				list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  				fileName = null;  			}  			fileName = line.Substring (6).Trim ();  			fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  			// svn returns paths using unix separators  			FilePath fp = fileName;  			pathRoot = null;  			if (fp.IsAbsolute) {  				if (fp == basePath)  					pathRoot = fp.ParentDirectory;  				else if (fp.IsChildPathOf (basePath))  					pathRoot = basePath;  				if (pathRoot != null) {  					pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  					pathRoot += '/';  				}  			}  			else {  				fp = fp.ToAbsolute (basePath);  			}  			fileName = fp;  			content = new StringBuilder ();  			line = sr.ReadLine ();  			// "===" Separator  			// Filter out files not in the provided path list  			if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  				fileName = null;  		}  	}  	if (fileName != null) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  	}  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: using (StringReader sr = new StringReader (diffContent)) {  	string line;  	StringBuilder content = new StringBuilder ();  	string fileName = null;  	string pathRoot = null;  	while ((line = sr.ReadLine ()) != null) {  		if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  			line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  			content.Append (line).Append ('\n');  		}  		else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  			content.Append (line).Append ('\n');  		}  		else {  			if (fileName != null) {  				list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  				fileName = null;  			}  			fileName = line.Substring (6).Trim ();  			fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  			// svn returns paths using unix separators  			FilePath fp = fileName;  			pathRoot = null;  			if (fp.IsAbsolute) {  				if (fp == basePath)  					pathRoot = fp.ParentDirectory;  				else if (fp.IsChildPathOf (basePath))  					pathRoot = basePath;  				if (pathRoot != null) {  					pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  					pathRoot += '/';  				}  			}  			else {  				fp = fp.ToAbsolute (basePath);  			}  			fileName = fp;  			content = new StringBuilder ();  			line = sr.ReadLine ();  			// "===" Separator  			// Filter out files not in the provided path list  			if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  				fileName = null;  		}  	}  	if (fileName != null) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  	}  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: using (StringReader sr = new StringReader (diffContent)) {  	string line;  	StringBuilder content = new StringBuilder ();  	string fileName = null;  	string pathRoot = null;  	while ((line = sr.ReadLine ()) != null) {  		if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  			line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  			content.Append (line).Append ('\n');  		}  		else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  			content.Append (line).Append ('\n');  		}  		else {  			if (fileName != null) {  				list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  				fileName = null;  			}  			fileName = line.Substring (6).Trim ();  			fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  			// svn returns paths using unix separators  			FilePath fp = fileName;  			pathRoot = null;  			if (fp.IsAbsolute) {  				if (fp == basePath)  					pathRoot = fp.ParentDirectory;  				else if (fp.IsChildPathOf (basePath))  					pathRoot = basePath;  				if (pathRoot != null) {  					pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  					pathRoot += '/';  				}  			}  			else {  				fp = fp.ToAbsolute (basePath);  			}  			fileName = fp;  			content = new StringBuilder ();  			line = sr.ReadLine ();  			// "===" Separator  			// Filter out files not in the provided path list  			if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  				fileName = null;  		}  	}  	if (fileName != null) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  	}  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  		line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  		content.Append (line).Append ('\n');  	}  	else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  		content.Append (line).Append ('\n');  	}  	else {  		if (fileName != null) {  			list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  			fileName = null;  		}  		fileName = line.Substring (6).Trim ();  		fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  		// svn returns paths using unix separators  		FilePath fp = fileName;  		pathRoot = null;  		if (fp.IsAbsolute) {  			if (fp == basePath)  				pathRoot = fp.ParentDirectory;  			else if (fp.IsChildPathOf (basePath))  				pathRoot = basePath;  			if (pathRoot != null) {  				pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  				pathRoot += '/';  			}  		}  		else {  			fp = fp.ToAbsolute (basePath);  		}  		fileName = fp;  		content = new StringBuilder ();  		line = sr.ReadLine ();  		// "===" Separator  		// Filter out files not in the provided path list  		if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  			fileName = null;  	}  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  		line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  		content.Append (line).Append ('\n');  	}  	else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  		content.Append (line).Append ('\n');  	}  	else {  		if (fileName != null) {  			list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  			fileName = null;  		}  		fileName = line.Substring (6).Trim ();  		fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  		// svn returns paths using unix separators  		FilePath fp = fileName;  		pathRoot = null;  		if (fp.IsAbsolute) {  			if (fp == basePath)  				pathRoot = fp.ParentDirectory;  			else if (fp.IsChildPathOf (basePath))  				pathRoot = basePath;  			if (pathRoot != null) {  				pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  				pathRoot += '/';  			}  		}  		else {  			fp = fp.ToAbsolute (basePath);  		}  		fileName = fp;  		content = new StringBuilder ();  		line = sr.ReadLine ();  		// "===" Separator  		// Filter out files not in the provided path list  		if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  			fileName = null;  	}  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  		line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  		content.Append (line).Append ('\n');  	}  	else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  		content.Append (line).Append ('\n');  	}  	else {  		if (fileName != null) {  			list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  			fileName = null;  		}  		fileName = line.Substring (6).Trim ();  		fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  		// svn returns paths using unix separators  		FilePath fp = fileName;  		pathRoot = null;  		if (fp.IsAbsolute) {  			if (fp == basePath)  				pathRoot = fp.ParentDirectory;  			else if (fp.IsChildPathOf (basePath))  				pathRoot = basePath;  			if (pathRoot != null) {  				pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  				pathRoot += '/';  			}  		}  		else {  			fp = fp.ToAbsolute (basePath);  		}  		fileName = fp;  		content = new StringBuilder ();  		line = sr.ReadLine ();  		// "===" Separator  		// Filter out files not in the provided path list  		if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  			fileName = null;  	}  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  	line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  	content.Append (line).Append ('\n');  }  else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  	content.Append (line).Append ('\n');  }  else {  	if (fileName != null) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  		fileName = null;  	}  	fileName = line.Substring (6).Trim ();  	fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  	// svn returns paths using unix separators  	FilePath fp = fileName;  	pathRoot = null;  	if (fp.IsAbsolute) {  		if (fp == basePath)  			pathRoot = fp.ParentDirectory;  		else if (fp.IsChildPathOf (basePath))  			pathRoot = basePath;  		if (pathRoot != null) {  			pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  			pathRoot += '/';  		}  	}  	else {  		fp = fp.ToAbsolute (basePath);  	}  	fileName = fp;  	content = new StringBuilder ();  	line = sr.ReadLine ();  	// "===" Separator  	// Filter out files not in the provided path list  	if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  		fileName = null;  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  	line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  	content.Append (line).Append ('\n');  }  else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  	content.Append (line).Append ('\n');  }  else {  	if (fileName != null) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  		fileName = null;  	}  	fileName = line.Substring (6).Trim ();  	fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  	// svn returns paths using unix separators  	FilePath fp = fileName;  	pathRoot = null;  	if (fp.IsAbsolute) {  		if (fp == basePath)  			pathRoot = fp.ParentDirectory;  		else if (fp.IsChildPathOf (basePath))  			pathRoot = basePath;  		if (pathRoot != null) {  			pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  			pathRoot += '/';  		}  	}  	else {  		fp = fp.ToAbsolute (basePath);  	}  	fileName = fp;  	content = new StringBuilder ();  	line = sr.ReadLine ();  	// "===" Separator  	// Filter out files not in the provided path list  	if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  		fileName = null;  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: if (pathRoot != null && fileName != null && (line.StartsWith ("+++ " + pathRoot' StringComparison.Ordinal) || line.StartsWith ("--- " + pathRoot' StringComparison.Ordinal))) {  	line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  	content.Append (line).Append ('\n');  }  else if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  	content.Append (line).Append ('\n');  }  else {  	if (fileName != null) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  		fileName = null;  	}  	fileName = line.Substring (6).Trim ();  	fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  	// svn returns paths using unix separators  	FilePath fp = fileName;  	pathRoot = null;  	if (fp.IsAbsolute) {  		if (fp == basePath)  			pathRoot = fp.ParentDirectory;  		else if (fp.IsChildPathOf (basePath))  			pathRoot = basePath;  		if (pathRoot != null) {  			pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  			pathRoot += '/';  		}  	}  	else {  		fp = fp.ToAbsolute (basePath);  	}  	fileName = fp;  	content = new StringBuilder ();  	line = sr.ReadLine ();  	// "===" Separator  	// Filter out files not in the provided path list  	if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  		fileName = null;  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: line = line.Substring (0' 4) + line.Substring (4 + pathRoot.Length);  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: if (!line.StartsWith ("Index:"' StringComparison.Ordinal)) {  	content.Append (line).Append ('\n');  }  else {  	if (fileName != null) {  		list.Add (new DiffInfo (basePath' fileName' content.ToString ()));  		fileName = null;  	}  	fileName = line.Substring (6).Trim ();  	fileName = fileName.Replace ('/'' Path.DirectorySeparatorChar);  	// svn returns paths using unix separators  	FilePath fp = fileName;  	pathRoot = null;  	if (fp.IsAbsolute) {  		if (fp == basePath)  			pathRoot = fp.ParentDirectory;  		else if (fp.IsChildPathOf (basePath))  			pathRoot = basePath;  		if (pathRoot != null) {  			pathRoot = pathRoot.Replace (Path.DirectorySeparatorChar' '/').TrimEnd ('/');  			pathRoot += '/';  		}  	}  	else {  		fp = fp.ToAbsolute (basePath);  	}  	fileName = fp;  	content = new StringBuilder ();  	line = sr.ReadLine ();  	// "===" Separator  	// Filter out files not in the provided path list  	if (localPaths != null && Array.IndexOf (localPaths' (FilePath)fileName) == -1)  		fileName = null;  }  
Magic Number,MonoDevelop.VersionControl,Repository,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\Repository.cs,GenerateUnifiedDiffInfo,The following statement contains a magic number: fileName = line.Substring (6).Trim ();  
Magic Number,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,AddOverlay,The following statement contains a magic number: overlay.Composite (res' res.Width - overlay.Width' res.Height - overlay.Height' overlay.Width' overlay.Height' res.Width - overlay.Width' res.Height - overlay.Height' 1' 1' Gdk.InterpType.Bilinear' 255);  
Magic Number,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,RegisterObjectPath,The following statement contains a magic number: if (pathToObject.TryGetValue (path' out currentObj)) {  	if (currentObj is List<object>) {  		var list = (List<object>)currentObj;  		list.Add (ob);  	}  	else {  		var list = new List<object> (2);  		list.Add (currentObj);  		list.Add (ob);  		pathToObject [path] = list;  	}  }  else  	pathToObject [path] = ob;  
Magic Number,MonoDevelop.VersionControl,VersionControlNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,RegisterObjectPath,The following statement contains a magic number: if (currentObj is List<object>) {  	var list = (List<object>)currentObj;  	list.Add (ob);  }  else {  	var list = new List<object> (2);  	list.Add (currentObj);  	list.Add (ob);  	pathToObject [path] = list;  }  
Magic Number,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetCommitComments,The following statement contains a magic number: if (File.Exists (file)) {  	FileStream stream = null;  	try {  		AppDomain.CurrentDomain.AssemblyResolve += localResolve;  		stream = File.OpenRead (file);  		BinaryFormatter formatter = new BinaryFormatter ();  		comments = (Hashtable)formatter.Deserialize (stream);  		// Remove comments for files that don't exists  		// Remove comments more than 60 days old  		ArrayList toDelete = new ArrayList ();  		foreach (DictionaryEntry e in comments) {  			if (!File.Exists ((string)e.Key))  				toDelete.Add (e.Key);  			if ((DateTime.Now - ((CommitComment)e.Value).Date).TotalDays > 60)  				toDelete.Add (e.Key);  		}  		foreach (string f in toDelete)  			comments.Remove (f);  	}  	catch (Exception ex) {  		// If there is an error' just discard the file  		LoggingService.LogError (ex.ToString ());  		comments = new Hashtable ();  	}  	finally {  		AppDomain.CurrentDomain.AssemblyResolve -= localResolve;  		if (stream != null)  			stream.Close ();  	}  }  else {  	comments = new Hashtable ();  }  
Magic Number,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetCommitComments,The following statement contains a magic number: try {  	AppDomain.CurrentDomain.AssemblyResolve += localResolve;  	stream = File.OpenRead (file);  	BinaryFormatter formatter = new BinaryFormatter ();  	comments = (Hashtable)formatter.Deserialize (stream);  	// Remove comments for files that don't exists  	// Remove comments more than 60 days old  	ArrayList toDelete = new ArrayList ();  	foreach (DictionaryEntry e in comments) {  		if (!File.Exists ((string)e.Key))  			toDelete.Add (e.Key);  		if ((DateTime.Now - ((CommitComment)e.Value).Date).TotalDays > 60)  			toDelete.Add (e.Key);  	}  	foreach (string f in toDelete)  		comments.Remove (f);  }  catch (Exception ex) {  	// If there is an error' just discard the file  	LoggingService.LogError (ex.ToString ());  	comments = new Hashtable ();  }  finally {  	AppDomain.CurrentDomain.AssemblyResolve -= localResolve;  	if (stream != null)  		stream.Close ();  }  
Magic Number,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetCommitComments,The following statement contains a magic number: foreach (DictionaryEntry e in comments) {  	if (!File.Exists ((string)e.Key))  		toDelete.Add (e.Key);  	if ((DateTime.Now - ((CommitComment)e.Value).Date).TotalDays > 60)  		toDelete.Add (e.Key);  }  
Magic Number,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetCommitComments,The following statement contains a magic number: if ((DateTime.Now - ((CommitComment)e.Value).Date).TotalDays > 60)  	toDelete.Add (e.Key);  
Magic Number,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,SaveComments,The following statement contains a magic number: lock (commentsLock) {  	if (comments == null)  		return;  	if (nextSave == DateTime.MinValue)  		ThreadPool.QueueUserWorkItem (DelayedSaveComments);  	nextSave = DateTime.Now.AddSeconds (3);  }  
Magic Number,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,SaveComments,The following statement contains a magic number: nextSave = DateTime.Now.AddSeconds (3);  
Magic Number,MonoDevelop.VersionControl,CommitMessageStylePanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitMessageStylePanelWidget.cs,CommitMessageStylePanelWidget,The following statement contains a magic number: font.Size = Pango.Units.FromPixels (8);  
Magic Number,MonoDevelop.VersionControl,CommitMessageStylePanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\CommitMessageStylePanelWidget.cs,UpdatePreview,The following statement contains a magic number: format.MaxColumns = 60;  
Magic Number,MonoDevelop.VersionControl,CommitMessageFormat,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\CommitMessageFormat.cs,CommitMessageFormat,The following statement contains a magic number: MaxColumns = 70;  
Magic Number,MonoDevelop.VersionControl,CommitMessageFormat,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\CommitMessageFormat.cs,CommitMessageFormat,The following statement contains a magic number: TabWidth = 8;  
Magic Number,MonoDevelop.VersionControl,VersionControlPolicy,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlPolicy.cs,VersionControlPolicy,The following statement contains a magic number: this.CommitMessageStyle.LineAlign = 2;  
Magic Number,MonoDevelop.VersionControl,VersionControlGeneralOptionsPanel,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\VersionControlGeneralOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: box.Spacing = 6;  
Magic Number,MonoDevelop.VersionControl,VersionControlGeneralOptionsPanel,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\VersionControlGeneralOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: box.Margin = 12;  
Magic Number,MonoDevelop.VersionControl,VersionControlSolutionOptionsPanel,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\VersionControlSolutionOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: box.Spacing = 6;  
Magic Number,MonoDevelop.VersionControl,VersionControlSolutionOptionsPanel,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Dialogs\VersionControlSolutionOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: box.Margin = 12;  
Missing Default,MonoDevelop.VersionControl.Views,StatusView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\StatusView.cs,CompareNodes,The following switch statement is missing a default case: switch (col) {  case 0:  	val = ColStatus;  	break;  case 1:  	val = ColRemoteStatus;  	break;  case 2:  	val = ColCommit;  	break;  case 3:  	val = ColPath;  	break;  }  
Missing Default,MonoDevelop.VersionControl.Views,ChangeSetView,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl.Views\ChangeSetView.cs,CompareNodes,The following switch statement is missing a default case: switch (col) {  case 0:  	val = ColStatus;  	break;  case 1:  	val = ColCommit;  	break;  case 2:  	val = ColPath;  	break;  }  
Missing Default,MonoDevelop.VersionControl,AddinCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlNodeExtension.cs,RunCommand,The following switch statement is missing a default case: switch (cmd) {  case Commands.Update:  	res = UpdateCommand.Update (items' test);  	break;  case Commands.Diff:  	res = DiffCommand.Show (items' test);  	break;  case Commands.Log:  	res = LogCommand.Show (items' test);  	break;  case Commands.Status:  	res = StatusView.Show (items' test' false);  	break;  case Commands.Add:  	res = AddCommand.Add (items' test);  	break;  case Commands.Remove:  	res = RemoveCommand.Remove (items' test);  	break;  case Commands.Revert:  	res = RevertCommand.Revert (items' test);  	break;  case Commands.Lock:  	res = LockCommand.Lock (items' test);  	break;  case Commands.Unlock:  	res = UnlockCommand.Unlock (items' test);  	break;  case Commands.Publish:  	VersionControlItem it = items [0];  	if (items.Count == 1 && it.IsDirectory && it.WorkspaceObject != null)  		res = PublishCommand.Publish (it.WorkspaceObject' it.Path' test);  	break;  case Commands.Annotate:  	res = BlameCommand.Show (items' test);  	break;  case Commands.CreatePatch:  	res = CreatePatchCommand.CreatePatch (items' test);  	break;  case Commands.Ignore:  	res = IgnoreCommand.Ignore (items' test);  	break;  case Commands.Unignore:  	res = UnignoreCommand.Unignore (items' test);  	break;  case Commands.ResolveConflicts:  	res = ResolveConflictsCommand.ResolveConflicts (items' test);  	break;  }  
Missing Default,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,LoadOverlayIconForStatus,The following switch statement is missing a default case: switch (status & VersionStatus.LocalChangesMask) {  case VersionStatus.Modified:  case VersionStatus.ScheduledReplace:  case VersionStatus.ScheduledIgnore:  	return overlay_modified;  case VersionStatus.Conflicted:  	return overlay_conflicted;  case VersionStatus.ScheduledAdd:  	return overlay_added;  case VersionStatus.Missing:  case VersionStatus.ScheduledDelete:  	return overlay_removed;  }  
Missing Default,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,LoadIconForStatus,The following switch statement is missing a default case: switch (status & VersionStatus.LocalChangesMask) {  case VersionStatus.Modified:  case VersionStatus.ScheduledReplace:  	return icon_modified;  case VersionStatus.Conflicted:  	return icon_conflicted;  case VersionStatus.ScheduledAdd:  	return icon_added;  case VersionStatus.Missing:  case VersionStatus.ScheduledDelete:  	return icon_removed;  }  
Missing Default,MonoDevelop.VersionControl,VersionControlService,C:\repos\joncloud_monodevelop\main\src\addins\VersionControl\MonoDevelop.VersionControl\MonoDevelop.VersionControl\VersionControlService.cs,GetStatusLabel,The following switch statement is missing a default case: switch (status & VersionStatus.LocalChangesMask) {  case VersionStatus.Modified:  case VersionStatus.ScheduledReplace:  	return GettextCatalog.GetString ("Modified");  case VersionStatus.Conflicted:  	return GettextCatalog.GetString ("Conflict");  case VersionStatus.ScheduledAdd:  	return GettextCatalog.GetString ("Add");  case VersionStatus.ScheduledDelete:  	return GettextCatalog.GetString ("Delete");  case VersionStatus.Missing:  	return GettextCatalog.GetString ("Missing");  }  
