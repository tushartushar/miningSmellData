Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoDevelop.DocFood,DocFoodTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocFoodTextEditorExtension.cs,KeyPress,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetBaseDocumentation,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,FillDocumentation,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetType,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetOperator,Cyclomatic complexity of the method is 26
Complex Method,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,EvaluateCondition,Cyclomatic complexity of the method is 57
Complex Method,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GenerateDoc,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,Init,Cyclomatic complexity of the method is 30
Complex Method,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,SplitWords,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.DocFood,DocumentBufferHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.DocFood,DocumentBufferHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,GenerateDocumentation,Cyclomatic complexity of the method is 12
Long Parameter List,MonoDevelop.DocFood,Section,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Section.cs,Run,The method has 6 parameters.
Long Statement,MonoDevelop.DocFood,DocFoodTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocFoodTextEditorExtension.cs,GetMemberToDocument,The length of the statement  "				var ctx = (parsedDocument.ParsedFile as CSharpUnresolvedFile).GetTypeResolveContext (Document.Compilation' t.Region.Begin); " is 123.
Long Statement,MonoDevelop.DocFood,DocFoodTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocFoodTextEditorExtension.cs,GetMemberToDocument,The length of the statement  "		if (member.Region.Begin > new TextLocation (textEditorData.Caret.Line' textEditorData.Caret.Column) && (result == null || member.Region.Begin < result.Region.Begin) && IsEmptyBetweenLines (textEditorData.Caret.Line' member.Region.BeginLine)) { " is 243.
Long Statement,MonoDevelop.DocFood,DocFoodTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocFoodTextEditorExtension.cs,GetMemberToDocument,The length of the statement  "			var ctx = (parsedDocument.ParsedFile as CSharpUnresolvedFile).GetTypeResolveContext (Document.Compilation' member.Region.Begin); " is 128.
Long Statement,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetBaseDocumentation,The length of the statement  "				if ((searchedMember is IParameterizedMember) && ((IParameterizedMember)searchedMember).Parameters.Count != ((IParameterizedMember)member).Parameters.Count) " is 155.
Long Statement,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,EvaluateCondition,The length of the statement  "				result |= idx < ((IParameterizedMember)member).Parameters.Count && name == ((IParameterizedMember)member).Parameters [idx].Name; " is 128.
Long Statement,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GenerateDoc,The length of the statement  "	//					IType resolvedType = type.GetProjectContent ().SearchType (type.CompilationUnit' type' type.Location' exceptionType); " is 124.
Long Statement,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,Init,The length of the statement  "	//					var result = provider.ParseFile ("class A {" + data.Document.GetTextAt (start.Offset' end.EndOffset - start.Offset) + "}"); " is 130.
Long Statement,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,Init,The length of the statement  "		tags ["ReturnType"] = ((IMember)member).ReturnType != null ? "<see cref=\"" + ((IMember)member).ReturnType + "\"/>" : ""; " is 121.
Long Statement,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,Init,The length of the statement  "			tags ["Parameter" + i + ".Type"] = ((IParameterizedMember)member).Parameters [i].Type != null ? "<see cref=\"" + ((IParameterizedMember)member).Parameters [i].Type + "\"/>" : ""; " is 178.
Long Statement,MonoDevelop.DocFood,Section,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Section.cs,Run,The length of the statement  "			if (generator.sections.Where (s => s.Name == Name).Any (s => s.Attributes.Any (attr => attr.Value == generator.curName))) " is 121.
Long Statement,MonoDevelop.DocFood,DocumentThisHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,Update,The length of the statement  "	info.Enabled = IdeApp.Workbench.ActiveDocument != null && IdeApp.Workbench.ActiveDocument.Editor != null && IdeApp.Workbench.ActiveDocument.Editor.Document.MimeType == "text/x-csharp"; " is 184.
Long Statement,MonoDevelop.DocFood,DocumentBufferHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,Update,The length of the statement  "	info.Enabled = IdeApp.Workbench.ActiveDocument != null && IdeApp.Workbench.ActiveDocument.Editor != null && IdeApp.Workbench.ActiveDocument.Editor.Document.MimeType == "text/x-csharp"; " is 184.
Complex Conditional,MonoDevelop.DocFood,DocFoodTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocFoodTextEditorExtension.cs,GetMemberToDocument,The conditional expression  "member.Region.Begin > new TextLocation (textEditorData.Caret.Line' textEditorData.Caret.Column) && (result == null || member.Region.Begin < result.Region.Begin) && IsEmptyBetweenLines (textEditorData.Caret.Line' member.Region.BeginLine)"  is complex.
Complex Conditional,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,Init,The conditional expression  "property.CanGet && property.CanSet && hasPublicGetter && hasPublicSetter"  is complex.
Empty Catch Block,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,EvaluateCondition,The method has an empty catch block.
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GenerateDoc,The following statement contains a magic number: if (member is IMethod) {  	IMethod method = (IMethod)member;  	int count = 1;  	foreach (var param in method.TypeParameters) {  		this.currentType = "typeparam";  		curName = param.Name;  		tags ["TypeParam"] = param.Name;  		switch (count) {  		case 1:  			tags ["TypeParamNumber"] = "1st";  			break;  		case 2:  			tags ["TypeParamNumber"] = "2nd";  			break;  		case 3:  			tags ["TypeParamNumber"] = "3rd";  			break;  		default:  			tags ["TypeParamNumber"] = count + "th";  			break;  		}  		count++;  		DocConfig.Instance.Rules.ForEach (r => r.Run (this' param));  	}  }  
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GenerateDoc,The following statement contains a magic number: if (member is IMethod) {  	IMethod method = (IMethod)member;  	int count = 1;  	foreach (var param in method.TypeParameters) {  		this.currentType = "typeparam";  		curName = param.Name;  		tags ["TypeParam"] = param.Name;  		switch (count) {  		case 1:  			tags ["TypeParamNumber"] = "1st";  			break;  		case 2:  			tags ["TypeParamNumber"] = "2nd";  			break;  		case 3:  			tags ["TypeParamNumber"] = "3rd";  			break;  		default:  			tags ["TypeParamNumber"] = count + "th";  			break;  		}  		count++;  		DocConfig.Instance.Rules.ForEach (r => r.Run (this' param));  	}  }  
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GenerateDoc,The following statement contains a magic number: foreach (var param in method.TypeParameters) {  	this.currentType = "typeparam";  	curName = param.Name;  	tags ["TypeParam"] = param.Name;  	switch (count) {  	case 1:  		tags ["TypeParamNumber"] = "1st";  		break;  	case 2:  		tags ["TypeParamNumber"] = "2nd";  		break;  	case 3:  		tags ["TypeParamNumber"] = "3rd";  		break;  	default:  		tags ["TypeParamNumber"] = count + "th";  		break;  	}  	count++;  	DocConfig.Instance.Rules.ForEach (r => r.Run (this' param));  }  
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GenerateDoc,The following statement contains a magic number: foreach (var param in method.TypeParameters) {  	this.currentType = "typeparam";  	curName = param.Name;  	tags ["TypeParam"] = param.Name;  	switch (count) {  	case 1:  		tags ["TypeParamNumber"] = "1st";  		break;  	case 2:  		tags ["TypeParamNumber"] = "2nd";  		break;  	case 3:  		tags ["TypeParamNumber"] = "3rd";  		break;  	default:  		tags ["TypeParamNumber"] = count + "th";  		break;  	}  	count++;  	DocConfig.Instance.Rules.ForEach (r => r.Run (this' param));  }  
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GenerateDoc,The following statement contains a magic number: switch (count) {  case 1:  	tags ["TypeParamNumber"] = "1st";  	break;  case 2:  	tags ["TypeParamNumber"] = "2nd";  	break;  case 3:  	tags ["TypeParamNumber"] = "3rd";  	break;  default:  	tags ["TypeParamNumber"] = count + "th";  	break;  }  
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GenerateDoc,The following statement contains a magic number: switch (count) {  case 1:  	tags ["TypeParamNumber"] = "1st";  	break;  case 2:  	tags ["TypeParamNumber"] = "2nd";  	break;  case 3:  	tags ["TypeParamNumber"] = "3rd";  	break;  default:  	tags ["TypeParamNumber"] = count + "th";  	break;  }  
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetPastParticipleVerb,The following statement contains a magic number: for (int i = 0; i < irregularVerbs.GetLength (0); i++) {  	if (irregularVerbs [i' 0] == str)  		return irregularVerbs [i' 2];  }  
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetPastParticipleVerb,The following statement contains a magic number: if (irregularVerbs [i' 0] == str)  	return irregularVerbs [i' 2];  
Magic Number,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetPastParticipleVerb,The following statement contains a magic number: return irregularVerbs [i' 2];  
Magic Number,MonoDevelop.DocFood,DocumentBufferHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,GenerateDocumentation,The following statement contains a magic number: foreach (Section section in generator.sections) {  	if (first) {  		result.Append (indent);  		result.Append (prefix);  		result.Append ("<");  		first = false;  	}  	else {  		result.AppendLine ();  		result.Append (indent);  		result.Append (prefix);  		result.Append ("<");  	}  	result.Append (section.Name);  	foreach (var attr in section.Attributes) {  		result.Append (" ");  		result.Append (attr.Key);  		result.Append ("=\"");  		result.Append (attr.Value);  		result.Append ("\"");  	}  	if (section.Name == "summary") {  		result.AppendLine (">");  		result.Append (indent);  		result.Append (prefix);  	}  	else {  		result.Append (">");  	}  	bool inTag = false;  	int column = indent.Length + prefix.Length;  	StringBuilder curWord = new StringBuilder ();  	foreach (char ch in section.Documentation) {  		if (ch == '<')  			inTag = true;  		if (ch == '>')  			inTag = false;  		if (ch == '\n') {  			result.Append (curWord.ToString ());  			curWord.Length = 0;  			result.AppendLine ();  			result.Append (indent);  			result.Append (prefix);  			column = indent.Length + prefix.Length;  		}  		else if (!inTag && char.IsWhiteSpace (ch)) {  			if (column + curWord.Length > 120) {  				result.Length--;  				// trunk last char white space.  				result.AppendLine ();  				result.Append (indent);  				result.Append (prefix);  				column = indent.Length + prefix.Length;  			}  			result.Append (curWord.ToString ());  			result.Append (ch);  			column += curWord.Length + 1;  			curWord.Length = 0;  		}  		else {  			curWord.Append (ch);  		}  	}  	if (section.Name == "summary") {  		result.AppendLine (curWord.ToString ());  		result.Append (indent);  		result.Append (prefix);  	}  	else {  		result.Append (curWord.ToString ());  	}  	result.Append ("</");  	result.Append (section.Name);  	result.Append (">");  }  
Magic Number,MonoDevelop.DocFood,DocumentBufferHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,GenerateDocumentation,The following statement contains a magic number: foreach (char ch in section.Documentation) {  	if (ch == '<')  		inTag = true;  	if (ch == '>')  		inTag = false;  	if (ch == '\n') {  		result.Append (curWord.ToString ());  		curWord.Length = 0;  		result.AppendLine ();  		result.Append (indent);  		result.Append (prefix);  		column = indent.Length + prefix.Length;  	}  	else if (!inTag && char.IsWhiteSpace (ch)) {  		if (column + curWord.Length > 120) {  			result.Length--;  			// trunk last char white space.  			result.AppendLine ();  			result.Append (indent);  			result.Append (prefix);  			column = indent.Length + prefix.Length;  		}  		result.Append (curWord.ToString ());  		result.Append (ch);  		column += curWord.Length + 1;  		curWord.Length = 0;  	}  	else {  		curWord.Append (ch);  	}  }  
Magic Number,MonoDevelop.DocFood,DocumentBufferHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,GenerateDocumentation,The following statement contains a magic number: if (ch == '\n') {  	result.Append (curWord.ToString ());  	curWord.Length = 0;  	result.AppendLine ();  	result.Append (indent);  	result.Append (prefix);  	column = indent.Length + prefix.Length;  }  else if (!inTag && char.IsWhiteSpace (ch)) {  	if (column + curWord.Length > 120) {  		result.Length--;  		// trunk last char white space.  		result.AppendLine ();  		result.Append (indent);  		result.Append (prefix);  		column = indent.Length + prefix.Length;  	}  	result.Append (curWord.ToString ());  	result.Append (ch);  	column += curWord.Length + 1;  	curWord.Length = 0;  }  else {  	curWord.Append (ch);  }  
Magic Number,MonoDevelop.DocFood,DocumentBufferHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,GenerateDocumentation,The following statement contains a magic number: if (!inTag && char.IsWhiteSpace (ch)) {  	if (column + curWord.Length > 120) {  		result.Length--;  		// trunk last char white space.  		result.AppendLine ();  		result.Append (indent);  		result.Append (prefix);  		column = indent.Length + prefix.Length;  	}  	result.Append (curWord.ToString ());  	result.Append (ch);  	column += curWord.Length + 1;  	curWord.Length = 0;  }  else {  	curWord.Append (ch);  }  
Magic Number,MonoDevelop.DocFood,DocumentBufferHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Commands.cs,GenerateDocumentation,The following statement contains a magic number: if (column + curWord.Length > 120) {  	result.Length--;  	// trunk last char white space.  	result.AppendLine ();  	result.Append (indent);  	result.Append (prefix);  	column = indent.Length + prefix.Length;  }  
Missing Default,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetType,The following switch statement is missing a default case: switch (member.SymbolKind) {  case SymbolKind.Event:  	return "event";  case SymbolKind.Field:  	return "field";  case SymbolKind.Constructor:  	return "constructor";  case SymbolKind.Destructor:  	return "destructor";  case SymbolKind.Operator:  	return "operator";  case SymbolKind.Method:  	return "method";  //			case MemberType.Parameter:  //				return "parameter";  case SymbolKind.Indexer:  	return "indexer";  case SymbolKind.Property:  	return "property";  case SymbolKind.TypeDefinition:  	switch (((ITypeDefinition)member).Kind) {  	case TypeKind.Class:  		return "class";  	case TypeKind.Delegate:  		return "delegate";  	case TypeKind.Enum:  		return "enum";  	case TypeKind.Interface:  		return "interface";  	case TypeKind.Struct:  		return "struct";  	}  	break;  }  
Missing Default,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetType,The following switch statement is missing a default case: switch (((ITypeDefinition)member).Kind) {  case TypeKind.Class:  	return "class";  case TypeKind.Delegate:  	return "delegate";  case TypeKind.Enum:  	return "enum";  case TypeKind.Interface:  	return "interface";  case TypeKind.Struct:  	return "struct";  }  
Missing Default,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,GetOperator,The following switch statement is missing a default case: switch (methodName) {  case "op_Subtraction":  case "op_UnaryNegation":  	return "-";  case "op_Addition":  case "op_UnaryPlus":  	return "+";  case "op_Multiply":  	return "*";  case "op_Division":  	return "/";  case "op_Modulus":  	return "%";  case "op_LogicalNot":  	return "!";  case "op_OnesComplement":  	return "~";  case "op_BitwiseAnd":  	return "&";  case "op_BitwiseOr":  	return "|";  case "op_ExclusiveOr":  	return "^";  case "op_LeftShift":  	return "<<";  case "op_RightShift":  	return ">>";  case "op_GreaterThan":  	return ">";  case "op_GreaterThanOrEqual":  	return ">=";  case "op_Equality":  	return "==";  case "op_Inequality":  	return "!=";  case "op_LessThan":  	return "<";  case "op_LessThanOrEqual":  	return "<=";  case "op_Increment":  	return "++";  case "op_Decrement":  	return "--";  case "op_True":  	return "true";  case "op_False":  	return "false";  case "op_Implicit":  	return "implicit";  case "op_Explicit":  	return "explicit";  }  
Missing Default,MonoDevelop.DocFood,DocGenerator,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocGenerator.cs,Init,The following switch statement is missing a default case: switch (member.DeclaringTypeDefinition.Kind) {  case TypeKind.Class:  	tags ["DeclaringTypeKind"] = "class";  	break;  case TypeKind.Delegate:  	tags ["DeclaringTypeKind"] = "delegate";  	break;  case TypeKind.Enum:  	tags ["DeclaringTypeKind"] = "enum";  	break;  case TypeKind.Interface:  	tags ["DeclaringTypeKind"] = "interface";  	break;  case TypeKind.Struct:  	tags ["DeclaringTypeKind"] = "struct";  	break;  }  
Missing Default,MonoDevelop.DocFood,DocConfig,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocConfig.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) {  case "WordLists":  	XmlReadHelper.ReadList (reader' reader.LocalName' delegate () {  		switch (reader.LocalName) {  		case "List":  			string name = reader.GetAttribute ("name");  			List<string> words = new List<string> ();  			XmlReadHelper.ReadList (reader' reader.LocalName' delegate () {  				switch (reader.LocalName) {  				case "Word":  					words.Add (reader.ReadElementString ());  					return true;  				}  				return false;  			});  			result.WordLists [name] = words;  			return true;  		}  		return false;  	});  	return true;  case "WordExpansion":  	XmlReadHelper.ReadList (reader' reader.LocalName' delegate () {  		switch (reader.LocalName) {  		case "Word":  			result.WordExpansions [reader.GetAttribute ("from")] = reader.GetAttribute ("to");  			return true;  		}  		return false;  	});  	return true;  case "Macros":  	XmlReadHelper.ReadList (reader' reader.LocalName' delegate () {  		switch (reader.LocalName) {  		case "Macro":  			result.Macros [reader.GetAttribute ("tag")] = reader.GetAttribute ("value");  			return true;  		}  		return false;  	});  	return true;  case "Rules":  	result.Rules = Node.ReadNodeList (reader' "Rules");  	return true;  }  
Missing Default,MonoDevelop.DocFood,DocConfig,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocConfig.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) {  case "List":  	string name = reader.GetAttribute ("name");  	List<string> words = new List<string> ();  	XmlReadHelper.ReadList (reader' reader.LocalName' delegate () {  		switch (reader.LocalName) {  		case "Word":  			words.Add (reader.ReadElementString ());  			return true;  		}  		return false;  	});  	result.WordLists [name] = words;  	return true;  }  
Missing Default,MonoDevelop.DocFood,DocConfig,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocConfig.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) {  case "Word":  	words.Add (reader.ReadElementString ());  	return true;  }  
Missing Default,MonoDevelop.DocFood,DocConfig,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocConfig.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) {  case "Word":  	result.WordExpansions [reader.GetAttribute ("from")] = reader.GetAttribute ("to");  	return true;  }  
Missing Default,MonoDevelop.DocFood,DocConfig,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\DocConfig.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) {  case "Macro":  	result.Macros [reader.GetAttribute ("tag")] = reader.GetAttribute ("value");  	return true;  }  
Missing Default,MonoDevelop.DocFood,Node,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\Node.cs,ReadNodeList,The following switch statement is missing a default case: switch (reader.LocalName) {  case Section.XmlTag:  	result.Add (Section.Read (reader));  	return true;  case IfStatement.XmlTag:  	result.Add (IfStatement.Read (reader));  	return true;  case IfNotStatement.XmlTag:  	result.Add (IfNotStatement.Read (reader));  	return true;  case SwitchStatement.XmlTag:  	result.Add (SwitchStatement.Read (reader));  	return true;  }  
Missing Default,MonoDevelop.DocFood,SwitchStatement,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.DocFood\MonoDevelop.DocFood\SwitchStatement.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) {  case "Case":  	result.CaseSections.Add (CaseStatement.Read (reader));  	return true;  case "Default":  	result.Children = Node.ReadNodeList (reader' "Default");  	return true;  }  
