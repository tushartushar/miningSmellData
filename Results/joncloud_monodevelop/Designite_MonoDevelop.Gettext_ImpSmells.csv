Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,POEditorWidget,The method has 141 lines of code.
Long Method,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,Save,The method has 110 lines of code.
Long Method,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The method has 158 lines of code.
Long Method,MonoDevelop.Gettext,IsoCodes,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\IsoCodes.cs,IsoCodes,The method has 423 lines of code.
Long Method,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The method has 101 lines of code.
Complex Method,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Gettext,TranslationProject,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProject.cs,CreateDefaultCatalog,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Gettext,TranslationProject,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProject.cs,UpdateTranslations,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Gettext,TranslationProjectOptionsDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProjectOptionsDialog.cs,FillTree,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,CreateOptionsMenu,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,EditEntry,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,UpdateFromCatalog,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,TaskUpdateWorker,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,FormatMessageForFile,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,Save,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,Cyclomatic complexity of the method is 35
Complex Method,MonoDevelop.Gettext,GettextTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\GettextTool.cs,Run,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Gettext,GettextTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\GettextTool.cs,ReadArgument,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Gettext,RegexFileScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\RegexFileScanner.cs,UpdateCatalog,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Gettext,StringEscaping,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\StringEscaping.cs,ToGettextFormat,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Gettext,StringEscaping,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\StringEscaping.cs,AppendFromGettextFormat,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Gettext,StringEscaping,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\StringEscaping.cs,FromXml,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.Gettext,StringEscaping,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\StringEscaping.cs,FromCSharpFormat,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.Gettext,PluralFormsNode,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,Evaluate,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Gettext,PluralFormsParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,PmExpression,Cyclomatic complexity of the method is 8
Long Parameter List,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,UpdateFromCatalog,The method has 9 parameters.
Long Parameter List,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,GetStatistics,The method has 5 parameters.
Long Parameter List,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,OnEntry,The method has 8 parameters.
Long Parameter List,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,OnDeletedEntry,The method has 5 parameters.
Long Parameter List,MonoDevelop.Gettext,CharsetInfoFinder,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,OnEntry,The method has 8 parameters.
Long Parameter List,MonoDevelop.Gettext,LoadParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,OnEntry,The method has 8 parameters.
Long Parameter List,MonoDevelop.Gettext,LoadParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,OnDeletedEntry,The method has 5 parameters.
Long Parameter List,MonoDevelop.Gettext,RegexFileScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\RegexFileScanner.cs,AddIncludeRegex,The method has 5 parameters.
Long Parameter List,MonoDevelop.Gettext,RegexFileScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\RegexFileScanner.cs,UpdateCatalog,The method has 6 parameters.
Long Parameter List,MonoDevelop.Gettext.NodeBuilders,TranslationProjectNodeBuilder,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.NodeBuilders\TranslationProjectNodeBuilder.cs,BuildNode,The method has 5 parameters.
Long Parameter List,MonoDevelop.Gettext.NodeBuilders,TranslationNodeBuilder,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.NodeBuilders\TranslationNodeBuilder.cs,BuildNode,The method has 5 parameters.
Long Statement,MonoDevelop.Gettext,TranslationProject,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProject.cs,GetOutputDirectory,The length of the statement  "		return Path.Combine (Path.GetDirectoryName (((DotNetProject)ParentSolution.StartupItem).GetOutputFileName (configuration))' RelPath); " is 133.
Long Statement,MonoDevelop.Gettext,TranslationProject,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProject.cs,UpdateTranslations,The length of the statement  "			var process = Runtime.ProcessService.StartProcess (Translation.GetTool ("msgmerge")' pb.ToString ()' this.BaseDirectory' monitor.Log' monitor.Log' null); " is 153.
Long Statement,MonoDevelop.Gettext,TranslationProject,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProject.cs,GetDeployFiles,The length of the statement  "			result.Add (new DeployFile (this' translation.GetOutFile (configuration)' moFileName' TargetDirectory.CommonApplicationDataRoot)); " is 130.
Long Statement,MonoDevelop.Gettext,Translation,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Translation.cs,GetOutFile,The length of the statement  "	string moDirectory = Path.Combine (Path.Combine (parentProject.GetOutputDirectory (configuration)' isoCode)' "LC_MESSAGES"); " is 124.
Long Statement,MonoDevelop.Gettext,Translation,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Translation.cs,Build,The length of the statement  "		process = Runtime.ProcessService.StartProcess (GetTool ("msgfmt")' pb.ToString ()' parentProject.BaseDirectory' monitor.Log' monitor.Log' null); " is 144.
Long Statement,MonoDevelop.Gettext,Translation,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Translation.cs,GetProgramFilesX86,The length of the statement  "	return Environment.GetFolderPath (IntPtr.Size == 8 ? Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles); " is 137.
Long Statement,MonoDevelop.Gettext,TranslationService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationService.cs,GetFileScanners,The length of the statement  "	return (IFileScanner[])AddinManager.GetExtensionObjects ("/MonoDevelop/Gettext/FileScanners"' typeof(IFileScanner)' true); " is 122.
Long Statement,MonoDevelop.Gettext,TranslationProjectOptionsDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProjectOptionsDialog.cs,FillTree,The length of the statement  "		curIter = store.AppendValues (iter' GetIcon (entry)' entry is SolutionFolder ? false : IsIncluded (entry)' entry.Name' entry' !(entry is SolutionFolder)); " is 154.
Long Statement,MonoDevelop.Gettext,TranslationProjectOptionsDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProjectOptionsDialog.cs,FillTree,The length of the statement  "		curIter = store.AppendValues (GetIcon (entry)' entry is SolutionFolder ? false : IsIncluded (entry)' entry.Name' entry' !(entry is SolutionFolder)); " is 148.
Long Statement,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,CreateOptionsMenu,The length of the statement  "	Gtk.CheckMenuItem caseSensitive = new Gtk.CheckMenuItem (MonoDevelop.Core.GettextCatalog.GetString ("_Case sensitive")); " is 120.
Long Statement,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,CreateOptionsMenu,The length of the statement  "	Gtk.CheckMenuItem wholeWordsOnly = new Gtk.CheckMenuItem (MonoDevelop.Core.GettextCatalog.GetString ("_Whole words only")); " is 123.
Long Statement,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,RemoveEntry,The length of the statement  "	bool yes = MessageService.AskQuestion (GettextCatalog.GetString ("Do you really want to remove the translation string {0} (It will be removed from all translations)?"' entry.String)' AlertButton.Cancel' AlertButton.Remove) == AlertButton.Remove; " is 245.
Long Statement,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,UpdateProgressBar,The length of the statement  "		barText += String.Format (GettextCatalog.GetPluralString ("{0} Missing Message"' "{0} Missing Messages"' untrans)' untrans); " is 124.
Long Statement,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,IsMatch,The length of the statement  "			return (idx == 0 || char.IsWhiteSpace (text [idx - 1])) && (idx + filter.Length == text.Length || char.IsWhiteSpace (text [idx + 1])); " is 134.
Long Statement,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,UpdateFromCatalog,The length of the statement  "	IdeApp.Workbench.StatusBar.ShowMessage (string.Format (GettextCatalog.GetPluralString ("Found {0} catalog entry."' "Found {0} catalog entries."' found)' found)); " is 161.
Long Statement,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,SelectEntry,The length of the statement  "	store.AppendValues (GetStockForEntry (entry)' entry.IsFuzzy' EscapeForTreeView (entry.String)' EscapeForTreeView (entry.GetTranslation (0))' entry' GetRowColorForEntry (entry)' GetTypeSortIndicator (entry)' GetForeColorForEntry (entry)); " is 237.
Long Statement,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,Save,The length of the statement  "		LoggingService.LogError ("Unhandled error creating temp file while saving Gettext catalog '{0}': {1}"' tempFileName' ex); " is 121.
Long Statement,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The length of the statement  "			if (CatalogParser.ReadParam (line' "#. "' out dummy) || CatalogParser.ReadParam (line' "#."' out dummy))// second one to account for empty auto comments " is 152.
Long Statement,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The length of the statement  "			else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) { " is 123.
Long Statement,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The length of the statement  "			else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) { " is 137.
Long Statement,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The length of the statement  "			else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) { " is 125.
Long Statement,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The length of the statement  "				if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) { " is 131.
Long Statement,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The length of the statement  "				while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) { " is 127.
Long Statement,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The length of the statement  "				if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) { " is 129.
Long Statement,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The length of the statement  "				while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) { " is 177.
Long Statement,MonoDevelop.Gettext,MakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\MakefileHandler.cs,Deploy,The length of the statement  "	templateEngine.Variables ["TOP_SRCDIR"] = FileService.AbsoluteToRelativePath (project.BaseDirectory' ctx.TargetSolution.BaseDirectory); " is 135.
Long Statement,MonoDevelop.Gettext,MakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\MakefileHandler.cs,Deploy,The length of the statement  "	templateEngine.Variables ["ALL_TARGET"] = (ctx.TargetSolution.BaseDirectory == project.BaseDirectory) ? "all-local" : "all"; " is 124.
Long Statement,MonoDevelop.Gettext,RegexFileScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\RegexFileScanner.cs,UpdateCatalog,The length of the statement  "					LoggingService.LogDebug ("Excluded Gettext string '{0}' in file '{1}'"' match.Groups [ri.ValueGroupIndex].Value' fileName); " is 123.
Long Statement,MonoDevelop.Gettext,StringEscaping,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\StringEscaping.cs,ToGettextFormat,The length of the statement  "			throw new FormatException (String.Format (MonoDevelop.Core.GettextCatalog.GetString ("Invalid character '{0}' in translatable string: '{1}'")' c' text)); " is 153.
Long Statement,MonoDevelop.Gettext,StringEscaping,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\StringEscaping.cs,AppendFromGettextFormat,The length of the statement  "				throw new FormatException (MonoDevelop.Core.GettextCatalog.GetString ("Invalid escape sequence '{0}' in string: '{1}'"' nextChar' text)); " is 137.
Long Statement,MonoDevelop.Gettext,PluralFormsParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,RelationalExpression,The length of the statement  "	if (Token.TokenType == PluralFormsToken.Type.Greater || Token.TokenType == PluralFormsToken.Type.Less || Token.TokenType == PluralFormsToken.Type.GreaterOrEqual || Token.TokenType == PluralFormsToken.Type.LessOrEqual) { " is 219.
Long Statement,MonoDevelop.Gettext.Translator,LanguageChooserDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Translator\LanguageChooserDialog.cs,ChangeSensitivity,The length of the statement  "	/*this.labelCountry.Sensitive = this.comboboxCountry.Sensitive = this.checkbuttonUseCoutry.Active;*/this.tableKnown.Sensitive = this.radiobuttonKnown.Active; " is 157.
Long Statement,MonoDevelop.Gettext.Translator,LanguageChooserDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Translator\LanguageChooserDialog.cs,OnEntryLocaleChanged,The length of the statement  "	this.buttonOK.Sensitive = this.radiobuttonKnown.Active || (this.radiobuttonCustom.Active && this.entryLocale.Text.Length > 0); " is 126.
Long Statement,MonoDevelop.Gettext.NodeBuilders,TranslationNodeBuilder,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.NodeBuilders\TranslationNodeBuilder.cs,BuildNode,The length of the statement  "			label = IsoCodes.LookupLanguageCode (language).Name + "/" + IsoCodes.LookupCountryCode (country).Name + " (" + translation.IsoCode + ")"; " is 137.
Complex Conditional,MonoDevelop.Gettext,PluralFormsParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,RelationalExpression,The conditional expression  "Token.TokenType == PluralFormsToken.Type.Greater || Token.TokenType == PluralFormsToken.Type.Less || Token.TokenType == PluralFormsToken.Type.GreaterOrEqual || Token.TokenType == PluralFormsToken.Type.LessOrEqual"  is complex.
Empty Catch Block,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,POEditorWidget,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,UpdateFromCatalog,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,CanEncodeToCharset,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,GetEncoding,The method has an empty catch block.
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (!String.IsNullOrEmpty (entryPluralsForms.Text)) {  	PluralFormsCalculator calc = new PluralFormsCalculator ();  	PluralFormsScanner scanner = new PluralFormsScanner (entryPluralsForms.Text);  	PluralFormsParser parser = new PluralFormsParser (scanner);  	bool wellFormed = parser.Parse (calc);  	if (wellFormed) {  		for (int i = 0; i < headers.PluralFormsCount; i++) {  			int example = 0;  			for (example = 1; example < 1000; example++) {  				if (calc.Evaluate (example) == i)  					break;  			}  			if (example == 1000 && calc.Evaluate (0) == i)  				example = 0;  			if (i > 0 && (example == 0 || example == 1000)) {  				wellFormed = false;  				break;  			}  		}  	}  	Gdk.Color background = wellFormed ? new Gdk.Color (138' 226' 52) : new Gdk.Color (204' 0' 0);  	entryPluralsForms.ModifyBase (StateType.Normal' background);  	//from tango palete - 8ae234 green' cc0000 red  	if (wellFormed) {  		headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  		OnPluralDefinitionChanged ();  	}  }  else {  	entryPluralsForms.ModifyBase (StateType.Normal);  	headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  	OnPluralDefinitionChanged ();  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (!String.IsNullOrEmpty (entryPluralsForms.Text)) {  	PluralFormsCalculator calc = new PluralFormsCalculator ();  	PluralFormsScanner scanner = new PluralFormsScanner (entryPluralsForms.Text);  	PluralFormsParser parser = new PluralFormsParser (scanner);  	bool wellFormed = parser.Parse (calc);  	if (wellFormed) {  		for (int i = 0; i < headers.PluralFormsCount; i++) {  			int example = 0;  			for (example = 1; example < 1000; example++) {  				if (calc.Evaluate (example) == i)  					break;  			}  			if (example == 1000 && calc.Evaluate (0) == i)  				example = 0;  			if (i > 0 && (example == 0 || example == 1000)) {  				wellFormed = false;  				break;  			}  		}  	}  	Gdk.Color background = wellFormed ? new Gdk.Color (138' 226' 52) : new Gdk.Color (204' 0' 0);  	entryPluralsForms.ModifyBase (StateType.Normal' background);  	//from tango palete - 8ae234 green' cc0000 red  	if (wellFormed) {  		headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  		OnPluralDefinitionChanged ();  	}  }  else {  	entryPluralsForms.ModifyBase (StateType.Normal);  	headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  	OnPluralDefinitionChanged ();  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (!String.IsNullOrEmpty (entryPluralsForms.Text)) {  	PluralFormsCalculator calc = new PluralFormsCalculator ();  	PluralFormsScanner scanner = new PluralFormsScanner (entryPluralsForms.Text);  	PluralFormsParser parser = new PluralFormsParser (scanner);  	bool wellFormed = parser.Parse (calc);  	if (wellFormed) {  		for (int i = 0; i < headers.PluralFormsCount; i++) {  			int example = 0;  			for (example = 1; example < 1000; example++) {  				if (calc.Evaluate (example) == i)  					break;  			}  			if (example == 1000 && calc.Evaluate (0) == i)  				example = 0;  			if (i > 0 && (example == 0 || example == 1000)) {  				wellFormed = false;  				break;  			}  		}  	}  	Gdk.Color background = wellFormed ? new Gdk.Color (138' 226' 52) : new Gdk.Color (204' 0' 0);  	entryPluralsForms.ModifyBase (StateType.Normal' background);  	//from tango palete - 8ae234 green' cc0000 red  	if (wellFormed) {  		headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  		OnPluralDefinitionChanged ();  	}  }  else {  	entryPluralsForms.ModifyBase (StateType.Normal);  	headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  	OnPluralDefinitionChanged ();  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (!String.IsNullOrEmpty (entryPluralsForms.Text)) {  	PluralFormsCalculator calc = new PluralFormsCalculator ();  	PluralFormsScanner scanner = new PluralFormsScanner (entryPluralsForms.Text);  	PluralFormsParser parser = new PluralFormsParser (scanner);  	bool wellFormed = parser.Parse (calc);  	if (wellFormed) {  		for (int i = 0; i < headers.PluralFormsCount; i++) {  			int example = 0;  			for (example = 1; example < 1000; example++) {  				if (calc.Evaluate (example) == i)  					break;  			}  			if (example == 1000 && calc.Evaluate (0) == i)  				example = 0;  			if (i > 0 && (example == 0 || example == 1000)) {  				wellFormed = false;  				break;  			}  		}  	}  	Gdk.Color background = wellFormed ? new Gdk.Color (138' 226' 52) : new Gdk.Color (204' 0' 0);  	entryPluralsForms.ModifyBase (StateType.Normal' background);  	//from tango palete - 8ae234 green' cc0000 red  	if (wellFormed) {  		headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  		OnPluralDefinitionChanged ();  	}  }  else {  	entryPluralsForms.ModifyBase (StateType.Normal);  	headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  	OnPluralDefinitionChanged ();  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (!String.IsNullOrEmpty (entryPluralsForms.Text)) {  	PluralFormsCalculator calc = new PluralFormsCalculator ();  	PluralFormsScanner scanner = new PluralFormsScanner (entryPluralsForms.Text);  	PluralFormsParser parser = new PluralFormsParser (scanner);  	bool wellFormed = parser.Parse (calc);  	if (wellFormed) {  		for (int i = 0; i < headers.PluralFormsCount; i++) {  			int example = 0;  			for (example = 1; example < 1000; example++) {  				if (calc.Evaluate (example) == i)  					break;  			}  			if (example == 1000 && calc.Evaluate (0) == i)  				example = 0;  			if (i > 0 && (example == 0 || example == 1000)) {  				wellFormed = false;  				break;  			}  		}  	}  	Gdk.Color background = wellFormed ? new Gdk.Color (138' 226' 52) : new Gdk.Color (204' 0' 0);  	entryPluralsForms.ModifyBase (StateType.Normal' background);  	//from tango palete - 8ae234 green' cc0000 red  	if (wellFormed) {  		headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  		OnPluralDefinitionChanged ();  	}  }  else {  	entryPluralsForms.ModifyBase (StateType.Normal);  	headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  	OnPluralDefinitionChanged ();  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (!String.IsNullOrEmpty (entryPluralsForms.Text)) {  	PluralFormsCalculator calc = new PluralFormsCalculator ();  	PluralFormsScanner scanner = new PluralFormsScanner (entryPluralsForms.Text);  	PluralFormsParser parser = new PluralFormsParser (scanner);  	bool wellFormed = parser.Parse (calc);  	if (wellFormed) {  		for (int i = 0; i < headers.PluralFormsCount; i++) {  			int example = 0;  			for (example = 1; example < 1000; example++) {  				if (calc.Evaluate (example) == i)  					break;  			}  			if (example == 1000 && calc.Evaluate (0) == i)  				example = 0;  			if (i > 0 && (example == 0 || example == 1000)) {  				wellFormed = false;  				break;  			}  		}  	}  	Gdk.Color background = wellFormed ? new Gdk.Color (138' 226' 52) : new Gdk.Color (204' 0' 0);  	entryPluralsForms.ModifyBase (StateType.Normal' background);  	//from tango palete - 8ae234 green' cc0000 red  	if (wellFormed) {  		headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  		OnPluralDefinitionChanged ();  	}  }  else {  	entryPluralsForms.ModifyBase (StateType.Normal);  	headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  	OnPluralDefinitionChanged ();  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (!String.IsNullOrEmpty (entryPluralsForms.Text)) {  	PluralFormsCalculator calc = new PluralFormsCalculator ();  	PluralFormsScanner scanner = new PluralFormsScanner (entryPluralsForms.Text);  	PluralFormsParser parser = new PluralFormsParser (scanner);  	bool wellFormed = parser.Parse (calc);  	if (wellFormed) {  		for (int i = 0; i < headers.PluralFormsCount; i++) {  			int example = 0;  			for (example = 1; example < 1000; example++) {  				if (calc.Evaluate (example) == i)  					break;  			}  			if (example == 1000 && calc.Evaluate (0) == i)  				example = 0;  			if (i > 0 && (example == 0 || example == 1000)) {  				wellFormed = false;  				break;  			}  		}  	}  	Gdk.Color background = wellFormed ? new Gdk.Color (138' 226' 52) : new Gdk.Color (204' 0' 0);  	entryPluralsForms.ModifyBase (StateType.Normal' background);  	//from tango palete - 8ae234 green' cc0000 red  	if (wellFormed) {  		headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  		OnPluralDefinitionChanged ();  	}  }  else {  	entryPluralsForms.ModifyBase (StateType.Normal);  	headers.SetHeaderNotEmpty ("Plural-Forms"' entryPluralsForms.Text);  	OnPluralDefinitionChanged ();  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (wellFormed) {  	for (int i = 0; i < headers.PluralFormsCount; i++) {  		int example = 0;  		for (example = 1; example < 1000; example++) {  			if (calc.Evaluate (example) == i)  				break;  		}  		if (example == 1000 && calc.Evaluate (0) == i)  			example = 0;  		if (i > 0 && (example == 0 || example == 1000)) {  			wellFormed = false;  			break;  		}  	}  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (wellFormed) {  	for (int i = 0; i < headers.PluralFormsCount; i++) {  		int example = 0;  		for (example = 1; example < 1000; example++) {  			if (calc.Evaluate (example) == i)  				break;  		}  		if (example == 1000 && calc.Evaluate (0) == i)  			example = 0;  		if (i > 0 && (example == 0 || example == 1000)) {  			wellFormed = false;  			break;  		}  	}  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (wellFormed) {  	for (int i = 0; i < headers.PluralFormsCount; i++) {  		int example = 0;  		for (example = 1; example < 1000; example++) {  			if (calc.Evaluate (example) == i)  				break;  		}  		if (example == 1000 && calc.Evaluate (0) == i)  			example = 0;  		if (i > 0 && (example == 0 || example == 1000)) {  			wellFormed = false;  			break;  		}  	}  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: for (int i = 0; i < headers.PluralFormsCount; i++) {  	int example = 0;  	for (example = 1; example < 1000; example++) {  		if (calc.Evaluate (example) == i)  			break;  	}  	if (example == 1000 && calc.Evaluate (0) == i)  		example = 0;  	if (i > 0 && (example == 0 || example == 1000)) {  		wellFormed = false;  		break;  	}  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: for (int i = 0; i < headers.PluralFormsCount; i++) {  	int example = 0;  	for (example = 1; example < 1000; example++) {  		if (calc.Evaluate (example) == i)  			break;  	}  	if (example == 1000 && calc.Evaluate (0) == i)  		example = 0;  	if (i > 0 && (example == 0 || example == 1000)) {  		wellFormed = false;  		break;  	}  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: for (int i = 0; i < headers.PluralFormsCount; i++) {  	int example = 0;  	for (example = 1; example < 1000; example++) {  		if (calc.Evaluate (example) == i)  			break;  	}  	if (example == 1000 && calc.Evaluate (0) == i)  		example = 0;  	if (i > 0 && (example == 0 || example == 1000)) {  		wellFormed = false;  		break;  	}  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: for (example = 1; example < 1000; example++) {  	if (calc.Evaluate (example) == i)  		break;  }  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (example == 1000 && calc.Evaluate (0) == i)  	example = 0;  
Magic Number,MonoDevelop.Gettext.Editor,CatalogHeadersWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\CatalogHeadersWidget.cs,OnHeaderChanged,The following statement contains a magic number: if (i > 0 && (example == 0 || example == 1000)) {  	wellFormed = false;  	break;  }  
Magic Number,MonoDevelop.Gettext,Translation,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Translation.cs,GetProgramFilesX86,The following statement contains a magic number: return Environment.GetFolderPath (IntPtr.Size == 8 ? Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles);  
Magic Number,MonoDevelop.Gettext,TranslationProjectOptionsDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProjectOptionsDialog.cs,TranslationProjectOptionsDialog,The following statement contains a magic number: col.AddAttribute (cellRendererToggle' "visible"' 4);  
Magic Number,MonoDevelop.Gettext,TranslationProjectOptionsDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProjectOptionsDialog.cs,TranslationProjectOptionsDialog,The following statement contains a magic number: col.AddAttribute (crt' "text"' 2);  
Magic Number,MonoDevelop.Gettext,TranslationProjectOptionsDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\TranslationProjectOptionsDialog.cs,ActiveToggled,The following statement contains a magic number: if (store.GetIterFromString (out iter' e.Path)) {  	bool isTogglod = (bool)store.GetValue (iter' 1);  	SolutionItem entry = (SolutionItem)store.GetValue (iter' 3);  	if (entry is Project) {  		TranslationProjectInformation info = project.GetProjectInformation (entry' true);  		info.IsIncluded = !isTogglod;  		store.SetValue (iter' 1' !isTogglod);  	}  }  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,POEditorWidget,The following statement contains a magic number: translatedColumn.SortColumnId = 2;  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,POEditorWidget,The following statement contains a magic number: treeviewFoundIn.GetColumn (1).FixedWidth = 100;  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,UpdateProgressBar,The following statement contains a magic number: percentage = percentage / 100;  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,GetTypeSortIndicator,The following statement contains a magic number: return entry.IsFuzzy ? 1 : entry.IsTranslated ? 0 : 2;  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,UpdateFromCatalog,The following statement contains a magic number: newStore.SetSortFunc (2' delegate (TreeModel model' TreeIter iter1' TreeIter iter2) {  	CatalogEntry entry1 = (CatalogEntry)model.GetValue (iter1' 0);  	CatalogEntry entry2 = (CatalogEntry)model.GetValue (iter2' 0);  	return entry1.GetTranslation (0).CompareTo (entry2.GetTranslation (0));  });  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,SelectEntry,The following statement contains a magic number: if (store.GetIterFirst (out iter)) {  	do {  		CatalogEntry curEntry = store.GetValue (iter' 4) as CatalogEntry;  		if (entry == curEntry) {  			this.treeviewEntries.Selection.SelectIter (iter);  			TreePath iterPath = store.GetPath (iter);  			if (!IsVisible (iterPath))  				this.treeviewEntries.ScrollToCell (iterPath' treeviewEntries.GetColumn (0)' true' 0' 0);  			return;  		}  	}  	while (store.IterNext (ref iter));  }  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,SelectEntry,The following statement contains a magic number: do {  	CatalogEntry curEntry = store.GetValue (iter' 4) as CatalogEntry;  	if (entry == curEntry) {  		this.treeviewEntries.Selection.SelectIter (iter);  		TreePath iterPath = store.GetPath (iter);  		if (!IsVisible (iterPath))  			this.treeviewEntries.ScrollToCell (iterPath' treeviewEntries.GetColumn (0)' true' 0' 0);  		return;  	}  }  while (store.IterNext (ref iter));  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,StopTaskWorkerThread,The following statement contains a magic number: while (count++ < 5 && updateTaskThread.IsBusy) {  	Thread.Sleep (20);  }  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,StopTaskWorkerThread,The following statement contains a magic number: while (count++ < 5 && updateTaskThread.IsBusy) {  	Thread.Sleep (20);  }  
Magic Number,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,StopTaskWorkerThread,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,FormatMessageForFile,The following statement contains a magic number: if (prefix.Length + escaped.Length < 77 && !escaped.Contains ("\\n")) {  	sw.Write (prefix);  	sw.Write (" \"");  	sw.Write (escaped);  	sw.Write ("\"");  	sw.WriteLine ();  	return;  }  
Magic Number,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,FormatMessageForFile,The following statement contains a magic number: while (pos < escaped.Length) {  	char c = escaped [pos];  	//handle escapes			  	if (c == '\\' && pos + 1 < escaped.Length) {  		pos++;  		currLineLen++;  		char c2 = escaped [pos];  		if (c2 == 'n') {  			possibleBreak = pos + 1;  			forceBreak = true;  		}  		else if (c2 == 't') {  			possibleBreak = pos + 1;  		}  	}  	if (c == ' ')  		possibleBreak = pos + 1;  	if (forceBreak || (currLineLen >= 77 && possibleBreak != -1)) {  		sw.Write ("\"");  		sw.Write (escaped.Substring (lastBreakAt' possibleBreak - lastBreakAt));  		sw.Write ("\"");  		sw.WriteLine ();  		//reset state for new line  		currLineLen = 0;  		lastBreakAt = possibleBreak;  		possibleBreak = -1;  		forceBreak = false;  	}  	pos++;  	currLineLen++;  }  
Magic Number,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,FormatMessageForFile,The following statement contains a magic number: if (forceBreak || (currLineLen >= 77 && possibleBreak != -1)) {  	sw.Write ("\"");  	sw.Write (escaped.Substring (lastBreakAt' possibleBreak - lastBreakAt));  	sw.Write ("\"");  	sw.WriteLine ();  	//reset state for new line  	currLineLen = 0;  	lastBreakAt = possibleBreak;  	possibleBreak = -1;  	forceBreak = false;  }  
Magic Number,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,UpdatePluralsCount,The following statement contains a magic number: nplurals = 2;  
Magic Number,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,ParseHeaderDict,The following statement contains a magic number: if (!String.IsNullOrEmpty (dummy)) {  	string[] tokens = dummy.Split ('<'' '>');  	if (tokens.Length < 2) {  		Translator = dummy;  		TranslatorEmail = String.Empty;  	}  	else {  		Translator = tokens [0].Trim ();  		TranslatorEmail = tokens [1].Trim ();  	}  }  
Magic Number,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,ParseHeaderDict,The following statement contains a magic number: if (tokens.Length < 2) {  	Translator = dummy;  	TranslatorEmail = String.Empty;  }  else {  	Translator = tokens [0].Trim ();  	TranslatorEmail = tokens [1].Trim ();  }  
Magic Number,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,ParseHeaderDict,The following statement contains a magic number: if (!String.IsNullOrEmpty (dummy)) {  	string[] tokens = dummy.Split ('<'' '>');  	if (tokens.Length < 2) {  		Team = dummy;  		TeamEmail = String.Empty;  	}  	else {  		Team = tokens [0].Trim ();  		TeamEmail = tokens [1].Trim ();  	}  }  
Magic Number,MonoDevelop.Gettext,Catalog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\Catalog.cs,ParseHeaderDict,The following statement contains a magic number: if (tokens.Length < 2) {  	Team = dummy;  	TeamEmail = String.Empty;  }  else {  	Team = tokens [0].Trim ();  	TeamEmail = tokens [1].Trim ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,ParseMessage,The following statement contains a magic number: while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  	if (line [0] == '\t')  		line = line.Substring (1);  	if (line [0] == '"' && line [line.Length - 1] == '"') {  		result.Append (StringEscaping.FromGettextFormat (line.Substring (1' line.Length - 2)));  	}  	else  		break;  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,ParseMessage,The following statement contains a magic number: if (line [0] == '"' && line [line.Length - 1] == '"') {  	result.Append (StringEscaping.FromGettextFormat (line.Substring (1' line.Length - 2)));  }  else  	break;  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,ParseMessage,The following statement contains a magic number: result.Append (StringEscaping.FromGettextFormat (line.Substring (1' line.Length - 2)));  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: using (StreamReader sr = new StreamReader (fileName' encoding)) {  	line = sr.ReadLine ();  	while (line == "")  		line = sr.ReadLine ();  	if (line == null)  		return false;  	while (line != null) {  		// ignore empty special tags (except for automatic comments which we  		// DO want to preserve):  		while (line == "#'" || line == "#:")  			line = sr.ReadLine ();  		// flags:  		// Can't we have more than one flag' now only the last is kept ...  		if (CatalogParser.ReadParam (line' "#' "' out dummy)) {  			mflags = dummy;  			//"#' " +  			line = sr.ReadLine ();  		}  		// auto comments:  		if (CatalogParser.ReadParam (line' "#. "' out dummy) || CatalogParser.ReadParam (line' "#."' out dummy))// second one to account for empty auto comments  		 {  			mautocomments.Add (dummy);  			line = sr.ReadLine ();  		}  		// references:  		else if (CatalogParser.ReadParam (line' "#: "' out dummy)) {  			// A line may contain several references' separated by white-space.  			// Each reference is in the form "path_name:line_number"  			// (path_name may contain spaces)  			dummy = dummy.Trim ();  			while (dummy != String.Empty) {  				int i = 0;  				while (i < dummy.Length && dummy [i] != ':') {  					i++;  				}  				while (i < dummy.Length && !Char.IsWhiteSpace (dummy [i])) {  					i++;  				}  				//store paths as Unix-type paths' but internally use native style  				string refpath = dummy.Substring (0' i);  				if (MonoDevelop.Core.Platform.IsWindows) {  					refpath = refpath.Replace ('/'' '\\');  				}  				mrefs.Add (refpath);  				dummy = dummy.Substring (i).Trim ();  			}  			line = sr.ReadLine ();  		}  		// msgid:  		else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  			mstr = ParseMessage (ref line' ref dummy' sr);  		}  		// msgid_plural:  		else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  			msgidPlural = ParseMessage (ref line' ref dummy' sr);  			hasPlural = true;  		}  		// msgstr:  		else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  			if (hasPlural) {  				// TODO: use logging  				Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  				return false;  			}  			string str = ParseMessage (ref line' ref dummy' sr);  			mtranslations.Add (str);  			if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  				return false;  			}  			mcomment = mstr = msgidPlural = mflags = String.Empty;  			hasPlural = false;  			mrefs.Clear ();  			mautocomments.Clear ();  			mtranslations.Clear ();  		}  		else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  			// msgstr[i]:  			if (!hasPlural) {  				// TODO: use logging  				Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  				return false;  			}  			int pos = dummy.IndexOf (']');  			string idx = dummy.Substring (pos - 1' 1);  			string label = "msgstr[" + idx + "]";  			while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  				StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  				while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  					if (line [0] == '\t')  						line = line.Substring (1);  					if (line [0] == '"' && line [line.Length - 1] == '"') {  						str.Append (line.Substring (1' line.Length - 2));  					}  					else {  						if (ReadParam (line' "msgstr["' out dummy)) {  							pos = dummy.IndexOf (']');  							idx = dummy.Substring (pos - 1' 1);  							label = "msgstr[" + idx + "]";  						}  						break;  					}  				}  				mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  			}  			if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  				return false;  			}  			mcomment = mstr = msgidPlural = mflags = String.Empty;  			hasPlural = false;  			mrefs.Clear ();  			mautocomments.Clear ();  			mtranslations.Clear ();  		}  		else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  			// deleted lines:  			List<string> deletedLines = new List<string> ();  			deletedLines.Add (line);  			while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  				// if line does not start with "#~ " anymore' stop reading  				if (!ReadParam (line' "#~ "' out dummy))  					break;  				deletedLines.Add (line);  			}  			if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  				return false;  			mcomment = mstr = msgidPlural = mflags = String.Empty;  			hasPlural = false;  			mrefs.Clear ();  			mautocomments.Clear ();  			mtranslations.Clear ();  		}  		else if (line != null && line [0] == '#') {  			// comment:  			//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  			while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  				mcomment += mcomment.Length > 0 ? '\n' + line : line;  				line = sr.ReadLine ();  			}  		}  		else {  			line = sr.ReadLine ();  		}  		while (line == String.Empty)  			line = sr.ReadLine ();  	}  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: using (StreamReader sr = new StreamReader (fileName' encoding)) {  	line = sr.ReadLine ();  	while (line == "")  		line = sr.ReadLine ();  	if (line == null)  		return false;  	while (line != null) {  		// ignore empty special tags (except for automatic comments which we  		// DO want to preserve):  		while (line == "#'" || line == "#:")  			line = sr.ReadLine ();  		// flags:  		// Can't we have more than one flag' now only the last is kept ...  		if (CatalogParser.ReadParam (line' "#' "' out dummy)) {  			mflags = dummy;  			//"#' " +  			line = sr.ReadLine ();  		}  		// auto comments:  		if (CatalogParser.ReadParam (line' "#. "' out dummy) || CatalogParser.ReadParam (line' "#."' out dummy))// second one to account for empty auto comments  		 {  			mautocomments.Add (dummy);  			line = sr.ReadLine ();  		}  		// references:  		else if (CatalogParser.ReadParam (line' "#: "' out dummy)) {  			// A line may contain several references' separated by white-space.  			// Each reference is in the form "path_name:line_number"  			// (path_name may contain spaces)  			dummy = dummy.Trim ();  			while (dummy != String.Empty) {  				int i = 0;  				while (i < dummy.Length && dummy [i] != ':') {  					i++;  				}  				while (i < dummy.Length && !Char.IsWhiteSpace (dummy [i])) {  					i++;  				}  				//store paths as Unix-type paths' but internally use native style  				string refpath = dummy.Substring (0' i);  				if (MonoDevelop.Core.Platform.IsWindows) {  					refpath = refpath.Replace ('/'' '\\');  				}  				mrefs.Add (refpath);  				dummy = dummy.Substring (i).Trim ();  			}  			line = sr.ReadLine ();  		}  		// msgid:  		else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  			mstr = ParseMessage (ref line' ref dummy' sr);  		}  		// msgid_plural:  		else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  			msgidPlural = ParseMessage (ref line' ref dummy' sr);  			hasPlural = true;  		}  		// msgstr:  		else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  			if (hasPlural) {  				// TODO: use logging  				Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  				return false;  			}  			string str = ParseMessage (ref line' ref dummy' sr);  			mtranslations.Add (str);  			if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  				return false;  			}  			mcomment = mstr = msgidPlural = mflags = String.Empty;  			hasPlural = false;  			mrefs.Clear ();  			mautocomments.Clear ();  			mtranslations.Clear ();  		}  		else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  			// msgstr[i]:  			if (!hasPlural) {  				// TODO: use logging  				Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  				return false;  			}  			int pos = dummy.IndexOf (']');  			string idx = dummy.Substring (pos - 1' 1);  			string label = "msgstr[" + idx + "]";  			while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  				StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  				while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  					if (line [0] == '\t')  						line = line.Substring (1);  					if (line [0] == '"' && line [line.Length - 1] == '"') {  						str.Append (line.Substring (1' line.Length - 2));  					}  					else {  						if (ReadParam (line' "msgstr["' out dummy)) {  							pos = dummy.IndexOf (']');  							idx = dummy.Substring (pos - 1' 1);  							label = "msgstr[" + idx + "]";  						}  						break;  					}  				}  				mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  			}  			if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  				return false;  			}  			mcomment = mstr = msgidPlural = mflags = String.Empty;  			hasPlural = false;  			mrefs.Clear ();  			mautocomments.Clear ();  			mtranslations.Clear ();  		}  		else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  			// deleted lines:  			List<string> deletedLines = new List<string> ();  			deletedLines.Add (line);  			while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  				// if line does not start with "#~ " anymore' stop reading  				if (!ReadParam (line' "#~ "' out dummy))  					break;  				deletedLines.Add (line);  			}  			if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  				return false;  			mcomment = mstr = msgidPlural = mflags = String.Empty;  			hasPlural = false;  			mrefs.Clear ();  			mautocomments.Clear ();  			mtranslations.Clear ();  		}  		else if (line != null && line [0] == '#') {  			// comment:  			//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  			while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  				mcomment += mcomment.Length > 0 ? '\n' + line : line;  				line = sr.ReadLine ();  			}  		}  		else {  			line = sr.ReadLine ();  		}  		while (line == String.Empty)  			line = sr.ReadLine ();  	}  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: while (line != null) {  	// ignore empty special tags (except for automatic comments which we  	// DO want to preserve):  	while (line == "#'" || line == "#:")  		line = sr.ReadLine ();  	// flags:  	// Can't we have more than one flag' now only the last is kept ...  	if (CatalogParser.ReadParam (line' "#' "' out dummy)) {  		mflags = dummy;  		//"#' " +  		line = sr.ReadLine ();  	}  	// auto comments:  	if (CatalogParser.ReadParam (line' "#. "' out dummy) || CatalogParser.ReadParam (line' "#."' out dummy))// second one to account for empty auto comments  	 {  		mautocomments.Add (dummy);  		line = sr.ReadLine ();  	}  	// references:  	else if (CatalogParser.ReadParam (line' "#: "' out dummy)) {  		// A line may contain several references' separated by white-space.  		// Each reference is in the form "path_name:line_number"  		// (path_name may contain spaces)  		dummy = dummy.Trim ();  		while (dummy != String.Empty) {  			int i = 0;  			while (i < dummy.Length && dummy [i] != ':') {  				i++;  			}  			while (i < dummy.Length && !Char.IsWhiteSpace (dummy [i])) {  				i++;  			}  			//store paths as Unix-type paths' but internally use native style  			string refpath = dummy.Substring (0' i);  			if (MonoDevelop.Core.Platform.IsWindows) {  				refpath = refpath.Replace ('/'' '\\');  			}  			mrefs.Add (refpath);  			dummy = dummy.Substring (i).Trim ();  		}  		line = sr.ReadLine ();  	}  	// msgid:  	else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  		mstr = ParseMessage (ref line' ref dummy' sr);  	}  	// msgid_plural:  	else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  		msgidPlural = ParseMessage (ref line' ref dummy' sr);  		hasPlural = true;  	}  	// msgstr:  	else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  		if (hasPlural) {  			// TODO: use logging  			Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  			return false;  		}  		string str = ParseMessage (ref line' ref dummy' sr);  		mtranslations.Add (str);  		if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  			return false;  		}  		mcomment = mstr = msgidPlural = mflags = String.Empty;  		hasPlural = false;  		mrefs.Clear ();  		mautocomments.Clear ();  		mtranslations.Clear ();  	}  	else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  		// msgstr[i]:  		if (!hasPlural) {  			// TODO: use logging  			Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  			return false;  		}  		int pos = dummy.IndexOf (']');  		string idx = dummy.Substring (pos - 1' 1);  		string label = "msgstr[" + idx + "]";  		while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  			StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  			while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  				if (line [0] == '\t')  					line = line.Substring (1);  				if (line [0] == '"' && line [line.Length - 1] == '"') {  					str.Append (line.Substring (1' line.Length - 2));  				}  				else {  					if (ReadParam (line' "msgstr["' out dummy)) {  						pos = dummy.IndexOf (']');  						idx = dummy.Substring (pos - 1' 1);  						label = "msgstr[" + idx + "]";  					}  					break;  				}  			}  			mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  		}  		if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  			return false;  		}  		mcomment = mstr = msgidPlural = mflags = String.Empty;  		hasPlural = false;  		mrefs.Clear ();  		mautocomments.Clear ();  		mtranslations.Clear ();  	}  	else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  		// deleted lines:  		List<string> deletedLines = new List<string> ();  		deletedLines.Add (line);  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			// if line does not start with "#~ " anymore' stop reading  			if (!ReadParam (line' "#~ "' out dummy))  				break;  			deletedLines.Add (line);  		}  		if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  			return false;  		mcomment = mstr = msgidPlural = mflags = String.Empty;  		hasPlural = false;  		mrefs.Clear ();  		mautocomments.Clear ();  		mtranslations.Clear ();  	}  	else if (line != null && line [0] == '#') {  		// comment:  		//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  		while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  			mcomment += mcomment.Length > 0 ? '\n' + line : line;  			line = sr.ReadLine ();  		}  	}  	else {  		line = sr.ReadLine ();  	}  	while (line == String.Empty)  		line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: while (line != null) {  	// ignore empty special tags (except for automatic comments which we  	// DO want to preserve):  	while (line == "#'" || line == "#:")  		line = sr.ReadLine ();  	// flags:  	// Can't we have more than one flag' now only the last is kept ...  	if (CatalogParser.ReadParam (line' "#' "' out dummy)) {  		mflags = dummy;  		//"#' " +  		line = sr.ReadLine ();  	}  	// auto comments:  	if (CatalogParser.ReadParam (line' "#. "' out dummy) || CatalogParser.ReadParam (line' "#."' out dummy))// second one to account for empty auto comments  	 {  		mautocomments.Add (dummy);  		line = sr.ReadLine ();  	}  	// references:  	else if (CatalogParser.ReadParam (line' "#: "' out dummy)) {  		// A line may contain several references' separated by white-space.  		// Each reference is in the form "path_name:line_number"  		// (path_name may contain spaces)  		dummy = dummy.Trim ();  		while (dummy != String.Empty) {  			int i = 0;  			while (i < dummy.Length && dummy [i] != ':') {  				i++;  			}  			while (i < dummy.Length && !Char.IsWhiteSpace (dummy [i])) {  				i++;  			}  			//store paths as Unix-type paths' but internally use native style  			string refpath = dummy.Substring (0' i);  			if (MonoDevelop.Core.Platform.IsWindows) {  				refpath = refpath.Replace ('/'' '\\');  			}  			mrefs.Add (refpath);  			dummy = dummy.Substring (i).Trim ();  		}  		line = sr.ReadLine ();  	}  	// msgid:  	else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  		mstr = ParseMessage (ref line' ref dummy' sr);  	}  	// msgid_plural:  	else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  		msgidPlural = ParseMessage (ref line' ref dummy' sr);  		hasPlural = true;  	}  	// msgstr:  	else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  		if (hasPlural) {  			// TODO: use logging  			Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  			return false;  		}  		string str = ParseMessage (ref line' ref dummy' sr);  		mtranslations.Add (str);  		if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  			return false;  		}  		mcomment = mstr = msgidPlural = mflags = String.Empty;  		hasPlural = false;  		mrefs.Clear ();  		mautocomments.Clear ();  		mtranslations.Clear ();  	}  	else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  		// msgstr[i]:  		if (!hasPlural) {  			// TODO: use logging  			Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  			return false;  		}  		int pos = dummy.IndexOf (']');  		string idx = dummy.Substring (pos - 1' 1);  		string label = "msgstr[" + idx + "]";  		while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  			StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  			while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  				if (line [0] == '\t')  					line = line.Substring (1);  				if (line [0] == '"' && line [line.Length - 1] == '"') {  					str.Append (line.Substring (1' line.Length - 2));  				}  				else {  					if (ReadParam (line' "msgstr["' out dummy)) {  						pos = dummy.IndexOf (']');  						idx = dummy.Substring (pos - 1' 1);  						label = "msgstr[" + idx + "]";  					}  					break;  				}  			}  			mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  		}  		if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  			return false;  		}  		mcomment = mstr = msgidPlural = mflags = String.Empty;  		hasPlural = false;  		mrefs.Clear ();  		mautocomments.Clear ();  		mtranslations.Clear ();  	}  	else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  		// deleted lines:  		List<string> deletedLines = new List<string> ();  		deletedLines.Add (line);  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			// if line does not start with "#~ " anymore' stop reading  			if (!ReadParam (line' "#~ "' out dummy))  				break;  			deletedLines.Add (line);  		}  		if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  			return false;  		mcomment = mstr = msgidPlural = mflags = String.Empty;  		hasPlural = false;  		mrefs.Clear ();  		mautocomments.Clear ();  		mtranslations.Clear ();  	}  	else if (line != null && line [0] == '#') {  		// comment:  		//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  		while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  			mcomment += mcomment.Length > 0 ? '\n' + line : line;  			line = sr.ReadLine ();  		}  	}  	else {  		line = sr.ReadLine ();  	}  	while (line == String.Empty)  		line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "#. "' out dummy) || CatalogParser.ReadParam (line' "#."' out dummy))// second one to account for empty auto comments   {  	mautocomments.Add (dummy);  	line = sr.ReadLine ();  }  // references:  else if (CatalogParser.ReadParam (line' "#: "' out dummy)) {  	// A line may contain several references' separated by white-space.  	// Each reference is in the form "path_name:line_number"  	// (path_name may contain spaces)  	dummy = dummy.Trim ();  	while (dummy != String.Empty) {  		int i = 0;  		while (i < dummy.Length && dummy [i] != ':') {  			i++;  		}  		while (i < dummy.Length && !Char.IsWhiteSpace (dummy [i])) {  			i++;  		}  		//store paths as Unix-type paths' but internally use native style  		string refpath = dummy.Substring (0' i);  		if (MonoDevelop.Core.Platform.IsWindows) {  			refpath = refpath.Replace ('/'' '\\');  		}  		mrefs.Add (refpath);  		dummy = dummy.Substring (i).Trim ();  	}  	line = sr.ReadLine ();  }  // msgid:  else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  	mstr = ParseMessage (ref line' ref dummy' sr);  }  // msgid_plural:  else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  	msgidPlural = ParseMessage (ref line' ref dummy' sr);  	hasPlural = true;  }  // msgstr:  else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "#. "' out dummy) || CatalogParser.ReadParam (line' "#."' out dummy))// second one to account for empty auto comments   {  	mautocomments.Add (dummy);  	line = sr.ReadLine ();  }  // references:  else if (CatalogParser.ReadParam (line' "#: "' out dummy)) {  	// A line may contain several references' separated by white-space.  	// Each reference is in the form "path_name:line_number"  	// (path_name may contain spaces)  	dummy = dummy.Trim ();  	while (dummy != String.Empty) {  		int i = 0;  		while (i < dummy.Length && dummy [i] != ':') {  			i++;  		}  		while (i < dummy.Length && !Char.IsWhiteSpace (dummy [i])) {  			i++;  		}  		//store paths as Unix-type paths' but internally use native style  		string refpath = dummy.Substring (0' i);  		if (MonoDevelop.Core.Platform.IsWindows) {  			refpath = refpath.Replace ('/'' '\\');  		}  		mrefs.Add (refpath);  		dummy = dummy.Substring (i).Trim ();  	}  	line = sr.ReadLine ();  }  // msgid:  else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  	mstr = ParseMessage (ref line' ref dummy' sr);  }  // msgid_plural:  else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  	msgidPlural = ParseMessage (ref line' ref dummy' sr);  	hasPlural = true;  }  // msgstr:  else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "#: "' out dummy)) {  	// A line may contain several references' separated by white-space.  	// Each reference is in the form "path_name:line_number"  	// (path_name may contain spaces)  	dummy = dummy.Trim ();  	while (dummy != String.Empty) {  		int i = 0;  		while (i < dummy.Length && dummy [i] != ':') {  			i++;  		}  		while (i < dummy.Length && !Char.IsWhiteSpace (dummy [i])) {  			i++;  		}  		//store paths as Unix-type paths' but internally use native style  		string refpath = dummy.Substring (0' i);  		if (MonoDevelop.Core.Platform.IsWindows) {  			refpath = refpath.Replace ('/'' '\\');  		}  		mrefs.Add (refpath);  		dummy = dummy.Substring (i).Trim ();  	}  	line = sr.ReadLine ();  }  // msgid:  else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  	mstr = ParseMessage (ref line' ref dummy' sr);  }  // msgid_plural:  else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  	msgidPlural = ParseMessage (ref line' ref dummy' sr);  	hasPlural = true;  }  // msgstr:  else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "#: "' out dummy)) {  	// A line may contain several references' separated by white-space.  	// Each reference is in the form "path_name:line_number"  	// (path_name may contain spaces)  	dummy = dummy.Trim ();  	while (dummy != String.Empty) {  		int i = 0;  		while (i < dummy.Length && dummy [i] != ':') {  			i++;  		}  		while (i < dummy.Length && !Char.IsWhiteSpace (dummy [i])) {  			i++;  		}  		//store paths as Unix-type paths' but internally use native style  		string refpath = dummy.Substring (0' i);  		if (MonoDevelop.Core.Platform.IsWindows) {  			refpath = refpath.Replace ('/'' '\\');  		}  		mrefs.Add (refpath);  		dummy = dummy.Substring (i).Trim ();  	}  	line = sr.ReadLine ();  }  // msgid:  else if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  	mstr = ParseMessage (ref line' ref dummy' sr);  }  // msgid_plural:  else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  	msgidPlural = ParseMessage (ref line' ref dummy' sr);  	hasPlural = true;  }  // msgstr:  else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  	mstr = ParseMessage (ref line' ref dummy' sr);  }  // msgid_plural:  else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  	msgidPlural = ParseMessage (ref line' ref dummy' sr);  	hasPlural = true;  }  // msgstr:  else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "msgid \""' out dummy) || CatalogParser.ReadParam (line' "msgid\t\""' out dummy)) {  	mstr = ParseMessage (ref line' ref dummy' sr);  }  // msgid_plural:  else if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  	msgidPlural = ParseMessage (ref line' ref dummy' sr);  	hasPlural = true;  }  // msgstr:  else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  	msgidPlural = ParseMessage (ref line' ref dummy' sr);  	hasPlural = true;  }  // msgstr:  else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "msgid_plural \""' out dummy) || CatalogParser.ReadParam (line' "msgid_plural\t\""' out dummy)) {  	msgidPlural = ParseMessage (ref line' ref dummy' sr);  	hasPlural = true;  }  // msgstr:  else if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "msgstr \""' out dummy) || CatalogParser.ReadParam (line' "msgstr\t\""' out dummy)) {  	if (hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: singular form msgstr used together with msgid_plural");  		return false;  	}  	string str = ParseMessage (ref line' ref dummy' sr);  	mtranslations.Add (str);  	if (!OnEntry (mstr' String.Empty' false' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "msgstr["' out dummy)) {  	// msgstr[i]:  	if (!hasPlural) {  		// TODO: use logging  		Console.WriteLine ("Broken catalog file: plural form msgstr used without msgid_plural");  		return false;  	}  	int pos = dummy.IndexOf (']');  	string idx = dummy.Substring (pos - 1' 1);  	string label = "msgstr[" + idx + "]";  	while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  		StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  		while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  			if (line [0] == '\t')  				line = line.Substring (1);  			if (line [0] == '"' && line [line.Length - 1] == '"') {  				str.Append (line.Substring (1' line.Length - 2));  			}  			else {  				if (ReadParam (line' "msgstr["' out dummy)) {  					pos = dummy.IndexOf (']');  					idx = dummy.Substring (pos - 1' 1);  					label = "msgstr[" + idx + "]";  				}  				break;  			}  		}  		mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  	}  	if (!OnEntry (mstr' msgidPlural' true' mtranslations.ToArray ()' mflags' mrefs.ToArray ()' mcomment' mautocomments.ToArray ())) {  		return false;  	}  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: while (CatalogParser.ReadParam (line' label + " \""' out dummy) || CatalogParser.ReadParam (line' label + "\t\""' out dummy)) {  	StringBuilder str = new StringBuilder (dummy.Substring (0' dummy.Length - 1));  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		if (line [0] == '\t')  			line = line.Substring (1);  		if (line [0] == '"' && line [line.Length - 1] == '"') {  			str.Append (line.Substring (1' line.Length - 2));  		}  		else {  			if (ReadParam (line' "msgstr["' out dummy)) {  				pos = dummy.IndexOf (']');  				idx = dummy.Substring (pos - 1' 1);  				label = "msgstr[" + idx + "]";  			}  			break;  		}  	}  	mtranslations.Add (StringEscaping.FromGettextFormat (str.ToString ()));  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  	if (line [0] == '\t')  		line = line.Substring (1);  	if (line [0] == '"' && line [line.Length - 1] == '"') {  		str.Append (line.Substring (1' line.Length - 2));  	}  	else {  		if (ReadParam (line' "msgstr["' out dummy)) {  			pos = dummy.IndexOf (']');  			idx = dummy.Substring (pos - 1' 1);  			label = "msgstr[" + idx + "]";  		}  		break;  	}  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (line [0] == '"' && line [line.Length - 1] == '"') {  	str.Append (line.Substring (1' line.Length - 2));  }  else {  	if (ReadParam (line' "msgstr["' out dummy)) {  		pos = dummy.IndexOf (']');  		idx = dummy.Substring (pos - 1' 1);  		label = "msgstr[" + idx + "]";  	}  	break;  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: str.Append (line.Substring (1' line.Length - 2));  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (CatalogParser.ReadParam (line' "#~ "' out dummy)) {  	// deleted lines:  	List<string> deletedLines = new List<string> ();  	deletedLines.Add (line);  	while (!String.IsNullOrEmpty (line = sr.ReadLine ())) {  		// if line does not start with "#~ " anymore' stop reading  		if (!ReadParam (line' "#~ "' out dummy))  			break;  		deletedLines.Add (line);  	}  	if (!OnDeletedEntry (deletedLines.ToArray ()' mflags' null' mcomment' mautocomments.ToArray ()))  		return false;  	mcomment = mstr = msgidPlural = mflags = String.Empty;  	hasPlural = false;  	mrefs.Clear ();  	mautocomments.Clear ();  	mtranslations.Clear ();  }  else if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: if (line != null && line [0] == '#') {  	// comment:  	//  added line[1] != '~' check as deleted lines where being wrongly detected as comments  	while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  		mcomment += mcomment.Length > 0 ? '\n' + line : line;  		line = sr.ReadLine ();  	}  }  else {  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,CatalogParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\CatalogParser.cs,Parse,The following statement contains a magic number: while (!String.IsNullOrEmpty (line) && ((line [0] == '#' && line.Length < 2) || (line [0] == '#' && line [1] != ''' && line [1] != ':' && line [1] != '.' && line [1] != '~'))) {  	mcomment += mcomment.Length > 0 ? '\n' + line : line;  	line = sr.ReadLine ();  }  
Magic Number,MonoDevelop.Gettext,GettextTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\GettextTool.cs,ReadArgument,The following statement contains a magic number: if (argument.StartsWith ("--")) {  	optionValuePair = argument.Substring (2);  }  else if (argument.StartsWith ("/") || argument.StartsWith ("-")) {  	optionValuePair = argument.Substring (1);  }  else  	return;  
Magic Number,MonoDevelop.Gettext,GettextTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\GettextTool.cs,ReadArgument,The following statement contains a magic number: optionValuePair = argument.Substring (2);  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos >= str.Length || str [pos] == '\0') {  	type = PluralFormsToken.Type.Eof;  }  else if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos >= str.Length || str [pos] == '\0') {  	type = PluralFormsToken.Type.Eof;  }  else if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos >= str.Length || str [pos] == '\0') {  	type = PluralFormsToken.Type.Eof;  }  else if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos >= str.Length || str [pos] == '\0') {  	type = PluralFormsToken.Type.Eof;  }  else if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos >= str.Length || str [pos] == '\0') {  	type = PluralFormsToken.Type.Eof;  }  else if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos >= str.Length || str [pos] == '\0') {  	type = PluralFormsToken.Type.Eof;  }  else if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsDigit (str [pos])) {  	int number = str [pos++] - '0';  	while (pos < str.Length && Char.IsDigit (str [pos])) {  		number = number * 10 + (str [pos++] - '0');  	}  	token.Number = number;  	type = PluralFormsToken.Type.Number;  }  else if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: while (pos < str.Length && Char.IsDigit (str [pos])) {  	number = number * 10 + (str [pos++] - '0');  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: number = number * 10 + (str [pos++] - '0');  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (Char.IsLetter (str [pos])) {  	int begin = pos++;  	while (pos < str.Length && Char.IsLetterOrDigit (str [pos])) {  		++pos;  	}  	int size = pos - begin;  	if (size == 1 && str [begin] == 'n') {  		type = PluralFormsToken.Type.N;  	}  	else if (size == 6 && str.Substring (begin' size) == "plural") {  		type = PluralFormsToken.Type.Plural;  	}  	else if (size == 8 && str.Substring (begin' size) == "nplurals") {  		type = PluralFormsToken.Type.Nplurals;  	}  }  else if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (size == 1 && str [begin] == 'n') {  	type = PluralFormsToken.Type.N;  }  else if (size == 6 && str.Substring (begin' size) == "plural") {  	type = PluralFormsToken.Type.Plural;  }  else if (size == 8 && str.Substring (begin' size) == "nplurals") {  	type = PluralFormsToken.Type.Nplurals;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (size == 1 && str [begin] == 'n') {  	type = PluralFormsToken.Type.N;  }  else if (size == 6 && str.Substring (begin' size) == "plural") {  	type = PluralFormsToken.Type.Plural;  }  else if (size == 8 && str.Substring (begin' size) == "nplurals") {  	type = PluralFormsToken.Type.Nplurals;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (size == 6 && str.Substring (begin' size) == "plural") {  	type = PluralFormsToken.Type.Plural;  }  else if (size == 8 && str.Substring (begin' size) == "nplurals") {  	type = PluralFormsToken.Type.Nplurals;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (size == 6 && str.Substring (begin' size) == "plural") {  	type = PluralFormsToken.Type.Plural;  }  else if (size == 8 && str.Substring (begin' size) == "nplurals") {  	type = PluralFormsToken.Type.Nplurals;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (size == 8 && str.Substring (begin' size) == "nplurals") {  	type = PluralFormsToken.Type.Nplurals;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '=') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.Equal;  	}  	else {  		type = PluralFormsToken.Type.Assign;  	}  }  else if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '>') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.GreaterOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Greater;  	}  }  else if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '<') {  	++pos;  	if (pos < str.Length && str [pos] == '=') {  		++pos;  		type = PluralFormsToken.Type.LessOrEqual;  	}  	else {  		type = PluralFormsToken.Type.Less;  	}  }  else if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '%') {  	++pos;  	type = PluralFormsToken.Type.Reminder;  }  else if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (str [pos] == '!' && str [pos + 1] == '=') {  	pos += 2;  	type = PluralFormsToken.Type.NotEqual;  }  else if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: pos += 2;  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos + 1 < str.Length && str [pos] == '&' && str [pos + 1] == '&') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalAnd;  }  else if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: pos += 2;  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: if (pos + 1 < str.Length && str [pos] == '|' && str [pos + 1] == '|') {  	pos += 2;  	type = PluralFormsToken.Type.LogicalOr;  }  else if (str [pos] == '?') {  	++pos;  	type = PluralFormsToken.Type.Question;  }  else if (str [pos] == ':') {  	++pos;  	type = PluralFormsToken.Type.Colon;  }  else if (str [pos] == ';') {  	++pos;  	type = PluralFormsToken.Type.Semicolon;  }  else if (str [pos] == '(') {  	++pos;  	type = PluralFormsToken.Type.LeftBracket;  }  else if (str [pos] == ')') {  	++pos;  	type = PluralFormsToken.Type.RightBracket;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsScanner,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,NextToken,The following statement contains a magic number: pos += 2;  
Magic Number,MonoDevelop.Gettext,PluralFormsNode,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,Node,The following statement contains a magic number: if (i >= 0 && i <= 2)  	return nodes [i];  else  	return null;  
Magic Number,MonoDevelop.Gettext,PluralFormsNode,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,SetNode,The following statement contains a magic number: if (i >= 0 && i <= 2)  	nodes [i] = n;  
Magic Number,MonoDevelop.Gettext,PluralFormsNode,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,Evaluate,The following statement contains a magic number: switch (token.TokenType) {  // leaf  case PluralFormsToken.Type.Number:  	return token.Number;  case PluralFormsToken.Type.N:  	return n;  // 2 args  case PluralFormsToken.Type.Equal:  	return nodes [0].Evaluate (n) == nodes [1].Evaluate (n) ? 1 : 0;  case PluralFormsToken.Type.NotEqual:  	return nodes [0].Evaluate (n) != nodes [1].Evaluate (n) ? 1 : 0;  case PluralFormsToken.Type.Greater:  	return nodes [0].Evaluate (n) > nodes [1].Evaluate (n) ? 1 : 0;  case PluralFormsToken.Type.GreaterOrEqual:  	return nodes [0].Evaluate (n) >= nodes [1].Evaluate (n) ? 1 : 0;  case PluralFormsToken.Type.Less:  	return nodes [0].Evaluate (n) < nodes [1].Evaluate (n) ? 1 : 0;  case PluralFormsToken.Type.LessOrEqual:  	return nodes [0].Evaluate (n) <= nodes [1].Evaluate (n) ? 1 : 0;  case PluralFormsToken.Type.Reminder:  	int number = nodes [0].Evaluate (n);  	if (number != 0)  		return nodes [0].Evaluate (n) % number;  	else  		return 0;  case PluralFormsToken.Type.LogicalAnd:  	return nodes [0].Evaluate (n) != 0 && nodes [1].Evaluate (n) != 0 ? 1 : 0;  case PluralFormsToken.Type.LogicalOr:  	return nodes [0].Evaluate (n) != 0 || nodes [1].Evaluate (n) != 0 ? 1 : 0;  // 3 args  case PluralFormsToken.Type.Question:  	return nodes [0].Evaluate (n) != 0 ? nodes [1].Evaluate (n) : nodes [2].Evaluate (n);  default:  	return 0;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsNode,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,Evaluate,The following statement contains a magic number: return nodes [0].Evaluate (n) != 0 ? nodes [1].Evaluate (n) : nodes [2].Evaluate (n);  
Magic Number,MonoDevelop.Gettext,PluralFormsParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,Expression,The following statement contains a magic number: if (Token.TokenType == PluralFormsToken.Type.Question) {  	PluralFormsNode qn = new PluralFormsNode (new PluralFormsToken (Token));  	if (!NextToken ()) {  		return null;  	}  	p = Expression ();  	if (p == null) {  		return null;  	}  	qn.SetNode (1' p);  	if (Token.TokenType != PluralFormsToken.Type.Colon) {  		return null;  	}  	if (!NextToken ()) {  		return null;  	}  	p = Expression ();  	if (p == null) {  		return null;  	}  	qn.SetNode (2' p);  	qn.SetNode (0' n);  	return qn;  }  
Magic Number,MonoDevelop.Gettext,PluralFormsParser,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\PluralForms.cs,Expression,The following statement contains a magic number: qn.SetNode (2' p);  
Missing Default,MonoDevelop.Gettext,POEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext.Editor\POEditorWidget.cs,CreateOptionsMenu,The following switch statement is missing a default case: switch (DoSearchIn) {  case SearchIn.Both:  	both.Activate ();  	break;  case SearchIn.Original:  	original.Activate ();  	break;  case SearchIn.Translated:  	translated.Activate ();  	break;  }  
Missing Default,MonoDevelop.Gettext,StringEscaping,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\StringEscaping.cs,ToGettextFormat,The following switch statement is missing a default case: switch (c) {  case '"':  	sb.Append ("\\\"");  	continue;  //Gettext doesn't like escaping this  //case '\'':  //	sb.Append ("\\'");  //	continue;  //These shouldn't be in translations... but will be caught by IsControl  //case '\a':  //case '\b':  //case '\f':  //case '\v':  //this doesn't matter since we're not dealing with trigraphs  //case "?":  //	sb.Append ("\\?");  //	continue;  case '\\':  	sb.Append ("\\\\");  	continue;  case '\n':  	sb.Append ("\\n");  	continue;  case '\r':  	sb.Append ("\\r");  	continue;  case '\t':  	sb.Append ("\\t");  	continue;  }  
Missing Default,MonoDevelop.Gettext,StringEscaping,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Gettext\MonoDevelop.Gettext\StringEscaping.cs,AppendFromGettextFormat,The following switch statement is missing a default case: switch (c) {  case '\\':  	if (i + 1 < text.Length) {  		char nextChar = text [i + 1];  		if (nextChar == '\\' || nextChar == '"') {  			sb.Append (nextChar);  			i++;  			continue;  		}  		if (nextChar == 'n') {  			sb.Append ('\n');  			i++;  			continue;  		}  		if (nextChar == 't') {  			sb.Append ('\t');  			i++;  			continue;  		}  		if (nextChar == 'r') {  			sb.Append ('\r');  			i++;  			continue;  		}  		throw new FormatException (MonoDevelop.Core.GettextCatalog.GetString ("Invalid escape sequence '{0}' in string: '{1}'"' nextChar' text));  	}  	break;  }  
