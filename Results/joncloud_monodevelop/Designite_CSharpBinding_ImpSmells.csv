Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The method has 144 lines of code.
Long Method,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,CSharpFormattingProfileDialog,The method has 595 lines of code.
Long Method,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The method has 279 lines of code.
Long Method,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,AppendType,The method has 116 lines of code.
Long Method,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetTypeString,The method has 127 lines of code.
Long Method,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,UpdatePath,The method has 105 lines of code.
Long Method,MonoDevelop.CSharp,AstAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstAmbience.cs,GetEntityMarkup,The method has 141 lines of code.
Long Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The method has 400 lines of code.
Long Method,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The method has 161 lines of code.
Long Method,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The method has 130 lines of code.
Long Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The method has 184 lines of code.
Long Method,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,CreateTooltip,The method has 148 lines of code.
Complex Method,MonoDevelop.CSharp.Highlighting,CSharpSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\CSharpSyntaxMode.cs,CSharpSyntaxMode,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp.Highlighting,HighlightUsagesExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\HighlightUsagesExtension.cs,ShowReferences,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Highlighting,HighlightUsagesExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\HighlightUsagesExtension.cs,GetReferences,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ConvertToStringLiteral,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,Cyclomatic complexity of the method is 38
Complex Method,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,GuessSemicolonInsertionOffset,Cyclomatic complexity of the method is 36
Complex Method,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,HandleStringConcatinationDeletion,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,DoPreInsertionSmartIndent,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,DoPostInsertionSmartIndent,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,FixLineStart,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp.Formatting,CSharpFormattingPolicy,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingPolicy.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,BuildStub,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,GetFormattingChanges,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.CSharp.Project,CSharpCompilerParameters,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CSharpCompilerParameters.cs,OnEndLoad,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Project,CSharpResourceIdBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CSharpResourceIdBuilder.cs,GetDefaultResourceId,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.CSharp.Project,CSharpResourceIdBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CSharpResourceIdBuilder.cs,GetNextToken,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.CSharp.Project,CodeGenerationPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CodeGenerationPanel.cs,Store,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.CSharp.Project,CompilerOptionsPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CompilerOptionsPanelWidget.cs,Store,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,Cyclomatic complexity of the method is 98
Complex Method,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,ParseOutput,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,AppendType,Cyclomatic complexity of the method is 49
Complex Method,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetTypeString,Cyclomatic complexity of the method is 36
Complex Method,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetOperator,Cyclomatic complexity of the method is 26
Complex Method,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,InternalGetMethodString,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetPropertyString,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,AppendModifiers,Cyclomatic complexity of the method is 22
Complex Method,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,UpdatePath,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.CSharp,AstAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstAmbience.cs,AppendParameter,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp,AstAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstAmbience.cs,AppendEscaped,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.CSharp,AstAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstAmbience.cs,GetEntityMarkup,Cyclomatic complexity of the method is 37
Complex Method,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetAccessibility,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetMarkup,Cyclomatic complexity of the method is 27
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendModifiers,Cyclomatic complexity of the method is 36
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendAccessibility,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetMarkupLength,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeParameterMarkup,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetFieldMarkup,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetMethodMarkup,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetPropertyMarkup,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,Cyclomatic complexity of the method is 349
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetConstraintTooltip,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendParameterList,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendConstant,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,CreateFooter,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,GetString,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,CreateTooltip,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,VisitComment,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,VisitPreprocessorDirective,Cyclomatic complexity of the method is 37
Complex Method,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,GetCompilerArguments,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,ReadToEol,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,InternalHandleCodeCompletion,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,GuessBestMethodOverload,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,Cyclomatic complexity of the method is 26
Complex Method,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Completion,MethodParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MethodParameterDataProvider.cs,CreateTooltipInformation,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.CSharp.Completion,NewOverrideCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\NewOverrideCompletionData.cs,InsertCompletionText,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp.Completion,MonoCSharpCompletionEngine,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MonoCSharpCompletionEngine.cs,GetProtocolMembers,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,SetSearchedMembers,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,GetReference,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,GetUsage,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,FindReferences,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,AppendBraceStart,Cyclomatic complexity of the method is 30
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,AppendBraceEnd,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,Cyclomatic complexity of the method is 43
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,AppendParameterList,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GetModifiers,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,AddLocalNamespaceImport,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerationService,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerationService.cs,GenerateMemberImplementation,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,RunAction,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetEquivalentNodeFor,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,FillDialog,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,Apply,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,ToMonoDevelopRepresentation,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,CreateTooltip,Cyclomatic complexity of the method is 25
Long Parameter List,MonoDevelop.CSharp.Formatting,CSharpFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormatter.cs,FormatText,The method has 6 parameters.
Long Parameter List,MonoDevelop.CSharp.Formatting,CSharpFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormatter.cs,FormatText,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,BuildStub,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,GetFormattingChanges,The method has 8 parameters.
Long Parameter List,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,Format,The method has 13 parameters.
Long Parameter List,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,ConvertProperty,The method has 6 parameters.
Long Parameter List,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,AddOption,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,DoCompilation,The method has 8 parameters.
Long Parameter List,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendParameterList,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,CreateTooltip,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,Parse,The method has 11 parameters.
Long Parameter List,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,ReadToEol,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The method has 7 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The method has 7 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The method has 8 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The method has 7 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MethodParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MethodParameterDataProvider.cs,MethodComparer,The method has 10 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MethodParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MethodParameterDataProvider.cs,CreateTooltipInformation,The method has 6 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MethodParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MethodParameterDataProvider.cs,CreateTooltipInformation,The method has 7 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,NewOverrideCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\NewOverrideCompletionData.cs,InsertCompletionText,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,EventCreationCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\EventCreationCompletionData.cs,EventCreationCompletionData,The method has 9 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,EventCreationCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\EventCreationCompletionData.cs,InsertCompletionText,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,IndexerParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\IndexerParameterDataProvider.cs,IndexerParameterDataProvider,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MonoCSharpCompletionEngine,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MonoCSharpCompletionEngine.cs,MonoCSharpCompletionEngine,The method has 6 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,MonoCSharpCompletionEngine,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MonoCSharpCompletionEngine.cs,AddVirtuals,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,ProtocolCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\ProtocolCompletionData.cs,InsertCompletionText,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,GetReference,The method has 12 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,FindInDocument,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,FindReferences,The method has 10 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,CreateFieldEncapsulation,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringContext,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringContext.cs,MDRefactoringContext,The method has 6 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,MoveTypeToFile,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\MoveTypeToFile.cs,CreateNewFile,The method has 6 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,Link,The method has 7 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,DoGlobalOperationOn,The method has 6 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetActions,The method has 9 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,PrepareToRunAction,The method has 11 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,RunAction,The method has 11 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,ReplaceVariableReferences,The method has 13 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,CreateEnumDeclaration,The method has 9 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,FixIdentifiers,The method has 11 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetEquivalentNodeFor,The method has 10 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,InsertAfterEquivalent,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetCommonPrefixes,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The method has 7 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionPanelWidget.cs,NameConventionPanelWidget,The method has 16 parameters.
Long Parameter List,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,ShowTooltipWindow,The method has 6 parameters.
Long Statement,MonoDevelop.CSharp.Highlighting,CSharpSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\CSharpSyntaxMode.cs,UpdateCommentRule,The length of the statement  "	_commentRule.SetDelimiter (new string ("&()<>{}[]~!%^*-+=|\\#/:;\"' '\t.?".Where (c => joinedTasks.IndexOf (c) < 0).ToArray ())); " is 129.
Long Statement,MonoDevelop.CSharp.Highlighting,HighlightUsagesExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\HighlightUsagesExtension.cs,ShowReferences,The length of the statement  "				if (!alphaBlend && editor.TextViewMargin.SearchResults.Any (sr => sr.Contains (offset) || sr.Contains (endOffset) || offset < sr.Offset && sr.EndOffset < endOffset)) { " is 167.
Long Statement,MonoDevelop.CSharp.Highlighting,MoveToPrevUsageHandler,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\MoveToUsagesHandler.cs,Run,The length of the statement  "			MoveToNextUsageHandler.MoveToSegment (doc' ext.UsagesSegments [(i + ext.UsagesSegments.Count - 1) % ext.UsagesSegments.Count]); " is 127.
Long Statement,MonoDevelop.CSharp.Highlighting,CSharpSelectionSurroundingProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\CSharpSelectionSurroundingProvider.cs,HandleSpecialSelectionKey,The length of the statement  "		textEditorData.MainSelection = new Selection (new DocumentLocation (selection.Anchor.Line' endCol == selection.Anchor.Column ? endCol + start.Length : startCol + 1 + start.Length)' new DocumentLocation (selection.Lead.Line' endCol == selection.Anchor.Column ? startCol + 1 + start.Length : endCol + start.Length)' Mono.TextEditor.SelectionMode.Block); " is 351.
Long Statement,MonoDevelop.CSharp.Highlighting,CSharpSelectionSurroundingProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\CSharpSelectionSurroundingProvider.cs,HandleSpecialSelectionKey,The length of the statement  "		textEditorData.Document.CommitMultipleLineUpdate (textEditorData.MainSelection.MinLine' textEditorData.MainSelection.MaxLine); " is 126.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,HandleTextPaste,The length of the statement  "		if (!stateTracker.LineBeganInsideMultiLineComment || (nlwsp < curLine.LengthIncludingDelimiter && textEditorData.Document.GetCharAt (curLineOffset + nlwsp) == '*')) { " is 166.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,RunFormatter,The length of the statement  "	if (OnTheFlyFormatting && textEditorData != null && !(textEditorData.CurrentMode is TextLinkEditMode) && !(textEditorData.CurrentMode is InsertionCursorEditMode)) { " is 164.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ConvertNormalToVerbatimString,The length of the statement  "	var plainText = TextPasteUtils.StringLiteralPasteStrategy.Instance.Decode (textEditorData.GetTextAt (offset' endOffset - offset)); " is 130.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ReindentOnTab,The length of the statement  "	if (stateTracker.IsInsideVerbatimString && cursor > 0 && cursor < textEditorData.Document.TextLength && textEditorData.GetCharAt (cursor - 1) == '"') " is 149.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "	if (keyChar == ';' && !(textEditorData.CurrentMode is TextLinkEditMode) && !DoInsertTemplate () && !isSomethingSelected && PropertyService.Get ("SmartSemicolonPlacement"' false)) { " is 180.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "			if (OnTheFlyFormatting && textEditorData != null && !(textEditorData.CurrentMode is TextLinkEditMode) && !(textEditorData.CurrentMode is InsertionCursorEditMode)) { " is 164.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "			var lexer = new CSharpCompletionEngineBase.MiniLexer (textEditorData.Document.GetTextAt (0' textEditorData.Caret.Offset)); " is 122.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "	if (key == Gdk.Key.Tab && DefaultSourceEditorOptions.Instance.TabIsReindent && !CompletionWindowManager.IsVisible && !(textEditorData.CurrentMode is TextLinkEditMode) && !DoInsertTemplate () && !isSomethingSelected) { " is 217.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "	if (textEditorData.Options.IndentStyle == IndentStyle.Smart || textEditorData.Options.IndentStyle == IndentStyle.Virtual) { " is 123.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "		lastCharInserted = TranslateKeyCharForIndenter (key' keyChar' textEditorData.GetCharAt (textEditorData.Caret.Offset - 1)); " is 122.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "				if (!(oldLine == textEditorData.Caret.Line + 1 && lastCharInserted == '\n') && (oldBufLen != textEditorData.Length || lastCharInserted != '\0')) { " is 146.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "						textEditorData.Caret.Column = textEditorData.IndentationTracker.GetVirtualIndentationColumn (textEditorData.Caret.Location); " is 124.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "					if (OnTheFlyFormatting && textEditorData != null && !(textEditorData.CurrentMode is TextLinkEditMode) && !(textEditorData.CurrentMode is InsertionCursorEditMode)) { " is 164.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The length of the statement  "	if (textEditorData.Options.IndentStyle == IndentStyle.Auto && DefaultSourceEditorOptions.Instance.TabIsReindent && key == Gdk.Key.Tab) { " is 136.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The length of the statement  "			if (!(isInString || isInChar || isInLineComment || isInBlockComment) && pos + 1 < max && data.Document.GetCharAt (pos + 1) == '"') { " is 132.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,FixLineStart,The length of the statement  "			else if (trimmedPreviousLine.StartsWith ("/**"' StringComparison.Ordinal) || trimmedPreviousLine.StartsWith ("/*"' StringComparison.Ordinal)) { " is 143.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,FixLineStart,The length of the statement  "			var insertedText = prevLine.GetIndentation (textEditorData.Document) + (trimmedPreviousLine.StartsWith ("\""' StringComparison.Ordinal) ? "" : "\t") + "\""; " is 156.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,DoReSmartIndent,The length of the statement  "	if (!stateTracker.LineBeganInsideMultiLineComment || (nlwsp < line.LengthIncludingDelimiter && textEditorData.Document.GetCharAt (line.Offset + nlwsp) == '*')) { " is 161.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormatter.cs,CorrectIndenting,The length of the statement  "		var tracker = new CSharpIndentEngine (data.Document' data.CreateNRefactoryTextEditorOptions ()' policy.CreateOptions ()); " is 121.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormatter.cs,CorrectIndenting,The length of the statement  "		if (!tracker.LineBeganInsideMultiLineComment || (nlwsp < lineSegment.LengthIncludingDelimiter && data.Document.GetCharAt (lineSegment.Offset + nlwsp) == '*')) { " is 160.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormatter.cs,FormatText,The length of the statement  "	var formattingVisitor = new ICSharpCode.NRefactory.CSharp.CSharpFormatter (policy.CreateOptions ()' textEditorOptions) { " is 120.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,BuildStub,The length of the statement  "		if (lex.IsInString || lex.IsInChar || lex.IsInVerbatimString || lex.IsInSingleComment || lex.IsInMultiLineComment || lex.IsInPreprocessorDirective) " is 147.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,GetFormattingChanges,The length of the statement  "		var parser = document.HasProject ? new CSharpParser (TypeSystemParser.GetCompilerArguments (document.Project)) : new CSharpParser (); " is 133.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,GetFormattingChanges,The length of the statement  "		var formattingVisitor = new ICSharpCode.NRefactory.CSharp.CSharpFormatter (policy.CreateOptions ()' document.Editor.CreateNRefactoryTextEditorOptions ()); " is 154.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,GetFormattingChanges,The length of the statement  "			AstNode node = compilationUnit.GetAdjacentNodeAt<Statement> (stubData.OffsetToLocation (formatStartOffset + formatLength - 1)); " is 127.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,GetFormattingChanges,The length of the statement  "				while (node.Role == Roles.EmbeddedStatement || node.Role == IfElseStatement.TrueRole || node.Role == IfElseStatement.FalseRole) " is 127.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,Format,The length of the statement  "			formattingRegion = new DomRegion (data.Editor.OffsetToLocation (formatStartOffset)' data.Editor.OffsetToLocation (endOffset)); " is 126.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,Format,The length of the statement  "			formattingRegion = new DomRegion (data.Editor.OffsetToLocation (startOffset)' data.Editor.OffsetToLocation (endOffset)); " is 120.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,Format,The length of the statement  "		formattingRegion = new DomRegion (data.Editor.OffsetToLocation (formatStartOffset)' data.Editor.OffsetToLocation (endOffset)); " is 126.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,Format,The length of the statement  "	var changes = GetFormattingChanges (policyParent' mimeTypeChain' data' text' formattingRegion' ref formatStartOffset' ref formatLength' formatLastStatementOnly); " is 161.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,Format,The length of the statement  "			changes.ApplyChanges (formatStartOffset + startDelta' Math.Max (0' formatLength - startDelta - 1)' delegate (int replaceOffset' int replaceLength' string insertText) { " is 167.
Long Statement,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,Format,The length of the statement  "		//				data.Editor.Caret.Offset = originalVersion.MoveOffsetTo (currentVersion' caretOffset' ICSharpCode.NRefactory.Editor.AnchorMovementType.Default); " is 150.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpFormattingPolicyPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingPolicyPanelWidget.cs,FormatSample,The length of the statement  "	texteditor.Document.Text = CSharpFormatter.FormatText (policy' textStylePolicy' CSharpFormatter.MimeType' example' 0' example.Length); " is 134.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,HandleEntryBeforUsingsChanged,The length of the statement  "	profile.BlankLinesBeforeFirstDeclaration = SetFlag (entryBeforeFirstDeclaration' profile.BlankLinesBeforeFirstDeclaration); " is 123.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,AddOption,The length of the statement  "	return model.AppendValues (propertyName' displayName' example' !string.IsNullOrEmpty (propertyName) && isBool' !string.IsNullOrEmpty (propertyName) && !isBool); " is 160.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,AddOption,The length of the statement  "	return model.AppendValues (parent' propertyName' displayName' example' !string.IsNullOrEmpty (propertyName) && isBool' !string.IsNullOrEmpty (propertyName) && !isBool); " is 168.
Long Statement,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,RenderIcon,The length of the statement  "		pixbufCellRenderer.Pixbuf = ImageService.GetPixbuf (((TreeView)col.TreeView).GetRowExpanded (model.GetPath (iter)) ? MonoDevelop.Ide.Gui.Stock.OpenFolder : MonoDevelop.Ide.Gui.Stock.ClosedFolder' IconSize.Menu); " is 211.
Long Statement,MonoDevelop.CSharp.Formatting,IndentVirtualSpaceManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpIndentVirtualSpaceManager.cs,GetIndentationString,The length of the statement  "		if (!stateTracker.LineBeganInsideMultiLineComment || (nlwsp < line.LengthIncludingDelimiter && data.Document.GetCharAt (offset + nlwsp) == '*')) " is 144.
Long Statement,MonoDevelop.CSharp.Project,CSharpResourceIdBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CSharpResourceIdBuilder.cs,GetDefaultResourceId,The length of the statement  "	if (String.IsNullOrEmpty (pf.DependsOn) || !File.Exists (pf.DependsOn) || Path.GetExtension (pf.DependsOn).ToLower () != ".cs") " is 127.
Long Statement,MonoDevelop.CSharp.Project,CodeGenerationPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CodeGenerationPanel.cs,Load,The length of the statement  "	if (!configuration.DebugMode || string.Equals ("none"' compilerParameters.DebugType' StringComparison.OrdinalIgnoreCase)) { " is 123.
Long Statement,MonoDevelop.CSharp.Project,CodeGenerationPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CodeGenerationPanel.cs,Load,The length of the statement  "	xmlDocsEntry.Path = string.IsNullOrEmpty (compilerParameters.DocumentationFile) ? configuration.CompiledOutputName.ChangeExtension (".xml") : compilerParameters.DocumentationFile; " is 179.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The length of the statement  "	var compilerParameters = (CSharpCompilerParameters)configuration.CompilationParameters ?? new CSharpCompilerParameters (); " is 122.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The length of the statement  "	bool hasWin32Res = !string.IsNullOrEmpty (projectParameters.Win32Resource) && File.Exists (projectParameters.Win32Resource); " is 124.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The length of the statement  "	if (!string.IsNullOrEmpty (compilerParameters.PlatformTarget) && compilerParameters.PlatformTarget.ToLower () != "anycpu") { " is 124.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The length of the statement  "			LoggingService.LogWarning ("Mono runtime '" + runtime.DisplayName + "' appears to be too old to support the 'platform' C# compiler flag."); " is 139.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The length of the statement  "		LoggingService.LogError ("C# compiler crashed. Response file '{0}'' stdout file '{1}'' stderr file '{2}'"' responseFileName' output' error); " is 140.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,ParseOutput,The length of the statement  "			if (curLine.StartsWith ("Unhandled Exception: System.TypeLoadException"' StringComparison.Ordinal) || curLine.StartsWith ("Unhandled Exception: System.IO.FileNotFoundException"' StringComparison.Ordinal)) { " is 206.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,ParseOutput,The length of the statement  "			result.AddError (""' 0' 0' ""' "Error: A referenced assembly may be built with an incompatible CLR version. See the compilation output for more details."); " is 155.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,ParseOutput,The length of the statement  "			result.AddError (""' 0' 0' ""' "Error: A dependency of a referenced assembly may be missing' or you may be referencing an assembly created with a newer CLR version. See the compilation output for more details."); " is 212.
Long Statement,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,CreateErrorFromString,The length of the statement  "	if (error_string.StartsWith ("WROTE SYMFILE") || error_string.StartsWith ("OffsetTable") || error_string.StartsWith ("Compilation succeeded") || error_string.StartsWith ("Compilation failed")) " is 192.
Long Statement,MonoDevelop.CSharp,HelperMethods,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\HelperMethods.cs,GetFormattingPolicy,The length of the statement  "	var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType); " is 128.
Long Statement,MonoDevelop.CSharp,HelperMethods,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\HelperMethods.cs,GetFormattingPolicy,The length of the statement  "	var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types); " is 244.
Long Statement,MonoDevelop.CSharp,HelperMethods,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\HelperMethods.cs,GetFormattingOptions,The length of the statement  "	var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType); " is 128.
Long Statement,MonoDevelop.CSharp,HelperMethods,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\HelperMethods.cs,GetFormattingOptions,The length of the statement  "	var codePolicy = project != null ? project.Policies.Get<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types); " is 243.
Long Statement,MonoDevelop.CSharp,ShrinkSelectionHandler,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\ExpandSelectionHandler.cs,Run,The length of the statement  "				if (nodeStack.Count > 0 && nodeStack.Peek ().StartLocation == node.StartLocation && nodeStack.Peek ().EndLocation == node.EndLocation) " is 134.
Long Statement,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetTooltip,The length of the statement  "	return MonoDevelop.CSharp.Completion.MemberCompletionData.CreateTooltipInformation (entity.Compilation' null' null' new CSharpFormattingPolicy ()' entity' false' true); " is 168.
Long Statement,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetMethodString,The length of the statement  "	return InternalGetMethodString (method' settings' settings.EmitName (method' Format (FilterName (method.SymbolKind == SymbolKind.Constructor || method.SymbolKind == SymbolKind.Destructor ? method.DeclaringTypeDefinition.Name : method.Name)))' true); " is 249.
Long Statement,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetConstructorString,The length of the statement  "	return InternalGetMethodString (method' settings' settings.EmitName (method' Format (FilterName (method.DeclaringTypeDefinition != null ? method.DeclaringTypeDefinition.Name : method.Name)))' false); " is 199.
Long Statement,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetDestructorString,The length of the statement  "	return InternalGetMethodString (method' settings' settings.EmitName (method' settings.Markup ("~") + Format (FilterName (method.DeclaringTypeDefinition != null ? method.DeclaringTypeDefinition.Name : method.Name)))' false); " is 223.
Long Statement,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetPropertyString,The length of the statement  "		result.Append (GetTypeReferenceString (property.DeclaringTypeDefinition' new OutputSettings (OutputFlags.UseFullName))); " is 120.
Long Statement,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetIndexerString,The length of the statement  "		result.Append (GetTypeReferenceString (property.DeclaringTypeDefinition' new OutputSettings (OutputFlags.UseFullName))); " is 120.
Long Statement,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,CreatePathWidget,The length of the statement  "	var window = new DropDownBoxListWindow (tag == null ? (DropDownBoxListWindow.IListDataProvider)new CompilationUnitDataProvider (Document) : new DataProvider (this' tag)); " is 170.
Long Statement,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,UpdatePath,The length of the statement  "	if (isPathSet && curType != null && lastType != null && curType.StartLocation == lastType.StartLocation && curTypeMakeup == lastTypeMarkup && curMember != null && lastMember != null && curMember.StartLocation == lastMember.StartLocation && curMemberMarkup == lastMemberMarkup) " is 276.
Long Statement,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,UpdatePath,The length of the statement  "			result.Insert (0' new PathEntry (ImageService.GetPixbuf (type.GetStockIcon (false)' Gtk.IconSize.Menu)' GetEntityMarkup (type)) { " is 129.
Long Statement,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,UpdatePath,The length of the statement  "		result.Add (new PathEntry (ImageService.GetPixbuf (curMember.GetStockIcon (true)' Gtk.IconSize.Menu)' curMemberMarkup) { " is 120.
Long Statement,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,UpdatePath,The length of the statement  "				result.Insert (result.Count - 1' new PathEntry (ImageService.GetPixbuf (parent.GetStockIcon (true)' Gtk.IconSize.Menu)' GetEntityMarkup (parent)) { " is 147.
Long Statement,MonoDevelop.CSharp,AstAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstAmbience.cs,IsObsolete,The length of the statement  "			if (attrText == "Obsolete" || attrText == "ObsoleteAttribute" || attrText == "System.Obsolete" || attrText == "System.ObsoleteAttribute") " is 137.
Long Statement,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The length of the statement  "	if (element is OperatorDeclaration || element is ConstructorDeclaration || element is DestructorDeclaration || element is Accessor) " is 131.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeReferenceString,The length of the statement  "		return GetTypeReferenceString (arrayType.ElementType' highlight) + "[" + new string ('''' arrayType.Dimensions - 1) + "]"; " is 122.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeParameterMarkup,The length of the statement  "		if (!tp.HasDefaultConstructorConstraint && !tp.HasReferenceTypeConstraint && !tp.HasValueTypeConstraint && tp.DirectBaseTypes.All (IsObjectOrValueType)) " is 152.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetDelegateInfo,The length of the statement  "	AppendParameterList (result' method.Parameters' formattingOptions.SpaceBeforeDelegateDeclarationParameterComma' formattingOptions.SpaceAfterDelegateDeclarationParameterComma' false); " is 182.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetDelegateMarkup,The length of the statement  "	AppendParameterList (result' method.Parameters' formattingOptions.SpaceBeforeDelegateDeclarationParameterComma' formattingOptions.SpaceAfterDelegateDeclarationParameterComma); " is 175.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetFieldMarkup,The length of the statement  "		if (isEnum && !(field.DeclaringTypeDefinition.Attributes.Any (attr => attr.AttributeType.FullName == "System.FlagsAttribute"))) { " is 129.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetMethodMarkup,The length of the statement  "	AppendParameterList (result' parameters' formattingOptions.SpaceBeforeMethodDeclarationParameterComma' formattingOptions.SpaceAfterMethodDeclarationParameterComma); " is 164.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetConstructorMarkup,The length of the statement  "		AppendParameterList (result' method.DeclaringType.GetDelegateInvokeMethod ().Parameters' formattingOptions.SpaceBeforeConstructorDeclarationParameterComma' formattingOptions.SpaceAfterConstructorDeclarationParameterComma); " is 222.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetConstructorMarkup,The length of the statement  "		AppendParameterList (result' method.Parameters' formattingOptions.SpaceBeforeConstructorDeclarationParameterComma' formattingOptions.SpaceAfterConstructorDeclarationParameterComma); " is 181.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetDestructorMarkup,The length of the statement  "	AppendParameterList (result' method.Parameters' formattingOptions.SpaceBeforeConstructorDeclarationParameterComma' formattingOptions.SpaceAfterConstructorDeclarationParameterComma); " is 181.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetPropertyMarkup,The length of the statement  "		AppendParameterList (result' property.Parameters' formattingOptions.SpaceBeforeIndexerDeclarationParameterComma' formattingOptions.SpaceAfterIndexerDeclarationParameterComma); " is 175.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetExternAliasTooltip,The length of the statement  "	result.SignatureMarkup = Highlight ("extern "' colorStyle.KeywordModifiers) + Highlight ("alias "' colorStyle.KeywordNamespace) + externAliasDeclaration.Name; " is 158.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("abstract"' colorStyle.KeywordModifiers) + " modifier can be used with classes' methods' properties' indexers' and events."; " is 167.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("as"' colorStyle.KeywordOperators) + " operator is used to perform conversions between compatible types. "; " is 150.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("base"' colorStyle.KeywordAccessors) + " keyword is used to access members of the base class from within a derived class."; " is 166.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("break"' colorStyle.KeywordJump) + " statement terminates the closest enclosing loop or switch statement in which it appears."; " is 170.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("case"' colorStyle.KeywordSelection) + " constant-expression:" + Environment.NewLine + "  statement" + Environment.NewLine + "  jump-statement"); " is 184.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("try"' colorStyle.KeywordException) + " try-block" + Environment.NewLine + "  " + Highlight ("catch"' colorStyle.KeywordException) + " (exception-declaration-1) catch-block-1" + Environment.NewLine + "  " + Highlight ("catch"' colorStyle.KeywordException) + " (exception-declaration-2) catch-block-2" + Environment.NewLine + "  ..." + Environment.NewLine + Highlight ("try"' colorStyle.KeywordException) + " try-block " + Highlight ("catch"' colorStyle.KeywordException) + " catch-block"); " is 528.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("checked"' colorStyle.KeywordOther) + " block" + Environment.NewLine + "or" + Environment.NewLine + Highlight ("checked"' colorStyle.KeywordOther) + " (expression)"); " is 205.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("checked"' colorStyle.KeywordOther) + " keyword is used to control the overflow-checking context for integral-type arithmetic operations and conversions. It can be used as an operator or a statement."; " is 244.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' "[attributes] [modifiers] " + Highlight ("class"' colorStyle.KeywordDeclaration) + " identifier [:base-list] { class-body }[;]"); " is 157.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "Classes are declared using the keyword " + Highlight ("class"' colorStyle.KeywordDeclaration) + "."; " is 124.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' "[attributes] [modifiers] " + Highlight ("const"' colorStyle.KeywordModifiers) + " type declarators;"); " is 131.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("const"' colorStyle.KeywordModifiers) + " keyword is used to modify a declaration of a field or local variable. It specifies that the value of the field or the local variable cannot be modified. "; " is 240.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("continue"' colorStyle.KeywordJump) + " statement passes control to the next iteration of the enclosing iteration statement in which it appears."; " is 189.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "				result.AddCategory ("Form"' Highlight ("switch"' colorStyle.KeywordSelection) + " (expression) { " + Environment.NewLine + "  " + Highlight ("case"' colorStyle.KeywordSelection) + " constant-expression:" + Environment.NewLine + "    statement" + Environment.NewLine + "    jump-statement" + Environment.NewLine + "  [" + Highlight ("default"' colorStyle.KeywordSelection) + ":" + Environment.NewLine + "    statement" + Environment.NewLine + "    jump-statement]" + Environment.NewLine + "}"); " is 493.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("default"' colorStyle.KeywordSelection) + " (Type)" + Environment.NewLine + Environment.NewLine + "or" + Environment.NewLine + Environment.NewLine + Highlight ("switch"' colorStyle.KeywordSelection) + " (expression) { " + Environment.NewLine + "  " + Highlight ("case"' colorStyle.KeywordSelection) + " constant-expression:" + Environment.NewLine + "    statement" + Environment.NewLine + "    jump-statement" + Environment.NewLine + "  [" + Highlight ("default"' colorStyle.KeywordSelection) + ":" + Environment.NewLine + "    statement" + Environment.NewLine + "    jump-statement]" + Environment.NewLine + "}"); " is 653.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' "[attributes] [modifiers] " + Highlight ("delegate"' colorStyle.KeywordDeclaration) + " result-type identifier ([formal-parameters]);"); " is 164.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "A " + Highlight ("delegate"' colorStyle.KeywordDeclaration) + " declaration defines a reference type that can be used to encapsulate a method with a specific signature."; " is 194.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("do"' colorStyle.KeywordIteration) + " statement " + Highlight ("while"' colorStyle.KeywordIteration) + " (expression);"); " is 161.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("do"' colorStyle.KeywordIteration) + " statement executes a statement or a block of statements repeatedly until a specified expression evaluates to false."; " is 199.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("if"' colorStyle.KeywordSelection) + " (expression)" + Environment.NewLine + "  statement1" + Environment.NewLine + "  [" + Highlight ("else"' colorStyle.KeywordSelection) + Environment.NewLine + "  statement2]"); " is 252.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' "[attributes] [modifiers] " + Highlight ("enum"' colorStyle.KeywordDeclaration) + " identifier [:base-type] {enumerator-list} [;]"); " is 160.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("enum"' colorStyle.KeywordDeclaration) + " keyword is used to declare an enumeration' a distinct type consisting of a set of named constants called the enumerator list."; " is 213.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' "[attributes] [modifiers] " + Highlight ("event"' colorStyle.KeywordModifiers) + " type declarator;" + Environment.NewLine + "[attributes] [modifiers] " + Highlight ("event"' colorStyle.KeywordModifiers) + " type member-name {accessor-declarations};"); " is 280.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("explicit"' colorStyle.KeywordOperatorDeclaration) + " keyword is used to declare an explicit user-defined type conversion operator."; " is 177.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "Use the " + Highlight ("extern"' colorStyle.KeywordModifiers) + " modifier in a method declaration to indicate that the method is implemented externally. A common use of the extern modifier is with the DllImport attribute."; " is 248.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("try"' colorStyle.KeywordException) + " try-block " + Highlight ("finally"' colorStyle.KeywordException) + " finally-block"); " is 164.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("finally"' colorStyle.KeywordException) + " block is useful for cleaning up any resources allocated in the try block. Control is always passed to the finally block regardless of how the try block exits."; " is 247.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("for"' colorStyle.KeywordIteration) + " ([initializers]; [expression]; [iterators]) statement"); " is 135.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("for"' colorStyle.KeywordIteration) + " loop executes a statement or a block of statements repeatedly until a specified expression evaluates to false."; " is 195.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("foreach"' colorStyle.KeywordIteration) + " (type identifier " + Highlight ("in"' colorStyle.KeywordIteration) + " expression) statement"); " is 178.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("foreach"' colorStyle.KeywordIteration) + " statement repeats a group of embedded statements for each element in an array or an object collection. "; " is 192.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("goto"' colorStyle.KeywordJump) + " identifier;" + Environment.NewLine + Highlight ("goto"' colorStyle.KeywordJump) + " " + Highlight ("case"' colorStyle.KeywordSelection) + " constant-expression;" + Environment.NewLine + Highlight ("goto"' colorStyle.KeywordJump) + " " + Highlight ("default"' colorStyle.KeywordSelection) + ";"); " is 370.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("goto"' colorStyle.KeywordJump) + " statement transfers the program control directly to a labeled statement. "; " is 154.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("if"' colorStyle.KeywordSelection) + " (expression)" + Environment.NewLine + "  statement1" + Environment.NewLine + "  [" + Highlight ("else"' colorStyle.KeywordSelection) + Environment.NewLine + "  statement2]"); " is 252.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("if"' colorStyle.KeywordSelection) + " statement selects a statement for execution based on the value of a Boolean expression. "; " is 172.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("implicit"' colorStyle.KeywordOperatorDeclaration) + " keyword is used to declare an implicit user-defined type conversion operator."; " is 177.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "				result.AddCategory ("Form"' Highlight ("foreach"' colorStyle.KeywordIteration) + " (type identifier " + Highlight ("in"' colorStyle.KeywordIteration) + " expression) statement"); " is 178.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "				result.AddCategory ("Form"' Highlight ("from"' colorStyle.KeywordContext) + " range-variable " + Highlight ("in"' colorStyle.KeywordIteration) + " data-source [query clauses] " + Highlight ("select"' colorStyle.KeywordContext) + " product-expression"); " is 252.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "				result.AddCategory ("Form"' Highlight ("interface"' colorStyle.KeywordDeclaration) + " IMyInterface&lt;" + Highlight ("in"' colorStyle.KeywordIteration) + " T&gt; {}"); " is 168.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("foreach"' colorStyle.KeywordIteration) + " (type identifier " + Highlight ("in"' colorStyle.KeywordIteration) + " expression) statement" + Environment.NewLine + Environment.NewLine + "or" + Environment.NewLine + Environment.NewLine + Highlight ("from"' colorStyle.KeywordContext) + " range-variable " + Highlight ("in"' colorStyle.KeywordIteration) + " data-source [query clauses] " + Highlight ("select"' colorStyle.KeywordContext) + " product-expression" + Environment.NewLine + Environment.NewLine + "or" + Environment.NewLine + Environment.NewLine + Highlight ("interface"' colorStyle.KeywordDeclaration) + " IMyInterface&lt;" + Highlight ("in"' colorStyle.KeywordIteration) + " T&gt; {}"); " is 734.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' "[attributes] [modifiers] " + Highlight ("interface"' colorStyle.KeywordDeclaration) + " identifier [:base-list] {interface-body}[;]"); " is 163.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "An interface defines a contract. A class or struct that implements an interface must adhere to its contract."; " is 134.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("internal"' colorStyle.KeywordModifiers) + " keyword is an access modifier for types and type members. Internal members are accessible only within files in the same assembly."; " is 219.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("is"' colorStyle.KeywordOperators) + " operator is used to check whether the run-time type of an object is compatible with a given type."; " is 181.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("lock"' colorStyle.KeywordOther) + " keyword marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object' executing a statement' and then releasing the lock. "; " is 247.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("namespace"' colorStyle.KeywordNamespace) + " name[.name1] ...] {" + Environment.NewLine + "type-declarations" + Environment.NewLine + " }"); " is 180.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("namespace"' colorStyle.KeywordNamespace) + " keyword is used to declare a scope. "; " is 127.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("new"' colorStyle.KeywordOperators) + " keyword can be used as an operator or as a modifier. The operator is used to create objects on the heap and invoke constructors. The modifier is used to hide an inherited member from a base class member."; " is 288.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("null"' colorStyle.KeywordConstants) + " keyword is a literal that represents a null reference' one that does not refer to any object. " + Highlight ("null"' colorStyle.KeywordConstants) + " is the default value of reference-type variables."; " is 285.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("public static "' colorStyle.KeywordModifiers) + "result-type " + Highlight ("operator"' colorStyle.KeywordOperatorDeclaration) + " unary-operator ( op-type operand )" + Environment.NewLine + Highlight ("public static "' colorStyle.KeywordModifiers) + "result-type " + Highlight ("operator"' colorStyle.KeywordOperatorDeclaration) + " binary-operator (" + Environment.NewLine + "op-type operand'" + Environment.NewLine + "op-type2 operand2" + Environment.NewLine + " )" + Environment.NewLine + Highlight ("public static "' colorStyle.KeywordModifiers) + Highlight ("implicit operator"' colorStyle.KeywordOperatorDeclaration) + " conv-type-out ( conv-type-in operand )" + Environment.NewLine + Highlight ("public static "' colorStyle.KeywordModifiers) + Highlight ("explicit operator"' colorStyle.KeywordOperatorDeclaration) + " conv-type-out ( conv-type-in operand )"); " is 908.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("operator"' colorStyle.KeywordOperatorDeclaration) + " keyword is used to declare an operator in a class or struct declaration."; " is 172.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "				result.AddCategory ("Form"' Highlight ("interface"' colorStyle.KeywordDeclaration) + " IMyInterface&lt;" + Highlight ("out"' colorStyle.KeywordParameter) + " T&gt; {}"); " is 169.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "				result.SummaryMarkup = "The " + Highlight ("out"' colorStyle.KeywordParameter) + " method parameter keyword on a method parameter causes a method to refer to the same variable that was passed into the method."; " is 210.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("out"' colorStyle.KeywordParameter) + " parameter-name" + Environment.NewLine + Environment.NewLine + "or" + Environment.NewLine + Environment.NewLine + Highlight ("interface"' colorStyle.KeywordDeclaration) + " IMyInterface&lt;" + Highlight ("out"' colorStyle.KeywordParameter) + " T&gt; {}"); " is 333.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("override"' colorStyle.KeywordModifiers) + " modifier is used to override a method' a property' an indexer' or an event."; " is 165.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("params"' colorStyle.KeywordParameter) + " keyword lets you specify a method parameter that takes an argument where the number of arguments is variable."; " is 197.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("private"' colorStyle.KeywordModifiers) + " keyword is a member access modifier. Private access is the least permissive access level. Private members are accessible only within the body of the class or the struct in which they are declared."; " is 285.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("protected"' colorStyle.KeywordModifiers) + " keyword is a member access modifier. A protected member is accessible from within the class in which it is declared' and from within any class derived from the class that declared this member."; " is 283.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("public"' colorStyle.KeywordModifiers) + " keyword is an access modifier for types and type members. Public access is the most permissive access level. There are no restrictions on accessing public members."; " is 251.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("readonly"' colorStyle.KeywordModifiers) + " keyword is a modifier that you can use on fields. When a field declaration includes a " + Highlight ("readonly"' colorStyle.KeywordModifiers) + " modifier' assignments to the fields introduced by the declaration can only occur as part of the declaration or in a constructor in the same class."; " is 382.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("ref"' colorStyle.KeywordParameter) + " method parameter keyword on a method parameter causes a method to refer to the same variable that was passed into the method."; " is 210.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("return"' colorStyle.KeywordJump) + " statement terminates execution of the method in which it appears and returns control to the calling method."; " is 190.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("sizeof"' colorStyle.KeywordOperators) + " operator is used to obtain the size in bytes for a value type."; " is 150.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' "type * ptr = " + Highlight ("stackalloc"' colorStyle.KeywordOperators) + " type [ expr ];"); " is 121.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "Use the " + Highlight ("static"' colorStyle.KeywordModifiers) + " modifier to declare a static member' which belongs to the type itself rather than to a specific object."; " is 195.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' "[attributes] [modifiers] " + Highlight ("struct"' colorStyle.KeywordDeclaration) + " identifier [:interfaces] body [;]"); " is 150.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "A " + Highlight ("struct"' colorStyle.KeywordDeclaration) + " type is a value type that can contain constructors' constants' fields' methods' properties' indexers' operators' events' and nested types. "; " is 227.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("switch"' colorStyle.KeywordSelection) + " (expression)" + Environment.NewLine + " {" + Environment.NewLine + "  " + Highlight ("case"' colorStyle.KeywordSelection) + " constant-expression:" + Environment.NewLine + "  statement" + Environment.NewLine + "  jump-statement" + Environment.NewLine + "  [" + Highlight ("default"' colorStyle.KeywordSelection) + ":" + Environment.NewLine + "  statement" + Environment.NewLine + "  jump-statement]" + Environment.NewLine + " }"); " is 512.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("switch"' colorStyle.KeywordSelection) + " statement is a control statement that handles multiple selections by passing control to one of the " + Highlight ("case"' colorStyle.KeywordSelection) + " statements within its body."; " is 270.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("this"' colorStyle.KeywordAccessors) + " keyword refers to the current instance of the class."; " is 138.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("throw"' colorStyle.KeywordException) + " statement is used to signal the occurrence of an anomalous situation (exception) during the program execution."; " is 197.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("try"' colorStyle.KeywordException) + " try-block" + Environment.NewLine + "  " + Highlight ("catch"' colorStyle.KeywordException) + " (exception-declaration-1) catch-block-1 " + Environment.NewLine + "  " + Highlight ("catch"' colorStyle.KeywordException) + " (exception-declaration-2) catch-block-2 " + Environment.NewLine + "..." + Environment.NewLine + Highlight ("try"' colorStyle.KeywordException) + " try-block " + Highlight ("catch"' colorStyle.KeywordException) + " catch-block"); " is 528.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The try-catch statement consists of a " + Highlight ("try"' colorStyle.KeywordException) + " block followed by one or more " + Highlight ("catch"' colorStyle.KeywordException) + " clauses' which specify handlers for different exceptions."; " is 263.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("typeof"' colorStyle.KeywordOperators) + " operator is used to obtain the System.Type object for a type."; " is 149.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("unchecked"' colorStyle.KeywordOther) + " block" + Environment.NewLine + Highlight ("unchecked"' colorStyle.KeywordOther) + " (expression)"); " is 180.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("unchecked"' colorStyle.KeywordOther) + " keyword is used to control the overflow-checking context for integral-type arithmetic operations and conversions."; " is 200.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("unsafe"' colorStyle.KeywordOther) + " keyword denotes an unsafe context' which is required for any operation involving pointers."; " is 174.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.AddCategory ("Form"' Highlight ("using"' colorStyle.KeywordNamespace) + " (expression | type identifier = initializer) statement" + Environment.NewLine + Highlight ("using"' colorStyle.KeywordNamespace) + " [alias = ]class_or_namespace;"); " is 246.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("using"' colorStyle.KeywordNamespace) + " directive creates an alias for a namespace or imports types defined in other namespaces. The " + Highlight ("using"' colorStyle.KeywordNamespace) + " statement defines a scope at the end of which an object will be disposed."; " is 310.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("virtual"' colorStyle.KeywordModifiers) + " keyword is used to modify a method or property declaration' in which case the method or the property is called a virtual member."; " is 217.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("volatile"' colorStyle.KeywordModifiers) + " keyword indicates that a field can be modified in the program by something such as the operating system' the hardware' or a concurrently executing thread."; " is 244.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetKeywordTooltip,The length of the statement  "		result.SummaryMarkup = "The " + Highlight ("while"' colorStyle.KeywordIteration) + " statement executes a statement or a block of statements until a specified expression evaluates to false. "; " is 192.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetConstraintTooltip,The length of the statement  "		result.AddCategory ("Constraint"' "The type argument must be a reference type; this applies also to any class' interface' delegate' or array type."); " is 149.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetConstraintTooltip,The length of the statement  "		result.AddCategory ("Constraint"' "The type argument must have a public parameterless constructor. When used together with other constraints' the new() constraint must be specified last."); " is 189.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetConstraintTooltip,The length of the statement  "		result.AddCategory ("Constraint"' "The type argument must be a value type. Any value type except Nullable can be specified. See Using Nullable Types (C# Programming Guide) for more information."); " is 196.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetAliasedNamespaceTooltip,The length of the statement  "	result.AddCategory (GettextCatalog.GetString ("Alias information")' GettextCatalog.GetString ("Resolved using alias '{0}'"' resolveResult.Alias)); " is 146.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetAliasedTypeTooltip,The length of the statement  "	result.AddCategory (GettextCatalog.GetString ("Alias information")' GettextCatalog.GetString ("Resolved using alias '{0}'"' resolveResult.Alias)); " is 146.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendParameterList,The length of the statement  "		var doHighightParameter = i == HighlightParameter || HighlightParameter >= i && i == parameterList.Count - 1 && parameter.IsParams; " is 131.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendConstant,The length of the statement  "		if (constantType.GetDefinition ().Attributes.Any (attr => attr.AttributeType.Name == "FlagsAttribute" && attr.AttributeType.Namespace == "System")) { " is 149.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendConstant,The length of the statement  "		sb.Append ("(" + GetTypeReferenceString (constantType) + ")" + Highlight (constantValue.ToString ()' colorStyle.Number)); " is 121.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AlphaBlend,The length of the statement  "	return new Gdk.Color ((byte)((alpha * color.Red + (1 - alpha) * color2.Red) / 256)' (byte)((alpha * color.Green + (1 - alpha) * color2.Green) / 256)' (byte)((alpha * color.Blue + (1 - alpha) * color2.Blue) / 256)); " is 214.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,CreateFooter,The length of the statement  "					return (string.IsNullOrEmpty (def.Namespace) ? "" : "<small>" + GettextCatalog.GetString ("Namespace:\t{0}"' AmbienceService.EscapeText (def.Namespace)) + "</small>" + Environment.NewLine) + "<small>" + GettextCatalog.GetString ("Project:\t{0}"' AmbienceService.EscapeText (def.ParentAssembly.AssemblyName)) + "</small>" + Environment.NewLine + "<small>" + GettextCatalog.GetString ("File:\t\t{0} (line {1})"' AmbienceService.EscapeText (relPath)' def.Region.Begin.Line) + "</small>"; " is 484.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,CreateFooter,The length of the statement  "			return (string.IsNullOrEmpty (def.Namespace) ? "" : "<small>" + GettextCatalog.GetString ("Namespace:\t{0}"' AmbienceService.EscapeText (def.Namespace)) + "</small>" + Environment.NewLine) + "<small>" + GettextCatalog.GetString ("Assembly:\t{0}"' AmbienceService.EscapeText (def.ParentAssembly.AssemblyName)) + "</small>"; " is 322.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,CreateFooter,The length of the statement  "				return "<small>" + GettextCatalog.GetString ("Project:\t{0}"' AmbienceService.EscapeText (project.Name)) + "</small>" + Environment.NewLine + "<small>" + GettextCatalog.GetString ("From type:\t{0}"' AmbienceService.EscapeText (entity.DeclaringTypeDefinition.FullName)) + "</small>" + Environment.NewLine + "<small>" + GettextCatalog.GetString ("File:\t\t{0} (line {1})"' AmbienceService.EscapeText (relPath)' entity.Region.Begin.Line) + "</small>"; " is 448.
Long Statement,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,CreateFooter,The length of the statement  "		return "<small>" + GettextCatalog.GetString ("From type:\t{0}"' AmbienceService.EscapeText (entity.DeclaringTypeDefinition.FullName)) + "</small>" + Environment.NewLine + "<small>" + GettextCatalog.GetString ("Assembly:\t{0}"' AmbienceService.EscapeText (entity.DeclaringTypeDefinition.ParentAssembly.AssemblyName)) + "</small>"; " is 329.
Long Statement,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,CreateTooltip,The length of the statement  "		OutputSettings settings = new OutputSettings (OutputFlags.ClassBrowserEntries | OutputFlags.IncludeParameterName | OutputFlags.IncludeKeywords | OutputFlags.IncludeMarkup | OutputFlags.UseFullName); " is 198.
Long Statement,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,CreateTooltip,The length of the statement  "				s.Append (String.Format (GettextCatalog.GetString ("Unresolved identifier '{0}'")' ((UnknownIdentifierResolveResult)result).Identifier)); " is 137.
Long Statement,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,CreateTooltip,The length of the statement  "						s.Append (string.Format (GettextCatalog.GetPluralString (" (+{0} overload)"' " (+{0} overloads)"' overloadCount)' overloadCount)); " is 130.
Long Statement,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,Parse,The length of the statement  "	result.CreateRefactoringContextWithEditor = (data' resolver' token) => new MDRefactoringContext ((DotNetProject)project' data' result' (CSharpAstResolver)resolver' TextLocation.Empty' token); " is 191.
Long Statement,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,CloseConditionBlock,The length of the statement  "	if (ConditionalRegion == null || ConditionalRegion.ConditionBlocks.Count == 0 || !ConditionalRegion.ConditionBlocks [ConditionalRegion.ConditionBlocks.Count - 1].End.IsEmpty) " is 174.
Long Statement,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,GetCompilerArguments,The length of the statement  "	var configuration = project.GetConfiguration (MonoDevelop.Ide.IdeApp.Workspace.ActiveConfiguration) as DotNetProjectConfiguration; " is 130.
Long Statement,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The length of the statement  "						result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true)); " is 158.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,HandleCodeCompletion,The length of the statement  "			if (completionContext.TriggerOffset > 1 && char.IsLetterOrDigit (document.Editor.GetCharAt (completionContext.TriggerOffset - 2))) " is 130.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,HandleCodeCompletion,The length of the statement  "		LoggingService.LogError ("Unexpected code completion exception." + Environment.NewLine + "FileName: " + Document.FileName + Environment.NewLine + "Position: line=" + completionContext.TriggerLine + " col=" + completionContext.TriggerLineOffset + Environment.NewLine + "Line text: " + Document.Editor.GetLineText (completionContext.TriggerLine)' e); " is 348.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,CreateTypeResolveContext,The length of the statement  "			var curMember = resolvedDef.Members.FirstOrDefault (m => m.Region.FileName == foundMember.Region.FileName && m.Region.Begin == foundMember.Region.Begin); " is 153.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,InternalHandleCodeCompletion,The length of the statement  "	list.Resolver = CSharpUnresolvedFile != null ? CSharpUnresolvedFile.GetResolver (UnresolvedFileCompilation' Document.Editor.Caret.Location) : new CSharpResolver (Compilation); " is 175.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,InternalHandleCodeCompletion,The length of the statement  "	var engine = new MonoCSharpCompletionEngine (this' data.Document' CreateContextProvider ()' completionDataFactory' Document.GetProjectContext ()' ctx); " is 151.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,InternalHandleCodeCompletion,The length of the statement  "		engine.EditorBrowsableBehavior = IncludeEditorBrowsableAdvancedMembers ? EditorBrowsableBehavior.IncludeAdvanced : EditorBrowsableBehavior.Normal; " is 146.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,InternalHandleCodeCompletion,The length of the statement  "		var configuration = Document.Project.GetConfiguration (MonoDevelop.Ide.IdeApp.Workspace.ActiveConfiguration) as DotNetProjectConfiguration; " is 139.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,GuessBestMethodOverload,The length of the statement  "	var engine = new CSharpParameterCompletionEngine (TextEditorData.Document' CreateContextProvider ()' this' Document.GetProjectContext ()' ctx); " is 143.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,GuessBestMethodOverload,The length of the statement  "	if (cparam > provider.GetParameterCount (currentOverload) && !provider.AllowParameterList (currentOverload) || !HasAllUsedParameters (provider' list' currentOverload)) { " is 169.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,HandleParameterCompletion,The length of the statement  "		var engine = new CSharpParameterCompletionEngine (TextEditorData.Document' CreateContextProvider ()' this' Document.GetProjectContext ()' ctx); " is 143.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,HandleParameterCompletion,The length of the statement  "		LoggingService.LogError ("Unexpected parameter completion exception." + Environment.NewLine + "FileName: " + Document.FileName + Environment.NewLine + "Position: line=" + completionContext.TriggerLine + " col=" + completionContext.TriggerLineOffset + Environment.NewLine + "Line text: " + Document.Editor.GetLineText (completionContext.TriggerLine)' e); " is 353.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,GetParameterCompletionCommandOffset,The length of the statement  "	var engine = new CSharpParameterCompletionEngine (TextEditorData.Document' CreateContextProvider ()' this' Document.GetProjectContext ()' ctx); " is 143.
Long Statement,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,GetCurrentParameterIndex,The length of the statement  "	var engine = new CSharpParameterCompletionEngine (TextEditorData.Document' CreateContextProvider ()' this' Document.GetProjectContext ()' ctx); " is 143.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,HasNonMethodMembersWithSameName,The length of the statement  "	return member.DeclaringType.GetFields ().Cast<INamedElement> ().Concat (member.DeclaringType.GetProperties ().Cast<INamedElement> ()).Concat (member.DeclaringType.GetEvents ().Cast<INamedElement> ()).Concat (member.DeclaringType.GetNestedTypes ().Cast<INamedElement> ()).Any (e => e.Name == member.Name); " is 304.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The length of the statement  "	InsertCompletionText (window' ref ka' closeChar' keyChar' modifier' CompletionTextEditorExtension.AddParenthesesAfterCompletion' CompletionTextEditorExtension.AddOpeningOnly); " is 175.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The length of the statement  "	if (addParens && !IsDelegateExpected && method != null && !HasNonMethodMembersWithSameName ((IMember)Entity) && !IsBracketAlreadyInserted (method)) { " is 149.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The length of the statement  "				if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')') " is 133.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The length of the statement  "	if ((DisplayFlags & DisplayFlags.NamedArgument) == DisplayFlags.NamedArgument && (closeChar == Gdk.Key.Tab || closeChar == Gdk.Key.KP_Tab || closeChar == Gdk.Key.ISO_Left_Tab || closeChar == Gdk.Key.Return || closeChar == Gdk.Key.KP_Enter || closeChar == Gdk.Key.ISO_Enter)) { " is 276.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,SetMember,The length of the statement  "	this.completionString = displayText = (Entity.SymbolKind == SymbolKind.Constructor ? Entity.DeclaringTypeDefinition : Entity).Name; " is 131.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,GetBuilder,The length of the statement  "	var ctx = editorCompletion.CSharpUnresolvedFile.GetTypeResolveContext (editorCompletion.UnresolvedFileCompilation' editorCompletion.Document.Editor.Caret.Location) as CSharpTypeResolveContext; " is 192.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The length of the statement  "	return CreateTooltipInformation (editorCompletion.UnresolvedFileCompilation' editorCompletion.CSharpUnresolvedFile' resolver' editorCompletion.TextEditorData' editorCompletion.FormattingPolicy' entity' smartWrap); " is 213.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The length of the statement  "	return CreateTooltipInformation (compilation' file' null' textEditorData' formattingPolicy' entity' smartWrap' createFooter); " is 125.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The length of the statement  "		resolver = file != null ? file.GetResolver (compilation' textEditorData.Caret.Location) : new CSharpResolver (compilation); " is 123.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The length of the statement  "	var resolver = file != null ? file.GetResolver (compilation' textEditorData.Caret.Location) : new CSharpResolver (compilation); " is 127.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The length of the statement  "			typeInfo.AppendLine (type.GetDefinition ().TypeParameters [i].Name + " is " + sig.GetTypeReferenceString (type.TypeArguments [i])); " is 131.
Long Statement,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,CreateTooltipInformation,The length of the statement  "	return CreateTooltipInformation (compilation' file' editorCompletion.TextEditorData' editorCompletion.FormattingPolicy' Entity' smartWrap); " is 139.
Long Statement,MonoDevelop.CSharp.Completion,DelegateDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\DelegateDataProvider.cs,CreateTooltipInformation,The length of the statement  "	return MethodParameterDataProvider.CreateTooltipInformation (ext' compilation' file' delegateMethod' currentParameter' smartWrap); " is 130.
Long Statement,MonoDevelop.CSharp.Completion,MethodParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MethodParameterDataProvider.cs,CreateTooltipInformation,The length of the statement  "	return CreateTooltipInformation (compilation' file' ext.TextEditorData' ext.FormattingPolicy' entity' currentParameter' smartWrap); " is 131.
Long Statement,MonoDevelop.CSharp.Completion,MethodParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MethodParameterDataProvider.cs,CreateTooltipInformation,The length of the statement  "			Regex paramRegex = new Regex ("(\\<param\\s+name\\s*=\\s*\"" + curParameter.Name + "\"\\s*\\>.*?\\</param\\>)"' RegexOptions.Compiled); " is 135.
Long Statement,MonoDevelop.CSharp.Completion,NewOverrideCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\NewOverrideCompletionData.cs,InsertCompletionText,The length of the statement  "	var region = lastRegion == null ? null : new CodeGeneratorBodyRegion (lastRegion.StartOffset - trimStart' lastRegion.EndOffset - trimStart); " is 140.
Long Statement,MonoDevelop.CSharp.Completion,EventCreationCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\EventCreationCompletionData.cs,InsertCompletionText,The length of the statement  "	int pos = callingMember != null && !callingMember.BodyRegion.Begin.IsEmpty ? editor.Document.LocationToOffset (callingMember.BodyRegion.BeginLine' callingMember.BodyRegion.BeginColumn) : initialOffset; " is 201.
Long Statement,MonoDevelop.CSharp.Completion,EventCreationCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\EventCreationCompletionData.cs,InsertCompletionText,The length of the statement  "	var line = callingMember != null ? editor.Document.GetLine (callingMember.Region.BeginLine) : editor.Document.GetLineByOffset (initialOffset); " is 142.
Long Statement,MonoDevelop.CSharp.Completion,IndexerParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\IndexerParameterDataProvider.cs,CreateTooltipInformation,The length of the statement  "	return MethodParameterDataProvider.CreateTooltipInformation (ext' compilation' file' indexers [overload]' currentParameter' smartWrap); " is 135.
Long Statement,MonoDevelop.CSharp.Completion,AbstractParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\AbstractParameterDataProvider.cs,GetShortType,The length of the statement  "		var ctx = ext.CSharpUnresolvedFile.GetTypeResolveContext (ext.UnresolvedFileCompilation' ext.Document.Editor.Caret.Location); " is 125.
Long Statement,MonoDevelop.CSharp.Completion,TypeParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\TypeParameterDataProvider.cs,GetParameterDescription,The length of the statement  "		return ambience.GetString (methods [overload].TypeParameters [paramIndex]' OutputFlags.AssemblyBrowserDescription | OutputFlags.HideExtensionsParameter | OutputFlags.IncludeGenerics | OutputFlags.IncludeModifiers | OutputFlags.HighlightName); " is 242.
Long Statement,MonoDevelop.CSharp.Completion,TypeParameterDataProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\TypeParameterDataProvider.cs,GetParameterDescription,The length of the statement  "	return ambience.GetString (type.GetDefinition ().TypeParameters [paramIndex]' OutputFlags.AssemblyBrowserDescription | OutputFlags.HideExtensionsParameter | OutputFlags.IncludeGenerics | OutputFlags.IncludeModifiers | OutputFlags.HighlightName); " is 245.
Long Statement,MonoDevelop.CSharp.Completion,MonoCSharpCompletionEngine,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MonoCSharpCompletionEngine.cs,GetProtocolMembers,The length of the statement  "			if (member.Attributes.Any (a => a.AttributeType.Name == "ExportAttribute" && a.AttributeType.Namespace == "MonoTouch.Foundation")) { " is 132.
Long Statement,MonoDevelop.CSharp.Completion,MonoCSharpCompletionEngine,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MonoCSharpCompletionEngine.cs,GetProtocolMembers,The length of the statement  "			if (member.CanGet && member.Getter.Attributes.Any (a => a.AttributeType.Name == "ExportAttribute" && a.AttributeType.Namespace == "MonoTouch.Foundation") || member.CanSet && member.Setter.Attributes.Any (a => a.AttributeType.Name == "ExportAttribute" && a.AttributeType.Namespace == "MonoTouch.Foundation")) " is 307.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,GetReference,The length of the statement  "		valid = ((MethodGroupResolveResult)result).Methods.FirstOrDefault (m => searchedMembers.Any (member => member is IMethod && ((IMethod)member).Region == m.Region)); " is 163.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,GetReference,The length of the statement  "		valid = searchedMembers.FirstOrDefault (n => n is INamespace && ns.FullName.StartsWith (((INamespace)n).FullName' StringComparison.Ordinal)); " is 141.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,GetReference,The length of the statement  "	var reference = new CSharpMemberReference (project' originalNode' syntaxTree' valid' region' editor.LocationToOffset (region.Begin)' length); " is 141.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,GetUsage,The length of the statement  "		if (unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement) { " is 279.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,FindReferences,The length of the statement  "	var scopes = searchedMembers.Select (e => e is INamespace ? refFinder.GetSearchScopes ((INamespace)e) : refFinder.GetSearchScopes ((ISymbol)e)); " is 144.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,FindReferences,The length of the statement  "		if (memberName != null && text.IndexOf (memberName' StringComparison.Ordinal) < 0 && (keywordName == null || text.IndexOf (keywordName' StringComparison.Ordinal) < 0)) " is 167.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,AppendObsoleteAttribute,The length of the statement  "	var shortType = resolvedType.Kind != TypeKind.Unknown ? CreateShortType (options.ImplementingType.Compilation' file' loc' resolvedType) : null; " is 143.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,AppendNotImplementedException,The length of the statement  "	//			AppendReturnType (result' options.ImplementingType' options.Ctx.GetTypeDefinition (typeof (System.NotImplementedException))); " is 130.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The length of the statement  "	if (!options.ExplicitDeclaration && isFromInterface && typeParameters.Any (p => p.HasDefaultConstructorConstraint || p.HasReferenceTypeConstraint || p.HasValueTypeConstraint || p.DirectBaseTypes.Any (validBaseType))) { " is 218.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The length of the statement  "		if (method.Name == "ToString" && (method.Parameters == null || method.Parameters.Count == 0) && method.ReturnType != null/* && method.ReturnType.FullName == "System.String"*/) { " is 177.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The length of the statement  "		else if (method.IsAbstract || !(method.IsVirtual || method.IsOverride) || method.DeclaringTypeDefinition.Kind == TypeKind.Interface) { " is 134.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GetModifiers,The length of the statement  "		if (IdeApp.Workbench.ActiveDocument != null && member.DeclaringTypeDefinition.ParentAssembly != implementingType.ParentAssembly) { " is 130.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GetModifiers,The length of the statement  "		if (IdeApp.Workbench.ActiveDocument != null && member.DeclaringTypeDefinition.ParentAssembly != implementingType.ParentAssembly) { " is 130.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,AppendModifiers,The length of the statement  "		//						if (type.Members.Any (m => m.Name == member.Name && member.SymbolKind == m.SymbolKind /* && DomMethod.ParameterListEquals (member.Parameters' m.Parameters)*/ )) { " is 170.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,IsMonoTouchModelMember,The length of the statement  "	return member.DeclaringTypeDefinition.Attributes.Any (attr => attr.AttributeType != null && attr.AttributeType.ReflectionName == "MonoTouch.Foundation.ModelAttribute"); " is 168.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,CountBlankLines,The length of the statement  "	while ((line = doc.Editor.GetLine (startLine + result)) != null && doc.Editor.GetLineIndent (line).Length == line.Length) { " is 123.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,InsertUsingAfter,The length of the statement  "	return node is NewLineNode && IsCommentOrUsing (node.GetNextSibling (s => !(s is NewLineNode))) || IsCommentOrUsing (node); " is 123.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GetShortTypeString,The length of the statement  "	var shortType = CreateShortType (doc.Compilation' doc.ParsedDocument.ParsedFile as CSharpUnresolvedFile' doc.Editor.Caret.Location' type); " is 138.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,CompleteStatement,The length of the statement  "	if (trimmedline.StartsWith ("if") || trimmedline.StartsWith ("while") || trimmedline.StartsWith ("switch") || trimmedline.StartsWith ("for") || trimmedline.StartsWith ("foreach")) { " is 181.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,CompleteStatement,The length of the statement  "			file.Insert (lastPos' " () {" + file.EolMarker + indent + file.Options.IndentationString + file.EolMarker + indent + "}"); " is 122.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,CompleteStatement,The length of the statement  "		file.Insert (lastPos' " {" + file.EolMarker + indent + file.Options.IndentationString + file.EolMarker + indent + "} while ();"); " is 129.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerationService,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerationService.cs,GenerateMemberImplementation,The length of the statement  "				m.Body.InsertChildBefore (m.Body.Statements.First ()' new Comment (CSharpCodeGenerator.MonoTouchComments [i])' Roles.Comment); " is 126.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerationService,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerationService.cs,GenerateMemberImplementation,The length of the statement  "					p.Getter.Body.InsertChildBefore (p.Getter.Body.Statements.First ()' new Comment (CSharpCodeGenerator.MonoTouchComments [i])' Roles.Comment); " is 140.
Long Statement,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerationService,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerationService.cs,GenerateMemberImplementation,The length of the statement  "					p.Setter.Body.InsertChildBefore (p.Setter.Body.Statements.First ()' new Comment (CSharpCodeGenerator.MonoTouchComments [i])' Roles.Comment); " is 140.
Long Statement,MonoDevelop.CodeGeneration,AbstractGenerateAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\AbstractGenerateAction.cs,Initialize,The length of the statement  "			Store.AppendValues (false' ImageService.GetPixbuf (member.GetStockIcon ()' IconSize.Menu)' ambience.GetString (member' OutputFlags.ClassBrowserEntries)' member); " is 161.
Long Statement,MonoDevelop.CodeGeneration,AbstractGenerateAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\AbstractGenerateAction.cs,Initialize,The length of the statement  "			Store.AppendValues (false' ImageService.GetPixbuf (tuple.Item1.GetStockIcon ()' IconSize.Menu)' ambience.GetString (tuple.Item1' OutputFlags.ClassBrowserEntries)' tuple); " is 170.
Long Statement,MonoDevelop.CodeGeneration,AbstractGenerateAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\AbstractGenerateAction.cs,GenerateCode,The length of the statement  "	string indent = RefactoringOptions.GetIndent (options.Document' (IEntity)options.EnclosingMember ?? options.EnclosingType) + "\t"; " is 130.
Long Statement,MonoDevelop.CodeGeneration,CodeGenerationOptions,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\CodeGenerationOptions.cs,CreateCodeGenerationOptions,The length of the statement  "			options.EnclosingMember = options.EnclosingType.Members.FirstOrDefault (m => !m.IsSynthetic && m.Region.FileName == document.FileName && m.Region.IsInside (document.Editor.Caret.Location)); " is 189.
Long Statement,MonoDevelop.CodeGeneration,BaseExportCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\ExportCodeGenerator.cs,GenerateExportAttribute,The length of the statement  "	var exportAttribute = member.GetAttribute (new FullTypeName (new TopLevelTypeName ("MonoTouch.Foundation"' "ExportAttribute"))); " is 128.
Long Statement,MonoDevelop.CodeGeneration,BaseExportCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\ExportCodeGenerator.cs,GetProtocolMember,The length of the statement  "			if (prop.CanGet && GenerateExportAttribute (ctx' prop.Getter) != null || prop.CanSet && GenerateExportAttribute (ctx' prop.Setter) != null) " is 139.
Long Statement,MonoDevelop.CodeGeneration,BaseExportCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\ExportCodeGenerator.cs,GetProtocol,The length of the statement  "	var attr = member.Attributes.FirstOrDefault (a => a.AttributeType.Name == "ExportAttribute" && a.AttributeType.Namespace == "MonoTouch.Foundation"); " is 148.
Long Statement,MonoDevelop.CodeGeneration,BaseExportCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\ExportCodeGenerator.cs,IsImplemented,The length of the statement  "			if (p.CanGet && ((IProperty)protocolMember).CanGet && GetProtocol (p.Getter) == GetProtocol (((IProperty)protocolMember).Getter)) " is 129.
Long Statement,MonoDevelop.CodeGeneration,BaseExportCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\ExportCodeGenerator.cs,IsImplemented,The length of the statement  "			if (p.CanSet && ((IProperty)protocolMember).CanSet && GetProtocol (p.Setter) == GetProtocol (((IProperty)protocolMember).Setter)) " is 129.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MoveTypeToFile,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\MoveTypeToFile.cs,GetActions,The length of the statement  "		title = String.Format (GettextCatalog.GetString ("Rename file to '{0}'")' Path.GetFileName (GetCorrectFileName (context' type))); " is 129.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MoveTypeToFile,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\MoveTypeToFile.cs,GetActions,The length of the statement  "		title = String.Format (GettextCatalog.GetString ("Move type to file '{0}'")' Path.GetFileName (GetCorrectFileName (context' type))); " is 132.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MoveTypeToFile,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\MoveTypeToFile.cs,GetCorrectFileName,The length of the statement  "	return Path.Combine (Path.GetDirectoryName (context.TextEditor.FileName)' type.Name + Path.GetExtension (context.TextEditor.FileName)); " is 135.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "	var mode = new InsertionCursorEditMode (editor.Parent' MonoDevelop.Ide.TypeSystem.CodeGenerationService.GetInsertionPoints (context.TextEditor' context.ParsedDocument' declaringType)); " is 184.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "		MessageService.ShowError (GettextCatalog.GetString ("No valid insertion point can be found in type '{0}'."' declaringType.Name)); " is 129.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "			if (iCArgs.InsertionPoint.LineAfter == NewLineInsertion.None && iCArgs.InsertionPoint.LineBefore == NewLineInsertion.None && nodes.Count () > 1) { " is 146.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "				var output = OutputNode (MonoDevelop.Ide.TypeSystem.CodeGenerationService.CalculateBodyIndentLevel (declaringType)' node); " is 122.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "			script = new MDRefactoringScript (MDRefactoringContext.Create (loadedDocument' loc' context.CancellationToken)' FormattingOptions); " is 131.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "		var mode = new InsertionCursorEditMode (editor.Parent' MonoDevelop.Ide.TypeSystem.CodeGenerationService.GetInsertionPoints (loadedDocument' declaringType)); " is 156.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "			MessageService.ShowError (GettextCatalog.GetString ("No valid insertion point can be found in type '{0}'."' declaringType.Name)); " is 129.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "				var output = OutputNode (MonoDevelop.Ide.TypeSystem.CodeGenerationService.CalculateBodyIndentLevel (declaringType)' node); " is 122.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "				if (iCArgs.InsertionPoint.LineAfter == NewLineInsertion.None && iCArgs.InsertionPoint.LineBefore == NewLineInsertion.None && nodes.Count > 1) { " is 143.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The length of the statement  "					var output = OutputNode (MonoDevelop.Ide.TypeSystem.CodeGenerationService.CalculateBodyIndentLevel (declaringType)' node); " is 122.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,Link,The length of the statement  "	var segments = new List<TextSegment> (nodes.Select (node => new TextSegment (GetSegment (node))).OrderBy (s => s.Offset)); " is 122.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,DoGlobalOperationOn,The length of the statement  "	using (var monitor = IdeApp.Workbench.ProgressMonitors.GetBackgroundProgressMonitor (operationName ?? GettextCatalog.GetString ("Performing refactoring task...")' null)) { " is 171.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,DoGlobalOperationOn,The length of the statement  "		var col = entities.SelectMany (entity => ReferenceFinder.FindReferences (entity' true' monitor)).OfType<CSharpReferenceFinder.CSharpMemberReference> ().GroupBy (reference => reference.FileName); " is 194.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,DoGlobalOperationOn,The length of the statement  "			var resolver = new CSharpAstResolver (TypeSystemService.GetCompilation (project)' firstReference.SyntaxTree' parsedDocument.ParsedFile as CSharpUnresolvedFile); " is 160.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,DoGlobalOperationOn,The length of the statement  "			var ctx = new MDRefactoringContext (project as DotNetProject' data' parsedDocument' resolver' firstReference.AstNode.StartLocation' context.CancellationToken); " is 159.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,CreateNewType,The length of the statement  "	content = content.Substring (0' insertLocation) + newType.ToString (FormattingOptions) + content.Substring (insertLocation); " is 124.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,CreateNewType,The length of the statement  "		content = MonoDevelop.CSharp.Formatting.CSharpFormatter.FormatText (policy' textPolicy' MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType' content' 0' content.Length); " is 172.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,NRefactoryCodeActionSource,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\NRefactoryCodeActionSource.cs,GetProviders,The length of the statement  "	foreach (var t in typeof(ICSharpCode.NRefactory.CSharp.Refactoring.AbstractAndVirtualConversionAction).Assembly.GetTypes ()) { " is 126.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,NRefactoryCodeActionSource,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\NRefactoryCodeActionSource.cs,GetProviders,The length of the statement  "		yield return new NRefactoryCodeActionProvider ((ICSharpCode.NRefactory.CSharp.Refactoring.CodeActionProvider)Activator.CreateInstance (t)' (ICSharpCode.NRefactory.CSharp.ContextActionAttribute)attr [0]); " is 203.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetActions,The length of the statement  "	var constFields = containerType.Members.OfType<FieldDeclaration> ().Where (field => field.GetParent<TypeDeclaration> () == containerType && field.HasModifier (Modifiers.Const)).ToList (); " is 187.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,PrepareToRunAction,The length of the statement  "	using (var dialog = new ConvertToEnumDialog (prefix' variables' variables.Where (variable => variable.Name.StartsWith (prefix' StringComparison.InvariantCulture) && VariableHasSpecifiedIntegerType (context' variable' baseType)).ToList ()' newNames)) { " is 251.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,RunAction,The length of the statement  "	var fields = containerTypeDeclaration.Members.OfType<FieldDeclaration> ().Where (field => field.Modifiers.HasFlag (Modifiers.Const)).ToList (); " is 143.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,RunAction,The length of the statement  "	foreach (var member in root.Descendants.OfType<MemberReferenceExpression> ().Where (member => names.Contains (member.MemberName))) { " is 132.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,ReplaceVariableReferences,The length of the statement  "			if (root.Descendants.OfType<TypeDeclaration> ().Select (type => ((TypeResolveResult)context.Resolve (type)).Type.FullName).ToList ().Contains (((TypeResolveResult)newCtx.Resolve (newContainerType)).Type.FullName)) { " is 215.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,CreateEnumDeclaration,The length of the statement  "	generatedEnum.Modifiers = GetCombinedModifier ((Modifiers)variables.Select (variable => ((FieldDeclaration)variable.Parent).Modifiers).Aggregate (0' (prev' newModifier) => prev | (int)newModifier)); " is 198.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,CreateEnumDeclaration,The length of the statement  "		foreach (var identifier in value.DescendantsAndSelf.OfType<IdentifierExpression> ().Where (identifier => names.Contains (identifier.Identifier))) { " is 147.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,CreateReplacementMemberReference,The length of the statement  "	return new ParenthesizedExpression (new CastExpression (baseType.Clone ()' new MemberReferenceExpression (new MemberReferenceExpression (memberToReplace.Target.Clone ()' enumName)' newNames [memberToReplace.MemberName]))); " is 222.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,FixIdentifiers,The length of the statement  "	foreach (var identifier in root.Descendants.OfType<IdentifierExpression> ().Where (identifier => names.Contains (identifier.Identifier))) { " is 139.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,CreateIdentifierReplacement,The length of the statement  "	var replacement = new ParenthesizedExpression (new CastExpression (baseType.Clone ()' new MemberReferenceExpression (new IdentifierExpression (enumName)' newNames [identifier.Identifier]))); " is 190.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetEquivalentNodeFor,The length of the statement  "		return ((BlockStatement)newRoot).Statements.ElementAt (block.TakeWhile (statement => statement != nodeToFind).Count ()); " is 120.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetEquivalentNodeFor,The length of the statement  "	var candidates = newRoot.Children.Where (child => child.GetType () == nodeToFind.GetType () && child.Role == nodeToFind.Role); " is 126.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetEquivalentNodeFor,The length of the statement  "			throw new NotImplementedException ("Two or more namespace declarations with the same name are siblings. This case is not currently supported by this action."); " is 159.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetCommonPrefixes,The length of the statement  "	List<string> proposedPrefixes = boundariesForCurrentWord.Select (boundary => currentName.Substring (0' boundary)).ToList (); " is 124.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeActions,ConvertToEnumAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\Actions\ConvertToEnumAction.cs,GetCommonPrefixes,The length of the statement  "	return proposedPrefixes.Where (prefix => names.Count (name => name.StartsWith (prefix' StringComparison.InvariantCulture)) > 1); " is 128.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryCodeIssueSource,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryCodeIssueSource.cs,GetProviders,The length of the statement  "	foreach (var t in typeof(ICSharpCode.NRefactory.CSharp.Refactoring.AbstractAndVirtualConversionAction).Assembly.GetTypes ()) { " is 126.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryCodeIssueSource,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryCodeIssueSource.cs,GetProviders,The length of the statement  "		yield return new NRefactoryIssueProvider ((ICSharpCode.NRefactory.CSharp.Refactoring.CodeIssueProvider)Activator.CreateInstance (t)' (ICSharpCode.NRefactory.CSharp.IssueDescriptionAttribute)attr [0]); " is 200.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,GetActions,The length of the statement  "			var boundActionProvider = (ICSharpCode.NRefactory.CSharp.Refactoring.CodeActionProvider)Activator.CreateInstance (provider); " is 124.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,ToMonoDevelopRepresentation,The length of the statement  "		yield return new CodeIssue (issue.IssueMarker' GettextCatalog.GetString (issue.Description ?? "")' context.TextEditor.FileName' issue.Start' issue.End' IdString' actions) { " is 172.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,DisableOnce,The length of the statement  "	document.Editor.Insert (document.Editor.LocationToOffset (loc.BeginLine' 1)' document.Editor.IndentationTracker.GetIndentationString (loc.Begin) + "// " + analysisDisableTag + "disable once " + attr.AnalysisDisableKeyword + document.Editor.EolMarker); " is 251.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,DisableAndRestore,The length of the statement  "		document.Editor.Insert (document.Editor.LocationToOffset (loc.EndLine + 1' 1)' document.Editor.IndentationTracker.GetIndentationString (loc.End) + "// " + analysisDisableTag + "restore " + attr.AnalysisDisableKeyword + document.Editor.EolMarker); " is 246.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,DisableAndRestore,The length of the statement  "		document.Editor.Insert (document.Editor.LocationToOffset (loc.BeginLine' 1)' document.Editor.IndentationTracker.GetIndentationString (loc.Begin) + "// " + analysisDisableTag + "disable " + attr.AnalysisDisableKeyword + document.Editor.EolMarker); " is 246.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,DisableWithPragma,The length of the statement  "		document.Editor.Insert (document.Editor.LocationToOffset (loc.EndLine + 1' 1)' document.Editor.IndentationTracker.GetIndentationString (loc.End) + "#pragma warning restore " + attr.PragmaWarning + document.Editor.EolMarker); " is 224.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,DisableWithPragma,The length of the statement  "		document.Editor.Insert (document.Editor.LocationToOffset (loc.BeginLine' 1)' document.Editor.IndentationTracker.GetIndentationString (loc.Begin) + "#pragma warning disable " + attr.PragmaWarning + document.Editor.EolMarker); " is 224.
Long Statement,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,SuppressWithAttribute,The length of the statement  "	document.Editor.Insert (document.Editor.LocationToOffset (member.Region.BeginLine' 1)' document.Editor.IndentationTracker.GetIndentationString (loc.Begin) + string.Format ("[SuppressMessage(\"{0}\"' \"{1}\")]" + document.Editor.EolMarker' attr.SuppressMessageCategory' attr.SuppressMessageCheckId)); " is 299.
Long Statement,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,GetItem,The length of the statement  "	return lastResult = new TooltipItem (new ToolTipData (unit' result' node' resolver)' startOffset' endOffset - startOffset); " is 123.
Long Statement,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,ShowTooltipWindow,The length of the statement  "	var caret = new Gdk.Rectangle ((int)p1.X - positionWidget.Allocation.X' (int)p2.Y - positionWidget.Allocation.Y' (int)(p2.X - p1.X)' (int)editor.LineHeight); " is 157.
Long Statement,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,CreateTooltip,The length of the statement  "				SignatureMarkup = string.Format ("error CS0103: The name `{0}' does not exist in the current context"' ((UnknownIdentifierResolveResult)result).Identifier) " is 155.
Long Statement,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,CreateTooltip,The length of the statement  "					SignatureMarkup = string.Format ("error CS0117: `{0}' does not contain a definition for `{1}'"' ur.TargetType.FullName' ur.MemberName) " is 134.
Long Statement,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,CreateTooltip,The length of the statement  "				return MemberCompletionData.CreateTooltipInformation (doc.Compilation' file' doc.Editor' doc.GetFormattingPolicy ()' method' false' createFooter); " is 146.
Long Statement,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,CreateTooltip,The length of the statement  "			return MemberCompletionData.CreateTooltipInformation (doc.Compilation' file' doc.Editor' doc.GetFormattingPolicy ()' member' false' createFooter); " is 146.
Long Statement,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,CreateTooltip,The length of the statement  "			return MemberCompletionData.CreateTooltipInformation (doc.Compilation' file' doc.Editor' doc.GetFormattingPolicy ()' member' false' createFooter); " is 146.
Long Statement,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,CreateTooltip,The length of the statement  "			return MemberCompletionData.CreateTooltipInformation (doc.Compilation' file' doc.Editor' doc.GetFormattingPolicy ()' result.Type' false' createFooter); " is 151.
Complex Conditional,MonoDevelop.CSharp.Highlighting,HighlightUsagesExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\HighlightUsagesExtension.cs,ShowReferences,The conditional expression  "!alphaBlend && editor.TextViewMargin.SearchResults.Any (sr => sr.Contains (offset) || sr.Contains (endOffset) || offset < sr.Offset && sr.EndOffset < endOffset)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,RunFormatter,The conditional expression  "OnTheFlyFormatting && textEditorData != null && !(textEditorData.CurrentMode is TextLinkEditMode) && !(textEditorData.CurrentMode is InsertionCursorEditMode)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,HandleTextReplacing,The conditional expression  "o < 0 || o + 1 > textEditorData.Length || e.RemovalLength != 1 || textEditorData.Document.IsInUndo"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ReindentOnTab,The conditional expression  "stateTracker.IsInsideVerbatimString && cursor > 0 && cursor < textEditorData.Document.TextLength && textEditorData.GetCharAt (cursor - 1) == '"'"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The conditional expression  "keyChar == ';' && !(textEditorData.CurrentMode is TextLinkEditMode) && !DoInsertTemplate () && !isSomethingSelected && PropertyService.Get ("SmartSemicolonPlacement"' false)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The conditional expression  "OnTheFlyFormatting && textEditorData != null && !(textEditorData.CurrentMode is TextLinkEditMode) && !(textEditorData.CurrentMode is InsertionCursorEditMode)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The conditional expression  "key == Gdk.Key.Tab && DefaultSourceEditorOptions.Instance.TabIsReindent && !CompletionWindowManager.IsVisible && !(textEditorData.CurrentMode is TextLinkEditMode) && !DoInsertTemplate () && !isSomethingSelected"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The conditional expression  "!(oldLine == textEditorData.Caret.Line + 1 && lastCharInserted == '\n') && (oldBufLen != textEditorData.Length || lastCharInserted != '\0')"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,KeyPress,The conditional expression  "OnTheFlyFormatting && textEditorData != null && !(textEditorData.CurrentMode is TextLinkEditMode) && !(textEditorData.CurrentMode is InsertionCursorEditMode)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The conditional expression  "isInString || isInChar || isVerbatimString || isInLineComment || isInBlockComment"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The conditional expression  "!(isInString || isInChar || isInLineComment || isInBlockComment) && pos + 1 < max && data.Document.GetCharAt (pos + 1) == '"'"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The conditional expression  "isInString && isVerbatimString && pos + 1 < max && data.Document.GetCharAt (pos + 1) == '"'"  is complex.
Complex Conditional,MonoDevelop.CSharp.Formatting,OnTheFlyFormatter,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\OnTheFlyFormatter.cs,BuildStub,The conditional expression  "lex.IsInString || lex.IsInChar || lex.IsInVerbatimString || lex.IsInSingleComment || lex.IsInMultiLineComment || lex.IsInPreprocessorDirective"  is complex.
Complex Conditional,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,CreateErrorFromString,The conditional expression  "error_string.StartsWith ("WROTE SYMFILE") || error_string.StartsWith ("OffsetTable") || error_string.StartsWith ("Compilation succeeded") || error_string.StartsWith ("Compilation failed")"  is complex.
Complex Conditional,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,UpdatePath,The conditional expression  "isPathSet && curType != null && lastType != null && curType.StartLocation == lastType.StartLocation && curTypeMakeup == lastTypeMarkup && curMember != null && lastMember != null && curMember.StartLocation == lastMember.StartLocation && curMemberMarkup == lastMemberMarkup"  is complex.
Complex Conditional,MonoDevelop.CSharp,AstAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstAmbience.cs,IsObsolete,The conditional expression  "attrText == "Obsolete" || attrText == "ObsoleteAttribute" || attrText == "System.Obsolete" || attrText == "System.ObsoleteAttribute""  is complex.
Complex Conditional,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The conditional expression  "element is OperatorDeclaration || element is ConstructorDeclaration || element is DestructorDeclaration || element is Accessor"  is complex.
Complex Conditional,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeParameterMarkup,The conditional expression  "!tp.HasDefaultConstructorConstraint && !tp.HasReferenceTypeConstraint && !tp.HasValueTypeConstraint && tp.DirectBaseTypes.All (IsObjectOrValueType)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The conditional expression  "inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment"  is complex.
Complex Conditional,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The conditional expression  "inString || inChar || inVerbatimString || inSingleComment"  is complex.
Complex Conditional,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The conditional expression  "inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment"  is complex.
Complex Conditional,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The conditional expression  "inSingleComment || inMultiLineComment || inString || inVerbatimString"  is complex.
Complex Conditional,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The conditional expression  "addParens && !IsDelegateExpected && method != null && !HasNonMethodMembersWithSameName ((IMember)Entity) && !IsBracketAlreadyInserted (method)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The conditional expression  "(DisplayFlags & DisplayFlags.NamedArgument) == DisplayFlags.NamedArgument && (closeChar == Gdk.Key.Tab || closeChar == Gdk.Key.KP_Tab || closeChar == Gdk.Key.ISO_Left_Tab || closeChar == Gdk.Key.Return || closeChar == Gdk.Key.KP_Enter || closeChar == Gdk.Key.ISO_Enter)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Completion,MonoCSharpCompletionEngine,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MonoCSharpCompletionEngine.cs,GetProtocolMembers,The conditional expression  "member.CanGet && member.Getter.Attributes.Any (a => a.AttributeType.Name == "ExportAttribute" && a.AttributeType.Namespace == "MonoTouch.Foundation") || member.CanSet && member.Setter.Attributes.Any (a => a.AttributeType.Name == "ExportAttribute" && a.AttributeType.Namespace == "MonoTouch.Foundation")"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,GetUsage,The conditional expression  "unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring,CSharpReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpReferenceFinder.cs,FindReferences,The conditional expression  "memberName != null && text.IndexOf (memberName' StringComparison.Ordinal) < 0 && (keywordName == null || text.IndexOf (keywordName' StringComparison.Ordinal) < 0)"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The conditional expression  "!options.ExplicitDeclaration && isFromInterface && typeParameters.Any (p => p.HasDefaultConstructorConstraint || p.HasReferenceTypeConstraint || p.HasValueTypeConstraint || p.DirectBaseTypes.Any (validBaseType))"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The conditional expression  "method.Name == "ToString" && (method.Parameters == null || method.Parameters.Count == 0) && method.ReturnType != null"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The conditional expression  "method.IsAbstract || !(method.IsVirtual || method.IsOverride) || method.DeclaringTypeDefinition.Kind == TypeKind.Interface"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,CompleteStatement,The conditional expression  "trimmedline.StartsWith ("if") || trimmedline.StartsWith ("while") || trimmedline.StartsWith ("switch") || trimmedline.StartsWith ("for") || trimmedline.StartsWith ("foreach")"  is complex.
Complex Conditional,MonoDevelop.CodeGeneration,BaseExportCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\ExportCodeGenerator.cs,GetProtocolMember,The conditional expression  "prop.CanGet && GenerateExportAttribute (ctx' prop.Getter) != null || prop.CanSet && GenerateExportAttribute (ctx' prop.Setter) != null"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring.CodeIssues,NRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NRefactoryIssueProvider.cs,GetIssues,The conditional expression  "context == null || context.IsInvalid || context.RootNode == null || context.ParsedDocument.HasErrors"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring.CodeIssues,BaseNRefactoryIssueProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\BaseNRefactoryIssueProvider.cs,GetIssues,The conditional expression  "context == null || context.IsInvalid || context.RootNode == null || context.ParsedDocument.HasErrors"  is complex.
Complex Conditional,MonoDevelop.CSharp.Refactoring.CodeIssues,MonoTODOIssue,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\Issues\MonoTODOIssue.cs,GetIssues,The conditional expression  "context == null || context.IsInvalid || context.RootNode == null || context.ParsedDocument.HasErrors"  is complex.
Complex Conditional,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,ShowTooltipWindow,The conditional expression  "lastNode != null && lastWindow != null && lastWindow.IsRealized && titem.Node != null && lastNode == titem.Node"  is complex.
Empty Catch Block,MonoDevelop.CSharp.Highlighting,CSharpSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\CSharpSyntaxMode.cs,HandleDocumentParsed,The method has an empty catch block.
Empty Catch Block,MonoDevelop.CSharp.Project,CompilerOptionsPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CompilerOptionsPanelWidget.cs,FillClasses,The method has an empty catch block.
Empty Catch Block,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The method has an empty catch block.
Empty Catch Block,MonoDevelop.CSharp.Refactoring,CSharpCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring\CSharpCodeGenerator.cs,GenerateCode,The method has an empty catch block.
Magic Number,MonoDevelop.CSharp.Highlighting,HighlightUsagesExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\HighlightUsagesExtension.cs,HandleTextEditorDataCaretPositionChanged,The following statement contains a magic number: if (!textEditorData.IsSomethingSelected)  	popupTimer = GLib.Timeout.Add (1000' DelayedTooltipShow);  
Magic Number,MonoDevelop.CSharp.Highlighting,HighlightUsagesExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Highlighting\HighlightUsagesExtension.cs,HandleTextEditorDataCaretPositionChanged,The following statement contains a magic number: popupTimer = GLib.Timeout.Add (1000' DelayedTooltipShow);  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ConvertNormalToVerbatimString,The following statement contains a magic number: while (endOffset < textEditorData.Length) {  	char ch = textEditorData.GetCharAt (endOffset);  	if (ch == '\\') {  		if (endOffset + 1 < textEditorData.Length && NewLine.IsNewLine (textEditorData.GetCharAt (endOffset + 1)))  			return;  		endOffset += 2;  		continue;  	}  	if (ch == '"')  		break;  	if (NewLine.IsNewLine (ch))  		return;  	endOffset++;  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ConvertNormalToVerbatimString,The following statement contains a magic number: if (ch == '\\') {  	if (endOffset + 1 < textEditorData.Length && NewLine.IsNewLine (textEditorData.GetCharAt (endOffset + 1)))  		return;  	endOffset += 2;  	continue;  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ConvertNormalToVerbatimString,The following statement contains a magic number: endOffset += 2;  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ConvertVerbatimStringToNormal,The following statement contains a magic number: while (endOffset < textEditorData.Length) {  	char ch = textEditorData.GetCharAt (endOffset);  	if (ch == '"' && (endOffset + 1 < textEditorData.Length && textEditorData.GetCharAt (endOffset + 1) == '"')) {  		endOffset += 2;  		continue;  	}  	if (ch == '"') {  		break;  	}  	endOffset++;  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ConvertVerbatimStringToNormal,The following statement contains a magic number: if (ch == '"' && (endOffset + 1 < textEditorData.Length && textEditorData.GetCharAt (endOffset + 1) == '"')) {  	endOffset += 2;  	continue;  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ConvertVerbatimStringToNormal,The following statement contains a magic number: endOffset += 2;  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,CheckXmlCommentCloseTag,The following statement contains a magic number: if (keyChar == '>' && stateTracker.IsInsideDocLineComment) {  	var location = Editor.Caret.Location;  	string lineText = Editor.GetLineText (Editor.Caret.Line);  	int startIndex = Math.Min (location.Column - 2' lineText.Length - 1);  	while (startIndex >= 0 && lineText [startIndex] != '<') {  		--startIndex;  		if (lineText [startIndex] == '/') {  			// already closed.  			startIndex = -1;  			break;  		}  	}  	if (startIndex >= 0) {  		int endIndex = startIndex + 1;  		while (endIndex <= location.Column - 1 && endIndex < lineText.Length && Char.IsLetter (lineText [endIndex])) {  			endIndex++;  		}  		string tag = endIndex - startIndex > 0 ? lineText.Substring (startIndex + 1' endIndex - startIndex - 1) : null;  		if (!string.IsNullOrEmpty (tag) && CSharpCompletionEngine.CommentTags.Any (t => t == tag)) {  			Editor.Document.Insert (Editor.Caret.Offset' "</" + tag + ">"' AnchorMovementType.BeforeInsertion);  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ReindentOnTab,The following statement contains a magic number: if (stateTracker.IsInsideVerbatimString) {  	// insert normal tab inside @" ... "  	if (textEditorData.IsSomethingSelected) {  		textEditorData.SelectedText = "\t";  	}  	else {  		textEditorData.Insert (cursor' "\t");  	}  	textEditorData.Document.CommitLineUpdate (textEditorData.Caret.Line);  }  else if (cursor >= 1) {  	if (textEditorData.Caret.Column > 1) {  		int delta = cursor - cursorPositionBeforeKeyPress;  		if (delta < 2 && delta > 0) {  			textEditorData.Remove (cursor - delta' delta);  			textEditorData.Caret.Offset = cursor - delta;  			textEditorData.Document.CommitLineUpdate (textEditorData.Caret.Line);  		}  	}  	SafeUpdateIndentEngine (textEditorData.Caret.Offset);  	DoReSmartIndent ();  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ReindentOnTab,The following statement contains a magic number: if (cursor >= 1) {  	if (textEditorData.Caret.Column > 1) {  		int delta = cursor - cursorPositionBeforeKeyPress;  		if (delta < 2 && delta > 0) {  			textEditorData.Remove (cursor - delta' delta);  			textEditorData.Caret.Offset = cursor - delta;  			textEditorData.Document.CommitLineUpdate (textEditorData.Caret.Line);  		}  	}  	SafeUpdateIndentEngine (textEditorData.Caret.Offset);  	DoReSmartIndent ();  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ReindentOnTab,The following statement contains a magic number: if (textEditorData.Caret.Column > 1) {  	int delta = cursor - cursorPositionBeforeKeyPress;  	if (delta < 2 && delta > 0) {  		textEditorData.Remove (cursor - delta' delta);  		textEditorData.Caret.Offset = cursor - delta;  		textEditorData.Document.CommitLineUpdate (textEditorData.Caret.Line);  	}  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,ReindentOnTab,The following statement contains a magic number: if (delta < 2 && delta > 0) {  	textEditorData.Remove (cursor - delta' delta);  	textEditorData.Caret.Offset = cursor - delta;  	textEditorData.Document.CommitLineUpdate (textEditorData.Caret.Line);  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,CSharpFormattingProfileDialog,The following statement contains a magic number: notebookCategories.SwitchPage += delegate {  	TreeView treeView;  	switch (notebookCategories.Page) {  	case 0:  		treeView = treeviewIndentOptions;  		break;  	case 1:  		treeView = treeviewBracePositions;  		break;  	case 2:  		// Blank lines  		UpdateExample (blankLineExample);  		return;  	case 3:  		// white spaces  		return;  	case 4:  		treeView = treeviewNewLines;  		break;  	default:  		return;  	}  	TreeModel model;  	TreeIter iter;  	if (treeView.Selection.GetSelected (out model' out iter))  		UpdateExample (model' iter);  };  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,CSharpFormattingProfileDialog,The following statement contains a magic number: notebookCategories.SwitchPage += delegate {  	TreeView treeView;  	switch (notebookCategories.Page) {  	case 0:  		treeView = treeviewIndentOptions;  		break;  	case 1:  		treeView = treeviewBracePositions;  		break;  	case 2:  		// Blank lines  		UpdateExample (blankLineExample);  		return;  	case 3:  		// white spaces  		return;  	case 4:  		treeView = treeviewNewLines;  		break;  	default:  		return;  	}  	TreeModel model;  	TreeIter iter;  	if (treeView.Selection.GetSelected (out model' out iter))  		UpdateExample (model' iter);  };  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,CSharpFormattingProfileDialog,The following statement contains a magic number: notebookCategories.SwitchPage += delegate {  	TreeView treeView;  	switch (notebookCategories.Page) {  	case 0:  		treeView = treeviewIndentOptions;  		break;  	case 1:  		treeView = treeviewBracePositions;  		break;  	case 2:  		// Blank lines  		UpdateExample (blankLineExample);  		return;  	case 3:  		// white spaces  		return;  	case 4:  		treeView = treeviewNewLines;  		break;  	default:  		return;  	}  	TreeModel model;  	TreeIter iter;  	if (treeView.Selection.GetSelected (out model' out iter))  		UpdateExample (model' iter);  };  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,CSharpFormattingProfileDialog,The following statement contains a magic number: switch (notebookCategories.Page) {  case 0:  	treeView = treeviewIndentOptions;  	break;  case 1:  	treeView = treeviewBracePositions;  	break;  case 2:  	// Blank lines  	UpdateExample (blankLineExample);  	return;  case 3:  	// white spaces  	return;  case 4:  	treeView = treeviewNewLines;  	break;  default:  	return;  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,CSharpFormattingProfileDialog,The following statement contains a magic number: switch (notebookCategories.Page) {  case 0:  	treeView = treeviewIndentOptions;  	break;  case 1:  	treeView = treeviewBracePositions;  	break;  case 2:  	// Blank lines  	UpdateExample (blankLineExample);  	return;  case 3:  	// white spaces  	return;  case 4:  	treeView = treeviewNewLines;  	break;  default:  	return;  }  
Magic Number,MonoDevelop.CSharp.Formatting,CSharpFormattingProfileDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpFormattingProfileDialog.cs,CSharpFormattingProfileDialog,The following statement contains a magic number: switch (notebookCategories.Page) {  case 0:  	treeView = treeviewIndentOptions;  	break;  case 1:  	treeView = treeviewBracePositions;  	break;  case 2:  	// Blank lines  	UpdateExample (blankLineExample);  	return;  case 3:  	// white spaces  	return;  case 4:  	treeView = treeviewNewLines;  	break;  default:  	return;  }  
Magic Number,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The following statement contains a magic number: if (File.Exists (outputName)) {  	bool isWriteable = false;  	int count = 0;  	do {  		try {  			outputName.MakeWritable ();  			using (var stream = File.OpenWrite (outputName)) {  				isWriteable = true;  			}  		}  		catch (Exception) {  			Thread.Sleep (20);  		}  	}  	while (count++ < 5 && !isWriteable);  	if (!isWriteable) {  		MessageService.ShowError (string.Format (GettextCatalog.GetString ("Can't lock file: {0}.")' outputName));  		return null;  	}  }  
Magic Number,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The following statement contains a magic number: if (File.Exists (outputName)) {  	bool isWriteable = false;  	int count = 0;  	do {  		try {  			outputName.MakeWritable ();  			using (var stream = File.OpenWrite (outputName)) {  				isWriteable = true;  			}  		}  		catch (Exception) {  			Thread.Sleep (20);  		}  	}  	while (count++ < 5 && !isWriteable);  	if (!isWriteable) {  		MessageService.ShowError (string.Format (GettextCatalog.GetString ("Can't lock file: {0}.")' outputName));  		return null;  	}  }  
Magic Number,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The following statement contains a magic number: do {  	try {  		outputName.MakeWritable ();  		using (var stream = File.OpenWrite (outputName)) {  			isWriteable = true;  		}  	}  	catch (Exception) {  		Thread.Sleep (20);  	}  }  while (count++ < 5 && !isWriteable);  
Magic Number,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The following statement contains a magic number: do {  	try {  		outputName.MakeWritable ();  		using (var stream = File.OpenWrite (outputName)) {  			isWriteable = true;  		}  	}  	catch (Exception) {  		Thread.Sleep (20);  	}  }  while (count++ < 5 && !isWriteable);  
Magic Number,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The following statement contains a magic number: try {  	outputName.MakeWritable ();  	using (var stream = File.OpenWrite (outputName)) {  		isWriteable = true;  	}  }  catch (Exception) {  	Thread.Sleep (20);  }  
Magic Number,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,MonoDevelop.CSharp,ShrinkSelectionHandler,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\ExpandSelectionHandler.cs,Run,The following statement contains a magic number: if (nodeStack.Count > 2) {  	nodeStack.Pop ();  	// parent  	nodeStack.Pop ();  	// current node  	node = nodeStack.Pop ();  	// next children in which the caret is  	doc.Editor.SetSelection (node.StartLocation' node.EndLocation);  }  else {  	doc.Editor.ClearSelection ();  }  
Magic Number,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,CreatePathWidget,The following statement contains a magic number: window.FixedRowHeight = 22;  
Magic Number,MonoDevelop.CSharp,PathedDocumentTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\PathedDocumentTextEditorExtension.cs,CreatePathWidget,The following statement contains a magic number: window.MaxVisibleRows = 14;  
Magic Number,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The following statement contains a magic number: if (element is TypeDeclaration) {  	var type = element as TypeDeclaration;  	switch (type.ClassType) {  	case ClassType.Class:  		return typeIconTable [0' (int)(acc)];  	case ClassType.Struct:  		return typeIconTable [3' (int)(acc)];  	case ClassType.Interface:  		return typeIconTable [2' (int)(acc)];  	case ClassType.Enum:  		return typeIconTable [1' (int)(acc)];  	default:  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The following statement contains a magic number: if (element is TypeDeclaration) {  	var type = element as TypeDeclaration;  	switch (type.ClassType) {  	case ClassType.Class:  		return typeIconTable [0' (int)(acc)];  	case ClassType.Struct:  		return typeIconTable [3' (int)(acc)];  	case ClassType.Interface:  		return typeIconTable [2' (int)(acc)];  	case ClassType.Enum:  		return typeIconTable [1' (int)(acc)];  	default:  		throw new ArgumentOutOfRangeException ();  	}  }  
Magic Number,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The following statement contains a magic number: switch (type.ClassType) {  case ClassType.Class:  	return typeIconTable [0' (int)(acc)];  case ClassType.Struct:  	return typeIconTable [3' (int)(acc)];  case ClassType.Interface:  	return typeIconTable [2' (int)(acc)];  case ClassType.Enum:  	return typeIconTable [1' (int)(acc)];  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The following statement contains a magic number: switch (type.ClassType) {  case ClassType.Class:  	return typeIconTable [0' (int)(acc)];  case ClassType.Struct:  	return typeIconTable [3' (int)(acc)];  case ClassType.Interface:  	return typeIconTable [2' (int)(acc)];  case ClassType.Enum:  	return typeIconTable [1' (int)(acc)];  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The following statement contains a magic number: return typeIconTable [3' (int)(acc)];  
Magic Number,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The following statement contains a magic number: return typeIconTable [2' (int)(acc)];  
Magic Number,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The following statement contains a magic number: if (element is DelegateDeclaration)  	return typeIconTable [4' (int)(acc)];  
Magic Number,MonoDevelop.CSharp,AstStockIcons,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\AstStockIcons.cs,GetStockIcon,The following statement contains a magic number: return typeIconTable [4' (int)(acc)];  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeParameterMarkup,The following statement contains a magic number: if (tp != null) {  	if (!tp.HasDefaultConstructorConstraint && !tp.HasReferenceTypeConstraint && !tp.HasValueTypeConstraint && tp.DirectBaseTypes.All (IsObjectOrValueType))  		return result.ToString ();  	result.AppendLine ();  	result.Append (Highlight (" where "' colorStyle.KeywordContext));  	result.Append (highlightedTypeName);  	result.Append (" : ");  	int constraints = 0;  	if (tp.HasReferenceTypeConstraint) {  		constraints++;  		result.Append (Highlight ("class"' colorStyle.KeywordDeclaration));  	}  	else if (tp.HasValueTypeConstraint) {  		constraints++;  		result.Append (Highlight ("struct"' colorStyle.KeywordDeclaration));  	}  	foreach (var bt in tp.DirectBaseTypes) {  		if (!IsObjectOrValueType (bt)) {  			if (constraints > 0) {  				result.Append ("'");  				if (constraints % 5 == 0) {  					result.AppendLine ();  					result.Append ("\t");  				}  			}  			constraints++;  			result.Append (GetTypeReferenceString (bt));  		}  	}  	if (tp.HasDefaultConstructorConstraint) {  		if (constraints > 0)  			result.Append ("'");  		result.Append (Highlight ("new"' colorStyle.KeywordOperators));  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeParameterMarkup,The following statement contains a magic number: foreach (var bt in tp.DirectBaseTypes) {  	if (!IsObjectOrValueType (bt)) {  		if (constraints > 0) {  			result.Append ("'");  			if (constraints % 5 == 0) {  				result.AppendLine ();  				result.Append ("\t");  			}  		}  		constraints++;  		result.Append (GetTypeReferenceString (bt));  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeParameterMarkup,The following statement contains a magic number: if (!IsObjectOrValueType (bt)) {  	if (constraints > 0) {  		result.Append ("'");  		if (constraints % 5 == 0) {  			result.AppendLine ();  			result.Append ("\t");  		}  	}  	constraints++;  	result.Append (GetTypeReferenceString (bt));  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeParameterMarkup,The following statement contains a magic number: if (constraints > 0) {  	result.Append ("'");  	if (constraints % 5 == 0) {  		result.AppendLine ();  		result.Append ("\t");  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeParameterMarkup,The following statement contains a magic number: if (constraints % 5 == 0) {  	result.AppendLine ();  	result.Append ("\t");  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: if (t.Kind != TypeKind.Enum) {  	foreach (var directBaseType in sortedTypes) {  		if (first) {  			result.AppendLine (" :");  			result.Append ("  ");  			length = 2;  		}  		else {  			result.Append ("' ");  			length += 2;  		}  		var typeRef = GetTypeReferenceString (directBaseType' false);  		if (!first && length + typeRef.Length >= maxLength) {  			result.AppendLine ();  			result.Append ("  ");  			length = 2;  		}  		result.Append (typeRef);  		length += GetMarkupLength (typeRef);  		first = false;  	}  }  else {  	var enumBase = t.GetDefinition ().EnumUnderlyingType;  	if (enumBase.Name != "Int32") {  		result.AppendLine (" :");  		result.Append ("  ");  		result.Append (GetTypeReferenceString (enumBase' false));  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: if (t.Kind != TypeKind.Enum) {  	foreach (var directBaseType in sortedTypes) {  		if (first) {  			result.AppendLine (" :");  			result.Append ("  ");  			length = 2;  		}  		else {  			result.Append ("' ");  			length += 2;  		}  		var typeRef = GetTypeReferenceString (directBaseType' false);  		if (!first && length + typeRef.Length >= maxLength) {  			result.AppendLine ();  			result.Append ("  ");  			length = 2;  		}  		result.Append (typeRef);  		length += GetMarkupLength (typeRef);  		first = false;  	}  }  else {  	var enumBase = t.GetDefinition ().EnumUnderlyingType;  	if (enumBase.Name != "Int32") {  		result.AppendLine (" :");  		result.Append ("  ");  		result.Append (GetTypeReferenceString (enumBase' false));  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: if (t.Kind != TypeKind.Enum) {  	foreach (var directBaseType in sortedTypes) {  		if (first) {  			result.AppendLine (" :");  			result.Append ("  ");  			length = 2;  		}  		else {  			result.Append ("' ");  			length += 2;  		}  		var typeRef = GetTypeReferenceString (directBaseType' false);  		if (!first && length + typeRef.Length >= maxLength) {  			result.AppendLine ();  			result.Append ("  ");  			length = 2;  		}  		result.Append (typeRef);  		length += GetMarkupLength (typeRef);  		first = false;  	}  }  else {  	var enumBase = t.GetDefinition ().EnumUnderlyingType;  	if (enumBase.Name != "Int32") {  		result.AppendLine (" :");  		result.Append ("  ");  		result.Append (GetTypeReferenceString (enumBase' false));  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: foreach (var directBaseType in sortedTypes) {  	if (first) {  		result.AppendLine (" :");  		result.Append ("  ");  		length = 2;  	}  	else {  		result.Append ("' ");  		length += 2;  	}  	var typeRef = GetTypeReferenceString (directBaseType' false);  	if (!first && length + typeRef.Length >= maxLength) {  		result.AppendLine ();  		result.Append ("  ");  		length = 2;  	}  	result.Append (typeRef);  	length += GetMarkupLength (typeRef);  	first = false;  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: foreach (var directBaseType in sortedTypes) {  	if (first) {  		result.AppendLine (" :");  		result.Append ("  ");  		length = 2;  	}  	else {  		result.Append ("' ");  		length += 2;  	}  	var typeRef = GetTypeReferenceString (directBaseType' false);  	if (!first && length + typeRef.Length >= maxLength) {  		result.AppendLine ();  		result.Append ("  ");  		length = 2;  	}  	result.Append (typeRef);  	length += GetMarkupLength (typeRef);  	first = false;  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: foreach (var directBaseType in sortedTypes) {  	if (first) {  		result.AppendLine (" :");  		result.Append ("  ");  		length = 2;  	}  	else {  		result.Append ("' ");  		length += 2;  	}  	var typeRef = GetTypeReferenceString (directBaseType' false);  	if (!first && length + typeRef.Length >= maxLength) {  		result.AppendLine ();  		result.Append ("  ");  		length = 2;  	}  	result.Append (typeRef);  	length += GetMarkupLength (typeRef);  	first = false;  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: if (first) {  	result.AppendLine (" :");  	result.Append ("  ");  	length = 2;  }  else {  	result.Append ("' ");  	length += 2;  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: if (first) {  	result.AppendLine (" :");  	result.Append ("  ");  	length = 2;  }  else {  	result.Append ("' ");  	length += 2;  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: length = 2;  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: length += 2;  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: if (!first && length + typeRef.Length >= maxLength) {  	result.AppendLine ();  	result.Append ("  ");  	length = 2;  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following statement contains a magic number: length = 2;  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendTypeParameters,The following statement contains a magic number: foreach (var typeParameter in typeParameters) {  	if (i > 0) {  		if (i % 5 == 0) {  			result.AppendLine ("'");  			result.Append ("\t");  		}  		else {  			result.Append ("' ");  		}  	}  	AppendVariance (result' typeParameter.Variance);  	result.Append (HighlightSemantically (CSharpAmbience.NetToCSharpTypeName (typeParameter.Name)' colorStyle.UserTypes));  	i++;  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendTypeParameters,The following statement contains a magic number: if (i > 0) {  	if (i % 5 == 0) {  		result.AppendLine ("'");  		result.Append ("\t");  	}  	else {  		result.Append ("' ");  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendTypeParameters,The following statement contains a magic number: if (i % 5 == 0) {  	result.AppendLine ("'");  	result.Append ("\t");  }  else {  	result.Append ("' ");  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendTypeParameters,The following statement contains a magic number: foreach (var typeParameter in typeParameters) {  	if (i > 0) {  		if (i % 5 == 0) {  			result.AppendLine ("'");  			result.Append ("\t");  		}  		else {  			result.Append ("' ");  		}  	}  	if (typeParameter is ITypeParameter)  		AppendVariance (result' ((ITypeParameter)typeParameter).Variance);  	result.Append (GetTypeReferenceString (typeParameter' false));  	i++;  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendTypeParameters,The following statement contains a magic number: if (i > 0) {  	if (i % 5 == 0) {  		result.AppendLine ("'");  		result.Append ("\t");  	}  	else {  		result.Append ("' ");  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendTypeParameters,The following statement contains a magic number: if (i % 5 == 0) {  	result.AppendLine ("'");  	result.Append ("\t");  }  else {  	result.Append ("' ");  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendParameterList,The following statement contains a magic number: for (int i = 0; i < parameterList.Count; i++) {  	var parameter = parameterList [i];  	if (newLine)  		result.Append (new string (' '' 2));  	var doHighightParameter = i == HighlightParameter || HighlightParameter >= i && i == parameterList.Count - 1 && parameter.IsParams;  	if (doHighightParameter)  		result.Append ("<u>");  	/*				if (parameter.IsOptional) { 					GrayOut = true; 					var color = AlphaBlend (colorStyle.Default.Color' colorStyle.Default.BackgroundColor' optionalAlpha); 					var colorString = Mono.TextEditor.HelperMethods.GetColorString (color); 					result.Append ("<span foreground=\"" + colorString + "\">"); 				}*/AppendParameter (result' parameter);  	if (parameter.IsOptional) {  		if (formattingOptions.SpaceAroundAssignment) {  			result.Append (" = ");  		}  		else {  			result.Append ("=");  		}  		AppendConstant (result' parameter.Type' parameter.ConstantValue);  		//					GrayOut = false;  		//					result.Append ("</span>");  	}  	if (doHighightParameter)  		result.Append ("</u>");  	if (i + 1 < parameterList.Count) {  		if (spaceBefore)  			result.Append (' ');  		result.Append (''');  		if (newLine) {  			result.AppendLine ();  		}  		else {  			if (spaceAfter)  				result.Append (' ');  		}  	}  }  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendParameterList,The following statement contains a magic number: if (newLine)  	result.Append (new string (' '' 2));  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendParameterList,The following statement contains a magic number: result.Append (new string (' '' 2));  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AlphaBlend,The following statement contains a magic number: return new Gdk.Color ((byte)((alpha * color.Red + (1 - alpha) * color2.Red) / 256)' (byte)((alpha * color.Green + (1 - alpha) * color2.Green) / 256)' (byte)((alpha * color.Blue + (1 - alpha) * color2.Blue) / 256));  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AlphaBlend,The following statement contains a magic number: return new Gdk.Color ((byte)((alpha * color.Red + (1 - alpha) * color2.Red) / 256)' (byte)((alpha * color.Green + (1 - alpha) * color2.Green) / 256)' (byte)((alpha * color.Blue + (1 - alpha) * color2.Blue) / 256));  
Magic Number,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AlphaBlend,The following statement contains a magic number: return new Gdk.Color ((byte)((alpha * color.Red + (1 - alpha) * color2.Red) / 256)' (byte)((alpha * color.Green + (1 - alpha) * color2.Green) / 256)' (byte)((alpha * color.Blue + (1 - alpha) * color2.Blue) / 256));  
Magic Number,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,CreateTooltip,The following statement contains a magic number: try {  	OutputSettings settings = new OutputSettings (OutputFlags.ClassBrowserEntries | OutputFlags.IncludeParameterName | OutputFlags.IncludeKeywords | OutputFlags.IncludeMarkup | OutputFlags.UseFullName);  	// Approximate value for usual case  	StringBuilder s = new StringBuilder (150);  	string documentation = null;  	if (result != null) {  		if (result is UnknownIdentifierResolveResult) {  			s.Append (String.Format (GettextCatalog.GetString ("Unresolved identifier '{0}'")' ((UnknownIdentifierResolveResult)result).Identifier));  		}  		else if (result.IsError) {  			s.Append (GettextCatalog.GetString ("Resolve error."));  		}  		else if (result is LocalResolveResult) {  			var lr = (LocalResolveResult)result;  			s.Append ("<small><i>");  			s.Append (lr.IsParameter ? paramStr : localStr);  			s.Append ("</i></small>\n");  			s.Append (ambience.GetString (lr.Variable.Type' settings));  			s.Append (" ");  			s.Append (lr.Variable.Name);  		}  		else if (result is MethodGroupResolveResult) {  			var mrr = (MethodGroupResolveResult)result;  			s.Append ("<small><i>");  			s.Append (methodStr);  			s.Append ("</i></small>\n");  			var allMethods = new List<IMethod> (mrr.Methods);  			foreach (var l in mrr.GetExtensionMethods ()) {  				allMethods.AddRange (l);  			}  			var method = allMethods.FirstOrDefault ();  			if (method != null) {  				s.Append (GLib.Markup.EscapeText (CreateAmbience (doc' offset' method.Compilation).ConvertEntity (method)));  				if (allMethods.Count > 1) {  					int overloadCount = allMethods.Count - 1;  					s.Append (string.Format (GettextCatalog.GetPluralString (" (+{0} overload)"' " (+{0} overloads)"' overloadCount)' overloadCount));  				}  				documentation = AmbienceService.GetSummaryMarkup (method);  			}  		}  		else if (result is MemberResolveResult) {  			var member = ((MemberResolveResult)result).Member;  			s.Append ("<small><i>");  			s.Append (GetString (member));  			s.Append ("</i></small>\n");  			var field = member as IField;  			if (field != null && field.IsConst) {  				s.Append (GLib.Markup.EscapeText (CreateAmbience (doc' offset' field.Compilation).ConvertType (field.Type)));  				s.Append (" ");  				s.Append (field.Name);  				s.Append (" = ");  				s.Append (GetConst (field.ConstantValue));  				s.Append (";");  			}  			else {  				s.Append (GLib.Markup.EscapeText (CreateAmbience (doc' offset' member.Compilation).ConvertEntity (member)));  			}  			documentation = AmbienceService.GetSummaryMarkup (member);  		}  		else if (result is NamespaceResolveResult) {  			s.Append ("<small><i>");  			s.Append (namespaceStr);  			s.Append ("</i></small>\n");  			s.Append (ambience.GetString (((NamespaceResolveResult)result).NamespaceName' settings));  		}  		else {  			var tr = result;  			var typeString = GetString (tr.Type);  			if (!string.IsNullOrEmpty (typeString)) {  				s.Append ("<small><i>");  				s.Append (typeString);  				s.Append ("</i></small>\n");  			}  			settings.OutputFlags |= OutputFlags.UseFullName;  			s.Append (ambience.GetString (tr.Type' settings));  			documentation = AmbienceService.GetSummaryMarkup (tr.Type.GetDefinition ());  		}  		if (!string.IsNullOrEmpty (documentation)) {  			s.Append ("\n<small>");  			s.Append (documentation);  			s.Append ("</small>");  		}  	}  	if (!string.IsNullOrEmpty (errorInformations)) {  		if (s.Length != 0)  			s.Append ("\n\n");  		s.Append ("<small>");  		s.Append (errorInformations);  		s.Append ("</small>");  	}  	return s.ToString ();  }  catch (Exception e) {  	return e.ToString ();  }  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: switch (ver) {  case LangVersion.Default:  	return new Version (5' 0' 0' 0);  case LangVersion.ISO_1:  	return new Version (1' 0' 0' 0);  case LangVersion.ISO_2:  	return new Version (2' 0' 0' 0);  case LangVersion.Version3:  	return new Version (3' 0' 0' 0);  case LangVersion.Version4:  	return new Version (4' 0' 0' 0);  case LangVersion.Version5:  	return new Version (5' 0' 0' 0);  }  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: switch (ver) {  case LangVersion.Default:  	return new Version (5' 0' 0' 0);  case LangVersion.ISO_1:  	return new Version (1' 0' 0' 0);  case LangVersion.ISO_2:  	return new Version (2' 0' 0' 0);  case LangVersion.Version3:  	return new Version (3' 0' 0' 0);  case LangVersion.Version4:  	return new Version (4' 0' 0' 0);  case LangVersion.Version5:  	return new Version (5' 0' 0' 0);  }  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: switch (ver) {  case LangVersion.Default:  	return new Version (5' 0' 0' 0);  case LangVersion.ISO_1:  	return new Version (1' 0' 0' 0);  case LangVersion.ISO_2:  	return new Version (2' 0' 0' 0);  case LangVersion.Version3:  	return new Version (3' 0' 0' 0);  case LangVersion.Version4:  	return new Version (4' 0' 0' 0);  case LangVersion.Version5:  	return new Version (5' 0' 0' 0);  }  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: switch (ver) {  case LangVersion.Default:  	return new Version (5' 0' 0' 0);  case LangVersion.ISO_1:  	return new Version (1' 0' 0' 0);  case LangVersion.ISO_2:  	return new Version (2' 0' 0' 0);  case LangVersion.Version3:  	return new Version (3' 0' 0' 0);  case LangVersion.Version4:  	return new Version (4' 0' 0' 0);  case LangVersion.Version5:  	return new Version (5' 0' 0' 0);  }  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: switch (ver) {  case LangVersion.Default:  	return new Version (5' 0' 0' 0);  case LangVersion.ISO_1:  	return new Version (1' 0' 0' 0);  case LangVersion.ISO_2:  	return new Version (2' 0' 0' 0);  case LangVersion.Version3:  	return new Version (3' 0' 0' 0);  case LangVersion.Version4:  	return new Version (4' 0' 0' 0);  case LangVersion.Version5:  	return new Version (5' 0' 0' 0);  }  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: return new Version (5' 0' 0' 0);  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: return new Version (2' 0' 0' 0);  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: return new Version (3' 0' 0' 0);  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: return new Version (4' 0' 0' 0);  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: return new Version (5' 0' 0' 0);  
Magic Number,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following statement contains a magic number: return new Version (5' 0' 0' 0);  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: fixed (char* startPtr = content) {  	char* endPtr = startPtr + content.Length;  	char* ptr = startPtr;  	char* beginPtr = ptr;  	while (ptr < endPtr) {  		switch (*ptr) {  		case '#':  			if (!inLineStart)  				break;  			inLineStart = false;  			ptr++;  			if (StartsIdentifier (ptr' endPtr' "region")) {  				var regionLocation = new TextLocation (line' column);  				column++;  				ptr += "region".Length;  				column += "region".Length;  				SkipWhitespaces (ref ptr' endPtr' ref column);  				regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  				continue;  			}  			else if (StartsIdentifier (ptr' endPtr' "endregion")) {  				column++;  				ptr += "endregion".Length;  				column += "endregion".Length;  				if (regionStack.Count > 0) {  					var beginRegion = regionStack.Pop ();  					result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  				}  				continue;  			}  			else {  				column++;  			}  			break;  		case '/':  			if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  				inLineStart = false;  				break;  			}  			if (ptr + 1 < endPtr) {  				char nextCh = *(ptr + 1);  				if (nextCh == '/') {  					hasStartedAtLine = inLineStart;  					beginPtr = ptr + 2;  					startLoc = new TextLocation (line' column);  					ptr++;  					column++;  					inSingleComment = true;  				}  				else if (nextCh == '*') {  					hasStartedAtLine = inLineStart;  					beginPtr = ptr + 2;  					startLoc = new TextLocation (line' column);  					ptr++;  					column++;  					inMultiLineComment = true;  				}  			}  			inLineStart = false;  			break;  		case '*':  			inLineStart = false;  			if (inString || inChar || inVerbatimString || inSingleComment)  				break;  			if (inMultiLineComment && ptr + 1 < endPtr) {  				if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  					ptr += 2;  					column += 2;  					inMultiLineComment = false;  					result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  						Region = new DomRegion (startLoc' new TextLocation (line' column))'  						OpenTag = "/*"'  						CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  						Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  						CommentStartsLine = hasStartedAtLine  					});  					continue;  				}  			}  			break;  		case '@':  			inLineStart = false;  			if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  				break;  			if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  				ptr++;  				column++;  				inVerbatimString = true;  			}  			break;  		case '\n':  			if (inSingleComment && hasStartedAtLine) {  				bool isDocumentation = *beginPtr == '/';  				if (isDocumentation)  					beginPtr++;  				result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  					Region = new DomRegion (startLoc' new TextLocation (line' column))'  					CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  					OpenTag = "//"'  					Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  					CommentStartsLine = hasStartedAtLine'  					IsDocumentation = isDocumentation  				});  				inSingleComment = false;  			}  			inString = false;  			inChar = false;  			inLineStart = true;  			line++;  			column = 1;  			ptr++;  			continue;  		case '\r':  			if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  				ptr++;  			goto case '\n';  		case '\\':  			if (inString || inChar)  				ptr++;  			break;  		case '"':  			if (inSingleComment || inMultiLineComment || inChar)  				break;  			if (inVerbatimString) {  				if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  					ptr++;  					column++;  					break;  				}  				inVerbatimString = false;  				break;  			}  			inString = !inString;  			break;  		case '\'':  			if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  				break;  			inChar = !inChar;  			break;  		default:  			inLineStart &= *ptr == ' ' || *ptr == '\t';  			break;  		}  		column++;  		ptr++;  	}  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: fixed (char* startPtr = content) {  	char* endPtr = startPtr + content.Length;  	char* ptr = startPtr;  	char* beginPtr = ptr;  	while (ptr < endPtr) {  		switch (*ptr) {  		case '#':  			if (!inLineStart)  				break;  			inLineStart = false;  			ptr++;  			if (StartsIdentifier (ptr' endPtr' "region")) {  				var regionLocation = new TextLocation (line' column);  				column++;  				ptr += "region".Length;  				column += "region".Length;  				SkipWhitespaces (ref ptr' endPtr' ref column);  				regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  				continue;  			}  			else if (StartsIdentifier (ptr' endPtr' "endregion")) {  				column++;  				ptr += "endregion".Length;  				column += "endregion".Length;  				if (regionStack.Count > 0) {  					var beginRegion = regionStack.Pop ();  					result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  				}  				continue;  			}  			else {  				column++;  			}  			break;  		case '/':  			if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  				inLineStart = false;  				break;  			}  			if (ptr + 1 < endPtr) {  				char nextCh = *(ptr + 1);  				if (nextCh == '/') {  					hasStartedAtLine = inLineStart;  					beginPtr = ptr + 2;  					startLoc = new TextLocation (line' column);  					ptr++;  					column++;  					inSingleComment = true;  				}  				else if (nextCh == '*') {  					hasStartedAtLine = inLineStart;  					beginPtr = ptr + 2;  					startLoc = new TextLocation (line' column);  					ptr++;  					column++;  					inMultiLineComment = true;  				}  			}  			inLineStart = false;  			break;  		case '*':  			inLineStart = false;  			if (inString || inChar || inVerbatimString || inSingleComment)  				break;  			if (inMultiLineComment && ptr + 1 < endPtr) {  				if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  					ptr += 2;  					column += 2;  					inMultiLineComment = false;  					result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  						Region = new DomRegion (startLoc' new TextLocation (line' column))'  						OpenTag = "/*"'  						CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  						Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  						CommentStartsLine = hasStartedAtLine  					});  					continue;  				}  			}  			break;  		case '@':  			inLineStart = false;  			if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  				break;  			if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  				ptr++;  				column++;  				inVerbatimString = true;  			}  			break;  		case '\n':  			if (inSingleComment && hasStartedAtLine) {  				bool isDocumentation = *beginPtr == '/';  				if (isDocumentation)  					beginPtr++;  				result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  					Region = new DomRegion (startLoc' new TextLocation (line' column))'  					CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  					OpenTag = "//"'  					Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  					CommentStartsLine = hasStartedAtLine'  					IsDocumentation = isDocumentation  				});  				inSingleComment = false;  			}  			inString = false;  			inChar = false;  			inLineStart = true;  			line++;  			column = 1;  			ptr++;  			continue;  		case '\r':  			if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  				ptr++;  			goto case '\n';  		case '\\':  			if (inString || inChar)  				ptr++;  			break;  		case '"':  			if (inSingleComment || inMultiLineComment || inChar)  				break;  			if (inVerbatimString) {  				if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  					ptr++;  					column++;  					break;  				}  				inVerbatimString = false;  				break;  			}  			inString = !inString;  			break;  		case '\'':  			if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  				break;  			inChar = !inChar;  			break;  		default:  			inLineStart &= *ptr == ' ' || *ptr == '\t';  			break;  		}  		column++;  		ptr++;  	}  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: fixed (char* startPtr = content) {  	char* endPtr = startPtr + content.Length;  	char* ptr = startPtr;  	char* beginPtr = ptr;  	while (ptr < endPtr) {  		switch (*ptr) {  		case '#':  			if (!inLineStart)  				break;  			inLineStart = false;  			ptr++;  			if (StartsIdentifier (ptr' endPtr' "region")) {  				var regionLocation = new TextLocation (line' column);  				column++;  				ptr += "region".Length;  				column += "region".Length;  				SkipWhitespaces (ref ptr' endPtr' ref column);  				regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  				continue;  			}  			else if (StartsIdentifier (ptr' endPtr' "endregion")) {  				column++;  				ptr += "endregion".Length;  				column += "endregion".Length;  				if (regionStack.Count > 0) {  					var beginRegion = regionStack.Pop ();  					result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  				}  				continue;  			}  			else {  				column++;  			}  			break;  		case '/':  			if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  				inLineStart = false;  				break;  			}  			if (ptr + 1 < endPtr) {  				char nextCh = *(ptr + 1);  				if (nextCh == '/') {  					hasStartedAtLine = inLineStart;  					beginPtr = ptr + 2;  					startLoc = new TextLocation (line' column);  					ptr++;  					column++;  					inSingleComment = true;  				}  				else if (nextCh == '*') {  					hasStartedAtLine = inLineStart;  					beginPtr = ptr + 2;  					startLoc = new TextLocation (line' column);  					ptr++;  					column++;  					inMultiLineComment = true;  				}  			}  			inLineStart = false;  			break;  		case '*':  			inLineStart = false;  			if (inString || inChar || inVerbatimString || inSingleComment)  				break;  			if (inMultiLineComment && ptr + 1 < endPtr) {  				if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  					ptr += 2;  					column += 2;  					inMultiLineComment = false;  					result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  						Region = new DomRegion (startLoc' new TextLocation (line' column))'  						OpenTag = "/*"'  						CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  						Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  						CommentStartsLine = hasStartedAtLine  					});  					continue;  				}  			}  			break;  		case '@':  			inLineStart = false;  			if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  				break;  			if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  				ptr++;  				column++;  				inVerbatimString = true;  			}  			break;  		case '\n':  			if (inSingleComment && hasStartedAtLine) {  				bool isDocumentation = *beginPtr == '/';  				if (isDocumentation)  					beginPtr++;  				result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  					Region = new DomRegion (startLoc' new TextLocation (line' column))'  					CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  					OpenTag = "//"'  					Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  					CommentStartsLine = hasStartedAtLine'  					IsDocumentation = isDocumentation  				});  				inSingleComment = false;  			}  			inString = false;  			inChar = false;  			inLineStart = true;  			line++;  			column = 1;  			ptr++;  			continue;  		case '\r':  			if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  				ptr++;  			goto case '\n';  		case '\\':  			if (inString || inChar)  				ptr++;  			break;  		case '"':  			if (inSingleComment || inMultiLineComment || inChar)  				break;  			if (inVerbatimString) {  				if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  					ptr++;  					column++;  					break;  				}  				inVerbatimString = false;  				break;  			}  			inString = !inString;  			break;  		case '\'':  			if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  				break;  			inChar = !inChar;  			break;  		default:  			inLineStart &= *ptr == ' ' || *ptr == '\t';  			break;  		}  		column++;  		ptr++;  	}  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: fixed (char* startPtr = content) {  	char* endPtr = startPtr + content.Length;  	char* ptr = startPtr;  	char* beginPtr = ptr;  	while (ptr < endPtr) {  		switch (*ptr) {  		case '#':  			if (!inLineStart)  				break;  			inLineStart = false;  			ptr++;  			if (StartsIdentifier (ptr' endPtr' "region")) {  				var regionLocation = new TextLocation (line' column);  				column++;  				ptr += "region".Length;  				column += "region".Length;  				SkipWhitespaces (ref ptr' endPtr' ref column);  				regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  				continue;  			}  			else if (StartsIdentifier (ptr' endPtr' "endregion")) {  				column++;  				ptr += "endregion".Length;  				column += "endregion".Length;  				if (regionStack.Count > 0) {  					var beginRegion = regionStack.Pop ();  					result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  				}  				continue;  			}  			else {  				column++;  			}  			break;  		case '/':  			if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  				inLineStart = false;  				break;  			}  			if (ptr + 1 < endPtr) {  				char nextCh = *(ptr + 1);  				if (nextCh == '/') {  					hasStartedAtLine = inLineStart;  					beginPtr = ptr + 2;  					startLoc = new TextLocation (line' column);  					ptr++;  					column++;  					inSingleComment = true;  				}  				else if (nextCh == '*') {  					hasStartedAtLine = inLineStart;  					beginPtr = ptr + 2;  					startLoc = new TextLocation (line' column);  					ptr++;  					column++;  					inMultiLineComment = true;  				}  			}  			inLineStart = false;  			break;  		case '*':  			inLineStart = false;  			if (inString || inChar || inVerbatimString || inSingleComment)  				break;  			if (inMultiLineComment && ptr + 1 < endPtr) {  				if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  					ptr += 2;  					column += 2;  					inMultiLineComment = false;  					result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  						Region = new DomRegion (startLoc' new TextLocation (line' column))'  						OpenTag = "/*"'  						CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  						Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  						CommentStartsLine = hasStartedAtLine  					});  					continue;  				}  			}  			break;  		case '@':  			inLineStart = false;  			if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  				break;  			if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  				ptr++;  				column++;  				inVerbatimString = true;  			}  			break;  		case '\n':  			if (inSingleComment && hasStartedAtLine) {  				bool isDocumentation = *beginPtr == '/';  				if (isDocumentation)  					beginPtr++;  				result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  					Region = new DomRegion (startLoc' new TextLocation (line' column))'  					CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  					OpenTag = "//"'  					Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  					CommentStartsLine = hasStartedAtLine'  					IsDocumentation = isDocumentation  				});  				inSingleComment = false;  			}  			inString = false;  			inChar = false;  			inLineStart = true;  			line++;  			column = 1;  			ptr++;  			continue;  		case '\r':  			if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  				ptr++;  			goto case '\n';  		case '\\':  			if (inString || inChar)  				ptr++;  			break;  		case '"':  			if (inSingleComment || inMultiLineComment || inChar)  				break;  			if (inVerbatimString) {  				if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  					ptr++;  					column++;  					break;  				}  				inVerbatimString = false;  				break;  			}  			inString = !inString;  			break;  		case '\'':  			if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  				break;  			inChar = !inChar;  			break;  		default:  			inLineStart &= *ptr == ' ' || *ptr == '\t';  			break;  		}  		column++;  		ptr++;  	}  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: while (ptr < endPtr) {  	switch (*ptr) {  	case '#':  		if (!inLineStart)  			break;  		inLineStart = false;  		ptr++;  		if (StartsIdentifier (ptr' endPtr' "region")) {  			var regionLocation = new TextLocation (line' column);  			column++;  			ptr += "region".Length;  			column += "region".Length;  			SkipWhitespaces (ref ptr' endPtr' ref column);  			regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  			continue;  		}  		else if (StartsIdentifier (ptr' endPtr' "endregion")) {  			column++;  			ptr += "endregion".Length;  			column += "endregion".Length;  			if (regionStack.Count > 0) {  				var beginRegion = regionStack.Pop ();  				result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  			}  			continue;  		}  		else {  			column++;  		}  		break;  	case '/':  		if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  			inLineStart = false;  			break;  		}  		if (ptr + 1 < endPtr) {  			char nextCh = *(ptr + 1);  			if (nextCh == '/') {  				hasStartedAtLine = inLineStart;  				beginPtr = ptr + 2;  				startLoc = new TextLocation (line' column);  				ptr++;  				column++;  				inSingleComment = true;  			}  			else if (nextCh == '*') {  				hasStartedAtLine = inLineStart;  				beginPtr = ptr + 2;  				startLoc = new TextLocation (line' column);  				ptr++;  				column++;  				inMultiLineComment = true;  			}  		}  		inLineStart = false;  		break;  	case '*':  		inLineStart = false;  		if (inString || inChar || inVerbatimString || inSingleComment)  			break;  		if (inMultiLineComment && ptr + 1 < endPtr) {  			if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  				ptr += 2;  				column += 2;  				inMultiLineComment = false;  				result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  					Region = new DomRegion (startLoc' new TextLocation (line' column))'  					OpenTag = "/*"'  					CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  					Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  					CommentStartsLine = hasStartedAtLine  				});  				continue;  			}  		}  		break;  	case '@':  		inLineStart = false;  		if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  			break;  		if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  			ptr++;  			column++;  			inVerbatimString = true;  		}  		break;  	case '\n':  		if (inSingleComment && hasStartedAtLine) {  			bool isDocumentation = *beginPtr == '/';  			if (isDocumentation)  				beginPtr++;  			result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  				Region = new DomRegion (startLoc' new TextLocation (line' column))'  				CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  				OpenTag = "//"'  				Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  				CommentStartsLine = hasStartedAtLine'  				IsDocumentation = isDocumentation  			});  			inSingleComment = false;  		}  		inString = false;  		inChar = false;  		inLineStart = true;  		line++;  		column = 1;  		ptr++;  		continue;  	case '\r':  		if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  			ptr++;  		goto case '\n';  	case '\\':  		if (inString || inChar)  			ptr++;  		break;  	case '"':  		if (inSingleComment || inMultiLineComment || inChar)  			break;  		if (inVerbatimString) {  			if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  				ptr++;  				column++;  				break;  			}  			inVerbatimString = false;  			break;  		}  		inString = !inString;  		break;  	case '\'':  		if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  			break;  		inChar = !inChar;  		break;  	default:  		inLineStart &= *ptr == ' ' || *ptr == '\t';  		break;  	}  	column++;  	ptr++;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: while (ptr < endPtr) {  	switch (*ptr) {  	case '#':  		if (!inLineStart)  			break;  		inLineStart = false;  		ptr++;  		if (StartsIdentifier (ptr' endPtr' "region")) {  			var regionLocation = new TextLocation (line' column);  			column++;  			ptr += "region".Length;  			column += "region".Length;  			SkipWhitespaces (ref ptr' endPtr' ref column);  			regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  			continue;  		}  		else if (StartsIdentifier (ptr' endPtr' "endregion")) {  			column++;  			ptr += "endregion".Length;  			column += "endregion".Length;  			if (regionStack.Count > 0) {  				var beginRegion = regionStack.Pop ();  				result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  			}  			continue;  		}  		else {  			column++;  		}  		break;  	case '/':  		if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  			inLineStart = false;  			break;  		}  		if (ptr + 1 < endPtr) {  			char nextCh = *(ptr + 1);  			if (nextCh == '/') {  				hasStartedAtLine = inLineStart;  				beginPtr = ptr + 2;  				startLoc = new TextLocation (line' column);  				ptr++;  				column++;  				inSingleComment = true;  			}  			else if (nextCh == '*') {  				hasStartedAtLine = inLineStart;  				beginPtr = ptr + 2;  				startLoc = new TextLocation (line' column);  				ptr++;  				column++;  				inMultiLineComment = true;  			}  		}  		inLineStart = false;  		break;  	case '*':  		inLineStart = false;  		if (inString || inChar || inVerbatimString || inSingleComment)  			break;  		if (inMultiLineComment && ptr + 1 < endPtr) {  			if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  				ptr += 2;  				column += 2;  				inMultiLineComment = false;  				result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  					Region = new DomRegion (startLoc' new TextLocation (line' column))'  					OpenTag = "/*"'  					CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  					Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  					CommentStartsLine = hasStartedAtLine  				});  				continue;  			}  		}  		break;  	case '@':  		inLineStart = false;  		if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  			break;  		if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  			ptr++;  			column++;  			inVerbatimString = true;  		}  		break;  	case '\n':  		if (inSingleComment && hasStartedAtLine) {  			bool isDocumentation = *beginPtr == '/';  			if (isDocumentation)  				beginPtr++;  			result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  				Region = new DomRegion (startLoc' new TextLocation (line' column))'  				CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  				OpenTag = "//"'  				Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  				CommentStartsLine = hasStartedAtLine'  				IsDocumentation = isDocumentation  			});  			inSingleComment = false;  		}  		inString = false;  		inChar = false;  		inLineStart = true;  		line++;  		column = 1;  		ptr++;  		continue;  	case '\r':  		if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  			ptr++;  		goto case '\n';  	case '\\':  		if (inString || inChar)  			ptr++;  		break;  	case '"':  		if (inSingleComment || inMultiLineComment || inChar)  			break;  		if (inVerbatimString) {  			if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  				ptr++;  				column++;  				break;  			}  			inVerbatimString = false;  			break;  		}  		inString = !inString;  		break;  	case '\'':  		if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  			break;  		inChar = !inChar;  		break;  	default:  		inLineStart &= *ptr == ' ' || *ptr == '\t';  		break;  	}  	column++;  	ptr++;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: while (ptr < endPtr) {  	switch (*ptr) {  	case '#':  		if (!inLineStart)  			break;  		inLineStart = false;  		ptr++;  		if (StartsIdentifier (ptr' endPtr' "region")) {  			var regionLocation = new TextLocation (line' column);  			column++;  			ptr += "region".Length;  			column += "region".Length;  			SkipWhitespaces (ref ptr' endPtr' ref column);  			regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  			continue;  		}  		else if (StartsIdentifier (ptr' endPtr' "endregion")) {  			column++;  			ptr += "endregion".Length;  			column += "endregion".Length;  			if (regionStack.Count > 0) {  				var beginRegion = regionStack.Pop ();  				result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  			}  			continue;  		}  		else {  			column++;  		}  		break;  	case '/':  		if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  			inLineStart = false;  			break;  		}  		if (ptr + 1 < endPtr) {  			char nextCh = *(ptr + 1);  			if (nextCh == '/') {  				hasStartedAtLine = inLineStart;  				beginPtr = ptr + 2;  				startLoc = new TextLocation (line' column);  				ptr++;  				column++;  				inSingleComment = true;  			}  			else if (nextCh == '*') {  				hasStartedAtLine = inLineStart;  				beginPtr = ptr + 2;  				startLoc = new TextLocation (line' column);  				ptr++;  				column++;  				inMultiLineComment = true;  			}  		}  		inLineStart = false;  		break;  	case '*':  		inLineStart = false;  		if (inString || inChar || inVerbatimString || inSingleComment)  			break;  		if (inMultiLineComment && ptr + 1 < endPtr) {  			if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  				ptr += 2;  				column += 2;  				inMultiLineComment = false;  				result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  					Region = new DomRegion (startLoc' new TextLocation (line' column))'  					OpenTag = "/*"'  					CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  					Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  					CommentStartsLine = hasStartedAtLine  				});  				continue;  			}  		}  		break;  	case '@':  		inLineStart = false;  		if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  			break;  		if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  			ptr++;  			column++;  			inVerbatimString = true;  		}  		break;  	case '\n':  		if (inSingleComment && hasStartedAtLine) {  			bool isDocumentation = *beginPtr == '/';  			if (isDocumentation)  				beginPtr++;  			result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  				Region = new DomRegion (startLoc' new TextLocation (line' column))'  				CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  				OpenTag = "//"'  				Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  				CommentStartsLine = hasStartedAtLine'  				IsDocumentation = isDocumentation  			});  			inSingleComment = false;  		}  		inString = false;  		inChar = false;  		inLineStart = true;  		line++;  		column = 1;  		ptr++;  		continue;  	case '\r':  		if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  			ptr++;  		goto case '\n';  	case '\\':  		if (inString || inChar)  			ptr++;  		break;  	case '"':  		if (inSingleComment || inMultiLineComment || inChar)  			break;  		if (inVerbatimString) {  			if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  				ptr++;  				column++;  				break;  			}  			inVerbatimString = false;  			break;  		}  		inString = !inString;  		break;  	case '\'':  		if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  			break;  		inChar = !inChar;  		break;  	default:  		inLineStart &= *ptr == ' ' || *ptr == '\t';  		break;  	}  	column++;  	ptr++;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: while (ptr < endPtr) {  	switch (*ptr) {  	case '#':  		if (!inLineStart)  			break;  		inLineStart = false;  		ptr++;  		if (StartsIdentifier (ptr' endPtr' "region")) {  			var regionLocation = new TextLocation (line' column);  			column++;  			ptr += "region".Length;  			column += "region".Length;  			SkipWhitespaces (ref ptr' endPtr' ref column);  			regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  			continue;  		}  		else if (StartsIdentifier (ptr' endPtr' "endregion")) {  			column++;  			ptr += "endregion".Length;  			column += "endregion".Length;  			if (regionStack.Count > 0) {  				var beginRegion = regionStack.Pop ();  				result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  			}  			continue;  		}  		else {  			column++;  		}  		break;  	case '/':  		if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  			inLineStart = false;  			break;  		}  		if (ptr + 1 < endPtr) {  			char nextCh = *(ptr + 1);  			if (nextCh == '/') {  				hasStartedAtLine = inLineStart;  				beginPtr = ptr + 2;  				startLoc = new TextLocation (line' column);  				ptr++;  				column++;  				inSingleComment = true;  			}  			else if (nextCh == '*') {  				hasStartedAtLine = inLineStart;  				beginPtr = ptr + 2;  				startLoc = new TextLocation (line' column);  				ptr++;  				column++;  				inMultiLineComment = true;  			}  		}  		inLineStart = false;  		break;  	case '*':  		inLineStart = false;  		if (inString || inChar || inVerbatimString || inSingleComment)  			break;  		if (inMultiLineComment && ptr + 1 < endPtr) {  			if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  				ptr += 2;  				column += 2;  				inMultiLineComment = false;  				result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  					Region = new DomRegion (startLoc' new TextLocation (line' column))'  					OpenTag = "/*"'  					CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  					Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  					CommentStartsLine = hasStartedAtLine  				});  				continue;  			}  		}  		break;  	case '@':  		inLineStart = false;  		if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  			break;  		if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  			ptr++;  			column++;  			inVerbatimString = true;  		}  		break;  	case '\n':  		if (inSingleComment && hasStartedAtLine) {  			bool isDocumentation = *beginPtr == '/';  			if (isDocumentation)  				beginPtr++;  			result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  				Region = new DomRegion (startLoc' new TextLocation (line' column))'  				CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  				OpenTag = "//"'  				Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  				CommentStartsLine = hasStartedAtLine'  				IsDocumentation = isDocumentation  			});  			inSingleComment = false;  		}  		inString = false;  		inChar = false;  		inLineStart = true;  		line++;  		column = 1;  		ptr++;  		continue;  	case '\r':  		if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  			ptr++;  		goto case '\n';  	case '\\':  		if (inString || inChar)  			ptr++;  		break;  	case '"':  		if (inSingleComment || inMultiLineComment || inChar)  			break;  		if (inVerbatimString) {  			if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  				ptr++;  				column++;  				break;  			}  			inVerbatimString = false;  			break;  		}  		inString = !inString;  		break;  	case '\'':  		if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  			break;  		inChar = !inChar;  		break;  	default:  		inLineStart &= *ptr == ' ' || *ptr == '\t';  		break;  	}  	column++;  	ptr++;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: switch (*ptr) {  case '#':  	if (!inLineStart)  		break;  	inLineStart = false;  	ptr++;  	if (StartsIdentifier (ptr' endPtr' "region")) {  		var regionLocation = new TextLocation (line' column);  		column++;  		ptr += "region".Length;  		column += "region".Length;  		SkipWhitespaces (ref ptr' endPtr' ref column);  		regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  		continue;  	}  	else if (StartsIdentifier (ptr' endPtr' "endregion")) {  		column++;  		ptr += "endregion".Length;  		column += "endregion".Length;  		if (regionStack.Count > 0) {  			var beginRegion = regionStack.Pop ();  			result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  		}  		continue;  	}  	else {  		column++;  	}  	break;  case '/':  	if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  		inLineStart = false;  		break;  	}  	if (ptr + 1 < endPtr) {  		char nextCh = *(ptr + 1);  		if (nextCh == '/') {  			hasStartedAtLine = inLineStart;  			beginPtr = ptr + 2;  			startLoc = new TextLocation (line' column);  			ptr++;  			column++;  			inSingleComment = true;  		}  		else if (nextCh == '*') {  			hasStartedAtLine = inLineStart;  			beginPtr = ptr + 2;  			startLoc = new TextLocation (line' column);  			ptr++;  			column++;  			inMultiLineComment = true;  		}  	}  	inLineStart = false;  	break;  case '*':  	inLineStart = false;  	if (inString || inChar || inVerbatimString || inSingleComment)  		break;  	if (inMultiLineComment && ptr + 1 < endPtr) {  		if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  			ptr += 2;  			column += 2;  			inMultiLineComment = false;  			result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  				Region = new DomRegion (startLoc' new TextLocation (line' column))'  				OpenTag = "/*"'  				CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  				Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  				CommentStartsLine = hasStartedAtLine  			});  			continue;  		}  	}  	break;  case '@':  	inLineStart = false;  	if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  		break;  	if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  		ptr++;  		column++;  		inVerbatimString = true;  	}  	break;  case '\n':  	if (inSingleComment && hasStartedAtLine) {  		bool isDocumentation = *beginPtr == '/';  		if (isDocumentation)  			beginPtr++;  		result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  			Region = new DomRegion (startLoc' new TextLocation (line' column))'  			CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  			OpenTag = "//"'  			Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  			CommentStartsLine = hasStartedAtLine'  			IsDocumentation = isDocumentation  		});  		inSingleComment = false;  	}  	inString = false;  	inChar = false;  	inLineStart = true;  	line++;  	column = 1;  	ptr++;  	continue;  case '\r':  	if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  		ptr++;  	goto case '\n';  case '\\':  	if (inString || inChar)  		ptr++;  	break;  case '"':  	if (inSingleComment || inMultiLineComment || inChar)  		break;  	if (inVerbatimString) {  		if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  			ptr++;  			column++;  			break;  		}  		inVerbatimString = false;  		break;  	}  	inString = !inString;  	break;  case '\'':  	if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  		break;  	inChar = !inChar;  	break;  default:  	inLineStart &= *ptr == ' ' || *ptr == '\t';  	break;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: switch (*ptr) {  case '#':  	if (!inLineStart)  		break;  	inLineStart = false;  	ptr++;  	if (StartsIdentifier (ptr' endPtr' "region")) {  		var regionLocation = new TextLocation (line' column);  		column++;  		ptr += "region".Length;  		column += "region".Length;  		SkipWhitespaces (ref ptr' endPtr' ref column);  		regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  		continue;  	}  	else if (StartsIdentifier (ptr' endPtr' "endregion")) {  		column++;  		ptr += "endregion".Length;  		column += "endregion".Length;  		if (regionStack.Count > 0) {  			var beginRegion = regionStack.Pop ();  			result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  		}  		continue;  	}  	else {  		column++;  	}  	break;  case '/':  	if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  		inLineStart = false;  		break;  	}  	if (ptr + 1 < endPtr) {  		char nextCh = *(ptr + 1);  		if (nextCh == '/') {  			hasStartedAtLine = inLineStart;  			beginPtr = ptr + 2;  			startLoc = new TextLocation (line' column);  			ptr++;  			column++;  			inSingleComment = true;  		}  		else if (nextCh == '*') {  			hasStartedAtLine = inLineStart;  			beginPtr = ptr + 2;  			startLoc = new TextLocation (line' column);  			ptr++;  			column++;  			inMultiLineComment = true;  		}  	}  	inLineStart = false;  	break;  case '*':  	inLineStart = false;  	if (inString || inChar || inVerbatimString || inSingleComment)  		break;  	if (inMultiLineComment && ptr + 1 < endPtr) {  		if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  			ptr += 2;  			column += 2;  			inMultiLineComment = false;  			result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  				Region = new DomRegion (startLoc' new TextLocation (line' column))'  				OpenTag = "/*"'  				CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  				Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  				CommentStartsLine = hasStartedAtLine  			});  			continue;  		}  	}  	break;  case '@':  	inLineStart = false;  	if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  		break;  	if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  		ptr++;  		column++;  		inVerbatimString = true;  	}  	break;  case '\n':  	if (inSingleComment && hasStartedAtLine) {  		bool isDocumentation = *beginPtr == '/';  		if (isDocumentation)  			beginPtr++;  		result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  			Region = new DomRegion (startLoc' new TextLocation (line' column))'  			CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  			OpenTag = "//"'  			Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  			CommentStartsLine = hasStartedAtLine'  			IsDocumentation = isDocumentation  		});  		inSingleComment = false;  	}  	inString = false;  	inChar = false;  	inLineStart = true;  	line++;  	column = 1;  	ptr++;  	continue;  case '\r':  	if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  		ptr++;  	goto case '\n';  case '\\':  	if (inString || inChar)  		ptr++;  	break;  case '"':  	if (inSingleComment || inMultiLineComment || inChar)  		break;  	if (inVerbatimString) {  		if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  			ptr++;  			column++;  			break;  		}  		inVerbatimString = false;  		break;  	}  	inString = !inString;  	break;  case '\'':  	if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  		break;  	inChar = !inChar;  	break;  default:  	inLineStart &= *ptr == ' ' || *ptr == '\t';  	break;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: switch (*ptr) {  case '#':  	if (!inLineStart)  		break;  	inLineStart = false;  	ptr++;  	if (StartsIdentifier (ptr' endPtr' "region")) {  		var regionLocation = new TextLocation (line' column);  		column++;  		ptr += "region".Length;  		column += "region".Length;  		SkipWhitespaces (ref ptr' endPtr' ref column);  		regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  		continue;  	}  	else if (StartsIdentifier (ptr' endPtr' "endregion")) {  		column++;  		ptr += "endregion".Length;  		column += "endregion".Length;  		if (regionStack.Count > 0) {  			var beginRegion = regionStack.Pop ();  			result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  		}  		continue;  	}  	else {  		column++;  	}  	break;  case '/':  	if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  		inLineStart = false;  		break;  	}  	if (ptr + 1 < endPtr) {  		char nextCh = *(ptr + 1);  		if (nextCh == '/') {  			hasStartedAtLine = inLineStart;  			beginPtr = ptr + 2;  			startLoc = new TextLocation (line' column);  			ptr++;  			column++;  			inSingleComment = true;  		}  		else if (nextCh == '*') {  			hasStartedAtLine = inLineStart;  			beginPtr = ptr + 2;  			startLoc = new TextLocation (line' column);  			ptr++;  			column++;  			inMultiLineComment = true;  		}  	}  	inLineStart = false;  	break;  case '*':  	inLineStart = false;  	if (inString || inChar || inVerbatimString || inSingleComment)  		break;  	if (inMultiLineComment && ptr + 1 < endPtr) {  		if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  			ptr += 2;  			column += 2;  			inMultiLineComment = false;  			result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  				Region = new DomRegion (startLoc' new TextLocation (line' column))'  				OpenTag = "/*"'  				CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  				Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  				CommentStartsLine = hasStartedAtLine  			});  			continue;  		}  	}  	break;  case '@':  	inLineStart = false;  	if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  		break;  	if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  		ptr++;  		column++;  		inVerbatimString = true;  	}  	break;  case '\n':  	if (inSingleComment && hasStartedAtLine) {  		bool isDocumentation = *beginPtr == '/';  		if (isDocumentation)  			beginPtr++;  		result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  			Region = new DomRegion (startLoc' new TextLocation (line' column))'  			CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  			OpenTag = "//"'  			Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  			CommentStartsLine = hasStartedAtLine'  			IsDocumentation = isDocumentation  		});  		inSingleComment = false;  	}  	inString = false;  	inChar = false;  	inLineStart = true;  	line++;  	column = 1;  	ptr++;  	continue;  case '\r':  	if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  		ptr++;  	goto case '\n';  case '\\':  	if (inString || inChar)  		ptr++;  	break;  case '"':  	if (inSingleComment || inMultiLineComment || inChar)  		break;  	if (inVerbatimString) {  		if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  			ptr++;  			column++;  			break;  		}  		inVerbatimString = false;  		break;  	}  	inString = !inString;  	break;  case '\'':  	if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  		break;  	inChar = !inChar;  	break;  default:  	inLineStart &= *ptr == ' ' || *ptr == '\t';  	break;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: switch (*ptr) {  case '#':  	if (!inLineStart)  		break;  	inLineStart = false;  	ptr++;  	if (StartsIdentifier (ptr' endPtr' "region")) {  		var regionLocation = new TextLocation (line' column);  		column++;  		ptr += "region".Length;  		column += "region".Length;  		SkipWhitespaces (ref ptr' endPtr' ref column);  		regionStack.Push (Tuple.Create (ReadToEol (content' ref ptr' endPtr' ref line' ref column)' regionLocation));  		continue;  	}  	else if (StartsIdentifier (ptr' endPtr' "endregion")) {  		column++;  		ptr += "endregion".Length;  		column += "endregion".Length;  		if (regionStack.Count > 0) {  			var beginRegion = regionStack.Pop ();  			result.Add (new FoldingRegion (beginRegion.Item1' new DomRegion (beginRegion.Item2.Line' beginRegion.Item2.Column' line' column)' FoldType.UserRegion' true));  		}  		continue;  	}  	else {  		column++;  	}  	break;  case '/':  	if (inString || inChar || inVerbatimString || inMultiLineComment || inSingleComment) {  		inLineStart = false;  		break;  	}  	if (ptr + 1 < endPtr) {  		char nextCh = *(ptr + 1);  		if (nextCh == '/') {  			hasStartedAtLine = inLineStart;  			beginPtr = ptr + 2;  			startLoc = new TextLocation (line' column);  			ptr++;  			column++;  			inSingleComment = true;  		}  		else if (nextCh == '*') {  			hasStartedAtLine = inLineStart;  			beginPtr = ptr + 2;  			startLoc = new TextLocation (line' column);  			ptr++;  			column++;  			inMultiLineComment = true;  		}  	}  	inLineStart = false;  	break;  case '*':  	inLineStart = false;  	if (inString || inChar || inVerbatimString || inSingleComment)  		break;  	if (inMultiLineComment && ptr + 1 < endPtr) {  		if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  			ptr += 2;  			column += 2;  			inMultiLineComment = false;  			result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  				Region = new DomRegion (startLoc' new TextLocation (line' column))'  				OpenTag = "/*"'  				CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  				Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  				CommentStartsLine = hasStartedAtLine  			});  			continue;  		}  	}  	break;  case '@':  	inLineStart = false;  	if (inString || inChar || inVerbatimString || inSingleComment || inMultiLineComment)  		break;  	if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  		ptr++;  		column++;  		inVerbatimString = true;  	}  	break;  case '\n':  	if (inSingleComment && hasStartedAtLine) {  		bool isDocumentation = *beginPtr == '/';  		if (isDocumentation)  			beginPtr++;  		result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  			Region = new DomRegion (startLoc' new TextLocation (line' column))'  			CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine'  			OpenTag = "//"'  			Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  			CommentStartsLine = hasStartedAtLine'  			IsDocumentation = isDocumentation  		});  		inSingleComment = false;  	}  	inString = false;  	inChar = false;  	inLineStart = true;  	line++;  	column = 1;  	ptr++;  	continue;  case '\r':  	if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  		ptr++;  	goto case '\n';  case '\\':  	if (inString || inChar)  		ptr++;  	break;  case '"':  	if (inSingleComment || inMultiLineComment || inChar)  		break;  	if (inVerbatimString) {  		if (ptr + 1 < endPtr && *(ptr + 1) == '"') {  			ptr++;  			column++;  			break;  		}  		inVerbatimString = false;  		break;  	}  	inString = !inString;  	break;  case '\'':  	if (inSingleComment || inMultiLineComment || inString || inVerbatimString)  		break;  	inChar = !inChar;  	break;  default:  	inLineStart &= *ptr == ' ' || *ptr == '\t';  	break;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (ptr + 1 < endPtr) {  	char nextCh = *(ptr + 1);  	if (nextCh == '/') {  		hasStartedAtLine = inLineStart;  		beginPtr = ptr + 2;  		startLoc = new TextLocation (line' column);  		ptr++;  		column++;  		inSingleComment = true;  	}  	else if (nextCh == '*') {  		hasStartedAtLine = inLineStart;  		beginPtr = ptr + 2;  		startLoc = new TextLocation (line' column);  		ptr++;  		column++;  		inMultiLineComment = true;  	}  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (ptr + 1 < endPtr) {  	char nextCh = *(ptr + 1);  	if (nextCh == '/') {  		hasStartedAtLine = inLineStart;  		beginPtr = ptr + 2;  		startLoc = new TextLocation (line' column);  		ptr++;  		column++;  		inSingleComment = true;  	}  	else if (nextCh == '*') {  		hasStartedAtLine = inLineStart;  		beginPtr = ptr + 2;  		startLoc = new TextLocation (line' column);  		ptr++;  		column++;  		inMultiLineComment = true;  	}  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (nextCh == '/') {  	hasStartedAtLine = inLineStart;  	beginPtr = ptr + 2;  	startLoc = new TextLocation (line' column);  	ptr++;  	column++;  	inSingleComment = true;  }  else if (nextCh == '*') {  	hasStartedAtLine = inLineStart;  	beginPtr = ptr + 2;  	startLoc = new TextLocation (line' column);  	ptr++;  	column++;  	inMultiLineComment = true;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (nextCh == '/') {  	hasStartedAtLine = inLineStart;  	beginPtr = ptr + 2;  	startLoc = new TextLocation (line' column);  	ptr++;  	column++;  	inSingleComment = true;  }  else if (nextCh == '*') {  	hasStartedAtLine = inLineStart;  	beginPtr = ptr + 2;  	startLoc = new TextLocation (line' column);  	ptr++;  	column++;  	inMultiLineComment = true;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: beginPtr = ptr + 2;  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (nextCh == '*') {  	hasStartedAtLine = inLineStart;  	beginPtr = ptr + 2;  	startLoc = new TextLocation (line' column);  	ptr++;  	column++;  	inMultiLineComment = true;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: beginPtr = ptr + 2;  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (inMultiLineComment && ptr + 1 < endPtr) {  	if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  		ptr += 2;  		column += 2;  		inMultiLineComment = false;  		result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  			Region = new DomRegion (startLoc' new TextLocation (line' column))'  			OpenTag = "/*"'  			CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  			Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  			CommentStartsLine = hasStartedAtLine  		});  		continue;  	}  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (inMultiLineComment && ptr + 1 < endPtr) {  	if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  		ptr += 2;  		column += 2;  		inMultiLineComment = false;  		result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  			Region = new DomRegion (startLoc' new TextLocation (line' column))'  			OpenTag = "/*"'  			CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  			Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  			CommentStartsLine = hasStartedAtLine  		});  		continue;  	}  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  	ptr += 2;  	column += 2;  	inMultiLineComment = false;  	result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  		Region = new DomRegion (startLoc' new TextLocation (line' column))'  		OpenTag = "/*"'  		CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  		Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  		CommentStartsLine = hasStartedAtLine  	});  	continue;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: if (ptr + 1 < endPtr && *(ptr + 1) == '/') {  	ptr += 2;  	column += 2;  	inMultiLineComment = false;  	result.Add (new MonoDevelop.Ide.TypeSystem.Comment () {  		Region = new DomRegion (startLoc' new TextLocation (line' column))'  		OpenTag = "/*"'  		CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block'  		Text = content.Substring ((int)(beginPtr - startPtr)' (int)(ptr - beginPtr))'  		CommentStartsLine = hasStartedAtLine  	});  	continue;  }  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: ptr += 2;  
Magic Number,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,Parse,The following statement contains a magic number: column += 2;  
Magic Number,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,HandleCodeCompletion,The following statement contains a magic number: try {  	if (char.IsLetterOrDigit (completionChar) || completionChar == '_') {  		if (completionContext.TriggerOffset > 1 && char.IsLetterOrDigit (document.Editor.GetCharAt (completionContext.TriggerOffset - 2)))  			return null;  		triggerWordLength = 1;  	}  	return InternalHandleCodeCompletion (completionContext' completionChar' false' ref triggerWordLength);  }  catch (Exception e) {  	LoggingService.LogError ("Unexpected code completion exception." + Environment.NewLine + "FileName: " + Document.FileName + Environment.NewLine + "Position: line=" + completionContext.TriggerLine + " col=" + completionContext.TriggerLineOffset + Environment.NewLine + "Line text: " + Document.Editor.GetLineText (completionContext.TriggerLine)' e);  	return null;  }  finally {  	//			if (timer != null)  	//				timer.Dispose ();  }  
Magic Number,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,HandleCodeCompletion,The following statement contains a magic number: if (char.IsLetterOrDigit (completionChar) || completionChar == '_') {  	if (completionContext.TriggerOffset > 1 && char.IsLetterOrDigit (document.Editor.GetCharAt (completionContext.TriggerOffset - 2)))  		return null;  	triggerWordLength = 1;  }  
Magic Number,MonoDevelop.CSharp.Completion,CSharpCompletionTextEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\CSharpCompletionTextEditorExtension.cs,HandleCodeCompletion,The following statement contains a magic number: if (completionContext.TriggerOffset > 1 && char.IsLetterOrDigit (document.Editor.GetCharAt (completionContext.TriggerOffset - 2)))  	return null;  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addParens && !IsDelegateExpected && method != null && !HasNonMethodMembersWithSameName ((IMember)Entity) && !IsBracketAlreadyInserted (method)) {  	var line = Editor.GetLine (Editor.Caret.Line);  	var start = window.CodeCompletionContext.TriggerOffset + partialWord.Length + 2;  	var end = line.Offset + line.Length;  	string textToEnd = start < end ? Editor.GetTextBetween (start' end) : "";  	bool addSpace = Policy.BeforeMethodCallParentheses && CSharpTextEditorIndentation.OnTheFlyFormatting;  	int exprStart = window.CodeCompletionContext.TriggerOffset - 1;  	while (exprStart > line.Offset) {  		char ch = Editor.GetCharAt (exprStart);  		if (ch != '.' && ch != '_' && /*ch != '<' && ch != '>' && */!char.IsLetterOrDigit (ch))  			break;  		exprStart--;  	}  	bool insertSemicolon = InsertSemicolon (exprStart);  	if (Entity.SymbolKind == SymbolKind.Constructor)  		insertSemicolon = false;  	//int pos;  	Gdk.Key[] keys = new[] {  		Gdk.Key.Return'  		Gdk.Key.Tab'  		Gdk.Key.space'  		Gdk.Key.KP_Enter'  		Gdk.Key.ISO_Enter  	};  	if (keys.Contains (closeChar) || keyChar == '.') {  		if (HasAnyOverloadWithParameters (method)) {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ()" : "<>()";  					}  					else {  						text += addSpace ? " ()" : "()";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  							skipChars = addSpace ? 5 : 4;  						}  						else {  							text += addSpace ? " (|);" : "(|);";  							skipChars = 2;  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  							skipChars = addSpace ? 4 : 3;  						}  						else {  							text += addSpace ? " (|)" : "(|)";  							skipChars = 1;  						}  					}  				}  			}  			runParameterCompletionCommand = true;  		}  		else {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ().|" : "<>().|";  					}  					else {  						text += addSpace ? " ().|" : "().|";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  						}  						else {  							text += addSpace ? " ();|" : "();|";  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  						}  						else {  							text += addSpace ? " ()|" : "()|";  						}  					}  				}  			}  		}  		if (keyChar == '(') {  			var skipChar = Editor.SkipChars.LastOrDefault ();  			if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  				Editor.Remove (skipChar.Offset' 1);  		}  	}  	ka |= KeyActions.Ignore;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addParens && !IsDelegateExpected && method != null && !HasNonMethodMembersWithSameName ((IMember)Entity) && !IsBracketAlreadyInserted (method)) {  	var line = Editor.GetLine (Editor.Caret.Line);  	var start = window.CodeCompletionContext.TriggerOffset + partialWord.Length + 2;  	var end = line.Offset + line.Length;  	string textToEnd = start < end ? Editor.GetTextBetween (start' end) : "";  	bool addSpace = Policy.BeforeMethodCallParentheses && CSharpTextEditorIndentation.OnTheFlyFormatting;  	int exprStart = window.CodeCompletionContext.TriggerOffset - 1;  	while (exprStart > line.Offset) {  		char ch = Editor.GetCharAt (exprStart);  		if (ch != '.' && ch != '_' && /*ch != '<' && ch != '>' && */!char.IsLetterOrDigit (ch))  			break;  		exprStart--;  	}  	bool insertSemicolon = InsertSemicolon (exprStart);  	if (Entity.SymbolKind == SymbolKind.Constructor)  		insertSemicolon = false;  	//int pos;  	Gdk.Key[] keys = new[] {  		Gdk.Key.Return'  		Gdk.Key.Tab'  		Gdk.Key.space'  		Gdk.Key.KP_Enter'  		Gdk.Key.ISO_Enter  	};  	if (keys.Contains (closeChar) || keyChar == '.') {  		if (HasAnyOverloadWithParameters (method)) {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ()" : "<>()";  					}  					else {  						text += addSpace ? " ()" : "()";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  							skipChars = addSpace ? 5 : 4;  						}  						else {  							text += addSpace ? " (|);" : "(|);";  							skipChars = 2;  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  							skipChars = addSpace ? 4 : 3;  						}  						else {  							text += addSpace ? " (|)" : "(|)";  							skipChars = 1;  						}  					}  				}  			}  			runParameterCompletionCommand = true;  		}  		else {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ().|" : "<>().|";  					}  					else {  						text += addSpace ? " ().|" : "().|";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  						}  						else {  							text += addSpace ? " ();|" : "();|";  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  						}  						else {  							text += addSpace ? " ()|" : "()|";  						}  					}  				}  			}  		}  		if (keyChar == '(') {  			var skipChar = Editor.SkipChars.LastOrDefault ();  			if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  				Editor.Remove (skipChar.Offset' 1);  		}  	}  	ka |= KeyActions.Ignore;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addParens && !IsDelegateExpected && method != null && !HasNonMethodMembersWithSameName ((IMember)Entity) && !IsBracketAlreadyInserted (method)) {  	var line = Editor.GetLine (Editor.Caret.Line);  	var start = window.CodeCompletionContext.TriggerOffset + partialWord.Length + 2;  	var end = line.Offset + line.Length;  	string textToEnd = start < end ? Editor.GetTextBetween (start' end) : "";  	bool addSpace = Policy.BeforeMethodCallParentheses && CSharpTextEditorIndentation.OnTheFlyFormatting;  	int exprStart = window.CodeCompletionContext.TriggerOffset - 1;  	while (exprStart > line.Offset) {  		char ch = Editor.GetCharAt (exprStart);  		if (ch != '.' && ch != '_' && /*ch != '<' && ch != '>' && */!char.IsLetterOrDigit (ch))  			break;  		exprStart--;  	}  	bool insertSemicolon = InsertSemicolon (exprStart);  	if (Entity.SymbolKind == SymbolKind.Constructor)  		insertSemicolon = false;  	//int pos;  	Gdk.Key[] keys = new[] {  		Gdk.Key.Return'  		Gdk.Key.Tab'  		Gdk.Key.space'  		Gdk.Key.KP_Enter'  		Gdk.Key.ISO_Enter  	};  	if (keys.Contains (closeChar) || keyChar == '.') {  		if (HasAnyOverloadWithParameters (method)) {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ()" : "<>()";  					}  					else {  						text += addSpace ? " ()" : "()";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  							skipChars = addSpace ? 5 : 4;  						}  						else {  							text += addSpace ? " (|);" : "(|);";  							skipChars = 2;  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  							skipChars = addSpace ? 4 : 3;  						}  						else {  							text += addSpace ? " (|)" : "(|)";  							skipChars = 1;  						}  					}  				}  			}  			runParameterCompletionCommand = true;  		}  		else {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ().|" : "<>().|";  					}  					else {  						text += addSpace ? " ().|" : "().|";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  						}  						else {  							text += addSpace ? " ();|" : "();|";  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  						}  						else {  							text += addSpace ? " ()|" : "()|";  						}  					}  				}  			}  		}  		if (keyChar == '(') {  			var skipChar = Editor.SkipChars.LastOrDefault ();  			if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  				Editor.Remove (skipChar.Offset' 1);  		}  	}  	ka |= KeyActions.Ignore;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addParens && !IsDelegateExpected && method != null && !HasNonMethodMembersWithSameName ((IMember)Entity) && !IsBracketAlreadyInserted (method)) {  	var line = Editor.GetLine (Editor.Caret.Line);  	var start = window.CodeCompletionContext.TriggerOffset + partialWord.Length + 2;  	var end = line.Offset + line.Length;  	string textToEnd = start < end ? Editor.GetTextBetween (start' end) : "";  	bool addSpace = Policy.BeforeMethodCallParentheses && CSharpTextEditorIndentation.OnTheFlyFormatting;  	int exprStart = window.CodeCompletionContext.TriggerOffset - 1;  	while (exprStart > line.Offset) {  		char ch = Editor.GetCharAt (exprStart);  		if (ch != '.' && ch != '_' && /*ch != '<' && ch != '>' && */!char.IsLetterOrDigit (ch))  			break;  		exprStart--;  	}  	bool insertSemicolon = InsertSemicolon (exprStart);  	if (Entity.SymbolKind == SymbolKind.Constructor)  		insertSemicolon = false;  	//int pos;  	Gdk.Key[] keys = new[] {  		Gdk.Key.Return'  		Gdk.Key.Tab'  		Gdk.Key.space'  		Gdk.Key.KP_Enter'  		Gdk.Key.ISO_Enter  	};  	if (keys.Contains (closeChar) || keyChar == '.') {  		if (HasAnyOverloadWithParameters (method)) {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ()" : "<>()";  					}  					else {  						text += addSpace ? " ()" : "()";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  							skipChars = addSpace ? 5 : 4;  						}  						else {  							text += addSpace ? " (|);" : "(|);";  							skipChars = 2;  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  							skipChars = addSpace ? 4 : 3;  						}  						else {  							text += addSpace ? " (|)" : "(|)";  							skipChars = 1;  						}  					}  				}  			}  			runParameterCompletionCommand = true;  		}  		else {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ().|" : "<>().|";  					}  					else {  						text += addSpace ? " ().|" : "().|";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  						}  						else {  							text += addSpace ? " ();|" : "();|";  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  						}  						else {  							text += addSpace ? " ()|" : "()|";  						}  					}  				}  			}  		}  		if (keyChar == '(') {  			var skipChar = Editor.SkipChars.LastOrDefault ();  			if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  				Editor.Remove (skipChar.Offset' 1);  		}  	}  	ka |= KeyActions.Ignore;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addParens && !IsDelegateExpected && method != null && !HasNonMethodMembersWithSameName ((IMember)Entity) && !IsBracketAlreadyInserted (method)) {  	var line = Editor.GetLine (Editor.Caret.Line);  	var start = window.CodeCompletionContext.TriggerOffset + partialWord.Length + 2;  	var end = line.Offset + line.Length;  	string textToEnd = start < end ? Editor.GetTextBetween (start' end) : "";  	bool addSpace = Policy.BeforeMethodCallParentheses && CSharpTextEditorIndentation.OnTheFlyFormatting;  	int exprStart = window.CodeCompletionContext.TriggerOffset - 1;  	while (exprStart > line.Offset) {  		char ch = Editor.GetCharAt (exprStart);  		if (ch != '.' && ch != '_' && /*ch != '<' && ch != '>' && */!char.IsLetterOrDigit (ch))  			break;  		exprStart--;  	}  	bool insertSemicolon = InsertSemicolon (exprStart);  	if (Entity.SymbolKind == SymbolKind.Constructor)  		insertSemicolon = false;  	//int pos;  	Gdk.Key[] keys = new[] {  		Gdk.Key.Return'  		Gdk.Key.Tab'  		Gdk.Key.space'  		Gdk.Key.KP_Enter'  		Gdk.Key.ISO_Enter  	};  	if (keys.Contains (closeChar) || keyChar == '.') {  		if (HasAnyOverloadWithParameters (method)) {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ()" : "<>()";  					}  					else {  						text += addSpace ? " ()" : "()";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  							skipChars = addSpace ? 5 : 4;  						}  						else {  							text += addSpace ? " (|);" : "(|);";  							skipChars = 2;  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  							skipChars = addSpace ? 4 : 3;  						}  						else {  							text += addSpace ? " (|)" : "(|)";  							skipChars = 1;  						}  					}  				}  			}  			runParameterCompletionCommand = true;  		}  		else {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ().|" : "<>().|";  					}  					else {  						text += addSpace ? " ().|" : "().|";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  						}  						else {  							text += addSpace ? " ();|" : "();|";  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  						}  						else {  							text += addSpace ? " ()|" : "()|";  						}  					}  				}  			}  		}  		if (keyChar == '(') {  			var skipChar = Editor.SkipChars.LastOrDefault ();  			if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  				Editor.Remove (skipChar.Offset' 1);  		}  	}  	ka |= KeyActions.Ignore;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addParens && !IsDelegateExpected && method != null && !HasNonMethodMembersWithSameName ((IMember)Entity) && !IsBracketAlreadyInserted (method)) {  	var line = Editor.GetLine (Editor.Caret.Line);  	var start = window.CodeCompletionContext.TriggerOffset + partialWord.Length + 2;  	var end = line.Offset + line.Length;  	string textToEnd = start < end ? Editor.GetTextBetween (start' end) : "";  	bool addSpace = Policy.BeforeMethodCallParentheses && CSharpTextEditorIndentation.OnTheFlyFormatting;  	int exprStart = window.CodeCompletionContext.TriggerOffset - 1;  	while (exprStart > line.Offset) {  		char ch = Editor.GetCharAt (exprStart);  		if (ch != '.' && ch != '_' && /*ch != '<' && ch != '>' && */!char.IsLetterOrDigit (ch))  			break;  		exprStart--;  	}  	bool insertSemicolon = InsertSemicolon (exprStart);  	if (Entity.SymbolKind == SymbolKind.Constructor)  		insertSemicolon = false;  	//int pos;  	Gdk.Key[] keys = new[] {  		Gdk.Key.Return'  		Gdk.Key.Tab'  		Gdk.Key.space'  		Gdk.Key.KP_Enter'  		Gdk.Key.ISO_Enter  	};  	if (keys.Contains (closeChar) || keyChar == '.') {  		if (HasAnyOverloadWithParameters (method)) {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ()" : "<>()";  					}  					else {  						text += addSpace ? " ()" : "()";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  							skipChars = addSpace ? 5 : 4;  						}  						else {  							text += addSpace ? " (|);" : "(|);";  							skipChars = 2;  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  							skipChars = addSpace ? 4 : 3;  						}  						else {  							text += addSpace ? " (|)" : "(|)";  							skipChars = 1;  						}  					}  				}  			}  			runParameterCompletionCommand = true;  		}  		else {  			if (addOpeningOnly) {  				text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  				skipChars = 0;  			}  			else {  				if (keyChar == '.') {  					if (RequireGenerics (method)) {  						text += addSpace ? "<> ().|" : "<>().|";  					}  					else {  						text += addSpace ? " ().|" : "().|";  					}  					skipChars = 0;  				}  				else {  					if (insertSemicolon) {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ();" : "<|>();";  						}  						else {  							text += addSpace ? " ();|" : "();|";  						}  					}  					else {  						if (RequireGenerics (method)) {  							text += addSpace ? "<|> ()" : "<|>()";  						}  						else {  							text += addSpace ? " ()|" : "()|";  						}  					}  				}  			}  		}  		if (keyChar == '(') {  			var skipChar = Editor.SkipChars.LastOrDefault ();  			if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  				Editor.Remove (skipChar.Offset' 1);  		}  	}  	ka |= KeyActions.Ignore;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keys.Contains (closeChar) || keyChar == '.') {  	if (HasAnyOverloadWithParameters (method)) {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ()" : "<>()";  				}  				else {  					text += addSpace ? " ()" : "()";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  						skipChars = addSpace ? 5 : 4;  					}  					else {  						text += addSpace ? " (|);" : "(|);";  						skipChars = 2;  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  						skipChars = addSpace ? 4 : 3;  					}  					else {  						text += addSpace ? " (|)" : "(|)";  						skipChars = 1;  					}  				}  			}  		}  		runParameterCompletionCommand = true;  	}  	else {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ().|" : "<>().|";  				}  				else {  					text += addSpace ? " ().|" : "().|";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  					}  					else {  						text += addSpace ? " ();|" : "();|";  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  					}  					else {  						text += addSpace ? " ()|" : "()|";  					}  				}  			}  		}  	}  	if (keyChar == '(') {  		var skipChar = Editor.SkipChars.LastOrDefault ();  		if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  			Editor.Remove (skipChar.Offset' 1);  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keys.Contains (closeChar) || keyChar == '.') {  	if (HasAnyOverloadWithParameters (method)) {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ()" : "<>()";  				}  				else {  					text += addSpace ? " ()" : "()";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  						skipChars = addSpace ? 5 : 4;  					}  					else {  						text += addSpace ? " (|);" : "(|);";  						skipChars = 2;  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  						skipChars = addSpace ? 4 : 3;  					}  					else {  						text += addSpace ? " (|)" : "(|)";  						skipChars = 1;  					}  				}  			}  		}  		runParameterCompletionCommand = true;  	}  	else {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ().|" : "<>().|";  				}  				else {  					text += addSpace ? " ().|" : "().|";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  					}  					else {  						text += addSpace ? " ();|" : "();|";  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  					}  					else {  						text += addSpace ? " ()|" : "()|";  					}  				}  			}  		}  	}  	if (keyChar == '(') {  		var skipChar = Editor.SkipChars.LastOrDefault ();  		if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  			Editor.Remove (skipChar.Offset' 1);  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keys.Contains (closeChar) || keyChar == '.') {  	if (HasAnyOverloadWithParameters (method)) {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ()" : "<>()";  				}  				else {  					text += addSpace ? " ()" : "()";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  						skipChars = addSpace ? 5 : 4;  					}  					else {  						text += addSpace ? " (|);" : "(|);";  						skipChars = 2;  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  						skipChars = addSpace ? 4 : 3;  					}  					else {  						text += addSpace ? " (|)" : "(|)";  						skipChars = 1;  					}  				}  			}  		}  		runParameterCompletionCommand = true;  	}  	else {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ().|" : "<>().|";  				}  				else {  					text += addSpace ? " ().|" : "().|";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  					}  					else {  						text += addSpace ? " ();|" : "();|";  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  					}  					else {  						text += addSpace ? " ()|" : "()|";  					}  				}  			}  		}  	}  	if (keyChar == '(') {  		var skipChar = Editor.SkipChars.LastOrDefault ();  		if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  			Editor.Remove (skipChar.Offset' 1);  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keys.Contains (closeChar) || keyChar == '.') {  	if (HasAnyOverloadWithParameters (method)) {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ()" : "<>()";  				}  				else {  					text += addSpace ? " ()" : "()";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  						skipChars = addSpace ? 5 : 4;  					}  					else {  						text += addSpace ? " (|);" : "(|);";  						skipChars = 2;  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  						skipChars = addSpace ? 4 : 3;  					}  					else {  						text += addSpace ? " (|)" : "(|)";  						skipChars = 1;  					}  				}  			}  		}  		runParameterCompletionCommand = true;  	}  	else {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ().|" : "<>().|";  				}  				else {  					text += addSpace ? " ().|" : "().|";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  					}  					else {  						text += addSpace ? " ();|" : "();|";  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  					}  					else {  						text += addSpace ? " ()|" : "()|";  					}  				}  			}  		}  	}  	if (keyChar == '(') {  		var skipChar = Editor.SkipChars.LastOrDefault ();  		if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  			Editor.Remove (skipChar.Offset' 1);  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keys.Contains (closeChar) || keyChar == '.') {  	if (HasAnyOverloadWithParameters (method)) {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ()" : "<>()";  				}  				else {  					text += addSpace ? " ()" : "()";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  						skipChars = addSpace ? 5 : 4;  					}  					else {  						text += addSpace ? " (|);" : "(|);";  						skipChars = 2;  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  						skipChars = addSpace ? 4 : 3;  					}  					else {  						text += addSpace ? " (|)" : "(|)";  						skipChars = 1;  					}  				}  			}  		}  		runParameterCompletionCommand = true;  	}  	else {  		if (addOpeningOnly) {  			text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  			skipChars = 0;  		}  		else {  			if (keyChar == '.') {  				if (RequireGenerics (method)) {  					text += addSpace ? "<> ().|" : "<>().|";  				}  				else {  					text += addSpace ? " ().|" : "().|";  				}  				skipChars = 0;  			}  			else {  				if (insertSemicolon) {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ();" : "<|>();";  					}  					else {  						text += addSpace ? " ();|" : "();|";  					}  				}  				else {  					if (RequireGenerics (method)) {  						text += addSpace ? "<|> ()" : "<|>()";  					}  					else {  						text += addSpace ? " ()|" : "()|";  					}  				}  			}  		}  	}  	if (keyChar == '(') {  		var skipChar = Editor.SkipChars.LastOrDefault ();  		if (skipChar != null && skipChar.Offset == (window.CodeCompletionContext.TriggerOffset + partialWord.Length) && skipChar.Char == ')')  			Editor.Remove (skipChar.Offset' 1);  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (HasAnyOverloadWithParameters (method)) {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ()" : "<>()";  			}  			else {  				text += addSpace ? " ()" : "()";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  					skipChars = addSpace ? 5 : 4;  				}  				else {  					text += addSpace ? " (|);" : "(|);";  					skipChars = 2;  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  					skipChars = addSpace ? 4 : 3;  				}  				else {  					text += addSpace ? " (|)" : "(|)";  					skipChars = 1;  				}  			}  		}  	}  	runParameterCompletionCommand = true;  }  else {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ().|" : "<>().|";  			}  			else {  				text += addSpace ? " ().|" : "().|";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  				}  				else {  					text += addSpace ? " ();|" : "();|";  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  				}  				else {  					text += addSpace ? " ()|" : "()|";  				}  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (HasAnyOverloadWithParameters (method)) {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ()" : "<>()";  			}  			else {  				text += addSpace ? " ()" : "()";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  					skipChars = addSpace ? 5 : 4;  				}  				else {  					text += addSpace ? " (|);" : "(|);";  					skipChars = 2;  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  					skipChars = addSpace ? 4 : 3;  				}  				else {  					text += addSpace ? " (|)" : "(|)";  					skipChars = 1;  				}  			}  		}  	}  	runParameterCompletionCommand = true;  }  else {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ().|" : "<>().|";  			}  			else {  				text += addSpace ? " ().|" : "().|";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  				}  				else {  					text += addSpace ? " ();|" : "();|";  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  				}  				else {  					text += addSpace ? " ()|" : "()|";  				}  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (HasAnyOverloadWithParameters (method)) {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ()" : "<>()";  			}  			else {  				text += addSpace ? " ()" : "()";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  					skipChars = addSpace ? 5 : 4;  				}  				else {  					text += addSpace ? " (|);" : "(|);";  					skipChars = 2;  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  					skipChars = addSpace ? 4 : 3;  				}  				else {  					text += addSpace ? " (|)" : "(|)";  					skipChars = 1;  				}  			}  		}  	}  	runParameterCompletionCommand = true;  }  else {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ().|" : "<>().|";  			}  			else {  				text += addSpace ? " ().|" : "().|";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  				}  				else {  					text += addSpace ? " ();|" : "();|";  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  				}  				else {  					text += addSpace ? " ()|" : "()|";  				}  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (HasAnyOverloadWithParameters (method)) {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ()" : "<>()";  			}  			else {  				text += addSpace ? " ()" : "()";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  					skipChars = addSpace ? 5 : 4;  				}  				else {  					text += addSpace ? " (|);" : "(|);";  					skipChars = 2;  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  					skipChars = addSpace ? 4 : 3;  				}  				else {  					text += addSpace ? " (|)" : "(|)";  					skipChars = 1;  				}  			}  		}  	}  	runParameterCompletionCommand = true;  }  else {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ().|" : "<>().|";  			}  			else {  				text += addSpace ? " ().|" : "().|";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  				}  				else {  					text += addSpace ? " ();|" : "();|";  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  				}  				else {  					text += addSpace ? " ()|" : "()|";  				}  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (HasAnyOverloadWithParameters (method)) {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ()" : "<>()";  			}  			else {  				text += addSpace ? " ()" : "()";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  					skipChars = addSpace ? 5 : 4;  				}  				else {  					text += addSpace ? " (|);" : "(|);";  					skipChars = 2;  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  					skipChars = addSpace ? 4 : 3;  				}  				else {  					text += addSpace ? " (|)" : "(|)";  					skipChars = 1;  				}  			}  		}  	}  	runParameterCompletionCommand = true;  }  else {  	if (addOpeningOnly) {  		text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  		skipChars = 0;  	}  	else {  		if (keyChar == '.') {  			if (RequireGenerics (method)) {  				text += addSpace ? "<> ().|" : "<>().|";  			}  			else {  				text += addSpace ? " ().|" : "().|";  			}  			skipChars = 0;  		}  		else {  			if (insertSemicolon) {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ();" : "<|>();";  				}  				else {  					text += addSpace ? " ();|" : "();|";  				}  			}  			else {  				if (RequireGenerics (method)) {  					text += addSpace ? "<|> ()" : "<|>()";  				}  				else {  					text += addSpace ? " ()|" : "()|";  				}  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addOpeningOnly) {  	text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  	skipChars = 0;  }  else {  	if (keyChar == '.') {  		if (RequireGenerics (method)) {  			text += addSpace ? "<> ()" : "<>()";  		}  		else {  			text += addSpace ? " ()" : "()";  		}  		skipChars = 0;  	}  	else {  		if (insertSemicolon) {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ();" : "<|>();";  				skipChars = addSpace ? 5 : 4;  			}  			else {  				text += addSpace ? " (|);" : "(|);";  				skipChars = 2;  			}  		}  		else {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ()" : "<|>()";  				skipChars = addSpace ? 4 : 3;  			}  			else {  				text += addSpace ? " (|)" : "(|)";  				skipChars = 1;  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addOpeningOnly) {  	text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  	skipChars = 0;  }  else {  	if (keyChar == '.') {  		if (RequireGenerics (method)) {  			text += addSpace ? "<> ()" : "<>()";  		}  		else {  			text += addSpace ? " ()" : "()";  		}  		skipChars = 0;  	}  	else {  		if (insertSemicolon) {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ();" : "<|>();";  				skipChars = addSpace ? 5 : 4;  			}  			else {  				text += addSpace ? " (|);" : "(|);";  				skipChars = 2;  			}  		}  		else {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ()" : "<|>()";  				skipChars = addSpace ? 4 : 3;  			}  			else {  				text += addSpace ? " (|)" : "(|)";  				skipChars = 1;  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addOpeningOnly) {  	text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  	skipChars = 0;  }  else {  	if (keyChar == '.') {  		if (RequireGenerics (method)) {  			text += addSpace ? "<> ()" : "<>()";  		}  		else {  			text += addSpace ? " ()" : "()";  		}  		skipChars = 0;  	}  	else {  		if (insertSemicolon) {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ();" : "<|>();";  				skipChars = addSpace ? 5 : 4;  			}  			else {  				text += addSpace ? " (|);" : "(|);";  				skipChars = 2;  			}  		}  		else {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ()" : "<|>()";  				skipChars = addSpace ? 4 : 3;  			}  			else {  				text += addSpace ? " (|)" : "(|)";  				skipChars = 1;  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addOpeningOnly) {  	text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  	skipChars = 0;  }  else {  	if (keyChar == '.') {  		if (RequireGenerics (method)) {  			text += addSpace ? "<> ()" : "<>()";  		}  		else {  			text += addSpace ? " ()" : "()";  		}  		skipChars = 0;  	}  	else {  		if (insertSemicolon) {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ();" : "<|>();";  				skipChars = addSpace ? 5 : 4;  			}  			else {  				text += addSpace ? " (|);" : "(|);";  				skipChars = 2;  			}  		}  		else {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ()" : "<|>()";  				skipChars = addSpace ? 4 : 3;  			}  			else {  				text += addSpace ? " (|)" : "(|)";  				skipChars = 1;  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (addOpeningOnly) {  	text += RequireGenerics (method) ? "<|" : (addSpace ? " (|" : "(|");  	skipChars = 0;  }  else {  	if (keyChar == '.') {  		if (RequireGenerics (method)) {  			text += addSpace ? "<> ()" : "<>()";  		}  		else {  			text += addSpace ? " ()" : "()";  		}  		skipChars = 0;  	}  	else {  		if (insertSemicolon) {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ();" : "<|>();";  				skipChars = addSpace ? 5 : 4;  			}  			else {  				text += addSpace ? " (|);" : "(|);";  				skipChars = 2;  			}  		}  		else {  			if (RequireGenerics (method)) {  				text += addSpace ? "<|> ()" : "<|>()";  				skipChars = addSpace ? 4 : 3;  			}  			else {  				text += addSpace ? " (|)" : "(|)";  				skipChars = 1;  			}  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keyChar == '.') {  	if (RequireGenerics (method)) {  		text += addSpace ? "<> ()" : "<>()";  	}  	else {  		text += addSpace ? " ()" : "()";  	}  	skipChars = 0;  }  else {  	if (insertSemicolon) {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ();" : "<|>();";  			skipChars = addSpace ? 5 : 4;  		}  		else {  			text += addSpace ? " (|);" : "(|);";  			skipChars = 2;  		}  	}  	else {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ()" : "<|>()";  			skipChars = addSpace ? 4 : 3;  		}  		else {  			text += addSpace ? " (|)" : "(|)";  			skipChars = 1;  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keyChar == '.') {  	if (RequireGenerics (method)) {  		text += addSpace ? "<> ()" : "<>()";  	}  	else {  		text += addSpace ? " ()" : "()";  	}  	skipChars = 0;  }  else {  	if (insertSemicolon) {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ();" : "<|>();";  			skipChars = addSpace ? 5 : 4;  		}  		else {  			text += addSpace ? " (|);" : "(|);";  			skipChars = 2;  		}  	}  	else {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ()" : "<|>()";  			skipChars = addSpace ? 4 : 3;  		}  		else {  			text += addSpace ? " (|)" : "(|)";  			skipChars = 1;  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keyChar == '.') {  	if (RequireGenerics (method)) {  		text += addSpace ? "<> ()" : "<>()";  	}  	else {  		text += addSpace ? " ()" : "()";  	}  	skipChars = 0;  }  else {  	if (insertSemicolon) {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ();" : "<|>();";  			skipChars = addSpace ? 5 : 4;  		}  		else {  			text += addSpace ? " (|);" : "(|);";  			skipChars = 2;  		}  	}  	else {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ()" : "<|>()";  			skipChars = addSpace ? 4 : 3;  		}  		else {  			text += addSpace ? " (|)" : "(|)";  			skipChars = 1;  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keyChar == '.') {  	if (RequireGenerics (method)) {  		text += addSpace ? "<> ()" : "<>()";  	}  	else {  		text += addSpace ? " ()" : "()";  	}  	skipChars = 0;  }  else {  	if (insertSemicolon) {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ();" : "<|>();";  			skipChars = addSpace ? 5 : 4;  		}  		else {  			text += addSpace ? " (|);" : "(|);";  			skipChars = 2;  		}  	}  	else {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ()" : "<|>()";  			skipChars = addSpace ? 4 : 3;  		}  		else {  			text += addSpace ? " (|)" : "(|)";  			skipChars = 1;  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (keyChar == '.') {  	if (RequireGenerics (method)) {  		text += addSpace ? "<> ()" : "<>()";  	}  	else {  		text += addSpace ? " ()" : "()";  	}  	skipChars = 0;  }  else {  	if (insertSemicolon) {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ();" : "<|>();";  			skipChars = addSpace ? 5 : 4;  		}  		else {  			text += addSpace ? " (|);" : "(|);";  			skipChars = 2;  		}  	}  	else {  		if (RequireGenerics (method)) {  			text += addSpace ? "<|> ()" : "<|>()";  			skipChars = addSpace ? 4 : 3;  		}  		else {  			text += addSpace ? " (|)" : "(|)";  			skipChars = 1;  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (insertSemicolon) {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ();" : "<|>();";  		skipChars = addSpace ? 5 : 4;  	}  	else {  		text += addSpace ? " (|);" : "(|);";  		skipChars = 2;  	}  }  else {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ()" : "<|>()";  		skipChars = addSpace ? 4 : 3;  	}  	else {  		text += addSpace ? " (|)" : "(|)";  		skipChars = 1;  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (insertSemicolon) {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ();" : "<|>();";  		skipChars = addSpace ? 5 : 4;  	}  	else {  		text += addSpace ? " (|);" : "(|);";  		skipChars = 2;  	}  }  else {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ()" : "<|>()";  		skipChars = addSpace ? 4 : 3;  	}  	else {  		text += addSpace ? " (|)" : "(|)";  		skipChars = 1;  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (insertSemicolon) {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ();" : "<|>();";  		skipChars = addSpace ? 5 : 4;  	}  	else {  		text += addSpace ? " (|);" : "(|);";  		skipChars = 2;  	}  }  else {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ()" : "<|>()";  		skipChars = addSpace ? 4 : 3;  	}  	else {  		text += addSpace ? " (|)" : "(|)";  		skipChars = 1;  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (insertSemicolon) {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ();" : "<|>();";  		skipChars = addSpace ? 5 : 4;  	}  	else {  		text += addSpace ? " (|);" : "(|);";  		skipChars = 2;  	}  }  else {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ()" : "<|>()";  		skipChars = addSpace ? 4 : 3;  	}  	else {  		text += addSpace ? " (|)" : "(|)";  		skipChars = 1;  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (insertSemicolon) {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ();" : "<|>();";  		skipChars = addSpace ? 5 : 4;  	}  	else {  		text += addSpace ? " (|);" : "(|);";  		skipChars = 2;  	}  }  else {  	if (RequireGenerics (method)) {  		text += addSpace ? "<|> ()" : "<|>()";  		skipChars = addSpace ? 4 : 3;  	}  	else {  		text += addSpace ? " (|)" : "(|)";  		skipChars = 1;  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (RequireGenerics (method)) {  	text += addSpace ? "<|> ();" : "<|>();";  	skipChars = addSpace ? 5 : 4;  }  else {  	text += addSpace ? " (|);" : "(|);";  	skipChars = 2;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (RequireGenerics (method)) {  	text += addSpace ? "<|> ();" : "<|>();";  	skipChars = addSpace ? 5 : 4;  }  else {  	text += addSpace ? " (|);" : "(|);";  	skipChars = 2;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (RequireGenerics (method)) {  	text += addSpace ? "<|> ();" : "<|>();";  	skipChars = addSpace ? 5 : 4;  }  else {  	text += addSpace ? " (|);" : "(|);";  	skipChars = 2;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: skipChars = addSpace ? 5 : 4;  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: skipChars = addSpace ? 5 : 4;  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: skipChars = 2;  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (RequireGenerics (method)) {  	text += addSpace ? "<|> ()" : "<|>()";  	skipChars = addSpace ? 4 : 3;  }  else {  	text += addSpace ? " (|)" : "(|)";  	skipChars = 1;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: if (RequireGenerics (method)) {  	text += addSpace ? "<|> ()" : "<|>()";  	skipChars = addSpace ? 4 : 3;  }  else {  	text += addSpace ? " (|)" : "(|)";  	skipChars = 1;  }  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: skipChars = addSpace ? 4 : 3;  
Magic Number,MonoDevelop.CSharp.Completion,MemberCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\MemberCompletionData.cs,InsertCompletionText,The following statement contains a magic number: skipChars = addSpace ? 4 : 3;  
Magic Number,MonoDevelop.CSharp.Completion,EventCreationCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\EventCreationCompletionData.cs,EventCreationCompletionData,The following statement contains a magic number: if (declaringType != null && declaringType.Members.Any (m => m.Name == this.DisplayText)) {  	for (int i = 1; i < 10000; i++) {  		if (!declaringType.Members.Any (m => m.Name == this.DisplayText + i)) {  			this.DisplayText = this.DisplayText + i.ToString ();  			break;  		}  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,EventCreationCompletionData,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Completion\EventCreationCompletionData.cs,EventCreationCompletionData,The following statement contains a magic number: for (int i = 1; i < 10000; i++) {  	if (!declaringType.Members.Any (m => m.Name == this.DisplayText + i)) {  		this.DisplayText = this.DisplayText + i.ToString ();  		break;  	}  }  
Magic Number,MonoDevelop.CodeGeneration,AbstractGenerateAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\AbstractGenerateAction.cs,Initialize,The following statement contains a magic number: column.AddAttribute (textRenderer' "text"' 2);  
Magic Number,MonoDevelop.CodeGeneration,AbstractGenerateAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\AbstractGenerateAction.cs,GenerateCode,The following statement contains a magic number: do {  	bool include = (bool)store.GetValue (iter' 0);  	if (include)  		includedMembers.Add (store.GetValue (iter' 3));  }  while (store.IterNext (ref iter));  
Magic Number,MonoDevelop.CodeGeneration,AbstractGenerateAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\AbstractGenerateAction.cs,GenerateCode,The following statement contains a magic number: if (include)  	includedMembers.Add (store.GetValue (iter' 3));  
Magic Number,MonoDevelop.CodeGeneration,AbstractGenerateAction,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\AbstractGenerateAction.cs,GenerateCode,The following statement contains a magic number: includedMembers.Add (store.GetValue (iter' 3));  
Magic Number,MonoDevelop.CodeGeneration,GenerateCodeWindow,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\GenerateCodeWindow.cs,TreeviewGenerateActionsSelectionChanged,The following statement contains a magic number: if (treeviewGenerateActions.Selection.GetSelected (out iter)) {  	ICodeGenerator codeGenerator = (ICodeGenerator)generateActionsStore.GetValue (iter' 2);  	labelDescription.Text = codeGenerator.GenerateDescription;  	curInitializeObject = codeGenerator.InitalizeSelection (options' treeviewSelection);  }  else {  	labelDescription.Text = "";  	curInitializeObject = null;  }  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringContext,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringContext.cs,Supports,The following statement contains a magic number: switch (project.TargetFramework.ClrVersion) {  case ClrVersion.Net_1_1:  	return version.Major > 1 || version.Major == 1 && version.Minor >= 1;  case ClrVersion.Net_2_0:  	return version.Major >= 2;  case ClrVersion.Clr_2_1:  	return version.Major > 2 || version.Major == 2 && version.Minor >= 1;  default:  	return true;  }  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringContext,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringContext.cs,Supports,The following statement contains a magic number: switch (project.TargetFramework.ClrVersion) {  case ClrVersion.Net_1_1:  	return version.Major > 1 || version.Major == 1 && version.Minor >= 1;  case ClrVersion.Net_2_0:  	return version.Major >= 2;  case ClrVersion.Clr_2_1:  	return version.Major > 2 || version.Major == 2 && version.Minor >= 1;  default:  	return true;  }  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringContext,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringContext.cs,Supports,The following statement contains a magic number: switch (project.TargetFramework.ClrVersion) {  case ClrVersion.Net_1_1:  	return version.Major > 1 || version.Major == 1 && version.Minor >= 1;  case ClrVersion.Net_2_0:  	return version.Major >= 2;  case ClrVersion.Clr_2_1:  	return version.Major > 2 || version.Major == 2 && version.Minor >= 1;  default:  	return true;  }  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringContext,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringContext.cs,Supports,The following statement contains a magic number: return version.Major >= 2;  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringContext,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringContext.cs,Supports,The following statement contains a magic number: return version.Major > 2 || version.Major == 2 && version.Minor >= 1;  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringContext,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringContext.cs,Supports,The following statement contains a magic number: return version.Major > 2 || version.Major == 2 && version.Minor >= 1;  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: ct1.Toggled += delegate (object o' Gtk.ToggledArgs args) {  	TreeIter iter;  	if (!entityStore.GetIterFromString (out iter' args.Path))  		return;  	entityStore.SetValue (iter' 2' !(bool)entityStore.GetValue (iter' 2));  };  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: ct1.Toggled += delegate (object o' Gtk.ToggledArgs args) {  	TreeIter iter;  	if (!entityStore.GetIterFromString (out iter' args.Path))  		return;  	entityStore.SetValue (iter' 2' !(bool)entityStore.GetValue (iter' 2));  };  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: entityStore.SetValue (iter' 2' !(bool)entityStore.GetValue (iter' 2));  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: entityStore.SetValue (iter' 2' !(bool)entityStore.GetValue (iter' 2));  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: treeviewEntities.AppendColumn ("IsChecked"' ct1' "active"' 2);  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: ct2.Toggled += delegate (object o' Gtk.ToggledArgs args) {  	TreeIter iter;  	if (!accessibiltyStore.GetIterFromString (out iter' args.Path))  		return;  	accessibiltyStore.SetValue (iter' 2' !(bool)accessibiltyStore.GetValue (iter' 2));  };  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: ct2.Toggled += delegate (object o' Gtk.ToggledArgs args) {  	TreeIter iter;  	if (!accessibiltyStore.GetIterFromString (out iter' args.Path))  		return;  	accessibiltyStore.SetValue (iter' 2' !(bool)accessibiltyStore.GetValue (iter' 2));  };  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: accessibiltyStore.SetValue (iter' 2' !(bool)accessibiltyStore.GetValue (iter' 2));  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: accessibiltyStore.SetValue (iter' 2' !(bool)accessibiltyStore.GetValue (iter' 2));  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,NameConventionEditRuleDialog,The following statement contains a magic number: treeviewAccessibility.AppendColumn ("IsChecked"' ct2' "active"' 2);  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,Apply,The following statement contains a magic number: if (entityStore.GetIterFirst (out iter)) {  	do {  		var entity = (AffectedEntity)entityStore.GetValue (iter' 1);  		var include = (bool)entityStore.GetValue (iter' 2);  		if (include)  			ae |= entity;  	}  	while (entityStore.IterNext (ref iter));  }  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,Apply,The following statement contains a magic number: do {  	var entity = (AffectedEntity)entityStore.GetValue (iter' 1);  	var include = (bool)entityStore.GetValue (iter' 2);  	if (include)  		ae |= entity;  }  while (entityStore.IterNext (ref iter));  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,Apply,The following statement contains a magic number: if (accessibiltyStore.GetIterFirst (out iter)) {  	do {  		var entity = (Modifiers)accessibiltyStore.GetValue (iter' 1);  		var include = (bool)accessibiltyStore.GetValue (iter' 2);  		if (include)  			mod |= entity;  	}  	while (accessibiltyStore.IterNext (ref iter));  }  
Magic Number,MonoDevelop.CSharp.Refactoring.CodeIssues,NameConventionEditRuleDialog,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\NameConventionEditRuleDialog.cs,Apply,The following statement contains a magic number: do {  	var entity = (Modifiers)accessibiltyStore.GetValue (iter' 1);  	var include = (bool)accessibiltyStore.GetValue (iter' 2);  	if (include)  		mod |= entity;  }  while (accessibiltyStore.IterNext (ref iter));  
Magic Number,MonoDevelop.SourceEditor,LanguageItemTooltipProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Tooltips\LanguageItemTooltipProvider.cs,GetRequiredPosition,The following statement contains a magic number: xalign = 0.5;  
Missing Default,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,GuessSemicolonInsertionOffset,The following switch statement is missing a default case: switch (ch) {  case '}':  	if (firstChar && !IsSemicolonalreadyPlaced (data' caretOffset))  		return false;  	break;  case '/':  	if (isInBlockComment) {  		isInBlockComment &= pos <= 0 || data.Document.GetCharAt (pos - 1) != '*';  	}  	else if (!isInString && !isInChar && pos + 1 < max) {  		char nextChar = data.Document.GetCharAt (pos + 1);  		if (nextChar == '/') {  			outOffset = lastNonWsOffset;  			return true;  		}  		if (!isInLineComment && nextChar == '*') {  			outOffset = lastNonWsOffset;  			return true;  		}  	}  	break;  case '\\':  	if (isInChar || (isInString && !isVerbatimString))  		pos++;  	break;  case '@':  	if (!(isInString || isInChar || isInLineComment || isInBlockComment) && pos + 1 < max && data.Document.GetCharAt (pos + 1) == '"') {  		isInString = true;  		isVerbatimString = true;  		pos++;  	}  	break;  case '"':  	if (!(isInChar || isInLineComment || isInBlockComment)) {  		if (isInString && isVerbatimString && pos + 1 < max && data.Document.GetCharAt (pos + 1) == '"') {  			pos++;  		}  		else {  			isInString = !isInString;  			isVerbatimString = false;  		}  	}  	break;  case '\'':  	if (!(isInString || isInLineComment || isInBlockComment))  		isInChar = !isInChar;  	break;  }  
Missing Default,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,DoPreInsertionSmartIndent,The following switch statement is missing a default case: switch (key) {  case Gdk.Key.BackSpace:  	SafeUpdateIndentEngine (textEditorData.Caret.Offset);  	HandleStringConcatinationDeletion (textEditorData.Caret.Offset - 1' 0);  	break;  case Gdk.Key.Delete:  	SafeUpdateIndentEngine (textEditorData.Caret.Offset);  	HandleStringConcatinationDeletion (textEditorData.Caret.Offset' textEditorData.Length);  	break;  }  
Missing Default,MonoDevelop.CSharp.Formatting,CSharpTextEditorIndentation,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Formatting\CSharpTextEditorIndentation.cs,DoPostInsertionSmartIndent,The following switch statement is missing a default case: switch (charInserted) {  case '}':  case ';':  	reIndent = true;  	break;  case '\n':  	if (FixLineStart (textEditorData' stateTracker' stateTracker.Location.Line))  		return;  	//newline always reindents unless it's had special handling  	reIndent = true;  	break;  }  
Missing Default,MonoDevelop.CSharp.Project,CodeGenerationPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Project\CodeGenerationPanel.cs,Store,The following switch statement is missing a default case: switch (comboDebug.Active) {  case DEBUG_FULL:  	configuration.DebugMode = true;  	if (!string.Equals (compilerParameters.DebugType' "full"' StringComparison.OrdinalIgnoreCase)) {  		compilerParameters.DebugType = "";  	}  	break;  case DEBUG_PDB_ONLY:  	configuration.DebugMode = true;  	compilerParameters.DebugType = "pdbonly";  	break;  case DEBUG_NONE:  	configuration.DebugMode = false;  	if (!string.Equals (compilerParameters.DebugType' "none"' StringComparison.OrdinalIgnoreCase)) {  		compilerParameters.DebugType = "";  	}  	break;  }  
Missing Default,MonoDevelop.CSharp,CSharpBindingCompilerManager,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpBindingCompilerManager.cs,Compile,The following switch statement is missing a default case: switch (ctarget) {  case CompileTarget.Exe:  	sb.AppendLine ("/t:exe");  	break;  case CompileTarget.WinExe:  	sb.AppendLine ("/t:winexe");  	break;  case CompileTarget.Library:  	sb.AppendLine ("/t:library");  	break;  }  
Missing Default,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,AppendType,The following switch statement is missing a default case: switch (type.Name) {  case "Object":  	sb.Append ("object");  	return;  case "Boolean":  	sb.Append ("bool");  	return;  case "Char":  	sb.Append ("char");  	return;  case "SByte":  	sb.Append ("sbyte");  	return;  case "Byte":  	sb.Append ("byte");  	return;  case "Int16":  	sb.Append ("short");  	return;  case "UInt16":  	sb.Append ("ushort");  	return;  case "Int32":  	sb.Append ("int");  	return;  case "UInt32":  	sb.Append ("uint");  	return;  case "Int64":  	sb.Append ("long");  	return;  case "UInt64":  	sb.Append ("ulong");  	return;  case "Single":  	sb.Append ("float");  	return;  case "Double":  	sb.Append ("double");  	return;  case "Decimal":  	sb.Append ("decimal");  	return;  case "String":  	sb.Append ("string");  	return;  case "Void":  	sb.Append ("void");  	return;  }  
Missing Default,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetTypeString,The following switch statement is missing a default case: switch (type.Name) {  case "Object":  	return "object";  case "Boolean":  	return "bool";  case "Char":  	return "char";  case "SByte":  	return "sbyte";  case "Byte":  	return "byte";  case "Int16":  	return "short";  case "UInt16":  	return "ushort";  case "Int32":  	return "int";  case "UInt32":  	return "uint";  case "Int64":  	return "long";  case "UInt64":  	return "ulong";  case "Single":  	return "float";  case "Double":  	return "double";  case "Decimal":  	return "decimal";  case "String":  	return "string";  case "Void":  	return "void";  }  
Missing Default,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,GetOperator,The following switch statement is missing a default case: switch (methodName) {  case "op_Subtraction":  case "op_UnaryNegation":  	return "-";  case "op_Addition":  case "op_UnaryPlus":  	return "+";  case "op_Multiply":  	return "*";  case "op_Division":  	return "/";  case "op_Modulus":  	return "%";  case "op_LogicalNot":  	return "!";  case "op_OnesComplement":  	return "~";  case "op_BitwiseAnd":  	return "&";  case "op_BitwiseOr":  	return "|";  case "op_ExclusiveOr":  	return "^";  case "op_LeftShift":  	return "<<";  case "op_RightShift":  	return ">>";  case "op_GreaterThan":  	return ">";  case "op_GreaterThanOrEqual":  	return ">=";  case "op_Equality":  	return "==";  case "op_Inequality":  	return "!=";  case "op_LessThan":  	return "<";  case "op_LessThanOrEqual":  	return "<=";  case "op_Increment":  	return "++";  case "op_Decrement":  	return "--";  case "op_True":  	return "true";  case "op_False":  	return "false";  case "op_Implicit":  	return "implicit";  case "op_Explicit":  	return "explicit";  }  
Missing Default,MonoDevelop.CSharp,CSharpAmbience,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\CSharpAmbience.cs,AppendModifiers,The following switch statement is missing a default case: switch (entity.Accessibility) {  case Accessibility.Internal:  	result.Append (settings.EmitModifiers ("internal"));  	break;  case Accessibility.ProtectedAndInternal:  	result.Append (settings.EmitModifiers ("protected internal"));  	break;  case Accessibility.ProtectedOrInternal:  	result.Append (settings.EmitModifiers ("internal protected"));  	break;  case Accessibility.Protected:  	result.Append (settings.EmitModifiers ("protected"));  	break;  case Accessibility.Private:  	result.Append (settings.EmitModifiers ("private"));  	break;  case Accessibility.Public:  	result.Append (settings.EmitModifiers ("public"));  	break;  }  
Missing Default,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendModifiers,The following switch statement is missing a default case: switch (entity.Accessibility) {  case Accessibility.Internal:  	if (entity.SymbolKind != SymbolKind.TypeDefinition)  		result.Append (Highlight ("internal "' colorStyle.KeywordModifiers));  	break;  case Accessibility.ProtectedAndInternal:  	result.Append (Highlight ("protected internal "' colorStyle.KeywordModifiers));  	break;  case Accessibility.ProtectedOrInternal:  	result.Append (Highlight ("internal protected "' colorStyle.KeywordModifiers));  	break;  case Accessibility.Protected:  	result.Append (Highlight ("protected "' colorStyle.KeywordModifiers));  	break;  case Accessibility.Private:  	// private is the default modifier - no need to show that  	//				result.Append (Highlight (" private"' colorStyle.KeywordModifiers));  	break;  case Accessibility.Public:  	result.Append (Highlight ("public "' colorStyle.KeywordModifiers));  	break;  }  
Missing Default,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,AppendAccessibility,The following switch statement is missing a default case: switch (entity.Accessibility) {  case Accessibility.Internal:  	result.Append (Highlight ("internal"' colorStyle.KeywordModifiers));  	break;  case Accessibility.ProtectedAndInternal:  	result.Append (Highlight ("protected internal"' colorStyle.KeywordModifiers));  	break;  case Accessibility.ProtectedOrInternal:  	result.Append (Highlight ("internal protected"' colorStyle.KeywordModifiers));  	break;  case Accessibility.Protected:  	result.Append (Highlight ("protected"' colorStyle.KeywordModifiers));  	break;  case Accessibility.Private:  	result.Append (Highlight ("private"' colorStyle.KeywordModifiers));  	break;  case Accessibility.Public:  	result.Append (Highlight ("public"' colorStyle.KeywordModifiers));  	break;  }  
Missing Default,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetTypeMarkup,The following switch statement is missing a default case: switch (t.Kind) {  case TypeKind.Class:  	result.Append (Highlight ("class "' colorStyle.KeywordDeclaration));  	break;  case TypeKind.Interface:  	result.Append (Highlight ("interface "' colorStyle.KeywordDeclaration));  	break;  case TypeKind.Struct:  	result.Append (Highlight ("struct "' colorStyle.KeywordDeclaration));  	break;  case TypeKind.Enum:  	result.Append (Highlight ("enum "' colorStyle.KeywordDeclaration));  	break;  }  
Missing Default,MonoDevelop.CSharp,SignatureMarkupCreator,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp\SignatureMarkupCreator.cs,GetConstraintTooltip,The following switch statement is missing a default case: switch (keyword) {  case "class":  	result.AddCategory ("Constraint"' "The type argument must be a reference type; this applies also to any class' interface' delegate' or array type.");  	break;  case "new":  	result.AddCategory ("Constraint"' "The type argument must have a public parameterless constructor. When used together with other constraints' the new() constraint must be specified last.");  	break;  case "struct":  	result.AddCategory ("Constraint"' "The type argument must be a value type. Any value type except Nullable can be specified. See Using Nullable Types (C# Programming Guide) for more information.");  	break;  }  
Missing Default,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,GetString,The following switch statement is missing a default case: switch (type.Kind) {  case TypeKind.Class:  	return GettextCatalog.GetString ("Class");  case TypeKind.Interface:  	return GettextCatalog.GetString ("Interface");  case TypeKind.Struct:  	return GettextCatalog.GetString ("Struct");  case TypeKind.Delegate:  	return GettextCatalog.GetString ("Delegate");  case TypeKind.Enum:  	return GettextCatalog.GetString ("Enum");  case TypeKind.Dynamic:  	return GettextCatalog.GetString ("Dynamic");  case TypeKind.TypeParameter:  	return GettextCatalog.GetString ("Type parameter");  case TypeKind.Array:  	return GettextCatalog.GetString ("Array");  case TypeKind.Pointer:  	return GettextCatalog.GetString ("Pointer");  }  
Missing Default,MonoDevelop.CSharp.Resolver,TextEditorResolverProvider,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Resolver\TextEditorResolverProvider.cs,GetString,The following switch statement is missing a default case: switch (member.SymbolKind) {  case SymbolKind.Field:  	var field = member as IField;  	if (field.IsConst)  		return GettextCatalog.GetString ("Constant");  	return GettextCatalog.GetString ("Field");  case SymbolKind.Property:  	return GettextCatalog.GetString ("Property");  case SymbolKind.Indexer:  	return GettextCatalog.GetString ("Indexer");  case SymbolKind.Event:  	return GettextCatalog.GetString ("Event");  }  
Missing Default,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,VisitComment,The following switch statement is missing a default case: switch (comment.CommentType) {  case SpecialsBag.CommentType.Multi:  	cmt.CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Block;  	cmt.OpenTag = "/*";  	cmt.ClosingTag = "*/";  	break;  case SpecialsBag.CommentType.Single:  	cmt.CommentType = MonoDevelop.Ide.TypeSystem.CommentType.SingleLine;  	cmt.OpenTag = "//";  	break;  case SpecialsBag.CommentType.Documentation:  	cmt.CommentType = MonoDevelop.Ide.TypeSystem.CommentType.Documentation;  	cmt.IsDocumentation = true;  	cmt.OpenTag = "///";  	break;  }  
Missing Default,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,VisitPreprocessorDirective,The following switch statement is missing a default case: switch (directive.Cmd) {  case Tokenizer.PreprocessorDirective.If:  	conditionalRegions.Push (new ConditionalRegion (directive.Arg));  	ifBlocks.Push (directive);  	ConditionalRegion.Start = loc;  	break;  case Tokenizer.PreprocessorDirective.Elif:  	CloseConditionBlock (new TextLocation (directive.EndLine' directive.EndCol));  	if (ConditionalRegion != null)  		ConditionalRegion.ConditionBlocks.Add (new ConditionBlock (directive.Arg' loc));  	break;  case Tokenizer.PreprocessorDirective.Else:  	CloseConditionBlock (new TextLocation (directive.EndLine' directive.EndCol));  	if (ConditionalRegion != null)  		ConditionalRegion.ElseBlock = new DomRegion (loc' TextLocation.Empty);  	break;  case Tokenizer.PreprocessorDirective.Endif:  	TextLocation endLoc = new TextLocation (directive.EndLine' directive.EndCol);  	CloseConditionBlock (endLoc);  	if (ConditionalRegion != null && !ConditionalRegion.ElseBlock.Begin.IsEmpty)  		ConditionalRegion.ElseBlock = new DomRegion (ConditionalRegion.ElseBlock.Begin' endLoc);  	AddCurRegion (result' directive.EndLine' directive.EndCol);  	if (ifBlocks.Count > 0) {  		var ifBlock = ifBlocks.Pop ();  		var ifRegion = new DomRegion (ifBlock.Line' ifBlock.Col' directive.EndLine' directive.EndCol);  		result.Add (new FoldingRegion ("#if " + ifBlock.Arg.Trim ()' ifRegion' FoldType.UserRegion' false));  		foreach (var d in elifBlocks) {  			var elIlfRegion = new DomRegion (d.Line' d.Col' directive.EndLine' directive.EndCol);  			result.Add (new FoldingRegion ("#elif " + ifBlock.Arg.Trim ()' elIlfRegion' FoldType.UserRegion' false));  		}  		if (elseBlock != null) {  			var elseBlockRegion = new DomRegion (elseBlock.Line' elseBlock.Col' elseBlock.Line' elseBlock.Col);  			result.Add (new FoldingRegion ("#else"' elseBlockRegion' FoldType.UserRegion' false));  		}  	}  	elseBlock = null;  	break;  case Tokenizer.PreprocessorDirective.Define:  	result.Add (new PreProcessorDefine (directive.Arg' loc));  	break;  case Tokenizer.PreprocessorDirective.Region:  	regions.Push (directive);  	break;  case Tokenizer.PreprocessorDirective.Endregion:  	if (regions.Count > 0) {  		var start = regions.Pop ();  		DomRegion dr = new DomRegion (start.Line' loc.Column' directive.EndLine' directive.EndCol);  		result.Add (new FoldingRegion (start.Arg' dr' FoldType.UserRegion' true));  	}  	break;  }  
Missing Default,MonoDevelop.CSharp.Parser,TypeSystemParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\TypeSystemProvider.cs,ConvertLanguageVersion,The following switch statement is missing a default case: switch (ver) {  case LangVersion.Default:  	return new Version (5' 0' 0' 0);  case LangVersion.ISO_1:  	return new Version (1' 0' 0' 0);  case LangVersion.ISO_2:  	return new Version (2' 0' 0' 0);  case LangVersion.Version3:  	return new Version (3' 0' 0' 0);  case LangVersion.Version4:  	return new Version (4' 0' 0' 0);  case LangVersion.Version5:  	return new Version (5' 0' 0' 0);  }  
Missing Default,MonoDevelop.CSharp.Parser,CSharpFoldingParser,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Parser\CSharpFoldingParser.cs,ReadToEol,The following switch statement is missing a default case: switch (*ptr) {  case '\n':  	if (lineEndPtr == lineBeginPtr)  		lineEndPtr = ptr;  	line++;  	column = 1;  	ptr++;  	fixed (char* startPtr = content) {  		return content.Substring ((int)(lineBeginPtr - startPtr)' (int)(lineEndPtr - lineBeginPtr));  	}  case '\r':  	lineEndPtr = ptr;  	if (ptr + 1 < endPtr && *(ptr + 1) == '\n')  		ptr++;  	goto case '\n';  }  
Missing Default,MonoDevelop.CodeGeneration,CodeGenerationService,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.CodeGeneration\ICodeGenerator.cs,CodeGenerationService,The following switch statement is missing a default case: switch (args.Change) {  case ExtensionChange.Add:  	codeGenerators.Add ((ICodeGenerator)args.ExtensionObject);  	break;  case ExtensionChange.Remove:  	codeGenerators.Remove ((ICodeGenerator)args.ExtensionObject);  	break;  }  
Missing Default,MonoDevelop.CSharp.Refactoring.CodeActions,MDRefactoringScript,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\MonoDevelop.CSharp.Refactoring.CodeActions\MDRefactoringScript.cs,InsertWithCursor,The following switch statement is missing a default case: switch (defaultPosition) {  case InsertPosition.Start:  	mode.CurIndex = 0;  	break;  case InsertPosition.End:  	mode.CurIndex = mode.InsertionPoints.Count - 1;  	break;  case InsertPosition.Before:  	for (int i = 0; i < mode.InsertionPoints.Count; i++) {  		if (mode.InsertionPoints [i].Location < loc)  			mode.CurIndex = i;  	}  	break;  case InsertPosition.After:  	for (int i = 0; i < mode.InsertionPoints.Count; i++) {  		if (mode.InsertionPoints [i].Location > loc) {  			mode.CurIndex = i;  			break;  		}  	}  	break;  }  
