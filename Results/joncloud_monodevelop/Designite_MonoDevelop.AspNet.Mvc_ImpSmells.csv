Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoDevelop.AspNet.Mvc,AspMvcProject,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\AspMvcProject.cs,GetCodeTemplates,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.AspNet.Mvc,AspMvcProject,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\AspMvcProject.cs,GetAspNetMvcVersion,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.AspNet.Mvc,RazorSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorSyntaxMode.cs,GetStyleForCSharpSymbol,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.AspNet.Mvc,RazorSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorSyntaxMode.cs,GetStyleForKeyword,Cyclomatic complexity of the method is 78
Complex Method,MonoDevelop.AspNet.Mvc.Gui,FolderCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\FolderNodeBuilderExtension.cs,AddView,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.AspNet.Mvc.Parser,RazorCSharpParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorCSharpParser.cs,CreateRazorHost,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.AspNet.Mvc.Parser,RazorSymbols,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorSymbols.cs,PossibleKeywordsAfter,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeFragmentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeFragmentState.cs,PushChar,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.AspNet.Mvc.StateEngine,RazorCommentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCommentState.cs,PushChar,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.AspNet.Mvc.StateEngine,RazorDirectiveState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorDirectiveState.cs,PushChar,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.AspNet.Mvc.StateEngine,RazorExpressionState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorExpressionState.cs,PushChar,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.AspNet.Mvc.StateEngine,RazorFreeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorFreeState.cs,PushChar,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.AspNet.Mvc.StateEngine,RazorSpeculativeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorSpeculativeState.cs,PushChar,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.AspNet.Mvc.StateEngine,RazorStatementState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorStatementState.cs,PushChar,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.RazorGenerator,PreprocessedRazorHost,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedRazorHost.cs,GenerateCode,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.RazorGenerator,RazorWriterHelper,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\RazorWriterHelper.cs,WriteCStyleStringLiteral,Cyclomatic complexity of the method is 32
Long Parameter List,MonoDevelop.AspNet.Mvc.Completion,IRazorCompletionBuilder,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Completion\IRazorCompletionBuilder.cs,HandleCompletion,The method has 5 parameters.
Long Parameter List,MonoDevelop.AspNet.Mvc.Completion,RazorCSharpCompletionBuilder,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Completion\RazorCSharpCompletionBuilder.cs,HandleCompletion,The method has 5 parameters.
Long Parameter List,MonoDevelop.AspNet.Mvc.Formatting,RazorCSharpFormatter,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Formatting\RazorCSharpFormatter.cs,FormatText,The method has 5 parameters.
Long Parameter List,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,BuildTreeChildren,The method has 5 parameters.
Long Parameter List,MonoDevelop.AspNet.Mvc.Parser,RazorCSharpParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorCSharpParser.cs,Parse,The method has 5 parameters.
Long Parameter List,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeFragmentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeFragmentState.cs,RazorCodeFragmentState,The method has 5 parameters.
Long Parameter List,MonoDevelop.AspNet.Mvc.StateEngine,RazorFreeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorFreeState.cs,RazorFreeState,The method has 10 parameters.
Long Parameter List,MonoDevelop.AspNet.Mvc.StateEngine,RazorStatementState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorStatementState.cs,PushChar,The method has 6 parameters.
Long Parameter List,MonoDevelop.RazorGenerator,RewritingRazorTemplateEngine,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\RewritingRazorTemplateEngine.cs,GenerateCodeCore,The method has 5 parameters.
Long Statement,MonoDevelop.AspNet.Mvc,RazorSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorSyntaxMode.cs,GetChunks,The length of the statement  "		if (symbol.Type == CSharpSymbolType.CharacterLiteral && prevSymbol != null && Char.IsLetterOrDigit (prevSymbol.Content.Last ())) { " is 130.
Long Statement,MonoDevelop.AspNet.Mvc,RazorSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorSyntaxMode.cs,GetStyleForChunk,The length of the statement  "		if ((!symbol.Keyword.HasValue && prevSymbol.Type == CSharpSymbolType.LessThan && (Char.IsLetterOrDigit (c) || c == '/')) || (prevSymbol.Type == CSharpSymbolType.Slash && currentState == State.InTag)) { " is 201.
Long Statement,MonoDevelop.AspNet.Mvc,RazorSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorSyntaxMode.cs,GetStyleForChunk,The length of the statement  "	if ((symbol.Keyword.HasValue || symbol.Type == CSharpSymbolType.IntegerLiteral || symbol.Type == CSharpSymbolType.RealLiteral) && IsInHtmlContext (symbol' off)) " is 160.
Long Statement,MonoDevelop.AspNet.Mvc,RazorSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorSyntaxMode.cs,GetStyleForRazorFragment,The length of the statement  "	if (symbol.Type == CSharpSymbolType.LeftParenthesis || symbol.Type == CSharpSymbolType.LeftBrace || RazorSymbols.IsDirective (symbol.Content)) " is 142.
Long Statement,MonoDevelop.AspNet.Mvc.Completion,RazorCompletionWidget,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Completion\RazorCSharpCompletionBuilder.cs,CreateCodeCompletionContext,The length of the statement  "	var savedCtx = realDocument.GetContent<ICompletionWidget> ().CreateCodeCompletionContext (realDocument.Editor.Caret.Offset + triggerOffset - docInfo.CaretPosition); " is 164.
Long Statement,MonoDevelop.AspNet.Mvc.Completion,RazorCompletionWidget,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Completion\RazorCSharpCompletionBuilder.cs,SetCompletionText,The length of the statement  "	realDocument.GetContent<ICompletionWidget> ().SetCompletionText (translatedCtx' partial_word' complete_word' wordOffset); " is 121.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,FolderCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\FolderNodeBuilderExtension.cs,AddController,The length of the statement  "				fileGood = MessageService.AskQuestion ("Overwrite file?"' String.Format ("The file '{0}' already exists.\n"' dialog.ControllerName) + "Would you like to overwrite it?"' AlertButton.OverwriteFile' AlertButton.Cancel) != AlertButton.Cancel; " is 238.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,FolderCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\FolderNodeBuilderExtension.cs,AddView,The length of the statement  "				fileGood = MessageService.AskQuestion ("Overwrite file?"' String.Format ("The file '{0}' already exists.\n"' dialog.ViewName) + "Would you like to overwrite it?"' AlertButton.OverwriteFile' AlertButton.Cancel) != AlertButton.Cancel; " is 232.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,OnParsedDocumentUpdated,The length of the statement  "		if (state is RazorState && CompletionWindowManager.IsVisible || (!updateNeeded && (state is RazorSpeculativeState || state is RazorExpressionState))) " is 149.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,KeyPress,The length of the statement  "	if (state is RazorCommentState || (previousChar != '@' && !(state is RazorState)) || keyChar == '@' || (previousChar == '@' && Char.IsLetterOrDigit (beforePrevious))) " is 166.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,CalculateCaretPosition,The length of the statement  "	int pos = HiddenDoc.Editor.Document.IndexOf (pattern' 0' HiddenDoc.Editor.Document.TextLength' StringComparison.Ordinal); " is 121.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,CalculateCaretPosition,The length of the statement  "		var newMap = new KeyValuePair<int' GeneratedCodeMapping> (key' new GeneratedCodeMapping (startRealOff + map.Value.CodeLength' 0' 0' 0' offDifference)); " is 151.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,CalculateCaretPosition,The length of the statement  "		codeFragment = new CodeFragment (newOff + newLine.Length' newMap.Value.StartOffset.Value' newOff + newLine.Length + offDifference); " is 131.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,HandleCodeCompletion,The length of the statement  "	char previousChar = defaultDocument.Editor.Caret.Offset > 1 ? defaultDocument.Editor.GetCharAt (defaultDocument.Editor.Caret.Offset - 2) : ' '; " is 143.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,HandleCodeCompletion,The length of the statement  "		var list = (CompletionDataList)completionBuilder.HandleCompletion (defaultDocument' completionContext' hiddenInfo' completionChar' ref triggerWordLength); " is 154.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,CodeCompletionCommand,The length of the statement  "	if (hiddenInfo != null && (isInCSharpContext || Tracker.Engine.CurrentState is RazorState) && !(Tracker.Engine.Nodes.Peek () is XElement)) { " is 140.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,BuildTreeChildren,The length of the statement  "			var blocksBetween = blocks.Where (n => n.Start.AbsoluteIndex >= doc.GetOffset (startLoc) && n.Start.AbsoluteIndex <= doc.GetOffset (endLoc)); " is 141.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,BuildTreeChildren,The length of the statement  "					Location = new DomRegion (doc.OffsetToLocation (block.Start.AbsoluteIndex)' doc.OffsetToLocation (block.Start.AbsoluteIndex + block.Length)) " is 140.
Long Statement,MonoDevelop.AspNet.Mvc.Gui,AddViewDialog,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\AddViewDialog.cs,MasterChanged,The length of the statement  "				if (placeholder.Contains ("main") || placeholder.Contains ("Main") || placeholder.Contains ("content") || placeholder.Contains ("Content")) " is 139.
Long Statement,MonoDevelop.AspNet.Mvc.Parser,RazorCSharpParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorCSharpParser.cs,CreateTextChange,The length of the statement  "		return new TextChange (lastChange.StartOffset' lastChange.AbsoluteLength' lastChange.Buffer' lastChange.StartOffset' 0' source); " is 128.
Long Statement,MonoDevelop.AspNet.Mvc.Parser,RazorCSharpParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorCSharpParser.cs,CreateTextChange,The length of the statement  "	return new TextChange (lastChange.StartOffset' 0' lastChange.Buffer' lastChange.StartOffset' lastChange.AbsoluteLength' source); " is 128.
Long Statement,MonoDevelop.AspNet.Mvc.Parser,RazorCSharpParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorCSharpParser.cs,ParseHtmlDocument,The length of the statement  "				comment.Region = new DomRegion (currentDocument.OffsetToLocation (span.Start.AbsoluteIndex - comment.OpenTag.Length)' currentDocument.OffsetToLocation (span.Start.AbsoluteIndex + span.Length + comment.ClosingTag.Length)); " is 221.
Long Statement,MonoDevelop.AspNet.Mvc.Parser,RazorCSharpParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorCSharpParser.cs,GetRazorFoldingRegions,The length of the statement  "			foldingRegions.Add (new FoldingRegion (RazorUtils.GetShortName (block)' new DomRegion (currentDocument.OffsetToLocation (block.Start.AbsoluteIndex)' currentDocument.OffsetToLocation (block.Start.AbsoluteIndex + block.Length)))); " is 228.
Long Statement,MonoDevelop.AspNet.Mvc.Parser,RazorCSharpParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorCSharpParser.cs,CreateCodeFile,The length of the statement  "	System.CodeDom.Compiler.CodeDomProvider provider = project != null ? project.LanguageBinding.GetCodeDomProvider () : new Microsoft.CSharp.CSharpCodeProvider (); " is 160.
Long Statement,MonoDevelop.AspNet.Mvc.Parser,RazorCSharpParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorCSharpParser.cs,CreateCompilation,The length of the statement  "	return new SimpleCompilation (new DefaultUnresolvedAssembly (Path.ChangeExtension (parsedCodeFile.FileName' ".dll"))' GetDefaultAssemblies ()); " is 143.
Long Statement,MonoDevelop.AspNet.Mvc.StateEngine,StateEngineService,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\StateEngineService.cs,EndCodeFragment,The length of the statement  "			LoggingService.LogError ("Error in Razor StateEngine parser: unexpected node at the top of the stack.\n" + "Expected: {0}\n{1}"' typeof(T)' context.ToString ()); " is 161.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedCSharpRazorCodeParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedCSharpRazorCodeParser.cs,ValueDirective,The length of the statement  "	BaseTypeDirective (string.Format ("The '{0}' directive must have a value"' keyword)' s => s != null ? valueParsed (s' location) : null); " is 136.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedTemplateCodeTransformers,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedTemplateCodeTransformer.cs,AddGeneratedTemplateClassAttribute,The length of the statement  "	generatedClass.CustomAttributes.Add (new CodeAttributeDeclaration (typeof(System.CodeDom.Compiler.GeneratedCodeAttribute).FullName' new CodeAttributeArgument (new CodePrimitiveExpression (tool))' new CodeAttributeArgument (new CodePrimitiveExpression (version.ToString ())))); " is 276.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedTemplateCodeTransformers,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedTemplateCodeTransformer.cs,InjectBaseClass,The length of the statement  "		AddComments (baseClass' false' "NOTE: this is the default generated helper class. You may choose to extract it to a separate file "' "in order to customize it or share it between multiple templates' and specify the template's base "' "class via the @inherits directive."); " is 272.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedTemplateCodeTransformers,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedTemplateCodeTransformer.cs,InjectBaseClass,The length of the statement  "		executeMethod.Attributes = (executeMethod.Attributes & (~MemberAttributes.AccessMask | ~MemberAttributes.Override)) | MemberAttributes.Private | MemberAttributes.Final; " is 168.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedAttributeRewriter,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedAttributeRewriter.cs,RewriteSpan,The length of the statement  "	b.CodeGenerator = old.ValueGenerator != null ? new PreprocessedLiteralAttributeCodeGenerator (old.Prefix' old.ValueGenerator) : new PreprocessedLiteralAttributeCodeGenerator (old.Prefix' old.Value); " is 198.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedAttributeRewriter,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedAttributeRewriter.cs,RewriteBlock,The length of the statement  "		b.CodeGenerator = new PreprocessedDynamicAttributeBlockCodeGenerator ((DynamicAttributeBlockCodeGenerator)b.CodeGenerator); " is 123.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedRazorHost,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedRazorHost.cs,GenerateCode,The length of the statement  "		errors.Add (new CompilerError (FullPath' error.Location.LineIndex + 1' error.Location.CharacterIndex + 1' null' error.Message)); " is 128.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedRazorHost,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedRazorHost.cs,MakeLineDirectivePathsRelative,The length of the statement  "				if (!line.StartsWith ("#line "' StringComparison.Ordinal) || (b = line.IndexOf ('"')) < 0 || (e = line.LastIndexOf ('"')) <= b) { " is 129.
Long Statement,MonoDevelop.RazorGenerator,PreprocessedAttributeBlockCodeGenerator,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedAttributeBlockCodeGenerator.cs,GenerateStartBlockCode,The length of the statement  "		sb.AppendFormat ("{0} ({1}' "' context.Host.GeneratedClassContext.WriteAttributeToMethodName' context.TargetWriterName); " is 120.
Long Statement,MonoDevelop.RazorGenerator,RazorWriterHelper,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\RazorWriterHelper.cs,SetExpressionRenderingMode,The length of the statement  "	context.GetType ().InvokeMember ("ExpressionRenderingMode"' BindingFlags.SetProperty | BindingFlags.NonPublic | BindingFlags.Instance' null' context' new object[] { " is 164.
Long Statement,MonoDevelop.RazorGenerator,RazorWriterHelper,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\RazorWriterHelper.cs,GetExpressionRenderingMode,The length of the statement  "	return (ExpressionRenderingMode)context.GetType ().InvokeMember ("ExpressionRenderingMode"' BindingFlags.GetProperty | BindingFlags.NonPublic | BindingFlags.Instance' null' context' null); " is 188.
Long Statement,RazorEditorParserFixed,RazorEditorParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\RazorEditorParser.cs,CheckForStructureChanges,The length of the statement  "		throw new ArgumentException (String.Format (CultureInfo.CurrentUICulture' RazorResources.Structure_Member_CannotBeNull' "Buffer"' "TextChange")' "change"); " is 155.
Long Statement,RazorEditorParserFixed,RazorEditorParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\RazorEditorParser.cs,CheckForStructureChanges,The length of the statement  "	RazorEditorTrace.TraceLine (RazorResources.Trace_EditorProcessedChange' Path.GetFileName (FileName)' changeString' elapsedMs.HasValue ? elapsedMs.Value.ToString () : "?"' result.ToString ()); " is 191.
Long Statement,RazorEditorParserFixed,RazorEditorParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\RazorEditorParser.cs,VerifyFlagsAreValid,The length of the statement  "	Debug.Assert (result.HasFlag (PartialParseResult.Accepted) || result.HasFlag (PartialParseResult.Rejected)' "Partial Parse result does not have either of Accepted or Rejected flags set"); " is 187.
Long Statement,RazorEditorParserFixed,RazorEditorParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\RazorEditorParser.cs,VerifyFlagsAreValid,The length of the statement  "	Debug.Assert (result.HasFlag (PartialParseResult.Rejected) || !result.HasFlag (PartialParseResult.SpanContextChanged)' "Partial Parse result was Accepted AND had SpanContextChanged flag set"); " is 192.
Long Statement,RazorEditorParserFixed,RazorEditorParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\RazorEditorParser.cs,VerifyFlagsAreValid,The length of the statement  "	Debug.Assert (result.HasFlag (PartialParseResult.Rejected) || !result.HasFlag (PartialParseResult.AutoCompleteBlock)' "Partial Parse result was Accepted AND had AutoCompleteBlock flag set"); " is 190.
Long Statement,RazorEditorParserFixed,RazorEditorParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\RazorEditorParser.cs,VerifyFlagsAreValid,The length of the statement  "	Debug.Assert (result.HasFlag (PartialParseResult.Accepted) || !result.HasFlag (PartialParseResult.Provisional)' "Partial Parse result was Rejected AND had Provisional flag set"); " is 178.
Long Statement,RazorEditorParserFixed,RazorEditorTrace,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\RazorEditorTrace.cs,IsEnabled,The length of the statement  "			Trace.WriteLine (String.Format (CultureInfo.CurrentCulture' RazorResources.Trace_Startup' enabled ? RazorResources.Trace_Enabled : RazorResources.Trace_Disabled)); " is 163.
Long Statement,RazorEditorParserFixed,RazorEditorTrace,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\RazorEditorTrace.cs,TraceLine,The length of the statement  "		Trace.WriteLine (String.Format (CultureInfo.CurrentCulture' RazorResources.Trace_Format' String.Format (CultureInfo.CurrentCulture' format' args))); " is 148.
Complex Conditional,MonoDevelop.AspNet.Mvc,RazorSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorSyntaxMode.cs,GetStyleForChunk,The conditional expression  "(!symbol.Keyword.HasValue && prevSymbol.Type == CSharpSymbolType.LessThan && (Char.IsLetterOrDigit (c) || c == '/')) || (prevSymbol.Type == CSharpSymbolType.Slash && currentState == State.InTag)"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc,RazorSyntaxMode,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorSyntaxMode.cs,GetStyleForChunk,The conditional expression  "(symbol.Keyword.HasValue || symbol.Type == CSharpSymbolType.IntegerLiteral || symbol.Type == CSharpSymbolType.RealLiteral) && IsInHtmlContext (symbol' off)"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,OnParsedDocumentUpdated,The conditional expression  "state is RazorState && CompletionWindowManager.IsVisible || (!updateNeeded && (state is RazorSpeculativeState || state is RazorExpressionState))"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,KeyPress,The conditional expression  "state is RazorCommentState || (previousChar != '@' && !(state is RazorState)) || keyChar == '@' || (previousChar == '@' && Char.IsLetterOrDigit (beforePrevious))"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,KeyPress,The conditional expression  "previousChar != '@' && n is XElement && !(state is RazorSpeculativeState) && !(state is RazorExpressionState)"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc.Gui,RazorCSharpEditorExtension,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\RazorCSharpEditorExtension.cs,CodeCompletionCommand,The conditional expression  "hiddenInfo != null && (isInCSharpContext || Tracker.Engine.CurrentState is RazorState) && !(Tracker.Engine.Nodes.Peek () is XElement)"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc.Gui,AddViewDialog,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\AddViewDialog.cs,MasterChanged,The conditional expression  "placeholder.Contains ("main") || placeholder.Contains ("Main") || placeholder.Contains ("content") || placeholder.Contains ("Content")"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeFragmentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeFragmentState.cs,PushChar,The conditional expression  "context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_'))"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc.StateEngine,RazorDirectiveState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorDirectiveState.cs,PushChar,The conditional expression  "CorrespondingDirective.Name == "using" && !(Char.IsLetterOrDigit (c) || c == ' ' || c == '=' || c == '.')"  is complex.
Complex Conditional,MonoDevelop.AspNet.Mvc.StateEngine,RazorFreeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorFreeState.cs,PushChar,The conditional expression  "context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_'))"  is complex.
Complex Conditional,MonoDevelop.RazorGenerator,RewritingRazorTemplateEngine,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\RewritingRazorTemplateEngine.cs,ParseTemplateCore,The conditional expression  "Host.DesignTimeMode || !results.Success || cancelToken.HasValue && cancelToken.Value.IsCancellationRequested"  is complex.
Virtual Method Call from Constructor,MonoDevelop.AspNet.Mvc.Gui,AddViewDialog,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\AddViewDialog.cs,AddViewDialog,The constructor "AddViewDialog" calls a virtual method "UpdateTypePanelSensitivity".
Virtual Method Call from Constructor,MonoDevelop.AspNet.Mvc.Gui,AddViewDialog,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\AddViewDialog.cs,AddViewDialog,The constructor "AddViewDialog" calls a virtual method "UpdateMasterPanelSensitivity".
Virtual Method Call from Constructor,MonoDevelop.AspNet.Mvc.Gui,AddViewDialog,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\AddViewDialog.cs,AddViewDialog,The constructor "AddViewDialog" calls a virtual method "Validate".
Virtual Method Call from Constructor,MonoDevelop.AspNet.Mvc.Gui,AddControllerDialog,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Gui\AddControllerDialog.cs,AddControllerDialog,The constructor "AddControllerDialog" calls a virtual method "Validate".
Virtual Method Call from Constructor,RazorEditorParserFixed,BackgroundParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorEditorParserFixed\BackgroundParser.cs,BackgroundParser,The constructor "BackgroundParser" calls a virtual method "OnResultsReady".
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeBlockState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeBlockState.cs,PushChar,The following statement contains a magic number: if (context.CurrentStateLength == 1) {  	bracketsBuilder.Clear ();  	var block = context.Nodes.FirstOrDefault (n => n is RazorCodeBlock);  	if (block == null) {  		var razorBlock = new RazorCodeBlock (context.LocationMinus (2));  		context.Nodes.Push (razorBlock);  		CorrespondingBlock = razorBlock;  	}  	else  		CorrespondingBlock = block as RazorCodeFragment;  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeBlockState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeBlockState.cs,PushChar,The following statement contains a magic number: if (block == null) {  	var razorBlock = new RazorCodeBlock (context.LocationMinus (2));  	context.Nodes.Push (razorBlock);  	CorrespondingBlock = razorBlock;  }  else  	CorrespondingBlock = block as RazorCodeFragment;  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeFragmentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeFragmentState.cs,PushChar,The following statement contains a magic number: switch (context.StateTag) {  case SOLIDUS:  	if (Char.IsLetter (c)) {  		rollback = String.Empty;  		return htmlClosingTagState;  	}  	context.StateTag = NONE;  	break;  case BRACKET:  	if (Char.IsLetter (c)) {  		rollback = String.Empty;  		return htmlTagState;  	}  	else if (c == '/')  		context.StateTag = SOLIDUS;  	else  		context.StateTag = NONE;  	break;  case TRANSITION:  	rollback = String.Empty;  	switch (c) {  	case '{':  		return EnsureSetAndAdopted<RazorCodeBlockState> (ref childBlockState);  	case '*':  		return razorCommentState;  	case '(':  		return expressionState;  	default:  		if (context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_')))  			return speculativeState;  		else  			context.StateTag = NONE;  		break;  	}  	break;  case INSIDE_PARENTHESES:  	if (c == '(')  		context.KeywordBuilder.Append (c);  	else if (c == ')') {  		if (context.KeywordBuilder.Length > 0)  			context.KeywordBuilder.Remove (0' 1);  		if (context.KeywordBuilder.Length == 0) {  			context.StateTag = NONE;  			IsInsideParentheses = false;  		}  	}  	break;  case NONE:  	switch (c) {  	case '(':  		context.KeywordBuilder.Append (c);  		context.StateTag = INSIDE_PARENTHESES;  		IsInsideParentheses = true;  		break;  	case '<':  		if (context.Nodes.Peek () is XElement || !Char.IsLetterOrDigit (previousChar)) {  			context.StateTag = BRACKET;  			IsInsideGenerics = false;  		}  		else  			IsInsideGenerics = true;  		break;  	case '>':  		IsInsideGenerics = false;  		break;  	case '@':  		context.StateTag = TRANSITION;  		break;  	default:  		previousChar = c;  		break;  	}  	break;  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeFragmentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeFragmentState.cs,PushChar,The following statement contains a magic number: switch (c) {  case '{':  	return EnsureSetAndAdopted<RazorCodeBlockState> (ref childBlockState);  case '*':  	return razorCommentState;  case '(':  	return expressionState;  default:  	if (context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_')))  		return speculativeState;  	else  		context.StateTag = NONE;  	break;  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeFragmentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeFragmentState.cs,PushChar,The following statement contains a magic number: if (context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_')))  	return speculativeState;  else  	context.StateTag = NONE;  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorCommentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCommentState.cs,PushChar,The following statement contains a magic number: if (context.CurrentStateLength == 1) {  	context.Nodes.Push (new RazorComment (context.LocationMinus (2)));  	return null;  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorCommentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCommentState.cs,PushChar,The following statement contains a magic number: context.Nodes.Push (new RazorComment (context.LocationMinus (2)));  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorExpressionState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorExpressionState.cs,PushChar,The following statement contains a magic number: if (context.CurrentStateLength == 1) {  	switch (c) {  	case '(':  		context.StateTag = NONE_EXPLICIT;  		context.Nodes.Push (new RazorExplicitExpression (context.LocationMinus (2)));  		return null;  	default:  		context.StateTag = NONE_IMPLICIT;  		if (!(context.PreviousState is RazorSpeculativeState))  			context.Nodes.Push (new RazorImplicitExpression (context.LocationMinus (2)));  		break;  	}  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorExpressionState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorExpressionState.cs,PushChar,The following statement contains a magic number: if (context.CurrentStateLength == 1) {  	switch (c) {  	case '(':  		context.StateTag = NONE_EXPLICIT;  		context.Nodes.Push (new RazorExplicitExpression (context.LocationMinus (2)));  		return null;  	default:  		context.StateTag = NONE_IMPLICIT;  		if (!(context.PreviousState is RazorSpeculativeState))  			context.Nodes.Push (new RazorImplicitExpression (context.LocationMinus (2)));  		break;  	}  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorExpressionState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorExpressionState.cs,PushChar,The following statement contains a magic number: switch (c) {  case '(':  	context.StateTag = NONE_EXPLICIT;  	context.Nodes.Push (new RazorExplicitExpression (context.LocationMinus (2)));  	return null;  default:  	context.StateTag = NONE_IMPLICIT;  	if (!(context.PreviousState is RazorSpeculativeState))  		context.Nodes.Push (new RazorImplicitExpression (context.LocationMinus (2)));  	break;  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorExpressionState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorExpressionState.cs,PushChar,The following statement contains a magic number: switch (c) {  case '(':  	context.StateTag = NONE_EXPLICIT;  	context.Nodes.Push (new RazorExplicitExpression (context.LocationMinus (2)));  	return null;  default:  	context.StateTag = NONE_IMPLICIT;  	if (!(context.PreviousState is RazorSpeculativeState))  		context.Nodes.Push (new RazorImplicitExpression (context.LocationMinus (2)));  	break;  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorExpressionState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorExpressionState.cs,PushChar,The following statement contains a magic number: context.Nodes.Push (new RazorExplicitExpression (context.LocationMinus (2)));  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorExpressionState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorExpressionState.cs,PushChar,The following statement contains a magic number: if (!(context.PreviousState is RazorSpeculativeState))  	context.Nodes.Push (new RazorImplicitExpression (context.LocationMinus (2)));  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorExpressionState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorExpressionState.cs,PushChar,The following statement contains a magic number: context.Nodes.Push (new RazorImplicitExpression (context.LocationMinus (2)));  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorFreeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorFreeState.cs,PushChar,The following statement contains a magic number: if (c == '@' && context.StateTag == FREE) {  	context.StateTag = TRANSITION;  	return null;  }  else if (context.StateTag == TRANSITION) {  	rollback = String.Empty;  	switch (c) {  	case '{':  		// Code block @{  		return CodeBlockState;  	case '*':  		// Comment @*  		return ServerCommentState;  	case '(':  		// Explicit expression @(  		return ExpressionState;  	default:  		// If char preceding @ was a letter or a digit' don't switch to expression' e.g. foo@bar.com  		if (context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_')))  			// Statement' directive or implicit expression  			return SpeculativeState;  		else  			context.StateTag = FREE;  		break;  	}  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorFreeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorFreeState.cs,PushChar,The following statement contains a magic number: if (context.StateTag == TRANSITION) {  	rollback = String.Empty;  	switch (c) {  	case '{':  		// Code block @{  		return CodeBlockState;  	case '*':  		// Comment @*  		return ServerCommentState;  	case '(':  		// Explicit expression @(  		return ExpressionState;  	default:  		// If char preceding @ was a letter or a digit' don't switch to expression' e.g. foo@bar.com  		if (context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_')))  			// Statement' directive or implicit expression  			return SpeculativeState;  		else  			context.StateTag = FREE;  		break;  	}  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorFreeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorFreeState.cs,PushChar,The following statement contains a magic number: switch (c) {  case '{':  	// Code block @{  	return CodeBlockState;  case '*':  	// Comment @*  	return ServerCommentState;  case '(':  	// Explicit expression @(  	return ExpressionState;  default:  	// If char preceding @ was a letter or a digit' don't switch to expression' e.g. foo@bar.com  	if (context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_')))  		// Statement' directive or implicit expression  		return SpeculativeState;  	else  		context.StateTag = FREE;  	break;  }  
Magic Number,MonoDevelop.AspNet.Mvc.StateEngine,RazorFreeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorFreeState.cs,PushChar,The following statement contains a magic number: if (context.CurrentStateLength <= 2 || (!Char.IsLetterOrDigit (previousChar) && (Char.IsLetter (c) || c == '_')))  	// Statement' directive or implicit expression  	return SpeculativeState;  else  	context.StateTag = FREE;  
Magic Number,MonoDevelop.RazorGenerator,PreprocessedCSharpRazorCodeParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedCSharpRazorCodeParser.cs,PropertyDirective,The following statement contains a magic number: ValueDirective (PropertyKeyword' true' (s' l) =>  {  	var split = GetArgumentWords (s);  	if (split.Length == 2) {  		return new PropertyCodeGenerator (split [0]' split [1]);  	}  	Context.OnError (l' string.Format ("The '{0}' directive requires exactly two arguments"' PropertyKeyword));  	return null;  });  
Magic Number,MonoDevelop.RazorGenerator,PreprocessedCSharpRazorCodeParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedCSharpRazorCodeParser.cs,PropertyDirective,The following statement contains a magic number: if (split.Length == 2) {  	return new PropertyCodeGenerator (split [0]' split [1]);  }  
Magic Number,MonoDevelop.RazorGenerator,PreprocessedCSharpRazorCodeParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedCSharpRazorCodeParser.cs,ClassDirective,The following statement contains a magic number: ValueDirective (ClassKeyword' true' (s' l) =>  {  	var split = GetArgumentWords (s);  	if (split.Length != 1 && split.Length != 2) {  		Context.OnError (l' string.Format ("The '{0}' directive requires one or two arguments"' ClassKeyword));  		return null;  	}  	string name = null' access = null;  	if (split [0] == "public" || split [0] == "internal") {  		access = split [0];  	}  	else {  		name = split [0];  	}  	if (split.Length == 2) {  		if (access == null) {  			string err = "If '{0}' directive has two arguments' the first must be 'public' or 'internal'.";  			Context.OnError (l' string.Format (err' ClassKeyword));  			return null;  		}  		name = split [1];  	}  	return new ClassNameCodeGenerator (access' name);  });  
Magic Number,MonoDevelop.RazorGenerator,PreprocessedCSharpRazorCodeParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedCSharpRazorCodeParser.cs,ClassDirective,The following statement contains a magic number: ValueDirective (ClassKeyword' true' (s' l) =>  {  	var split = GetArgumentWords (s);  	if (split.Length != 1 && split.Length != 2) {  		Context.OnError (l' string.Format ("The '{0}' directive requires one or two arguments"' ClassKeyword));  		return null;  	}  	string name = null' access = null;  	if (split [0] == "public" || split [0] == "internal") {  		access = split [0];  	}  	else {  		name = split [0];  	}  	if (split.Length == 2) {  		if (access == null) {  			string err = "If '{0}' directive has two arguments' the first must be 'public' or 'internal'.";  			Context.OnError (l' string.Format (err' ClassKeyword));  			return null;  		}  		name = split [1];  	}  	return new ClassNameCodeGenerator (access' name);  });  
Magic Number,MonoDevelop.RazorGenerator,PreprocessedCSharpRazorCodeParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedCSharpRazorCodeParser.cs,ClassDirective,The following statement contains a magic number: if (split.Length != 1 && split.Length != 2) {  	Context.OnError (l' string.Format ("The '{0}' directive requires one or two arguments"' ClassKeyword));  	return null;  }  
Magic Number,MonoDevelop.RazorGenerator,PreprocessedCSharpRazorCodeParser,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\PreprocessedCSharpRazorCodeParser.cs,ClassDirective,The following statement contains a magic number: if (split.Length == 2) {  	if (access == null) {  		string err = "If '{0}' directive has two arguments' the first must be 'public' or 'internal'.";  		Context.OnError (l' string.Format (err' ClassKeyword));  		return null;  	}  	name = split [1];  }  
Magic Number,MonoDevelop.RazorGenerator,RazorWriterHelper,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\RazorWriterHelper.cs,WriteCStyleStringLiteral,The following statement contains a magic number: for (int i = 0; i < literal.Length; i++) {  	switch (literal [i]) {  	case '\r':  		sb.Append ("\\r");  		break;  	case '\t':  		sb.Append ("\\t");  		break;  	case '\"':  		sb.Append ("\\\"");  		break;  	case '\'':  		sb.Append ("\\\'");  		break;  	case '\\':  		sb.Append ("\\\\");  		break;  	case '\0':  		sb.Append ("\\\0");  		break;  	case '\n':  		sb.Append ("\\n");  		break;  	case '\u2028':  	case '\u2029':  		// Inlined CSharpCodeGenerator.AppendEscapedChar  		sb.Append ("\\u");  		sb.Append (((int)literal [i]).ToString ("X4"' CultureInfo.InvariantCulture));  		break;  	default:  		sb.Append (literal [i]);  		break;  	}  	if (i > 0 && i % 80 == 0) {  		// If current character is a high surrogate and the following   		// character is a low surrogate' don't break them.   		// Otherwise when we write the string to a file' we might lose   		// the characters.  		if (Char.IsHighSurrogate (literal [i]) && (i < literal.Length - 1) && Char.IsLowSurrogate (literal [i + 1])) {  			sb.Append (literal [++i]);  		}  		sb.Append ("\" +");  		sb.Append (Environment.NewLine);  		sb.Append ('\"');  	}  }  
Magic Number,MonoDevelop.RazorGenerator,RazorWriterHelper,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\RazorWriterHelper.cs,WriteCStyleStringLiteral,The following statement contains a magic number: if (i > 0 && i % 80 == 0) {  	// If current character is a high surrogate and the following   	// character is a low surrogate' don't break them.   	// Otherwise when we write the string to a file' we might lose   	// the characters.  	if (Char.IsHighSurrogate (literal [i]) && (i < literal.Length - 1) && Char.IsLowSurrogate (literal [i + 1])) {  		sb.Append (literal [++i]);  	}  	sb.Append ("\" +");  	sb.Append (Environment.NewLine);  	sb.Append ('\"');  }  
Magic Number,MonoDevelop.RazorGenerator,FileUtil,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\RazorGenerator\FileUtil.cs,AbsoluteToRelativePath,The following statement contains a magic number: fixed (char* bPtr = baseDirectoryPath' aPtr = absPath) {  	var bEnd = bPtr + baseDirectoryPath.Length;  	var aEnd = aPtr + absPath.Length;  	char* lastStartA = aEnd;  	char* lastStartB = bEnd;  	int indx = 0;  	// search common base path  	var a = aPtr;  	var b = bPtr;  	while (a < aEnd) {  		if (*a != *b)  			break;  		if (IsSeparator (*a)) {  			indx++;  			lastStartA = a + 1;  			lastStartB = b;  		}  		a++;  		b++;  		if (b >= bEnd) {  			if (a >= aEnd || IsSeparator (*a)) {  				indx++;  				lastStartA = a + 1;  				lastStartB = b;  			}  			break;  		}  	}  	if (indx == 0)  		return absPath;  	if (lastStartA >= aEnd)  		return ".";  	// handle case a: some/path b: some/path/deeper...  	if (a >= aEnd) {  		if (IsSeparator (*b)) {  			lastStartA = a + 1;  			lastStartB = b;  		}  	}  	// look how many levels to go up into the base path  	int goUpCount = 0;  	while (lastStartB < bEnd) {  		if (IsSeparator (*lastStartB))  			goUpCount++;  		lastStartB++;  	}  	var size = goUpCount * 2 + goUpCount + aEnd - lastStartA;  	var result = new char[size];  	fixed (char* rPtr = result) {  		// go paths up  		var r = rPtr;  		for (int i = 0; i < goUpCount; i++) {  			*(r++) = '.';  			*(r++) = '.';  			*(r++) = Path.DirectorySeparatorChar;  		}  		// copy the remaining absulute path  		while (lastStartA < aEnd)  			*(r++) = *(lastStartA++);  	}  	return new string (result);  }  
Missing Default,MonoDevelop.AspNet.Mvc.Completion,RazorCompletionBuilderService,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Completion\IRazorCompletionBuilder.cs,RazorCompletionBuilderService,The following switch statement is missing a default case: switch (args.Change) {  case Mono.Addins.ExtensionChange.Add:  	builder.Add ((IRazorCompletionBuilder)args.ExtensionObject);  	break;  case Mono.Addins.ExtensionChange.Remove:  	builder.Remove ((IRazorCompletionBuilder)args.ExtensionObject);  	break;  }  
Missing Default,MonoDevelop.AspNet.Mvc.Parser,RazorSymbols,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\Parser\RazorSymbols.cs,PossibleKeywordsAfter,The following switch statement is missing a default case: switch (name) {  case "if":  case "else if":  	yield return "else if";  	yield return "else";  	break;  case "try":  case "catch":  	yield return "catch";  	yield return "finally";  	break;  }  
Missing Default,MonoDevelop.AspNet.Mvc.StateEngine,RazorCodeBlockState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCodeBlockState.cs,PushChar,The following switch statement is missing a default case: switch (c) {  case '{':  	return ParseOpeningBracket (c' context);  case '}':  	return ParseClosingBracket<RazorCodeBlock> (c' context' Parent);  }  
Missing Default,MonoDevelop.AspNet.Mvc.StateEngine,RazorCommentState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorCommentState.cs,PushChar,The following switch statement is missing a default case: switch (context.StateTag) {  case NOMATCH:  	if (c == '*')  		context.StateTag = STAR;  	break;  case STAR:  	if (c == '@') {  		StateEngineService.EndCodeFragment<RazorComment> (context);  		return Parent;  	}  	else  		context.StateTag = NOMATCH;  	break;  }  
Missing Default,MonoDevelop.AspNet.Mvc.StateEngine,RazorDirectiveState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorDirectiveState.cs,PushChar,The following switch statement is missing a default case: switch (c) {  case '{':  	if (context.StateTag != TRANSITION)  		return ParseOpeningBracket (c' context);  	break;  case '}':  	return ParseClosingBracket<RazorDirective> (c' context' Parent.Parent);  }  
Missing Default,MonoDevelop.AspNet.Mvc.StateEngine,RazorSpeculativeState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorSpeculativeState.cs,PushChar,The following switch statement is missing a default case: switch (context.StateTag) {  case UNKNOWN:  	context.KeywordBuilder.Append (c);  	key = context.KeywordBuilder.ToString ();  	if (!RazorSymbols.CanBeStatementOrDirective (key)) {  		context.Nodes.Push (new RazorImplicitExpression (context.LocationMinus (key.Length + 1)));  		rollback = String.Empty;  		return EnsureSetAndAdopted<RazorExpressionState> (ref expressionState);  	}  	if (key == "using")  		context.StateTag = USING;  	else if (RazorSymbols.IsDirective (key))  		context.StateTag = POSSIBLE_DIRECTIVE;  	else if (RazorSymbols.IsStatement (key))  		context.StateTag = POSSIBLE_STATEMENT;  	break;  // Using can be either statement: @using (resource) {}' or directive: @using System.IO  case USING:  	if (c == '(' || c == '\n')  		return SwitchToStatement (context' ref rollback);  	else if (Char.IsLetterOrDigit (c))  		return SwitchToDirective (context' ref rollback);  	context.KeywordBuilder.Append (c);  	break;  case POSSIBLE_STATEMENT:  	if (Char.IsWhiteSpace (c) || c == '{' || c == '(')  		return SwitchToStatement (context' ref rollback);  	context.KeywordBuilder.Append (c);  	context.StateTag = UNKNOWN;  	break;  case POSSIBLE_DIRECTIVE:  	if (Char.IsWhiteSpace (c) || c == '{')  		return SwitchToDirective (context' ref rollback);  	context.KeywordBuilder.Append (c);  	context.StateTag = UNKNOWN;  	break;  }  
Missing Default,MonoDevelop.AspNet.Mvc.StateEngine,RazorStatementState,C:\repos\joncloud_monodevelop\main\src\addins\AspNet\MonoDevelop.AspNet.Mvc\StateEngine\RazorStatementState.cs,PushChar,The following switch statement is missing a default case: switch (c) {  case '{':  	if (context.StateTag != TRANSITION)  		return ParseOpeningBracket (c' context);  	break;  case '}':  	return ParseClosingBracket<RazorStatement> (c' context' Parent.Parent);  }  
