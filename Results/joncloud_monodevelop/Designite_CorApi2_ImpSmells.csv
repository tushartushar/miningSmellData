Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,SetValue,The method has 106 lines of code.
Long Method,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The method has 116 lines of code.
Long Method,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,ReadType,The method has 102 lines of code.
Complex Method,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,SetValue,Cyclomatic complexity of the method is 65
Complex Method,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,Cyclomatic complexity of the method is 48
Complex Method,Microsoft.Samples.Debugging.CorMetadata,CorMetadataImport,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetMemberRefName,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,ReadType,Cyclomatic complexity of the method is 43
Complex Method,Microsoft.Samples.Debugging.CorMetadata,MetadataFieldInfo,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataFieldInfo.cs,ParseDefaultValue,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Samples.Debugging.CorSymbolStore,SymMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetSequencePoints,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Samples.Debugging.CorSymbolStore,SymMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetSourceStartEnd,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorDebugger,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateProcess,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorDebugger,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateProcess,The method has 11 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,NativeMethods,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CoCreateInstance,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,NativeMethods,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,DuplicateHandle,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,NativeMethods,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ReadFile,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorStepCompleteEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorStepCompleteEventArgs,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorLogMessageEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorLogMessageEventArgs,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorLogMessageEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorLogMessageEventArgs,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorLogSwitchEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorLogSwitchEventArgs,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorLogSwitchEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorLogSwitchEventArgs,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorEditAndContinueRemapEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorEditAndContinueRemapEventArgs,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorBreakpointSetErrorEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorBreakpointSetErrorEventArgs,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorFunctionRemapOpportunityEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorFunctionRemapOpportunityEventArgs,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorFunctionRemapOpportunityEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorFunctionRemapOpportunityEventArgs,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorExceptionUnwind2EventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorExceptionUnwind2EventArgs,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorException2EventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorException2EventArgs,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorException2EventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CorException2EventArgs,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,LogMessage,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,LogSwitch,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,FunctionRemapOpportunity,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,Exception,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorDebug,CorEval,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Eval.cs,NewArray,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataMethodInfo,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,Invoke,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,ReadMethodSignature,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataFieldInfo,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataFieldInfo.cs,SetValue,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataParameterInfo,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataParameterInfo.cs,MetadataParameterInfo,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataPropertyInfo,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataPropertyInfo.cs,GetValue,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataPropertyInfo,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataPropertyInfo.cs,SetValue,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,GetPropertyImpl,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,GetMethodImpl,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,GetConstructorImpl,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,InvokeMember,The method has 8 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymbolBinder2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\ISymBinder2.cs,GetReaderForFile,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymbolEnCMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\ISymEncMethod.cs,GetLineFromOffset,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymbolWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\ISymWriter2.cs,Initialize,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymbolWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\ISymWriter2.cs,DefineLocalVariable,The method has 9 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymbolWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\ISymWriter2.cs,DefineGlobalVariable,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedBinder2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symbinder.cs,GetReaderForFile2,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedBinder3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symbinder.cs,GetReaderForFile2,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedBinder3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symbinder.cs,GetReaderFromCallback,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolBinder,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symbinder.cs,GetReaderForFile,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedDocument,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymDocument.cs,GetSourceRange,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetRanges,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetSequencePoints,The method has 8 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymENCUnmanagedMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetLineFromOffset,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetSequencePoints,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetLineFromOffset,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedReader,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymReader.cs,GetDocument,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedReader,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymReader.cs,GetSymAttribute,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedReader,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymReader.cs,GetMethodsFromDocumentPosition,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineDocument,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable,The method has 10 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineParameter,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineField,The method has 9 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineGlobalVariable,The method has 8 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,SetMethodSourceRange,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineSequencePoints,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,Initialize2,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineDocument,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable,The method has 10 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineParameter,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineField,The method has 9 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineGlobalVariable,The method has 8 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,SetMethodSourceRange,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineSequencePoints,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,Initialize2,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable2,The method has 9 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter2,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineGlobalVariable2,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineDocument,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable,The method has 10 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineParameter,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineField,The method has 9 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineGlobalVariable,The method has 8 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,SetMethodSourceRange,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineSequencePoints,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,Initialize2,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable2,The method has 9 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,ISymUnmanagedWriter3,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineGlobalVariable2,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,Initialize,The method has 5 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineSequencePoints,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable,The method has 9 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineParameter,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineField,The method has 8 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineGlobalVariable,The method has 7 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,SetMethodSourceRange,The method has 6 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable,The method has 9 parameters.
Long Parameter List,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineGlobalVariable,The method has 7 parameters.
Long Statement,Microsoft.Samples.Debugging.CorDebug,CorDebugger,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,GetDebuggerVersionFromPid,The length of the statement  "	using (ProcessSafeHandle ph = NativeMethods.OpenProcess ((int)(NativeMethods.ProcessAccessOptions.PROCESS_VM_READ | NativeMethods.ProcessAccessOptions.PROCESS_QUERY_INFORMATION | NativeMethods.ProcessAccessOptions.PROCESS_DUP_HANDLE | NativeMethods.ProcessAccessOptions.SYNCHRONIZE)' false' // inherit handle " is 308.
Long Statement,Microsoft.Samples.Debugging.CorDebug,CorDebugger,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateHandles,The length of the statement  "	if (!NativeMethods.DuplicateHandle (curProc' outReadPipeTmp' curProc' out outReadPipe' 0' false' NativeMethods.DUPLICATE_SAME_ACCESS)) " is 134.
Long Statement,Microsoft.Samples.Debugging.CorDebug,CorDebugger,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateHandles,The length of the statement  "	if (!NativeMethods.DuplicateHandle (curProc' errorReadPipeTmp' curProc' out errorReadPipe' 0' false' NativeMethods.DUPLICATE_SAME_ACCESS)) " is 138.
Long Statement,Microsoft.Samples.Debugging.CorDebug,CorDebugger,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateProcess,The length of the statement  "			commandLine = String.Format (CultureInfo.InvariantCulture' "\"{0}\" {1}"' commandLine.Substring (0' firstSpace)' commandLine.Substring (firstSpace' commandLine.Length - firstSpace)); " is 182.
Long Statement,Microsoft.Samples.Debugging.CorDebug,CorDebugger,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateProcess,The length of the statement  "	m_debugger.CreateProcess (applicationName' commandLine' processAttributes' threadAttributes' inheritHandles ? 1 : 0' (uint)creationFlags' environment' currentDirectory' startupInfo' processInformation' debuggingFlags' out proc); " is 228.
Long Statement,Microsoft.Samples.Debugging.CorDebug,CorDebugger,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,InitFromVersion,The length of the statement  "		throw new ArgumentException ("Can't debug a version 1 CLR process (\"" + debuggerVersion + "\").  Run application in a version 2 CLR' or use a version 1 debugger instead."); " is 173.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,Breakpoint,The length of the statement  "	HandleEvent (ManagedCallbackType.OnBreakpoint' new CorBreakpointEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' breakpoint == null ? null : new CorFunctionBreakpoint ((ICorDebugFunctionBreakpoint)breakpoint)' ManagedCallbackType.OnBreakpoint)); " is 312.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,StepComplete,The length of the statement  "	HandleEvent (ManagedCallbackType.OnStepComplete' new CorStepCompleteEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' stepper == null ? null : new CorStepper (stepper)' stepReason' ManagedCallbackType.OnStepComplete)); " is 284.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,Break,The length of the statement  "	HandleEvent (ManagedCallbackType.OnBreak' new CorThreadEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' ManagedCallbackType.OnBreak)); " is 201.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,Exception,The length of the statement  "	HandleEvent (ManagedCallbackType.OnException' new CorExceptionEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' !(unhandled == 0)' ManagedCallbackType.OnException)); " is 231.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,EvalComplete,The length of the statement  "	HandleEvent (ManagedCallbackType.OnEvalComplete' new CorEvalEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' eval == null ? null : new CorEval (eval)' ManagedCallbackType.OnEvalComplete)); " is 255.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,EvalException,The length of the statement  "	HandleEvent (ManagedCallbackType.OnEvalException' new CorEvalEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' eval == null ? null : new CorEval (eval)' ManagedCallbackType.OnEvalException)); " is 257.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateProcess,The length of the statement  "	HandleEvent (ManagedCallbackType.OnCreateProcess' new CorProcessEventArgs (process == null ? null : CorProcess.GetCorProcess (process)' ManagedCallbackType.OnCreateProcess)); " is 174.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ExitProcess,The length of the statement  "	HandleEvent (ManagedCallbackType.OnProcessExit' new CorProcessEventArgs (process == null ? null : CorProcess.GetCorProcess (process)' ManagedCallbackType.OnProcessExit)); " is 170.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateThread,The length of the statement  "	HandleEvent (ManagedCallbackType.OnCreateThread' new CorThreadEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' ManagedCallbackType.OnCreateThread)); " is 215.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ExitThread,The length of the statement  "	HandleEvent (ManagedCallbackType.OnThreadExit' new CorThreadEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' ManagedCallbackType.OnThreadExit)); " is 211.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,LoadModule,The length of the statement  "	HandleEvent (ManagedCallbackType.OnModuleLoad' new CorModuleEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' managedModule == null ? null : new CorModule (managedModule)' ManagedCallbackType.OnModuleLoad)); " is 225.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,UnloadModule,The length of the statement  "	HandleEvent (ManagedCallbackType.OnModuleUnload' new CorModuleEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' managedModule == null ? null : new CorModule (managedModule)' ManagedCallbackType.OnModuleUnload)); " is 229.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,LoadClass,The length of the statement  "	HandleEvent (ManagedCallbackType.OnClassLoad' new CorClassEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' c == null ? null : new CorClass (c)' ManagedCallbackType.OnClassLoad)); " is 197.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,UnloadClass,The length of the statement  "	HandleEvent (ManagedCallbackType.OnClassUnload' new CorClassEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' c == null ? null : new CorClass (c)' ManagedCallbackType.OnClassUnload)); " is 201.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,DebuggerError,The length of the statement  "	HandleEvent (ManagedCallbackType.OnDebuggerError' new CorDebuggerErrorEventArgs (process == null ? null : CorProcess.GetCorProcess (process)' errorHR' (int)errorCode' ManagedCallbackType.OnDebuggerError)); " is 205.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,LogMessage,The length of the statement  "	HandleEvent (ManagedCallbackType.OnLogMessage' new CorLogMessageEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' level' logSwitchName' message' ManagedCallbackType.OnLogMessage)); " is 246.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,LogSwitch,The length of the statement  "	HandleEvent (ManagedCallbackType.OnLogSwitch' new CorLogSwitchEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' level' (int)reason' logSwitchName' parentName' ManagedCallbackType.OnLogSwitch)); " is 259.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,CreateAppDomain,The length of the statement  "	HandleEvent (ManagedCallbackType.OnCreateAppDomain' new CorAppDomainEventArgs (process == null ? null : CorProcess.GetCorProcess (process)' appDomain == null ? null : new CorAppDomain (appDomain)' ManagedCallbackType.OnCreateAppDomain)); " is 237.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ExitAppDomain,The length of the statement  "	HandleEvent (ManagedCallbackType.OnAppDomainExit' new CorAppDomainEventArgs (process == null ? null : CorProcess.GetCorProcess (process)' appDomain == null ? null : new CorAppDomain (appDomain)' ManagedCallbackType.OnAppDomainExit)); " is 233.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,LoadAssembly,The length of the statement  "	HandleEvent (ManagedCallbackType.OnAssemblyLoad' new CorAssemblyEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' assembly == null ? null : new CorAssembly (assembly)' ManagedCallbackType.OnAssemblyLoad)); " is 223.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,UnloadAssembly,The length of the statement  "	HandleEvent (ManagedCallbackType.OnAssemblyUnload' new CorAssemblyEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' assembly == null ? null : new CorAssembly (assembly)' ManagedCallbackType.OnAssemblyUnload)); " is 227.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ControlCTrap,The length of the statement  "	HandleEvent (ManagedCallbackType.OnControlCTrap' new CorProcessEventArgs (process == null ? null : CorProcess.GetCorProcess (process)' ManagedCallbackType.OnControlCTrap)); " is 172.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,NameChange,The length of the statement  "	HandleEvent (ManagedCallbackType.OnNameChange' new CorThreadEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' ManagedCallbackType.OnNameChange)); " is 211.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,UpdateModuleSymbols,The length of the statement  "	HandleEvent (ManagedCallbackType.OnUpdateModuleSymbols' new CorUpdateModuleSymbolsEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' managedModule == null ? null : new CorModule (managedModule)' stream' ManagedCallbackType.OnUpdateModuleSymbols)); " is 264.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,BreakpointSetError,The length of the statement  "	HandleEvent (ManagedCallbackType.OnBreakpointSetError' new CorBreakpointSetErrorEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' null' (int)errorCode' ManagedCallbackType.OnBreakpointSetError)); " is 261.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,FunctionRemapOpportunity,The length of the statement  "	HandleEvent (ManagedCallbackType.OnFunctionRemapOpportunity' new CorFunctionRemapOpportunityEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' oldFunction == null ? null : new CorFunction (oldFunction)' newFunction == null ? null : new CorFunction (newFunction)' (int)oldILoffset' ManagedCallbackType.OnFunctionRemapOpportunity)); " is 395.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,FunctionRemapComplete,The length of the statement  "	HandleEvent (ManagedCallbackType.OnFunctionRemapComplete' new CorFunctionRemapCompleteEventArgs (appDomain == null ? null : new CorAppDomain (appDomain)' thread == null ? null : new CorThread (thread)' managedFunction == null ? null : new CorFunction (managedFunction)' ManagedCallbackType.OnFunctionRemapComplete)); " is 316.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,Exception,The length of the statement  "	HandleEvent (ManagedCallbackType.OnException2' new CorException2EventArgs (ad == null ? null : new CorAppDomain (ad)' thread == null ? null : new CorThread (thread)' frame == null ? null : new CorFrame (frame)' (int)offset' eventType' (int)flags' ManagedCallbackType.OnException2)); " is 282.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ExceptionUnwind,The length of the statement  "	HandleEvent (ManagedCallbackType.OnExceptionUnwind2' new CorExceptionUnwind2EventArgs (ad == null ? null : new CorAppDomain (ad)' thread == null ? null : new CorThread (thread)' eventType' (int)flags' ManagedCallbackType.OnExceptionUnwind2)); " is 242.
Long Statement,Microsoft.Samples.Debugging.CorDebug,ManagedCallbackBase,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,MDANotification,The length of the statement  "	HandleEvent (ManagedCallbackType.OnMDANotification' new CorMDAEventArgs (c' thread == null ? null : new CorThread (thread)' p' ManagedCallbackType.OnMDANotification)); " is 167.
Long Statement,Microsoft.Samples.Debugging.CorDebug,CorThread,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Thread.cs,GetActiveFunctions,The length of the statement  "		caf [i] = new CorActiveFunction ((int)afunctions [i].ilOffset' new CorFunction ((ICorDebugFunction)afunctions [i].pFunction)' afunctions [i].pModule == null ? null : new CorModule (afunctions [i].pModule)); " is 206.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,CorMetadataImport,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetMemberRefName,The length of the statement  "	m_importer.GetMemberRefProps ((uint)token' out classToken' member' member.Capacity' out size' out ppvSigBlob' out pbSig); " is 121.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,MetadataMethodInfo,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetParameters,The length of the statement  "			MetadataParameterInfo mp = new MetadataParameterInfo (m_importer' paramToken' this' DeclaringType' m_argTypes [nArg++]); " is 120.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetGenericArgumentNames,The length of the statement  "				importer2.GetGenericParamProps (genTypeToken' out genIndex' out genFlags' out ptkOwner' out ptkKind' null' 0' out genArgNameSize); " is 130.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetGenericArgumentNames,The length of the statement  "				importer2.GetGenericParamProps (genTypeToken' out genIndex' out genFlags' out ptkOwner' out ptkKind' genArgName' (ulong)genArgName.Capacity' out genArgNameSize); " is 161.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetDebugAttributes,The length of the statement  "	object attr = MetadataHelperFunctions.GetCustomAttribute (importer' token' typeof(System.Diagnostics.DebuggerTypeProxyAttribute)); " is 130.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetDebugAttributes,The length of the statement  "	attr = MetadataHelperFunctions.GetCustomAttribute (importer' token' typeof(System.Diagnostics.DebuggerDisplayAttribute)); " is 121.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetDebugAttributes,The length of the statement  "	attr = MetadataHelperFunctions.GetCustomAttribute (importer' token' typeof(System.Diagnostics.DebuggerBrowsableAttribute)); " is 123.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,GetDebugAttributes,The length of the statement  "	attr = MetadataHelperFunctions.GetCustomAttribute (importer' token' typeof(System.Runtime.CompilerServices.CompilerGeneratedAttribute)); " is 136.
Long Statement,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,GetEnumUnderlyingType,The length of the statement  "		importer.GetFieldProps (mdFieldDef' out classToken' null' 0' out nameSize' out fieldAttributes' out ppvSig' out size' out cPlusTypeFlab' out ppValue' out pcchValue); " is 165.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymbolBinder,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symbinder.cs,GetReaderForFile,The length of the statement  "		int hr = ((ISymUnmanagedBinder2)m_binder).GetReaderForFile2 (uImporter' fileName' searchPath' (int)searchPolicy' out symReader); " is 128.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymbolBinder,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symbinder.cs,GetReaderForFile,The length of the statement  "		int hr = ((ISymUnmanagedBinder3)m_binder).GetReaderFromCallback (uImporter' fileName' searchPath' (int)searchPolicy' callback' out reader); " is 139.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetSequencePoints,The length of the statement  "	m_unmanagedMethod.GetSequencePoints (documents.Length' out cPoints' offsets' unmanagedDocuments' lines' columns' endLines' endColumns); " is 135.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetLineFromOffset,The length of the statement  "	((ISymENCUnmanagedMethod)m_unmanagedMethod).GetLineFromOffset (dwOffset' out line' out pcolumn' out pendLine' out pendColumn' out pdwStartOffset); " is 146.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymReader,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymReader.cs,GetMethodFromDocumentPosition,The length of the statement  "	m_reader.GetMethodFromDocumentPosition (((SymbolDocument)document).InternalDocument' line' column' out unmanagedMethod); " is 120.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymReader,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymReader.cs,GetMethodsFromDocumentPosition,The length of the statement  "	m_reader.GetMethodsFromDocumentPosition (((SymbolDocument)document).InternalDocument' line' column' 0' out count' null); " is 120.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymReader,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymReader.cs,GetMethodsFromDocumentPosition,The length of the statement  "	m_reader.GetMethodsFromDocumentPosition (((SymbolDocument)document).InternalDocument' line' column' count' out count' unmanagedMethods); " is 136.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineSequencePoints,The length of the statement  "	m_target.DefineSequencePoints (((SymDocumentWriter)document).InternalDocumentWriter' offsets.Length' offsets' lines' columns' endLines' endColumns); " is 148.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable,The length of the statement  "	m_target.DefineLocalVariable (name' (int)attributes' signature.Length' signature' (int)addressKind' addr1' addr2' addr3' startOffset' endOffset); " is 145.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineField,The length of the statement  "	m_target.DefineField (parent' name' (int)attributes' signature.Length' signature' (int)addressKind' addr1' addr2' addr3); " is 121.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineGlobalVariable,The length of the statement  "	m_target.DefineGlobalVariable (name' (int)attributes' signature.Length' signature' (int)addressKind' addr1' addr2' addr3); " is 122.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,SetMethodSourceRange,The length of the statement  "	m_target.SetMethodSourceRange (((SymDocumentWriter)startDoc).InternalDocumentWriter' startLine' startColumn' ((SymDocumentWriter)endDoc).InternalDocumentWriter' endLine' endColumn); " is 181.
Long Statement,Microsoft.Samples.Debugging.CorSymbolStore,SymbolWriter,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymWriter.cs,DefineLocalVariable,The length of the statement  "	((ISymUnmanagedWriter2)m_target).DefineLocalVariable2 (name' attributes' sigToken' addressKind' addr1' addr2' addr3' startOffset' endOffset); " is 141.
Empty Catch Block,Microsoft.Samples.Debugging.CorDebug,CorProcess,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Process.cs,GetThread,The method has an empty catch block.
Empty Catch Block,Microsoft.Samples.Debugging.CorDebug,CorProcess,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Process.cs,ReadOutput,The method has an empty catch block.
Empty Catch Block,Microsoft.Samples.Debugging.CorDebug,CorHandleValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,GetProperties,The method has an empty catch block.
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorDebug,CorGenericValue,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Value.cs,UnsafeGetValueAsType,The following statement contains a magic number: switch (type) {  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	byte bValue = 4;  	// just initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(byte));  		this.GetValueInternal (new IntPtr (&bValue));  	}  	return (object)(bValue != 0);  case CorElementType.ELEMENT_TYPE_CHAR:  	char cValue = 'a';  	// initialize to avoid compiler warnings  	unsafe {  		Debug.Assert (this.Size == sizeof(char));  		this.GetValueInternal (new IntPtr (&cValue));  	}  	return (object)cValue;  case CorElementType.ELEMENT_TYPE_I1:  	SByte i1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(SByte));  		this.GetValueInternal (new IntPtr (&i1Value));  	}  	return (object)i1Value;  case CorElementType.ELEMENT_TYPE_U1:  	Byte u1Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Byte));  		this.GetValueInternal (new IntPtr (&u1Value));  	}  	return (object)u1Value;  case CorElementType.ELEMENT_TYPE_I2:  	Int16 i2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int16));  		this.GetValueInternal (new IntPtr (&i2Value));  	}  	return (object)i2Value;  case CorElementType.ELEMENT_TYPE_U2:  	UInt16 u2Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt16));  		this.GetValueInternal (new IntPtr (&u2Value));  	}  	return (object)u2Value;  case CorElementType.ELEMENT_TYPE_I:  	IntPtr ipValue = IntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(IntPtr));  		this.GetValueInternal (new IntPtr (&ipValue));  	}  	return (object)ipValue;  case CorElementType.ELEMENT_TYPE_U:  	UIntPtr uipValue = UIntPtr.Zero;  	unsafe {  		Debug.Assert (this.Size == sizeof(UIntPtr));  		this.GetValueInternal (new IntPtr (&uipValue));  	}  	return (object)uipValue;  case CorElementType.ELEMENT_TYPE_I4:  	Int32 i4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int32));  		this.GetValueInternal (new IntPtr (&i4Value));  	}  	return (object)i4Value;  case CorElementType.ELEMENT_TYPE_U4:  	UInt32 u4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt32));  		this.GetValueInternal (new IntPtr (&u4Value));  	}  	return (object)u4Value;  case CorElementType.ELEMENT_TYPE_I8:  	Int64 i8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Int64));  		this.GetValueInternal (new IntPtr (&i8Value));  	}  	return (object)i8Value;  case CorElementType.ELEMENT_TYPE_U8:  	UInt64 u8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(UInt64));  		this.GetValueInternal (new IntPtr (&u8Value));  	}  	return (object)u8Value;  case CorElementType.ELEMENT_TYPE_R4:  	Single r4Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Single));  		this.GetValueInternal (new IntPtr (&r4Value));  	}  	return (object)r4Value;  case CorElementType.ELEMENT_TYPE_R8:  	Double r8Value = 4;  	unsafe {  		Debug.Assert (this.Size == sizeof(Double));  		this.GetValueInternal (new IntPtr (&r8Value));  	}  	return (object)r8Value;  case CorElementType.ELEMENT_TYPE_VALUETYPE:  	byte[] buffer = new byte[this.Size];  	unsafe {  		fixed (byte* bufferPtr = &buffer [0]) {  			Debug.Assert (this.Size == buffer.Length);  			this.GetValueInternal (new IntPtr (bufferPtr));  		}  	}  	return buffer;  default:  	Debug.Assert (false' "Generic value should not be of any other type");  	throw new NotSupportedException ();  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: unsafe {  	byte* pBytes = (byte*)pData;  	uint res;  	// 1 byte data is handled in CorSigUncompressData     	//  Debug.Assert(*pBytes & 0x80);      	// Medium.    	if ((*pBytes & 0xC0) == 0x80)// 10?? ????    	 {  		res = (uint)((*pBytes++ & 0x3f) << 8);  		res |= *pBytes++;  	}  	else// 110? ????   	 {  		res = (uint)(*pBytes++ & 0x1f) << 24;  		res |= (uint)(*pBytes++) << 16;  		res |= (uint)(*pBytes++) << 8;  		res |= (uint)(*pBytes++);  	}  	pData = (IntPtr)pBytes;  	return res;  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: unsafe {  	byte* pBytes = (byte*)pData;  	uint res;  	// 1 byte data is handled in CorSigUncompressData     	//  Debug.Assert(*pBytes & 0x80);      	// Medium.    	if ((*pBytes & 0xC0) == 0x80)// 10?? ????    	 {  		res = (uint)((*pBytes++ & 0x3f) << 8);  		res |= *pBytes++;  	}  	else// 110? ????   	 {  		res = (uint)(*pBytes++ & 0x1f) << 24;  		res |= (uint)(*pBytes++) << 16;  		res |= (uint)(*pBytes++) << 8;  		res |= (uint)(*pBytes++);  	}  	pData = (IntPtr)pBytes;  	return res;  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: unsafe {  	byte* pBytes = (byte*)pData;  	uint res;  	// 1 byte data is handled in CorSigUncompressData     	//  Debug.Assert(*pBytes & 0x80);      	// Medium.    	if ((*pBytes & 0xC0) == 0x80)// 10?? ????    	 {  		res = (uint)((*pBytes++ & 0x3f) << 8);  		res |= *pBytes++;  	}  	else// 110? ????   	 {  		res = (uint)(*pBytes++ & 0x1f) << 24;  		res |= (uint)(*pBytes++) << 16;  		res |= (uint)(*pBytes++) << 8;  		res |= (uint)(*pBytes++);  	}  	pData = (IntPtr)pBytes;  	return res;  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: unsafe {  	byte* pBytes = (byte*)pData;  	uint res;  	// 1 byte data is handled in CorSigUncompressData     	//  Debug.Assert(*pBytes & 0x80);      	// Medium.    	if ((*pBytes & 0xC0) == 0x80)// 10?? ????    	 {  		res = (uint)((*pBytes++ & 0x3f) << 8);  		res |= *pBytes++;  	}  	else// 110? ????   	 {  		res = (uint)(*pBytes++ & 0x1f) << 24;  		res |= (uint)(*pBytes++) << 16;  		res |= (uint)(*pBytes++) << 8;  		res |= (uint)(*pBytes++);  	}  	pData = (IntPtr)pBytes;  	return res;  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: if ((*pBytes & 0xC0) == 0x80)// 10?? ????     {  	res = (uint)((*pBytes++ & 0x3f) << 8);  	res |= *pBytes++;  }  else// 110? ????    {  	res = (uint)(*pBytes++ & 0x1f) << 24;  	res |= (uint)(*pBytes++) << 16;  	res |= (uint)(*pBytes++) << 8;  	res |= (uint)(*pBytes++);  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: if ((*pBytes & 0xC0) == 0x80)// 10?? ????     {  	res = (uint)((*pBytes++ & 0x3f) << 8);  	res |= *pBytes++;  }  else// 110? ????    {  	res = (uint)(*pBytes++ & 0x1f) << 24;  	res |= (uint)(*pBytes++) << 16;  	res |= (uint)(*pBytes++) << 8;  	res |= (uint)(*pBytes++);  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: if ((*pBytes & 0xC0) == 0x80)// 10?? ????     {  	res = (uint)((*pBytes++ & 0x3f) << 8);  	res |= *pBytes++;  }  else// 110? ????    {  	res = (uint)(*pBytes++ & 0x1f) << 24;  	res |= (uint)(*pBytes++) << 16;  	res |= (uint)(*pBytes++) << 8;  	res |= (uint)(*pBytes++);  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: if ((*pBytes & 0xC0) == 0x80)// 10?? ????     {  	res = (uint)((*pBytes++ & 0x3f) << 8);  	res |= *pBytes++;  }  else// 110? ????    {  	res = (uint)(*pBytes++ & 0x1f) << 24;  	res |= (uint)(*pBytes++) << 16;  	res |= (uint)(*pBytes++) << 8;  	res |= (uint)(*pBytes++);  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: res = (uint)((*pBytes++ & 0x3f) << 8);  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: res = (uint)(*pBytes++ & 0x1f) << 24;  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: res |= (uint)(*pBytes++) << 16;  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressBigData,The following statement contains a magic number: res |= (uint)(*pBytes++) << 8;  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,CorSigUncompressToken,The following statement contains a magic number: tk = TokenFromRid (tk >> 2' tkType);  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,GetEnumUnderlyingType,The following statement contains a magic number: while (numFieldDefs != 0) {  	importer.GetFieldProps (mdFieldDef' out classToken' null' 0' out nameSize' out fieldAttributes' out ppvSig' out size' out cPlusTypeFlab' out ppValue' out pcchValue);  	Debug.Assert (tk == classToken);  	// Enums should have one instance field that indicates the underlying type  	if ((((FieldAttributes)fieldAttributes) & FieldAttributes.Static) == 0) {  		Debug.Assert (size == 2);  		// Primitive type field sigs should be two bytes long  		IntPtr ppvSigTemp = ppvSig;  		CorCallingConvention callingConv = MetadataHelperFunctions.CorSigUncompressCallingConv (ref ppvSigTemp);  		Debug.Assert (callingConv == CorCallingConvention.Field);  		return MetadataHelperFunctions.CorSigUncompressElementType (ref ppvSigTemp);  	}  	importer.EnumFields (ref hEnum' tk' out mdFieldDef' 1' out numFieldDefs);  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,GetEnumUnderlyingType,The following statement contains a magic number: if ((((FieldAttributes)fieldAttributes) & FieldAttributes.Static) == 0) {  	Debug.Assert (size == 2);  	// Primitive type field sigs should be two bytes long  	IntPtr ppvSigTemp = ppvSig;  	CorCallingConvention callingConv = MetadataHelperFunctions.CorSigUncompressCallingConv (ref ppvSigTemp);  	Debug.Assert (callingConv == CorCallingConvention.Field);  	return MetadataHelperFunctions.CorSigUncompressElementType (ref ppvSigTemp);  }  
Magic Number,Microsoft.Samples.Debugging.CorMetadata,MetadataType,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\MetadataType.cs,GetEnumUnderlyingType,The following statement contains a magic number: Debug.Assert (size == 2);  
Magic Number,Microsoft.Samples.Debugging.CorSymbolStore,SymMethod,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\symmethod.cs,GetSourceStartEnd,The following statement contains a magic number: if (spCount < 2)  	throw new ArgumentException ();  
Magic Number,Microsoft.Samples.Debugging.CorSymbolStore,SymReader,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\SymStore\SymReader.cs,GetSymbolStoreFileName,The following statement contains a magic number: count = 300;  
Missing Default,Microsoft.Samples.Debugging.CorDebug,CorProcessEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ToString,The following switch statement is missing a default case: switch (CallbackType) {  case ManagedCallbackType.OnCreateProcess:  	return "Process Created";  case ManagedCallbackType.OnProcessExit:  	return "Process Exited";  case ManagedCallbackType.OnControlCTrap:  	break;  }  
Missing Default,Microsoft.Samples.Debugging.CorDebug,CorAppDomainEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ToString,The following switch statement is missing a default case: switch (CallbackType) {  case ManagedCallbackType.OnCreateAppDomain:  	return "AppDomain Created: " + m_ad.Name;  case ManagedCallbackType.OnAppDomainExit:  	return "AppDomain Exited: " + m_ad.Name;  }  
Missing Default,Microsoft.Samples.Debugging.CorDebug,CorThreadEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ToString,The following switch statement is missing a default case: switch (CallbackType) {  case ManagedCallbackType.OnBreak:  	return "Break";  case ManagedCallbackType.OnCreateThread:  	return "Thread Created";  case ManagedCallbackType.OnThreadExit:  	return "Thread Exited";  case ManagedCallbackType.OnNameChange:  	return "Name Changed";  }  
Missing Default,Microsoft.Samples.Debugging.CorDebug,CorEvalEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ToString,The following switch statement is missing a default case: switch (CallbackType) {  case ManagedCallbackType.OnEvalComplete:  	return "Eval Complete";  case ManagedCallbackType.OnEvalException:  	return "Eval Exception";  }  
Missing Default,Microsoft.Samples.Debugging.CorDebug,CorModuleEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ToString,The following switch statement is missing a default case: switch (CallbackType) {  case ManagedCallbackType.OnModuleLoad:  	return "Module loaded: " + m_managedModule.Name;  case ManagedCallbackType.OnModuleUnload:  	return "Module unloaded: " + m_managedModule.Name;  }  
Missing Default,Microsoft.Samples.Debugging.CorDebug,CorClassEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ToString,The following switch statement is missing a default case: switch (CallbackType) {  case ManagedCallbackType.OnClassLoad:  	return "Class loaded: " + m_class;  case ManagedCallbackType.OnClassUnload:  	return "Class unloaded: " + m_class;  }  
Missing Default,Microsoft.Samples.Debugging.CorDebug,CorAssemblyEventArgs,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\debug\Debugger.cs,ToString,The following switch statement is missing a default case: switch (CallbackType) {  case ManagedCallbackType.OnAssemblyLoad:  	return "Assembly loaded: " + m_assembly.Name;  case ManagedCallbackType.OnAssemblyUnload:  	return "Assembly unloaded: " + m_assembly.Name;  }  
Missing Default,Microsoft.Samples.Debugging.CorMetadata,MetadataHelperFunctions,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\CorApi2\Metadata\CorMetadata.cs,ReadType,The following switch statement is missing a default case: switch (et) {  case CorElementType.ELEMENT_TYPE_VOID:  	return typeof(void);  case CorElementType.ELEMENT_TYPE_BOOLEAN:  	return typeof(bool);  case CorElementType.ELEMENT_TYPE_CHAR:  	return typeof(char);  case CorElementType.ELEMENT_TYPE_I1:  	return typeof(sbyte);  case CorElementType.ELEMENT_TYPE_U1:  	return typeof(byte);  case CorElementType.ELEMENT_TYPE_I2:  	return typeof(short);  case CorElementType.ELEMENT_TYPE_U2:  	return typeof(ushort);  case CorElementType.ELEMENT_TYPE_I4:  	return typeof(int);  case CorElementType.ELEMENT_TYPE_U4:  	return typeof(uint);  case CorElementType.ELEMENT_TYPE_I8:  	return typeof(long);  case CorElementType.ELEMENT_TYPE_U8:  	return typeof(ulong);  case CorElementType.ELEMENT_TYPE_R4:  	return typeof(float);  case CorElementType.ELEMENT_TYPE_R8:  	return typeof(double);  case CorElementType.ELEMENT_TYPE_STRING:  	return typeof(string);  case CorElementType.ELEMENT_TYPE_I:  	return typeof(IntPtr);  case CorElementType.ELEMENT_TYPE_U:  	return typeof(UIntPtr);  case CorElementType.ELEMENT_TYPE_OBJECT:  	return typeof(object);  case CorElementType.ELEMENT_TYPE_VAR:  case CorElementType.ELEMENT_TYPE_MVAR:  	// Generic args in methods not supported. Return a dummy type.  	CorSigUncompressData (ref pData);  	return typeof(GenericType);  case CorElementType.ELEMENT_TYPE_GENERICINST: {  	Type t = ReadType (importer' ref pData);  	List<Type> typeArgs = new List<Type> ();  	uint num = CorSigUncompressData (ref pData);  	for (int n = 0; n < num; n++) {  		typeArgs.Add (ReadType (importer' ref pData));  	}  	return MetadataType.MakeGeneric (t' typeArgs);  }  case CorElementType.ELEMENT_TYPE_PTR: {  	Type t = ReadType (importer' ref pData);  	return MetadataType.MakePointer (t);  }  case CorElementType.ELEMENT_TYPE_BYREF: {  	Type t = ReadType (importer' ref pData);  	return MetadataType.MakeByRef (t);  }  case CorElementType.ELEMENT_TYPE_END:  case CorElementType.ELEMENT_TYPE_VALUETYPE:  case CorElementType.ELEMENT_TYPE_CLASS: {  	uint token = CorSigUncompressToken (ref pData);  	return new MetadataType (importer' (int)token);  }  case CorElementType.ELEMENT_TYPE_ARRAY: {  	Type t = ReadType (importer' ref pData);  	int rank = (int)CorSigUncompressData (ref pData);  	if (rank == 0)  		return MetadataType.MakeArray (t' null' null);  	uint numSizes = CorSigUncompressData (ref pData);  	var sizes = new List<int> (rank);  	for (int n = 0; n < numSizes && n < rank; n++)  		sizes.Add ((int)CorSigUncompressData (ref pData));  	uint numLoBounds = CorSigUncompressData (ref pData);  	var loBounds = new List<int> (rank);  	for (int n = 0; n < numLoBounds && n < rank; n++)  		loBounds.Add ((int)CorSigUncompressData (ref pData));  	return MetadataType.MakeArray (t' sizes' loBounds);  }  case CorElementType.ELEMENT_TYPE_SZARRAY: {  	Type t = ReadType (importer' ref pData);  	return MetadataType.MakeArray (t' null' null);  }  case CorElementType.ELEMENT_TYPE_FNPTR: {  	CorCallingConvention cconv;  	Type retType;  	List<Type> argTypes;  	ReadMethodSignature (importer' ref pData' out cconv' out retType' out argTypes);  	return MetadataType.MakeDelegate (retType' argTypes);  }  case CorElementType.ELEMENT_TYPE_CMOD_REQD:  case CorElementType.ELEMENT_TYPE_CMOD_OPT:  	return ReadType (importer' ref pData);  }  
