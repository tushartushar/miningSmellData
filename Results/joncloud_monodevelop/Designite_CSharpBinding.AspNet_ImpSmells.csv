Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildDocumentString,Cyclomatic complexity of the method is 8
Long Parameter List,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,HandleCompletion,The method has 6 parameters.
Long Parameter List,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,HandleParameterCompletion,The method has 5 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring,ASPNetReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\ASPNetReferenceFinder.cs,SearchMember,The method has 7 parameters.
Long Parameter List,MonoDevelop.CSharp.Refactoring,ASPNetReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\ASPNetReferenceFinder.cs,FindReferences,The method has 5 parameters.
Long Statement,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The length of the statement  "			if (node.Region.Begin.Line > data.Caret.Line || node.Region.Begin.Line == data.Caret.Line && node.Region.Begin.Column > data.Caret.Column - 5) " is 142.
Long Statement,MonoDevelop.CSharp.Refactoring,ASPNetReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\ASPNetReferenceFinder.cs,SearchMember,The length of the statement  "	//			var resolver = new NRefactoryResolver (dom' parsedDocument.CompilationUnit' ICSharpCode.OldNRefactory.SupportedLanguage.CSharp' editor' fileName); " is 151.
Long Statement,MonoDevelop.CSharp.Refactoring,ASPNetReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\ASPNetReferenceFinder.cs,SearchMember,The length of the statement  "	//				var offsetInfo = offsetInfos.FirstOrDefault (info => info.ToOffset <= result.Position && result.Position < info.ToOffset + info.Length); " is 142.
Long Statement,MonoDevelop.CSharp.Refactoring,ASPNetReferenceFinder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\ASPNetReferenceFinder.cs,FindReferences,The length of the statement  "	//				foreach (var reference in SearchMember (member' dom' fileName' editor' buildDocument' offsetInfos' parsedDocument)) { " is 123.
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The following statement contains a magic number: if (isExpression) {  	sb.AppendLine ("void Generated ()");  	sb.AppendLine ("{");  	//Console.WriteLine ("start:" + location.BeginLine  +"/" +location.BeginColumn);  	foreach (var node in info.XExpressions) {  		bool isBlock = node is AspNetRenderBlock;  		if (node.Region.Begin.Line > data.Caret.Line || node.Region.Begin.Line == data.Caret.Line && node.Region.Begin.Column > data.Caret.Column - 5)  			continue;  		//Console.WriteLine ("take xprt:" + expressions.Key.BeginLine  +"/" +expressions.Key.BeginColumn);  		var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  		var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  		if (!isBlock) {  			sb.Append ("WriteLine (");  			start += 1;  		}  		string expr = data.GetTextBetween (start' end);  		result.AddTextPosition (start' end' expr.Length);  		sb.Append (expr);  		if (!isBlock)  			sb.Append (");");  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The following statement contains a magic number: if (isExpression) {  	sb.AppendLine ("void Generated ()");  	sb.AppendLine ("{");  	//Console.WriteLine ("start:" + location.BeginLine  +"/" +location.BeginColumn);  	foreach (var node in info.XExpressions) {  		bool isBlock = node is AspNetRenderBlock;  		if (node.Region.Begin.Line > data.Caret.Line || node.Region.Begin.Line == data.Caret.Line && node.Region.Begin.Column > data.Caret.Column - 5)  			continue;  		//Console.WriteLine ("take xprt:" + expressions.Key.BeginLine  +"/" +expressions.Key.BeginColumn);  		var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  		var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  		if (!isBlock) {  			sb.Append ("WriteLine (");  			start += 1;  		}  		string expr = data.GetTextBetween (start' end);  		result.AddTextPosition (start' end' expr.Length);  		sb.Append (expr);  		if (!isBlock)  			sb.Append (");");  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The following statement contains a magic number: if (isExpression) {  	sb.AppendLine ("void Generated ()");  	sb.AppendLine ("{");  	//Console.WriteLine ("start:" + location.BeginLine  +"/" +location.BeginColumn);  	foreach (var node in info.XExpressions) {  		bool isBlock = node is AspNetRenderBlock;  		if (node.Region.Begin.Line > data.Caret.Line || node.Region.Begin.Line == data.Caret.Line && node.Region.Begin.Column > data.Caret.Column - 5)  			continue;  		//Console.WriteLine ("take xprt:" + expressions.Key.BeginLine  +"/" +expressions.Key.BeginColumn);  		var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  		var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  		if (!isBlock) {  			sb.Append ("WriteLine (");  			start += 1;  		}  		string expr = data.GetTextBetween (start' end);  		result.AddTextPosition (start' end' expr.Length);  		sb.Append (expr);  		if (!isBlock)  			sb.Append (");");  	}  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The following statement contains a magic number: foreach (var node in info.XExpressions) {  	bool isBlock = node is AspNetRenderBlock;  	if (node.Region.Begin.Line > data.Caret.Line || node.Region.Begin.Line == data.Caret.Line && node.Region.Begin.Column > data.Caret.Column - 5)  		continue;  	//Console.WriteLine ("take xprt:" + expressions.Key.BeginLine  +"/" +expressions.Key.BeginColumn);  	var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  	var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  	if (!isBlock) {  		sb.Append ("WriteLine (");  		start += 1;  	}  	string expr = data.GetTextBetween (start' end);  	result.AddTextPosition (start' end' expr.Length);  	sb.Append (expr);  	if (!isBlock)  		sb.Append (");");  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The following statement contains a magic number: foreach (var node in info.XExpressions) {  	bool isBlock = node is AspNetRenderBlock;  	if (node.Region.Begin.Line > data.Caret.Line || node.Region.Begin.Line == data.Caret.Line && node.Region.Begin.Column > data.Caret.Column - 5)  		continue;  	//Console.WriteLine ("take xprt:" + expressions.Key.BeginLine  +"/" +expressions.Key.BeginColumn);  	var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  	var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  	if (!isBlock) {  		sb.Append ("WriteLine (");  		start += 1;  	}  	string expr = data.GetTextBetween (start' end);  	result.AddTextPosition (start' end' expr.Length);  	sb.Append (expr);  	if (!isBlock)  		sb.Append (");");  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The following statement contains a magic number: foreach (var node in info.XExpressions) {  	bool isBlock = node is AspNetRenderBlock;  	if (node.Region.Begin.Line > data.Caret.Line || node.Region.Begin.Line == data.Caret.Line && node.Region.Begin.Column > data.Caret.Column - 5)  		continue;  	//Console.WriteLine ("take xprt:" + expressions.Key.BeginLine  +"/" +expressions.Key.BeginColumn);  	var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  	var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  	if (!isBlock) {  		sb.Append ("WriteLine (");  		start += 1;  	}  	string expr = data.GetTextBetween (start' end);  	result.AddTextPosition (start' end' expr.Length);  	sb.Append (expr);  	if (!isBlock)  		sb.Append (");");  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildLocalDocument,The following statement contains a magic number: if (node.Region.Begin.Line > data.Caret.Line || node.Region.Begin.Line == data.Caret.Line && node.Region.Begin.Column > data.Caret.Column - 5)  	continue;  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildDocumentString,The following statement contains a magic number: foreach (var node in info.XScriptBlocks) {  	var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  	var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  	if (offsetInfos != null)  		offsetInfos.Add (new LocalDocumentInfo.OffsetInfo (start' document.Length' end - start));  	document.AppendLine (data.Document.GetTextBetween (start' end));  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildDocumentString,The following statement contains a magic number: foreach (var node in info.XScriptBlocks) {  	var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  	var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  	if (offsetInfos != null)  		offsetInfos.Add (new LocalDocumentInfo.OffsetInfo (start' document.Length' end - start));  	document.AppendLine (data.Document.GetTextBetween (start' end));  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildDocumentString,The following statement contains a magic number: if (buildExpressions) {  	WriteClassDeclaration (info' document);  	document.AppendLine ("{");  	document.AppendLine ("void Generated ()");  	document.AppendLine ("{");  	//Console.WriteLine ("start:" + location.BeginLine  +"/" +location.BeginColumn);  	foreach (var node in info.XExpressions) {  		bool isBlock = node is AspNetRenderBlock;  		var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  		var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  		if (!isBlock) {  			document.Append ("WriteLine (");  			start += 1;  		}  		string expr = data.GetTextBetween (start' end);  		if (offsetInfos != null) {  			offsetInfos.Add (new LocalDocumentInfo.OffsetInfo (start' document.Length' expr.Length));  		}  		document.Append (expr);  		if (!isBlock)  			document.Append (");");  	}  	document.AppendLine ("}");  	document.AppendLine ("}");  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildDocumentString,The following statement contains a magic number: if (buildExpressions) {  	WriteClassDeclaration (info' document);  	document.AppendLine ("{");  	document.AppendLine ("void Generated ()");  	document.AppendLine ("{");  	//Console.WriteLine ("start:" + location.BeginLine  +"/" +location.BeginColumn);  	foreach (var node in info.XExpressions) {  		bool isBlock = node is AspNetRenderBlock;  		var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  		var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  		if (!isBlock) {  			document.Append ("WriteLine (");  			start += 1;  		}  		string expr = data.GetTextBetween (start' end);  		if (offsetInfos != null) {  			offsetInfos.Add (new LocalDocumentInfo.OffsetInfo (start' document.Length' expr.Length));  		}  		document.Append (expr);  		if (!isBlock)  			document.Append (");");  	}  	document.AppendLine ("}");  	document.AppendLine ("}");  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildDocumentString,The following statement contains a magic number: foreach (var node in info.XExpressions) {  	bool isBlock = node is AspNetRenderBlock;  	var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  	var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  	if (!isBlock) {  		document.Append ("WriteLine (");  		start += 1;  	}  	string expr = data.GetTextBetween (start' end);  	if (offsetInfos != null) {  		offsetInfos.Add (new LocalDocumentInfo.OffsetInfo (start' document.Length' expr.Length));  	}  	document.Append (expr);  	if (!isBlock)  		document.Append (");");  }  
Magic Number,MonoDevelop.CSharp.Completion,AspLanguageBuilder,C:\repos\joncloud_monodevelop\main\src\addins\CSharpBinding\AspNet\AspLanguageBuilder.cs,BuildDocumentString,The following statement contains a magic number: foreach (var node in info.XExpressions) {  	bool isBlock = node is AspNetRenderBlock;  	var start = data.Document.LocationToOffset (node.Region.Begin.Line' node.Region.Begin.Column) + 2;  	var end = data.Document.LocationToOffset (node.Region.End.Line' node.Region.End.Column) - 2;  	if (!isBlock) {  		document.Append ("WriteLine (");  		start += 1;  	}  	string expr = data.GetTextBetween (start' end);  	if (offsetInfos != null) {  		offsetInfos.Add (new LocalDocumentInfo.OffsetInfo (start' document.Length' expr.Length));  	}  	document.Append (expr);  	if (!isBlock)  		document.Append (");");  }  
