Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoDevelop.CodeMetrics,ProjectProperties,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\ProjectProperties.cs,AddInstance,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.CodeMetrics,ClassProperties,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\ClassProperties.cs,EvaluateInnerTypeCount,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.CodeMetrics,CodeMetricsService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsServices.cs,GenerateTypeMetricText,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.CodeMetrics,NamespaceProperties,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\NamespaceProperties.cs,AddInstance,Cyclomatic complexity of the method is 17
Long Statement,MonoDevelop.CodeMetrics,CodeMetricsNodeExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsNodeExtension.cs,CanBuildNode,The length of the statement  "	return typeof(ProjectFile).IsAssignableFrom (dataType) || typeof(ProjectFolder).IsAssignableFrom (dataType) || typeof(Project).IsAssignableFrom (dataType) || typeof(SolutionFolder).IsAssignableFrom (dataType) || typeof(Solution).IsAssignableFrom (dataType); " is 257.
Long Statement,MonoDevelop.CodeMetrics,CodeMetricsService,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsServices.cs,GenerateDelegateMetricText,The length of the statement  "	results.Append (GettextCatalog.GetString ("\nTotal number of parameters : " + item.Delegate.GetDelegateInvokeMethod ().Parameters.Count)); " is 138.
Long Statement,MonoDevelop.CodeMetrics,Cohesion,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\Cohesion.cs,EvaluateCohesion,The length of the statement  "	cls.LCOM_HS = (cls.Class.Methods.Count () - totalaccess / cls.Class.Fields.Count ()) / (cls.Class.Methods.Count () - 1); " is 120.
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: cyclometricComplexityCol = new TreeViewColumn (GettextCatalog.GetString ("Cyclometric Complexity")' new CellRendererText ()' "text"' 2);  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: classCouplingCol = new TreeViewColumn (GettextCatalog.GetString ("Class Coupling")' new CellRendererText ()' "text"' 3);  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: realLocCol = new TreeViewColumn (GettextCatalog.GetString ("Real Loc")' new CellRendererText ()' "text"' 4);  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: commentsLocCol = new TreeViewColumn (GettextCatalog.GetString ("Comments Loc")' new CellRendererText ()' "text"' 5);  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: this.treeviewMetrics.RowActivated += delegate {  	Gtk.TreeIter selectedIter;  	if (treeviewMetrics.Selection.GetSelected (out selectedIter)) {  		rowSelectTypeName = (IProperties)metricStore.GetValue (selectedIter' 6);  		MonoDevelop.Ide.IdeApp.Workbench.OpenDocument (rowSelectTypeName.FilePath);  		MonoDevelop.Ide.IdeApp.Workbench.ActiveDocument.Editor.SetCaretTo (rowSelectTypeName.StartLine' 0);  	}  };  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: if (treeviewMetrics.Selection.GetSelected (out selectedIter)) {  	rowSelectTypeName = (IProperties)metricStore.GetValue (selectedIter' 6);  	MonoDevelop.Ide.IdeApp.Workbench.OpenDocument (rowSelectTypeName.FilePath);  	MonoDevelop.Ide.IdeApp.Workbench.ActiveDocument.Editor.SetCaretTo (rowSelectTypeName.StartLine' 0);  }  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: rowSelectTypeName = (IProperties)metricStore.GetValue (selectedIter' 6);  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: this.treeviewMetrics.CursorChanged += delegate {  	Gtk.TreeIter selectedIter;  	if (treeviewMetrics.Selection.GetSelected (out selectedIter)) {  		rowSelectTypeName = (IProperties)metricStore.GetValue (selectedIter' 6);  		Gtk.Application.Invoke (delegate {  			textviewReport.Buffer.Text = CodeMetricsService.GenerateTypeMetricText (rowSelectTypeName);  		});  	}  };  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: if (treeviewMetrics.Selection.GetSelected (out selectedIter)) {  	rowSelectTypeName = (IProperties)metricStore.GetValue (selectedIter' 6);  	Gtk.Application.Invoke (delegate {  		textviewReport.Buffer.Text = CodeMetricsService.GenerateTypeMetricText (rowSelectTypeName);  	});  }  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,CodeMetricsWidget,The following statement contains a magic number: rowSelectTypeName = (IProperties)metricStore.GetValue (selectedIter' 6);  
Magic Number,MonoDevelop.CodeMetrics,CodeMetricsWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\CodeMetricsWidget.cs,Percent,The following statement contains a magic number: return (a * 100.0) / b;  
Missing Default,MonoDevelop.CodeMetrics,ProjectProperties,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\ProjectProperties.cs,AddInstance,The following switch statement is missing a default case: switch (cls.Kind) {  case TypeKind.Class:  	AddClass (cls' key);  	break;  case TypeKind.Delegate:  	AddDelegate (cls' key);  	break;  case TypeKind.Enum:  	AddEnum (cls' key);  	break;  case TypeKind.Interface:  	AddInterface (cls' key);  	break;  case TypeKind.Struct:  	AddStruct (cls' key);  	break;  }  
Missing Default,MonoDevelop.CodeMetrics,ClassProperties,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\ClassProperties.cs,EvaluateInnerTypeCount,The following switch statement is missing a default case: switch (type.Kind) {  case TypeKind.Class:  	AddInnerClass (type);  	break;  case TypeKind.Enum:  	AddInnerEnum (type);  	break;  case TypeKind.Interface:  	AddInnerInterface (type);  	break;  case TypeKind.Struct:  	AddInnerStruct (type);  	break;  case TypeKind.Delegate:  	AddInnerDelegate (type);  	break;  }  
Missing Default,MonoDevelop.CodeMetrics,NamespaceProperties,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.CodeMetrics\MonoDevelop.CodeMetrics\NamespaceProperties.cs,AddInstance,The following switch statement is missing a default case: switch (type.Kind) {  case TypeKind.Class:  	AddClass (type' key);  	break;  case TypeKind.Delegate:  	AddDelegate (type' key);  	break;  case TypeKind.Enum:  	AddEnum (type' key);  	break;  case TypeKind.Interface:  	AddInterface (type' key);  	break;  case TypeKind.Struct:  	AddStruct (type' key);  	break;  }  
