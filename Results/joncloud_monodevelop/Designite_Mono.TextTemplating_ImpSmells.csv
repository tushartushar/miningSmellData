Implementation smell,Namespace,Class,File,Method,Description
Long Method,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GetSettings,The method has 123 lines of code.
Long Method,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GenerateCompileUnit,The method has 119 lines of code.
Complex Method,Microsoft.VisualStudio.TextTemplating,RequiresProvidesDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\RequiresProvidesDirectiveProcessor.cs,ProcessDirective,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.VisualStudio.TextTemplating,TextTransformation,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\TextTransformation.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,Mono.TextTemplating,ParsedTemplate,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\ParsedTemplate.cs,Parse,Cyclomatic complexity of the method is 30
Complex Method,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,GetNextStateAndCurrentValue,Cyclomatic complexity of the method is 9
Complex Method,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,GetDirectiveValue,Cyclomatic complexity of the method is 9
Complex Method,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,Cyclomatic complexity of the method is 9
Complex Method,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,Cyclomatic complexity of the method is 10
Complex Method,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,PreprocessTemplate,Cyclomatic complexity of the method is 10
Complex Method,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,CompileTemplate,Cyclomatic complexity of the method is 10
Complex Method,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GetSettings,Cyclomatic complexity of the method is 68
Complex Method,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,IndentSnippetText,Cyclomatic complexity of the method is 8
Complex Method,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddDirective,Cyclomatic complexity of the method is 9
Complex Method,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GenerateCompileUnit,Cyclomatic complexity of the method is 37
Long Parameter List,Microsoft.VisualStudio.TextTemplating,Engine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\Engine.cs,PreprocessTemplate,The method has 6 parameters.
Long Parameter List,Microsoft.VisualStudio.TextTemplating,RequiresProvidesDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\RequiresProvidesDirectiveProcessor.cs,GeneratePostInitializationCode,The method has 5 parameters.
Long Parameter List,Microsoft.VisualStudio.TextTemplating,RequiresProvidesDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\RequiresProvidesDirectiveProcessor.cs,GeneratePreInitializationCode,The method has 5 parameters.
Long Parameter List,Microsoft.VisualStudio.TextTemplating,RequiresProvidesDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\RequiresProvidesDirectiveProcessor.cs,GenerateTransformCode,The method has 5 parameters.
Long Parameter List,Microsoft.VisualStudio.TextTemplating,ITextTemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\Interfaces.cs,PreprocessTemplate,The method has 6 parameters.
Long Parameter List,Mono.TextTemplating,CompiledTemplate,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\CompiledTemplate.cs,CompiledTemplate,The method has 5 parameters.
Long Parameter List,Mono.TextTemplating,TemplateGenerator,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplateGenerator.cs,PreprocessTemplate,The method has 7 parameters.
Long Parameter List,Mono.TextTemplating,TemplateGenerator,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplateGenerator.cs,PreprocessTemplate,The method has 7 parameters.
Long Parameter List,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,PreprocessTemplate,The method has 6 parameters.
Long Statement,Microsoft.VisualStudio.TextTemplating,RequiresProvidesDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\RequiresProvidesDirectiveProcessor.cs,ProcessDirective,The length of the statement  "	GeneratePostInitializationCode (directiveName' postInitBuffer' languageProvider' requiresDictionary' providesDictionary); " is 121.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,FinishProcessingRun,The length of the statement  "	var statement = new CodeConditionStatement (new CodeBinaryOperatorExpression (new CodePropertyReferenceExpression (new CodePropertyReferenceExpression (new CodeThisReferenceExpression ()' "Errors")' "HasErrors")' CodeBinaryOperatorType.ValueEquality' new CodePrimitiveExpression (false))' postStatements.ToArray ()); " is 316.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,ProcessDirective,The length of the statement  "	var acquiredVariable = new CodeVariableDeclarationStatement (typeof(bool)' acquiredName' new CodePrimitiveExpression (false)); " is 126.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,ProcessDirective,The length of the statement  "	//checks the local called "data" can be cast and assigned to the field' and if successful' sets acquiredVariable to true " is 120.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,ProcessDirective,The length of the statement  "	var checkCastThenAssignVal = new CodeConditionStatement (new CodeMethodInvokeExpression (new CodeTypeOfExpression (typeRef)' "IsAssignableFrom"' new CodeMethodInvokeExpression (valRef' "GetType"))' new CodeStatement[] { " is 219.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,ProcessDirective,The length of the statement  "		new CodeExpressionStatement (new CodeMethodInvokeExpression (thisRef' "Error"' new CodePrimitiveExpression ("The type '" + type + "' of the parameter '" + name + "' did not match the type passed to the template")))' " is 215.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,ProcessDirective,The length of the statement  "	var checkSession = new CodeConditionStatement (new CodeBinaryOperatorExpression (NotNull (sessionRef)' CodeBinaryOperatorType.BooleanAnd' new CodeMethodInvokeExpression (sessionRef' "ContainsKey"' namePrimitive))' new CodeVariableDeclarationStatement (typeof(object)' "data"' new CodeIndexerExpression (sessionRef' namePrimitive))' checkCastThenAssignVal); " is 356.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,ProcessDirective,The length of the statement  "		var checkHost = new CodeConditionStatement (BooleanAnd (IsFalse (acquiredVariableRef)' NotNull (hostRef))' new CodeVariableDeclarationStatement (typeof(string)' "data"' new CodeMethodInvokeExpression (hostRef' "ResolveParameterValue"' nullPrim' nullPrim' namePrimitive))' new CodeConditionStatement (NotNull (valRef)' checkCastThenAssignVal)); " is 343.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,ProcessDirective,The length of the statement  "	var checkCallContext = new CodeConditionStatement (IsFalse (acquiredVariableRef)' new CodeVariableDeclarationStatement (typeof(object)' "data"' new CodeMethodInvokeExpression (callContextTypeRefExpr' "LogicalGetData"' namePrimitive))' new CodeConditionStatement (NotNull (valRef)' checkCastThenAssignVal)); " is 306.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,NotNull,The length of the statement  "	return new CodeBinaryOperatorExpression (reference' CodeBinaryOperatorType.IdentityInequality' new CodePrimitiveExpression (null)); " is 131.
Long Statement,Microsoft.VisualStudio.TextTemplating,ParameterDirectiveProcessor,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Microsoft.VisualStudio.TextTemplating\ParameterDirectiveProcessor.cs,IsFalse,The length of the statement  "	return new CodeBinaryOperatorExpression (expr' CodeBinaryOperatorType.ValueEquality' new CodePrimitiveExpression (false)); " is 122.
Long Statement,Mono.TextTemplating,TemplateGenerator,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplateGenerator.cs,PreprocessTemplate,The length of the statement  "	outputContent = Engine.PreprocessTemplate (inputContent' this' className' classNamespace' out language' out references); " is 120.
Long Statement,Mono.TextTemplating,TemplateGenerator,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplateGenerator.cs,ResolveDirectiveProcessor,The length of the statement  "		throw new Exception (string.Format ("Could not resolve assembly '{0}' for directive processor '{1}'"' value.Value' processorName)); " is 131.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,CompileTemplate,The length of the statement  "		var obj = domain.CreateInstanceFromAndUnwrap (type.Assembly.Location' type.FullName' false' BindingFlags.Default' null' new object[] { " is 134.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GetSettings,The length of the statement  "		if (settings.HostSpecific || (!((IDirectiveProcessor)kv.Value).RequiresProcessingRunIsHostSpecific && ((hs = kv.Value as IRecognizeHostSpecific) == null || !hs.RequiresProcessingRunIsHostSpecific))) " is 198.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddDirective,The length of the statement  "			throw new InvalidOperationException ("Directive processor '" + processorName + "' does not support directive '" + directive.Name + "'"); " is 136.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GenerateCompileUnit,The length of the statement  "	transformMeth.Statements.Add (new CodeAssignStatement (new CodePropertyReferenceExpression (new CodeThisReferenceExpression ()' "GenerationEnvironment")' new CodePrimitiveExpression (null))); " is 191.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GenerateCompileUnit,The length of the statement  "		toStringHelper = new CodeTypeReferenceExpression (new CodeTypeReference (typeof(ToStringHelper)' CodeTypeReferenceOptions.GlobalReference)); " is 140.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GenerateCompileUnit,The length of the statement  "			st = new CodeExpressionStatement (new CodeMethodInvokeExpression (writeMeth' new CodeMethodInvokeExpression (toStringMeth' new CodeSnippetExpression (seg.Text)))); " is 163.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GenerateCompileUnit,The length of the statement  "	transformMeth.Statements.Add (new CodeMethodReturnStatement (new CodeMethodInvokeExpression (new CodePropertyReferenceExpression (new CodeThisReferenceExpression ()' "GenerationEnvironment")' "ToString"))); " is 206.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GenerateInitializationMethod,The length of the statement  "		initializeMeth.Statements.Add (new CodeMethodInvokeExpression (new CodeMethodReferenceExpression (new CodeBaseReferenceExpression ()' "Initialize"))); " is 150.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,FieldInitializationIfNull,The length of the statement  "	return new CodeConditionStatement (new CodeBinaryOperatorExpression (fieldRef' CodeBinaryOperatorType.ValueEquality' new CodePrimitiveExpression (null))' new CodeAssignStatement (fieldRef' new CodeObjectCreateExpression (typeRef))); " is 232.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddErrorHelpers,The length of the statement  "	errorMeth.Statements.Add (new CodeMethodInvokeExpression (errorsPropRef' "Add"' new CodeObjectCreateExpression (compilerErrorTypeRef' nullPrim' minusOnePrim' minusOnePrim' nullPrim' new CodeArgumentReferenceExpression ("message")))); " is 233.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddErrorHelpers,The length of the statement  "	warningMeth.Statements.Add (new CodeVariableDeclarationStatement (compilerErrorTypeRef' "val"' new CodeObjectCreateExpression (compilerErrorTypeRef' nullPrim' minusOnePrim' minusOnePrim' nullPrim' new CodeArgumentReferenceExpression ("message")))); " is 248.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddErrorHelpers,The length of the statement  "	warningMeth.Statements.Add (new CodeAssignStatement (new CodePropertyReferenceExpression (new CodeVariableReferenceExpression ("val")' "IsWarning")' new CodePrimitiveExpression (true))); " is 186.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddErrorHelpers,The length of the statement  "	warningMeth.Statements.Add (new CodeMethodInvokeExpression (errorsPropRef' "Add"' new CodeVariableReferenceExpression ("val"))); " is 128.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddIndentHelpers,The length of the statement  "	popIndentMeth.Statements.Add (new CodeConditionStatement (new CodeBinaryOperatorExpression (new CodePropertyReferenceExpression (indentsPropRef' "Count")' CodeBinaryOperatorType.ValueEquality' zeroPrim)' new CodeMethodReturnStatement (stringEmptyRef))); " is 253.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddIndentHelpers,The length of the statement  "	popIndentMeth.Statements.Add (new CodeVariableDeclarationStatement (intTypeRef' "lastPos"' new CodeBinaryOperatorExpression (new CodePropertyReferenceExpression (currentIndentFieldRef' "Length")' CodeBinaryOperatorType.Subtract' new CodeMethodInvokeExpression (indentsPropRef' "Pop")))); " is 287.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddIndentHelpers,The length of the statement  "	popIndentMeth.Statements.Add (new CodeVariableDeclarationStatement (stringTypeRef' "last"' new CodeMethodInvokeExpression (currentIndentFieldRef' "Substring"' new CodeVariableReferenceExpression ("lastPos")))); " is 210.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddIndentHelpers,The length of the statement  "	popIndentMeth.Statements.Add (new CodeAssignStatement (currentIndentFieldRef' new CodeMethodInvokeExpression (currentIndentFieldRef' "Substring"' zeroPrim' new CodeVariableReferenceExpression ("lastPos")))); " is 207.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddIndentHelpers,The length of the statement  "	pushIndentMeth.Statements.Add (new CodeMethodInvokeExpression (indentsPropRef' "Push"' new CodePropertyReferenceExpression (new CodeArgumentReferenceExpression ("indent")' "Length"))); " is 184.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddIndentHelpers,The length of the statement  "	pushIndentMeth.Statements.Add (new CodeAssignStatement (currentIndentFieldRef' new CodeBinaryOperatorExpression (currentIndentFieldRef' CodeBinaryOperatorType.Add' new CodeArgumentReferenceExpression ("indent")))); " is 214.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddWriteHelpers,The length of the statement  "	writeMeth.Statements.Add (new CodeMethodInvokeExpression (genEnvPropRef' "Append"' new CodeArgumentReferenceExpression ("textToAppend"))); " is 138.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddWriteHelpers,The length of the statement  "	writeArgsMeth.Statements.Add (new CodeMethodInvokeExpression (genEnvPropRef' "AppendFormat"' formatParamRef' argsParamRef)); " is 124.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddWriteHelpers,The length of the statement  "	writeLineArgsMeth.Statements.Add (new CodeMethodInvokeExpression (genEnvPropRef' "AppendFormat"' formatParamRef' argsParamRef)); " is 128.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddToStringHelper,The length of the statement  "	formatProviderField.InitExpression = new CodePropertyReferenceExpression (new CodeTypeReferenceExpression (TypeRef<System.Globalization.CultureInfo> ())' "InvariantCulture"); " is 174.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddToStringHelper,The length of the statement  "	var formatProviderFieldRef = new CodeFieldReferenceExpression (new CodeThisReferenceExpression ()' formatProviderField.Name); " is 125.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddToStringHelper,The length of the statement  "	var typeLocal = new CodeVariableDeclarationStatement (TypeRef<Type> ()' "type"' new CodeMethodInvokeExpression (paramRef' "GetType")); " is 134.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddToStringHelper,The length of the statement  "	var iConvertibleTypeLocal = new CodeVariableDeclarationStatement (TypeRef<Type> ()' "iConvertibleType"' new CodeTypeOfExpression (TypeRef<IConvertible> ())); " is 157.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddToStringHelper,The length of the statement  "	meth.Statements.Add (new CodeConditionStatement (new CodeMethodInvokeExpression (iConvertibleTypeLocalRef' "IsAssignableFrom"' typeLocalRef)' new CodeMethodReturnStatement (new CodeMethodInvokeExpression (new CodeCastExpression (TypeRef<IConvertible> ()' paramRef)' "ToString"' formatProviderFieldRef)))); " is 305.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddToStringHelper,The length of the statement  "	var methInfoLocal = new CodeVariableDeclarationStatement (TypeRef<MethodInfo> ()' "methInfo"' new CodeMethodInvokeExpression (typeLocalRef' "GetMethod"' new CodePrimitiveExpression ("ToString")' new CodeArrayCreateExpression (TypeRef<Type> ()' new CodeExpression[] { " is 266.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,AddToStringHelper,The length of the statement  "	meth.Statements.Add (new CodeConditionStatement (NotNull (methInfoLocalRef)' new CodeMethodReturnStatement (new CodeCastExpression (TypeRef<string> ()' new CodeMethodInvokeExpression (methInfoLocalRef' "Invoke"' paramRef' new CodeArrayCreateExpression (TypeRef<object> ()' new CodeExpression[] { " is 295.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,MakeGetterLazy,The length of the statement  "	property.GetStatements.Insert (0' new CodeConditionStatement (NotNull (fieldRef)' new CodeAssignStatement (fieldRef' initExpression))); " is 135.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,NullCheck,The length of the statement  "	return new CodeConditionStatement (IsNull (expr)' new CodeThrowExceptionStatement (new CodeObjectCreateExpression (new CodeTypeReference (typeof(ArgumentNullException)' CodeTypeReferenceOptions.GlobalReference)' new CodePrimitiveExpression (exceptionMessage)))); " is 262.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,NotNull,The length of the statement  "	return new CodeBinaryOperatorExpression (reference' CodeBinaryOperatorType.IdentityInequality' new CodePrimitiveExpression (null)); " is 131.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,IsNull,The length of the statement  "	return new CodeBinaryOperatorExpression (reference' CodeBinaryOperatorType.ValueEquality' new CodePrimitiveExpression (null)); " is 126.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,IsFalse,The length of the statement  "	return new CodeBinaryOperatorExpression (expr' CodeBinaryOperatorType.ValueEquality' new CodePrimitiveExpression (false)); " is 122.
Long Statement,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,ArgNullCheck,The length of the statement  "	return new CodeConditionStatement (new CodeBinaryOperatorExpression (value' CodeBinaryOperatorType.ValueEquality' new CodePrimitiveExpression (null))' new CodeThrowExceptionStatement (new CodeObjectCreateExpression (typeof(ArgumentNullException)' argNullExcArgs))); " is 265.
Complex Conditional,Mono.TextTemplating,TemplatingEngine,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplatingEngine.cs,GetSettings,The conditional expression  "settings.HostSpecific || (!((IDirectiveProcessor)kv.Value).RequiresProcessingRunIsHostSpecific && ((hs = kv.Value as IRecognizeHostSpecific) == null || !hs.RequiresProcessingRunIsHostSpecific))"  is complex.
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,GetBlockEnd,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '>' && content [position - 1] == '#' && content [position - 2] != '\\') {  		value = content.Substring (start' position - start - 1);  		position++;  		TagEndLocation = nextStateLocation;  		//skip newlines directly after blocks' unless they're expressions  		if (State != State.Expression && (position += IsNewLine ()) > 0) {  			nextStateLocation = nextStateLocation.AddLine ();  		}  		return State.Content;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,GetBlockEnd,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '>' && content [position - 1] == '#' && content [position - 2] != '\\') {  	value = content.Substring (start' position - start - 1);  	position++;  	TagEndLocation = nextStateLocation;  	//skip newlines directly after blocks' unless they're expressions  	if (State != State.Expression && (position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,GetBlockEnd,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '>' && content [position - 1] == '#' && content [position - 2] != '\\') {  	value = content.Substring (start' position - start - 1);  	position++;  	TagEndLocation = nextStateLocation;  	//skip newlines directly after blocks' unless they're expressions  	if (State != State.Expression && (position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,GetBlockEnd,The following statement contains a magic number: if (c == '>' && content [position - 1] == '#' && content [position - 2] != '\\') {  	value = content.Substring (start' position - start - 1);  	position++;  	TagEndLocation = nextStateLocation;  	//skip newlines directly after blocks' unless they're expressions  	if (State != State.Expression && (position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	nextStateTagStartLocation = nextStateLocation;  	nextStateLocation = nextStateLocation.AddCol ();  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  		TagEndLocation = nextStateLocation;  		char type = content [position + 2];  		if (type == '@') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Directive;  		}  		if (type == '=') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Expression;  		}  		if (type == '+') {  			nextStateLocation = nextStateLocation.AddCols (2);  			value = content.Substring (start' position - start);  			position += 3;  			return State.Helper;  		}  		value = content.Substring (start' position - start);  		nextStateLocation = nextStateLocation.AddCol ();  		position += 2;  		return State.Block;  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (c == '<' && position + 2 < content.Length && content [position + 1] == '#') {  	TagEndLocation = nextStateLocation;  	char type = content [position + 2];  	if (type == '@') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Directive;  	}  	if (type == '=') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Expression;  	}  	if (type == '+') {  		nextStateLocation = nextStateLocation.AddCols (2);  		value = content.Substring (start' position - start);  		position += 3;  		return State.Helper;  	}  	value = content.Substring (start' position - start);  	nextStateLocation = nextStateLocation.AddCol ();  	position += 2;  	return State.Block;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (type == '@') {  	nextStateLocation = nextStateLocation.AddCols (2);  	value = content.Substring (start' position - start);  	position += 3;  	return State.Directive;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (type == '@') {  	nextStateLocation = nextStateLocation.AddCols (2);  	value = content.Substring (start' position - start);  	position += 3;  	return State.Directive;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: nextStateLocation = nextStateLocation.AddCols (2);  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: position += 3;  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (type == '=') {  	nextStateLocation = nextStateLocation.AddCols (2);  	value = content.Substring (start' position - start);  	position += 3;  	return State.Expression;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (type == '=') {  	nextStateLocation = nextStateLocation.AddCols (2);  	value = content.Substring (start' position - start);  	position += 3;  	return State.Expression;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: nextStateLocation = nextStateLocation.AddCols (2);  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: position += 3;  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (type == '+') {  	nextStateLocation = nextStateLocation.AddCols (2);  	value = content.Substring (start' position - start);  	position += 3;  	return State.Helper;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: if (type == '+') {  	nextStateLocation = nextStateLocation.AddCols (2);  	value = content.Substring (start' position - start);  	position += 3;  	return State.Helper;  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: nextStateLocation = nextStateLocation.AddCols (2);  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: position += 3;  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInContent,The following statement contains a magic number: position += 2;  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (Char.IsLetter (c)) {  		return State.DirectiveName;  	}  	else if (c == '=') {  		nextStateLocation = nextStateLocation.AddCol ();  		position++;  		return State.DirectiveValue;  	}  	else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  		position += 2;  		TagEndLocation = nextStateLocation.AddCols (2);  		nextStateLocation = nextStateLocation.AddCols (3);  		//skip newlines directly after directives  		if ((position += IsNewLine ()) > 0) {  			nextStateLocation = nextStateLocation.AddLine ();  		}  		return State.Content;  	}  	else if (!Char.IsWhiteSpace (c)) {  		throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  	}  	else {  		nextStateLocation = nextStateLocation.AddCol ();  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (Char.IsLetter (c)) {  		return State.DirectiveName;  	}  	else if (c == '=') {  		nextStateLocation = nextStateLocation.AddCol ();  		position++;  		return State.DirectiveValue;  	}  	else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  		position += 2;  		TagEndLocation = nextStateLocation.AddCols (2);  		nextStateLocation = nextStateLocation.AddCols (3);  		//skip newlines directly after directives  		if ((position += IsNewLine ()) > 0) {  			nextStateLocation = nextStateLocation.AddLine ();  		}  		return State.Content;  	}  	else if (!Char.IsWhiteSpace (c)) {  		throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  	}  	else {  		nextStateLocation = nextStateLocation.AddCol ();  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: for (; position < content.Length; position++) {  	char c = content [position];  	if (c == '\r') {  		if (position + 1 < content.Length && content [position + 1] == '\n')  			position++;  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (c == '\n') {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	else if (Char.IsLetter (c)) {  		return State.DirectiveName;  	}  	else if (c == '=') {  		nextStateLocation = nextStateLocation.AddCol ();  		position++;  		return State.DirectiveValue;  	}  	else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  		position += 2;  		TagEndLocation = nextStateLocation.AddCols (2);  		nextStateLocation = nextStateLocation.AddCols (3);  		//skip newlines directly after directives  		if ((position += IsNewLine ()) > 0) {  			nextStateLocation = nextStateLocation.AddLine ();  		}  		return State.Content;  	}  	else if (!Char.IsWhiteSpace (c)) {  		throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  	}  	else {  		nextStateLocation = nextStateLocation.AddCol ();  	}  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '\r') {  	if (position + 1 < content.Length && content [position + 1] == '\n')  		position++;  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '\n') {  	nextStateLocation = nextStateLocation.AddLine ();  }  else if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (Char.IsLetter (c)) {  	return State.DirectiveName;  }  else if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '=') {  	nextStateLocation = nextStateLocation.AddCol ();  	position++;  	return State.DirectiveValue;  }  else if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: if (c == '#' && position + 1 < content.Length && content [position + 1] == '>') {  	position += 2;  	TagEndLocation = nextStateLocation.AddCols (2);  	nextStateLocation = nextStateLocation.AddCols (3);  	//skip newlines directly after directives  	if ((position += IsNewLine ()) > 0) {  		nextStateLocation = nextStateLocation.AddLine ();  	}  	return State.Content;  }  else if (!Char.IsWhiteSpace (c)) {  	throw new ParserException ("Directive ended unexpectedly with character '" + c + "'"' nextStateLocation);  }  else {  	nextStateLocation = nextStateLocation.AddCol ();  }  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: position += 2;  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: TagEndLocation = nextStateLocation.AddCols (2);  
Magic Number,Mono.TextTemplating,Tokeniser,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\Tokeniser.cs,NextStateInDirective,The following statement contains a magic number: nextStateLocation = nextStateLocation.AddCols (3);  
Magic Number,Mono.TextTemplating,FileUtil,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\FileUtil.cs,AbsoluteToRelativePath,The following statement contains a magic number: fixed (char* bPtr = baseDirectoryPath' aPtr = absPath) {  	var bEnd = bPtr + baseDirectoryPath.Length;  	var aEnd = aPtr + absPath.Length;  	char* lastStartA = aEnd;  	char* lastStartB = bEnd;  	int indx = 0;  	// search common base path  	var a = aPtr;  	var b = bPtr;  	while (a < aEnd) {  		if (*a != *b)  			break;  		if (IsSeparator (*a)) {  			indx++;  			lastStartA = a + 1;  			lastStartB = b;  		}  		a++;  		b++;  		if (b >= bEnd) {  			if (a >= aEnd || IsSeparator (*a)) {  				indx++;  				lastStartA = a + 1;  				lastStartB = b;  			}  			break;  		}  	}  	if (indx == 0)  		return absPath;  	if (lastStartA >= aEnd)  		return ".";  	// handle case a: some/path b: some/path/deeper...  	if (a >= aEnd) {  		if (IsSeparator (*b)) {  			lastStartA = a + 1;  			lastStartB = b;  		}  	}  	// look how many levels to go up into the base path  	int goUpCount = 0;  	while (lastStartB < bEnd) {  		if (IsSeparator (*lastStartB))  			goUpCount++;  		lastStartB++;  	}  	var size = goUpCount * 2 + goUpCount + aEnd - lastStartA;  	var result = new char[size];  	fixed (char* rPtr = result) {  		// go paths up  		var r = rPtr;  		for (int i = 0; i < goUpCount; i++) {  			*(r++) = '.';  			*(r++) = '.';  			*(r++) = Path.DirectorySeparatorChar;  		}  		// copy the remaining absulute path  		while (lastStartA < aEnd)  			*(r++) = *(lastStartA++);  	}  	return new string (result);  }  
Missing Default,Mono.TextTemplating,TemplateGenerator,C:\repos\joncloud_monodevelop\main\src\addins\TextTemplating\Mono.TextTemplating\Mono.TextTemplating\TemplateGenerator.cs,GetHostOption,The following switch statement is missing a default case: switch (optionName) {  case "UseRelativeLinePragmas":  	return UseRelativeLinePragmas;  }  
