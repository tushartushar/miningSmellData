Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The method has 117 lines of code.
Long Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetDataTypes,The method has 379 lines of code.
Long Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlDialect,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlDialect.cs,IsReservedWord,The method has 395 lines of code.
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTables,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetParams,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableTriggers,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetDataType,Cyclomatic complexity of the method is 73
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTablespaces,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableCreateStatement,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetConstraintString,Cyclomatic complexity of the method is 27
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTriggerCreateStatement,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlDialect,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlDialect.cs,IsReservedWord,Cyclomatic complexity of the method is 388
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlCreateDatabaseWidget,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\Widgets\NpgsqlCreateDatabaseWidget.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Database.Sql.Npgsql,NpgsqlCreateDatabaseWidget,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\Widgets\NpgsqlCreateDatabaseWidget.cs,SetDatabaseOptions,Cyclomatic complexity of the method is 9
Long Parameter List,MonoDevelop.Database.Sql.Npgsql,NpgsqlDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlDbFactory.cs,Generate,The method has 16 parameters.
Long Parameter List,MonoDevelop.Database.Sql.Npgsql,NpgsqlDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlDbFactory.cs,Generate,The method has 14 parameters.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlConnectionProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlConnectionProvider.cs,CreateConnection,The length of the statement  "			//User ID=root;Password=myPassword;Host=localhost;Port=5432;Database=myDataBase;Pooling=true;Min Pool Size=0;Max Pool Size=100;Connection Lifetime=0; " is 149.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlConnectionProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlConnectionProvider.cs,CreateConnection,The length of the statement  "				connStr = String.Format ("User ID={0};Password={1};Host={2};Port={3};Database={4};"' settings.Username' settings.Password' settings.Server' settings.Port' settings.Database); " is 174.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlConnectionProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlConnectionProvider.cs,CreateConnection,The length of the statement  "				connStr = String.Format ("User ID={0};Password={1};Host={2};Database={3};"' settings.Username' settings.Password' settings.Server' settings.Database); " is 150.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The length of the statement  "							ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn); " is 134.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetParams,The length of the statement  "		using (IDbCommand cmd = conn.CreateCommand (string.Format ("select format_type(oid' null) from pg_type WHERE oid = '{0}'::oid"' typesArray [idx]))) { " is 149.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,The length of the statement  "								(constraint as ForeignKeyConstraintSchema).ReferenceTableName = Regex.Match (r.GetString (1)' match).Groups [0].Captures [0].Value; " is 131.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableTriggers,The length of the statement  "						trigger.TriggerEvent = (TriggerEvent)Enum.Parse (typeof(TriggerEvent)' r.GetString (r.GetOrdinal ("event_manipulation"))); " is 122.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,DropDatabase,The length of the statement  "		connStr = String.Format ("User ID={0};Password={1};Host={2};Port={3};Database={4};"' newSettings.Username' newSettings.Password' newSettings.Server' newSettings.Port' newSettings.Database); " is 189.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,DropDatabase,The length of the statement  "		connStr = String.Format ("User ID={0};Password={1};Host={2};Database={3};"' newSettings.Username' newSettings.Password' newSettings.Server' newSettings.Database); " is 162.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlDbFactory.cs,Generate,The length of the statement  "	return SqlMetalServices.Generate (Provider' connection' outputType' outputFile' language' style' defaultNamespace' entityBase' entityAttr' membersAttr' generateTypes' culture' generateSchema' generateTimestamp' overrideEqualAndHash' extractProcedures' pluralize); " is 263.
Long Statement,MonoDevelop.Database.Sql.Npgsql,NpgsqlDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlDbFactory.cs,Generate,The length of the statement  "	return SqlMetalServices.Generate (Provider' connection' outputType' outputFile' defaultNamespace' entityBase' entityAttr' membersAttr' generateTypes' culture' generateSchema' generateTimestamp' overrideEqualAndHash' extractProcedures' pluralize); " is 246.
Virtual Method Call from Constructor,MonoDevelop.Database.Sql.Npgsql,NpgsqlCreateDatabaseDialog,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\Dialogs\NpgsqlCreateDatabaseDialog.cs,NpgsqlCreateDatabaseDialog,The constructor "NpgsqlCreateDatabaseDialog" calls a virtual method "ValidateFields".
Empty Catch Block,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,The method has an empty catch block.
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTables,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (@"SELECT DISTINCT   						c.relname'   						n.nspname'   						u.usename  					FROM   						pg_class c'   						pg_namespace n'   						pg_user u  					WHERE 	  						c.relnamespace = n.oid  						AND c.relowner = u.usesysid  						AND c.relkind='r'   						AND NOT EXISTS  							(SELECT 1 FROM pg_rewrite r WHERE r.ev_class = c.oid AND r.ev_type = '1')  					ORDER BY relname;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					TableSchema table = new TableSchema (this);  					table.Name = r.GetString (0);  					table.IsSystemTable = table.Name.StartsWith ("pg_") || table.Name.StartsWith ("sql_");  					table.SchemaName = r.GetString (1);  					table.OwnerName = r.GetString (2);  					// TODO: Fill table.Definition  					tables.Add (table);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTables,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT DISTINCT   						c.relname'   						n.nspname'   						u.usename  					FROM   						pg_class c'   						pg_namespace n'   						pg_user u  					WHERE 	  						c.relnamespace = n.oid  						AND c.relowner = u.usesysid  						AND c.relkind='r'   						AND NOT EXISTS  							(SELECT 1 FROM pg_rewrite r WHERE r.ev_class = c.oid AND r.ev_type = '1')  					ORDER BY relname;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				TableSchema table = new TableSchema (this);  				table.Name = r.GetString (0);  				table.IsSystemTable = table.Name.StartsWith ("pg_") || table.Name.StartsWith ("sql_");  				table.SchemaName = r.GetString (1);  				table.OwnerName = r.GetString (2);  				// TODO: Fill table.Definition  				tables.Add (table);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTables,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			TableSchema table = new TableSchema (this);  			table.Name = r.GetString (0);  			table.IsSystemTable = table.Name.StartsWith ("pg_") || table.Name.StartsWith ("sql_");  			table.SchemaName = r.GetString (1);  			table.OwnerName = r.GetString (2);  			// TODO: Fill table.Definition  			tables.Add (table);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTables,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		TableSchema table = new TableSchema (this);  		table.Name = r.GetString (0);  		table.IsSystemTable = table.Name.StartsWith ("pg_") || table.Name.StartsWith ("sql_");  		table.SchemaName = r.GetString (1);  		table.OwnerName = r.GetString (2);  		// TODO: Fill table.Definition  		tables.Add (table);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTables,The following statement contains a magic number: while (r.Read ()) {  	TableSchema table = new TableSchema (this);  	table.Name = r.GetString (0);  	table.IsSystemTable = table.Name.StartsWith ("pg_") || table.Name.StartsWith ("sql_");  	table.SchemaName = r.GetString (1);  	table.OwnerName = r.GetString (2);  	// TODO: Fill table.Definition  	tables.Add (table);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTables,The following statement contains a magic number: table.OwnerName = r.GetString (2);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						a.attname'   						a.attnotnull'   						a.attlen'  						t.typname'   						adef.adsrc   					FROM  						pg_catalog.pg_attribute a 					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid=adef.adrelid  						AND a.attnum=adef.adnum  					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid=t.oid  					WHERE  						a.attrelid =   							(SELECT oid   							FROM pg_catalog.pg_class  							WHERE relname='{0}')  						AND a.attnum > 0   						AND NOT a.attisdropped  						AND a.atttypid = t.oid  					ORDER BY a.attnum;"' table.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (0);  					column.DataTypeName = r.GetString (3);  					column.IsNullable = !r.GetBoolean (1);  					column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  					column.HasDefaultValue = !r.IsDBNull (4);  					// TODO: fill column.Definition  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (NpgsqlException) {  			// Don't raise error' if the table doesn't exists return an empty collection  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						a.attname'   						a.attnotnull'   						a.attlen'  						t.typname'   						adef.adsrc   					FROM  						pg_catalog.pg_attribute a 					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid=adef.adrelid  						AND a.attnum=adef.adnum  					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid=t.oid  					WHERE  						a.attrelid =   							(SELECT oid   							FROM pg_catalog.pg_class  							WHERE relname='{0}')  						AND a.attnum > 0   						AND NOT a.attisdropped  						AND a.atttypid = t.oid  					ORDER BY a.attnum;"' table.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (0);  					column.DataTypeName = r.GetString (3);  					column.IsNullable = !r.GetBoolean (1);  					column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  					column.HasDefaultValue = !r.IsDBNull (4);  					// TODO: fill column.Definition  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (NpgsqlException) {  			// Don't raise error' if the table doesn't exists return an empty collection  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						a.attname'   						a.attnotnull'   						a.attlen'  						t.typname'   						adef.adsrc   					FROM  						pg_catalog.pg_attribute a 					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid=adef.adrelid  						AND a.attnum=adef.adnum  					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid=t.oid  					WHERE  						a.attrelid =   							(SELECT oid   							FROM pg_catalog.pg_class  							WHERE relname='{0}')  						AND a.attnum > 0   						AND NOT a.attisdropped  						AND a.atttypid = t.oid  					ORDER BY a.attnum;"' table.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (0);  					column.DataTypeName = r.GetString (3);  					column.IsNullable = !r.GetBoolean (1);  					column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  					column.HasDefaultValue = !r.IsDBNull (4);  					// TODO: fill column.Definition  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (NpgsqlException) {  			// Don't raise error' if the table doesn't exists return an empty collection  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						a.attname'   						a.attnotnull'   						a.attlen'  						t.typname'   						adef.adsrc   					FROM  						pg_catalog.pg_attribute a 					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid=adef.adrelid  						AND a.attnum=adef.adnum  					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid=t.oid  					WHERE  						a.attrelid =   							(SELECT oid   							FROM pg_catalog.pg_class  							WHERE relname='{0}')  						AND a.attnum > 0   						AND NOT a.attisdropped  						AND a.atttypid = t.oid  					ORDER BY a.attnum;"' table.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = r.GetString (0);  					column.DataTypeName = r.GetString (3);  					column.IsNullable = !r.GetBoolean (1);  					column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  					column.HasDefaultValue = !r.IsDBNull (4);  					// TODO: fill column.Definition  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (NpgsqlException) {  			// Don't raise error' if the table doesn't exists return an empty collection  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						a.attname'   						a.attnotnull'   						a.attlen'  						t.typname'   						adef.adsrc   					FROM  						pg_catalog.pg_attribute a 					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid=adef.adrelid  						AND a.attnum=adef.adnum  					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid=t.oid  					WHERE  						a.attrelid =   							(SELECT oid   							FROM pg_catalog.pg_class  							WHERE relname='{0}')  						AND a.attnum > 0   						AND NOT a.attisdropped  						AND a.atttypid = t.oid  					ORDER BY a.attnum;"' table.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (0);  				column.DataTypeName = r.GetString (3);  				column.IsNullable = !r.GetBoolean (1);  				column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  				column.HasDefaultValue = !r.IsDBNull (4);  				// TODO: fill column.Definition  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (NpgsqlException) {  		// Don't raise error' if the table doesn't exists return an empty collection  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						a.attname'   						a.attnotnull'   						a.attlen'  						t.typname'   						adef.adsrc   					FROM  						pg_catalog.pg_attribute a 					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid=adef.adrelid  						AND a.attnum=adef.adnum  					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid=t.oid  					WHERE  						a.attrelid =   							(SELECT oid   							FROM pg_catalog.pg_class  							WHERE relname='{0}')  						AND a.attnum > 0   						AND NOT a.attisdropped  						AND a.atttypid = t.oid  					ORDER BY a.attnum;"' table.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (0);  				column.DataTypeName = r.GetString (3);  				column.IsNullable = !r.GetBoolean (1);  				column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  				column.HasDefaultValue = !r.IsDBNull (4);  				// TODO: fill column.Definition  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (NpgsqlException) {  		// Don't raise error' if the table doesn't exists return an empty collection  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						a.attname'   						a.attnotnull'   						a.attlen'  						t.typname'   						adef.adsrc   					FROM  						pg_catalog.pg_attribute a 					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid=adef.adrelid  						AND a.attnum=adef.adnum  					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid=t.oid  					WHERE  						a.attrelid =   							(SELECT oid   							FROM pg_catalog.pg_class  							WHERE relname='{0}')  						AND a.attnum > 0   						AND NOT a.attisdropped  						AND a.atttypid = t.oid  					ORDER BY a.attnum;"' table.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (0);  				column.DataTypeName = r.GetString (3);  				column.IsNullable = !r.GetBoolean (1);  				column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  				column.HasDefaultValue = !r.IsDBNull (4);  				// TODO: fill column.Definition  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (NpgsqlException) {  		// Don't raise error' if the table doesn't exists return an empty collection  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						a.attname'   						a.attnotnull'   						a.attlen'  						t.typname'   						adef.adsrc   					FROM  						pg_catalog.pg_attribute a 					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid=adef.adrelid  						AND a.attnum=adef.adnum  					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid=t.oid  					WHERE  						a.attrelid =   							(SELECT oid   							FROM pg_catalog.pg_class  							WHERE relname='{0}')  						AND a.attnum > 0   						AND NOT a.attisdropped  						AND a.atttypid = t.oid  					ORDER BY a.attnum;"' table.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = r.GetString (0);  				column.DataTypeName = r.GetString (3);  				column.IsNullable = !r.GetBoolean (1);  				column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  				column.HasDefaultValue = !r.IsDBNull (4);  				// TODO: fill column.Definition  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (NpgsqlException) {  		// Don't raise error' if the table doesn't exists return an empty collection  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (0);  			column.DataTypeName = r.GetString (3);  			column.IsNullable = !r.GetBoolean (1);  			column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  			column.HasDefaultValue = !r.IsDBNull (4);  			// TODO: fill column.Definition  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (NpgsqlException) {  	// Don't raise error' if the table doesn't exists return an empty collection  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (0);  			column.DataTypeName = r.GetString (3);  			column.IsNullable = !r.GetBoolean (1);  			column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  			column.HasDefaultValue = !r.IsDBNull (4);  			// TODO: fill column.Definition  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (NpgsqlException) {  	// Don't raise error' if the table doesn't exists return an empty collection  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (0);  			column.DataTypeName = r.GetString (3);  			column.IsNullable = !r.GetBoolean (1);  			column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  			column.HasDefaultValue = !r.IsDBNull (4);  			// TODO: fill column.Definition  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (NpgsqlException) {  	// Don't raise error' if the table doesn't exists return an empty collection  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = r.GetString (0);  			column.DataTypeName = r.GetString (3);  			column.IsNullable = !r.GetBoolean (1);  			column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  			column.HasDefaultValue = !r.IsDBNull (4);  			// TODO: fill column.Definition  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (NpgsqlException) {  	// Don't raise error' if the table doesn't exists return an empty collection  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (0);  		column.DataTypeName = r.GetString (3);  		column.IsNullable = !r.GetBoolean (1);  		column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  		column.HasDefaultValue = !r.IsDBNull (4);  		// TODO: fill column.Definition  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (0);  		column.DataTypeName = r.GetString (3);  		column.IsNullable = !r.GetBoolean (1);  		column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  		column.HasDefaultValue = !r.IsDBNull (4);  		// TODO: fill column.Definition  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (0);  		column.DataTypeName = r.GetString (3);  		column.IsNullable = !r.GetBoolean (1);  		column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  		column.HasDefaultValue = !r.IsDBNull (4);  		// TODO: fill column.Definition  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' table);  		column.Name = r.GetString (0);  		column.DataTypeName = r.GetString (3);  		column.IsNullable = !r.GetBoolean (1);  		column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  		column.HasDefaultValue = !r.IsDBNull (4);  		// TODO: fill column.Definition  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (0);  	column.DataTypeName = r.GetString (3);  	column.IsNullable = !r.GetBoolean (1);  	column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  	column.HasDefaultValue = !r.IsDBNull (4);  	// TODO: fill column.Definition  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (0);  	column.DataTypeName = r.GetString (3);  	column.IsNullable = !r.GetBoolean (1);  	column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  	column.HasDefaultValue = !r.IsDBNull (4);  	// TODO: fill column.Definition  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (0);  	column.DataTypeName = r.GetString (3);  	column.IsNullable = !r.GetBoolean (1);  	column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  	column.HasDefaultValue = !r.IsDBNull (4);  	// TODO: fill column.Definition  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' table);  	column.Name = r.GetString (0);  	column.DataTypeName = r.GetString (3);  	column.IsNullable = !r.GetBoolean (1);  	column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  	column.HasDefaultValue = !r.IsDBNull (4);  	// TODO: fill column.Definition  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DataTypeName = r.GetString (3);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.DefaultValue = r.IsDBNull (4) ? null : r.GetString (4);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableColumns,The following statement contains a magic number: column.HasDefaultValue = !r.IsDBNull (4);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: using (System.IO.Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream ("Encoding.xml")) {  	XmlDocument doc = new XmlDocument ();  	doc.Load (stream);  	var encodings = doc.GetElementsByTagName ("Encoding");  	foreach (var enc in encodings) {  		NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  		newEnc.Server = Convert.ToBoolean (((XmlNode)enc).Attributes ["Server"].Value);  		newEnc.Name = ((XmlNode)enc).ChildNodes [0].InnerText;  		newEnc.Description = ((XmlNode)enc).ChildNodes [1].InnerText;  		newEnc.Language = ((XmlNode)enc).ChildNodes [2].InnerText;  		newEnc.BytesChar = ((XmlNode)enc).ChildNodes [3].InnerText;  		newEnc.Aliases = ((XmlNode)enc).ChildNodes [4].InnerText;  		coll.Add (newEnc);  	}  	// This doesn't work until this bug isn't fixed   	//   	//				XmlTextReader reader = new XmlTextReader (stream);  	//				XDocument encodingsDoc = XDocument.Load (reader' LoadOptions.None);  	//				  	//				var encodings = from enc in encodingsDoc.Descendants ("Encodings")  	//					select new {  	//						IsServer = Convert.ToBoolean(enc.Attribute("Server").Value)'  	//						Name = enc.Element("Name").Value'  	//						Description = enc.Element("Description").Value'  	//						Language = enc.Element("Language").Value'  	//						BytesChar = enc.Element("BytesChar").Value'  	//						Aliases = enc.Element("Aliases").Value  	//					};  	//				  	//				foreach (var enc in encodings) {  	//					NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  	//					newEnc.Server = enc.IsServer;  	//					newEnc.Name = enc.Name;  	//					newEnc.Description = enc.Description;  	//					newEnc.Language = enc.Language;  	//					newEnc.BytesChar = enc.BytesChar;  	//					newEnc.Aliases = enc.Aliases;  	//					coll.Add (newEnc);  	//				}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: using (System.IO.Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream ("Encoding.xml")) {  	XmlDocument doc = new XmlDocument ();  	doc.Load (stream);  	var encodings = doc.GetElementsByTagName ("Encoding");  	foreach (var enc in encodings) {  		NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  		newEnc.Server = Convert.ToBoolean (((XmlNode)enc).Attributes ["Server"].Value);  		newEnc.Name = ((XmlNode)enc).ChildNodes [0].InnerText;  		newEnc.Description = ((XmlNode)enc).ChildNodes [1].InnerText;  		newEnc.Language = ((XmlNode)enc).ChildNodes [2].InnerText;  		newEnc.BytesChar = ((XmlNode)enc).ChildNodes [3].InnerText;  		newEnc.Aliases = ((XmlNode)enc).ChildNodes [4].InnerText;  		coll.Add (newEnc);  	}  	// This doesn't work until this bug isn't fixed   	//   	//				XmlTextReader reader = new XmlTextReader (stream);  	//				XDocument encodingsDoc = XDocument.Load (reader' LoadOptions.None);  	//				  	//				var encodings = from enc in encodingsDoc.Descendants ("Encodings")  	//					select new {  	//						IsServer = Convert.ToBoolean(enc.Attribute("Server").Value)'  	//						Name = enc.Element("Name").Value'  	//						Description = enc.Element("Description").Value'  	//						Language = enc.Element("Language").Value'  	//						BytesChar = enc.Element("BytesChar").Value'  	//						Aliases = enc.Element("Aliases").Value  	//					};  	//				  	//				foreach (var enc in encodings) {  	//					NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  	//					newEnc.Server = enc.IsServer;  	//					newEnc.Name = enc.Name;  	//					newEnc.Description = enc.Description;  	//					newEnc.Language = enc.Language;  	//					newEnc.BytesChar = enc.BytesChar;  	//					newEnc.Aliases = enc.Aliases;  	//					coll.Add (newEnc);  	//				}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: using (System.IO.Stream stream = Assembly.GetExecutingAssembly ().GetManifestResourceStream ("Encoding.xml")) {  	XmlDocument doc = new XmlDocument ();  	doc.Load (stream);  	var encodings = doc.GetElementsByTagName ("Encoding");  	foreach (var enc in encodings) {  		NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  		newEnc.Server = Convert.ToBoolean (((XmlNode)enc).Attributes ["Server"].Value);  		newEnc.Name = ((XmlNode)enc).ChildNodes [0].InnerText;  		newEnc.Description = ((XmlNode)enc).ChildNodes [1].InnerText;  		newEnc.Language = ((XmlNode)enc).ChildNodes [2].InnerText;  		newEnc.BytesChar = ((XmlNode)enc).ChildNodes [3].InnerText;  		newEnc.Aliases = ((XmlNode)enc).ChildNodes [4].InnerText;  		coll.Add (newEnc);  	}  	// This doesn't work until this bug isn't fixed   	//   	//				XmlTextReader reader = new XmlTextReader (stream);  	//				XDocument encodingsDoc = XDocument.Load (reader' LoadOptions.None);  	//				  	//				var encodings = from enc in encodingsDoc.Descendants ("Encodings")  	//					select new {  	//						IsServer = Convert.ToBoolean(enc.Attribute("Server").Value)'  	//						Name = enc.Element("Name").Value'  	//						Description = enc.Element("Description").Value'  	//						Language = enc.Element("Language").Value'  	//						BytesChar = enc.Element("BytesChar").Value'  	//						Aliases = enc.Element("Aliases").Value  	//					};  	//				  	//				foreach (var enc in encodings) {  	//					NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  	//					newEnc.Server = enc.IsServer;  	//					newEnc.Name = enc.Name;  	//					newEnc.Description = enc.Description;  	//					newEnc.Language = enc.Language;  	//					newEnc.BytesChar = enc.BytesChar;  	//					newEnc.Aliases = enc.Aliases;  	//					coll.Add (newEnc);  	//				}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: foreach (var enc in encodings) {  	NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  	newEnc.Server = Convert.ToBoolean (((XmlNode)enc).Attributes ["Server"].Value);  	newEnc.Name = ((XmlNode)enc).ChildNodes [0].InnerText;  	newEnc.Description = ((XmlNode)enc).ChildNodes [1].InnerText;  	newEnc.Language = ((XmlNode)enc).ChildNodes [2].InnerText;  	newEnc.BytesChar = ((XmlNode)enc).ChildNodes [3].InnerText;  	newEnc.Aliases = ((XmlNode)enc).ChildNodes [4].InnerText;  	coll.Add (newEnc);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: foreach (var enc in encodings) {  	NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  	newEnc.Server = Convert.ToBoolean (((XmlNode)enc).Attributes ["Server"].Value);  	newEnc.Name = ((XmlNode)enc).ChildNodes [0].InnerText;  	newEnc.Description = ((XmlNode)enc).ChildNodes [1].InnerText;  	newEnc.Language = ((XmlNode)enc).ChildNodes [2].InnerText;  	newEnc.BytesChar = ((XmlNode)enc).ChildNodes [3].InnerText;  	newEnc.Aliases = ((XmlNode)enc).ChildNodes [4].InnerText;  	coll.Add (newEnc);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: foreach (var enc in encodings) {  	NpgsqlEncoding newEnc = new NpgsqlEncoding (this);  	newEnc.Server = Convert.ToBoolean (((XmlNode)enc).Attributes ["Server"].Value);  	newEnc.Name = ((XmlNode)enc).ChildNodes [0].InnerText;  	newEnc.Description = ((XmlNode)enc).ChildNodes [1].InnerText;  	newEnc.Language = ((XmlNode)enc).ChildNodes [2].InnerText;  	newEnc.BytesChar = ((XmlNode)enc).ChildNodes [3].InnerText;  	newEnc.Aliases = ((XmlNode)enc).ChildNodes [4].InnerText;  	coll.Add (newEnc);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: newEnc.Language = ((XmlNode)enc).ChildNodes [2].InnerText;  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: newEnc.BytesChar = ((XmlNode)enc).ChildNodes [3].InnerText;  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetEncodings,The following statement contains a magic number: newEnc.Aliases = ((XmlNode)enc).ChildNodes [4].InnerText;  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						v.schemaname'   						v.viewname'   						v.viewowner'   						v.definition'  						(c.oid <= {0})'  						(SELECT   							description   						from   							pg_description pd'  							pg_class pc   						WHERE   							pc.oid = pd.objoid   							AND pc.relname= v.viewname)  					FROM   						pg_views v'   						pg_class c  					WHERE   						v.viewname = c.relname  					ORDER BY viewname"' LastSystemOID))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ViewSchema view = new ViewSchema (this);  					view.Name = r.GetString (1);  					view.OwnerName = r.GetString (2);  					view.SchemaName = r.GetString (0);  					view.IsSystemView = r.GetBoolean (4);  					view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  					// TODO: Fill view.Definition  					views.Add (view);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						v.schemaname'   						v.viewname'   						v.viewowner'   						v.definition'  						(c.oid <= {0})'  						(SELECT   							description   						from   							pg_description pd'  							pg_class pc   						WHERE   							pc.oid = pd.objoid   							AND pc.relname= v.viewname)  					FROM   						pg_views v'   						pg_class c  					WHERE   						v.viewname = c.relname  					ORDER BY viewname"' LastSystemOID))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ViewSchema view = new ViewSchema (this);  					view.Name = r.GetString (1);  					view.OwnerName = r.GetString (2);  					view.SchemaName = r.GetString (0);  					view.IsSystemView = r.GetBoolean (4);  					view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  					// TODO: Fill view.Definition  					views.Add (view);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						v.schemaname'   						v.viewname'   						v.viewowner'   						v.definition'  						(c.oid <= {0})'  						(SELECT   							description   						from   							pg_description pd'  							pg_class pc   						WHERE   							pc.oid = pd.objoid   							AND pc.relname= v.viewname)  					FROM   						pg_views v'   						pg_class c  					WHERE   						v.viewname = c.relname  					ORDER BY viewname"' LastSystemOID))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ViewSchema view = new ViewSchema (this);  					view.Name = r.GetString (1);  					view.OwnerName = r.GetString (2);  					view.SchemaName = r.GetString (0);  					view.IsSystemView = r.GetBoolean (4);  					view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  					// TODO: Fill view.Definition  					views.Add (view);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						v.schemaname'   						v.viewname'   						v.viewowner'   						v.definition'  						(c.oid <= {0})'  						(SELECT   							description   						from   							pg_description pd'  							pg_class pc   						WHERE   							pc.oid = pd.objoid   							AND pc.relname= v.viewname)  					FROM   						pg_views v'   						pg_class c  					WHERE   						v.viewname = c.relname  					ORDER BY viewname"' LastSystemOID))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ViewSchema view = new ViewSchema (this);  					view.Name = r.GetString (1);  					view.OwnerName = r.GetString (2);  					view.SchemaName = r.GetString (0);  					view.IsSystemView = r.GetBoolean (4);  					view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  					// TODO: Fill view.Definition  					views.Add (view);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						v.schemaname'   						v.viewname'   						v.viewowner'   						v.definition'  						(c.oid <= {0})'  						(SELECT   							description   						from   							pg_description pd'  							pg_class pc   						WHERE   							pc.oid = pd.objoid   							AND pc.relname= v.viewname)  					FROM   						pg_views v'   						pg_class c  					WHERE   						v.viewname = c.relname  					ORDER BY viewname"' LastSystemOID))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ViewSchema view = new ViewSchema (this);  				view.Name = r.GetString (1);  				view.OwnerName = r.GetString (2);  				view.SchemaName = r.GetString (0);  				view.IsSystemView = r.GetBoolean (4);  				view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  				// TODO: Fill view.Definition  				views.Add (view);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						v.schemaname'   						v.viewname'   						v.viewowner'   						v.definition'  						(c.oid <= {0})'  						(SELECT   							description   						from   							pg_description pd'  							pg_class pc   						WHERE   							pc.oid = pd.objoid   							AND pc.relname= v.viewname)  					FROM   						pg_views v'   						pg_class c  					WHERE   						v.viewname = c.relname  					ORDER BY viewname"' LastSystemOID))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ViewSchema view = new ViewSchema (this);  				view.Name = r.GetString (1);  				view.OwnerName = r.GetString (2);  				view.SchemaName = r.GetString (0);  				view.IsSystemView = r.GetBoolean (4);  				view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  				// TODO: Fill view.Definition  				views.Add (view);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						v.schemaname'   						v.viewname'   						v.viewowner'   						v.definition'  						(c.oid <= {0})'  						(SELECT   							description   						from   							pg_description pd'  							pg_class pc   						WHERE   							pc.oid = pd.objoid   							AND pc.relname= v.viewname)  					FROM   						pg_views v'   						pg_class c  					WHERE   						v.viewname = c.relname  					ORDER BY viewname"' LastSystemOID))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ViewSchema view = new ViewSchema (this);  				view.Name = r.GetString (1);  				view.OwnerName = r.GetString (2);  				view.SchemaName = r.GetString (0);  				view.IsSystemView = r.GetBoolean (4);  				view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  				// TODO: Fill view.Definition  				views.Add (view);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						v.schemaname'   						v.viewname'   						v.viewowner'   						v.definition'  						(c.oid <= {0})'  						(SELECT   							description   						from   							pg_description pd'  							pg_class pc   						WHERE   							pc.oid = pd.objoid   							AND pc.relname= v.viewname)  					FROM   						pg_views v'   						pg_class c  					WHERE   						v.viewname = c.relname  					ORDER BY viewname"' LastSystemOID))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ViewSchema view = new ViewSchema (this);  				view.Name = r.GetString (1);  				view.OwnerName = r.GetString (2);  				view.SchemaName = r.GetString (0);  				view.IsSystemView = r.GetBoolean (4);  				view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  				// TODO: Fill view.Definition  				views.Add (view);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ViewSchema view = new ViewSchema (this);  			view.Name = r.GetString (1);  			view.OwnerName = r.GetString (2);  			view.SchemaName = r.GetString (0);  			view.IsSystemView = r.GetBoolean (4);  			view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  			// TODO: Fill view.Definition  			views.Add (view);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ViewSchema view = new ViewSchema (this);  			view.Name = r.GetString (1);  			view.OwnerName = r.GetString (2);  			view.SchemaName = r.GetString (0);  			view.IsSystemView = r.GetBoolean (4);  			view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  			// TODO: Fill view.Definition  			views.Add (view);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ViewSchema view = new ViewSchema (this);  			view.Name = r.GetString (1);  			view.OwnerName = r.GetString (2);  			view.SchemaName = r.GetString (0);  			view.IsSystemView = r.GetBoolean (4);  			view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  			// TODO: Fill view.Definition  			views.Add (view);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ViewSchema view = new ViewSchema (this);  			view.Name = r.GetString (1);  			view.OwnerName = r.GetString (2);  			view.SchemaName = r.GetString (0);  			view.IsSystemView = r.GetBoolean (4);  			view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  			// TODO: Fill view.Definition  			views.Add (view);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ViewSchema view = new ViewSchema (this);  		view.Name = r.GetString (1);  		view.OwnerName = r.GetString (2);  		view.SchemaName = r.GetString (0);  		view.IsSystemView = r.GetBoolean (4);  		view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  		// TODO: Fill view.Definition  		views.Add (view);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ViewSchema view = new ViewSchema (this);  		view.Name = r.GetString (1);  		view.OwnerName = r.GetString (2);  		view.SchemaName = r.GetString (0);  		view.IsSystemView = r.GetBoolean (4);  		view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  		// TODO: Fill view.Definition  		views.Add (view);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ViewSchema view = new ViewSchema (this);  		view.Name = r.GetString (1);  		view.OwnerName = r.GetString (2);  		view.SchemaName = r.GetString (0);  		view.IsSystemView = r.GetBoolean (4);  		view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  		// TODO: Fill view.Definition  		views.Add (view);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ViewSchema view = new ViewSchema (this);  		view.Name = r.GetString (1);  		view.OwnerName = r.GetString (2);  		view.SchemaName = r.GetString (0);  		view.IsSystemView = r.GetBoolean (4);  		view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  		// TODO: Fill view.Definition  		views.Add (view);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: while (r.Read ()) {  	ViewSchema view = new ViewSchema (this);  	view.Name = r.GetString (1);  	view.OwnerName = r.GetString (2);  	view.SchemaName = r.GetString (0);  	view.IsSystemView = r.GetBoolean (4);  	view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  	// TODO: Fill view.Definition  	views.Add (view);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: while (r.Read ()) {  	ViewSchema view = new ViewSchema (this);  	view.Name = r.GetString (1);  	view.OwnerName = r.GetString (2);  	view.SchemaName = r.GetString (0);  	view.IsSystemView = r.GetBoolean (4);  	view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  	// TODO: Fill view.Definition  	views.Add (view);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: while (r.Read ()) {  	ViewSchema view = new ViewSchema (this);  	view.Name = r.GetString (1);  	view.OwnerName = r.GetString (2);  	view.SchemaName = r.GetString (0);  	view.IsSystemView = r.GetBoolean (4);  	view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  	// TODO: Fill view.Definition  	views.Add (view);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: while (r.Read ()) {  	ViewSchema view = new ViewSchema (this);  	view.Name = r.GetString (1);  	view.OwnerName = r.GetString (2);  	view.SchemaName = r.GetString (0);  	view.IsSystemView = r.GetBoolean (4);  	view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  	// TODO: Fill view.Definition  	views.Add (view);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: view.OwnerName = r.GetString (2);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: view.IsSystemView = r.GetBoolean (4);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViews,The following statement contains a magic number: view.Comment = r.IsDBNull (5) ? null : r.GetString (5);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						attname'   						typname'   						attlen'   						attnotnull 					FROM 						pg_catalog.pg_attribute a   					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid = adef.adrelid 						AND a.attnum = adef.adnum 					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid = t.oid 					WHERE 						a.attrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{0}') 						AND a.attnum > 0   						AND NOT a.attisdropped 					ORDER BY a.attnum;"' view.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' view);  					column.Name = r.GetString (0);  					column.DataTypeName = r.GetString (1);  					column.SchemaName = view.SchemaName;  					column.IsNullable = r.GetBoolean (3);  					column.DataType.LengthRange.Default = r.GetInt32 (2);  					// TODO: Fill column.Definition  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						attname'   						typname'   						attlen'   						attnotnull 					FROM 						pg_catalog.pg_attribute a   					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid = adef.adrelid 						AND a.attnum = adef.adnum 					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid = t.oid 					WHERE 						a.attrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{0}') 						AND a.attnum > 0   						AND NOT a.attisdropped 					ORDER BY a.attnum;"' view.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ColumnSchema column = new ColumnSchema (this' view);  					column.Name = r.GetString (0);  					column.DataTypeName = r.GetString (1);  					column.SchemaName = view.SchemaName;  					column.IsNullable = r.GetBoolean (3);  					column.DataType.LengthRange.Default = r.GetInt32 (2);  					// TODO: Fill column.Definition  					columns.Add (column);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						attname'   						typname'   						attlen'   						attnotnull 					FROM 						pg_catalog.pg_attribute a   					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid = adef.adrelid 						AND a.attnum = adef.adnum 					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid = t.oid 					WHERE 						a.attrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{0}') 						AND a.attnum > 0   						AND NOT a.attisdropped 					ORDER BY a.attnum;"' view.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' view);  				column.Name = r.GetString (0);  				column.DataTypeName = r.GetString (1);  				column.SchemaName = view.SchemaName;  				column.IsNullable = r.GetBoolean (3);  				column.DataType.LengthRange.Default = r.GetInt32 (2);  				// TODO: Fill column.Definition  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (string.Format (@"SELECT   						attname'   						typname'   						attlen'   						attnotnull 					FROM 						pg_catalog.pg_attribute a   					LEFT JOIN pg_catalog.pg_attrdef adef ON   						a.attrelid = adef.adrelid 						AND a.attnum = adef.adnum 					LEFT JOIN pg_catalog.pg_type t ON   						a.atttypid = t.oid 					WHERE 						a.attrelid = (SELECT oid FROM pg_catalog.pg_class WHERE relname='{0}') 						AND a.attnum > 0   						AND NOT a.attisdropped 					ORDER BY a.attnum;"' view.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ColumnSchema column = new ColumnSchema (this' view);  				column.Name = r.GetString (0);  				column.DataTypeName = r.GetString (1);  				column.SchemaName = view.SchemaName;  				column.IsNullable = r.GetBoolean (3);  				column.DataType.LengthRange.Default = r.GetInt32 (2);  				// TODO: Fill column.Definition  				columns.Add (column);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' view);  			column.Name = r.GetString (0);  			column.DataTypeName = r.GetString (1);  			column.SchemaName = view.SchemaName;  			column.IsNullable = r.GetBoolean (3);  			column.DataType.LengthRange.Default = r.GetInt32 (2);  			// TODO: Fill column.Definition  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ColumnSchema column = new ColumnSchema (this' view);  			column.Name = r.GetString (0);  			column.DataTypeName = r.GetString (1);  			column.SchemaName = view.SchemaName;  			column.IsNullable = r.GetBoolean (3);  			column.DataType.LengthRange.Default = r.GetInt32 (2);  			// TODO: Fill column.Definition  			columns.Add (column);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' view);  		column.Name = r.GetString (0);  		column.DataTypeName = r.GetString (1);  		column.SchemaName = view.SchemaName;  		column.IsNullable = r.GetBoolean (3);  		column.DataType.LengthRange.Default = r.GetInt32 (2);  		// TODO: Fill column.Definition  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ColumnSchema column = new ColumnSchema (this' view);  		column.Name = r.GetString (0);  		column.DataTypeName = r.GetString (1);  		column.SchemaName = view.SchemaName;  		column.IsNullable = r.GetBoolean (3);  		column.DataType.LengthRange.Default = r.GetInt32 (2);  		// TODO: Fill column.Definition  		columns.Add (column);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' view);  	column.Name = r.GetString (0);  	column.DataTypeName = r.GetString (1);  	column.SchemaName = view.SchemaName;  	column.IsNullable = r.GetBoolean (3);  	column.DataType.LengthRange.Default = r.GetInt32 (2);  	// TODO: Fill column.Definition  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: while (r.Read ()) {  	ColumnSchema column = new ColumnSchema (this' view);  	column.Name = r.GetString (0);  	column.DataTypeName = r.GetString (1);  	column.SchemaName = view.SchemaName;  	column.IsNullable = r.GetBoolean (3);  	column.DataType.LengthRange.Default = r.GetInt32 (2);  	// TODO: Fill column.Definition  	columns.Add (column);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: column.IsNullable = r.GetBoolean (3);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewColumns,The following statement contains a magic number: column.DataType.LengthRange.Default = r.GetInt32 (2);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	// Exclude: Language Handler (2280) - Triggers (2279) - Void (2278)  	using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ProcedureSchema procedure = new ProcedureSchema (this);  					procedure.Name = r.GetString (0);  					procedure.LanguageName = r.GetString (2);  					if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  						procedure.IsSystemProcedure = true;  					procedure.IsFunction = true;  					// Procedure Definition  					StringBuilder proc = new StringBuilder ();  					if (procedure.IsFunction) {  						string lang = r.GetString (2);  						string proctype = string.Empty;  						string retType = r.GetString (6);  						switch (r.GetString (5)) {  						case "s":  							proctype = "STABLE";  							break;  						case "i":  							proctype = "INMUTABLE";  							break;  						default:  							proctype = "VOLATILE";  							break;  						}  						float cost = r.GetFloat (4);  						proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  						// Get parameters collection  						ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  						bool first = true;  						// Set Parameters list  						foreach (ParameterSchema p in pars) {  							if (!first) {  								proc.Append ("' ");  							}  							first = false;  							proc.Append (p.ParameterType.ToString ());  							if (p.Name != "") {  								proc.AppendFormat (" {0}"' p.Name);  							}  							proc.AppendFormat (" {0}"' p.DataTypeName);  						}  						proc.Append (")");  						if (lang == "edbspl")  							proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  						else  							proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  						proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  						proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  						proc.AppendFormat ("COST {0};\n"' cost.ToString ());  					}  					procedure.Definition = proc.ToString ();  					procedures.Add (procedure);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (@"SELECT   							pc.proname'   							pc.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'  							pg_user pu'  							pg_type pt'  							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype = pt.oid   						    AND pc.prolang = pl.oid   							AND pc.prorettype not in (2278' 2279' 2280)   		  						UNION   						  						SELECT   							pc.proname'   							pt.oid::integer'   							pl.lanname'   							pc.prosrc'   							pc.procost'   							pc.provolatile'  							pt.typname as rettypename'  							pc.proargnames as argnames'  							pc.proargmodes as argmodes'  							pc.proallargtypes as argtypes  						FROM   							pg_proc pc'   							pg_user pu'   							pg_type pt'   							pg_language pl   						WHERE   							pc.proowner = pu.usesysid   							AND pc.prorettype not in (2278' 2279' 2280)   							AND pc.prorettype = 0  							AND pc.prolang = pl.oid;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ProcedureSchema procedure = new ProcedureSchema (this);  				procedure.Name = r.GetString (0);  				procedure.LanguageName = r.GetString (2);  				if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  					procedure.IsSystemProcedure = true;  				procedure.IsFunction = true;  				// Procedure Definition  				StringBuilder proc = new StringBuilder ();  				if (procedure.IsFunction) {  					string lang = r.GetString (2);  					string proctype = string.Empty;  					string retType = r.GetString (6);  					switch (r.GetString (5)) {  					case "s":  						proctype = "STABLE";  						break;  					case "i":  						proctype = "INMUTABLE";  						break;  					default:  						proctype = "VOLATILE";  						break;  					}  					float cost = r.GetFloat (4);  					proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  					// Get parameters collection  					ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  					bool first = true;  					// Set Parameters list  					foreach (ParameterSchema p in pars) {  						if (!first) {  							proc.Append ("' ");  						}  						first = false;  						proc.Append (p.ParameterType.ToString ());  						if (p.Name != "") {  							proc.AppendFormat (" {0}"' p.Name);  						}  						proc.AppendFormat (" {0}"' p.DataTypeName);  					}  					proc.Append (")");  					if (lang == "edbspl")  						proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  					else  						proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  					proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  					proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  					proc.AppendFormat ("COST {0};\n"' cost.ToString ());  				}  				procedure.Definition = proc.ToString ();  				procedures.Add (procedure);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ProcedureSchema procedure = new ProcedureSchema (this);  			procedure.Name = r.GetString (0);  			procedure.LanguageName = r.GetString (2);  			if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  				procedure.IsSystemProcedure = true;  			procedure.IsFunction = true;  			// Procedure Definition  			StringBuilder proc = new StringBuilder ();  			if (procedure.IsFunction) {  				string lang = r.GetString (2);  				string proctype = string.Empty;  				string retType = r.GetString (6);  				switch (r.GetString (5)) {  				case "s":  					proctype = "STABLE";  					break;  				case "i":  					proctype = "INMUTABLE";  					break;  				default:  					proctype = "VOLATILE";  					break;  				}  				float cost = r.GetFloat (4);  				proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  				// Get parameters collection  				ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				bool first = true;  				// Set Parameters list  				foreach (ParameterSchema p in pars) {  					if (!first) {  						proc.Append ("' ");  					}  					first = false;  					proc.Append (p.ParameterType.ToString ());  					if (p.Name != "") {  						proc.AppendFormat (" {0}"' p.Name);  					}  					proc.AppendFormat (" {0}"' p.DataTypeName);  				}  				proc.Append (")");  				if (lang == "edbspl")  					proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  				else  					proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  				proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  				proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  				proc.AppendFormat ("COST {0};\n"' cost.ToString ());  			}  			procedure.Definition = proc.ToString ();  			procedures.Add (procedure);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ProcedureSchema procedure = new ProcedureSchema (this);  		procedure.Name = r.GetString (0);  		procedure.LanguageName = r.GetString (2);  		if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  			procedure.IsSystemProcedure = true;  		procedure.IsFunction = true;  		// Procedure Definition  		StringBuilder proc = new StringBuilder ();  		if (procedure.IsFunction) {  			string lang = r.GetString (2);  			string proctype = string.Empty;  			string retType = r.GetString (6);  			switch (r.GetString (5)) {  			case "s":  				proctype = "STABLE";  				break;  			case "i":  				proctype = "INMUTABLE";  				break;  			default:  				proctype = "VOLATILE";  				break;  			}  			float cost = r.GetFloat (4);  			proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  			// Get parameters collection  			ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			bool first = true;  			// Set Parameters list  			foreach (ParameterSchema p in pars) {  				if (!first) {  					proc.Append ("' ");  				}  				first = false;  				proc.Append (p.ParameterType.ToString ());  				if (p.Name != "") {  					proc.AppendFormat (" {0}"' p.Name);  				}  				proc.AppendFormat (" {0}"' p.DataTypeName);  			}  			proc.Append (")");  			if (lang == "edbspl")  				proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  			else  				proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  			proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  			proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  			proc.AppendFormat ("COST {0};\n"' cost.ToString ());  		}  		procedure.Definition = proc.ToString ();  		procedures.Add (procedure);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: while (r.Read ()) {  	ProcedureSchema procedure = new ProcedureSchema (this);  	procedure.Name = r.GetString (0);  	procedure.LanguageName = r.GetString (2);  	if (!r.IsDBNull (1) && r.GetInt32 (1) < LastSystemOID)  		procedure.IsSystemProcedure = true;  	procedure.IsFunction = true;  	// Procedure Definition  	StringBuilder proc = new StringBuilder ();  	if (procedure.IsFunction) {  		string lang = r.GetString (2);  		string proctype = string.Empty;  		string retType = r.GetString (6);  		switch (r.GetString (5)) {  		case "s":  			proctype = "STABLE";  			break;  		case "i":  			proctype = "INMUTABLE";  			break;  		default:  			proctype = "VOLATILE";  			break;  		}  		float cost = r.GetFloat (4);  		proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  		// Get parameters collection  		ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		bool first = true;  		// Set Parameters list  		foreach (ParameterSchema p in pars) {  			if (!first) {  				proc.Append ("' ");  			}  			first = false;  			proc.Append (p.ParameterType.ToString ());  			if (p.Name != "") {  				proc.AppendFormat (" {0}"' p.Name);  			}  			proc.AppendFormat (" {0}"' p.DataTypeName);  		}  		proc.Append (")");  		if (lang == "edbspl")  			proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  		else  			proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  		proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  		proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  		proc.AppendFormat ("COST {0};\n"' cost.ToString ());  	}  	procedure.Definition = proc.ToString ();  	procedures.Add (procedure);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: procedure.LanguageName = r.GetString (2);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: if (procedure.IsFunction) {  	string lang = r.GetString (2);  	string proctype = string.Empty;  	string retType = r.GetString (6);  	switch (r.GetString (5)) {  	case "s":  		proctype = "STABLE";  		break;  	case "i":  		proctype = "INMUTABLE";  		break;  	default:  		proctype = "VOLATILE";  		break;  	}  	float cost = r.GetFloat (4);  	proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  	// Get parameters collection  	ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	bool first = true;  	// Set Parameters list  	foreach (ParameterSchema p in pars) {  		if (!first) {  			proc.Append ("' ");  		}  		first = false;  		proc.Append (p.ParameterType.ToString ());  		if (p.Name != "") {  			proc.AppendFormat (" {0}"' p.Name);  		}  		proc.AppendFormat (" {0}"' p.DataTypeName);  	}  	proc.Append (")");  	if (lang == "edbspl")  		proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  	else  		proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  	proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  	proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  	proc.AppendFormat ("COST {0};\n"' cost.ToString ());  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: if (procedure.IsFunction) {  	string lang = r.GetString (2);  	string proctype = string.Empty;  	string retType = r.GetString (6);  	switch (r.GetString (5)) {  	case "s":  		proctype = "STABLE";  		break;  	case "i":  		proctype = "INMUTABLE";  		break;  	default:  		proctype = "VOLATILE";  		break;  	}  	float cost = r.GetFloat (4);  	proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  	// Get parameters collection  	ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	bool first = true;  	// Set Parameters list  	foreach (ParameterSchema p in pars) {  		if (!first) {  			proc.Append ("' ");  		}  		first = false;  		proc.Append (p.ParameterType.ToString ());  		if (p.Name != "") {  			proc.AppendFormat (" {0}"' p.Name);  		}  		proc.AppendFormat (" {0}"' p.DataTypeName);  	}  	proc.Append (")");  	if (lang == "edbspl")  		proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  	else  		proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  	proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  	proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  	proc.AppendFormat ("COST {0};\n"' cost.ToString ());  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: if (procedure.IsFunction) {  	string lang = r.GetString (2);  	string proctype = string.Empty;  	string retType = r.GetString (6);  	switch (r.GetString (5)) {  	case "s":  		proctype = "STABLE";  		break;  	case "i":  		proctype = "INMUTABLE";  		break;  	default:  		proctype = "VOLATILE";  		break;  	}  	float cost = r.GetFloat (4);  	proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  	// Get parameters collection  	ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	bool first = true;  	// Set Parameters list  	foreach (ParameterSchema p in pars) {  		if (!first) {  			proc.Append ("' ");  		}  		first = false;  		proc.Append (p.ParameterType.ToString ());  		if (p.Name != "") {  			proc.AppendFormat (" {0}"' p.Name);  		}  		proc.AppendFormat (" {0}"' p.DataTypeName);  	}  	proc.Append (")");  	if (lang == "edbspl")  		proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  	else  		proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  	proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  	proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  	proc.AppendFormat ("COST {0};\n"' cost.ToString ());  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: if (procedure.IsFunction) {  	string lang = r.GetString (2);  	string proctype = string.Empty;  	string retType = r.GetString (6);  	switch (r.GetString (5)) {  	case "s":  		proctype = "STABLE";  		break;  	case "i":  		proctype = "INMUTABLE";  		break;  	default:  		proctype = "VOLATILE";  		break;  	}  	float cost = r.GetFloat (4);  	proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  	// Get parameters collection  	ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	bool first = true;  	// Set Parameters list  	foreach (ParameterSchema p in pars) {  		if (!first) {  			proc.Append ("' ");  		}  		first = false;  		proc.Append (p.ParameterType.ToString ());  		if (p.Name != "") {  			proc.AppendFormat (" {0}"' p.Name);  		}  		proc.AppendFormat (" {0}"' p.DataTypeName);  	}  	proc.Append (")");  	if (lang == "edbspl")  		proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  	else  		proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  	proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  	proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  	proc.AppendFormat ("COST {0};\n"' cost.ToString ());  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: if (procedure.IsFunction) {  	string lang = r.GetString (2);  	string proctype = string.Empty;  	string retType = r.GetString (6);  	switch (r.GetString (5)) {  	case "s":  		proctype = "STABLE";  		break;  	case "i":  		proctype = "INMUTABLE";  		break;  	default:  		proctype = "VOLATILE";  		break;  	}  	float cost = r.GetFloat (4);  	proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  	// Get parameters collection  	ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	bool first = true;  	// Set Parameters list  	foreach (ParameterSchema p in pars) {  		if (!first) {  			proc.Append ("' ");  		}  		first = false;  		proc.Append (p.ParameterType.ToString ());  		if (p.Name != "") {  			proc.AppendFormat (" {0}"' p.Name);  		}  		proc.AppendFormat (" {0}"' p.DataTypeName);  	}  	proc.Append (")");  	if (lang == "edbspl")  		proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  	else  		proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  	proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  	proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  	proc.AppendFormat ("COST {0};\n"' cost.ToString ());  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: if (procedure.IsFunction) {  	string lang = r.GetString (2);  	string proctype = string.Empty;  	string retType = r.GetString (6);  	switch (r.GetString (5)) {  	case "s":  		proctype = "STABLE";  		break;  	case "i":  		proctype = "INMUTABLE";  		break;  	default:  		proctype = "VOLATILE";  		break;  	}  	float cost = r.GetFloat (4);  	proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  	// Get parameters collection  	ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	bool first = true;  	// Set Parameters list  	foreach (ParameterSchema p in pars) {  		if (!first) {  			proc.Append ("' ");  		}  		first = false;  		proc.Append (p.ParameterType.ToString ());  		if (p.Name != "") {  			proc.AppendFormat (" {0}"' p.Name);  		}  		proc.AppendFormat (" {0}"' p.DataTypeName);  	}  	proc.Append (")");  	if (lang == "edbspl")  		proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  	else  		proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  	proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  	proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  	proc.AppendFormat ("COST {0};\n"' cost.ToString ());  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: if (procedure.IsFunction) {  	string lang = r.GetString (2);  	string proctype = string.Empty;  	string retType = r.GetString (6);  	switch (r.GetString (5)) {  	case "s":  		proctype = "STABLE";  		break;  	case "i":  		proctype = "INMUTABLE";  		break;  	default:  		proctype = "VOLATILE";  		break;  	}  	float cost = r.GetFloat (4);  	proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  	// Get parameters collection  	ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	bool first = true;  	// Set Parameters list  	foreach (ParameterSchema p in pars) {  		if (!first) {  			proc.Append ("' ");  		}  		first = false;  		proc.Append (p.ParameterType.ToString ());  		if (p.Name != "") {  			proc.AppendFormat (" {0}"' p.Name);  		}  		proc.AppendFormat (" {0}"' p.DataTypeName);  	}  	proc.Append (")");  	if (lang == "edbspl")  		proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  	else  		proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  	proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  	proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  	proc.AppendFormat ("COST {0};\n"' cost.ToString ());  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: if (procedure.IsFunction) {  	string lang = r.GetString (2);  	string proctype = string.Empty;  	string retType = r.GetString (6);  	switch (r.GetString (5)) {  	case "s":  		proctype = "STABLE";  		break;  	case "i":  		proctype = "INMUTABLE";  		break;  	default:  		proctype = "VOLATILE";  		break;  	}  	float cost = r.GetFloat (4);  	proc.AppendFormat ("CREATE OR REPLACE FUNCTION {0} ("' r.GetString (0));  	// Get parameters collection  	ParameterSchemaCollection pars = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	bool first = true;  	// Set Parameters list  	foreach (ParameterSchema p in pars) {  		if (!first) {  			proc.Append ("' ");  		}  		first = false;  		proc.Append (p.ParameterType.ToString ());  		if (p.Name != "") {  			proc.AppendFormat (" {0}"' p.Name);  		}  		proc.AppendFormat (" {0}"' p.DataTypeName);  	}  	proc.Append (")");  	if (lang == "edbspl")  		proc.AppendFormat ("\nRETURN {0} AS \n"' retType);  	else  		proc.AppendFormat ("\nRETURNS {0} AS \n"' retType);  	proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  	proc.AppendFormat ("LANGUAGE '{0}' {1}\n"' lang' proctype);  	proc.AppendFormat ("COST {0};\n"' cost.ToString ());  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: switch (r.GetString (5)) {  case "s":  	proctype = "STABLE";  	break;  case "i":  	proctype = "INMUTABLE";  	break;  default:  	proctype = "VOLATILE";  	break;  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedures,The following statement contains a magic number: proc.AppendFormat ("$BODY$ {0} $BODY$\n"' r.GetString (3));  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (String.Format (@"SELECT   											pc.proname'   											pc.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'  											pg_user pu'  											pg_type pt'  											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype = pt.oid   										    AND pc.prolang = pl.oid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.proname = '{0}'  						  										UNION   										  										SELECT   											pc.proname'   											pt.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'   											pg_user pu'   											pg_type pt'   											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.prorettype = 0  											AND pc.prolang = pl.oid  											AND pc.proname = '{0}';"' procedure.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				if (r.Read ())  					parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (String.Format (@"SELECT   											pc.proname'   											pc.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'  											pg_user pu'  											pg_type pt'  											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype = pt.oid   										    AND pc.prolang = pl.oid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.proname = '{0}'  						  										UNION   										  										SELECT   											pc.proname'   											pt.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'   											pg_user pu'   											pg_type pt'   											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.prorettype = 0  											AND pc.prolang = pl.oid  											AND pc.proname = '{0}';"' procedure.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				if (r.Read ())  					parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (String.Format (@"SELECT   											pc.proname'   											pc.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'  											pg_user pu'  											pg_type pt'  											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype = pt.oid   										    AND pc.prolang = pl.oid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.proname = '{0}'  						  										UNION   										  										SELECT   											pc.proname'   											pt.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'   											pg_user pu'   											pg_type pt'   											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.prorettype = 0  											AND pc.prolang = pl.oid  											AND pc.proname = '{0}';"' procedure.Name))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				if (r.Read ())  					parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (String.Format (@"SELECT   											pc.proname'   											pc.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'  											pg_user pu'  											pg_type pt'  											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype = pt.oid   										    AND pc.prolang = pl.oid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.proname = '{0}'  						  										UNION   										  										SELECT   											pc.proname'   											pt.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'   											pg_user pu'   											pg_type pt'   											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.prorettype = 0  											AND pc.prolang = pl.oid  											AND pc.proname = '{0}';"' procedure.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			if (r.Read ())  				parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (String.Format (@"SELECT   											pc.proname'   											pc.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'  											pg_user pu'  											pg_type pt'  											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype = pt.oid   										    AND pc.prolang = pl.oid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.proname = '{0}'  						  										UNION   										  										SELECT   											pc.proname'   											pt.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'   											pg_user pu'   											pg_type pt'   											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.prorettype = 0  											AND pc.prolang = pl.oid  											AND pc.proname = '{0}';"' procedure.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			if (r.Read ())  				parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (String.Format (@"SELECT   											pc.proname'   											pc.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'  											pg_user pu'  											pg_type pt'  											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype = pt.oid   										    AND pc.prolang = pl.oid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.proname = '{0}'  						  										UNION   										  										SELECT   											pc.proname'   											pt.oid::integer'   											pl.lanname'   											pc.prosrc'   											pc.procost'   											pc.provolatile'  											pt.typname as rettypename'  											pc.proargnames as argnames'  											pc.proargmodes as argmodes'  											pc.proallargtypes as argtypes  										FROM   											pg_proc pc'   											pg_user pu'   											pg_type pt'   											pg_language pl   										WHERE   											pc.proowner = pu.usesysid   											AND pc.prorettype not in (2278' 2279' 2280)   											AND pc.prorettype = 0  											AND pc.prolang = pl.oid  											AND pc.proname = '{0}';"' procedure.Name))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			if (r.Read ())  				parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		if (r.Read ())  			parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		if (r.Read ())  			parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		if (r.Read ())  			parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	if (r.Read ())  		parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	if (r.Read ())  		parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	if (r.Read ())  		parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: if (r.Read ())  	parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: if (r.Read ())  	parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: if (r.Read ())  	parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetProcedureParameters,The following statement contains a magic number: parameters = GetParams (r.GetValue (7).ToString ()' r.GetValue (8).ToString ()' r.GetValue (9).ToString ()' conn);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand (String.Format (@"SELECT  						pc.conname'  						pg_catalog.pg_get_constraintdef(pc.oid' true) AS consrc'  						pc.contype'  						CASE WHEN pc.contype='u' OR pc.contype='p' THEN (   							SELECT  								indisclustered  							FROM  								pg_catalog.pg_depend pd'   								pg_catalog.pg_class pl'  								pg_catalog.pg_index pi   							WHERE  								pd.refclassid=pc.tableoid  								AND pd.refobjid=pc.oid  								AND pd.objid=pl.oid  								AND pl.oid=pi.indexrelid)   						ELSE  							 NULL  						END AS indisclustered  					FROM  						pg_catalog.pg_constraint pc   					WHERE  						pc.conrelid = (  								SELECT oid   								FROM pg_catalog.pg_class   								WHERE   									relname='{0}'  									AND relnamespace = (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname='{1}'))  					ORDER BY 1;"' table.Name' table.SchemaName))) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					ConstraintSchema constraint = null;  					//TODO: Add support for Check constraints.  					switch (r.GetString (2)) {  					case "f":  						string match = @".*REFERENCES (.+)\(.*\).*";  						constraint = new ForeignKeyConstraintSchema (this);  						if (Regex.IsMatch (r.GetString (1)' match))  							(constraint as ForeignKeyConstraintSchema).ReferenceTableName = Regex.Match (r.GetString (1)' match).Groups [0].Captures [0].Value;  						break;  					case "u":  						constraint = new UniqueConstraintSchema (this);  						break;  					case "p":  					default:  						constraint = new PrimaryKeyConstraintSchema (this);  						break;  					}  					constraint.Name = r.GetString (0);  					constraint.Definition = r.GetString (1);  					int parenOpen = constraint.Definition.IndexOf ('(');  					if (parenOpen > 0) {  						int parenClose = constraint.Definition.IndexOf (')');  						string colstr = constraint.Definition.Substring (parenOpen + 1' parenClose - parenOpen - 1);  						foreach (string col in colstr.Split (''')) {  							ColumnSchema column = new ColumnSchema (this' table);  							column.Name = col.Trim ();  							constraint.Columns.Add (column);  						}  					}  					constraints.Add (constraint);  				}  				r.Close ();  			}  		}  		catch (Exception) {  			// Don't raise error' if the table doesn't exists return an empty collection  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand (String.Format (@"SELECT  						pc.conname'  						pg_catalog.pg_get_constraintdef(pc.oid' true) AS consrc'  						pc.contype'  						CASE WHEN pc.contype='u' OR pc.contype='p' THEN (   							SELECT  								indisclustered  							FROM  								pg_catalog.pg_depend pd'   								pg_catalog.pg_class pl'  								pg_catalog.pg_index pi   							WHERE  								pd.refclassid=pc.tableoid  								AND pd.refobjid=pc.oid  								AND pd.objid=pl.oid  								AND pl.oid=pi.indexrelid)   						ELSE  							 NULL  						END AS indisclustered  					FROM  						pg_catalog.pg_constraint pc   					WHERE  						pc.conrelid = (  								SELECT oid   								FROM pg_catalog.pg_class   								WHERE   									relname='{0}'  									AND relnamespace = (SELECT oid FROM pg_catalog.pg_namespace WHERE nspname='{1}'))  					ORDER BY 1;"' table.Name' table.SchemaName))) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				ConstraintSchema constraint = null;  				//TODO: Add support for Check constraints.  				switch (r.GetString (2)) {  				case "f":  					string match = @".*REFERENCES (.+)\(.*\).*";  					constraint = new ForeignKeyConstraintSchema (this);  					if (Regex.IsMatch (r.GetString (1)' match))  						(constraint as ForeignKeyConstraintSchema).ReferenceTableName = Regex.Match (r.GetString (1)' match).Groups [0].Captures [0].Value;  					break;  				case "u":  					constraint = new UniqueConstraintSchema (this);  					break;  				case "p":  				default:  					constraint = new PrimaryKeyConstraintSchema (this);  					break;  				}  				constraint.Name = r.GetString (0);  				constraint.Definition = r.GetString (1);  				int parenOpen = constraint.Definition.IndexOf ('(');  				if (parenOpen > 0) {  					int parenClose = constraint.Definition.IndexOf (')');  					string colstr = constraint.Definition.Substring (parenOpen + 1' parenClose - parenOpen - 1);  					foreach (string col in colstr.Split (''')) {  						ColumnSchema column = new ColumnSchema (this' table);  						column.Name = col.Trim ();  						constraint.Columns.Add (column);  					}  				}  				constraints.Add (constraint);  			}  			r.Close ();  		}  	}  	catch (Exception) {  		// Don't raise error' if the table doesn't exists return an empty collection  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			ConstraintSchema constraint = null;  			//TODO: Add support for Check constraints.  			switch (r.GetString (2)) {  			case "f":  				string match = @".*REFERENCES (.+)\(.*\).*";  				constraint = new ForeignKeyConstraintSchema (this);  				if (Regex.IsMatch (r.GetString (1)' match))  					(constraint as ForeignKeyConstraintSchema).ReferenceTableName = Regex.Match (r.GetString (1)' match).Groups [0].Captures [0].Value;  				break;  			case "u":  				constraint = new UniqueConstraintSchema (this);  				break;  			case "p":  			default:  				constraint = new PrimaryKeyConstraintSchema (this);  				break;  			}  			constraint.Name = r.GetString (0);  			constraint.Definition = r.GetString (1);  			int parenOpen = constraint.Definition.IndexOf ('(');  			if (parenOpen > 0) {  				int parenClose = constraint.Definition.IndexOf (')');  				string colstr = constraint.Definition.Substring (parenOpen + 1' parenClose - parenOpen - 1);  				foreach (string col in colstr.Split (''')) {  					ColumnSchema column = new ColumnSchema (this' table);  					column.Name = col.Trim ();  					constraint.Columns.Add (column);  				}  			}  			constraints.Add (constraint);  		}  		r.Close ();  	}  }  catch (Exception) {  	// Don't raise error' if the table doesn't exists return an empty collection  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		ConstraintSchema constraint = null;  		//TODO: Add support for Check constraints.  		switch (r.GetString (2)) {  		case "f":  			string match = @".*REFERENCES (.+)\(.*\).*";  			constraint = new ForeignKeyConstraintSchema (this);  			if (Regex.IsMatch (r.GetString (1)' match))  				(constraint as ForeignKeyConstraintSchema).ReferenceTableName = Regex.Match (r.GetString (1)' match).Groups [0].Captures [0].Value;  			break;  		case "u":  			constraint = new UniqueConstraintSchema (this);  			break;  		case "p":  		default:  			constraint = new PrimaryKeyConstraintSchema (this);  			break;  		}  		constraint.Name = r.GetString (0);  		constraint.Definition = r.GetString (1);  		int parenOpen = constraint.Definition.IndexOf ('(');  		if (parenOpen > 0) {  			int parenClose = constraint.Definition.IndexOf (')');  			string colstr = constraint.Definition.Substring (parenOpen + 1' parenClose - parenOpen - 1);  			foreach (string col in colstr.Split (''')) {  				ColumnSchema column = new ColumnSchema (this' table);  				column.Name = col.Trim ();  				constraint.Columns.Add (column);  			}  		}  		constraints.Add (constraint);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,The following statement contains a magic number: while (r.Read ()) {  	ConstraintSchema constraint = null;  	//TODO: Add support for Check constraints.  	switch (r.GetString (2)) {  	case "f":  		string match = @".*REFERENCES (.+)\(.*\).*";  		constraint = new ForeignKeyConstraintSchema (this);  		if (Regex.IsMatch (r.GetString (1)' match))  			(constraint as ForeignKeyConstraintSchema).ReferenceTableName = Regex.Match (r.GetString (1)' match).Groups [0].Captures [0].Value;  		break;  	case "u":  		constraint = new UniqueConstraintSchema (this);  		break;  	case "p":  	default:  		constraint = new PrimaryKeyConstraintSchema (this);  		break;  	}  	constraint.Name = r.GetString (0);  	constraint.Definition = r.GetString (1);  	int parenOpen = constraint.Definition.IndexOf ('(');  	if (parenOpen > 0) {  		int parenClose = constraint.Definition.IndexOf (')');  		string colstr = constraint.Definition.Substring (parenOpen + 1' parenClose - parenOpen - 1);  		foreach (string col in colstr.Split (''')) {  			ColumnSchema column = new ColumnSchema (this' table);  			column.Name = col.Trim ();  			constraint.Columns.Add (column);  		}  	}  	constraints.Add (constraint);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetTableConstraints,The following statement contains a magic number: switch (r.GetString (2)) {  case "f":  	string match = @".*REFERENCES (.+)\(.*\).*";  	constraint = new ForeignKeyConstraintSchema (this);  	if (Regex.IsMatch (r.GetString (1)' match))  		(constraint as ForeignKeyConstraintSchema).ReferenceTableName = Regex.Match (r.GetString (1)' match).Groups [0].Captures [0].Value;  	break;  case "u":  	constraint = new UniqueConstraintSchema (this);  	break;  case "p":  default:  	constraint = new PrimaryKeyConstraintSchema (this);  	break;  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand ("SELECT * FROM pg_user;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					UserSchema user = new UserSchema (this);  					user.Name = r.GetString (0);  					user.UserId = String.Format ("{0}"' r.GetValue (1));  					user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  					user.Password = r.GetString (5);  					StringBuilder sb = new StringBuilder ();  					sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  					sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  					sb.AppendFormat ("CREATE USER {0}"' user.Name);  					sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  					if (user.Password != "********")  						sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  					if (user.Expires != DateTime.MinValue)  						sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  					sb.Append (";");  					user.Definition = sb.ToString ();  					users.Add (user);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand ("SELECT * FROM pg_user;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					UserSchema user = new UserSchema (this);  					user.Name = r.GetString (0);  					user.UserId = String.Format ("{0}"' r.GetValue (1));  					user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  					user.Password = r.GetString (5);  					StringBuilder sb = new StringBuilder ();  					sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  					sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  					sb.AppendFormat ("CREATE USER {0}"' user.Name);  					sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  					if (user.Password != "********")  						sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  					if (user.Expires != DateTime.MinValue)  						sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  					sb.Append (";");  					user.Definition = sb.ToString ();  					users.Add (user);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IPooledDbConnection conn = connectionPool.Request ()) {  	using (IDbCommand command = conn.CreateCommand ("SELECT * FROM pg_user;")) {  		try {  			using (IDataReader r = command.ExecuteReader ()) {  				while (r.Read ()) {  					UserSchema user = new UserSchema (this);  					user.Name = r.GetString (0);  					user.UserId = String.Format ("{0}"' r.GetValue (1));  					user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  					user.Password = r.GetString (5);  					StringBuilder sb = new StringBuilder ();  					sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  					sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  					sb.AppendFormat ("CREATE USER {0}"' user.Name);  					sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  					if (user.Password != "********")  						sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  					if (user.Expires != DateTime.MinValue)  						sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  					sb.Append (";");  					user.Definition = sb.ToString ();  					users.Add (user);  				}  				r.Close ();  			}  		}  		catch (Exception e) {  			QueryService.RaiseException (e);  		}  		finally {  			conn.Release ();  		}  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand ("SELECT * FROM pg_user;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				UserSchema user = new UserSchema (this);  				user.Name = r.GetString (0);  				user.UserId = String.Format ("{0}"' r.GetValue (1));  				user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  				user.Password = r.GetString (5);  				StringBuilder sb = new StringBuilder ();  				sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  				sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  				sb.AppendFormat ("CREATE USER {0}"' user.Name);  				sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  				if (user.Password != "********")  					sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  				if (user.Expires != DateTime.MinValue)  					sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  				sb.Append (";");  				user.Definition = sb.ToString ();  				users.Add (user);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand ("SELECT * FROM pg_user;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				UserSchema user = new UserSchema (this);  				user.Name = r.GetString (0);  				user.UserId = String.Format ("{0}"' r.GetValue (1));  				user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  				user.Password = r.GetString (5);  				StringBuilder sb = new StringBuilder ();  				sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  				sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  				sb.AppendFormat ("CREATE USER {0}"' user.Name);  				sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  				if (user.Password != "********")  					sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  				if (user.Expires != DateTime.MinValue)  					sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  				sb.Append (";");  				user.Definition = sb.ToString ();  				users.Add (user);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IDbCommand command = conn.CreateCommand ("SELECT * FROM pg_user;")) {  	try {  		using (IDataReader r = command.ExecuteReader ()) {  			while (r.Read ()) {  				UserSchema user = new UserSchema (this);  				user.Name = r.GetString (0);  				user.UserId = String.Format ("{0}"' r.GetValue (1));  				user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  				user.Password = r.GetString (5);  				StringBuilder sb = new StringBuilder ();  				sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  				sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  				sb.AppendFormat ("CREATE USER {0}"' user.Name);  				sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  				if (user.Password != "********")  					sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  				if (user.Expires != DateTime.MinValue)  					sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  				sb.Append (";");  				user.Definition = sb.ToString ();  				users.Add (user);  			}  			r.Close ();  		}  	}  	catch (Exception e) {  		QueryService.RaiseException (e);  	}  	finally {  		conn.Release ();  	}  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			UserSchema user = new UserSchema (this);  			user.Name = r.GetString (0);  			user.UserId = String.Format ("{0}"' r.GetValue (1));  			user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  			user.Password = r.GetString (5);  			StringBuilder sb = new StringBuilder ();  			sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  			sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  			sb.AppendFormat ("CREATE USER {0}"' user.Name);  			sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  			if (user.Password != "********")  				sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  			if (user.Expires != DateTime.MinValue)  				sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  			sb.Append (";");  			user.Definition = sb.ToString ();  			users.Add (user);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			UserSchema user = new UserSchema (this);  			user.Name = r.GetString (0);  			user.UserId = String.Format ("{0}"' r.GetValue (1));  			user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  			user.Password = r.GetString (5);  			StringBuilder sb = new StringBuilder ();  			sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  			sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  			sb.AppendFormat ("CREATE USER {0}"' user.Name);  			sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  			if (user.Password != "********")  				sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  			if (user.Expires != DateTime.MinValue)  				sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  			sb.Append (";");  			user.Definition = sb.ToString ();  			users.Add (user);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: try {  	using (IDataReader r = command.ExecuteReader ()) {  		while (r.Read ()) {  			UserSchema user = new UserSchema (this);  			user.Name = r.GetString (0);  			user.UserId = String.Format ("{0}"' r.GetValue (1));  			user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  			user.Password = r.GetString (5);  			StringBuilder sb = new StringBuilder ();  			sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  			sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  			sb.AppendFormat ("CREATE USER {0}"' user.Name);  			sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  			if (user.Password != "********")  				sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  			if (user.Expires != DateTime.MinValue)  				sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  			sb.Append (";");  			user.Definition = sb.ToString ();  			users.Add (user);  		}  		r.Close ();  	}  }  catch (Exception e) {  	QueryService.RaiseException (e);  }  finally {  	conn.Release ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		UserSchema user = new UserSchema (this);  		user.Name = r.GetString (0);  		user.UserId = String.Format ("{0}"' r.GetValue (1));  		user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  		user.Password = r.GetString (5);  		StringBuilder sb = new StringBuilder ();  		sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  		sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  		sb.AppendFormat ("CREATE USER {0}"' user.Name);  		sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  		if (user.Password != "********")  			sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  		if (user.Expires != DateTime.MinValue)  			sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  		sb.Append (";");  		user.Definition = sb.ToString ();  		users.Add (user);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		UserSchema user = new UserSchema (this);  		user.Name = r.GetString (0);  		user.UserId = String.Format ("{0}"' r.GetValue (1));  		user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  		user.Password = r.GetString (5);  		StringBuilder sb = new StringBuilder ();  		sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  		sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  		sb.AppendFormat ("CREATE USER {0}"' user.Name);  		sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  		if (user.Password != "********")  			sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  		if (user.Expires != DateTime.MinValue)  			sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  		sb.Append (";");  		user.Definition = sb.ToString ();  		users.Add (user);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: using (IDataReader r = command.ExecuteReader ()) {  	while (r.Read ()) {  		UserSchema user = new UserSchema (this);  		user.Name = r.GetString (0);  		user.UserId = String.Format ("{0}"' r.GetValue (1));  		user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  		user.Password = r.GetString (5);  		StringBuilder sb = new StringBuilder ();  		sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  		sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  		sb.AppendFormat ("CREATE USER {0}"' user.Name);  		sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  		if (user.Password != "********")  			sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  		if (user.Expires != DateTime.MinValue)  			sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  		sb.Append (";");  		user.Definition = sb.ToString ();  		users.Add (user);  	}  	r.Close ();  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: while (r.Read ()) {  	UserSchema user = new UserSchema (this);  	user.Name = r.GetString (0);  	user.UserId = String.Format ("{0}"' r.GetValue (1));  	user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  	user.Password = r.GetString (5);  	StringBuilder sb = new StringBuilder ();  	sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  	sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  	sb.AppendFormat ("CREATE USER {0}"' user.Name);  	sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  	if (user.Password != "********")  		sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  	if (user.Expires != DateTime.MinValue)  		sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  	sb.Append (";");  	user.Definition = sb.ToString ();  	users.Add (user);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: while (r.Read ()) {  	UserSchema user = new UserSchema (this);  	user.Name = r.GetString (0);  	user.UserId = String.Format ("{0}"' r.GetValue (1));  	user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  	user.Password = r.GetString (5);  	StringBuilder sb = new StringBuilder ();  	sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  	sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  	sb.AppendFormat ("CREATE USER {0}"' user.Name);  	sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  	if (user.Password != "********")  		sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  	if (user.Expires != DateTime.MinValue)  		sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  	sb.Append (";");  	user.Definition = sb.ToString ();  	users.Add (user);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: while (r.Read ()) {  	UserSchema user = new UserSchema (this);  	user.Name = r.GetString (0);  	user.UserId = String.Format ("{0}"' r.GetValue (1));  	user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  	user.Password = r.GetString (5);  	StringBuilder sb = new StringBuilder ();  	sb.AppendFormat ("-- User: \"{0}\"\n\n"' user.Name);  	sb.AppendFormat ("-- DROP USER {0};\n\n"' user.Name);  	sb.AppendFormat ("CREATE USER {0}"' user.Name);  	sb.AppendFormat ("  WITH SYSID {0}"' user.UserId);  	if (user.Password != "********")  		sb.AppendFormat (" ENCRYPTED PASSWORD {0}"' user.Password);  	if (user.Expires != DateTime.MinValue)  		sb.AppendFormat (" VALID UNTIL {0}"' user.Expires);  	sb.Append (";");  	user.Definition = sb.ToString ();  	users.Add (user);  }  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: user.Expires = r.IsDBNull (6) ? DateTime.MinValue : r.GetDateTime (6);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetUsers,The following statement contains a magic number: user.Password = r.GetString (5);  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlSchemaProvider,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlSchemaProvider.cs,GetViewAlterStatement,The following statement contains a magic number: return view.Definition.Insert (8' "OR REPLACE ");  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlDbFactory.cs,GetDefaultConnectionSettings,The following statement contains a magic number: settings.Port = 5432;  
Magic Number,MonoDevelop.Database.Sql.Npgsql,NpgsqlDbFactory,C:\repos\joncloud_monodevelop\extras\MonoDevelop.Database\MonoDevelop.Database.Sql.Npgsql\NpgsqlDbFactory.cs,GetDefaultConnectionSettings,The following statement contains a magic number: settings.MaxPoolSize = 5;  
