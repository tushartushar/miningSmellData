Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The method has 309 lines of code.
Long Method,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The method has 130 lines of code.
Long Method,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The method has 101 lines of code.
Long Method,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The method has 106 lines of code.
Long Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateProject,The method has 123 lines of code.
Long Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The method has 105 lines of code.
Complex Method,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,Cyclomatic complexity of the method is 77
Complex Method,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,ProcessProjectReferences,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,HandleDeployFile,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,EmitCustomCommandTargets,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,GenerateFiles,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureDotAC,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,Cyclomatic complexity of the method is 22
Complex Method,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,CalculateSubDirOrder,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Autotools,CustomMakefile,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\CustomMakefile.cs,InitVarToValuesDict,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,Cyclomatic complexity of the method is 22
Complex Method,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessVariables,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,ParseOutput,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,CreateCompilerErrorFromString,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateProject,Cyclomatic complexity of the method is 28
Complex Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveProjectReferences,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,WriteFiles,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,WriteReferences,Cyclomatic complexity of the method is 22
Complex Method,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,PackageRefToString,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Autotools,FileNodeCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\FileNodeBuilderExtension.cs,OnExclude,Cyclomatic complexity of the method is 8
Long Parameter List,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,ProcessDeployFilesForConfig,The method has 5 parameters.
Long Parameter List,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,EmitCustomCommandTargets,The method has 6 parameters.
Long Parameter List,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,ResolveCustomCommand,The method has 5 parameters.
Long Parameter List,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,Deploy,The method has 6 parameters.
Long Parameter List,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,ParseOutput,The method has 5 parameters.
Long Parameter List,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The method has 6 parameters.
Long Parameter List,MonoDevelop.Autotools,MakefileSwitchEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileSwitchEditorWidget.cs,InitTreeview,The method has 6 parameters.
Long Statement,MonoDevelop.Autotools,AutotoolsContext,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\AutotoolsContext.cs,GetRelativePath,The length of the statement  "	throw new InvalidOperationException ("The project '" + project.Name + "' references the file '" + Path.GetFileName (path) + "' which is located outside the solution directory."); " is 178.
Long Statement,MonoDevelop.Autotools,AutotoolsContext,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\AutotoolsContext.cs,GetMakefileHandler,The length of the statement  "	foreach (IMakefileHandler mh in AddinManager.GetExtensionObjects ("/MonoDevelop/Autotools/MakefileHandlers"' typeof(IMakefileHandler)' true)) { " is 143.
Long Statement,MonoDevelop.Autotools,AutotoolsCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\Commands.cs,GenerateMakefiles,The length of the statement  "		if (MessageService.AskQuestion (GettextCatalog.GetString ("Generating Makefiles is not supported for single projects. Do you want to generate them for the full solution - '{0}' ?"' entry.ParentSolution.Name)' AlertButton.Cancel' generateMakefilesButton) == generateMakefilesButton) " is 281.
Long Statement,MonoDevelop.Autotools,AutotoolsCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\Commands.cs,GenerateMakefiles,The length of the statement  "			string msg = GettextCatalog.GetString ("{0} already exist for this solution.  Would you like to overwrite them?"' dialog.GenerateAutotools ? "Autotools files" : "Makefiles"); " is 174.
Long Statement,MonoDevelop.Autotools,AutotoolsCommandHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\Commands.cs,GenerateMakefiles,The length of the statement  "			if (MonoDevelop.Ide.MessageService.AskQuestion (msg' AlertButton.Cancel' AlertButton.OverwriteFile) != AlertButton.OverwriteFile) " is 129.
Long Statement,MonoDevelop.Autotools,TarballDeployTarget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\Handler.cs,InitializeSettings,The length of the statement  "	if (File.Exists (Path.Combine (entry.BaseDirectory' "autogen.sh")) || File.Exists (Path.Combine (entry.BaseDirectory' "configure"))) { " is 134.
Long Statement,MonoDevelop.Autotools,TarballDeployTarget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\Handler.cs,OnBuild,The length of the statement  "			string efile = Services.ProjectService.Export (new FilteredProgressMonitor (monitor)' sourceFile' childEntries.ToArray ()' tmpFolder' null); " is 140.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,FindSetupForProject,The length of the statement  "	object[] items = AddinManager.GetExtensionObjects ("/MonoDevelop/Autotools/SimpleSetups"' typeof(ISimpleAutotoolsSetup)); " is 121.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "	monitor.BeginTask (GettextCatalog.GetString ("Creating {0} for Project {1}"' generateAutotools ? "Makefile.am" : "Makefile"' entry.Name)' 1); " is 141.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "					res_files.AppendFormat ("\\\n\t{0}'{1} "' MakefileData.ToMakefilePath (pfpath)' MakefileData.EscapeString (projectFile.ResourceId)); " is 132.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "			conf_vars.AppendFormat ("top_srcdir={0}\n\n"' FileService.AbsoluteToRelativePath (project.BaseDirectory' ctx.TargetSolution.BaseDirectory)); " is 140.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "			DotNetProjectConfiguration config = GetProjectConfig (combineConfig.Id' project' out buildEnabled) as DotNetProjectConfiguration; " is 129.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "			configSection.BuildVariablesBuilder.AppendFormat ("ASSEMBLY_COMPILER_COMMAND = {0}\n"' setup.GetCompilerCommand (project' config.Id)); " is 134.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "			configSection.BuildVariablesBuilder.AppendFormat ("ASSEMBLY_COMPILER_FLAGS = {0}\n"' setup.GetCompilerFlags (project' config.Id)); " is 130.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "			configSection.BuildVariablesBuilder.AppendFormat ("ASSEMBLY = {0}\n"' AutotoolsContext.EscapeStringForAutomake (assembly)); " is 123.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "			configSection.BuildVariablesBuilder.AppendFormat ("ASSEMBLY_MDB = {0}\n"' config.DebugMode ? "$(ASSEMBLY).mdb" : String.Empty); " is 127.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "				DotNetProjectConfiguration dnpc = GetProjectConfig (combineConfig.Id' refp' out buildEnabled) as DotNetProjectConfiguration; " is 124.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "					monitor.ReportWarning (GettextCatalog.GetString ("Custom commands are not supported for autotools based makefiles. Ignoring.")); " is 128.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "			conf_vars.AppendFormat (generateAutotools ? "if ENABLE_{0}\n" : "ifeq ($(CONFIG)'{0})\n"' ctx.EscapeAndUpperConfigName (configSection.Name)); " is 141.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "					string fname = MakefileData.ToMakefilePath (FileService.AbsoluteToRelativePath (Path.GetFullPath (project.BaseDirectory)' Path.GetFullPath (dfile.SourcePath))); " is 160.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "						conf_vars.AppendFormat ("{0}=$(BUILD_DIR)/{1}\n"' targetDeployVar' MakefileData.ToMakefilePath (dfile.RelativeTargetPath)); " is 123.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "				deployFileCopyVars.AppendFormat ("{0} = $(BUILD_DIR)/{1}\n"' pair.Key' MakefileData.ToMakefilePath (pair.Value.File.RelativeTargetPath)); " is 137.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "		templateEngine.Variables ["ALL_TARGET"] = (ctx.TargetSolution.BaseDirectory == project.BaseDirectory) ? "all-local" : "all"; " is 124.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The length of the statement  "		Stream stream = ctx.GetTemplateStream (generateAutotools ? "Makefile.am.project.template" : "Makefile.noauto.project.template"); " is 128.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,ProcessProjectReferences,The length of the statement  "			ctx.AddGlobalReferencedFile (MakefileData.ToMakefilePath (FileService.AbsoluteToRelativePath (Path.GetFullPath (ctx.BaseDirectory)' assemblyPath))); " is 148.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,ProcessProjectReferences,The length of the statement  "			dllRefWriter.Write (MakefileData.ToMakefilePath (FileService.AbsoluteToRelativePath (project.BaseDirectory' assemblyPath))); " is 124.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,ProcessProjectReferences,The length of the statement  "			throw new Exception (GettextCatalog.GetString ("Project reference type '{0}' not supported yet"' reference.ReferenceType.ToString ())); " is 135.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,HandleDeployFile,The length of the statement  "		fname = FileService.NormalizeRelativePath (FileService.AbsoluteToRelativePath (ctx.TargetSolution.BaseDirectory' full_fname)); " is 126.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,HandleDeployFile,The length of the statement  "		deployFileCopyTargets.AppendFormat ("$(eval $(call emit-deploy-wrapper'{0}'{1}{2}))\n"' targetDeployVar' MakefileData.ToMakefilePath (dependencyDeployFile)' (dfile.FileAttributes & DeployFileAttributes.Executable) != 0 ? "'x" : String.Empty); " is 242.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,HandleDeployFile,The length of the statement  "		if (Path.GetFullPath (dfile.SourcePath) != Path.GetFullPath (Path.Combine (data.Configuration.OutputDirectory' dfile.RelativeTargetPath))) " is 138.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,HandleDeployFile,The length of the statement  "		string installDir = Path.GetDirectoryName (ctx.DeployContext.GetResolvedPath (dfile.TargetDirectoryID' dfile.RelativeTargetPath)); " is 130.
Long Statement,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,EmitCustomCommandTargets,The length of the statement  "					monitor.ReportWarning (GettextCatalog.GetString ("Custom commands of only the following types are supported: {0}."' types_list.ToString ())); " is 141.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,HasGeneratedFiles,The length of the statement  "		return File.Exists (Path.Combine (dir' "Makefile")) && File.Exists (Path.Combine (dir' "configure")) && File.Exists (Path.Combine (dir' "rules.make")); " is 151.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,GenerateFiles,The length of the statement  "			throw new Exception (string.Format ("{0} does not currently support generating {1} for one (or more) child projects."' filesString' BrandingService.ApplicationName)); " is 166.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,Deploy,The length of the statement  "		ProcessWrapper ag_process = Runtime.ProcessService.StartProcess ("sh"' generateAutotools ? "autogen.sh" : "configure"' baseDir' monitor.Log' monitor.Log' null); " is 160.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,Deploy,The length of the statement  "			throw new Exception (GettextCatalog.GetString ("An unspecified error occurred while running '{0}'"' generateAutotools ? "autogen.sh" : "configure")); " is 149.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,Deploy,The length of the statement  "		ProcessWrapper process = Runtime.ProcessService.StartProcess ("make"' "dist"' baseDir' chainedOutput' monitor.Log' null); " is 121.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateAutoGenDotSH,The length of the statement  "		Syscall.chmod (fileName' FilePermissions.S_IXOTH | FilePermissions.S_IROTH | FilePermissions.S_IRWXU | FilePermissions.S_IRWXG); " is 128.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureDotAC,The length of the statement  "		config_options.AppendFormat ("		[Use '{0}' Configuration [default={1}]])'\n"' context.EscapeAndUpperConfigName (config.Id)' def); " is 129.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureDotAC,The length of the statement  "AM_CONDITIONAL(ENABLE_{3}' test x$enable_{2} = xyes)"' name' s.HelpStr' name.Replace ('-'' '_')' name.Replace ('-'' '_').ToUpperInvariant ())); " is 143.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureDotAC,The length of the statement  "		packageChecks.WriteLine ("PKG_CHECK_MODULES([{0}]' [{1}])"' AutotoolsContext.GetPkgConfigVariable (pkg.Name)' pkg.Name); " is 120.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureDotAC,The length of the statement  "		packageChecks.WriteLine (@"if test ""x$enable_{0}"" = ""xyes""; then"' context.EscapeAndUpperConfigName (config.Id).ToLower ()); " is 128.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureDotAC,The length of the statement  "			packageChecks.WriteLine ("\tPKG_CHECK_MODULES([{0}]' [{1}])"' AutotoolsContext.GetPkgConfigVariable (pkg.Name)' pkg.Name); " is 122.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureScript,The length of the statement  "	string commonPackages = String.Format ("common_packages=\"{0}\""' GetPackageListFromSet (context.GetCommonRequiredPackages ())); " is 128.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureScript,The length of the statement  "		requiredPackages.AppendFormat ("required_packages_{0}=\"{1}\""' context.EscapeAndUpperConfigName (config.Id)' GetPackageListFromSet (pkgs)); " is 140.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateConfigureScript,The length of the statement  "		Syscall.chmod (filename' FilePermissions.S_IXOTH | FilePermissions.S_IROTH | FilePermissions.S_IRWXU | FilePermissions.S_IRWXG); " is 128.
Long Statement,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,CreateMakefileInclude,The length of the statement  "		templateEngine.Variables ["WRAPPER_SED"] = "\n$2: $2.in $(top_srcdir)/config.make\n" + "\tsed -e \"s'@prefix@'$(prefix)'\"" + " -e \"s'@PACKAGE@'$(PACKAGE)'\"" + " -e \"s'@expanded_libdir@'$(libdir)'\"" + " -e \"s'@expanded_bindir@'$(bindir)'\"" + " -e \"s'@expanded_datadir@'$(datadir)'\"" + " < $2.in > $2"; " is 309.
Long Statement,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The length of the statement  "	monitor.BeginTask (GettextCatalog.GetString ("Creating {0} for Solution {1}"' generateAutotools ? "Makefile.am" : "Makefile"' entry.Name)' 1); " is 142.
Long Statement,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The length of the statement  "			solutionTop.AppendFormat ("top_srcdir={0}\n"' FileService.AbsoluteToRelativePath (entry.BaseDirectory' ctx.TargetSolution.BaseDirectory)); " is 138.
Long Statement,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The length of the statement  "						throw new Exception (GettextCatalog.GetString ("More than 1 project in the same directory as the top-level solution is not supported.")); " is 137.
Long Statement,MonoDevelop.Autotools,CustomMakefile,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\CustomMakefile.cs,GetTarget,The length of the statement  "		targetExp = new Regex (@"[.|\n]*^" + var + @"(?<sep>\s*:\s*)" + multilineMatch + @"\t" + multilineMatch' RegexOptions.Multiline | RegexOptions.Compiled); " is 153.
Long Statement,MonoDevelop.Autotools,CustomMakefile,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\CustomMakefile.cs,SaveVariable,The length of the statement  "		varExp = new Regex (@"[.|\n]*^(?<var>" + var + @"((?<sep>\s*:?=\s*\n)|((?<sep>\s*:?=\s*)" + multilineMatch + ")))"' RegexOptions.Multiline | RegexOptions.Compiled); " is 164.
Long Statement,MonoDevelop.Autotools,CustomMakefile,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\CustomMakefile.cs,SaveVariable,The length of the statement  "	content = String.Concat (content.Substring (0' grp.Index)' GetVariable (var)' content.Substring (grp.Index + varLength)); " is 121.
Long Statement,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The length of the statement  "				Console.WriteLine (GettextCatalog.GetString ("Error: Filename already specified - {0}' another filename '{1}' cannot be specified."' filename' s)); " is 147.
Long Statement,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The length of the statement  "		string msg = GettextCatalog.GetString ("{0} already exist for this solution.  Would you like to overwrite them? (Y/N)"' generateAutotools ? "Autotools files" : "Makefiles"); " is 173.
Long Statement,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,ShowUsage,The length of the statement  "	Console.WriteLine (GettextCatalog.GetString (" --simple-makefiles -s\n\tGenerates set of Makefiles with the most common targets' and a configuration script that does a basic check of package dependencies. Default is to generate Makefile structure based on Autotools with the standard targets and configuration scripts.")); " is 322.
Long Statement,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,ShowUsage,The length of the statement  "	Console.WriteLine (GettextCatalog.GetString (" -d:default-config\n\tConfiguration that the Makefile will build by default. Other configurations can be selected via the '--config' or '--enable-*' option of the generated configure script.")); " is 240.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The length of the statement  "			MessageService.ShowException (parentDialog' e' GettextCatalog.GetString ("Specified makefile is invalid: {0}"' tmpData.AbsoluteMakefileName)); " is 142.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The length of the statement  "		if (tmpData.IsAutotoolsProject && !File.Exists (System.IO.Path.Combine (tmpData.AbsoluteConfigureInPath' "configure.in")) && !File.Exists (System.IO.Path.Combine (tmpData.AbsoluteConfigureInPath' "configure.ac"))) { " is 215.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The length of the statement  "			MessageService.ShowError (parentDialog' GettextCatalog.GetString ("Path specified for configure.in is invalid: {0}"' tmpData.RelativeConfigureInPath)); " is 151.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The length of the statement  "		if (tmpData.SyncReferences && (String.IsNullOrEmpty (tmpData.PackageRefVar.Name) || String.IsNullOrEmpty (tmpData.AsmRefVar.Name) || String.IsNullOrEmpty (tmpData.ProjectRefVar.Name))) { " is 186.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The length of the statement  "			MessageService.ShowError (parentDialog' GettextCatalog.GetString ("'Sync References' is enabled' but one of Reference variables is not set. Please correct this.")); " is 164.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The length of the statement  "			MessageService.ShowError (parentDialog' GettextCatalog.GetString ("Invalid regex for Warning messages: {0}"' e.Message)); " is 121.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The length of the statement  "		using (IProgressMonitor monitor = IdeApp.Workbench.ProgressMonitors.GetStatusProgressMonitor (GettextCatalog.GetString ("Updating project")' "gtk-run"' true)) { " is 160.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,CheckNonEmptyFileVar,The length of the statement  "		MessageService.ShowError (parentDialog' GettextCatalog.GetString ("File variable ({0}) is set for sync'ing' but no valid variable is selected. Either disable the sync'ing or select a variable name."' id)); " is 205.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,HandleEnableMakefileIntegrationClicked,The length of the statement  "					generate = MessageService.Confirm (GettextCatalog.GetString ("No makefile was found in the project directory. Do you want to generate it now?")' GettextCatalog.GetString ("Notice that generation of makefiles is not supported for single projects. A set of makefiles will have to be generated for the whole solution.")' new AlertButton (GettextCatalog.GetString ("Generate Makefile..."))); " is 387.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,TryGetVariables,The length of the statement  "			MessageService.ShowException (parentDialog' e' GettextCatalog.GetString ("Error while trying to read the specified Makefile")); " is 127.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ShowMakefileNotFoundError,The length of the statement  "	MessageService.ShowException (parentDialog' e' GettextCatalog.GetString ("Unable to find the specified Makefile. You need to specify the path to an existing Makefile for use with the 'Makefile Integration' feature.")); " is 218.
Long Statement,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,IsPkgRef,The length of the statement  "	return (file.Length > 5 && file [0] == '-' && file [1] == 'p' && file [2] == 'k' && file [3] == 'g' && file [4] == ':'); " is 120.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,LoadWorkspaceItem,The length of the statement  "			LoggingService.LogError (GettextCatalog.GetString ("Error resolving Makefile based project references for solution {0}"' sol.Name)' e); " is 135.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,LoadWorkspaceItem,The length of the statement  "			monitor.ReportError (GettextCatalog.GetString ("Error resolving Makefile based project references for solution {0}"' sol.Name)' e); " is 131.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,Save,The length of the statement  "		LoggingService.LogError (GettextCatalog.GetString ("Error saving to Makefile ({0}) for project {1}"' data.AbsoluteMakefileName' project.Name' e)); " is 146.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,Save,The length of the statement  "		monitor.ReportError (GettextCatalog.GetString ("Error saving to Makefile ({0}) for project {1}"' data.AbsoluteMakefileName' project.Name)' e); " is 142.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,Build,The length of the statement  "		ProcessWrapper process = Runtime.ProcessService.StartProcess ("make"' args' baseDir' chainedOutput' chainedOutput' null); " is 121.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,ParseOutput,The length of the statement  "	//Regex normalError  = new Regex(@"(?<file>.*)\((?<line>\d+)'(?<column>\d+)\):\s+(?<error>\w+)\s+(?<number>[\d\w]+):\s+(?<message>.*)"' RegexOptions.Compiled); " is 159.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,CreateCompilerErrorFromString,The length of the statement  "	if (error_string.StartsWith ("WROTE SYMFILE") || error_string.StartsWith ("OffsetTable") || error_string.StartsWith ("Compilation succeeded") || error_string.StartsWith ("Compilation failed")) " is 192.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,Clean,The length of the statement  "		ProcessWrapper process = Runtime.ProcessService.StartProcess ("make"' data.CleanTargetName' baseDir' monitor.Log' monitor.Log' null); " is 133.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,Clean,The length of the statement  "			throw new Exception (GettextCatalog.GetString ("An unspecified error occurred while running '{0}'"' "make " + data.CleanTargetName)); " is 133.
Long Statement,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,Execute,The length of the statement  "		ProcessWrapper process = Runtime.ProcessService.StartProcess ("make"' data.ExecuteTargetName' project.BaseDirectory' console.Out' console.Error' null); " is 151.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,InitCompilerMessageRegex,The length of the statement  "		@"((^\s*(?<file>.*):(?<line>\d*)\.(?<column>\d*)-\d*\.\d*: error: (?<message>.*))|(^\s*(?<file>[^:]*):(?<line>\d*){1}(:(?<column>\d*))?\s*:\s*error\s*:\s(?<message>.*)))"' " is 171.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,InitCompilerMessageRegex,The length of the statement  "		@"((^\s*(?<file>.*):(?<line>\d*)\.(?<column>\d*)-\d*\.\d*: warning: (?<message>.*))|(^\s*(?<file>[^:]*):(?<line>\d*){1}(:(?<column>\d*))?\s*:\s*warning\s*:\s(?<message>.*)))" " is 174.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,GetCompilerMessageRegex,The length of the statement  "			LoggingService.LogError ("Invalid {0}Regex '{1}' specified for project '{2}'."' (index == 0 ? "Error" : "Warning")' str' OwnerProject.Name); " is 140.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateProject,The length of the statement  "		monitor.ReportError (GettextCatalog.GetString ("Invalid Makefile '{0}'. Disabling Makefile integration."' AbsoluteMakefileName)' e); " is 132.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateProject,The length of the statement  "		AlertButton choice = MessageService.AskQuestion (GettextCatalog.GetString ("Enabling Makefile integration. You can choose to have either the Project or the Makefile be used as the master copy. This is done only when enabling this feature. After this' the Makefile will be taken as the master copy.")' projectButton' makefileButton); " is 332.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateProject,The length of the statement  "		LoggingService.LogWarning ("Error trying to read configure.in ('{0}') for project '{1}':\n{2}"' AbsoluteConfigureInPath' OwnerProject.Name' e.ToString ()); " is 155.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateProject,The length of the statement  "		monitor.ReportWarning (GettextCatalog.GetString ("Error trying to read configure.in ('{0}') for project '{1}':\n{2}"' AbsoluteConfigureInPath' OwnerProject.Name' e.Message)); " is 174.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateProject,The length of the statement  "						SystemAssembly asm = assemblyContext.GetAssemblyFromFullName (pref.StoredReference' pref.Package != null ? pref.Package.Name : null' dotnetProject.TargetFramework); " is 164.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateProject,The length of the statement  "			if (SaveReferences && (String.Compare (ProjectRefVar.Name' PackageRefVar.Name) != 0) && (String.Compare (ProjectRefVar.Name' AsmRefVar.Name) != 0)) " is 147.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The length of the statement  "		string msg = GettextCatalog.GetString ("Makefile variable '{0}' not found. Skipping syncing of '{1}' file list for project '{2}'."' fileVar.Name' id' ownerProject.Name); " is 169.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The length of the statement  "					string msg = GettextCatalog.GetString ("Files in variable '{0}' contains variables which cannot be parsed without the path " + "to configure.in being set. Ignoring such files."' fileVar.Name); " is 192.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The length of the statement  "				string msg = GettextCatalog.GetString ("Ignoring invalid file '{0}' found in '{1}' for project '{2}'."' f' relativeMakefileName' OwnerProject.Name); " is 148.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadReferences,The length of the statement  "		string msg = GettextCatalog.GetString ("Makefile variable '{0}' not found. Skipping syncing of all '{1}' references for project {2}."' refVar.Name' id' project.Name); " is 166.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadReferences,The length of the statement  "			string msg = GettextCatalog.GetString ("Unable to parse reference '{0}' for project '{1}'. Ignoring."' r' project.Name); " is 120.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The length of the statement  "			LoggingService.LogWarning ("Package named '{0}' not found in configure.in. Ignoring reference to '{1}'."' pkgVarName' rname); " is 125.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The length of the statement  "	if (rname.Length >= 5 && rname [0] == '-' && rname [1] == 'p' && rname [2] == 'k' && rname [3] == 'g' && rname [4] == ':') { " is 124.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The length of the statement  "		if (refname.IndexOf (Path.DirectorySeparatorChar) < 0 && !File.Exists (fullpath) && ParseReferenceAsPackage (refname' project) != null) " is 135.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,UpdateMakefile,The length of the statement  "		if ((String.Compare (ProjectRefVar.Name' PackageRefVar.Name) != 0) && (String.Compare (ProjectRefVar.Name' AsmRefVar.Name) != 0)) { " is 131.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,WriteFiles,The length of the statement  "		string msg = GettextCatalog.GetString ("Makefile variable '{0}' not found. Skipping writing of '{1}' files to the Makefile."' fileVar.Name' id); " is 144.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,WriteFiles,The length of the statement  "			if (pf.BuildAction == BuildAction.EmbeddedResource && pf.ResourceId != null && pf.ResourceId.Length > 0 && pf.ResourceId != unescapedFileName) " is 142.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,WriteReferences,The length of the statement  "		string msg = GettextCatalog.GetString ("Makefile variable '{0}' not found. Skipping syncing of '{1}' references."' refVar.Name' id); " is 132.
Long Statement,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,PackageRefToString,The length of the statement  "				string msg = GettextCatalog.GetString ("A reference to the pkg-config package '{0}' is being emitted to the Makefile' " + "because at least one assembly from the package is used in the project '{1}'. However' " + "this dependency is not specified in the configure.in file' so you might need to " + "add it to ensure that the project builds successfully on other systems."' pkg.Name' pr.OwnerProject.Name); " is 405.
Long Statement,MonoDevelop.Autotools,MakefileSwitchEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileSwitchEditorWidget.cs,HandleEdited,The length of the statement  "	s = new Switch (store.GetValue (iter' 0) as string' store.GetValue (iter' 1) as string' store.GetValue (iter' 2) as string); " is 124.
Complex Conditional,MonoDevelop.Autotools,AutotoolsContext,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\AutotoolsContext.cs,EscapeStringForAutomake,The conditional expression  "!Char.IsLetterOrDigit (c) && c != '.' && c != '/' && c != '_' && c != '-'"  is complex.
Complex Conditional,MonoDevelop.Autotools,AutotoolsContext,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\AutotoolsContext.cs,EscapeStringForAutoconf,The conditional expression  "c == '-' || c == '_' || c == ' ' || c == '|' || (c == '.' && !allowPeriods)"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,MakefileOptionPanelWidget,The conditional expression  "data.BuildFilesVar.Sync || data.DeployFilesVar.Sync || data.ResourcesVar.Sync || data.OthersVar.Sync"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,ValidateChanges,The conditional expression  "tmpData.SyncReferences && (String.IsNullOrEmpty (tmpData.PackageRefVar.Name) || String.IsNullOrEmpty (tmpData.AsmRefVar.Name) || String.IsNullOrEmpty (tmpData.ProjectRefVar.Name))"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The conditional expression  "file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r'"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The conditional expression  "!((s.StartsWith (prefix) && s.Length > prefix.Length) || IsVariable (s) || IsPkgRef (s))"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The conditional expression  "file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's'"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,CreateCompilerErrorFromString,The conditional expression  "error_string.StartsWith ("WROTE SYMFILE") || error_string.StartsWith ("OffsetTable") || error_string.StartsWith ("Compilation succeeded") || error_string.StartsWith ("Compilation failed")"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The conditional expression  "(fname.Length > 2 && fname [0] == '$' && fname [1] == '(') && !UseAutotools"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The conditional expression  "rname.Length > 3 && rname [0] == '$' && rname [1] == '(' && rname [rname.Length - 1] == ')'"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The conditional expression  "rname.Length >= 5 && rname [0] == '-' && rname [1] == 'p' && rname [2] == 'k' && rname [3] == 'g' && rname [4] == ':'"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The conditional expression  "refname.Length >= 2 && refname [0] == '$' && refname [1] == '(' && !UseAutotools"  is complex.
Complex Conditional,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,WriteFiles,The conditional expression  "pf.BuildAction == BuildAction.EmbeddedResource && pf.ResourceId != null && pf.ResourceId.Length > 0 && pf.ResourceId != unescapedFileName"  is complex.
Empty Catch Block,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,CheckRefs,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The method has an empty catch block.
Magic Number,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The following statement contains a magic number: try {  	if (!CanDeploy (entry' generateAutotools ? MakefileType.AutotoolsMakefile : MakefileType.SimpleMakefile))  		throw new Exception (GettextCatalog.GetString ("Not a deployable project."));  	Project project = entry as Project;  	TemplateEngine templateEngine = new TemplateEngine ();  	ISimpleAutotoolsSetup setup = FindSetupForProject (project);  	// Handle files to be deployed  	deployDirs = new Dictionary<string' StringBuilder> ();  	deployFileVars = new Dictionary<string' string> ();  	builtFiles = new List<string> ();  	deployFileCopyVars = new StringBuilder ();  	deployFileCopyTargets = new StringBuilder ();  	//used only for simple makefile generation  	templateFilesTargets = null;  	installTarget = null;  	installDeps = null;  	installDirs = null;  	uninstallTarget = null;  	// handle configuration specific variables  	conf_vars = new StringBuilder ();  	// grab all project files  	files = new StringBuilder ();  	res_files = new StringBuilder ();  	extras = new StringBuilder ();  	datafiles = new StringBuilder ();  	Set<string> extraFiles = new Set<string> ();  	string includes = String.Empty;  	string references' dllReferences;  	DotNetProject netProject = project as DotNetProject;  	ProcessProjectReferences (netProject' out references' out dllReferences' ctx);  	templateEngine.Variables ["REFERENCES"] = references;  	templateEngine.Variables ["DLL_REFERENCES"] = dllReferences;  	templateEngine.Variables ["WARNING"] = "Warning: This is an automatically generated file' do not edit!";  	DotNetProject dotnetProject = entry as DotNetProject;  	if (dotnetProject != null) {  		string resgen = "resgen";  		if (System.Environment.Version.Major >= 2) {  			switch (dotnetProject.TargetFramework.ClrVersion) {  			case ClrVersion.Net_1_1:  				resgen = "resgen1";  				break;  			default:  				resgen = "resgen2";  				break;  			}  		}  		templateEngine.Variables ["RESGEN"] = resgen;  	}  	string pfpath = null;  	foreach (ProjectFile projectFile in project.Files) {  		pfpath = FileService.NormalizeRelativePath (projectFile.FilePath.ToRelative (project.BaseDirectory));  		switch (projectFile.BuildAction) {  		case BuildAction.Compile:  			if (projectFile.Subtype != Subtype.Code)  				continue;  			files.AppendFormat ("\\\n\t{0} "' MakefileData.ToMakefilePath (pfpath));  			break;  		case BuildAction.Content:  		case BuildAction.None:  			extraFiles.Add (MakefileData.ToMakefilePath (pfpath));  			break;  		case BuildAction.EmbeddedResource:  			if (!projectFile.FilePath.IsChildPathOf (ctx.BaseDirectory)) {  				// file is not within directory hierarchy' copy it in  				string rdir = Path.Combine (Path.GetDirectoryName (project.FileName)' resourcedir);  				if (!Directory.Exists (rdir))  					Directory.CreateDirectory (rdir);  				string newPath = Path.Combine (rdir' Path.GetFileName (projectFile.FilePath));  				FileService.CopyFile (projectFile.FilePath' newPath);  				pfpath = project.GetRelativeChildPath (newPath);  				pfpath = FileService.NormalizeRelativePath (pfpath);  			}  			if (!String.IsNullOrEmpty (projectFile.ResourceId) && projectFile.ResourceId != Path.GetFileName (pfpath))  				res_files.AppendFormat ("\\\n\t{0}'{1} "' MakefileData.ToMakefilePath (pfpath)' MakefileData.EscapeString (projectFile.ResourceId));  			else  				res_files.AppendFormat ("\\\n\t{0} "' MakefileData.ToMakefilePath (pfpath));  			break;  		case "FileCopy":  			datafiles.AppendFormat ("\\\n\t{0} "' MakefileData.ToMakefilePath (pfpath));  			break;  		}  	}  	if (!generateAutotools) {  		templateFilesTargets = new StringBuilder ();  		installTarget = new StringBuilder ();  		uninstallTarget = new StringBuilder ();  		installDeps = new StringBuilder ();  		installDirs = new List<string> ();  		customCommands = new StringBuilder ();  		string programFilesDir = ctx.DeployContext.GetDirectory (TargetDirectory.ProgramFiles);  		//FIXME:temp  		programFilesDir = TranslateDir (programFilesDir);  		installDirs.Add (programFilesDir);  		installTarget.Append ("\tmake pre-install-local-hook prefix=$(prefix)\n");  		installTarget.Append ("\tmake install-satellite-assemblies prefix=$(prefix)\n");  		installTarget.AppendFormat ("\tmkdir -p '$(DESTDIR){0}'\n"' programFilesDir);  		installTarget.AppendFormat ("\t$(call cp'$(ASSEMBLY)'$(DESTDIR){0})\n"' programFilesDir);  		installTarget.AppendFormat ("\t$(call cp'$(ASSEMBLY_MDB)'$(DESTDIR){0})\n"' programFilesDir);  		//remove dir?  		uninstallTarget.Append ("\tmake pre-uninstall-local-hook prefix=$(prefix)\n");  		uninstallTarget.Append ("\tmake uninstall-satellite-assemblies prefix=$(prefix)\n");  		uninstallTarget.AppendFormat ("\t$(call rm'$(ASSEMBLY)'$(DESTDIR){0})\n"' programFilesDir);  		uninstallTarget.AppendFormat ("\t$(call rm'$(ASSEMBLY_MDB)'$(DESTDIR){0})\n"' programFilesDir);  		installDeps.Append (" $(ASSEMBLY) $(ASSEMBLY_MDB)");  		conf_vars.AppendFormat ("srcdir=.\n");  		conf_vars.AppendFormat ("top_srcdir={0}\n\n"' FileService.AbsoluteToRelativePath (project.BaseDirectory' ctx.TargetSolution.BaseDirectory));  		conf_vars.AppendFormat ("include $(top_srcdir)/config.make\n\n");  		// Don't emit for top level project makefile(eg. pdn.make)' as it would be  		// included by top level solution makefile  		if (ctx.TargetSolution.BaseDirectory != project.BaseDirectory) {  			string customhooks = Path.Combine (project.BaseDirectory' "custom-hooks.make");  			bool include = File.Exists (customhooks);  			includes = "include $(top_srcdir)/Makefile.include\n";  			includes += String.Format ("{0}include $(srcdir)/custom-hooks.make\n\n"' include ? "" : "#");  			if (include)  				makefile.SetVariable ("EXTRA_DIST"' "$(srcdir)/custom-hooks.make");  		}  	}  	bool buildEnabled;  	List<ConfigSection> configSections = new List<ConfigSection> ();  	allDeployVars = new Dictionary<string' DeployFileData> ();  	foreach (SolutionConfiguration combineConfig in ctx.TargetSolution.Configurations) {  		DotNetProjectConfiguration config = GetProjectConfig (combineConfig.Id' project' out buildEnabled) as DotNetProjectConfiguration;  		if (config == null)  			continue;  		ConfigSection configSection = new ConfigSection (combineConfig.Id);  		string assembly = MakefileData.GetUnixPath (project.GetRelativeChildPath (config.CompiledOutputName));  		configSection.BuildVariablesBuilder.AppendFormat ("ASSEMBLY_COMPILER_COMMAND = {0}\n"' setup.GetCompilerCommand (project' config.Id));  		configSection.BuildVariablesBuilder.AppendFormat ("ASSEMBLY_COMPILER_FLAGS = {0}\n"' setup.GetCompilerFlags (project' config.Id));  		// add check for compiler command in configure.ac  		ctx.AddCommandCheck (setup.GetCompilerCommand (project' config.Id));  		configSection.BuildVariablesBuilder.AppendFormat ("ASSEMBLY = {0}\n"' AutotoolsContext.EscapeStringForAutomake (assembly));  		configSection.BuildVariablesBuilder.AppendFormat ("ASSEMBLY_MDB = {0}\n"' config.DebugMode ? "$(ASSEMBLY).mdb" : String.Empty);  		string target;  		switch (config.CompileTarget) {  		case CompileTarget.Exe:  			target = "exe";  			break;  		case CompileTarget.Library:  			target = "library";  			break;  		case CompileTarget.WinExe:  			target = "winexe";  			break;  		case CompileTarget.Module:  			target = "module";  			break;  		default:  			throw new Exception (GettextCatalog.GetString ("Unknown target {0}"' config.CompileTarget));  		}  		configSection.BuildVariablesBuilder.AppendFormat ("COMPILE_TARGET = {0}\n"' target);  		// for project references' we need a ref to the dll for the current configuration  		StringWriter projectReferences = new StringWriter ();  		string pref = null;  		foreach (ProjectReference reference in netProject.References) {  			if (reference.ReferenceType != ReferenceType.Project)  				continue;  			Project refp = GetProjectFromName (reference.Reference' ctx.TargetSolution);  			if (!(refp is DotNetProject))  				continue;  			DotNetProjectConfiguration dnpc = GetProjectConfig (combineConfig.Id' refp' out buildEnabled) as DotNetProjectConfiguration;  			if (dnpc == null)  				throw new Exception (GettextCatalog.GetString ("Could not add reference to project '{0}'"' refp.Name));  			projectReferences.WriteLine (" \\");  			projectReferences.Write ("\t");  			pref = project.GetRelativeChildPath (dnpc.CompiledOutputName);  			projectReferences.Write (MakefileData.ToMakefilePath (pref));  		}  		configSection.BuildVariablesBuilder.AppendFormat ("PROJECT_REFERENCES = {0}\n"' projectReferences.ToString ());  		string buildDir = project.GetRelativeChildPath (config.OutputDirectory);  		configSection.BuildVariablesBuilder.AppendFormat ("BUILD_DIR = {0}\n"' MakefileData.ToMakefilePath (buildDir));  		// Register files built by this configuration.  		// Built files won't be distributed.  		foreach (string bfile in builtFiles)  			ctx.AddBuiltFile (Path.Combine (config.OutputDirectory' bfile));  		DeployFileCollection deployFiles = DeployService.GetDeployFiles (ctx.DeployContext' new SolutionItem[] {  			project  		}' config.Selector);  		ProcessDeployFilesForConfig (deployFiles' project' configSection' ctx' config);  		configSections.Add (configSection);  		if (!generateAutotools) {  			EmitCustomCommandTargets (config.CustomCommands' project' customCommands' combineConfig.Id' new CustomCommandType[] {  				CustomCommandType.BeforeBuild'  				CustomCommandType.AfterBuild'  				CustomCommandType.BeforeClean'  				CustomCommandType.AfterClean  			}' monitor);  		}  		else {  			if (config.CustomCommands.Count > 0)  				monitor.ReportWarning (GettextCatalog.GetString ("Custom commands are not supported for autotools based makefiles. Ignoring."));  		}  		// Register files generated by the compiler  		ctx.AddBuiltFile (project.GetOutputFileName (combineConfig.Selector));  		if (config.DebugMode)  			ctx.AddBuiltFile (project.GetOutputFileName (combineConfig.Selector) + ".mdb");  		if (config.SignAssembly) {  			string spath = project.GetRelativeChildPath (config.AssemblyKeyFile);  			spath = FileService.NormalizeRelativePath (spath);  			extraFiles.Add (MakefileData.ToMakefilePath (spath));  		}  		if (buildEnabled && pkgs.Count > 0)  			ctx.AddRequiredPackages (combineConfig.Id' pkgs);  	}  	foreach (string ef in extraFiles)  		extras.AppendFormat ("\\\n\t{0} "' ef);  	Dictionary<string' DeployFileData> commonDeployVars = new Dictionary<string' DeployFileData> (allDeployVars);  	foreach (ConfigSection configSection in configSections) {  		List<string> toRemove = new List<string> ();  		foreach (KeyValuePair<string' DeployFileData> pair in commonDeployVars) {  			if (!configSection.DeployFileVars.ContainsKey (pair.Key))  				toRemove.Add (pair.Key);  		}  		foreach (string s in toRemove)  			commonDeployVars.Remove (s);  	}  	//emit the config sections here.. to conf_vars  	foreach (ConfigSection configSection in configSections) {  		conf_vars.AppendFormat (generateAutotools ? "if ENABLE_{0}\n" : "ifeq ($(CONFIG)'{0})\n"' ctx.EscapeAndUpperConfigName (configSection.Name));  		conf_vars.Append (configSection.BuildVariablesBuilder.ToString ());  		conf_vars.Append ("\n");  		if (ctx.Switches != null) {  			foreach (Switch s in ctx.Switches) {  				conf_vars.AppendLine (string.Format (@"if ENABLE_{0} ASSEMBLY_COMPILER_FLAGS += -define:{1} endif"' s.SwitchName.Replace ('-'' '_').ToUpperInvariant ()' s.Define));  			}  		}  		foreach (KeyValuePair<string' DeployFileData> pair in allDeployVars) {  			string targetDeployVar = pair.Key;  			if (pair.Value.File.ContainsPathReferences)  				//Template files are not handled per-config  				continue;  			if (configSection.DeployFileVars.ContainsKey (targetDeployVar)) {  				//use the dfile from the config section  				DeployFile dfile = configSection.DeployFileVars [targetDeployVar];  				string fname = MakefileData.ToMakefilePath (FileService.AbsoluteToRelativePath (Path.GetFullPath (project.BaseDirectory)' Path.GetFullPath (dfile.SourcePath)));  				conf_vars.AppendFormat ("{0}_SOURCE={1}\n"' targetDeployVar' fname);  				if (!commonDeployVars.ContainsKey (targetDeployVar)) {  					//FOO_DLL=$(BUILD_DIR)/foo.dll  					conf_vars.AppendFormat ("{0}=$(BUILD_DIR)/{1}\n"' targetDeployVar' MakefileData.ToMakefilePath (dfile.RelativeTargetPath));  				}  			}  			else {  				// not common and not part of @configSection  				conf_vars.AppendFormat ("{0}=\n"' pair.Key);  			}  		}  		conf_vars.Append ("\nendif\n\n");  	}  	conf_vars.AppendFormat ("AL={0}\n"' (dotnetProject.TargetFramework.ClrVersion == ClrVersion.Net_2_0) ? "al2" : "al");  	conf_vars.AppendFormat ("SATELLITE_ASSEMBLY_NAME=$(notdir $(basename $(ASSEMBLY))).resources.dll\n");  	foreach (KeyValuePair<string' DeployFileData> pair in allDeployVars) {  		HandleDeployFile (pair.Value' pair.Key' project' ctx);  		if (commonDeployVars.ContainsKey (pair.Key)) {  			//FOO_DLL=$(BUILD_DIR)/foo.dll  			deployFileCopyVars.AppendFormat ("{0} = $(BUILD_DIR)/{1}\n"' pair.Key' MakefileData.ToMakefilePath (pair.Value.File.RelativeTargetPath));  		}  	}  	conf_vars.Append ('\n');  	StringBuilder vars = new StringBuilder ();  	foreach (KeyValuePair<string' StringBuilder> pair in deployDirs) {  		//PROGRAM_FILES= .. etc  		conf_vars.AppendFormat ("{0} = {1} \n\n"' pair.Key' pair.Value.ToString ());  		//Build list of deploy dir variables  		vars.AppendFormat ("$({0}) "' pair.Key);  	}  	if (!generateAutotools) {  		installTarget.Insert (0' String.Format ("install-local:{0}\n"' installDeps.ToString ()));  		installTarget.Append ("\tmake post-install-local-hook prefix=$(prefix)\n");  		uninstallTarget.Insert (0' String.Format ("uninstall-local:{0}\n"' installDeps.ToString ()));  		uninstallTarget.Append ("\tmake post-uninstall-local-hook prefix=$(prefix)\n");  	}  	if (!generateAutotools && customCommands.Length > 0)  		customCommands.Insert (0' "# Targets for Custom commands\n");  	templateEngine.Variables ["CONFIG_VARS"] = conf_vars.ToString ();  	templateEngine.Variables ["DEPLOY_FILE_VARS"] = vars.ToString ();  	templateEngine.Variables ["COPY_DEPLOY_FILES_VARS"] = deployFileCopyVars.ToString ();  	templateEngine.Variables ["COPY_DEPLOY_FILES_TARGETS"] = deployFileCopyTargets.ToString ();  	templateEngine.Variables ["ALL_TARGET"] = (ctx.TargetSolution.BaseDirectory == project.BaseDirectory) ? "all-local" : "all";  	templateEngine.Variables ["INCLUDES"] = includes;  	templateEngine.Variables ["FILES"] = files.ToString ();  	templateEngine.Variables ["RESOURCES"] = res_files.ToString ();  	templateEngine.Variables ["EXTRAS"] = extras.ToString ();  	templateEngine.Variables ["DATA_FILES"] = datafiles.ToString ();  	templateEngine.Variables ["CLEANFILES"] = vars.ToString ();  	if (!generateAutotools) {  		templateEngine.Variables ["TEMPLATE_FILES_TARGETS"] = templateFilesTargets.ToString ();  		templateEngine.Variables ["INSTALL_TARGET"] = installTarget.ToString ();  		templateEngine.Variables ["UNINSTALL_TARGET"] = uninstallTarget.ToString ();  		templateEngine.Variables ["CUSTOM_COMMAND_TARGETS"] = customCommands.ToString ();  	}  	// Create project specific makefile  	Stream stream = ctx.GetTemplateStream (generateAutotools ? "Makefile.am.project.template" : "Makefile.noauto.project.template");  	StreamReader reader = new StreamReader (stream);  	string txt = templateEngine.Process (reader);  	reader.Close ();  	makefile.Append (txt);  	monitor.Step (1);  }  finally {  	monitor.EndTask ();  }  
Magic Number,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The following statement contains a magic number: if (dotnetProject != null) {  	string resgen = "resgen";  	if (System.Environment.Version.Major >= 2) {  		switch (dotnetProject.TargetFramework.ClrVersion) {  		case ClrVersion.Net_1_1:  			resgen = "resgen1";  			break;  		default:  			resgen = "resgen2";  			break;  		}  	}  	templateEngine.Variables ["RESGEN"] = resgen;  }  
Magic Number,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The following statement contains a magic number: if (System.Environment.Version.Major >= 2) {  	switch (dotnetProject.TargetFramework.ClrVersion) {  	case ClrVersion.Net_1_1:  		resgen = "resgen1";  		break;  	default:  		resgen = "resgen2";  		break;  	}  }  
Magic Number,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,Deploy,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Deploying Solution to Tarball")' 3);  
Magic Number,MonoDevelop.Autotools,SolutionDeployer,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionDeployer.cs,Deploy,The following statement contains a magic number: try {  	string baseDir = Path.GetDirectoryName (solution.FileName);  	ProcessWrapper ag_process = Runtime.ProcessService.StartProcess ("sh"' generateAutotools ? "autogen.sh" : "configure"' baseDir' monitor.Log' monitor.Log' null);  	ag_process.WaitForOutput ();  	if (ag_process.ExitCode > 0)  		throw new Exception (GettextCatalog.GetString ("An unspecified error occurred while running '{0}'"' generateAutotools ? "autogen.sh" : "configure"));  	monitor.Step (1);  	StringWriter sw = new StringWriter ();  	LogTextWriter chainedOutput = new LogTextWriter ();  	chainedOutput.ChainWriter (monitor.Log);  	chainedOutput.ChainWriter (sw);  	ProcessWrapper process = Runtime.ProcessService.StartProcess ("make"' "dist"' baseDir' chainedOutput' monitor.Log' null);  	process.WaitForOutput ();  	if (process.ExitCode > 0)  		throw new Exception (GettextCatalog.GetString ("An unspecified error occurred while running '{0}'"' "make dist"));  	monitor.Step (1);  	// FIXME: hackish way to get the created tarball's filename  	string output = sw.ToString ();  	int targz = output.LastIndexOf ("tar.gz");  	int begin = output.LastIndexOf ('>'' targz);  	string filename = output.Substring (begin + 1' (targz - begin) + 5).Trim ();  	FileService.CopyFile (Path.Combine (baseDir' filename)' Path.Combine (targetDir' filename));  	monitor.Step (1);  }  catch (Exception e) {  	monitor.ReportError (GettextCatalog.GetString ("Solution could not be deployed: ")' e);  	return false;  }  finally {  	monitor.EndTask ();  }  
Magic Number,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The following statement contains a magic number: try {  	SolutionFolder solutionFolder = (SolutionFolder)entry;  	string targetDirectory = solutionFolder.BaseDirectory;  	StringBuilder subdirs = new StringBuilder ();  	subdirs.Append ("#Warning: This is an automatically generated file' do not edit!\n");  	if (!generateAutotools) {  		solutionTop.AppendFormat ("top_srcdir={0}\n"' FileService.AbsoluteToRelativePath (entry.BaseDirectory' ctx.TargetSolution.BaseDirectory));  		solutionTop.Append ("include $(top_srcdir)/config.make\n");  		solutionTop.Append ("include $(top_srcdir)/Makefile.include\n");  		solutionTop.Append ("include $(top_srcdir)/rules.make\n\n");  		solutionTop.Append ("#include $(top_srcdir)/custom-hooks.make\n\n");  	}  	ArrayList children = new ArrayList ();  	foreach (SolutionConfiguration config in solutionFolder.ParentSolution.Configurations) {  		if (!ctx.IsSupportedConfiguration (config.Id))  			continue;  		if (generateAutotools)  			subdirs.AppendFormat ("if {0}\n"' "ENABLE_" + ctx.EscapeAndUpperConfigName (config.Id));  		else  			subdirs.AppendFormat ("ifeq ($(CONFIG)'{0})\n"' ctx.EscapeAndUpperConfigName (config.Id));  		subdirs.Append (" SUBDIRS = ");  		foreach (SolutionItem ce in CalculateSubDirOrder (ctx' solutionFolder' config)) {  			string baseDirectory;  			if (!(ce is SolutionEntityItem) && !(ce is SolutionFolder))  				continue;  			// Ignore projects which can't be deployed  			IMakefileHandler handler = AutotoolsContext.GetMakefileHandler (ce' ctx.MakefileType);  			if (handler == null)  				continue;  			baseDirectory = ce.BaseDirectory;  			if (solutionFolder.BaseDirectory == baseDirectory) {  				subdirs.Append (" . ");  			}  			else {  				if (!baseDirectory.StartsWith (solutionFolder.BaseDirectory))  					throw new Exception (GettextCatalog.GetString ("Child projects must be in sub-directories of their parent"));  				// add the subdirectory to the list  				string path = FileService.AbsoluteToRelativePath (targetDirectory' baseDirectory);  				if (path.StartsWith ("." + Path.DirectorySeparatorChar))  					path = path.Substring (2);  				AutotoolsContext.CheckSpaces (path);  				subdirs.Append (" ");  				subdirs.Append (AutotoolsContext.EscapeStringForAutomake (path));  			}  			if (!children.Contains (ce))  				children.Add (ce);  		}  		subdirs.Append ("\nendif\n");  	}  	solutionTop.Append (subdirs.ToString ());  	string includedProject = null;  	// deploy recursively  	foreach (SolutionItem ce in children) {  		IMakefileHandler handler = AutotoolsContext.GetMakefileHandler (ce' ctx.MakefileType);  		Makefile makefile;  		string outpath;  		if (handler != null && handler.CanDeploy (ce' ctx.MakefileType)) {  			ctx.RegisterBuiltProject (ce);  			makefile = handler.Deploy (ctx' ce' monitor);  			if (targetDirectory == ce.BaseDirectory) {  				if (includedProject != null)  					throw new Exception (GettextCatalog.GetString ("More than 1 project in the same directory as the top-level solution is not supported."));  				// project is in the solution directory  				string projectMakefileName = ce.Name + ".make";  				includedProject = String.Format ("include {0}"' projectMakefileName);  				outpath = Path.Combine (targetDirectory' projectMakefileName);  				ctx.AddGeneratedFile (outpath);  				if (!generateAutotools)  					solutionMakefile.SetVariable ("EXTRA_DIST"' projectMakefileName);  			}  			else {  				makefile.AppendToVariable ("EXTRA_DIST"' generateAutotools ? String.Empty : "Makefile");  				outpath = Path.Combine (ce.BaseDirectory' "Makefile");  				if (generateAutotools) {  					ctx.AddAutoconfFile (outpath);  					outpath = outpath + ".am";  				}  				else {  					makefile.Append ("install: install-local\nuninstall: uninstall-local\nclean: clean-local\n");  					if (ce is SolutionFolder)  						//non TargetCombine  						makefile.Append ("dist-local: dist-local-recursive\n");  					else  						makefile.Append ("include $(top_srcdir)/rules.make\n");  				}  				ctx.AddGeneratedFile (outpath);  			}  			StreamWriter writer = new StreamWriter (outpath);  			makefile.Write (writer);  			writer.Close ();  		}  		else {  			monitor.Log.WriteLine ("Project '{0}' skipped."' ce.Name);  		}  	}  	if (includedProject != null) {  		solutionTop.Append (GettextCatalog.GetString ("\n# Include project specific makefile\n"));  		solutionTop.Append (includedProject);  	}  	if (generateAutotools) {  		solutionMakefile.Append (solutionTop.ToString ());  	}  	else {  		TemplateEngine templateEngine = new TemplateEngine ();  		templateEngine.Variables ["MAKEFILE_SOLUTION_TOP"] = solutionTop.ToString ();  		Stream stream = ctx.GetTemplateStream ("Makefile.solution.template");  		StreamReader reader = new StreamReader (stream);  		StringWriter sw = new StringWriter ();  		templateEngine.Process (reader' sw);  		reader.Close ();  		solutionMakefile.Append (sw.ToString ());  		if (solutionFolder.IsRoot) {  			// Emit dist and distcheck targets only for TargetCombine  			reader = new StreamReader (Path.Combine (ctx.TemplateDir' "make-dist.targets"));  			solutionMakefile.Append (reader.ReadToEnd ());  			reader.Close ();  		}  	}  	monitor.Step (1);  }  finally {  	monitor.EndTask ();  }  
Magic Number,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The following statement contains a magic number: foreach (SolutionConfiguration config in solutionFolder.ParentSolution.Configurations) {  	if (!ctx.IsSupportedConfiguration (config.Id))  		continue;  	if (generateAutotools)  		subdirs.AppendFormat ("if {0}\n"' "ENABLE_" + ctx.EscapeAndUpperConfigName (config.Id));  	else  		subdirs.AppendFormat ("ifeq ($(CONFIG)'{0})\n"' ctx.EscapeAndUpperConfigName (config.Id));  	subdirs.Append (" SUBDIRS = ");  	foreach (SolutionItem ce in CalculateSubDirOrder (ctx' solutionFolder' config)) {  		string baseDirectory;  		if (!(ce is SolutionEntityItem) && !(ce is SolutionFolder))  			continue;  		// Ignore projects which can't be deployed  		IMakefileHandler handler = AutotoolsContext.GetMakefileHandler (ce' ctx.MakefileType);  		if (handler == null)  			continue;  		baseDirectory = ce.BaseDirectory;  		if (solutionFolder.BaseDirectory == baseDirectory) {  			subdirs.Append (" . ");  		}  		else {  			if (!baseDirectory.StartsWith (solutionFolder.BaseDirectory))  				throw new Exception (GettextCatalog.GetString ("Child projects must be in sub-directories of their parent"));  			// add the subdirectory to the list  			string path = FileService.AbsoluteToRelativePath (targetDirectory' baseDirectory);  			if (path.StartsWith ("." + Path.DirectorySeparatorChar))  				path = path.Substring (2);  			AutotoolsContext.CheckSpaces (path);  			subdirs.Append (" ");  			subdirs.Append (AutotoolsContext.EscapeStringForAutomake (path));  		}  		if (!children.Contains (ce))  			children.Add (ce);  	}  	subdirs.Append ("\nendif\n");  }  
Magic Number,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The following statement contains a magic number: foreach (SolutionItem ce in CalculateSubDirOrder (ctx' solutionFolder' config)) {  	string baseDirectory;  	if (!(ce is SolutionEntityItem) && !(ce is SolutionFolder))  		continue;  	// Ignore projects which can't be deployed  	IMakefileHandler handler = AutotoolsContext.GetMakefileHandler (ce' ctx.MakefileType);  	if (handler == null)  		continue;  	baseDirectory = ce.BaseDirectory;  	if (solutionFolder.BaseDirectory == baseDirectory) {  		subdirs.Append (" . ");  	}  	else {  		if (!baseDirectory.StartsWith (solutionFolder.BaseDirectory))  			throw new Exception (GettextCatalog.GetString ("Child projects must be in sub-directories of their parent"));  		// add the subdirectory to the list  		string path = FileService.AbsoluteToRelativePath (targetDirectory' baseDirectory);  		if (path.StartsWith ("." + Path.DirectorySeparatorChar))  			path = path.Substring (2);  		AutotoolsContext.CheckSpaces (path);  		subdirs.Append (" ");  		subdirs.Append (AutotoolsContext.EscapeStringForAutomake (path));  	}  	if (!children.Contains (ce))  		children.Add (ce);  }  
Magic Number,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The following statement contains a magic number: if (solutionFolder.BaseDirectory == baseDirectory) {  	subdirs.Append (" . ");  }  else {  	if (!baseDirectory.StartsWith (solutionFolder.BaseDirectory))  		throw new Exception (GettextCatalog.GetString ("Child projects must be in sub-directories of their parent"));  	// add the subdirectory to the list  	string path = FileService.AbsoluteToRelativePath (targetDirectory' baseDirectory);  	if (path.StartsWith ("." + Path.DirectorySeparatorChar))  		path = path.Substring (2);  	AutotoolsContext.CheckSpaces (path);  	subdirs.Append (" ");  	subdirs.Append (AutotoolsContext.EscapeStringForAutomake (path));  }  
Magic Number,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The following statement contains a magic number: if (path.StartsWith ("." + Path.DirectorySeparatorChar))  	path = path.Substring (2);  
Magic Number,MonoDevelop.Autotools,SolutionMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SolutionMakefileHandler.cs,Deploy,The following statement contains a magic number: path = path.Substring (2);  
Magic Number,MonoDevelop.Autotools,TemplateEngine,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\TemplateEngine.cs,Process,The following statement contains a magic number: for (int i = 0; i < input.Length - 1; ++i) {  	char c = input [i];  	if (c == '%' && input [i + 1] == '%') {  		i += 2;  		StringBuilder varname = new StringBuilder ();  		for (; i < input.Length - 1; ++i) {  			if (input [i] == '%' && input [i + 1] == '%') {  				i += 1;  				break;  			}  			varname.Append (input [i]);  		}  		string val;  		if (Variables.TryGetValue (varname.ToString ()' out val))  			result.Append (val);  		else  			LoggingService.LogWarning ("No replacement for variable %%" + varname + "%% defined");  		continue;  	}  	result.Append (c);  }  
Magic Number,MonoDevelop.Autotools,TemplateEngine,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\TemplateEngine.cs,Process,The following statement contains a magic number: if (c == '%' && input [i + 1] == '%') {  	i += 2;  	StringBuilder varname = new StringBuilder ();  	for (; i < input.Length - 1; ++i) {  		if (input [i] == '%' && input [i + 1] == '%') {  			i += 1;  			break;  		}  		varname.Append (input [i]);  	}  	string val;  	if (Variables.TryGetValue (varname.ToString ()' out val))  		result.Append (val);  	else  		LoggingService.LogWarning ("No replacement for variable %%" + varname + "%% defined");  	continue;  }  
Magic Number,MonoDevelop.Autotools,TemplateEngine,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\TemplateEngine.cs,Process,The following statement contains a magic number: i += 2;  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: foreach (string s in arguments) {  	if (s == "--simple-makefiles" || s == "-s") {  		generateAutotools = false;  	}  	else if (s.StartsWith ("-d:")) {  		if (s.Length > 3)  			defaultConfig = s.Substring (3);  	}  	else if (s [0] == '-') {  		Console.WriteLine (GettextCatalog.GetString ("Error: Unknown option {0}"' s));  		return 1;  	}  	else {  		if (filename != null) {  			Console.WriteLine (GettextCatalog.GetString ("Error: Filename already specified - {0}' another filename '{1}' cannot be specified."' filename' s));  			return 1;  		}  		filename = s;  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: foreach (string s in arguments) {  	if (s == "--simple-makefiles" || s == "-s") {  		generateAutotools = false;  	}  	else if (s.StartsWith ("-d:")) {  		if (s.Length > 3)  			defaultConfig = s.Substring (3);  	}  	else if (s [0] == '-') {  		Console.WriteLine (GettextCatalog.GetString ("Error: Unknown option {0}"' s));  		return 1;  	}  	else {  		if (filename != null) {  			Console.WriteLine (GettextCatalog.GetString ("Error: Filename already specified - {0}' another filename '{1}' cannot be specified."' filename' s));  			return 1;  		}  		filename = s;  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: if (s == "--simple-makefiles" || s == "-s") {  	generateAutotools = false;  }  else if (s.StartsWith ("-d:")) {  	if (s.Length > 3)  		defaultConfig = s.Substring (3);  }  else if (s [0] == '-') {  	Console.WriteLine (GettextCatalog.GetString ("Error: Unknown option {0}"' s));  	return 1;  }  else {  	if (filename != null) {  		Console.WriteLine (GettextCatalog.GetString ("Error: Filename already specified - {0}' another filename '{1}' cannot be specified."' filename' s));  		return 1;  	}  	filename = s;  }  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: if (s == "--simple-makefiles" || s == "-s") {  	generateAutotools = false;  }  else if (s.StartsWith ("-d:")) {  	if (s.Length > 3)  		defaultConfig = s.Substring (3);  }  else if (s [0] == '-') {  	Console.WriteLine (GettextCatalog.GetString ("Error: Unknown option {0}"' s));  	return 1;  }  else {  	if (filename != null) {  		Console.WriteLine (GettextCatalog.GetString ("Error: Filename already specified - {0}' another filename '{1}' cannot be specified."' filename' s));  		return 1;  	}  	filename = s;  }  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: if (s.StartsWith ("-d:")) {  	if (s.Length > 3)  		defaultConfig = s.Substring (3);  }  else if (s [0] == '-') {  	Console.WriteLine (GettextCatalog.GetString ("Error: Unknown option {0}"' s));  	return 1;  }  else {  	if (filename != null) {  		Console.WriteLine (GettextCatalog.GetString ("Error: Filename already specified - {0}' another filename '{1}' cannot be specified."' filename' s));  		return 1;  	}  	filename = s;  }  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: if (s.StartsWith ("-d:")) {  	if (s.Length > 3)  		defaultConfig = s.Substring (3);  }  else if (s [0] == '-') {  	Console.WriteLine (GettextCatalog.GetString ("Error: Unknown option {0}"' s));  	return 1;  }  else {  	if (filename != null) {  		Console.WriteLine (GettextCatalog.GetString ("Error: Filename already specified - {0}' another filename '{1}' cannot be specified."' filename' s));  		return 1;  	}  	filename = s;  }  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: if (s.Length > 3)  	defaultConfig = s.Substring (3);  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: if (s.Length > 3)  	defaultConfig = s.Substring (3);  
Magic Number,MonoDevelop.Autotools,MakefileGeneratorTool,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileGeneratorTool.cs,Run,The following statement contains a magic number: defaultConfig = s.Substring (3);  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,MakefileOptionPanelWidget,The following statement contains a magic number: combos = new ComboBox[7] {  	comboFilesVar'  	comboDeployFilesVar'  	comboResourcesVar'  	comboOthersVar'  	comboPackageRefVar'  	comboAsmRefVar'  	comboProjectRefVar  };  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file) || IsPkgRef (file))  		continue;  	//check for prefix  	if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  		if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  			prefix = file.Substring (0' file.IndexOf (':') + 1);  		}  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file) || IsPkgRef (file))  		continue;  	//check for prefix  	if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  		if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  			prefix = file.Substring (0' file.IndexOf (':') + 1);  		}  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file) || IsPkgRef (file))  		continue;  	//check for prefix  	if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  		if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  			prefix = file.Substring (0' file.IndexOf (':') + 1);  		}  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file) || IsPkgRef (file))  		continue;  	//check for prefix  	if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  		if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  			prefix = file.Substring (0' file.IndexOf (':') + 1);  		}  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file) || IsPkgRef (file))  		continue;  	//check for prefix  	if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  		if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  			prefix = file.Substring (0' file.IndexOf (':') + 1);  		}  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  	if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  		prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  	if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  		prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  	if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  		prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  	if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  		prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file.Length > 3 && (file [0] == '-' || file [0] == '/') && file [1] == 'r') {  	if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  		prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  	prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  	prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  	prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessRefPrefix,The following statement contains a magic number: if (file [2] == ':' || (file.Length > 12 && file.Substring (2' 9) == "eference:")) {  	prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file))  		continue;  	if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  		//check for prefix  		if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  			prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file))  		continue;  	if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  		//check for prefix  		if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  			prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file))  		continue;  	if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  		//check for prefix  		if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  			prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file))  		continue;  	if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  		//check for prefix  		if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  			prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file))  		continue;  	if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  		//check for prefix  		if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  			prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file))  		continue;  	if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  		//check for prefix  		if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  			prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: for (i = 0; i < list.Count; i++) {  	string file = list [i];  	if (IsVariable (file))  		continue;  	if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  		//check for prefix  		if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  			prefix = file.Substring (0' file.IndexOf (':') + 1);  	}  	break;  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  	//check for prefix  	if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  		prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  	//check for prefix  	if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  		prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  	//check for prefix  	if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  		prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  	//check for prefix  	if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  		prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  	//check for prefix  	if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  		prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  	//check for prefix  	if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  		prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file.Length > 5 && (file [0] == '-' || file [0] == '/') && file [1] == 'r' && file [2] == 'e' && file [3] == 's') {  	//check for prefix  	if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  		prefix = file.Substring (0' file.IndexOf (':') + 1);  }  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  	prefix = file.Substring (0' file.IndexOf (':') + 1);  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  	prefix = file.Substring (0' file.IndexOf (':') + 1);  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  	prefix = file.Substring (0' file.IndexOf (':') + 1);  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,GuessResPrefix,The following statement contains a magic number: if (file [4] == ':' || (file.Length > 11 && file.Substring (2' 8) == "esource:"))  	prefix = file.Substring (0' file.IndexOf (':') + 1);  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,IsVariable,The following statement contains a magic number: return (file.Length > 3 && file [0] == '$' && file [1] == '(' && file.IndexOf (')') == file.Length - 1);  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,IsPkgRef,The following statement contains a magic number: return (file.Length > 5 && file [0] == '-' && file [1] == 'p' && file [2] == 'k' && file [3] == 'g' && file [4] == ':');  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,IsPkgRef,The following statement contains a magic number: return (file.Length > 5 && file [0] == '-' && file [1] == 'p' && file [2] == 'k' && file [3] == 'g' && file [4] == ':');  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,IsPkgRef,The following statement contains a magic number: return (file.Length > 5 && file [0] == '-' && file [1] == 'p' && file [2] == 'k' && file [3] == 'g' && file [4] == ':');  
Magic Number,MonoDevelop.Autotools,MakefileOptionPanelWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileOptionPanelWidget.cs,IsPkgRef,The following statement contains a magic number: return (file.Length > 5 && file [0] == '-' && file [1] == 'p' && file [2] == 'k' && file [3] == 'g' && file [4] == ':');  
Magic Number,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,CreateCompilerErrorFromString,The following statement contains a magic number: if (match.Success) {  	//FIXME: Not always available' make -w is required or how?  	//what to use then?  	if (match.Groups [1].Value == "Entering")  		dirs.Push (match.Groups [2].Value);  	else if (match.Groups [1].Value == "Leaving")  		dirs.Pop ();  	return null;  }  
Magic Number,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,CreateCompilerErrorFromString,The following statement contains a magic number: if (match.Groups [1].Value == "Entering")  	dirs.Push (match.Groups [2].Value);  else if (match.Groups [1].Value == "Leaving")  	dirs.Pop ();  
Magic Number,MonoDevelop.Autotools,MakefileProjectServiceExtension,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileProjectServiceExtension.cs,CreateCompilerErrorFromString,The following statement contains a magic number: dirs.Push (match.Groups [2].Value);  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,GetCompilerMessageRegex,The following statement contains a magic number: if (customRegex == null)  	customRegex = new Regex[2];  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,GetCompilerMessageRegex,The following statement contains a magic number: customRegex = new Regex[2];  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The following statement contains a magic number: foreach (string f in files) {  	string fname = f.Trim ();  	try {  		if (usePrefix && String.Compare (fileVar.Prefix' 0' fname' 0' len) == 0)  			//FIXME: If it doesn't match' then?  			fname = fname.Substring (len);  		fname = FromMakefilePath (fname);  		string resourceId = null;  		if (buildAction == BuildAction.EmbeddedResource && fname.IndexOf (''') >= 0) {  			string[] tmp = fname.Split (new char[] {  				'''  			}' 2);  			fname = tmp [0];  			if (tmp.Length > 1)  				resourceId = tmp [1];  		}  		if ((fname.Length > 2 && fname [0] == '$' && fname [1] == '(') && !UseAutotools) {  			fileVar.Extra.Add (f);  			if (!autotoolsWarned) {  				string msg = GettextCatalog.GetString ("Files in variable '{0}' contains variables which cannot be parsed without the path " + "to configure.in being set. Ignoring such files."' fileVar.Name);  				LoggingService.LogWarning (msg);  				monitor.ReportWarning (msg);  				autotoolsWarned = true;  			}  			continue;  		}  		varFound = false;  		fname = ResolveBuildVars (fname' ref varFound);  		EncodeValues [fileVar.Name] |= varFound;  		//File path in the makefile are relative to the makefile'  		//but have to be added to the project as relative to project.BaseDirectory  		string absPath = Path.GetFullPath (Path.Combine (BaseDirectory' fname));  		if (existingFiles.ContainsKey (absPath)) {  			existingFiles.Remove (absPath);  			continue;  		}  		if (!File.Exists (absPath)) {  			//Invalid file' maybe we couldn't parse it correctly!  			string msg = GettextCatalog.GetString ("Ignoring invalid file '{0}' found in '{1}' for project '{2}'."' f' relativeMakefileName' OwnerProject.Name);  			LoggingService.LogWarning (msg);  			monitor.ReportWarning (msg);  			fileVar.Extra.Add (f);  			continue;  		}  		ProjectFile pf = ownerProject.AddFile (absPath' buildAction);  		if (buildAction == BuildAction.EmbeddedResource && resourceId != null)  			pf.ResourceId = resourceId;  	}  	catch (Exception e) {  		LoggingService.LogError (e.ToString ());  		fileVar.Extra.Add (f);  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The following statement contains a magic number: foreach (string f in files) {  	string fname = f.Trim ();  	try {  		if (usePrefix && String.Compare (fileVar.Prefix' 0' fname' 0' len) == 0)  			//FIXME: If it doesn't match' then?  			fname = fname.Substring (len);  		fname = FromMakefilePath (fname);  		string resourceId = null;  		if (buildAction == BuildAction.EmbeddedResource && fname.IndexOf (''') >= 0) {  			string[] tmp = fname.Split (new char[] {  				'''  			}' 2);  			fname = tmp [0];  			if (tmp.Length > 1)  				resourceId = tmp [1];  		}  		if ((fname.Length > 2 && fname [0] == '$' && fname [1] == '(') && !UseAutotools) {  			fileVar.Extra.Add (f);  			if (!autotoolsWarned) {  				string msg = GettextCatalog.GetString ("Files in variable '{0}' contains variables which cannot be parsed without the path " + "to configure.in being set. Ignoring such files."' fileVar.Name);  				LoggingService.LogWarning (msg);  				monitor.ReportWarning (msg);  				autotoolsWarned = true;  			}  			continue;  		}  		varFound = false;  		fname = ResolveBuildVars (fname' ref varFound);  		EncodeValues [fileVar.Name] |= varFound;  		//File path in the makefile are relative to the makefile'  		//but have to be added to the project as relative to project.BaseDirectory  		string absPath = Path.GetFullPath (Path.Combine (BaseDirectory' fname));  		if (existingFiles.ContainsKey (absPath)) {  			existingFiles.Remove (absPath);  			continue;  		}  		if (!File.Exists (absPath)) {  			//Invalid file' maybe we couldn't parse it correctly!  			string msg = GettextCatalog.GetString ("Ignoring invalid file '{0}' found in '{1}' for project '{2}'."' f' relativeMakefileName' OwnerProject.Name);  			LoggingService.LogWarning (msg);  			monitor.ReportWarning (msg);  			fileVar.Extra.Add (f);  			continue;  		}  		ProjectFile pf = ownerProject.AddFile (absPath' buildAction);  		if (buildAction == BuildAction.EmbeddedResource && resourceId != null)  			pf.ResourceId = resourceId;  	}  	catch (Exception e) {  		LoggingService.LogError (e.ToString ());  		fileVar.Extra.Add (f);  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The following statement contains a magic number: try {  	if (usePrefix && String.Compare (fileVar.Prefix' 0' fname' 0' len) == 0)  		//FIXME: If it doesn't match' then?  		fname = fname.Substring (len);  	fname = FromMakefilePath (fname);  	string resourceId = null;  	if (buildAction == BuildAction.EmbeddedResource && fname.IndexOf (''') >= 0) {  		string[] tmp = fname.Split (new char[] {  			'''  		}' 2);  		fname = tmp [0];  		if (tmp.Length > 1)  			resourceId = tmp [1];  	}  	if ((fname.Length > 2 && fname [0] == '$' && fname [1] == '(') && !UseAutotools) {  		fileVar.Extra.Add (f);  		if (!autotoolsWarned) {  			string msg = GettextCatalog.GetString ("Files in variable '{0}' contains variables which cannot be parsed without the path " + "to configure.in being set. Ignoring such files."' fileVar.Name);  			LoggingService.LogWarning (msg);  			monitor.ReportWarning (msg);  			autotoolsWarned = true;  		}  		continue;  	}  	varFound = false;  	fname = ResolveBuildVars (fname' ref varFound);  	EncodeValues [fileVar.Name] |= varFound;  	//File path in the makefile are relative to the makefile'  	//but have to be added to the project as relative to project.BaseDirectory  	string absPath = Path.GetFullPath (Path.Combine (BaseDirectory' fname));  	if (existingFiles.ContainsKey (absPath)) {  		existingFiles.Remove (absPath);  		continue;  	}  	if (!File.Exists (absPath)) {  		//Invalid file' maybe we couldn't parse it correctly!  		string msg = GettextCatalog.GetString ("Ignoring invalid file '{0}' found in '{1}' for project '{2}'."' f' relativeMakefileName' OwnerProject.Name);  		LoggingService.LogWarning (msg);  		monitor.ReportWarning (msg);  		fileVar.Extra.Add (f);  		continue;  	}  	ProjectFile pf = ownerProject.AddFile (absPath' buildAction);  	if (buildAction == BuildAction.EmbeddedResource && resourceId != null)  		pf.ResourceId = resourceId;  }  catch (Exception e) {  	LoggingService.LogError (e.ToString ());  	fileVar.Extra.Add (f);  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The following statement contains a magic number: try {  	if (usePrefix && String.Compare (fileVar.Prefix' 0' fname' 0' len) == 0)  		//FIXME: If it doesn't match' then?  		fname = fname.Substring (len);  	fname = FromMakefilePath (fname);  	string resourceId = null;  	if (buildAction == BuildAction.EmbeddedResource && fname.IndexOf (''') >= 0) {  		string[] tmp = fname.Split (new char[] {  			'''  		}' 2);  		fname = tmp [0];  		if (tmp.Length > 1)  			resourceId = tmp [1];  	}  	if ((fname.Length > 2 && fname [0] == '$' && fname [1] == '(') && !UseAutotools) {  		fileVar.Extra.Add (f);  		if (!autotoolsWarned) {  			string msg = GettextCatalog.GetString ("Files in variable '{0}' contains variables which cannot be parsed without the path " + "to configure.in being set. Ignoring such files."' fileVar.Name);  			LoggingService.LogWarning (msg);  			monitor.ReportWarning (msg);  			autotoolsWarned = true;  		}  		continue;  	}  	varFound = false;  	fname = ResolveBuildVars (fname' ref varFound);  	EncodeValues [fileVar.Name] |= varFound;  	//File path in the makefile are relative to the makefile'  	//but have to be added to the project as relative to project.BaseDirectory  	string absPath = Path.GetFullPath (Path.Combine (BaseDirectory' fname));  	if (existingFiles.ContainsKey (absPath)) {  		existingFiles.Remove (absPath);  		continue;  	}  	if (!File.Exists (absPath)) {  		//Invalid file' maybe we couldn't parse it correctly!  		string msg = GettextCatalog.GetString ("Ignoring invalid file '{0}' found in '{1}' for project '{2}'."' f' relativeMakefileName' OwnerProject.Name);  		LoggingService.LogWarning (msg);  		monitor.ReportWarning (msg);  		fileVar.Extra.Add (f);  		continue;  	}  	ProjectFile pf = ownerProject.AddFile (absPath' buildAction);  	if (buildAction == BuildAction.EmbeddedResource && resourceId != null)  		pf.ResourceId = resourceId;  }  catch (Exception e) {  	LoggingService.LogError (e.ToString ());  	fileVar.Extra.Add (f);  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The following statement contains a magic number: if (buildAction == BuildAction.EmbeddedResource && fname.IndexOf (''') >= 0) {  	string[] tmp = fname.Split (new char[] {  		'''  	}' 2);  	fname = tmp [0];  	if (tmp.Length > 1)  		resourceId = tmp [1];  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadFilesActual,The following statement contains a magic number: if ((fname.Length > 2 && fname [0] == '$' && fname [1] == '(') && !UseAutotools) {  	fileVar.Extra.Add (f);  	if (!autotoolsWarned) {  		string msg = GettextCatalog.GetString ("Files in variable '{0}' contains variables which cannot be parsed without the path " + "to configure.in being set. Ignoring such files."' fileVar.Name);  		LoggingService.LogWarning (msg);  		monitor.ReportWarning (msg);  		autotoolsWarned = true;  	}  	continue;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (rname.Length > 3 && rname [0] == '$' && rname [1] == '(' && rname [rname.Length - 1] == ')') {  	if (!UseAutotools) {  		refVar.Extra.Add (reference);  		return;  	}  	// Autotools based project  	if (!rname.EndsWith ("_LIBS)")) {  		//Not a pkgconfig *_LIBS var  		refVar.Extra.Add (reference);  		return;  	}  	string pkgVarName = rname.Substring (2' rname.Length - 3).Replace ("_LIBS"' String.Empty);  	List<PackageContent> pkgNames = ConfiguredPackages.GetPackageContentFromVarName (pkgVarName);  	if (pkgNames == null) {  		LoggingService.LogWarning ("Package named '{0}' not found in configure.in. Ignoring reference to '{1}'."' pkgVarName' rname);  		refVar.Extra.Add (reference);  		SaveReferences = false;  		return;  	}  	bool added = false;  	foreach (PackageContent packageContent in pkgNames) {  		if (ReferencedPackages.Contains (packageContent.Name)) {  			added = true;  			continue;  		}  		// Add all successfully added packages to ReferencedPackages  		foreach (string referencedName in packageContent.AllReferencedNames) {  			if (LoadPackageReference (referencedName' project' refVar.Prefix)) {  				ReferencedPackages.Add (referencedName);  				added = true;  			}  		}  	}  	// none of the packages could be added  	if (!added)  		refVar.Extra.Add (reference);  	return;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (rname.Length > 3 && rname [0] == '$' && rname [1] == '(' && rname [rname.Length - 1] == ')') {  	if (!UseAutotools) {  		refVar.Extra.Add (reference);  		return;  	}  	// Autotools based project  	if (!rname.EndsWith ("_LIBS)")) {  		//Not a pkgconfig *_LIBS var  		refVar.Extra.Add (reference);  		return;  	}  	string pkgVarName = rname.Substring (2' rname.Length - 3).Replace ("_LIBS"' String.Empty);  	List<PackageContent> pkgNames = ConfiguredPackages.GetPackageContentFromVarName (pkgVarName);  	if (pkgNames == null) {  		LoggingService.LogWarning ("Package named '{0}' not found in configure.in. Ignoring reference to '{1}'."' pkgVarName' rname);  		refVar.Extra.Add (reference);  		SaveReferences = false;  		return;  	}  	bool added = false;  	foreach (PackageContent packageContent in pkgNames) {  		if (ReferencedPackages.Contains (packageContent.Name)) {  			added = true;  			continue;  		}  		// Add all successfully added packages to ReferencedPackages  		foreach (string referencedName in packageContent.AllReferencedNames) {  			if (LoadPackageReference (referencedName' project' refVar.Prefix)) {  				ReferencedPackages.Add (referencedName);  				added = true;  			}  		}  	}  	// none of the packages could be added  	if (!added)  		refVar.Extra.Add (reference);  	return;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (rname.Length > 3 && rname [0] == '$' && rname [1] == '(' && rname [rname.Length - 1] == ')') {  	if (!UseAutotools) {  		refVar.Extra.Add (reference);  		return;  	}  	// Autotools based project  	if (!rname.EndsWith ("_LIBS)")) {  		//Not a pkgconfig *_LIBS var  		refVar.Extra.Add (reference);  		return;  	}  	string pkgVarName = rname.Substring (2' rname.Length - 3).Replace ("_LIBS"' String.Empty);  	List<PackageContent> pkgNames = ConfiguredPackages.GetPackageContentFromVarName (pkgVarName);  	if (pkgNames == null) {  		LoggingService.LogWarning ("Package named '{0}' not found in configure.in. Ignoring reference to '{1}'."' pkgVarName' rname);  		refVar.Extra.Add (reference);  		SaveReferences = false;  		return;  	}  	bool added = false;  	foreach (PackageContent packageContent in pkgNames) {  		if (ReferencedPackages.Contains (packageContent.Name)) {  			added = true;  			continue;  		}  		// Add all successfully added packages to ReferencedPackages  		foreach (string referencedName in packageContent.AllReferencedNames) {  			if (LoadPackageReference (referencedName' project' refVar.Prefix)) {  				ReferencedPackages.Add (referencedName);  				added = true;  			}  		}  	}  	// none of the packages could be added  	if (!added)  		refVar.Extra.Add (reference);  	return;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (rname.Length >= 5 && rname [0] == '-' && rname [1] == 'p' && rname [2] == 'k' && rname [3] == 'g' && rname [4] == ':') {  	string pkgName = rname.Substring (5);  	//-pkg:foo'bar  	foreach (string s in pkgName.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries)) {  		if (ReferencedPackages.Contains (s))  			continue;  		if (LoadPackageReference (s' project' refVar.Prefix))  			ReferencedPackages.Add (s);  		else  			refVar.Extra.Add ("-pkg:" + s);  	}  	return;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (rname.Length >= 5 && rname [0] == '-' && rname [1] == 'p' && rname [2] == 'k' && rname [3] == 'g' && rname [4] == ':') {  	string pkgName = rname.Substring (5);  	//-pkg:foo'bar  	foreach (string s in pkgName.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries)) {  		if (ReferencedPackages.Contains (s))  			continue;  		if (LoadPackageReference (s' project' refVar.Prefix))  			ReferencedPackages.Add (s);  		else  			refVar.Extra.Add ("-pkg:" + s);  	}  	return;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (rname.Length >= 5 && rname [0] == '-' && rname [1] == 'p' && rname [2] == 'k' && rname [3] == 'g' && rname [4] == ':') {  	string pkgName = rname.Substring (5);  	//-pkg:foo'bar  	foreach (string s in pkgName.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries)) {  		if (ReferencedPackages.Contains (s))  			continue;  		if (LoadPackageReference (s' project' refVar.Prefix))  			ReferencedPackages.Add (s);  		else  			refVar.Extra.Add ("-pkg:" + s);  	}  	return;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (rname.Length >= 5 && rname [0] == '-' && rname [1] == 'p' && rname [2] == 'k' && rname [3] == 'g' && rname [4] == ':') {  	string pkgName = rname.Substring (5);  	//-pkg:foo'bar  	foreach (string s in pkgName.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries)) {  		if (ReferencedPackages.Contains (s))  			continue;  		if (LoadPackageReference (s' project' refVar.Prefix))  			ReferencedPackages.Add (s);  		else  			refVar.Extra.Add ("-pkg:" + s);  	}  	return;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (rname.Length >= 5 && rname [0] == '-' && rname [1] == 'p' && rname [2] == 'k' && rname [3] == 'g' && rname [4] == ':') {  	string pkgName = rname.Substring (5);  	//-pkg:foo'bar  	foreach (string s in pkgName.Split (new char[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries)) {  		if (ReferencedPackages.Contains (s))  			continue;  		if (LoadPackageReference (s' project' refVar.Prefix))  			ReferencedPackages.Add (s);  		else  			refVar.Extra.Add ("-pkg:" + s);  	}  	return;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: foreach (string r in rname.Split (new char[] {  	'''  }' StringSplitOptions.RemoveEmptyEntries)) {  	string refname = r;  	if (refname.Length >= 2 && refname [0] == '$' && refname [1] == '(' && !UseAutotools) {  		//Eg. -r:$(top_builddir)/foo.dll  		refVar.Extra.Add (reference);  		continue;  	}  	varFound = false;  	refname = ResolveBuildVars (refname' ref varFound);  	EncodeValues [refVar.Name] |= varFound;  	string fullpath = Path.GetFullPath (Path.Combine (BaseDirectory' refname));  	// if refname is part of a package then add as package  	// but don't do it if the refname exactly matches a file name in the project dir  	if (refname.IndexOf (Path.DirectorySeparatorChar) < 0 && !File.Exists (fullpath) && ParseReferenceAsPackage (refname' project) != null)  		continue;  	if (TryGetExistingPackageRef (fullpath) != null)  		continue;  	if (refname.IndexOf (Path.DirectorySeparatorChar) < 0) {  		// Check that its a valid assembly  		string fullname = null;  		try {  			fullname = AssemblyName.GetAssemblyName (fullpath).FullName;  		}  		catch (FileNotFoundException) {  		}  		catch (BadImageFormatException) {  		}  		// Valid assembly' From a package' add as Package  		SystemPackage pkg = assemblyContext.GetPackageFromPath (fullpath);  		if (fullname != null && pkg != null) {  			SystemAssembly sa = assemblyContext.GetAssemblyFromFullName (fullname' pkg.Name' project.TargetFramework);  			if (sa != null) {  				AddNewPackageReference (project' sa);  				continue;  			}  		}  	}  	//Else add to unresolved project refs' avoid repeats  	if (!UnresolvedReferences.ContainsKey (fullpath))  		UnresolvedReferences [fullpath] = fullpath;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReference,The following statement contains a magic number: if (refname.Length >= 2 && refname [0] == '$' && refname [1] == '(' && !UseAutotools) {  	//Eg. -r:$(top_builddir)/foo.dll  	refVar.Extra.Add (reference);  	continue;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReferenceAsPackage,The following statement contains a magic number: if (rname.EndsWith (".dll"' StringComparison.InvariantCultureIgnoreCase))  	//-r:Mono.Posix.dll  	aname = rname.Substring (0' rname.Length - 4);  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ParseReferenceAsPackage,The following statement contains a magic number: aname = rname.Substring (0' rname.Length - 4);  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	c = filename [i];  	if (c != '$' || (i + 3 >= len)) {  		sb.Append (c);  		continue;  	}  	if (filename [i + 1] == '(') {  		int j = i + 2;  		while (j < len && filename [j] != ')')  			j++;  		if (j >= len) {  			sb.Append (filename.Substring (i));  			break;  		}  		string varname = filename.Substring (i + 2' j - (i + 2));  		if (BuildVariables.ContainsKey (varname)) {  			sb.Append (BuildVariables [varname]);  			varFound = true;  		}  		else  			sb.Append ("$(" + varname + ")");  		i = j;  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	c = filename [i];  	if (c != '$' || (i + 3 >= len)) {  		sb.Append (c);  		continue;  	}  	if (filename [i + 1] == '(') {  		int j = i + 2;  		while (j < len && filename [j] != ')')  			j++;  		if (j >= len) {  			sb.Append (filename.Substring (i));  			break;  		}  		string varname = filename.Substring (i + 2' j - (i + 2));  		if (BuildVariables.ContainsKey (varname)) {  			sb.Append (BuildVariables [varname]);  			varFound = true;  		}  		else  			sb.Append ("$(" + varname + ")");  		i = j;  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	c = filename [i];  	if (c != '$' || (i + 3 >= len)) {  		sb.Append (c);  		continue;  	}  	if (filename [i + 1] == '(') {  		int j = i + 2;  		while (j < len && filename [j] != ')')  			j++;  		if (j >= len) {  			sb.Append (filename.Substring (i));  			break;  		}  		string varname = filename.Substring (i + 2' j - (i + 2));  		if (BuildVariables.ContainsKey (varname)) {  			sb.Append (BuildVariables [varname]);  			varFound = true;  		}  		else  			sb.Append ("$(" + varname + ")");  		i = j;  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	c = filename [i];  	if (c != '$' || (i + 3 >= len)) {  		sb.Append (c);  		continue;  	}  	if (filename [i + 1] == '(') {  		int j = i + 2;  		while (j < len && filename [j] != ')')  			j++;  		if (j >= len) {  			sb.Append (filename.Substring (i));  			break;  		}  		string varname = filename.Substring (i + 2' j - (i + 2));  		if (BuildVariables.ContainsKey (varname)) {  			sb.Append (BuildVariables [varname]);  			varFound = true;  		}  		else  			sb.Append ("$(" + varname + ")");  		i = j;  	}  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,The following statement contains a magic number: if (c != '$' || (i + 3 >= len)) {  	sb.Append (c);  	continue;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,The following statement contains a magic number: if (filename [i + 1] == '(') {  	int j = i + 2;  	while (j < len && filename [j] != ')')  		j++;  	if (j >= len) {  		sb.Append (filename.Substring (i));  		break;  	}  	string varname = filename.Substring (i + 2' j - (i + 2));  	if (BuildVariables.ContainsKey (varname)) {  		sb.Append (BuildVariables [varname]);  		varFound = true;  	}  	else  		sb.Append ("$(" + varname + ")");  	i = j;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,The following statement contains a magic number: if (filename [i + 1] == '(') {  	int j = i + 2;  	while (j < len && filename [j] != ')')  		j++;  	if (j >= len) {  		sb.Append (filename.Substring (i));  		break;  	}  	string varname = filename.Substring (i + 2' j - (i + 2));  	if (BuildVariables.ContainsKey (varname)) {  		sb.Append (BuildVariables [varname]);  		varFound = true;  	}  	else  		sb.Append ("$(" + varname + ")");  	i = j;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ResolveBuildVars,The following statement contains a magic number: if (filename [i + 1] == '(') {  	int j = i + 2;  	while (j < len && filename [j] != ')')  		j++;  	if (j >= len) {  		sb.Append (filename.Substring (i));  		break;  	}  	string varname = filename.Substring (i + 2' j - (i + 2));  	if (BuildVariables.ContainsKey (varname)) {  		sb.Append (BuildVariables [varname]);  		varFound = true;  	}  	else  		sb.Append ("$(" + varname + ")");  	i = j;  }  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,NormalizeFileName,The following statement contains a magic number: do {  	if (fileName [0] == '.' && fileName [1] == '/')  		fileName = fileName.Substring (2);  	else if (fileName [0] == '/')  		fileName = fileName.Substring (1);  	else  		return fileName;  }  while (true);  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,NormalizeFileName,The following statement contains a magic number: if (fileName [0] == '.' && fileName [1] == '/')  	fileName = fileName.Substring (2);  else if (fileName [0] == '/')  	fileName = fileName.Substring (1);  else  	return fileName;  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,NormalizeFileName,The following statement contains a magic number: fileName = fileName.Substring (2);  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,PackageRefToString,The following statement contains a magic number: if (pkg.IsCorePackage)  	//pkg:mono' Eg. System' System.Data etc  	return fullname.Split (new char[] {  		'''  	}' 2) [0];  
Magic Number,MonoDevelop.Autotools,MakefileData,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,PackageRefToString,The following statement contains a magic number: return fullname.Split (new char[] {  	'''  }' 2) [0];  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: foreach (Match match in PkgCheckModulesRegex.Matches (content)) {  	if (!match.Success)  		continue;  	List<PackageContent> pkgs = new List<PackageContent> ();  	string pkgId = match.Groups ["pkgId"].Value;  	if (pkgId.Length > 2 && pkgId [0] == '[' && pkgId [pkgId.Length - 1] == ']')  		// Remove [] used for quoting  		pkgId = pkgId.Substring (1' pkgId.Length - 2);  	foreach (Capture c in match.Groups ["content"].Captures) {  		string s = c.Value.Trim ();  		if (s.Length == 0)  			continue;  		if (s.Length > 2 && s [0] == '[' && s [s.Length - 1] == ']')  			// Remove [] used for quoting  			s = s.Substring (1' s.Length - 2);  		PackageContent packageContent = new PackageContent (s);  		pkgs.Add (packageContent);  		pkgNameToPkgVarName [s] = pkgId;  		AddRequiredPackages (assemblyContext' pkgId' s' packageContent);  	}  	pkgVarNameToPkgName [pkgId] = pkgs;  }  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: foreach (Match match in PkgCheckModulesRegex.Matches (content)) {  	if (!match.Success)  		continue;  	List<PackageContent> pkgs = new List<PackageContent> ();  	string pkgId = match.Groups ["pkgId"].Value;  	if (pkgId.Length > 2 && pkgId [0] == '[' && pkgId [pkgId.Length - 1] == ']')  		// Remove [] used for quoting  		pkgId = pkgId.Substring (1' pkgId.Length - 2);  	foreach (Capture c in match.Groups ["content"].Captures) {  		string s = c.Value.Trim ();  		if (s.Length == 0)  			continue;  		if (s.Length > 2 && s [0] == '[' && s [s.Length - 1] == ']')  			// Remove [] used for quoting  			s = s.Substring (1' s.Length - 2);  		PackageContent packageContent = new PackageContent (s);  		pkgs.Add (packageContent);  		pkgNameToPkgVarName [s] = pkgId;  		AddRequiredPackages (assemblyContext' pkgId' s' packageContent);  	}  	pkgVarNameToPkgName [pkgId] = pkgs;  }  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: foreach (Match match in PkgCheckModulesRegex.Matches (content)) {  	if (!match.Success)  		continue;  	List<PackageContent> pkgs = new List<PackageContent> ();  	string pkgId = match.Groups ["pkgId"].Value;  	if (pkgId.Length > 2 && pkgId [0] == '[' && pkgId [pkgId.Length - 1] == ']')  		// Remove [] used for quoting  		pkgId = pkgId.Substring (1' pkgId.Length - 2);  	foreach (Capture c in match.Groups ["content"].Captures) {  		string s = c.Value.Trim ();  		if (s.Length == 0)  			continue;  		if (s.Length > 2 && s [0] == '[' && s [s.Length - 1] == ']')  			// Remove [] used for quoting  			s = s.Substring (1' s.Length - 2);  		PackageContent packageContent = new PackageContent (s);  		pkgs.Add (packageContent);  		pkgNameToPkgVarName [s] = pkgId;  		AddRequiredPackages (assemblyContext' pkgId' s' packageContent);  	}  	pkgVarNameToPkgName [pkgId] = pkgs;  }  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: foreach (Match match in PkgCheckModulesRegex.Matches (content)) {  	if (!match.Success)  		continue;  	List<PackageContent> pkgs = new List<PackageContent> ();  	string pkgId = match.Groups ["pkgId"].Value;  	if (pkgId.Length > 2 && pkgId [0] == '[' && pkgId [pkgId.Length - 1] == ']')  		// Remove [] used for quoting  		pkgId = pkgId.Substring (1' pkgId.Length - 2);  	foreach (Capture c in match.Groups ["content"].Captures) {  		string s = c.Value.Trim ();  		if (s.Length == 0)  			continue;  		if (s.Length > 2 && s [0] == '[' && s [s.Length - 1] == ']')  			// Remove [] used for quoting  			s = s.Substring (1' s.Length - 2);  		PackageContent packageContent = new PackageContent (s);  		pkgs.Add (packageContent);  		pkgNameToPkgVarName [s] = pkgId;  		AddRequiredPackages (assemblyContext' pkgId' s' packageContent);  	}  	pkgVarNameToPkgName [pkgId] = pkgs;  }  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: if (pkgId.Length > 2 && pkgId [0] == '[' && pkgId [pkgId.Length - 1] == ']')  	// Remove [] used for quoting  	pkgId = pkgId.Substring (1' pkgId.Length - 2);  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: if (pkgId.Length > 2 && pkgId [0] == '[' && pkgId [pkgId.Length - 1] == ']')  	// Remove [] used for quoting  	pkgId = pkgId.Substring (1' pkgId.Length - 2);  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: pkgId = pkgId.Substring (1' pkgId.Length - 2);  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: foreach (Capture c in match.Groups ["content"].Captures) {  	string s = c.Value.Trim ();  	if (s.Length == 0)  		continue;  	if (s.Length > 2 && s [0] == '[' && s [s.Length - 1] == ']')  		// Remove [] used for quoting  		s = s.Substring (1' s.Length - 2);  	PackageContent packageContent = new PackageContent (s);  	pkgs.Add (packageContent);  	pkgNameToPkgVarName [s] = pkgId;  	AddRequiredPackages (assemblyContext' pkgId' s' packageContent);  }  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: foreach (Capture c in match.Groups ["content"].Captures) {  	string s = c.Value.Trim ();  	if (s.Length == 0)  		continue;  	if (s.Length > 2 && s [0] == '[' && s [s.Length - 1] == ']')  		// Remove [] used for quoting  		s = s.Substring (1' s.Length - 2);  	PackageContent packageContent = new PackageContent (s);  	pkgs.Add (packageContent);  	pkgNameToPkgVarName [s] = pkgId;  	AddRequiredPackages (assemblyContext' pkgId' s' packageContent);  }  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: if (s.Length > 2 && s [0] == '[' && s [s.Length - 1] == ']')  	// Remove [] used for quoting  	s = s.Substring (1' s.Length - 2);  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: if (s.Length > 2 && s [0] == '[' && s [s.Length - 1] == ']')  	// Remove [] used for quoting  	s = s.Substring (1' s.Length - 2);  
Magic Number,MonoDevelop.Autotools,ConfiguredPackagesManager,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileData.cs,ReadPackagesList,The following statement contains a magic number: s = s.Substring (1' s.Length - 2);  
Magic Number,MonoDevelop.Autotools,ImportMakefileDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\ImportMakefileDialog.cs,ImportMakefileDialog,The following statement contains a magic number: box.Spacing = 6;  
Magic Number,MonoDevelop.Autotools,ImportMakefileDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\ImportMakefileDialog.cs,ImportMakefileDialog,The following statement contains a magic number: lab.WidthRequest = 500;  
Magic Number,MonoDevelop.Autotools,ImportMakefileDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\ImportMakefileDialog.cs,ImportMakefileDialog,The following statement contains a magic number: hb.Spacing = 6;  
Magic Number,MonoDevelop.Autotools,ImportMakefileDialog,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\ImportMakefileDialog.cs,ImportMakefileDialog,The following statement contains a magic number: box.BorderWidth = 6;  
Magic Number,MonoDevelop.Autotools,MakefileSwitchEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileSwitchEditorWidget.cs,InitTreeview,The following statement contains a magic number: txt3.Edited += delegate (object o' EditedArgs args) {  	HandleEdited (o' args' 2);  };  
Magic Number,MonoDevelop.Autotools,MakefileSwitchEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileSwitchEditorWidget.cs,InitTreeview,The following statement contains a magic number: HandleEdited (o' args' 2);  
Magic Number,MonoDevelop.Autotools,MakefileSwitchEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileSwitchEditorWidget.cs,InitTreeview,The following statement contains a magic number: itemTv.AppendColumn ("Help string"' txt3' "text"' 2);  
Magic Number,MonoDevelop.Autotools,MakefileSwitchEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileSwitchEditorWidget.cs,HandleEdited,The following statement contains a magic number: s = new Switch (store.GetValue (iter' 0) as string' store.GetValue (iter' 1) as string' store.GetValue (iter' 2) as string);  
Magic Number,MonoDevelop.Autotools,MakefileSwitchEditorWidget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\MakefileSwitchEditorWidget.cs,HandleEdited,The following statement contains a magic number: store.SetValue (iter' 3' s);  
Missing Default,MonoDevelop.Autotools,TarballDeployTarget,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\Handler.cs,OnResolveDirectory,The following switch statement is missing a default case: switch (folderId) {  case TargetDirectory.ProgramFilesRoot:  	return "@expanded_libdir@";  case TargetDirectory.ProgramFiles:  	return "@expanded_libdir@/" + package_var;  case TargetDirectory.Binaries:  	return "@expanded_bindir@";  case TargetDirectory.CommonApplicationDataRoot:  	return "@expanded_datadir@";  case TargetDirectory.CommonApplicationData:  	return "@expanded_datadir@/" + package_var;  case TargetDirectory.IncludeRoot:  	return prefix_var + "/include";  case TargetDirectory.Include:  	return prefix_var + "/include/" + package_var;  }  
Missing Default,MonoDevelop.Autotools,SimpleProjectMakefileHandler,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Autotools\SimpleProjectMakefileHandler.cs,Deploy,The following switch statement is missing a default case: switch (projectFile.BuildAction) {  case BuildAction.Compile:  	if (projectFile.Subtype != Subtype.Code)  		continue;  	files.AppendFormat ("\\\n\t{0} "' MakefileData.ToMakefilePath (pfpath));  	break;  case BuildAction.Content:  case BuildAction.None:  	extraFiles.Add (MakefileData.ToMakefilePath (pfpath));  	break;  case BuildAction.EmbeddedResource:  	if (!projectFile.FilePath.IsChildPathOf (ctx.BaseDirectory)) {  		// file is not within directory hierarchy' copy it in  		string rdir = Path.Combine (Path.GetDirectoryName (project.FileName)' resourcedir);  		if (!Directory.Exists (rdir))  			Directory.CreateDirectory (rdir);  		string newPath = Path.Combine (rdir' Path.GetFileName (projectFile.FilePath));  		FileService.CopyFile (projectFile.FilePath' newPath);  		pfpath = project.GetRelativeChildPath (newPath);  		pfpath = FileService.NormalizeRelativePath (pfpath);  	}  	if (!String.IsNullOrEmpty (projectFile.ResourceId) && projectFile.ResourceId != Path.GetFileName (pfpath))  		res_files.AppendFormat ("\\\n\t{0}'{1} "' MakefileData.ToMakefilePath (pfpath)' MakefileData.EscapeString (projectFile.ResourceId));  	else  		res_files.AppendFormat ("\\\n\t{0} "' MakefileData.ToMakefilePath (pfpath));  	break;  case "FileCopy":  	datafiles.AppendFormat ("\\\n\t{0} "' MakefileData.ToMakefilePath (pfpath));  	break;  }  
