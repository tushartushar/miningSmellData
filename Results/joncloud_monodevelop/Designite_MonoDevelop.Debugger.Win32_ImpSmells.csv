Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,CallToString,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OverloadResolve,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,TryCast,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,GetMembers,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,UnscapeString,Cyclomatic complexity of the method is 27
Complex Method,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OnGetParameters,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,GetLocals,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OnGetTypeDisplayData,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,OnBreakpoint,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,OnException2,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,Step,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Debugger.Win32,CorBacktrace,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerBacktrace.cs,CreateFrame,Cyclomatic complexity of the method is 25
Long Parameter List,MonoDevelop.Debugger.Win32,PropertyReference,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\PropertyReference.cs,PropertyReference,The method has 5 parameters.
Long Parameter List,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,HasMethod,The method has 6 parameters.
Long Parameter List,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,RuntimeInvoke,The method has 7 parameters.
Long Parameter List,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OverloadResolve,The method has 6 parameters.
Long Parameter List,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,IsApplicable,The method has 5 parameters.
Long Parameter List,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OverloadResolve,The method has 6 parameters.
Long Parameter List,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,RuntimeInvoke,The method has 9 parameters.
Long Parameter List,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,NewString,The method has 6 parameters.
Long Parameter List,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,NewArray,The method has 7 parameters.
Long Statement,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,CallToString,The length of the statement  "		MethodInfo met = OverloadResolve (cctx' "ToString"' targetType' new CorType[0]' BindingFlags.Public | BindingFlags.Instance' false); " is 132.
Long Statement,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OverloadResolve,The length of the statement  "			if (met.Name == methodName || (!ctx.CaseSensitive && met.Name.Equals (methodName' StringComparison.CurrentCultureIgnoreCase))) { " is 128.
Long Statement,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,IsApplicable,The length of the statement  "		error = String.Format ("Argument {0}: Cannot implicitly convert `{1}' to `{2}'"' i' GetTypeName (ctx' types [i])' param_type.FullName); " is 135.
Long Statement,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,IsEnum,The length of the statement  "	return (targetType.Type == CorElementType.ELEMENT_TYPE_VALUETYPE || targetType.Type == CorElementType.ELEMENT_TYPE_CLASS) && targetType.Base != null && GetTypeName (ctx' targetType.Base) == "System.Enum"; " is 204.
Long Statement,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,GetIndexerReference,The length of the statement  "		foreach (PropertyInfo prop in type.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)) { " is 122.
Long Statement,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OnGetTypeDisplayData,The length of the statement  "		mems.AddRange (t.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance)); " is 121.
Long Statement,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OnGetTypeDisplayData,The length of the statement  "		mems.AddRange (t.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance)); " is 125.
Long Statement,MonoDevelop.Debugger.Win32,CorDebuggerEngine,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerEngine.cs,CreateDebuggerStartInfo,The length of the statement  "			throw new UserException (string.Format ("The \"{0}\" web server cannot be started. Please ensure that it is installed."' xspName)' null); " is 137.
Empty Catch Block,MonoDevelop.Debugger.Win32,CorMethodCall,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorMethodCall.cs,Shutdown,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,TryCast,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,GetIndexerReference,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,GetMembers,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,OnGetParameters,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,OnModuleLoad,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,GetThreadName,The method has an empty catch block.
Magic Number,MonoDevelop.Debugger.Win32,MtaThread,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\MtaThread.cs,MtaRunner,The following statement contains a magic number: lock (threadLock) {  	do {  		try {  			workDelegate ();  		}  		catch (Exception ex) {  			workError = ex;  		}  		wordDoneEvent.Set ();  	}  	while (Monitor.Wait (threadLock' 60000));  	workThread = null;  }  
Magic Number,MonoDevelop.Debugger.Win32,MtaThread,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\MtaThread.cs,MtaRunner,The following statement contains a magic number: do {  	try {  		workDelegate ();  	}  	catch (Exception ex) {  		workError = ex;  	}  	wordDoneEvent.Set ();  }  while (Monitor.Wait (threadLock' 60000));  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,TerminateDebugger,The following statement contains a magic number: lock (terminateLock) {  	if (terminated)  		return;  	terminated = true;  	ThreadPool.QueueUserWorkItem (delegate {  		if (process != null) {  			// Process already running. Stop it. In the ProcessExited event the  			// debugger engine will be terminated  			process.Stop (4000);  			process.Terminate (1);  		}  	});  }  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,TerminateDebugger,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (delegate {  	if (process != null) {  		// Process already running. Stop it. In the ProcessExited event the  		// debugger engine will be terminated  		process.Stop (4000);  		process.Terminate (1);  	}  });  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,TerminateDebugger,The following statement contains a magic number: if (process != null) {  	// Process already running. Stop it. In the ProcessExited event the  	// debugger engine will be terminated  	process.Stop (4000);  	process.Terminate (1);  }  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,TerminateDebugger,The following statement contains a magic number: process.Stop (4000);  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,EvaluateTrace,The following statement contains a magic number: while (i != -1) {  	if (i < exp.Length - 1 && exp [i + 1] == '{') {  		sb.Append (exp.Substring (last' i - last + 1));  		last = i + 2;  		i = exp.IndexOf ('{'' i + 2);  		continue;  	}  	int j = exp.IndexOf ('}'' i + 1);  	if (j == -1)  		break;  	string se = exp.Substring (i + 1' j - i - 1);  	se = EvaluateExpression (thread' se);  	sb.Append (exp.Substring (last' i - last));  	sb.Append (se);  	last = j + 1;  	i = exp.IndexOf ('{'' last);  }  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,EvaluateTrace,The following statement contains a magic number: while (i != -1) {  	if (i < exp.Length - 1 && exp [i + 1] == '{') {  		sb.Append (exp.Substring (last' i - last + 1));  		last = i + 2;  		i = exp.IndexOf ('{'' i + 2);  		continue;  	}  	int j = exp.IndexOf ('}'' i + 1);  	if (j == -1)  		break;  	string se = exp.Substring (i + 1' j - i - 1);  	se = EvaluateExpression (thread' se);  	sb.Append (exp.Substring (last' i - last));  	sb.Append (se);  	last = j + 1;  	i = exp.IndexOf ('{'' last);  }  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,EvaluateTrace,The following statement contains a magic number: if (i < exp.Length - 1 && exp [i + 1] == '{') {  	sb.Append (exp.Substring (last' i - last + 1));  	last = i + 2;  	i = exp.IndexOf ('{'' i + 2);  	continue;  }  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,EvaluateTrace,The following statement contains a magic number: if (i < exp.Length - 1 && exp [i + 1] == '{') {  	sb.Append (exp.Substring (last' i - last + 1));  	last = i + 2;  	i = exp.IndexOf ('{'' i + 2);  	continue;  }  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,EvaluateTrace,The following statement contains a magic number: last = i + 2;  
Magic Number,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,EvaluateTrace,The following statement contains a magic number: i = exp.IndexOf ('{'' i + 2);  
Missing Default,MonoDevelop.Debugger.Win32,CorObjectAdaptor,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorObjectAdaptor.cs,IsAssignableFrom,The following switch statement is missing a default case: switch (ctype.Type) {  case CorElementType.ELEMENT_TYPE_ARRAY:  case CorElementType.ELEMENT_TYPE_SZARRAY:  case CorElementType.ELEMENT_TYPE_BYREF:  case CorElementType.ELEMENT_TYPE_PTR:  	return false;  }  
Missing Default,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,OnBreakpoint,The following switch statement is missing a default case: switch (bp.HitAction) {  case HitAction.CustomAction:  	// If custom action returns true' execution must continue  	if (binfo.RunCustomBreakpointAction (bp.CustomActionId))  		return;  	break;  case HitAction.PrintExpression: {  	string exp = EvaluateTrace (e.Thread' bp.TraceExpression);  	binfo.UpdateLastTraceValue (exp);  	return;  }  }  
Missing Default,MonoDevelop.Debugger.Win32,CorDebuggerSession,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerSession.cs,OnException2,The following switch statement is missing a default case: switch (e.EventType) {  case CorDebugExceptionCallbackType.DEBUG_EXCEPTION_FIRST_CHANCE:  	if (!this.Options.ProjectAssembliesOnly && IsCatchpoint (e))  		args = new TargetEventArgs (TargetEventType.ExceptionThrown);  	break;  case CorDebugExceptionCallbackType.DEBUG_EXCEPTION_USER_FIRST_CHANCE:  	if (IsCatchpoint (e))  		args = new TargetEventArgs (TargetEventType.ExceptionThrown);  	break;  case CorDebugExceptionCallbackType.DEBUG_EXCEPTION_CATCH_HANDLER_FOUND:  	break;  case CorDebugExceptionCallbackType.DEBUG_EXCEPTION_UNHANDLED:  	args = new TargetEventArgs (TargetEventType.UnhandledException);  	break;  }  
Missing Default,MonoDevelop.Debugger.Win32,CorBacktrace,C:\repos\joncloud_monodevelop\main\src\addins\MonoDevelop.Debugger.Win32\MonoDevelop.Debugger.Win32\CorDebuggerBacktrace.cs,CreateFrame,The following switch statement is missing a default case: switch (frame.InternalFrameType) {  case CorDebugInternalFrameType.STUBFRAME_M2U:  	method = "[Managed to Native Transition]";  	break;  case CorDebugInternalFrameType.STUBFRAME_U2M:  	method = "[Native to Managed Transition]";  	break;  case CorDebugInternalFrameType.STUBFRAME_LIGHTWEIGHT_FUNCTION:  	method = "[Lightweight Method Call]";  	break;  case CorDebugInternalFrameType.STUBFRAME_APPDOMAIN_TRANSITION:  	method = "[Application Domain Transition]";  	break;  case CorDebugInternalFrameType.STUBFRAME_FUNC_EVAL:  	method = "[Function Evaluation]";  	break;  }  
