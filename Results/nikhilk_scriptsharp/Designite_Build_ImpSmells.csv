Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ScriptSharp.Tasks,ScriptCompilerTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerTask.cs,Compile,Cyclomatic complexity of the method is 8
Long Parameter List,ScriptSharp.Tasks,ScriptCompilerTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerTask.cs,CreateOptions,The method has 6 parameters. Parameters: sourceItems' resourceItems' locale' includeTests' minimize' outputScriptItem
Long Statement,ScriptSharp.Tasks,ScriptCompilerTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerTask.cs,OnScriptFileGenerated,The length of the statement  "                    Log.LogError("Unable to copy referenced script '" + sourceFilePath + "' as '" + targetFilePath + "' (" + e.Message + ")"); " is 122.
Empty Catch Block,ScriptSharp.Tasks,ScriptCompilerExecTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerExecTask.cs,Execute,The method has an empty catch block.
Magic Number,ScriptSharp.Tasks,ScriptCompilerExecTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerExecTask.cs,ReportError,The following statement contains a magic number: if (String.IsNullOrEmpty(location) == false) {                  if (location.EndsWith(")"' StringComparison.Ordinal)) {                      int index = location.LastIndexOf("("' StringComparison.Ordinal);                      Debug.Assert(index > 0);                        string position = location.Substring(index + 1' location.Length - index - 2);                      string[] positionParts = position.Split(new char[] { ' '' ''' }' StringSplitOptions.RemoveEmptyEntries);                      Debug.Assert(positionParts.Length == 2);                        Int32.TryParse(positionParts[0]' out line);                      Int32.TryParse(positionParts[1]' out column);                        location = location.Substring(0' index);                  }              }
Magic Number,ScriptSharp.Tasks,ScriptCompilerExecTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerExecTask.cs,ReportError,The following statement contains a magic number: if (String.IsNullOrEmpty(location) == false) {                  if (location.EndsWith(")"' StringComparison.Ordinal)) {                      int index = location.LastIndexOf("("' StringComparison.Ordinal);                      Debug.Assert(index > 0);                        string position = location.Substring(index + 1' location.Length - index - 2);                      string[] positionParts = position.Split(new char[] { ' '' ''' }' StringSplitOptions.RemoveEmptyEntries);                      Debug.Assert(positionParts.Length == 2);                        Int32.TryParse(positionParts[0]' out line);                      Int32.TryParse(positionParts[1]' out column);                        location = location.Substring(0' index);                  }              }
Magic Number,ScriptSharp.Tasks,ScriptCompilerTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerTask.cs,OnScriptFileGenerated,The following statement contains a magic number: Func<string' bool' string> getScriptFile = delegate(string reference' bool minimized) {                  string scriptFile = Path.ChangeExtension(reference' minimized ? ".min.js" : ".js");                    string fileName = Path.GetFileNameWithoutExtension(scriptFile);                  if (fileName.StartsWith("mscorlib"' StringComparison.OrdinalIgnoreCase)) {                      fileName = (minimized ? "ss.min" : "ss") + Path.GetExtension(scriptFile);                      scriptFile = Path.Combine(Path.GetDirectoryName(scriptFile)' fileName);                  }                    if (File.Exists(scriptFile)) {                      return scriptFile;                  }                    fileName = Path.GetFileName(scriptFile);                  if ((fileName.Length > 7) && fileName.StartsWith("Script."' StringComparison.OrdinalIgnoreCase)) {                      fileName = fileName.Substring(7);                      scriptFile = Path.Combine(Path.GetDirectoryName(scriptFile)' fileName);                        if (File.Exists(scriptFile)) {                          return scriptFile;                      }                  }                    return null;              };
Magic Number,ScriptSharp.Tasks,ScriptCompilerTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerTask.cs,OnScriptFileGenerated,The following statement contains a magic number: Func<string' bool' string> getScriptFile = delegate(string reference' bool minimized) {                  string scriptFile = Path.ChangeExtension(reference' minimized ? ".min.js" : ".js");                    string fileName = Path.GetFileNameWithoutExtension(scriptFile);                  if (fileName.StartsWith("mscorlib"' StringComparison.OrdinalIgnoreCase)) {                      fileName = (minimized ? "ss.min" : "ss") + Path.GetExtension(scriptFile);                      scriptFile = Path.Combine(Path.GetDirectoryName(scriptFile)' fileName);                  }                    if (File.Exists(scriptFile)) {                      return scriptFile;                  }                    fileName = Path.GetFileName(scriptFile);                  if ((fileName.Length > 7) && fileName.StartsWith("Script."' StringComparison.OrdinalIgnoreCase)) {                      fileName = fileName.Substring(7);                      scriptFile = Path.Combine(Path.GetDirectoryName(scriptFile)' fileName);                        if (File.Exists(scriptFile)) {                          return scriptFile;                      }                  }                    return null;              };
Magic Number,ScriptSharp.Tasks,ScriptCompilerTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerTask.cs,ReportError,The following statement contains a magic number: if (String.IsNullOrEmpty(location) == false) {                  if (location.EndsWith(")"' StringComparison.Ordinal)) {                      int index = location.LastIndexOf("("' StringComparison.Ordinal);                      Debug.Assert(index > 0);                        string position = location.Substring(index + 1' location.Length - index - 2);                      string[] positionParts = position.Split(new char[] { ' '' ''' }' StringSplitOptions.RemoveEmptyEntries);                      Debug.Assert(positionParts.Length == 2);                        Int32.TryParse(positionParts[0]' out line);                      Int32.TryParse(positionParts[1]' out column);                        location = location.Substring(0' index);                  }              }
Magic Number,ScriptSharp.Tasks,ScriptCompilerTask,C:\repos\nikhilk_scriptsharp\src\Core\Build\Tasks\ScriptCompilerTask.cs,ReportError,The following statement contains a magic number: if (String.IsNullOrEmpty(location) == false) {                  if (location.EndsWith(")"' StringComparison.Ordinal)) {                      int index = location.LastIndexOf("("' StringComparison.Ordinal);                      Debug.Assert(index > 0);                        string position = location.Substring(index + 1' location.Length - index - 2);                      string[] positionParts = position.Split(new char[] { ' '' ''' }' StringSplitOptions.RemoveEmptyEntries);                      Debug.Assert(positionParts.Length == 2);                        Int32.TryParse(positionParts[0]' out line);                      Int32.TryParse(positionParts[1]' out column);                        location = location.Substring(0' index);                  }              }
