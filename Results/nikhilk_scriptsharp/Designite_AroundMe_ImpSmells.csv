Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNodes,Cyclomatic complexity of the method is 8
Long Parameter List,AroundMe,PageModel,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\PageModel.cs,SearchRegion,The method has 5 parameters. Parameters: text' latitude1' longitude1' latitude2' longitude2
Long Parameter List,AroundMe.DataModel,Photo,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\DataModel\Photo.cs,Photo,The method has 10 parameters. Parameters: id' title' tags' url' imageUrl' width' height' thumbnailUrl' latitude' longitude
Long Parameter List,AroundMe.Services,FlickrService,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Services\FlickrService.cs,SearchRegion,The method has 6 parameters. Parameters: text' latitude1' longitude1' latitude2' longitude2' searchCallback
Long Parameter List,AroundMe.Services,IFlickrService,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Services\IFlickrService.cs,SearchRegion,The method has 6 parameters. Parameters: text' latitude1' longitude1' latitude2' longitude2' searchCallback
Long Parameter List,AroundMe.Tests,MockFlickrService,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Tests\MockFlickrService.cs,SearchRegion,The method has 6 parameters. Parameters: text' latitude1' longitude1' latitude2' longitude2' searchCallback
Long Statement,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowPhoto,The length of the statement  "                photoContainer.Style.MarginTop = Math.Max(20' Math.Truncate((Document.Body.OffsetHeight - photoContainer.OffsetHeight) / 2f) - 100) + "px"; " is 139.
Complex Conditional,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNodes,The conditional expression  "(_maxMotion < 0.2 || (_maxMotion > 1 && _damper < 0.9)) &&                          (_damper > 0.01)"  is complex.
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,Page,The following statement contains a magic number: mapOptions.Zoom = 2;
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,Page,The following statement contains a magic number: mapOptions.BackgroundColor = new MapColor(255' 255' 255' 255);
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,Page,The following statement contains a magic number: mapOptions.BackgroundColor = new MapColor(255' 255' 255' 255);
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,Page,The following statement contains a magic number: mapOptions.BackgroundColor = new MapColor(255' 255' 255' 255);
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,Page,The following statement contains a magic number: mapOptions.BackgroundColor = new MapColor(255' 255' 255' 255);
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,Page,The following statement contains a magic number: MapEvents.AddThrottledHandler(_map' "viewchangeend"' delegate(MapEventArgs e) {                  _viewChanging = false;                    if (_zoomLevel != _map.GetZoom()) {                      UpdatePhotos(/* newPhotos */ false);                  }              }' 250);
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,CreateTileUrl,The following statement contains a magic number: int index = Math.Floor(Math.Random() * 3 + 1);
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,CreateTileUrl,The following statement contains a magic number: string domain = (index == 1) ? "a" : (index == 2) ? "b" : "c";
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowLocation,The following statement contains a magic number: Window.Navigator.Geolocation.GetCurrentPosition(delegate(Geolocation location) {                  MapViewOptions viewOptions = new MapViewOptions();                  viewOptions.Center = new MapLocation(location.Coordinates.Latitude'                                                       location.Coordinates.Longitude);                  viewOptions.Zoom = 10;                  viewOptions.Animate = true;                    _map.SetView(viewOptions);                  UpdatePhotos(/* newPhotos */ false);                    if (_currentPushpin == null) {                      MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Pushpin.png";                      pushpinOptions.Anchor = new MapPoint(12' 14);                      pushpinOptions.Width = 25;                      pushpinOptions.Height = 28;                      pushpinOptions.TypeName = "currentPushpin";                        _currentPushpin = new MapPushpin(viewOptions.Center' pushpinOptions);                      _map.Entities.Push(_currentPushpin);                  }                  else {                      _currentPushpin.SetLocation(viewOptions.Center);                  }              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowLocation,The following statement contains a magic number: Window.Navigator.Geolocation.GetCurrentPosition(delegate(Geolocation location) {                  MapViewOptions viewOptions = new MapViewOptions();                  viewOptions.Center = new MapLocation(location.Coordinates.Latitude'                                                       location.Coordinates.Longitude);                  viewOptions.Zoom = 10;                  viewOptions.Animate = true;                    _map.SetView(viewOptions);                  UpdatePhotos(/* newPhotos */ false);                    if (_currentPushpin == null) {                      MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Pushpin.png";                      pushpinOptions.Anchor = new MapPoint(12' 14);                      pushpinOptions.Width = 25;                      pushpinOptions.Height = 28;                      pushpinOptions.TypeName = "currentPushpin";                        _currentPushpin = new MapPushpin(viewOptions.Center' pushpinOptions);                      _map.Entities.Push(_currentPushpin);                  }                  else {                      _currentPushpin.SetLocation(viewOptions.Center);                  }              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowLocation,The following statement contains a magic number: Window.Navigator.Geolocation.GetCurrentPosition(delegate(Geolocation location) {                  MapViewOptions viewOptions = new MapViewOptions();                  viewOptions.Center = new MapLocation(location.Coordinates.Latitude'                                                       location.Coordinates.Longitude);                  viewOptions.Zoom = 10;                  viewOptions.Animate = true;                    _map.SetView(viewOptions);                  UpdatePhotos(/* newPhotos */ false);                    if (_currentPushpin == null) {                      MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Pushpin.png";                      pushpinOptions.Anchor = new MapPoint(12' 14);                      pushpinOptions.Width = 25;                      pushpinOptions.Height = 28;                      pushpinOptions.TypeName = "currentPushpin";                        _currentPushpin = new MapPushpin(viewOptions.Center' pushpinOptions);                      _map.Entities.Push(_currentPushpin);                  }                  else {                      _currentPushpin.SetLocation(viewOptions.Center);                  }              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowLocation,The following statement contains a magic number: Window.Navigator.Geolocation.GetCurrentPosition(delegate(Geolocation location) {                  MapViewOptions viewOptions = new MapViewOptions();                  viewOptions.Center = new MapLocation(location.Coordinates.Latitude'                                                       location.Coordinates.Longitude);                  viewOptions.Zoom = 10;                  viewOptions.Animate = true;                    _map.SetView(viewOptions);                  UpdatePhotos(/* newPhotos */ false);                    if (_currentPushpin == null) {                      MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Pushpin.png";                      pushpinOptions.Anchor = new MapPoint(12' 14);                      pushpinOptions.Width = 25;                      pushpinOptions.Height = 28;                      pushpinOptions.TypeName = "currentPushpin";                        _currentPushpin = new MapPushpin(viewOptions.Center' pushpinOptions);                      _map.Entities.Push(_currentPushpin);                  }                  else {                      _currentPushpin.SetLocation(viewOptions.Center);                  }              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowLocation,The following statement contains a magic number: Window.Navigator.Geolocation.GetCurrentPosition(delegate(Geolocation location) {                  MapViewOptions viewOptions = new MapViewOptions();                  viewOptions.Center = new MapLocation(location.Coordinates.Latitude'                                                       location.Coordinates.Longitude);                  viewOptions.Zoom = 10;                  viewOptions.Animate = true;                    _map.SetView(viewOptions);                  UpdatePhotos(/* newPhotos */ false);                    if (_currentPushpin == null) {                      MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Pushpin.png";                      pushpinOptions.Anchor = new MapPoint(12' 14);                      pushpinOptions.Width = 25;                      pushpinOptions.Height = 28;                      pushpinOptions.TypeName = "currentPushpin";                        _currentPushpin = new MapPushpin(viewOptions.Center' pushpinOptions);                      _map.Entities.Push(_currentPushpin);                  }                  else {                      _currentPushpin.SetLocation(viewOptions.Center);                  }              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowPhoto,The following statement contains a magic number: photoContainer.Style.MarginTop = Math.Max(20' Math.Truncate((Document.Body.OffsetHeight - photoContainer.OffsetHeight) / 2f) - 100) + "px";
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowPhoto,The following statement contains a magic number: photoContainer.Style.MarginTop = Math.Max(20' Math.Truncate((Document.Body.OffsetHeight - photoContainer.OffsetHeight) / 2f) - 100) + "px";
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,ShowPhoto,The following statement contains a magic number: photoContainer.Style.MarginTop = Math.Max(20' Math.Truncate((Document.Body.OffsetHeight - photoContainer.OffsetHeight) / 2f) - 100) + "px";
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdateLayout,The following statement contains a magic number: Script.SetTimeout(UpdateLayout' 30);
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: _model.Photos.ForEach(delegate(Photo photo) {                  MapLocation location = new MapLocation(photo.latitude' photo.longitude);                  MapPoint point = _map.TryLocationToPixel(location' MapPointReference.Control);                    PhotoView photoView;                  if (newPhotos) {                      MapPolylineOptions connectorOptions = new MapPolylineOptions();                      connectorOptions.StrokeColor = new MapColor(255' 0x4E' 0xD3' 0x4E);                      connectorOptions.StrokeThickness = 2;                        MapInfoboxOptions calloutOptions = new MapInfoboxOptions();                      calloutOptions.Width = 50;                      calloutOptions.Height = 50;                      calloutOptions.ShowPointer = false;                      calloutOptions.ShowCloseButton = false;                      calloutOptions.Offset = new MapPoint(-25' -25);                      calloutOptions.HtmlContent =                          "<div class=\"photoInfobox\" style=\"background-image: url(" + photo.thumbnailUrl + ")\"" +                          " title=\"" + photo.title + "\"></div>";                      calloutOptions.Visible = true;                        MapPushpinOptions pushpinOptions = new MapPushpinOptions();                      pushpinOptions.Icon = "/Content/Dot.png";                      pushpinOptions.Width = 10;                      pushpinOptions.Height = 10;                      pushpinOptions.Anchor = new MapPoint(5' 5);                      pushpinOptions.TypeName = "locationPushpin";                        photoView = new PhotoView();                      photoView.pushpin = new MapPushpin(location' pushpinOptions);                      photoView.connector = new MapPolyline(new MapLocation[] { location' location }' connectorOptions);                      photoView.callout = new MapInfobox(location' calloutOptions);                      photoView.callout.Data = photo;                      _photoViews[photo.id] = photoView;                        _mapEntities.Insert(photoView.connector' 0);                      _mapEntities.Insert(photoView.callout' 0);                      _mapEntities.Insert(photoView.pushpin' 0);                      MapEvents.AddHandler(photoView.callout' "click"' delegate(MapEventArgs e) {                          ShowPhoto(photo);                      });                  }                  else {                      photoView = _photoViews[photo.id];                  }                    photoView.pushpinNode = new GraphNode();                  photoView.pushpinNode.x = point.X;                  photoView.pushpinNode.y = point.Y;                  photoView.pushpinNode.moveable = false;                    photoView.calloutNode = new GraphNode();                  photoView.calloutNode.x = point.X;                  photoView.calloutNode.y = point.Y;                    GraphEdge connectorEdge = new GraphEdge(photoView.pushpinNode'                                                          photoView.calloutNode'                                                          10 + Math.Random() * 15);                    _graph.AddNode(photoView.pushpinNode);                  _graph.AddNode(photoView.calloutNode);                  _graph.AddEdge(connectorEdge);              });
Magic Number,AroundMe,Page,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Page.cs,UpdatePhotos,The following statement contains a magic number: Script.SetTimeout(UpdateLayout' 30);
Magic Number,AroundMe.Services,FlickrService,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Services\FlickrService.cs,Search,The following statement contains a magic number: Action<SearchResponse> jsonCallback =                  delegate(SearchResponse response) {                      List<PhotoResult> photos = response.PhotoResponse.PhotoList;                        photos.ForEach(delegate(PhotoResult photo) {                          string[] tagsArray = photo.tags.Split(' ');                          if (tagsArray.Length > 10) {                              tagsArray = (string[])tagsArray.GetRange(0' 10);                          }                            photo.tags = tagsArray.Join("'");                          photo.Url_p = "http://flic.kr/p/" + Base58.Encode(photo.ID);                      });                        searchCallback(photos);                  };
Magic Number,AroundMe.Services,FlickrService,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Services\FlickrService.cs,Search,The following statement contains a magic number: Action<SearchResponse> jsonCallback =                  delegate(SearchResponse response) {                      List<PhotoResult> photos = response.PhotoResponse.PhotoList;                        photos.ForEach(delegate(PhotoResult photo) {                          string[] tagsArray = photo.tags.Split(' ');                          if (tagsArray.Length > 10) {                              tagsArray = (string[])tagsArray.GetRange(0' 10);                          }                            photo.tags = tagsArray.Join("'");                          photo.Url_p = "http://flic.kr/p/" + Base58.Encode(photo.ID);                      });                        searchCallback(photos);                  };
Magic Number,AroundMe.Tests,PageModelTests,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Tests\PageModelTests.cs,TestSearchLocationTogglesSearchingStatus,The following statement contains a magic number: Assert.ExpectAsserts(2);
Magic Number,AroundMe.Tests,PageModelTests,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Tests\PageModelTests.cs,TestSearchLocationTogglesSearchingStatus,The following statement contains a magic number: Script.SetTimeout(delegate() {                  PhotoResult[] dummyResults = new PhotoResult[0];                    flickrService.InvokeCallback(dummyResults);                  Assert.IsTrue(pageModel.Searching == false' "Expected model to report false for Searching.");                    TestEngine.ResumeOnAsyncCompleted();              }' 2000);
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,GraphLayout,The following statement contains a magic number: _rigidity = 0.25f;
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,GraphLayout,The following statement contains a magic number: _newRigidity = 0.25f;
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNode,The following statement contains a magic number: node.dx = dx / 2;
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNode,The following statement contains a magic number: node.dy = dy / 2;
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNode,The following statement contains a magic number: node.x = node.x + Math.Max(-30' Math.Min(30' dx));
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNode,The following statement contains a magic number: node.x = node.x + Math.Max(-30' Math.Min(30' dx));
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNode,The following statement contains a magic number: node.y = node.y + Math.Max(-30' Math.Min(30' dy));
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNode,The following statement contains a magic number: node.y = node.y + Math.Max(-30' Math.Min(30' dy));
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNodes,The following statement contains a magic number: _damper -= 0.01f;
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNodes,The following statement contains a magic number: (_maxMotion < 0.2 || (_maxMotion > 1 && _damper < 0.9)) &&                          (_damper > 0.01)
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNodes,The following statement contains a magic number: (_maxMotion < 0.2 || (_maxMotion > 1 && _damper < 0.9)) &&                          (_damper > 0.01)
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNodes,The following statement contains a magic number: (_maxMotion < 0.2 || (_maxMotion > 1 && _damper < 0.9)) &&                          (_damper > 0.01)
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,LayoutNodes,The following statement contains a magic number: _motionRatio <= 0.001
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,PerformLayout,The following statement contains a magic number: i < 5
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,PerformLayout,The following statement contains a magic number: !(_damper < 0.1 && _damping && _maxMotion < MotionLimit)
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,RelaxEdge,The following statement contains a magic number: int div = edge.Length * 100;
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,RemoveOverlap,The following statement contains a magic number: distance < 36 * 36 * 2
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,RemoveOverlap,The following statement contains a magic number: distance < 36 * 36 * 2
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,RemoveOverlap,The following statement contains a magic number: distance < 36 * 36 * 2
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,RemoveOverlap,The following statement contains a magic number: double totalRepulsion = DefaultRepulsion * DefaultRepulsion / 100;
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,SlowLayout,The following statement contains a magic number: _damper = 0.3f;
Magic Number,AroundMe.Graphs,GraphLayout,C:\research\architectureSmells\repos\nikhilk_scriptsharp\samples\AroundMe\AroundMe\Graphs\GraphLayout.cs,SlowLayout,The following statement contains a magic number: _damper > 0.3f
