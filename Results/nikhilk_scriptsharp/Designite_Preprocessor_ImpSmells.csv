Implementation smell,Namespace,Class,File,Method,Description
Long Method,ScriptSharp.Preprocessor,CondenserTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\CondenserTextReader.cs,GetNextCharacter,The method has 117 lines of code.
Complex Method,ScriptSharp,Application,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Application.cs,Execute,Cyclomatic complexity of the method is 11
Complex Method,ScriptSharp.Preprocessor,PreprocessorTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\PreprocessorTextReader.cs,GetNextLine,Cyclomatic complexity of the method is 12
Long Parameter List,ScriptSharp.Preprocessor,PreprocessorException,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\PreprocessorException.cs,PreprocessorException,The method has 5 parameters. Parameters: message' innerException' sourceCode' sourceFile' line
Long Statement,ScriptSharp.Preprocessor,CondenserTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\CondenserTextReader.cs,RaiseError,The length of the statement  "            throw new PreprocessorException(errorMessage' _sourceTextReader.CurrentLine' _sourceTextReader.CurrentFile' _sourceTextReader.CurrentLineNumber); " is 145.
Long Statement,ScriptSharp.Preprocessor,PreprocessorTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\PreprocessorTextReader.cs,ProcessInstruction,The length of the statement  "                    RaiseError("The specified '" + variableName + "' has already been used' or an '#else' instruction has already been specified."); " is 128.
Complex Conditional,ScriptSharp.Preprocessor,CondenserTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\CondenserTextReader.cs,GetNextCharacter,The conditional expression  "(_stripCommentsOnly == false) && ((ch == ' ') || (ch == '\t') || (ch == '\n'))"  is complex.
Complex Conditional,ScriptSharp.Preprocessor,CondenserTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\CondenserTextReader.cs,GetNextCharacter,The conditional expression  "(_lastCharacter == ' ') || (_lastCharacter == '\n') ||                              (IsSpaceSignificantAfter(_lastCharacter) == false) ||                              (IsSpaceSignificantBefore(_sourceTextReader.Peek()) == false)"  is complex.
Complex Conditional,ScriptSharp.Preprocessor,CondenserTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\CondenserTextReader.cs,GetNextCharacter,The conditional expression  "(_lastCharacter == '=') || (_lastCharacter == ':') ||                                  (_lastCharacter == '(') || (_lastCharacter == ''')"  is complex.
Complex Conditional,ScriptSharp.Preprocessor,PreprocessorTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\PreprocessorTextReader.cs,GetNextLine,The conditional expression  "(isActive == false) &&                          (trimmedLine.StartsWith("#elseif ") == false) &&                          (trimmedLine.StartsWith("#elif ") == false) &&                          (trimmedLine.StartsWith("#else") == false) &&                          (trimmedLine.StartsWith("#endif") == false)"  is complex.
Magic Number,ScriptSharp.Preprocessor,CondenserTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\CondenserTextReader.cs,IsIdentifierCharacter,The following statement contains a magic number: return ((ch == '_') || (ch == '$') || (ch > 127) ||                      ((ch >= 'a') && (ch <= 'z')) ||                      ((ch >= 'A') && (ch <= 'Z')) ||                      ((ch >= '0') && (ch <= '9')));
Magic Number,ScriptSharp.Preprocessor,PreprocessorTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\PreprocessorTextReader.cs,ProcessInstruction,The following statement contains a magic number: if (instructionLine.StartsWith("#define ")) {                  string variableName = ParseInstructionVariable(instructionLine' 8' out dummy);                  if (variableName == null) {                      RaiseError("Missing variable following the '#define' instruction.");                  }                  if (_definedVariables.ContainsKey(variableName)) {                      RaiseError("Duplicate definition of variable '" + variableName + "'.");                  }                    _definedVariables[variableName] = String.Empty;              }              else if (instructionLine.StartsWith("#undefine ")) {                  string variableName = ParseInstructionVariable(instructionLine' 10' out dummy);                    if (variableName == null) {                      RaiseError("Missing variable following the '#undefine' instruction.");                  }                  if (_definedVariables.ContainsKey(variableName) == false) {                      RaiseError("The variable '" + variableName + "' has not been defined yet.");                  }                    _definedVariables.Remove(variableName);              }              else if (instructionLine.StartsWith("#if ")) {                  string variableName = ParseInstructionVariable(instructionLine' 4' out dummy);                    if (variableName == null) {                      RaiseError("Missing variable following the '#if' instruction.");                  }                    Instruction instruction = new Instruction();                  _activeInstructions.Push(instruction);                    instruction.AddVariable(variableName' _definedVariables);              }              else if (instructionLine.StartsWith("#elseif ") ||                       instructionLine.StartsWith("#elif ")) {                  string variableName = ParseInstructionVariable(instructionLine' 8' out dummy);                  if (variableName == null) {                      RaiseError("Missing variable following the '#elif' instruction.");                  }                    if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#elif' instruction.");                  }                    Instruction currentInstruction = _activeInstructions.Peek();                  bool added = currentInstruction.AddVariable(variableName' _definedVariables);                    if (added == false) {                      RaiseError("The specified '" + variableName + "' has already been used' or an '#else' instruction has already been specified.");                  }              }              else if (instructionLine.StartsWith("#else")) {                  if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#else' instruction.");                  }                    Instruction currentInstruction = _activeInstructions.Peek();                  bool added = currentInstruction.AddVariable(null' _definedVariables);                    if (added == false) {                      RaiseError("Only a single '#else' instruction is allowed for a given '#if' instruction.");                  }              }              else if (instructionLine.StartsWith("#endif")) {                  if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#endif' instruction.");                  }                    _activeInstructions.Pop();              }
Magic Number,ScriptSharp.Preprocessor,PreprocessorTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\PreprocessorTextReader.cs,ProcessInstruction,The following statement contains a magic number: if (instructionLine.StartsWith("#define ")) {                  string variableName = ParseInstructionVariable(instructionLine' 8' out dummy);                  if (variableName == null) {                      RaiseError("Missing variable following the '#define' instruction.");                  }                  if (_definedVariables.ContainsKey(variableName)) {                      RaiseError("Duplicate definition of variable '" + variableName + "'.");                  }                    _definedVariables[variableName] = String.Empty;              }              else if (instructionLine.StartsWith("#undefine ")) {                  string variableName = ParseInstructionVariable(instructionLine' 10' out dummy);                    if (variableName == null) {                      RaiseError("Missing variable following the '#undefine' instruction.");                  }                  if (_definedVariables.ContainsKey(variableName) == false) {                      RaiseError("The variable '" + variableName + "' has not been defined yet.");                  }                    _definedVariables.Remove(variableName);              }              else if (instructionLine.StartsWith("#if ")) {                  string variableName = ParseInstructionVariable(instructionLine' 4' out dummy);                    if (variableName == null) {                      RaiseError("Missing variable following the '#if' instruction.");                  }                    Instruction instruction = new Instruction();                  _activeInstructions.Push(instruction);                    instruction.AddVariable(variableName' _definedVariables);              }              else if (instructionLine.StartsWith("#elseif ") ||                       instructionLine.StartsWith("#elif ")) {                  string variableName = ParseInstructionVariable(instructionLine' 8' out dummy);                  if (variableName == null) {                      RaiseError("Missing variable following the '#elif' instruction.");                  }                    if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#elif' instruction.");                  }                    Instruction currentInstruction = _activeInstructions.Peek();                  bool added = currentInstruction.AddVariable(variableName' _definedVariables);                    if (added == false) {                      RaiseError("The specified '" + variableName + "' has already been used' or an '#else' instruction has already been specified.");                  }              }              else if (instructionLine.StartsWith("#else")) {                  if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#else' instruction.");                  }                    Instruction currentInstruction = _activeInstructions.Peek();                  bool added = currentInstruction.AddVariable(null' _definedVariables);                    if (added == false) {                      RaiseError("Only a single '#else' instruction is allowed for a given '#if' instruction.");                  }              }              else if (instructionLine.StartsWith("#endif")) {                  if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#endif' instruction.");                  }                    _activeInstructions.Pop();              }
Magic Number,ScriptSharp.Preprocessor,PreprocessorTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\PreprocessorTextReader.cs,ProcessInstruction,The following statement contains a magic number: if (instructionLine.StartsWith("#define ")) {                  string variableName = ParseInstructionVariable(instructionLine' 8' out dummy);                  if (variableName == null) {                      RaiseError("Missing variable following the '#define' instruction.");                  }                  if (_definedVariables.ContainsKey(variableName)) {                      RaiseError("Duplicate definition of variable '" + variableName + "'.");                  }                    _definedVariables[variableName] = String.Empty;              }              else if (instructionLine.StartsWith("#undefine ")) {                  string variableName = ParseInstructionVariable(instructionLine' 10' out dummy);                    if (variableName == null) {                      RaiseError("Missing variable following the '#undefine' instruction.");                  }                  if (_definedVariables.ContainsKey(variableName) == false) {                      RaiseError("The variable '" + variableName + "' has not been defined yet.");                  }                    _definedVariables.Remove(variableName);              }              else if (instructionLine.StartsWith("#if ")) {                  string variableName = ParseInstructionVariable(instructionLine' 4' out dummy);                    if (variableName == null) {                      RaiseError("Missing variable following the '#if' instruction.");                  }                    Instruction instruction = new Instruction();                  _activeInstructions.Push(instruction);                    instruction.AddVariable(variableName' _definedVariables);              }              else if (instructionLine.StartsWith("#elseif ") ||                       instructionLine.StartsWith("#elif ")) {                  string variableName = ParseInstructionVariable(instructionLine' 8' out dummy);                  if (variableName == null) {                      RaiseError("Missing variable following the '#elif' instruction.");                  }                    if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#elif' instruction.");                  }                    Instruction currentInstruction = _activeInstructions.Peek();                  bool added = currentInstruction.AddVariable(variableName' _definedVariables);                    if (added == false) {                      RaiseError("The specified '" + variableName + "' has already been used' or an '#else' instruction has already been specified.");                  }              }              else if (instructionLine.StartsWith("#else")) {                  if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#else' instruction.");                  }                    Instruction currentInstruction = _activeInstructions.Peek();                  bool added = currentInstruction.AddVariable(null' _definedVariables);                    if (added == false) {                      RaiseError("Only a single '#else' instruction is allowed for a given '#if' instruction.");                  }              }              else if (instructionLine.StartsWith("#endif")) {                  if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#endif' instruction.");                  }                    _activeInstructions.Pop();              }
Magic Number,ScriptSharp.Preprocessor,PreprocessorTextReader,C:\repos\nikhilk_scriptsharp\tools\Preprocessor\Preprocessor\PreprocessorTextReader.cs,ProcessInstruction,The following statement contains a magic number: if (instructionLine.StartsWith("#define ")) {                  string variableName = ParseInstructionVariable(instructionLine' 8' out dummy);                  if (variableName == null) {                      RaiseError("Missing variable following the '#define' instruction.");                  }                  if (_definedVariables.ContainsKey(variableName)) {                      RaiseError("Duplicate definition of variable '" + variableName + "'.");                  }                    _definedVariables[variableName] = String.Empty;              }              else if (instructionLine.StartsWith("#undefine ")) {                  string variableName = ParseInstructionVariable(instructionLine' 10' out dummy);                    if (variableName == null) {                      RaiseError("Missing variable following the '#undefine' instruction.");                  }                  if (_definedVariables.ContainsKey(variableName) == false) {                      RaiseError("The variable '" + variableName + "' has not been defined yet.");                  }                    _definedVariables.Remove(variableName);              }              else if (instructionLine.StartsWith("#if ")) {                  string variableName = ParseInstructionVariable(instructionLine' 4' out dummy);                    if (variableName == null) {                      RaiseError("Missing variable following the '#if' instruction.");                  }                    Instruction instruction = new Instruction();                  _activeInstructions.Push(instruction);                    instruction.AddVariable(variableName' _definedVariables);              }              else if (instructionLine.StartsWith("#elseif ") ||                       instructionLine.StartsWith("#elif ")) {                  string variableName = ParseInstructionVariable(instructionLine' 8' out dummy);                  if (variableName == null) {                      RaiseError("Missing variable following the '#elif' instruction.");                  }                    if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#elif' instruction.");                  }                    Instruction currentInstruction = _activeInstructions.Peek();                  bool added = currentInstruction.AddVariable(variableName' _definedVariables);                    if (added == false) {                      RaiseError("The specified '" + variableName + "' has already been used' or an '#else' instruction has already been specified.");                  }              }              else if (instructionLine.StartsWith("#else")) {                  if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#else' instruction.");                  }                    Instruction currentInstruction = _activeInstructions.Peek();                  bool added = currentInstruction.AddVariable(null' _definedVariables);                    if (added == false) {                      RaiseError("Only a single '#else' instruction is allowed for a given '#if' instruction.");                  }              }              else if (instructionLine.StartsWith("#endif")) {                  if (_activeInstructions.Count == 0) {                      RaiseError("Unexpected '#endif' instruction.");                  }                    _activeInstructions.Pop();              }
