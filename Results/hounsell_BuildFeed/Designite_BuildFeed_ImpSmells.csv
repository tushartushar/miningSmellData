Implementation smell,Namespace,Class,File,Method,Description
Long Method,BuildFeed.Controllers,ApiController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\ApiController.cs,GetSearchResult,The method has 115 lines of code.
Long Method,BuildFeed.Controllers,SupportController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\SupportController.cs,Sitemap,The method has 136 lines of code.
Long Statement,BuildFeed.Code,DateTimeModelBinder,C:\repos\hounsell_BuildFeed\BuildFeed\Code\DateTimeModelBinder.cs,BindModel,The length of the statement  "            bool success = DateTime.TryParse(value.AttemptedValue' CultureInfo.CurrentUICulture.DateTimeFormat' DateTimeStyles.AllowWhiteSpaces' out DateTime retValue); " is 156.
Long Statement,BuildFeed.Code,DateTimeModelBinder,C:\repos\hounsell_BuildFeed\BuildFeed\Code\DateTimeModelBinder.cs,BindModel,The length of the statement  "                success = DateTime.TryParseExact(value.AttemptedValue' "yyMMdd-HHmm"' CultureInfo.InvariantCulture' DateTimeStyles.AllowWhiteSpaces' out retValue); " is 147.
Long Statement,BuildFeed.Code,OneSignalHelper,C:\repos\hounsell_BuildFeed\BuildFeed\Code\OneSignalHelper.cs,PushNewBuild,The length of the statement  "                    {LanguageCodes.Portuguese' GetNewBuildTitleForLanguage("pt")}' // Portuguese translation has notification translation ready' Brazil is used more' but not available right now. " is 174.
Long Statement,BuildFeed.Code,OneSignalHelper,C:\repos\hounsell_BuildFeed\BuildFeed\Code\OneSignalHelper.cs,GetNewBuildTitleForLanguage,The length of the statement  "            string localised = VariantTerms.ResourceManager.GetString(nameof(VariantTerms.Notification_NewBuild)' CultureInfo.GetCultureInfo(lang)); " is 136.
Long Statement,BuildFeed.Code,OneSignalHelper,C:\repos\hounsell_BuildFeed\BuildFeed\Code\OneSignalHelper.cs,GetNewBuildTitleForLanguage,The length of the statement  "            string generic = VariantTerms.ResourceManager.GetString(nameof(VariantTerms.Notification_NewBuild)' CultureInfo.InvariantCulture) ?? "{0}"; " is 139.
Long Statement,BuildFeed.Code.Options,Locale,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Options\Locale.cs,DetectCulture,The length of the statement  "                    Calendar gc = ci.OptionalCalendars.FirstOrDefault(c => c is GregorianCalendar && ((GregorianCalendar)c).CalendarType == GregorianCalendarTypes.Localized); " is 154.
Long Statement,BuildFeed.Controllers,AccountController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\AccountController.cs,Register,The length of the statement  "                MembershipUser mu = Membership.CreateUser(ru.UserName' ru.Password' ru.EmailAddress' "{IGNORE}"' "{IGNORE}"' false' out MembershipCreateStatus status); " is 151.
Long Statement,BuildFeed.Controllers,ApiController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\ApiController.cs,AddWin10Builds,The length of the statement  "            if (Membership.ValidateUser(apiModel.Username' apiModel.Password) && (Roles.IsUserInRole(apiModel.Username' "Editors") || Roles.IsUserInRole(apiModel.Username' "Administrators"))) " is 179.
Long Statement,BuildFeed.Controllers,ApiController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\ApiController.cs,AddWin10Builds,The length of the statement  "                        $"https://buildfeed.net{Url.Route("Build"' new { controller = "Front"' action = nameof(FrontController.ViewBuild)' id = build.Id' area = ""' httproute = "" })}?utm_source=notification&utm_campaign=new_build"); " is 209.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The length of the statement  "                            gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic); " is 125.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The length of the statement  "                        gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic); " is 129.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The length of the statement  "                            gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic); " is 128.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The length of the statement  "                        gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic); " is 197.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The length of the statement  "                        gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic); " is 135.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The length of the statement  "                            gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic); " is 135.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The length of the statement  "                            gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic); " is 193.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,ViewSourcePage,The length of the statement  "            ViewBag.PageCount = Math.Ceiling(Convert.ToDouble(await _bModel.SelectSourceCount(source)) / Convert.ToDouble(PAGE_SIZE)); " is 122.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,ViewVersionPage,The length of the statement  "            ViewBag.PageCount = Math.Ceiling(Convert.ToDouble(await _bModel.SelectVersionCount(major' minor)) / Convert.ToDouble(PAGE_SIZE)); " is 129.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBuild,The length of the statement  "                osc.PushNewBuild(build' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = build.Id })}?utm_source=notification&utm_campaign=new_build"); " is 151.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The length of the statement  "                Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?"); " is 155.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The length of the statement  "                                : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?' " is 152.
Long Statement,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The length of the statement  "                                osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build"); " is 143.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Index,The length of the statement  "                             Link = new Uri($"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}")' " is 158.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Index,The length of the statement  "                             Permalink = $"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}"' " is 154.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Added,The length of the statement  "                             Link = new Uri($"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}")' " is 158.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Added,The length of the statement  "                             Permalink = $"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}"' " is 154.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Leaked,The length of the statement  "                             Link = new Uri($"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}")' " is 158.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Leaked,The length of the statement  "                             Permalink = $"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}"' " is 154.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Version,The length of the statement  "                             Link = new Uri($"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}")' " is 158.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Version,The length of the statement  "                             Permalink = $"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}"' " is 154.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Lab,The length of the statement  "                             Link = new Uri($"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}")' " is 158.
Long Statement,BuildFeed.Controllers,RssController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\RssController.cs,Lab,The length of the statement  "                             Permalink = $"{Request.Url.Scheme}://{Request.Url.Authority}{Url.Action(nameof(FrontController.ViewBuild)' new { controller = "Front"' id = build.Id })}"' " is 154.
Empty Catch Block,BuildFeed.Code.Options,Locale,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Options\Locale.cs,DetectCulture,The method has an empty catch block.
Magic Number,BuildFeed.Admin.Controllers,UsersController,C:\repos\hounsell_BuildFeed\BuildFeed\Areas\Admin\Controllers\UsersController.cs,Cleanup,The following statement contains a magic number: foreach (MembershipUser user in users)              {                  if (!user.IsApproved                      && user.CreationDate.AddDays(30) < DateTime.Now)                  {                      Membership.DeleteUser(user.UserName);                  }              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: int byteCount = input.Length * 5 / 8;
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: int byteCount = input.Length * 5 / 8;
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: byte curByte = 0'                   bitsRemaining = 8;
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: int charCount = (int)Math.Ceiling(input.Length / 5d) * 8;
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: byte nextChar = 0'                   bitsRemaining = 5;
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 26)              {                  return (char)(b + 65);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 26)              {                  return (char)(b + 65);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 32)              {                  return (char)(b + 24);              }
Magic Number,BuildFeed.Code,Base32Encoding,C:\repos\hounsell_BuildFeed\BuildFeed\Code\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 32)              {                  return (char)(b + 24);              }
Magic Number,BuildFeed.Controllers,AccountController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\AccountController.cs,Login,The following statement contains a magic number: if (ModelState.IsValid)              {                  bool isAuthenticated = Membership.ValidateUser(ru.UserName' ru.Password);                    if (isAuthenticated)                  {                      int expiryLength = ru.RememberMe                          ? 129600                          : 60;                        FormsAuthenticationTicket ticket = new FormsAuthenticationTicket(ru.UserName' true' expiryLength);                      string encryptedTicket = FormsAuthentication.Encrypt(ticket);                      HttpCookie cookieTicket = new HttpCookie(FormsAuthentication.FormsCookieName' encryptedTicket)                      {                          Expires = DateTime.Now.AddMinutes(expiryLength)'                          Path = FormsAuthentication.FormsCookiePath                      };                      Response.Cookies.Add(cookieTicket);                        string returnUrl = string.IsNullOrEmpty(Request.QueryString["ReturnUrl"])                          ? "/"                          : Request.QueryString["ReturnUrl"];                        return Redirect(returnUrl);                  }              }
Magic Number,BuildFeed.Controllers,AccountController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\AccountController.cs,Login,The following statement contains a magic number: if (ModelState.IsValid)              {                  bool isAuthenticated = Membership.ValidateUser(ru.UserName' ru.Password);                    if (isAuthenticated)                  {                      int expiryLength = ru.RememberMe                          ? 129600                          : 60;                        FormsAuthenticationTicket ticket = new FormsAuthenticationTicket(ru.UserName' true' expiryLength);                      string encryptedTicket = FormsAuthentication.Encrypt(ticket);                      HttpCookie cookieTicket = new HttpCookie(FormsAuthentication.FormsCookieName' encryptedTicket)                      {                          Expires = DateTime.Now.AddMinutes(expiryLength)'                          Path = FormsAuthentication.FormsCookiePath                      };                      Response.Cookies.Add(cookieTicket);                        string returnUrl = string.IsNullOrEmpty(Request.QueryString["ReturnUrl"])                          ? "/"                          : Request.QueryString["ReturnUrl"];                        return Redirect(returnUrl);                  }              }
Magic Number,BuildFeed.Controllers,ApiController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\ApiController.cs,GetWin10Labs,The following statement contains a magic number: labs.AddRange(await _bModel.SelectLabsForVersion(6' 4));
Magic Number,BuildFeed.Controllers,ApiController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\ApiController.cs,GetWin10Labs,The following statement contains a magic number: labs.AddRange(await _bModel.SelectLabsForVersion(6' 4));
Magic Number,BuildFeed.Controllers,ApiController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\ApiController.cs,GetWin10Labs,The following statement contains a magic number: labs.AddRange(await _bModel.SelectLabsForVersion(10' 0));
Magic Number,BuildFeed.Controllers,ApiController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\ApiController.cs,GetSearchResult,The following statement contains a magic number: return results.Take(16);
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,TwitterCard,The following statement contains a magic number: using (Bitmap bm = backExists                  ? new Bitmap(path)                  : new Bitmap(1120' 600))              {                  using (Graphics gr = Graphics.FromImage(bm))                  {                      gr.CompositingMode = CompositingMode.SourceOver;                      gr.CompositingQuality = CompositingQuality.HighQuality;                      gr.InterpolationMode = InterpolationMode.HighQualityBicubic;                      gr.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                      gr.SmoothingMode = SmoothingMode.HighQuality;                      gr.PixelOffsetMode = PixelOffsetMode.HighQuality;                        if (!backExists)                      {                          gr.FillRectangle(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 0' 0' 1120' 600);                      }                        int left = 40;                      using (GraphicsPath gp = new GraphicsPath())                      {                          foreach (char c in "BUILDFEED")                          {                              gp.AddString(c.ToString()' new FontFamily("Segoe UI Semibold")' 0' 32' new Point(left' 32)' StringFormat.GenericTypographic);                                RectangleF bounds = gp.GetBounds();                              left = Convert.ToInt32(bounds.Width);                              left += 52;                          }                            gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString(b.Number.ToString()' new FontFamily("Segoe UI Light")' 0' 260' new Point(32' 114)' StringFormat.GenericTypographic);                            RectangleF bounds = gp.GetBounds();                          left = Convert.ToInt32(bounds.Width);                          left += 44;                            if (b.Revision.HasValue)                          {                              gp.AddString($".{b.Revision}"' new FontFamily("Segoe UI Light")' 0' 160' new Point(left' 220)' StringFormat.GenericTypographic);                          }                            gr.DrawPath(new Pen(new SolidBrush(Color.FromArgb(0x24' 0x24' 0x23))' 4)' gp);                          gr.FillPath(Brushes.White' gp);                      }                        using (GraphicsPath gp = new GraphicsPath())                      {                          gp.AddString($"{MvcExtensions.GetDisplayTextForEnum(b.Family)} (NT {b.MajorVersion}.{b.MinorVersion})"' new FontFamily("Segoe UI Light")' 0' 48' new Point(40' 80)' StringFormat.GenericTypographic);                            gp.AddString(char.ConvertFromUtf32(0xf126)' new FontFamily("FontAwesome")' 0' 28' new Point(46' 468)' StringFormat.GenericTypographic);                          gp.AddString(b.Lab' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 450)' StringFormat.GenericTypographic);                            if (b.BuildTime.HasValue)                          {                              gp.AddString(char.ConvertFromUtf32(0xf017)' new FontFamily("FontAwesome")' 0' 28' new Point(40' 538)' StringFormat.GenericTypographic);                              gp.AddString($"{b.BuildTime.Value.ToShortTimeString()} on {b.BuildTime.Value.ToLongDateString()}"' new FontFamily("Segoe UI Light")' 0' 40' new Point(88' 520)' StringFormat.GenericTypographic);                          }                            gr.FillPath(Brushes.White' gp);                      }                        Response.ContentType = "image/png";                      bm.Save(Response.OutputStream' ImageFormat.Png);                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The following statement contains a magic number: foreach (string line in values[nameof(BulkAddition.Builds)]                  .Split(new[]                      {                          '\r''                          '\n'                      }'                      StringSplitOptions.RemoveEmptyEntries))              {                  Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?");                  if (m.Success)                  {                      try                      {                          Build b = new Build                          {                              MajorVersion = uint.Parse(m.Groups[2].Value)'                              MinorVersion = uint.Parse(m.Groups[3].Value)'                              Number = uint.Parse(m.Groups[4].Value)'                              Revision = string.IsNullOrEmpty(m.Groups[6].Value)                                  ? null                                  : uint.Parse(m.Groups[6].Value) as uint?'                              Lab = m.Groups[8].Value'                              BuildTime = string.IsNullOrEmpty(m.Groups[9].Value)                                  ? null                                  : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?'                              Added = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              Modified = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              SourceType = TypeOfSource.PrivateLeak                          };                          b.RegenerateCachedProperties();                            BuildDetails bi = new BuildDetails                          {                              MajorVersion = b.MajorVersion'                              MinorVersion = b.MinorVersion'                              Number = b.Number'                              Revision = b.Revision'                              Lab = b.Lab'                              BuildTime = b.BuildTime.HasValue                                  ? DateTime.SpecifyKind(b.BuildTime.Value' DateTimeKind.Utc)                                  : null as DateTime?'                              SourceType = b.SourceType'                              SourceDetails = b.SourceDetails                          };                            b.History = new List<ItemHistory<BuildDetails>>                          {                              new ItemHistory<BuildDetails>                              {                                  Type = ItemHistoryType.Added'                                  Time = DateTime.SpecifyKind(DateTime.UtcNow' DateTimeKind.Utc)'                                  UserName = User.Identity.Name'                                  Item = bi                              }                          };                            string buildString = b.FullBuildString;                          Build existing = await _bModel.SelectBuildByFullBuildString(buildString);                            if (existing == null)                          {                              await _bModel.Insert(b);                                if (notify)                              {                                  osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build");                              }                                success.Add(b);                          }                          else                          {                              failed.Add(line);                          }                      }                      catch (Exception)                      {                          failed.Add(line);                      }                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The following statement contains a magic number: foreach (string line in values[nameof(BulkAddition.Builds)]                  .Split(new[]                      {                          '\r''                          '\n'                      }'                      StringSplitOptions.RemoveEmptyEntries))              {                  Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?");                  if (m.Success)                  {                      try                      {                          Build b = new Build                          {                              MajorVersion = uint.Parse(m.Groups[2].Value)'                              MinorVersion = uint.Parse(m.Groups[3].Value)'                              Number = uint.Parse(m.Groups[4].Value)'                              Revision = string.IsNullOrEmpty(m.Groups[6].Value)                                  ? null                                  : uint.Parse(m.Groups[6].Value) as uint?'                              Lab = m.Groups[8].Value'                              BuildTime = string.IsNullOrEmpty(m.Groups[9].Value)                                  ? null                                  : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?'                              Added = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              Modified = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              SourceType = TypeOfSource.PrivateLeak                          };                          b.RegenerateCachedProperties();                            BuildDetails bi = new BuildDetails                          {                              MajorVersion = b.MajorVersion'                              MinorVersion = b.MinorVersion'                              Number = b.Number'                              Revision = b.Revision'                              Lab = b.Lab'                              BuildTime = b.BuildTime.HasValue                                  ? DateTime.SpecifyKind(b.BuildTime.Value' DateTimeKind.Utc)                                  : null as DateTime?'                              SourceType = b.SourceType'                              SourceDetails = b.SourceDetails                          };                            b.History = new List<ItemHistory<BuildDetails>>                          {                              new ItemHistory<BuildDetails>                              {                                  Type = ItemHistoryType.Added'                                  Time = DateTime.SpecifyKind(DateTime.UtcNow' DateTimeKind.Utc)'                                  UserName = User.Identity.Name'                                  Item = bi                              }                          };                            string buildString = b.FullBuildString;                          Build existing = await _bModel.SelectBuildByFullBuildString(buildString);                            if (existing == null)                          {                              await _bModel.Insert(b);                                if (notify)                              {                                  osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build");                              }                                success.Add(b);                          }                          else                          {                              failed.Add(line);                          }                      }                      catch (Exception)                      {                          failed.Add(line);                      }                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The following statement contains a magic number: foreach (string line in values[nameof(BulkAddition.Builds)]                  .Split(new[]                      {                          '\r''                          '\n'                      }'                      StringSplitOptions.RemoveEmptyEntries))              {                  Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?");                  if (m.Success)                  {                      try                      {                          Build b = new Build                          {                              MajorVersion = uint.Parse(m.Groups[2].Value)'                              MinorVersion = uint.Parse(m.Groups[3].Value)'                              Number = uint.Parse(m.Groups[4].Value)'                              Revision = string.IsNullOrEmpty(m.Groups[6].Value)                                  ? null                                  : uint.Parse(m.Groups[6].Value) as uint?'                              Lab = m.Groups[8].Value'                              BuildTime = string.IsNullOrEmpty(m.Groups[9].Value)                                  ? null                                  : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?'                              Added = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              Modified = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              SourceType = TypeOfSource.PrivateLeak                          };                          b.RegenerateCachedProperties();                            BuildDetails bi = new BuildDetails                          {                              MajorVersion = b.MajorVersion'                              MinorVersion = b.MinorVersion'                              Number = b.Number'                              Revision = b.Revision'                              Lab = b.Lab'                              BuildTime = b.BuildTime.HasValue                                  ? DateTime.SpecifyKind(b.BuildTime.Value' DateTimeKind.Utc)                                  : null as DateTime?'                              SourceType = b.SourceType'                              SourceDetails = b.SourceDetails                          };                            b.History = new List<ItemHistory<BuildDetails>>                          {                              new ItemHistory<BuildDetails>                              {                                  Type = ItemHistoryType.Added'                                  Time = DateTime.SpecifyKind(DateTime.UtcNow' DateTimeKind.Utc)'                                  UserName = User.Identity.Name'                                  Item = bi                              }                          };                            string buildString = b.FullBuildString;                          Build existing = await _bModel.SelectBuildByFullBuildString(buildString);                            if (existing == null)                          {                              await _bModel.Insert(b);                                if (notify)                              {                                  osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build");                              }                                success.Add(b);                          }                          else                          {                              failed.Add(line);                          }                      }                      catch (Exception)                      {                          failed.Add(line);                      }                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The following statement contains a magic number: foreach (string line in values[nameof(BulkAddition.Builds)]                  .Split(new[]                      {                          '\r''                          '\n'                      }'                      StringSplitOptions.RemoveEmptyEntries))              {                  Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?");                  if (m.Success)                  {                      try                      {                          Build b = new Build                          {                              MajorVersion = uint.Parse(m.Groups[2].Value)'                              MinorVersion = uint.Parse(m.Groups[3].Value)'                              Number = uint.Parse(m.Groups[4].Value)'                              Revision = string.IsNullOrEmpty(m.Groups[6].Value)                                  ? null                                  : uint.Parse(m.Groups[6].Value) as uint?'                              Lab = m.Groups[8].Value'                              BuildTime = string.IsNullOrEmpty(m.Groups[9].Value)                                  ? null                                  : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?'                              Added = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              Modified = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              SourceType = TypeOfSource.PrivateLeak                          };                          b.RegenerateCachedProperties();                            BuildDetails bi = new BuildDetails                          {                              MajorVersion = b.MajorVersion'                              MinorVersion = b.MinorVersion'                              Number = b.Number'                              Revision = b.Revision'                              Lab = b.Lab'                              BuildTime = b.BuildTime.HasValue                                  ? DateTime.SpecifyKind(b.BuildTime.Value' DateTimeKind.Utc)                                  : null as DateTime?'                              SourceType = b.SourceType'                              SourceDetails = b.SourceDetails                          };                            b.History = new List<ItemHistory<BuildDetails>>                          {                              new ItemHistory<BuildDetails>                              {                                  Type = ItemHistoryType.Added'                                  Time = DateTime.SpecifyKind(DateTime.UtcNow' DateTimeKind.Utc)'                                  UserName = User.Identity.Name'                                  Item = bi                              }                          };                            string buildString = b.FullBuildString;                          Build existing = await _bModel.SelectBuildByFullBuildString(buildString);                            if (existing == null)                          {                              await _bModel.Insert(b);                                if (notify)                              {                                  osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build");                              }                                success.Add(b);                          }                          else                          {                              failed.Add(line);                          }                      }                      catch (Exception)                      {                          failed.Add(line);                      }                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The following statement contains a magic number: foreach (string line in values[nameof(BulkAddition.Builds)]                  .Split(new[]                      {                          '\r''                          '\n'                      }'                      StringSplitOptions.RemoveEmptyEntries))              {                  Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?");                  if (m.Success)                  {                      try                      {                          Build b = new Build                          {                              MajorVersion = uint.Parse(m.Groups[2].Value)'                              MinorVersion = uint.Parse(m.Groups[3].Value)'                              Number = uint.Parse(m.Groups[4].Value)'                              Revision = string.IsNullOrEmpty(m.Groups[6].Value)                                  ? null                                  : uint.Parse(m.Groups[6].Value) as uint?'                              Lab = m.Groups[8].Value'                              BuildTime = string.IsNullOrEmpty(m.Groups[9].Value)                                  ? null                                  : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?'                              Added = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              Modified = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              SourceType = TypeOfSource.PrivateLeak                          };                          b.RegenerateCachedProperties();                            BuildDetails bi = new BuildDetails                          {                              MajorVersion = b.MajorVersion'                              MinorVersion = b.MinorVersion'                              Number = b.Number'                              Revision = b.Revision'                              Lab = b.Lab'                              BuildTime = b.BuildTime.HasValue                                  ? DateTime.SpecifyKind(b.BuildTime.Value' DateTimeKind.Utc)                                  : null as DateTime?'                              SourceType = b.SourceType'                              SourceDetails = b.SourceDetails                          };                            b.History = new List<ItemHistory<BuildDetails>>                          {                              new ItemHistory<BuildDetails>                              {                                  Type = ItemHistoryType.Added'                                  Time = DateTime.SpecifyKind(DateTime.UtcNow' DateTimeKind.Utc)'                                  UserName = User.Identity.Name'                                  Item = bi                              }                          };                            string buildString = b.FullBuildString;                          Build existing = await _bModel.SelectBuildByFullBuildString(buildString);                            if (existing == null)                          {                              await _bModel.Insert(b);                                if (notify)                              {                                  osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build");                              }                                success.Add(b);                          }                          else                          {                              failed.Add(line);                          }                      }                      catch (Exception)                      {                          failed.Add(line);                      }                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The following statement contains a magic number: foreach (string line in values[nameof(BulkAddition.Builds)]                  .Split(new[]                      {                          '\r''                          '\n'                      }'                      StringSplitOptions.RemoveEmptyEntries))              {                  Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?");                  if (m.Success)                  {                      try                      {                          Build b = new Build                          {                              MajorVersion = uint.Parse(m.Groups[2].Value)'                              MinorVersion = uint.Parse(m.Groups[3].Value)'                              Number = uint.Parse(m.Groups[4].Value)'                              Revision = string.IsNullOrEmpty(m.Groups[6].Value)                                  ? null                                  : uint.Parse(m.Groups[6].Value) as uint?'                              Lab = m.Groups[8].Value'                              BuildTime = string.IsNullOrEmpty(m.Groups[9].Value)                                  ? null                                  : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?'                              Added = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              Modified = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              SourceType = TypeOfSource.PrivateLeak                          };                          b.RegenerateCachedProperties();                            BuildDetails bi = new BuildDetails                          {                              MajorVersion = b.MajorVersion'                              MinorVersion = b.MinorVersion'                              Number = b.Number'                              Revision = b.Revision'                              Lab = b.Lab'                              BuildTime = b.BuildTime.HasValue                                  ? DateTime.SpecifyKind(b.BuildTime.Value' DateTimeKind.Utc)                                  : null as DateTime?'                              SourceType = b.SourceType'                              SourceDetails = b.SourceDetails                          };                            b.History = new List<ItemHistory<BuildDetails>>                          {                              new ItemHistory<BuildDetails>                              {                                  Type = ItemHistoryType.Added'                                  Time = DateTime.SpecifyKind(DateTime.UtcNow' DateTimeKind.Utc)'                                  UserName = User.Identity.Name'                                  Item = bi                              }                          };                            string buildString = b.FullBuildString;                          Build existing = await _bModel.SelectBuildByFullBuildString(buildString);                            if (existing == null)                          {                              await _bModel.Insert(b);                                if (notify)                              {                                  osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build");                              }                                success.Add(b);                          }                          else                          {                              failed.Add(line);                          }                      }                      catch (Exception)                      {                          failed.Add(line);                      }                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The following statement contains a magic number: foreach (string line in values[nameof(BulkAddition.Builds)]                  .Split(new[]                      {                          '\r''                          '\n'                      }'                      StringSplitOptions.RemoveEmptyEntries))              {                  Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?");                  if (m.Success)                  {                      try                      {                          Build b = new Build                          {                              MajorVersion = uint.Parse(m.Groups[2].Value)'                              MinorVersion = uint.Parse(m.Groups[3].Value)'                              Number = uint.Parse(m.Groups[4].Value)'                              Revision = string.IsNullOrEmpty(m.Groups[6].Value)                                  ? null                                  : uint.Parse(m.Groups[6].Value) as uint?'                              Lab = m.Groups[8].Value'                              BuildTime = string.IsNullOrEmpty(m.Groups[9].Value)                                  ? null                                  : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?'                              Added = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              Modified = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              SourceType = TypeOfSource.PrivateLeak                          };                          b.RegenerateCachedProperties();                            BuildDetails bi = new BuildDetails                          {                              MajorVersion = b.MajorVersion'                              MinorVersion = b.MinorVersion'                              Number = b.Number'                              Revision = b.Revision'                              Lab = b.Lab'                              BuildTime = b.BuildTime.HasValue                                  ? DateTime.SpecifyKind(b.BuildTime.Value' DateTimeKind.Utc)                                  : null as DateTime?'                              SourceType = b.SourceType'                              SourceDetails = b.SourceDetails                          };                            b.History = new List<ItemHistory<BuildDetails>>                          {                              new ItemHistory<BuildDetails>                              {                                  Type = ItemHistoryType.Added'                                  Time = DateTime.SpecifyKind(DateTime.UtcNow' DateTimeKind.Utc)'                                  UserName = User.Identity.Name'                                  Item = bi                              }                          };                            string buildString = b.FullBuildString;                          Build existing = await _bModel.SelectBuildByFullBuildString(buildString);                            if (existing == null)                          {                              await _bModel.Insert(b);                                if (notify)                              {                                  osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build");                              }                                success.Add(b);                          }                          else                          {                              failed.Add(line);                          }                      }                      catch (Exception)                      {                          failed.Add(line);                      }                  }              }
Magic Number,BuildFeed.Controllers,FrontController,C:\repos\hounsell_BuildFeed\BuildFeed\Controllers\FrontController.cs,AddBulk,The following statement contains a magic number: foreach (string line in values[nameof(BulkAddition.Builds)]                  .Split(new[]                      {                          '\r''                          '\n'                      }'                      StringSplitOptions.RemoveEmptyEntries))              {                  Match m = Regex.Match(line' @"(([\d]{1'2})\.([\d]{1'2})\.)?([\d]{4'5})(\.([\d]{1'5}))?(\.| \()([a-zA-Z][a-zA-Z0-9._\(\)-]+?)\.(\d\d\d\d\d\d-\d\d\d\d)\)?");                  if (m.Success)                  {                      try                      {                          Build b = new Build                          {                              MajorVersion = uint.Parse(m.Groups[2].Value)'                              MinorVersion = uint.Parse(m.Groups[3].Value)'                              Number = uint.Parse(m.Groups[4].Value)'                              Revision = string.IsNullOrEmpty(m.Groups[6].Value)                                  ? null                                  : uint.Parse(m.Groups[6].Value) as uint?'                              Lab = m.Groups[8].Value'                              BuildTime = string.IsNullOrEmpty(m.Groups[9].Value)                                  ? null                                  : DateTime.SpecifyKind(DateTime.ParseExact(m.Groups[9].Value' "yyMMdd-HHmm"' CultureInfo.CurrentCulture.DateTimeFormat)' DateTimeKind.Utc) as DateTime?'                              Added = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              Modified = DateTime.SpecifyKind(DateTime.Now' DateTimeKind.Utc)'                              SourceType = TypeOfSource.PrivateLeak                          };                          b.RegenerateCachedProperties();                            BuildDetails bi = new BuildDetails                          {                              MajorVersion = b.MajorVersion'                              MinorVersion = b.MinorVersion'                              Number = b.Number'                              Revision = b.Revision'                              Lab = b.Lab'                              BuildTime = b.BuildTime.HasValue                                  ? DateTime.SpecifyKind(b.BuildTime.Value' DateTimeKind.Utc)                                  : null as DateTime?'                              SourceType = b.SourceType'                              SourceDetails = b.SourceDetails                          };                            b.History = new List<ItemHistory<BuildDetails>>                          {                              new ItemHistory<BuildDetails>                              {                                  Type = ItemHistoryType.Added'                                  Time = DateTime.SpecifyKind(DateTime.UtcNow' DateTimeKind.Utc)'                                  UserName = User.Identity.Name'                                  Item = bi                              }                          };                            string buildString = b.FullBuildString;                          Build existing = await _bModel.SelectBuildByFullBuildString(buildString);                            if (existing == null)                          {                              await _bModel.Insert(b);                                if (notify)                              {                                  osc.PushNewBuild(b' $"https://buildfeed.net{Url.Action(nameof(ViewBuild)' new { id = b.Id })}?utm_source=notification&utm_campaign=new_build");                              }                                success.Add(b);                          }                          else                          {                              failed.Add(line);                          }                      }                      catch (Exception)                      {                          failed.Add(line);                      }                  }              }
Missing Default,BuildFeed,MvcApplication,C:\repos\hounsell_BuildFeed\BuildFeed\Global.asax.cs,GetVaryByCustomString,The following switch statement is missing a default case: switch (part)                  {                      case "userName":                          varyParts.Add($"user:{context.User.Identity.Name}");                          break;                      case "lang":                          varyParts.Add($"lang:{Locale.DetectCulture(contextWrapper).IetfLanguageTag}");                          break;                      case "theme":                          varyParts.Add($"theme:{Theme.DetectTheme(contextWrapper)}");                          break;                  }
