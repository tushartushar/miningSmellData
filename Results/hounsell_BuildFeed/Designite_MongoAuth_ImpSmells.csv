Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,CreateUser,The method has 8 parameters. Parameters: username' password' email' passwordQuestion' passwordAnswer' isApproved' providerUserKey' status
Long Identifier,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,,The length of the parameter _minRequiredNonAlphanumericCharacters is 37.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,Initialize,The length of the statement  "            _minRequiredNonAlphanumericCharacters = TryReadInt(config["minRequiredNonAlphanumericCharacters"]' _minRequiredNonAlphanumericCharacters); " is 138.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,ChangePassword,The length of the statement  "                Task<MongoMember> task = _memberCollection.Find(m => m.UserName.ToLower() == username.ToLower()).SingleOrDefaultAsync(); " is 120.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,CreateUser,The length of the statement  "                    mu = new MembershipUser(Name' mm.UserName' mm.Id' mm.EmailAddress' ""' ""' mm.IsApproved' mm.IsLockedOut' mm.CreationDate' mm.LastLoginDate' mm.LastActivityDate' DateTime.MinValue' mm.LastLockoutDate); " is 201.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,GetAllUsers,The length of the statement  "            IFindFluent<MongoMember' MongoMember> users = _memberCollection.Find(new BsonDocument()).Sort(Builders<MongoMember>.Sort.Ascending(m => m.UserName)); " is 149.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,GetAllUsers,The length of the statement  "                muc.Add(new MembershipUser(Name' mm.UserName' mm.Id' mm.EmailAddress' ""' ""' mm.IsApproved' mm.IsLockedOut' FixupDatesFromMongo(mm.CreationDate)' FixupDatesFromMongo(mm.LastLoginDate)' FixupDatesFromMongo(mm.LastActivityDate)' DateTime.MinValue' FixupDatesFromMongo(mm.LastLockoutDate))); " is 289.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,GetUser,The length of the statement  "                : new MembershipUser(Name' mm.UserName' mm.Id' mm.EmailAddress' ""' ""' mm.IsApproved' mm.IsLockedOut' FixupDatesFromMongo(mm.CreationDate)' FixupDatesFromMongo(mm.LastLoginDate)' FixupDatesFromMongo(mm.LastActivityDate)' DateTime.MinValue' FixupDatesFromMongo(mm.LastLockoutDate)); " is 282.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,GetUser,The length of the statement  "                : new MembershipUser(Name' mm.UserName' mm.Id' mm.EmailAddress' ""' ""' mm.IsApproved' mm.IsLockedOut' FixupDatesFromMongo(mm.CreationDate)' FixupDatesFromMongo(mm.LastLoginDate)' FixupDatesFromMongo(mm.LastActivityDate)' DateTime.MinValue' FixupDatesFromMongo(mm.LastLockoutDate)); " is 282.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,GetUserNameByEmail,The length of the statement  "            Task<MongoMember> task = _memberCollection.Find(f => f.EmailAddress.ToLower() == email.ToLower()).FirstOrDefaultAsync(); " is 120.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,ChangeApproval,The length of the statement  "            Task<UpdateResult> task = _memberCollection.UpdateOneAsync(Builders<MongoMember>.Filter.Eq(u => u.Id' id)' Builders<MongoMember>.Update.Set(u => u.IsApproved' newStatus)); " is 171.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,ChangeLockStatus,The length of the statement  "            Task<UpdateResult> task = _memberCollection.UpdateOneAsync(Builders<MongoMember>.Filter.Eq(u => u.Id' id)' Builders<MongoMember>.Update.Combine(updateDefinition)); " is 163.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,UnlockUser,The length of the statement  "            Task<UpdateResult> task = _memberCollection.UpdateOneAsync(Builders<MongoMember>.Filter.Eq(m => m.UserName.ToLower()' userName.ToLower())' Builders<MongoMember>.Update.Set(m => m.IsLockedOut' false)); " is 200.
Long Statement,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,ValidateUser,The length of the statement  "            Task<ReplaceOneResult> updTask = _memberCollection.ReplaceOneAsync(Builders<MongoMember>.Filter.Eq(u => u.Id' mm.Id)' mm); " is 122.
Long Statement,MongoAuth,MongoRoleProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoRoleProvider.cs,AddUsersToRoles,The length of the statement  "                Task<ReplaceOneResult> update = _roleCollection.ReplaceOneAsync(Builders<MongoRole>.Filter.Eq(r => r.Id' roles[i].Id)' roles[i]); " is 129.
Long Statement,MongoAuth,MongoRoleProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoRoleProvider.cs,FindUsersInRole,The length of the statement  "            Task<List<MongoMember>> users = _memberCollection.Find(u => role.Result.Users.Contains(u.Id) && u.UserName.ToLower().Contains(usernameToMatch.ToLower())).ToListAsync(); " is 168.
Long Statement,MongoAuth,MongoRoleProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoRoleProvider.cs,GetRolesForUser,The length of the statement  "            Task<MongoMember> user = _memberCollection.Find(u => u.UserName.ToLower() == username.ToLower()).SingleOrDefaultAsync(); " is 120.
Long Statement,MongoAuth,MongoRoleProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoRoleProvider.cs,GetRolesForUser,The length of the statement  "            Task<List<MongoRole>> role = _roleCollection.Find(r => r.Users != null && r.Users.Contains(user.Result.Id)).ToListAsync(); " is 122.
Long Statement,MongoAuth,MongoRoleProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoRoleProvider.cs,IsUserInRole,The length of the statement  "            Task<MongoMember> user = _memberCollection.Find(u => u.UserName.ToLower() == username.ToLower()).SingleOrDefaultAsync(); " is 120.
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: int byteCount = input.Length * 5 / 8;
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: int byteCount = input.Length * 5 / 8;
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: byte curByte = 0'                   bitsRemaining = 8;
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    int mask;                  if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: int charCount = (int)Math.Ceiling(input.Length / 5d) * 8;
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: byte nextChar = 0'                   bitsRemaining = 5;
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 26)              {                  return (char)(b + 65);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 26)              {                  return (char)(b + 65);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 32)              {                  return (char)(b + 24);              }
Magic Number,MongoAuth,Base32Encoding,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 32)              {                  return (char)(b + 24);              }
Magic Number,MongoAuth,DatabaseConfig,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\DatabaseConfig.cs,DatabaseConfig,The following statement contains a magic number: if (!success)              {                  port = 27017; // mongo default port              }
Magic Number,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,ChangePassword,The following statement contains a magic number: if (isAuthenticated)              {                  Task<MongoMember> task = _memberCollection.Find(m => m.UserName.ToLower() == username.ToLower()).SingleOrDefaultAsync();                  task.Wait();                  MongoMember mm = task.Result;                    if (mm == null)                  {                      return false;                  }                    var salt = new byte[24];                  byte[] hash = CalculateHash(newPassword' ref salt);                    mm.PassSalt = salt;                  mm.PassHash = hash;                    Task<ReplaceOneResult> replaceTask = _memberCollection.ReplaceOneAsync(m => m.Id == mm.Id' mm);                  replaceTask.Wait();                    return replaceTask.IsCompleted;              }
Magic Number,MongoAuth,MongoMembershipProvider,C:\repos\hounsell_BuildFeed\Authentication\MongoAuth\MongoMembershipProvider.cs,CreateUser,The following statement contains a magic number: if (dupeUsers.Result > 0)              {                  status = MembershipCreateStatus.DuplicateUserName;              }              else if (dupeEmails.Result > 0)              {                  status = MembershipCreateStatus.DuplicateEmail;              }              else              {                  var salt = new byte[24];                  byte[] hash = CalculateHash(password' ref salt);                    MongoMember mm = new MongoMember                  {                      Id = Guid.NewGuid()'                      UserName = username'                      PassHash = hash'                      PassSalt = salt'                      EmailAddress = email'                      IsApproved = isApproved'                      IsLockedOut = false'                      CreationDate = DateTime.UtcNow'                      LastLoginDate = DateTime.MinValue'                      LastActivityDate = DateTime.MinValue'                      LastLockoutDate = DateTime.MinValue                  };                    Task insertTask = _memberCollection.InsertOneAsync(mm);                  insertTask.Wait();                    if (insertTask.Status == TaskStatus.RanToCompletion)                  {                      status = MembershipCreateStatus.Success;                      mu = new MembershipUser(Name' mm.UserName' mm.Id' mm.EmailAddress' ""' ""' mm.IsApproved' mm.IsLockedOut' mm.CreationDate' mm.LastLoginDate' mm.LastActivityDate' DateTime.MinValue' mm.LastLockoutDate);                  }                  else                  {                      status = MembershipCreateStatus.ProviderError;                  }              }
