Implementation smell,Namespace,Class,File,Method,Description
Magic Number,SimpleExcelExport,ExcelFileCreator,C:\repos\majimenezp_SimpleExcelExport\SimpleExcelExport\ExcelFileCreator.cs,CreateHeader,The following statement contains a magic number: foreach (var column in orderedColumns)             {                 row.CreateCell(columnNumber' NPOI.SS.UserModel.CellType.String);                 var cellt = GetColumnCellType(column.PropType);                 row.Cells[columnNumber].SetCellValue(column.ColumnName);                 currentSheet.SetColumnWidth(columnNumber' (int)((column.ColumnName.Length * 1.5) * 256));                 SetHeaderOptions(column' row' columnNumber' exportToExcel);                 ++columnNumber;             }
Magic Number,SimpleExcelExport,ExcelFileCreator,C:\repos\majimenezp_SimpleExcelExport\SimpleExcelExport\ExcelFileCreator.cs,CreateHeader,The following statement contains a magic number: foreach (var column in orderedColumns)             {                 row.CreateCell(columnNumber' NPOI.SS.UserModel.CellType.String);                 var cellt = GetColumnCellType(column.PropType);                 row.Cells[columnNumber].SetCellValue(column.ColumnName);                 currentSheet.SetColumnWidth(columnNumber' (int)((column.ColumnName.Length * 1.5) * 256));                 SetHeaderOptions(column' row' columnNumber' exportToExcel);                 ++columnNumber;             }
Magic Number,SimpleExcelExport,ExcelFileCreator,C:\repos\majimenezp_SimpleExcelExport\SimpleExcelExport\ExcelFileCreator.cs,CreateCellWithValue,The following statement contains a magic number: if(cellStyles.ContainsKey(styleId))             {                 style=cellStyles[styleId];             }             else{                 style= (HSSFCellStyle)document.CreateCellStyle();                 if (!backgroundColor.IsEmpty)                 {                     style.FillForegroundColor = GetXLColour(backgroundColor);                     style.FillPattern = NPOI.SS.UserModel.FillPattern.SolidForeground;                 }                 switch (valueTypeName)                 {                     case "string":                         style.DataFormat = HSSFDataFormat.GetBuiltinFormat("General");                         break;                     case "datetime":                         style.DataFormat = 14;                         break;                     case "int":                     case "int32":                     case "int64":                         style.DataFormat = HSSFDataFormat.GetBuiltinFormat("0");                         break;                     case "decimal":                     case "long":                     case "double":                         style.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");                         break;                     default:                         style.DataFormat = HSSFDataFormat.GetBuiltinFormat("General");                         break;                 }                 cellStyles.Add(styleId' style);             }
Magic Number,SimpleExcelExport,ExportToExcel,C:\repos\majimenezp_SimpleExcelExport\SimpleExcelExport\ExportToExcel.cs,ProcessColorByRGB,The following statement contains a magic number: int[] vals = new int[3];
Magic Number,SimpleExcelExport,ExportToExcel,C:\repos\majimenezp_SimpleExcelExport\SimpleExcelExport\ExportToExcel.cs,ProcessColorByRGB,The following statement contains a magic number: resultColor = System.Drawing.Color.FromArgb(vals[0]' vals[1]' vals[2]);
Missing Default,SimpleExcelExport,ExcelFileCreator,C:\repos\majimenezp_SimpleExcelExport\SimpleExcelExport\ExcelFileCreator.cs,GetColumnCellType,The following switch statement is missing a default case: switch (type.Name.ToLowerInvariant())             {                 case "string":                     cellType=NPOI.SS.UserModel.CellType.String;                     break;                 case "datetime":                     cellType = NPOI.SS.UserModel.CellType.Numeric;                     break;                 case "int":                 case "int32":                 case "int64":                 case "decimal":                 case "long":                 case "double":                     cellType = NPOI.SS.UserModel.CellType.Numeric;                     break;                 case "boolean":                 case "bool":                     cellType = NPOI.SS.UserModel.CellType.Boolean;                     break;             }
