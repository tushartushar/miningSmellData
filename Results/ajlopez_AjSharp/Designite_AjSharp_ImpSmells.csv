Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextString,Cyclomatic complexity of the method is 40
Complex Method,AjSharp.Compiler,Parser,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Parser.cs,ParseBinaryExpressionZerothLevel,Cyclomatic complexity of the method is 8
Complex Method,AjSharp.Compiler,Parser,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Parser.cs,ParseSimpleTermExpression,Cyclomatic complexity of the method is 24
Complex Method,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,Cyclomatic complexity of the method is 8
Long Statement,AjSharp.Compiler,Parser,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Parser.cs,ParseHostedCommand,The length of the statement  "		return new ExpressionCommand (new HostedInvocationExpression (((ExpressionCommand)command).Expression' arguments' hostexpression)); " is 131.
Empty Catch Block,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextOperator,The method has an empty catch block.
Empty Catch Block,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextOperator,The method has an empty catch block.
Empty Catch Block,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextInteger,The method has an empty catch block.
Empty Catch Block,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextReal,The method has an empty catch block.
Empty Catch Block,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextName,The method has an empty catch block.
Magic Number,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextString,The following statement contains a magic number: while (ch != StringChar || lastChar == '\\') {  	if (lastChar == '\\') {  		switch (ch) {  		case 't':  			sb.Length--;  			sb.Append ('\t');  			break;  		case 'a':  			sb.Length--;  			sb.Append ('\a');  			break;  		case 'b':  			sb.Length--;  			sb.Append ('\b');  			break;  		case 'e':  			sb.Length--;  			sb.Append ((char)27);  			break;  		case 'f':  			sb.Length--;  			sb.Append ('\f');  			break;  		case 'n':  			sb.Length--;  			sb.Append ('\n');  			break;  		case 'r':  			sb.Length--;  			sb.Append ('\r');  			break;  		case 'v':  			sb.Length--;  			sb.Append ('\v');  			break;  		case '\\':  			break;  		default:  			sb.Length--;  			sb.Append (ch);  			break;  		}  		lastChar = (char)0;  	}  	else {  		sb.Append (ch);  		lastChar = ch;  	}  	ch = this.NextChar ();  }  
Magic Number,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextString,The following statement contains a magic number: if (lastChar == '\\') {  	switch (ch) {  	case 't':  		sb.Length--;  		sb.Append ('\t');  		break;  	case 'a':  		sb.Length--;  		sb.Append ('\a');  		break;  	case 'b':  		sb.Length--;  		sb.Append ('\b');  		break;  	case 'e':  		sb.Length--;  		sb.Append ((char)27);  		break;  	case 'f':  		sb.Length--;  		sb.Append ('\f');  		break;  	case 'n':  		sb.Length--;  		sb.Append ('\n');  		break;  	case 'r':  		sb.Length--;  		sb.Append ('\r');  		break;  	case 'v':  		sb.Length--;  		sb.Append ('\v');  		break;  	case '\\':  		break;  	default:  		sb.Length--;  		sb.Append (ch);  		break;  	}  	lastChar = (char)0;  }  else {  	sb.Append (ch);  	lastChar = ch;  }  
Magic Number,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextString,The following statement contains a magic number: switch (ch) {  case 't':  	sb.Length--;  	sb.Append ('\t');  	break;  case 'a':  	sb.Length--;  	sb.Append ('\a');  	break;  case 'b':  	sb.Length--;  	sb.Append ('\b');  	break;  case 'e':  	sb.Length--;  	sb.Append ((char)27);  	break;  case 'f':  	sb.Length--;  	sb.Append ('\f');  	break;  case 'n':  	sb.Length--;  	sb.Append ('\n');  	break;  case 'r':  	sb.Length--;  	sb.Append ('\r');  	break;  case 'v':  	sb.Length--;  	sb.Append ('\v');  	break;  case '\\':  	break;  default:  	sb.Length--;  	sb.Append (ch);  	break;  }  
Magic Number,AjSharp.Compiler,Lexer,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Lexer.cs,NextString,The following statement contains a magic number: sb.Append ((char)27);  
Magic Number,AjSharp.Compiler,Parser,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Parser.cs,ParseSimpleTermExpression,The following statement contains a magic number: switch (token.TokenType) {  case TokenType.Separator:  	if (token.Value == "(") {  		IExpression expr = this.ParseExpression ();  		this.Parse (TokenType.Separator' ")");  		return expr;  	}  	break;  case TokenType.Boolean:  	bool booleanValue = Convert.ToBoolean (token.Value);  	return new ConstantExpression (booleanValue);  case TokenType.Integer:  	int intValue = Int32.Parse (token.Value' System.Globalization.CultureInfo.InvariantCulture);  	return new ConstantExpression (intValue);  case TokenType.Real:  	double realValue = Double.Parse (token.Value' System.Globalization.CultureInfo.InvariantCulture);  	return new ConstantExpression (realValue);  case TokenType.String:  	IList<string> parts = StringUtilities.SplitText (token.Value);  	if (parts.Count == 1)  		return new ConstantExpression (token.Value);  	IExpression strexpr = new ConstantExpression (parts [0]);  	for (int k = 1; k < parts.Count; k++)  		if ((k % 2) == 0)  			strexpr = new ConcatenateExpression (strexpr' new ConstantExpression (parts [k]));  		else {  			Parser parser = new Parser (parts [k]);  			strexpr = new ConcatenateExpression (strexpr' parser.ParseExpression ());  		}  	return strexpr;  case TokenType.Name:  	if (this.TryParse (TokenType.Separator' "(")) {  		List<IExpression> arguments = this.ParseArgumentList ();  		return new InvokeExpression (token.Value' arguments);  	}  	if (this.TryParse (TokenType.Operator' "...")) {  		this.lexer.NextToken ();  		return new VariableVariableExpression (token.Value);  	}  	return new VariableExpression (token.Value);  }  
Magic Number,AjSharp.Compiler,Parser,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Parser.cs,ParseSimpleTermExpression,The following statement contains a magic number: for (int k = 1; k < parts.Count; k++)  	if ((k % 2) == 0)  		strexpr = new ConcatenateExpression (strexpr' new ConstantExpression (parts [k]));  	else {  		Parser parser = new Parser (parts [k]);  		strexpr = new ConcatenateExpression (strexpr' parser.ParseExpression ());  	}  
Magic Number,AjSharp.Compiler,Parser,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Parser.cs,ParseSimpleTermExpression,The following statement contains a magic number: if ((k % 2) == 0)  	strexpr = new ConcatenateExpression (strexpr' new ConstantExpression (parts [k]));  else {  	Parser parser = new Parser (parts [k]);  	strexpr = new ConcatenateExpression (strexpr' parser.ParseExpression ());  }  
Magic Number,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,The following statement contains a magic number: for (string line = this.reader.ReadLine (); line != null; line = this.reader.ReadLine ()) {  	string trimline = line.Trim ();  	if (inmultiline) {  		if (trimline.StartsWith ("@}")) {  			inmultiline = false;  			line = line.Substring (line.IndexOf ("@}") + 2);  			if (!string.IsNullOrEmpty (line.Trim ()))  				this.PrintCodeLine (line);  		}  		else {  			this.PrintCodeLine (line);  		}  	}  	else {  		if (trimline.StartsWith ("@{")) {  			inmultiline = true;  			line = line.Substring (line.IndexOf ("@{") + 2);  			if (!string.IsNullOrEmpty (line.Trim ()))  				this.PrintCodeLine (line);  		}  		else if (trimline.StartsWith ("@")) {  			line = line.Substring (line.IndexOf ("@") + 1);  			this.PrintCodeLine (line);  		}  		else  			this.PrintLine (line);  	}  }  
Magic Number,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,The following statement contains a magic number: for (string line = this.reader.ReadLine (); line != null; line = this.reader.ReadLine ()) {  	string trimline = line.Trim ();  	if (inmultiline) {  		if (trimline.StartsWith ("@}")) {  			inmultiline = false;  			line = line.Substring (line.IndexOf ("@}") + 2);  			if (!string.IsNullOrEmpty (line.Trim ()))  				this.PrintCodeLine (line);  		}  		else {  			this.PrintCodeLine (line);  		}  	}  	else {  		if (trimline.StartsWith ("@{")) {  			inmultiline = true;  			line = line.Substring (line.IndexOf ("@{") + 2);  			if (!string.IsNullOrEmpty (line.Trim ()))  				this.PrintCodeLine (line);  		}  		else if (trimline.StartsWith ("@")) {  			line = line.Substring (line.IndexOf ("@") + 1);  			this.PrintCodeLine (line);  		}  		else  			this.PrintLine (line);  	}  }  
Magic Number,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,The following statement contains a magic number: if (inmultiline) {  	if (trimline.StartsWith ("@}")) {  		inmultiline = false;  		line = line.Substring (line.IndexOf ("@}") + 2);  		if (!string.IsNullOrEmpty (line.Trim ()))  			this.PrintCodeLine (line);  	}  	else {  		this.PrintCodeLine (line);  	}  }  else {  	if (trimline.StartsWith ("@{")) {  		inmultiline = true;  		line = line.Substring (line.IndexOf ("@{") + 2);  		if (!string.IsNullOrEmpty (line.Trim ()))  			this.PrintCodeLine (line);  	}  	else if (trimline.StartsWith ("@")) {  		line = line.Substring (line.IndexOf ("@") + 1);  		this.PrintCodeLine (line);  	}  	else  		this.PrintLine (line);  }  
Magic Number,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,The following statement contains a magic number: if (inmultiline) {  	if (trimline.StartsWith ("@}")) {  		inmultiline = false;  		line = line.Substring (line.IndexOf ("@}") + 2);  		if (!string.IsNullOrEmpty (line.Trim ()))  			this.PrintCodeLine (line);  	}  	else {  		this.PrintCodeLine (line);  	}  }  else {  	if (trimline.StartsWith ("@{")) {  		inmultiline = true;  		line = line.Substring (line.IndexOf ("@{") + 2);  		if (!string.IsNullOrEmpty (line.Trim ()))  			this.PrintCodeLine (line);  	}  	else if (trimline.StartsWith ("@")) {  		line = line.Substring (line.IndexOf ("@") + 1);  		this.PrintCodeLine (line);  	}  	else  		this.PrintLine (line);  }  
Magic Number,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,The following statement contains a magic number: if (trimline.StartsWith ("@}")) {  	inmultiline = false;  	line = line.Substring (line.IndexOf ("@}") + 2);  	if (!string.IsNullOrEmpty (line.Trim ()))  		this.PrintCodeLine (line);  }  else {  	this.PrintCodeLine (line);  }  
Magic Number,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,The following statement contains a magic number: line = line.Substring (line.IndexOf ("@}") + 2);  
Magic Number,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,The following statement contains a magic number: if (trimline.StartsWith ("@{")) {  	inmultiline = true;  	line = line.Substring (line.IndexOf ("@{") + 2);  	if (!string.IsNullOrEmpty (line.Trim ()))  		this.PrintCodeLine (line);  }  else if (trimline.StartsWith ("@")) {  	line = line.Substring (line.IndexOf ("@") + 1);  	this.PrintCodeLine (line);  }  else  	this.PrintLine (line);  
Magic Number,AjSharp.Templates,Preprocessor,C:\repos\ajlopez_AjSharp\Src\AjSharp\Templates\Preprocessor.cs,Process,The following statement contains a magic number: line = line.Substring (line.IndexOf ("@{") + 2);  
Missing Default,AjSharp.Compiler,Parser,C:\repos\ajlopez_AjSharp\Src\AjSharp\Compiler\Parser.cs,ParseSimpleTermExpression,The following switch statement is missing a default case: switch (token.TokenType) {  case TokenType.Separator:  	if (token.Value == "(") {  		IExpression expr = this.ParseExpression ();  		this.Parse (TokenType.Separator' ")");  		return expr;  	}  	break;  case TokenType.Boolean:  	bool booleanValue = Convert.ToBoolean (token.Value);  	return new ConstantExpression (booleanValue);  case TokenType.Integer:  	int intValue = Int32.Parse (token.Value' System.Globalization.CultureInfo.InvariantCulture);  	return new ConstantExpression (intValue);  case TokenType.Real:  	double realValue = Double.Parse (token.Value' System.Globalization.CultureInfo.InvariantCulture);  	return new ConstantExpression (realValue);  case TokenType.String:  	IList<string> parts = StringUtilities.SplitText (token.Value);  	if (parts.Count == 1)  		return new ConstantExpression (token.Value);  	IExpression strexpr = new ConstantExpression (parts [0]);  	for (int k = 1; k < parts.Count; k++)  		if ((k % 2) == 0)  			strexpr = new ConcatenateExpression (strexpr' new ConstantExpression (parts [k]));  		else {  			Parser parser = new Parser (parts [k]);  			strexpr = new ConcatenateExpression (strexpr' parser.ParseExpression ());  		}  	return strexpr;  case TokenType.Name:  	if (this.TryParse (TokenType.Separator' "(")) {  		List<IExpression> arguments = this.ParseArgumentList ();  		return new InvokeExpression (token.Value' arguments);  	}  	if (this.TryParse (TokenType.Operator' "...")) {  		this.lexer.NextToken ();  		return new VariableVariableExpression (token.Value);  	}  	return new VariableExpression (token.Value);  }  
