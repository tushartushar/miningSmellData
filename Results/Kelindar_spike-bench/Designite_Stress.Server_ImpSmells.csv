Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Stress.Server,Program,C:\repos\Kelindar_spike-bench\Stress.Server\Program.cs,StressProtocol_Check,The length of the statement  "		client.SendEventInform (String.Format ("[{0}] Failed to match ({1}) with ({2})"' packet.Key' packet.Value' old)' DateTime.Now); " is 127.
Long Statement,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The length of the statement  "		return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60)); " is 152.
Long Statement,Spike.Network,StressProtocol,C:\repos\Kelindar_spike-bench\Stress.Server\StressProtocol.cs,Configure,The length of the statement  "	PacketIndex.RegisterMetadata (new OperationInfo ("B22E7270"' true' null' CompressionTarget.None' Direction.Pull' null' null' typeof(GetAllInform)' GetAllInform.CreateInstance)); " is 177.
Long Statement,Spike.Network,StressProtocol,C:\repos\Kelindar_spike-bench\Stress.Server\StressProtocol.cs,Configure,The length of the statement  "	PacketIndex.RegisterMetadata (new OperationInfo ("70D7B183"' true' null' CompressionTarget.None' Direction.Pull' typeof(CheckRequest)' CheckRequest.CreateInstance' typeof(CheckInform)' CheckInform.CreateInstance)); " is 214.
Long Statement,Spike.Network,StressProtocol,C:\repos\Kelindar_spike-bench\Stress.Server\StressProtocol.cs,Configure,The length of the statement  "	PacketIndex.RegisterMetadata (new OperationInfo ("3E05ECEE"' true' null' CompressionTarget.None' Direction.Pull' typeof(GetRequest)' GetRequest.CreateInstance' typeof(GetInform)' GetInform.CreateInstance)); " is 206.
Long Statement,Spike.Network,StressProtocol,C:\repos\Kelindar_spike-bench\Stress.Server\StressProtocol.cs,Configure,The length of the statement  "	PacketIndex.RegisterMetadata (new OperationInfo ("BA220D80"' true' null' CompressionTarget.None' Direction.Push' null' null' typeof(EventInform)' EventInform.CreateInstance)); " is 175.
Long Statement,Spike.Network,StressProtocol,C:\repos\Kelindar_spike-bench\Stress.Server\StressProtocol.cs,Configure,The length of the statement  "	ProtocolInfo.Register ("StressProtocol"' "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxQcm90b2NvbCBOYW1lPSJTdHJlc3NQcm90b2NvbCIgeG1sbnM9Imh0dHA6Ly93d3cuc3Bpa2UtZW5naW5lLmNvbS8yMDExL3NwbWwiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICA8T3BlcmF0aW9ucz4NCg0KICAgIDxPcGVyYXRpb24gTmFtZT0iR2V0QWxsIiBEaXJlY3Rpb249IlB1bGwiIFN1cHByZXNzU2VjdXJpdHk9InRydWUiPg0KICAgICAgPE91dGdvaW5nPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IlRhYmxlIiBUeXBlPSJMaXN0T2ZDb21wbGV4VHlwZSIgQ2xhc3M9IlBhcmFtZXRlciI+DQogICAgICAgICAgPE1lbWJlciBOYW1lPSJLZXkiIFR5cGU9IlN0cmluZyIgLz4NCiAgICAgICAgICA8TWVtYmVyIE5hbWU9IlZhbHVlIiBUeXBlPSJEeW5hbWljVHlwZSIgLz4NCiAgICAgICAgPC9NZW1iZXI+DQogICAgICA8L091dGdvaW5nPg0KICAgIDwvT3BlcmF0aW9uPg0KDQogICAgPE9wZXJhdGlvbiBOYW1lPSJDaGVjayIgRGlyZWN0aW9uPSJQdWxsIiBTdXBwcmVzc1NlY3VyaXR5PSJ0cnVlIj4NCiAgICAgIDxJbmNvbWluZz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJLZXkiIFR5cGU9IlN0cmluZyIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJWYWx1ZSIgVHlwZT0iRHluYW1pY1R5cGUiIC8+DQogICAgICA8L0luY29taW5nPg0KICAgICAgPE91dGdvaW5nPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IktleSIgVHlwZT0iU3RyaW5nIiAvPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IlZhbHVlIiBUeXBlPSJEeW5hbWljVHlwZSIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJTdWNjZXNzIiBUeXBlPSJCb29sZWFuIiAvPg0KICAgICAgPC9PdXRnb2luZz4NCiAgICA8L09wZXJhdGlvbj4NCg0KICAgIDxPcGVyYXRpb24gTmFtZT0iR2V0IiBEaXJlY3Rpb249IlB1bGwiIFN1cHByZXNzU2VjdXJpdHk9InRydWUiPg0KICAgICAgPEluY29taW5nPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IktleSIgVHlwZT0iU3RyaW5nIiAvPg0KICAgICAgPC9JbmNvbWluZz4NCiAgICAgIDxPdXRnb2luZz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJWYWx1ZSIgVHlwZT0iRHluYW1pY1R5cGUiIC8+DQogICAgICA8L091dGdvaW5nPg0KICAgIDwvT3BlcmF0aW9uPg0KDQogICAgPE9wZXJhdGlvbiBOYW1lPSJFdmVudCIgRGlyZWN0aW9uPSJQdXNoIiBTdXBwcmVzc1NlY3VyaXR5PSJ0cnVlIj4NCiAgICAgIDxPdXRnb2luZz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJNZXNzYWdlIiBUeXBlPSJTdHJpbmciIC8+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iVGltZSIgVHlwZT0iRGF0ZVRpbWUiIC8+DQogICAgICA8L091dGdvaW5nPg0KICAgIDwvT3BlcmF0aW9uPg0KDQogIDwvT3BlcmF0aW9ucz4NCjwvUHJvdG9jb2w+"); " is 1961.
Magic Number,Stress.Server,Program,C:\repos\Kelindar_spike-bench\Stress.Server\Program.cs,Main,The following statement contains a magic number: Service.Listen (new TcpBinding (IPAddress.Any' 8002));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(Boolean))  	return Random.Next (0' 2) == 1;  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return Random.Next (0' 2) == 1;  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(Int16))  	return BitConverter.ToInt16 (NextBytes (2)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return BitConverter.ToInt16 (NextBytes (2)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(UInt16))  	return BitConverter.ToUInt16 (NextBytes (2)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return BitConverter.ToUInt16 (NextBytes (2)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(Int32))  	return BitConverter.ToInt32 (NextBytes (4)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return BitConverter.ToInt32 (NextBytes (4)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(UInt32))  	return BitConverter.ToUInt32 (NextBytes (4)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return BitConverter.ToUInt32 (NextBytes (4)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(Int64))  	return BitConverter.ToInt64 (NextBytes (8)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return BitConverter.ToInt64 (NextBytes (8)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(UInt64))  	return BitConverter.ToUInt64 (NextBytes (8)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return BitConverter.ToUInt64 (NextBytes (8)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(Single))  	return BitConverter.ToSingle (NextBytes (4)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return BitConverter.ToSingle (NextBytes (4)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(Double))  	return BitConverter.ToDouble (NextBytes (8)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return BitConverter.ToDouble (NextBytes (8)' 0);  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(DateTime))  	return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(DateTime))  	return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(DateTime))  	return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(DateTime))  	return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(DateTime))  	return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(DateTime))  	return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(DateTime))  	return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return new DateTime (Random.Next (2000' 3000)' Random.Next (1' 12)' Random.Next (1' 12)' Random.Next (1' 24)' Random.Next (1' 60)' Random.Next (1' 60));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: if (type == typeof(String))  	return NextString (Random.Next (0' 1024));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextValue,The following statement contains a magic number: return NextString (Random.Next (0' 1024));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextString,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * Random.NextDouble () + 65)));  	builder.Append (ch);  }  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextString,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * Random.NextDouble () + 65)));  	builder.Append (ch);  }  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextString,The following statement contains a magic number: ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * Random.NextDouble () + 65)));  
Magic Number,Stress.Server,StressGen,C:\repos\Kelindar_spike-bench\Stress.Server\StressGen.cs,NextString,The following statement contains a magic number: ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * Random.NextDouble () + 65)));  
Magic Number,Stress.Server,StressStore,C:\repos\Kelindar_spike-bench\Stress.Server\StressStore.cs,StressStore,The following statement contains a magic number: foreach (var type in StressGen.Types) {  	for (int i = 0; i < 100; ++i) {  		var key = type + ":" + i;  		var value = StressGen.NextValue (type);  		if (value != null)  			Store.TryAdd (key' value);  		else  			Console.WriteLine ("Null value");  	}  }  
Magic Number,Stress.Server,StressStore,C:\repos\Kelindar_spike-bench\Stress.Server\StressStore.cs,StressStore,The following statement contains a magic number: for (int i = 0; i < 100; ++i) {  	var key = type + ":" + i;  	var value = StressGen.NextValue (type);  	if (value != null)  		Store.TryAdd (key' value);  	else  		Console.WriteLine ("Null value");  }  
Magic Number,Stress.Server,StressStore,C:\repos\Kelindar_spike-bench\Stress.Server\StressStore.cs,TryCheck,The following statement contains a magic number: try {  	if (correct is System.Byte)  		return Convert.ToByte (value) == Convert.ToByte (correct);  	if (correct is System.Int16)  		return Convert.ToInt16 (value) == Convert.ToInt16 (correct);  	if (correct is System.UInt16)  		return Convert.ToUInt16 (value) == Convert.ToUInt16 (correct);  	if (correct is System.Int32)  		return Convert.ToInt32 (value) == Convert.ToInt32 (correct);  	if (correct is System.UInt32)  		return Convert.ToUInt32 (value) == Convert.ToUInt32 (correct);  	if (correct is System.Int64)  		return Convert.ToInt64 (value) == Convert.ToInt64 (correct);  	if (correct is System.UInt64)  		return Convert.ToUInt64 (value) == Convert.ToUInt64 (correct);  	if (correct is System.Single)  		return Math.Abs (Convert.ToSingle (value) - Convert.ToSingle (correct)) < 0.001;  	if (correct is System.Double)  		return Math.Abs (Convert.ToDouble (value) - Convert.ToDouble (correct)) < 0.001;  	return correct.Equals (value);  }  catch (Exception ex) {  	Service.Logger.Log (ex);  	return false;  }  
Magic Number,Stress.Server,StressStore,C:\repos\Kelindar_spike-bench\Stress.Server\StressStore.cs,TryCheck,The following statement contains a magic number: try {  	if (correct is System.Byte)  		return Convert.ToByte (value) == Convert.ToByte (correct);  	if (correct is System.Int16)  		return Convert.ToInt16 (value) == Convert.ToInt16 (correct);  	if (correct is System.UInt16)  		return Convert.ToUInt16 (value) == Convert.ToUInt16 (correct);  	if (correct is System.Int32)  		return Convert.ToInt32 (value) == Convert.ToInt32 (correct);  	if (correct is System.UInt32)  		return Convert.ToUInt32 (value) == Convert.ToUInt32 (correct);  	if (correct is System.Int64)  		return Convert.ToInt64 (value) == Convert.ToInt64 (correct);  	if (correct is System.UInt64)  		return Convert.ToUInt64 (value) == Convert.ToUInt64 (correct);  	if (correct is System.Single)  		return Math.Abs (Convert.ToSingle (value) - Convert.ToSingle (correct)) < 0.001;  	if (correct is System.Double)  		return Math.Abs (Convert.ToDouble (value) - Convert.ToDouble (correct)) < 0.001;  	return correct.Equals (value);  }  catch (Exception ex) {  	Service.Logger.Log (ex);  	return false;  }  
Magic Number,Stress.Server,StressStore,C:\repos\Kelindar_spike-bench\Stress.Server\StressStore.cs,TryCheck,The following statement contains a magic number: if (correct is System.Single)  	return Math.Abs (Convert.ToSingle (value) - Convert.ToSingle (correct)) < 0.001;  
Magic Number,Stress.Server,StressStore,C:\repos\Kelindar_spike-bench\Stress.Server\StressStore.cs,TryCheck,The following statement contains a magic number: return Math.Abs (Convert.ToSingle (value) - Convert.ToSingle (correct)) < 0.001;  
Magic Number,Stress.Server,StressStore,C:\repos\Kelindar_spike-bench\Stress.Server\StressStore.cs,TryCheck,The following statement contains a magic number: if (correct is System.Double)  	return Math.Abs (Convert.ToDouble (value) - Convert.ToDouble (correct)) < 0.001;  
Magic Number,Stress.Server,StressStore,C:\repos\Kelindar_spike-bench\Stress.Server\StressStore.cs,TryCheck,The following statement contains a magic number: return Math.Abs (Convert.ToDouble (value) - Convert.ToDouble (correct)) < 0.001;  
