Implementation smell,Namespace,Class,File,Method,Description
Long Method,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The method has 113 lines of code.
Complex Method,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,VelocityPaint,Cyclomatic complexity of the method is 13
Complex Method,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,ProcessCurves,Cyclomatic complexity of the method is 20
Complex Method,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,Cyclomatic complexity of the method is 14
Complex Method,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,Cyclomatic complexity of the method is 9
Complex Method,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,Cyclomatic complexity of the method is 10
Complex Method,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,Cyclomatic complexity of the method is 48
Complex Method,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,ReanalyzeSessionsForRuns,Cyclomatic complexity of the method is 20
Complex Method,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,OpenSession,Cyclomatic complexity of the method is 8
Complex Method,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,Cyclomatic complexity of the method is 18
Complex Method,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,Cyclomatic complexity of the method is 14
Long Statement,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,VelocityPaint,The length of the statement  "			points [x] = new Point (x' (int)Math.Round (this.velocityTape.Height - (processedMPH [i] [x] - lowestMph + mphBorder) * vertInc)); " is 130.
Long Statement,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,VelocityPaint,The length of the statement  "		int yPos = (int)Math.Round (this.velocityTape.Height - (processedMPH [i] [xClicked] - lowestMph + mphBorder) * vertInc); " is 120.
Long Statement,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,VelocityPaint,The length of the statement  "		e.Graphics.DrawString (Math.Round (processedMPH [i] [xClicked]' 1).ToString ()' gridFont' new SolidBrush (lap.color)' xClicked' yPos - gridFont.Height); " is 152.
Long Statement,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The length of the statement  "			points [x] = new Point (x' (int)Math.Round (offsetBase - (processedTime [i] [x] - processedTime [basisLap] [x]) * vertInc)); " is 124.
Long Statement,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The length of the statement  "	e.Graphics.DrawString (Math.Round (lowestOffset' 3).ToString ()' DefaultFont' new SolidBrush (Color.Gray)' 0' deltaTape.Height - DefaultFont.Height); " is 149.
Long Statement,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The length of the statement  "		int yPos = (int)Math.Round (offsetBase - (processedTime [i] [xClicked] - processedTime [basisLap] [xClicked]) * vertInc); " is 121.
Long Statement,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The length of the statement  "		e.Graphics.DrawString (Math.Round (processedTime [i] [xClicked] - processedTime [basisLap] [xClicked]' 3).ToString ()' DefaultFont' new SolidBrush (lap.color)' xClicked' yPos - DefaultFont.Height); " is 197.
Long Statement,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,ProcessCurves,The length of the statement  "				time = (float)(t * (lap.lapPoints [nextIndex].time - baseTime).TotalSeconds + (1 - t) * (lap.lapPoints [lastIndex].time - baseTime).TotalSeconds); " is 146.
Long Statement,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The length of the statement  "			GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005); " is 141.
Long Statement,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The length of the statement  "				GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005); " is 214.
Long Statement,SoloFaster,OpenSessionDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\OpenSessionDialog.cs,deleteSession_Click,The length of the statement  "	if (MessageBox.Show ("Are you sure you want to delete this session? This can not be undone."' "Delete Recorded Session?"' MessageBoxButtons.OKCancel) == System.Windows.Forms.DialogResult.Cancel) " is 194.
Long Statement,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The length of the statement  "			double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2); " is 133.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,MainForm_FormClosing,The length of the statement  "		if (MessageBox.Show ("You have unsaved data recorded.  Would you like to save this before exiting?"' "Save recorded data?"' MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes) " is 190.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,ClearAllLineModes,The length of the statement  "	analyzeSetStart.Enabled = analyzeSetFinish.Enabled = analyzeSetStartFinish.Enabled = analyzeAutoCalculateSF.Enabled = (openedSessions.Count > 0); " is 145.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,clearRecordingButton_Click,The length of the statement  "		if (MessageBox.Show ("There are unsaved recorded points.  Are you sure you want to clear all recorded points?"' "Clear All Recorded Points?"' MessageBoxButtons.OKCancel) == System.Windows.Forms.DialogResult.Cancel) " is 214.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The length of the statement  "		if (startLineStart != null && finishLineStart != null && startLineEnd != null && finishLineEnd != null && startLineStart.Equals (finishLineStart) && startLineEnd.Equals (finishLineEnd)) { " is 187.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The length of the statement  "			DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime (); " is 294.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The length of the statement  "				if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value)) " is 141.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The length of the statement  "						recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)"; " is 171.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The length of the statement  "				gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph"; " is 182.
Long Statement,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The length of the statement  "					TextReader tr = new StreamReader (new MemoryStream (new System.Text.UTF8Encoding ().GetBytes (collectedString.ToString ()))); " is 125.
Complex Conditional,SoloFaster,MathUtil,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MathUtil.cs,LineIntersection,The conditional expression  "(s >= 0) && (s <= 1) && (t >= 0) && (t <= 1)"  is complex.
Complex Conditional,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The conditional expression  "startLineStart != null && finishLineStart != null && startLineEnd != null && finishLineEnd != null && startLineStart.Equals (finishLineStart) && startLineEnd.Equals (finishLineEnd)"  is complex.
Complex Conditional,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The conditional expression  "(!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value)"  is complex.
Empty Catch Block,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The method has an empty catch block.
Empty Catch Block,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,LoadSettings,The method has an empty catch block.
Empty Catch Block,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,FindGPSThread,The method has an empty catch block.
Empty Catch Block,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,TestGPSPort,The method has an empty catch block.
Magic Number,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The following statement contains a magic number: if (laps == null || laps.Count < 2)  	return;  
Magic Number,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The following statement contains a magic number: e.Graphics.DrawString (Math.Round (highestOffset' 3).ToString ()' DefaultFont' new SolidBrush (Color.Gray)' 0' 0);  
Magic Number,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The following statement contains a magic number: e.Graphics.DrawString (Math.Round (lowestOffset' 3).ToString ()' DefaultFont' new SolidBrush (Color.Gray)' 0' deltaTape.Height - DefaultFont.Height);  
Magic Number,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The following statement contains a magic number: for (int i = 0; i < laps.Count; i++) {  	ProcessedLap lap = laps [i];  	if (!lap.enabled)  		continue;  	int yPos = (int)Math.Round (offsetBase - (processedTime [i] [xClicked] - processedTime [basisLap] [xClicked]) * vertInc);  	e.Graphics.DrawString (Math.Round (processedTime [i] [xClicked] - processedTime [basisLap] [xClicked]' 3).ToString ()' DefaultFont' new SolidBrush (lap.color)' xClicked' yPos - DefaultFont.Height);  }  
Magic Number,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,DeltaPaint,The following statement contains a magic number: e.Graphics.DrawString (Math.Round (processedTime [i] [xClicked] - processedTime [basisLap] [xClicked]' 3).ToString ()' DefaultFont' new SolidBrush (lap.color)' xClicked' yPos - DefaultFont.Height);  
Magic Number,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,ProcessCurves,The following statement contains a magic number: lowestMph = 200;  
Magic Number,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,SetLaps,The following statement contains a magic number: if (xClicked == 0) {  	xClicked = this.Width / 2;  	UpdateXOutput ();  }  
Magic Number,SoloFaster,AnalysisTape,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AnalysisTape.cs,SetLaps,The following statement contains a magic number: xClicked = this.Width / 2;  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,AutoCalcDialog_Shown,The following statement contains a magic number: foreach (OpenedSession session in sessions)  	max += session.session.gpsPoints.Count - 2;  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,AutoCalcDialog_Shown,The following statement contains a magic number: max += session.session.gpsPoints.Count - 2;  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: foreach (OpenedSession session in sessions) {  	//Only do 1/100th of the points for speed reasons...  Damn n^3 algorithms...  	int incrementer = (session.session.gpsPoints.Count / 100);  	if (incrementer < 1)  		incrementer = 1;  	//Walk the start and finish through to the other end of the run until the most sessions line up.  	for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  		GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  		for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  			GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  			int working = 1;  			//Walk through each session to see if they intersect  			foreach (OpenedSession testSession in sessions) {  				if (testSession == session)  					continue;  				GPSPoint lastPoint = null;  				bool foundStart = false' foundFinish = false;  				for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  					GPSPoint newPoint = testSession.session.gpsPoints [h];  					if (lastPoint != null) {  						//check to see if we've crossed a start or finish line  						if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  							foundStart = true;  						//Can only cross the finish if we've already crossed the start  						if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  							foundFinish = true;  						//If we've found both already' skip out of this one  						if (foundStart && foundFinish)  							break;  					}  					lastPoint = newPoint;  				}  				if (foundStart && foundFinish)  					working++;  			}  			//See if either start or finish is better than the previous record  			int testPoints = session.session.gpsPoints.Count - s - f;  			if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  				bestStart = testStart;  				bestFinish = testFinish;  				bestWorking = working;  				bestPoints = testPoints;  			}  		}  		this.Invoke (new ThreadStart (delegate () {  			this.progressBar1.Value = lastCounter + s;  		}));  	}  	lastCounter += session.session.gpsPoints.Count - 2;  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: foreach (OpenedSession session in sessions) {  	//Only do 1/100th of the points for speed reasons...  Damn n^3 algorithms...  	int incrementer = (session.session.gpsPoints.Count / 100);  	if (incrementer < 1)  		incrementer = 1;  	//Walk the start and finish through to the other end of the run until the most sessions line up.  	for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  		GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  		for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  			GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  			int working = 1;  			//Walk through each session to see if they intersect  			foreach (OpenedSession testSession in sessions) {  				if (testSession == session)  					continue;  				GPSPoint lastPoint = null;  				bool foundStart = false' foundFinish = false;  				for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  					GPSPoint newPoint = testSession.session.gpsPoints [h];  					if (lastPoint != null) {  						//check to see if we've crossed a start or finish line  						if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  							foundStart = true;  						//Can only cross the finish if we've already crossed the start  						if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  							foundFinish = true;  						//If we've found both already' skip out of this one  						if (foundStart && foundFinish)  							break;  					}  					lastPoint = newPoint;  				}  				if (foundStart && foundFinish)  					working++;  			}  			//See if either start or finish is better than the previous record  			int testPoints = session.session.gpsPoints.Count - s - f;  			if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  				bestStart = testStart;  				bestFinish = testFinish;  				bestWorking = working;  				bestPoints = testPoints;  			}  		}  		this.Invoke (new ThreadStart (delegate () {  			this.progressBar1.Value = lastCounter + s;  		}));  	}  	lastCounter += session.session.gpsPoints.Count - 2;  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: foreach (OpenedSession session in sessions) {  	//Only do 1/100th of the points for speed reasons...  Damn n^3 algorithms...  	int incrementer = (session.session.gpsPoints.Count / 100);  	if (incrementer < 1)  		incrementer = 1;  	//Walk the start and finish through to the other end of the run until the most sessions line up.  	for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  		GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  		for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  			GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  			int working = 1;  			//Walk through each session to see if they intersect  			foreach (OpenedSession testSession in sessions) {  				if (testSession == session)  					continue;  				GPSPoint lastPoint = null;  				bool foundStart = false' foundFinish = false;  				for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  					GPSPoint newPoint = testSession.session.gpsPoints [h];  					if (lastPoint != null) {  						//check to see if we've crossed a start or finish line  						if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  							foundStart = true;  						//Can only cross the finish if we've already crossed the start  						if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  							foundFinish = true;  						//If we've found both already' skip out of this one  						if (foundStart && foundFinish)  							break;  					}  					lastPoint = newPoint;  				}  				if (foundStart && foundFinish)  					working++;  			}  			//See if either start or finish is better than the previous record  			int testPoints = session.session.gpsPoints.Count - s - f;  			if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  				bestStart = testStart;  				bestFinish = testFinish;  				bestWorking = working;  				bestPoints = testPoints;  			}  		}  		this.Invoke (new ThreadStart (delegate () {  			this.progressBar1.Value = lastCounter + s;  		}));  	}  	lastCounter += session.session.gpsPoints.Count - 2;  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: foreach (OpenedSession session in sessions) {  	//Only do 1/100th of the points for speed reasons...  Damn n^3 algorithms...  	int incrementer = (session.session.gpsPoints.Count / 100);  	if (incrementer < 1)  		incrementer = 1;  	//Walk the start and finish through to the other end of the run until the most sessions line up.  	for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  		GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  		for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  			GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  			int working = 1;  			//Walk through each session to see if they intersect  			foreach (OpenedSession testSession in sessions) {  				if (testSession == session)  					continue;  				GPSPoint lastPoint = null;  				bool foundStart = false' foundFinish = false;  				for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  					GPSPoint newPoint = testSession.session.gpsPoints [h];  					if (lastPoint != null) {  						//check to see if we've crossed a start or finish line  						if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  							foundStart = true;  						//Can only cross the finish if we've already crossed the start  						if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  							foundFinish = true;  						//If we've found both already' skip out of this one  						if (foundStart && foundFinish)  							break;  					}  					lastPoint = newPoint;  				}  				if (foundStart && foundFinish)  					working++;  			}  			//See if either start or finish is better than the previous record  			int testPoints = session.session.gpsPoints.Count - s - f;  			if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  				bestStart = testStart;  				bestFinish = testFinish;  				bestWorking = working;  				bestPoints = testPoints;  			}  		}  		this.Invoke (new ThreadStart (delegate () {  			this.progressBar1.Value = lastCounter + s;  		}));  	}  	lastCounter += session.session.gpsPoints.Count - 2;  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: foreach (OpenedSession session in sessions) {  	//Only do 1/100th of the points for speed reasons...  Damn n^3 algorithms...  	int incrementer = (session.session.gpsPoints.Count / 100);  	if (incrementer < 1)  		incrementer = 1;  	//Walk the start and finish through to the other end of the run until the most sessions line up.  	for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  		GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  		for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  			GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  			int working = 1;  			//Walk through each session to see if they intersect  			foreach (OpenedSession testSession in sessions) {  				if (testSession == session)  					continue;  				GPSPoint lastPoint = null;  				bool foundStart = false' foundFinish = false;  				for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  					GPSPoint newPoint = testSession.session.gpsPoints [h];  					if (lastPoint != null) {  						//check to see if we've crossed a start or finish line  						if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  							foundStart = true;  						//Can only cross the finish if we've already crossed the start  						if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  							foundFinish = true;  						//If we've found both already' skip out of this one  						if (foundStart && foundFinish)  							break;  					}  					lastPoint = newPoint;  				}  				if (foundStart && foundFinish)  					working++;  			}  			//See if either start or finish is better than the previous record  			int testPoints = session.session.gpsPoints.Count - s - f;  			if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  				bestStart = testStart;  				bestFinish = testFinish;  				bestWorking = working;  				bestPoints = testPoints;  			}  		}  		this.Invoke (new ThreadStart (delegate () {  			this.progressBar1.Value = lastCounter + s;  		}));  	}  	lastCounter += session.session.gpsPoints.Count - 2;  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: foreach (OpenedSession session in sessions) {  	//Only do 1/100th of the points for speed reasons...  Damn n^3 algorithms...  	int incrementer = (session.session.gpsPoints.Count / 100);  	if (incrementer < 1)  		incrementer = 1;  	//Walk the start and finish through to the other end of the run until the most sessions line up.  	for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  		GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  		for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  			GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  			int working = 1;  			//Walk through each session to see if they intersect  			foreach (OpenedSession testSession in sessions) {  				if (testSession == session)  					continue;  				GPSPoint lastPoint = null;  				bool foundStart = false' foundFinish = false;  				for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  					GPSPoint newPoint = testSession.session.gpsPoints [h];  					if (lastPoint != null) {  						//check to see if we've crossed a start or finish line  						if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  							foundStart = true;  						//Can only cross the finish if we've already crossed the start  						if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  							foundFinish = true;  						//If we've found both already' skip out of this one  						if (foundStart && foundFinish)  							break;  					}  					lastPoint = newPoint;  				}  				if (foundStart && foundFinish)  					working++;  			}  			//See if either start or finish is better than the previous record  			int testPoints = session.session.gpsPoints.Count - s - f;  			if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  				bestStart = testStart;  				bestFinish = testFinish;  				bestWorking = working;  				bestPoints = testPoints;  			}  		}  		this.Invoke (new ThreadStart (delegate () {  			this.progressBar1.Value = lastCounter + s;  		}));  	}  	lastCounter += session.session.gpsPoints.Count - 2;  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: foreach (OpenedSession session in sessions) {  	//Only do 1/100th of the points for speed reasons...  Damn n^3 algorithms...  	int incrementer = (session.session.gpsPoints.Count / 100);  	if (incrementer < 1)  		incrementer = 1;  	//Walk the start and finish through to the other end of the run until the most sessions line up.  	for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  		GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  		for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  			GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  			int working = 1;  			//Walk through each session to see if they intersect  			foreach (OpenedSession testSession in sessions) {  				if (testSession == session)  					continue;  				GPSPoint lastPoint = null;  				bool foundStart = false' foundFinish = false;  				for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  					GPSPoint newPoint = testSession.session.gpsPoints [h];  					if (lastPoint != null) {  						//check to see if we've crossed a start or finish line  						if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  							foundStart = true;  						//Can only cross the finish if we've already crossed the start  						if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  							foundFinish = true;  						//If we've found both already' skip out of this one  						if (foundStart && foundFinish)  							break;  					}  					lastPoint = newPoint;  				}  				if (foundStart && foundFinish)  					working++;  			}  			//See if either start or finish is better than the previous record  			int testPoints = session.session.gpsPoints.Count - s - f;  			if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  				bestStart = testStart;  				bestFinish = testFinish;  				bestWorking = working;  				bestPoints = testPoints;  			}  		}  		this.Invoke (new ThreadStart (delegate () {  			this.progressBar1.Value = lastCounter + s;  		}));  	}  	lastCounter += session.session.gpsPoints.Count - 2;  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  	GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  	for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  		GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  		int working = 1;  		//Walk through each session to see if they intersect  		foreach (OpenedSession testSession in sessions) {  			if (testSession == session)  				continue;  			GPSPoint lastPoint = null;  			bool foundStart = false' foundFinish = false;  			for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  				GPSPoint newPoint = testSession.session.gpsPoints [h];  				if (lastPoint != null) {  					//check to see if we've crossed a start or finish line  					if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  						foundStart = true;  					//Can only cross the finish if we've already crossed the start  					if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  						foundFinish = true;  					//If we've found both already' skip out of this one  					if (foundStart && foundFinish)  						break;  				}  				lastPoint = newPoint;  			}  			if (foundStart && foundFinish)  				working++;  		}  		//See if either start or finish is better than the previous record  		int testPoints = session.session.gpsPoints.Count - s - f;  		if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  			bestStart = testStart;  			bestFinish = testFinish;  			bestWorking = working;  			bestPoints = testPoints;  		}  	}  	this.Invoke (new ThreadStart (delegate () {  		this.progressBar1.Value = lastCounter + s;  	}));  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  	GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  	for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  		GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  		int working = 1;  		//Walk through each session to see if they intersect  		foreach (OpenedSession testSession in sessions) {  			if (testSession == session)  				continue;  			GPSPoint lastPoint = null;  			bool foundStart = false' foundFinish = false;  			for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  				GPSPoint newPoint = testSession.session.gpsPoints [h];  				if (lastPoint != null) {  					//check to see if we've crossed a start or finish line  					if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  						foundStart = true;  					//Can only cross the finish if we've already crossed the start  					if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  						foundFinish = true;  					//If we've found both already' skip out of this one  					if (foundStart && foundFinish)  						break;  				}  				lastPoint = newPoint;  			}  			if (foundStart && foundFinish)  				working++;  		}  		//See if either start or finish is better than the previous record  		int testPoints = session.session.gpsPoints.Count - s - f;  		if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  			bestStart = testStart;  			bestFinish = testFinish;  			bestWorking = working;  			bestPoints = testPoints;  		}  	}  	this.Invoke (new ThreadStart (delegate () {  		this.progressBar1.Value = lastCounter + s;  	}));  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  	GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  	for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  		GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  		int working = 1;  		//Walk through each session to see if they intersect  		foreach (OpenedSession testSession in sessions) {  			if (testSession == session)  				continue;  			GPSPoint lastPoint = null;  			bool foundStart = false' foundFinish = false;  			for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  				GPSPoint newPoint = testSession.session.gpsPoints [h];  				if (lastPoint != null) {  					//check to see if we've crossed a start or finish line  					if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  						foundStart = true;  					//Can only cross the finish if we've already crossed the start  					if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  						foundFinish = true;  					//If we've found both already' skip out of this one  					if (foundStart && foundFinish)  						break;  				}  				lastPoint = newPoint;  			}  			if (foundStart && foundFinish)  				working++;  		}  		//See if either start or finish is better than the previous record  		int testPoints = session.session.gpsPoints.Count - s - f;  		if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  			bestStart = testStart;  			bestFinish = testFinish;  			bestWorking = working;  			bestPoints = testPoints;  		}  	}  	this.Invoke (new ThreadStart (delegate () {  		this.progressBar1.Value = lastCounter + s;  	}));  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  	GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  	for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  		GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  		int working = 1;  		//Walk through each session to see if they intersect  		foreach (OpenedSession testSession in sessions) {  			if (testSession == session)  				continue;  			GPSPoint lastPoint = null;  			bool foundStart = false' foundFinish = false;  			for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  				GPSPoint newPoint = testSession.session.gpsPoints [h];  				if (lastPoint != null) {  					//check to see if we've crossed a start or finish line  					if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  						foundStart = true;  					//Can only cross the finish if we've already crossed the start  					if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  						foundFinish = true;  					//If we've found both already' skip out of this one  					if (foundStart && foundFinish)  						break;  				}  				lastPoint = newPoint;  			}  			if (foundStart && foundFinish)  				working++;  		}  		//See if either start or finish is better than the previous record  		int testPoints = session.session.gpsPoints.Count - s - f;  		if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  			bestStart = testStart;  			bestFinish = testFinish;  			bestWorking = working;  			bestPoints = testPoints;  		}  	}  	this.Invoke (new ThreadStart (delegate () {  		this.progressBar1.Value = lastCounter + s;  	}));  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: for (int s = 0; s < session.session.gpsPoints.Count - 2; s += incrementer) {  	GPSPoint[] testStart = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [s + 1]' session.session.gpsPoints [s]' 0.00005);  	for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  		GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  		int working = 1;  		//Walk through each session to see if they intersect  		foreach (OpenedSession testSession in sessions) {  			if (testSession == session)  				continue;  			GPSPoint lastPoint = null;  			bool foundStart = false' foundFinish = false;  			for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  				GPSPoint newPoint = testSession.session.gpsPoints [h];  				if (lastPoint != null) {  					//check to see if we've crossed a start or finish line  					if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  						foundStart = true;  					//Can only cross the finish if we've already crossed the start  					if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  						foundFinish = true;  					//If we've found both already' skip out of this one  					if (foundStart && foundFinish)  						break;  				}  				lastPoint = newPoint;  			}  			if (foundStart && foundFinish)  				working++;  		}  		//See if either start or finish is better than the previous record  		int testPoints = session.session.gpsPoints.Count - s - f;  		if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  			bestStart = testStart;  			bestFinish = testFinish;  			bestWorking = working;  			bestPoints = testPoints;  		}  	}  	this.Invoke (new ThreadStart (delegate () {  		this.progressBar1.Value = lastCounter + s;  	}));  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  	GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  	int working = 1;  	//Walk through each session to see if they intersect  	foreach (OpenedSession testSession in sessions) {  		if (testSession == session)  			continue;  		GPSPoint lastPoint = null;  		bool foundStart = false' foundFinish = false;  		for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  			GPSPoint newPoint = testSession.session.gpsPoints [h];  			if (lastPoint != null) {  				//check to see if we've crossed a start or finish line  				if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  					foundStart = true;  				//Can only cross the finish if we've already crossed the start  				if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  					foundFinish = true;  				//If we've found both already' skip out of this one  				if (foundStart && foundFinish)  					break;  			}  			lastPoint = newPoint;  		}  		if (foundStart && foundFinish)  			working++;  	}  	//See if either start or finish is better than the previous record  	int testPoints = session.session.gpsPoints.Count - s - f;  	if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  		bestStart = testStart;  		bestFinish = testFinish;  		bestWorking = working;  		bestPoints = testPoints;  	}  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  	GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  	int working = 1;  	//Walk through each session to see if they intersect  	foreach (OpenedSession testSession in sessions) {  		if (testSession == session)  			continue;  		GPSPoint lastPoint = null;  		bool foundStart = false' foundFinish = false;  		for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  			GPSPoint newPoint = testSession.session.gpsPoints [h];  			if (lastPoint != null) {  				//check to see if we've crossed a start or finish line  				if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  					foundStart = true;  				//Can only cross the finish if we've already crossed the start  				if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  					foundFinish = true;  				//If we've found both already' skip out of this one  				if (foundStart && foundFinish)  					break;  			}  			lastPoint = newPoint;  		}  		if (foundStart && foundFinish)  			working++;  	}  	//See if either start or finish is better than the previous record  	int testPoints = session.session.gpsPoints.Count - s - f;  	if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  		bestStart = testStart;  		bestFinish = testFinish;  		bestWorking = working;  		bestPoints = testPoints;  	}  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: for (int f = 0; f < session.session.gpsPoints.Count - 2 - s; f += incrementer) {  	GPSPoint[] testFinish = MathUtil.CalculateLinePerpendicularToLine (session.session.gpsPoints [session.session.gpsPoints.Count - f - 2]' session.session.gpsPoints [session.session.gpsPoints.Count - f - 1]' 0.00005);  	int working = 1;  	//Walk through each session to see if they intersect  	foreach (OpenedSession testSession in sessions) {  		if (testSession == session)  			continue;  		GPSPoint lastPoint = null;  		bool foundStart = false' foundFinish = false;  		for (int h = 0; h < testSession.session.gpsPoints.Count; h++) {  			GPSPoint newPoint = testSession.session.gpsPoints [h];  			if (lastPoint != null) {  				//check to see if we've crossed a start or finish line  				if (!foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testStart [0]' testStart [1]))  					foundStart = true;  				//Can only cross the finish if we've already crossed the start  				if (foundStart && MathUtil.LineIntersects (lastPoint' newPoint' testFinish [0]' testFinish [1]))  					foundFinish = true;  				//If we've found both already' skip out of this one  				if (foundStart && foundFinish)  					break;  			}  			lastPoint = newPoint;  		}  		if (foundStart && foundFinish)  			working++;  	}  	//See if either start or finish is better than the previous record  	int testPoints = session.session.gpsPoints.Count - s - f;  	if (working > bestWorking || (working == bestWorking && testPoints > bestPoints)) {  		bestStart = testStart;  		bestFinish = testFinish;  		bestWorking = working;  		bestPoints = testPoints;  	}  }  
Magic Number,SoloFaster,AutoCalcDialog,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\AutoCalcDialog.cs,Calculate,The following statement contains a magic number: lastCounter += session.session.gpsPoints.Count - 2;  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,MapRenderBox_Paint,The following statement contains a magic number: if (draggingLine) {  	if (startPoint != null && endPoint != null)  		e.Graphics.DrawLine (new Pen (lineColor' 2)' ConvertPoint (startPoint)' ConvertPoint (endPoint));  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,MapRenderBox_Paint,The following statement contains a magic number: if (startPoint != null && endPoint != null)  	e.Graphics.DrawLine (new Pen (lineColor' 2)' ConvertPoint (startPoint)' ConvertPoint (endPoint));  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,MapRenderBox_Paint,The following statement contains a magic number: e.Graphics.DrawLine (new Pen (lineColor' 2)' ConvertPoint (startPoint)' ConvertPoint (endPoint));  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: if (pointsToShow.Count > 0) {  	foreach (GPSPoint point in pointsToShow) {  		if (point.lat > maxLat)  			maxLat = point.lat;  		if (point.lat < minLat)  			minLat = point.lat;  		if (point.lon > maxLong)  			maxLong = point.lon;  		if (point.lon < minLong)  			minLong = point.lon;  	}  	if (maxLat == minLat) {  		minLat -= 0.0000001;  		maxLat += 0.0000001;  	}  	if (maxLong == minLong) {  		minLong -= 0.0000001;  		maxLong += 0.0000001;  	}  	validPoints = true;  	RecalcRenderLats ();  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: if (pointsToShow.Count > 0) {  	foreach (GPSPoint point in pointsToShow) {  		if (point.lat > maxLat)  			maxLat = point.lat;  		if (point.lat < minLat)  			minLat = point.lat;  		if (point.lon > maxLong)  			maxLong = point.lon;  		if (point.lon < minLong)  			minLong = point.lon;  	}  	if (maxLat == minLat) {  		minLat -= 0.0000001;  		maxLat += 0.0000001;  	}  	if (maxLong == minLong) {  		minLong -= 0.0000001;  		maxLong += 0.0000001;  	}  	validPoints = true;  	RecalcRenderLats ();  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: if (pointsToShow.Count > 0) {  	foreach (GPSPoint point in pointsToShow) {  		if (point.lat > maxLat)  			maxLat = point.lat;  		if (point.lat < minLat)  			minLat = point.lat;  		if (point.lon > maxLong)  			maxLong = point.lon;  		if (point.lon < minLong)  			minLong = point.lon;  	}  	if (maxLat == minLat) {  		minLat -= 0.0000001;  		maxLat += 0.0000001;  	}  	if (maxLong == minLong) {  		minLong -= 0.0000001;  		maxLong += 0.0000001;  	}  	validPoints = true;  	RecalcRenderLats ();  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: if (pointsToShow.Count > 0) {  	foreach (GPSPoint point in pointsToShow) {  		if (point.lat > maxLat)  			maxLat = point.lat;  		if (point.lat < minLat)  			minLat = point.lat;  		if (point.lon > maxLong)  			maxLong = point.lon;  		if (point.lon < minLong)  			minLong = point.lon;  	}  	if (maxLat == minLat) {  		minLat -= 0.0000001;  		maxLat += 0.0000001;  	}  	if (maxLong == minLong) {  		minLong -= 0.0000001;  		maxLong += 0.0000001;  	}  	validPoints = true;  	RecalcRenderLats ();  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: if (maxLat == minLat) {  	minLat -= 0.0000001;  	maxLat += 0.0000001;  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: if (maxLat == minLat) {  	minLat -= 0.0000001;  	maxLat += 0.0000001;  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: minLat -= 0.0000001;  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: maxLat += 0.0000001;  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: if (maxLong == minLong) {  	minLong -= 0.0000001;  	maxLong += 0.0000001;  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: if (maxLong == minLong) {  	minLong -= 0.0000001;  	maxLong += 0.0000001;  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: minLong -= 0.0000001;  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,Recenter,The following statement contains a magic number: maxLong += 0.0000001;  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,RecalcRenderLats,The following statement contains a magic number: if (latScale >= lonScale) {  	renderScale = lonScale;  	double latAvg = (renderMinLat + renderMaxLat) / 2;  	double latDiff = (this.Height / 2) / renderScale;  	renderMinLat = latAvg - latDiff;  	renderMaxLat = latAvg + latDiff;  }  else {  	renderScale = latScale;  	double lonAvg = (renderMinLong + renderMaxLong) / 2;  	double lonDiff = (this.Width / 2) / renderScale;  	renderMinLong = lonAvg - lonDiff;  	renderMaxLong = lonAvg + lonDiff;  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,RecalcRenderLats,The following statement contains a magic number: if (latScale >= lonScale) {  	renderScale = lonScale;  	double latAvg = (renderMinLat + renderMaxLat) / 2;  	double latDiff = (this.Height / 2) / renderScale;  	renderMinLat = latAvg - latDiff;  	renderMaxLat = latAvg + latDiff;  }  else {  	renderScale = latScale;  	double lonAvg = (renderMinLong + renderMaxLong) / 2;  	double lonDiff = (this.Width / 2) / renderScale;  	renderMinLong = lonAvg - lonDiff;  	renderMaxLong = lonAvg + lonDiff;  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,RecalcRenderLats,The following statement contains a magic number: if (latScale >= lonScale) {  	renderScale = lonScale;  	double latAvg = (renderMinLat + renderMaxLat) / 2;  	double latDiff = (this.Height / 2) / renderScale;  	renderMinLat = latAvg - latDiff;  	renderMaxLat = latAvg + latDiff;  }  else {  	renderScale = latScale;  	double lonAvg = (renderMinLong + renderMaxLong) / 2;  	double lonDiff = (this.Width / 2) / renderScale;  	renderMinLong = lonAvg - lonDiff;  	renderMaxLong = lonAvg + lonDiff;  }  
Magic Number,SoloFaster,MapRenderBox,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MapRenderBox.cs,RecalcRenderLats,The following statement contains a magic number: if (latScale >= lonScale) {  	renderScale = lonScale;  	double latAvg = (renderMinLat + renderMaxLat) / 2;  	double latDiff = (this.Height / 2) / renderScale;  	renderMinLat = latAvg - latDiff;  	renderMaxLat = latAvg + latDiff;  }  else {  	renderScale = latScale;  	double lonAvg = (renderMinLong + renderMaxLong) / 2;  	double lonDiff = (this.Width / 2) / renderScale;  	renderMinLong = lonAvg - lonDiff;  	renderMaxLong = lonAvg + lonDiff;  }  
Magic Number,SoloFaster,MathUtil,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MathUtil.cs,LineIntersection,The following statement contains a magic number: if (denom == 0)  	denom += 0.0000000001;  
Magic Number,SoloFaster,MathUtil,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MathUtil.cs,LineIntersection,The following statement contains a magic number: denom += 0.0000000001;  
Magic Number,SoloFaster,MathUtil,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MathUtil.cs,LineIntersects,The following statement contains a magic number: if (denom == 0)  	denom += 0.0000000001;  
Magic Number,SoloFaster,MathUtil,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MathUtil.cs,LineIntersects,The following statement contains a magic number: denom += 0.0000000001;  
Magic Number,SoloFaster,MathUtil,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MathUtil.cs,CalculateLinePerpendicularToLine,The following statement contains a magic number: travelAngle += Math.PI / 2;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,GPS,The following statement contains a magic number: serialPort.DataBits = 8;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (running) {  	byte[] buffer = new byte[1000];  	try {  		int recvd = serialPort.Read (buffer' 0' 1000);  		if (recvd > 0) {  			//Add it to the current buffer string  			comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  			while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  				//Trim off starting garbage  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  				//Make sure we still have a message  				if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  					continue;  				//Grab message and checksum and trim message off stack.  				string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  				string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  				//Check checksum...  				try {  					int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  					byte checkSumCheck = 0;  					foreach (char chr in message)  						checkSumCheck ^= Convert.ToByte (chr);  					if (checkSumCheck == checkSumVal)  						ProcessMessage (message);  				}  				catch {  				}  			}  		}  	}  	catch (IOException) {  		//serialPort closed out from under us  		return;  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (running) {  	byte[] buffer = new byte[1000];  	try {  		int recvd = serialPort.Read (buffer' 0' 1000);  		if (recvd > 0) {  			//Add it to the current buffer string  			comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  			while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  				//Trim off starting garbage  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  				//Make sure we still have a message  				if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  					continue;  				//Grab message and checksum and trim message off stack.  				string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  				string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  				//Check checksum...  				try {  					int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  					byte checkSumCheck = 0;  					foreach (char chr in message)  						checkSumCheck ^= Convert.ToByte (chr);  					if (checkSumCheck == checkSumVal)  						ProcessMessage (message);  				}  				catch {  				}  			}  		}  	}  	catch (IOException) {  		//serialPort closed out from under us  		return;  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (running) {  	byte[] buffer = new byte[1000];  	try {  		int recvd = serialPort.Read (buffer' 0' 1000);  		if (recvd > 0) {  			//Add it to the current buffer string  			comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  			while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  				//Trim off starting garbage  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  				//Make sure we still have a message  				if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  					continue;  				//Grab message and checksum and trim message off stack.  				string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  				string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  				//Check checksum...  				try {  					int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  					byte checkSumCheck = 0;  					foreach (char chr in message)  						checkSumCheck ^= Convert.ToByte (chr);  					if (checkSumCheck == checkSumVal)  						ProcessMessage (message);  				}  				catch {  				}  			}  		}  	}  	catch (IOException) {  		//serialPort closed out from under us  		return;  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (running) {  	byte[] buffer = new byte[1000];  	try {  		int recvd = serialPort.Read (buffer' 0' 1000);  		if (recvd > 0) {  			//Add it to the current buffer string  			comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  			while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  				//Trim off starting garbage  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  				//Make sure we still have a message  				if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  					continue;  				//Grab message and checksum and trim message off stack.  				string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  				string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  				//Check checksum...  				try {  					int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  					byte checkSumCheck = 0;  					foreach (char chr in message)  						checkSumCheck ^= Convert.ToByte (chr);  					if (checkSumCheck == checkSumVal)  						ProcessMessage (message);  				}  				catch {  				}  			}  		}  	}  	catch (IOException) {  		//serialPort closed out from under us  		return;  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (running) {  	byte[] buffer = new byte[1000];  	try {  		int recvd = serialPort.Read (buffer' 0' 1000);  		if (recvd > 0) {  			//Add it to the current buffer string  			comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  			while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  				//Trim off starting garbage  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  				//Make sure we still have a message  				if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  					continue;  				//Grab message and checksum and trim message off stack.  				string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  				string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  				//Check checksum...  				try {  					int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  					byte checkSumCheck = 0;  					foreach (char chr in message)  						checkSumCheck ^= Convert.ToByte (chr);  					if (checkSumCheck == checkSumVal)  						ProcessMessage (message);  				}  				catch {  				}  			}  		}  	}  	catch (IOException) {  		//serialPort closed out from under us  		return;  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (running) {  	byte[] buffer = new byte[1000];  	try {  		int recvd = serialPort.Read (buffer' 0' 1000);  		if (recvd > 0) {  			//Add it to the current buffer string  			comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  			while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  				//Trim off starting garbage  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  				//Make sure we still have a message  				if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  					continue;  				//Grab message and checksum and trim message off stack.  				string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  				string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  				//Check checksum...  				try {  					int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  					byte checkSumCheck = 0;  					foreach (char chr in message)  						checkSumCheck ^= Convert.ToByte (chr);  					if (checkSumCheck == checkSumVal)  						ProcessMessage (message);  				}  				catch {  				}  			}  		}  	}  	catch (IOException) {  		//serialPort closed out from under us  		return;  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (running) {  	byte[] buffer = new byte[1000];  	try {  		int recvd = serialPort.Read (buffer' 0' 1000);  		if (recvd > 0) {  			//Add it to the current buffer string  			comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  			while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  				//Trim off starting garbage  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  				//Make sure we still have a message  				if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  					continue;  				//Grab message and checksum and trim message off stack.  				string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  				string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  				comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  				//Check checksum...  				try {  					int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  					byte checkSumCheck = 0;  					foreach (char chr in message)  						checkSumCheck ^= Convert.ToByte (chr);  					if (checkSumCheck == checkSumVal)  						ProcessMessage (message);  				}  				catch {  				}  			}  		}  	}  	catch (IOException) {  		//serialPort closed out from under us  		return;  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: try {  	int recvd = serialPort.Read (buffer' 0' 1000);  	if (recvd > 0) {  		//Add it to the current buffer string  		comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  		while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  			//Trim off starting garbage  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  			//Make sure we still have a message  			if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  				continue;  			//Grab message and checksum and trim message off stack.  			string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  			string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  			//Check checksum...  			try {  				int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  				byte checkSumCheck = 0;  				foreach (char chr in message)  					checkSumCheck ^= Convert.ToByte (chr);  				if (checkSumCheck == checkSumVal)  					ProcessMessage (message);  			}  			catch {  			}  		}  	}  }  catch (IOException) {  	//serialPort closed out from under us  	return;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: try {  	int recvd = serialPort.Read (buffer' 0' 1000);  	if (recvd > 0) {  		//Add it to the current buffer string  		comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  		while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  			//Trim off starting garbage  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  			//Make sure we still have a message  			if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  				continue;  			//Grab message and checksum and trim message off stack.  			string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  			string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  			//Check checksum...  			try {  				int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  				byte checkSumCheck = 0;  				foreach (char chr in message)  					checkSumCheck ^= Convert.ToByte (chr);  				if (checkSumCheck == checkSumVal)  					ProcessMessage (message);  			}  			catch {  			}  		}  	}  }  catch (IOException) {  	//serialPort closed out from under us  	return;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: try {  	int recvd = serialPort.Read (buffer' 0' 1000);  	if (recvd > 0) {  		//Add it to the current buffer string  		comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  		while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  			//Trim off starting garbage  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  			//Make sure we still have a message  			if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  				continue;  			//Grab message and checksum and trim message off stack.  			string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  			string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  			//Check checksum...  			try {  				int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  				byte checkSumCheck = 0;  				foreach (char chr in message)  					checkSumCheck ^= Convert.ToByte (chr);  				if (checkSumCheck == checkSumVal)  					ProcessMessage (message);  			}  			catch {  			}  		}  	}  }  catch (IOException) {  	//serialPort closed out from under us  	return;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: try {  	int recvd = serialPort.Read (buffer' 0' 1000);  	if (recvd > 0) {  		//Add it to the current buffer string  		comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  		while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  			//Trim off starting garbage  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  			//Make sure we still have a message  			if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  				continue;  			//Grab message and checksum and trim message off stack.  			string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  			string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  			//Check checksum...  			try {  				int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  				byte checkSumCheck = 0;  				foreach (char chr in message)  					checkSumCheck ^= Convert.ToByte (chr);  				if (checkSumCheck == checkSumVal)  					ProcessMessage (message);  			}  			catch {  			}  		}  	}  }  catch (IOException) {  	//serialPort closed out from under us  	return;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: try {  	int recvd = serialPort.Read (buffer' 0' 1000);  	if (recvd > 0) {  		//Add it to the current buffer string  		comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  		while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  			//Trim off starting garbage  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  			//Make sure we still have a message  			if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  				continue;  			//Grab message and checksum and trim message off stack.  			string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  			string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  			//Check checksum...  			try {  				int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  				byte checkSumCheck = 0;  				foreach (char chr in message)  					checkSumCheck ^= Convert.ToByte (chr);  				if (checkSumCheck == checkSumVal)  					ProcessMessage (message);  			}  			catch {  			}  		}  	}  }  catch (IOException) {  	//serialPort closed out from under us  	return;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: try {  	int recvd = serialPort.Read (buffer' 0' 1000);  	if (recvd > 0) {  		//Add it to the current buffer string  		comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  		while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  			//Trim off starting garbage  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  			//Make sure we still have a message  			if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  				continue;  			//Grab message and checksum and trim message off stack.  			string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  			string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  			comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  			//Check checksum...  			try {  				int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  				byte checkSumCheck = 0;  				foreach (char chr in message)  					checkSumCheck ^= Convert.ToByte (chr);  				if (checkSumCheck == checkSumVal)  					ProcessMessage (message);  			}  			catch {  			}  		}  	}  }  catch (IOException) {  	//serialPort closed out from under us  	return;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: if (recvd > 0) {  	//Add it to the current buffer string  	comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  	while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  		//Trim off starting garbage  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  		//Make sure we still have a message  		if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  			continue;  		//Grab message and checksum and trim message off stack.  		string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  		string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  		//Check checksum...  		try {  			int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  			byte checkSumCheck = 0;  			foreach (char chr in message)  				checkSumCheck ^= Convert.ToByte (chr);  			if (checkSumCheck == checkSumVal)  				ProcessMessage (message);  		}  		catch {  		}  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: if (recvd > 0) {  	//Add it to the current buffer string  	comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  	while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  		//Trim off starting garbage  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  		//Make sure we still have a message  		if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  			continue;  		//Grab message and checksum and trim message off stack.  		string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  		string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  		//Check checksum...  		try {  			int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  			byte checkSumCheck = 0;  			foreach (char chr in message)  				checkSumCheck ^= Convert.ToByte (chr);  			if (checkSumCheck == checkSumVal)  				ProcessMessage (message);  		}  		catch {  		}  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: if (recvd > 0) {  	//Add it to the current buffer string  	comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  	while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  		//Trim off starting garbage  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  		//Make sure we still have a message  		if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  			continue;  		//Grab message and checksum and trim message off stack.  		string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  		string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  		//Check checksum...  		try {  			int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  			byte checkSumCheck = 0;  			foreach (char chr in message)  				checkSumCheck ^= Convert.ToByte (chr);  			if (checkSumCheck == checkSumVal)  				ProcessMessage (message);  		}  		catch {  		}  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: if (recvd > 0) {  	//Add it to the current buffer string  	comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  	while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  		//Trim off starting garbage  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  		//Make sure we still have a message  		if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  			continue;  		//Grab message and checksum and trim message off stack.  		string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  		string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  		//Check checksum...  		try {  			int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  			byte checkSumCheck = 0;  			foreach (char chr in message)  				checkSumCheck ^= Convert.ToByte (chr);  			if (checkSumCheck == checkSumVal)  				ProcessMessage (message);  		}  		catch {  		}  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: if (recvd > 0) {  	//Add it to the current buffer string  	comBuffer += asciiEncoding.GetString (buffer' 0' (int)recvd);  	while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  		//Trim off starting garbage  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  		//Make sure we still have a message  		if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  			continue;  		//Grab message and checksum and trim message off stack.  		string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  		string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  		comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  		//Check checksum...  		try {  			int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  			byte checkSumCheck = 0;  			foreach (char chr in message)  				checkSumCheck ^= Convert.ToByte (chr);  			if (checkSumCheck == checkSumVal)  				ProcessMessage (message);  		}  		catch {  		}  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  	//Trim off starting garbage  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  	//Make sure we still have a message  	if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  		continue;  	//Grab message and checksum and trim message off stack.  	string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  	string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  	//Check checksum...  	try {  		int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  		byte checkSumCheck = 0;  		foreach (char chr in message)  			checkSumCheck ^= Convert.ToByte (chr);  		if (checkSumCheck == checkSumVal)  			ProcessMessage (message);  	}  	catch {  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  	//Trim off starting garbage  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  	//Make sure we still have a message  	if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  		continue;  	//Grab message and checksum and trim message off stack.  	string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  	string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  	//Check checksum...  	try {  		int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  		byte checkSumCheck = 0;  		foreach (char chr in message)  			checkSumCheck ^= Convert.ToByte (chr);  		if (checkSumCheck == checkSumVal)  			ProcessMessage (message);  	}  	catch {  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  	//Trim off starting garbage  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  	//Make sure we still have a message  	if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  		continue;  	//Grab message and checksum and trim message off stack.  	string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  	string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  	//Check checksum...  	try {  		int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  		byte checkSumCheck = 0;  		foreach (char chr in message)  			checkSumCheck ^= Convert.ToByte (chr);  		if (checkSumCheck == checkSumVal)  			ProcessMessage (message);  	}  	catch {  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  	//Trim off starting garbage  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  	//Make sure we still have a message  	if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  		continue;  	//Grab message and checksum and trim message off stack.  	string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  	string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  	//Check checksum...  	try {  		int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  		byte checkSumCheck = 0;  		foreach (char chr in message)  			checkSumCheck ^= Convert.ToByte (chr);  		if (checkSumCheck == checkSumVal)  			ProcessMessage (message);  	}  	catch {  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: while (comBuffer.Contains ('$') && comBuffer.Contains ('*') && comBuffer.Length >= comBuffer.IndexOf ('*') + 3) {  	//Trim off starting garbage  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ("$") + 1);  	//Make sure we still have a message  	if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  		continue;  	//Grab message and checksum and trim message off stack.  	string message = comBuffer.Substring (0' comBuffer.IndexOf ('*'));  	string checkSumHex = comBuffer.Substring (comBuffer.IndexOf ('*') + 1' 2);  	comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  	//Check checksum...  	try {  		int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  		byte checkSumCheck = 0;  		foreach (char chr in message)  			checkSumCheck ^= Convert.ToByte (chr);  		if (checkSumCheck == checkSumVal)  			ProcessMessage (message);  	}  	catch {  	}  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: if (!comBuffer.Contains ('*') || comBuffer.Length < comBuffer.IndexOf ('*') + 3)  	continue;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: comBuffer = comBuffer.Substring (comBuffer.IndexOf ('*') + 3);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,RunThread,The following statement contains a magic number: try {  	int checkSumVal = Convert.ToInt32 (checkSumHex' 16);  	byte checkSumCheck = 0;  	foreach (char chr in message)  		checkSumCheck ^= Convert.ToByte (chr);  	if (checkSumCheck == checkSumVal)  		ProcessMessage (message);  }  catch {  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: fixActive = (MessageData [2] == "A");  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [8] != "")  	bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [8] != "")  	bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < numParse; i++) {  	if (MessageData [4 + 4 * i] == "")  		continue;  	//Valid satellite  	GPSSatellite sat = new GPSSatellite ();  	sat.num = int.Parse (MessageData [4 + 4 * i]);  	if (MessageData [4 + 4 * i + 1] != "")  		sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  	if (MessageData [4 + 4 * i + 2] != "")  		sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  	if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  		sat.signalStrength = 0;  	else {  		string ss = MessageData [4 + 4 * i + 3];  		if (ss.Contains ('*'))  			ss = ss.Substring (0' ss.IndexOf ('*'));  		if (ss == "")  			ss = "0";  		sat.signalStrength = 0;  		int.TryParse (ss' out sat.signalStrength);  		//sat.signalStrength = int.Parse(ss);  	}  	newSatelliteList.Add (sat);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i] == "")  	continue;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i] == "")  	continue;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: sat.num = int.Parse (MessageData [4 + 4 * i]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: sat.num = int.Parse (MessageData [4 + 4 * i]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 1] != "")  	sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 1] != "")  	sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 1] != "")  	sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 1] != "")  	sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 2] != "")  	sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 2] != "")  	sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 2] != "")  	sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 2] != "")  	sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 2] != "")  	sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [4 + 4 * i + 2] != "")  	sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  	sat.signalStrength = 0;  else {  	string ss = MessageData [4 + 4 * i + 3];  	if (ss.Contains ('*'))  		ss = ss.Substring (0' ss.IndexOf ('*'));  	if (ss == "")  		ss = "0";  	sat.signalStrength = 0;  	int.TryParse (ss' out sat.signalStrength);  	//sat.signalStrength = int.Parse(ss);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: dimensionalFix = int.Parse (MessageData [2]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: DOP = float.Parse (MessageData [15]);  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 3; i < 3 + 12; i++) {  	if (MessageData [i] != "")  		satellitesUsed.Add (int.Parse (MessageData [i])' true);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 3; i < 3 + 12; i++) {  	if (MessageData [i] != "")  		satellitesUsed.Add (int.Parse (MessageData [i])' true);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: for (int i = 3; i < 3 + 12; i++) {  	if (MessageData [i] != "")  		satellitesUsed.Add (int.Parse (MessageData [i])' true);  }  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [3] == "S")  	latitude *= -1;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: if (MessageData [5] == "W")  	longitude *= -1;  
Magic Number,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following statement contains a magic number: altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: for (int i = 0; i < lapPoints.Count; i++) {  	if (i > 0) {  		double R = 20902231;  		// feet radius of earth  		double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  		double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  		double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  		double lat2 = lapPoints [i].lat * Math.PI / 180.0;  		double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  		double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  		ongoingDistance += (float)(R * c);  	}  	distances [i] = ongoingDistance;  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,ProcessedLap,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\ProcessedLap.cs,CalculateDistances,The following statement contains a magic number: if (i > 0) {  	double R = 20902231;  	// feet radius of earth  	double dLat = (lapPoints [i].lat - lapPoints [i - 1].lat) * Math.PI / 180.0;  	double dLon = (lapPoints [i].lon - lapPoints [i - 1].lon) * Math.PI / 180.0;  	double lat1 = lapPoints [i - 1].lat * Math.PI / 180.0;  	double lat2 = lapPoints [i].lat * Math.PI / 180.0;  	double a = Math.Sin (dLat / 2) * Math.Sin (dLat / 2) + Math.Sin (dLon / 2) * Math.Sin (dLon / 2) * Math.Cos (lat1) * Math.Cos (lat2);  	double c = 2 * Math.Atan2 (Math.Sqrt (a)' Math.Sqrt (1 - a));  	ongoingDistance += (float)(R * c);  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,getCOMPortList,The following statement contains a magic number: for (int i = 0; i < startArr.Length; i++) {  	for (int h = 3; h < startArr [i].Length; h++) {  		if (!char.IsNumber (startArr [i] [h])) {  			startArr [i] = startArr [i].Substring (0' h);  			break;  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,getCOMPortList,The following statement contains a magic number: for (int h = 3; h < startArr [i].Length; h++) {  	if (!char.IsNumber (startArr [i] [h])) {  		startArr [i] = startArr [i].Substring (0' h);  		break;  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SetGPS,The following statement contains a magic number: gps = new GPS ((string)portName' 115200);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,FindGPSThread,The following statement contains a magic number: try {  	while (true) {  		if (gps == null) {  			lock (portScanList) {  				if (portScanList.Count == 0)  					portScanList.AddRange (getCOMPortList ());  				if (portScanList.Count > 0) {  					string portName = portScanList.First ();  					portScanList.RemoveAt (0);  					this.Invoke (new ThreadStart (delegate () {  						gpsStatus.Text = "Trying " + portName + "...";  					}));  					if (TestGPSPort (portName)) {  						this.Invoke (new ParameterizedThreadStart (SetGPS)' new object[] {  							portName  						});  						portScanList.Clear ();  					}  				}  			}  		}  		Thread.Sleep (100);  	}  }  catch (ThreadAbortException) {  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,FindGPSThread,The following statement contains a magic number: while (true) {  	if (gps == null) {  		lock (portScanList) {  			if (portScanList.Count == 0)  				portScanList.AddRange (getCOMPortList ());  			if (portScanList.Count > 0) {  				string portName = portScanList.First ();  				portScanList.RemoveAt (0);  				this.Invoke (new ThreadStart (delegate () {  					gpsStatus.Text = "Trying " + portName + "...";  				}));  				if (TestGPSPort (portName)) {  					this.Invoke (new ParameterizedThreadStart (SetGPS)' new object[] {  						portName  					});  					portScanList.Clear ();  				}  			}  		}  	}  	Thread.Sleep (100);  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,FindGPSThread,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,TestGPSPort,The following statement contains a magic number: port.WriteTimeout = 100;  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,TestGPSPort,The following statement contains a magic number: try {  	port.WriteLine ("");  	port.NewLine = "\r\n";  	port.ReadTimeout = 3000;  	string testLine = port.ReadLine ();  	Console.WriteLine ("Read: " + testLine.Length + ": " + testLine);  	if (testLine.Contains ('$') || testLine.Contains ('*')) {  		port.Close ();  		return true;  	}  }  catch (TimeoutException) {  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,TestGPSPort,The following statement contains a magic number: port.ReadTimeout = 3000;  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: satPicToolbar.Width = 12 * gps.satellites.Count;  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: if (gps.satellites.Count > 0) {  	Font f = new Font (FontFamily.GenericMonospace' 6);  	Brush whiteBrush = new SolidBrush (Color.White);  	Brush redBrush = new SolidBrush (Color.Red);  	Brush blueBrush = new SolidBrush (Color.Blue);  	for (int i = 0; i < gps.satellites.Count; i++) {  		GPSSatellite sat = gps.satellites [i];  		int barHeight = (int)Math.Round ((float)renderMap.Height * sat.signalStrength / 100.0f);  		Brush brushUse = gps.satellitesUsed.ContainsKey (sat.num) ? blueBrush : redBrush;  		g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  		g.DrawString (sat.signalStrength.ToString ()' f' whiteBrush' i * 12' -1);  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: if (gps.satellites.Count > 0) {  	Font f = new Font (FontFamily.GenericMonospace' 6);  	Brush whiteBrush = new SolidBrush (Color.White);  	Brush redBrush = new SolidBrush (Color.Red);  	Brush blueBrush = new SolidBrush (Color.Blue);  	for (int i = 0; i < gps.satellites.Count; i++) {  		GPSSatellite sat = gps.satellites [i];  		int barHeight = (int)Math.Round ((float)renderMap.Height * sat.signalStrength / 100.0f);  		Brush brushUse = gps.satellitesUsed.ContainsKey (sat.num) ? blueBrush : redBrush;  		g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  		g.DrawString (sat.signalStrength.ToString ()' f' whiteBrush' i * 12' -1);  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: if (gps.satellites.Count > 0) {  	Font f = new Font (FontFamily.GenericMonospace' 6);  	Brush whiteBrush = new SolidBrush (Color.White);  	Brush redBrush = new SolidBrush (Color.Red);  	Brush blueBrush = new SolidBrush (Color.Blue);  	for (int i = 0; i < gps.satellites.Count; i++) {  		GPSSatellite sat = gps.satellites [i];  		int barHeight = (int)Math.Round ((float)renderMap.Height * sat.signalStrength / 100.0f);  		Brush brushUse = gps.satellitesUsed.ContainsKey (sat.num) ? blueBrush : redBrush;  		g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  		g.DrawString (sat.signalStrength.ToString ()' f' whiteBrush' i * 12' -1);  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: if (gps.satellites.Count > 0) {  	Font f = new Font (FontFamily.GenericMonospace' 6);  	Brush whiteBrush = new SolidBrush (Color.White);  	Brush redBrush = new SolidBrush (Color.Red);  	Brush blueBrush = new SolidBrush (Color.Blue);  	for (int i = 0; i < gps.satellites.Count; i++) {  		GPSSatellite sat = gps.satellites [i];  		int barHeight = (int)Math.Round ((float)renderMap.Height * sat.signalStrength / 100.0f);  		Brush brushUse = gps.satellitesUsed.ContainsKey (sat.num) ? blueBrush : redBrush;  		g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  		g.DrawString (sat.signalStrength.ToString ()' f' whiteBrush' i * 12' -1);  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: for (int i = 0; i < gps.satellites.Count; i++) {  	GPSSatellite sat = gps.satellites [i];  	int barHeight = (int)Math.Round ((float)renderMap.Height * sat.signalStrength / 100.0f);  	Brush brushUse = gps.satellitesUsed.ContainsKey (sat.num) ? blueBrush : redBrush;  	g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  	g.DrawString (sat.signalStrength.ToString ()' f' whiteBrush' i * 12' -1);  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: for (int i = 0; i < gps.satellites.Count; i++) {  	GPSSatellite sat = gps.satellites [i];  	int barHeight = (int)Math.Round ((float)renderMap.Height * sat.signalStrength / 100.0f);  	Brush brushUse = gps.satellitesUsed.ContainsKey (sat.num) ? blueBrush : redBrush;  	g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  	g.DrawString (sat.signalStrength.ToString ()' f' whiteBrush' i * 12' -1);  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: for (int i = 0; i < gps.satellites.Count; i++) {  	GPSSatellite sat = gps.satellites [i];  	int barHeight = (int)Math.Round ((float)renderMap.Height * sat.signalStrength / 100.0f);  	Brush brushUse = gps.satellitesUsed.ContainsKey (sat.num) ? blueBrush : redBrush;  	g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  	g.DrawString (sat.signalStrength.ToString ()' f' whiteBrush' i * 12' -1);  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: g.FillRectangle (brushUse' i * 12 + 1' renderMap.Height - barHeight' 10' barHeight);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,SatUpdate,The following statement contains a magic number: g.DrawString (sat.signalStrength.ToString ()' f' whiteBrush' i * 12' -1);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderCollectBox,The following statement contains a magic number: lock (recordedPointList) {  	//Recenter box no matter what  	List<GPSPoint> pointsToShow = new List<GPSPoint> ();  	if (lastPoint != null)  		pointsToShow.Add (lastPoint);  	if (recordedPointList != null)  		pointsToShow.AddRange (recordedPointList);  	box.Recenter (pointsToShow);  	//Render anything useful  	if (pointsToShow.Count > 0) {  		//Draw recorded point list  		if (recordedPointList != null && recordedPointList.Count > 1) {  			Pen whitePen = new Pen (Color.White);  			List<Point> linePoints = new List<Point> ();  			foreach (GPSPoint point in recordedPointList)  				linePoints.Add (box.ConvertPoint (point));  			g.DrawLines (whitePen' linePoints.ToArray ());  		}  		//Draw last point  		if (lastPoint != null) {  			Pen greenPen = new Pen (Color.Green);  			{  				Point ptCenter = box.ConvertPoint (lastPoint);  				g.DrawEllipse (greenPen' ptCenter.X - 1' ptCenter.Y - 1' 3' 3);  			}  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderCollectBox,The following statement contains a magic number: lock (recordedPointList) {  	//Recenter box no matter what  	List<GPSPoint> pointsToShow = new List<GPSPoint> ();  	if (lastPoint != null)  		pointsToShow.Add (lastPoint);  	if (recordedPointList != null)  		pointsToShow.AddRange (recordedPointList);  	box.Recenter (pointsToShow);  	//Render anything useful  	if (pointsToShow.Count > 0) {  		//Draw recorded point list  		if (recordedPointList != null && recordedPointList.Count > 1) {  			Pen whitePen = new Pen (Color.White);  			List<Point> linePoints = new List<Point> ();  			foreach (GPSPoint point in recordedPointList)  				linePoints.Add (box.ConvertPoint (point));  			g.DrawLines (whitePen' linePoints.ToArray ());  		}  		//Draw last point  		if (lastPoint != null) {  			Pen greenPen = new Pen (Color.Green);  			{  				Point ptCenter = box.ConvertPoint (lastPoint);  				g.DrawEllipse (greenPen' ptCenter.X - 1' ptCenter.Y - 1' 3' 3);  			}  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderCollectBox,The following statement contains a magic number: if (pointsToShow.Count > 0) {  	//Draw recorded point list  	if (recordedPointList != null && recordedPointList.Count > 1) {  		Pen whitePen = new Pen (Color.White);  		List<Point> linePoints = new List<Point> ();  		foreach (GPSPoint point in recordedPointList)  			linePoints.Add (box.ConvertPoint (point));  		g.DrawLines (whitePen' linePoints.ToArray ());  	}  	//Draw last point  	if (lastPoint != null) {  		Pen greenPen = new Pen (Color.Green);  		{  			Point ptCenter = box.ConvertPoint (lastPoint);  			g.DrawEllipse (greenPen' ptCenter.X - 1' ptCenter.Y - 1' 3' 3);  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderCollectBox,The following statement contains a magic number: if (pointsToShow.Count > 0) {  	//Draw recorded point list  	if (recordedPointList != null && recordedPointList.Count > 1) {  		Pen whitePen = new Pen (Color.White);  		List<Point> linePoints = new List<Point> ();  		foreach (GPSPoint point in recordedPointList)  			linePoints.Add (box.ConvertPoint (point));  		g.DrawLines (whitePen' linePoints.ToArray ());  	}  	//Draw last point  	if (lastPoint != null) {  		Pen greenPen = new Pen (Color.Green);  		{  			Point ptCenter = box.ConvertPoint (lastPoint);  			g.DrawEllipse (greenPen' ptCenter.X - 1' ptCenter.Y - 1' 3' 3);  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderCollectBox,The following statement contains a magic number: if (lastPoint != null) {  	Pen greenPen = new Pen (Color.Green);  	{  		Point ptCenter = box.ConvertPoint (lastPoint);  		g.DrawEllipse (greenPen' ptCenter.X - 1' ptCenter.Y - 1' 3' 3);  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderCollectBox,The following statement contains a magic number: if (lastPoint != null) {  	Pen greenPen = new Pen (Color.Green);  	{  		Point ptCenter = box.ConvertPoint (lastPoint);  		g.DrawEllipse (greenPen' ptCenter.X - 1' ptCenter.Y - 1' 3' 3);  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderCollectBox,The following statement contains a magic number: g.DrawEllipse (greenPen' ptCenter.X - 1' ptCenter.Y - 1' 3' 3);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderCollectBox,The following statement contains a magic number: g.DrawEllipse (greenPen' ptCenter.X - 1' ptCenter.Y - 1' 3' 3);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: foreach (OpenedSession session in openedSessions) {  	Pen drawPen;  	if (processedLaps.Count > 0)  		drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  	else  		drawPen = new Pen (session.color' 1);  	//Draw linemap  	List<Point> linePoints = new List<Point> ();  	foreach (GPSPoint point in session.session.gpsPoints)  		linePoints.Add (box.ConvertPoint (point));  	g.DrawLines (drawPen' linePoints.ToArray ());  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: foreach (OpenedSession session in openedSessions) {  	Pen drawPen;  	if (processedLaps.Count > 0)  		drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  	else  		drawPen = new Pen (session.color' 1);  	//Draw linemap  	List<Point> linePoints = new List<Point> ();  	foreach (GPSPoint point in session.session.gpsPoints)  		linePoints.Add (box.ConvertPoint (point));  	g.DrawLines (drawPen' linePoints.ToArray ());  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: foreach (OpenedSession session in openedSessions) {  	Pen drawPen;  	if (processedLaps.Count > 0)  		drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  	else  		drawPen = new Pen (session.color' 1);  	//Draw linemap  	List<Point> linePoints = new List<Point> ();  	foreach (GPSPoint point in session.session.gpsPoints)  		linePoints.Add (box.ConvertPoint (point));  	g.DrawLines (drawPen' linePoints.ToArray ());  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (processedLaps.Count > 0)  	drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  else  	drawPen = new Pen (session.color' 1);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (processedLaps.Count > 0)  	drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  else  	drawPen = new Pen (session.color' 1);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (processedLaps.Count > 0)  	drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  else  	drawPen = new Pen (session.color' 1);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: drawPen = new Pen (Color.FromArgb (session.color.R / 3' session.color.G / 3' session.color.B / 3));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (startLineStart != null || finishLineStart != null) {  	if (startLineStart != null && finishLineStart != null && startLineEnd != null && finishLineEnd != null && startLineStart.Equals (finishLineStart) && startLineEnd.Equals (finishLineEnd)) {  		g.DrawLine (new Pen (Color.Cyan' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  	}  	else {  		if (startLineStart != null)  			g.DrawLine (new Pen (Color.Green' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  		if (finishLineStart != null)  			g.DrawLine (new Pen (Color.Red' 2)' box.ConvertPoint (finishLineStart)' box.ConvertPoint (finishLineEnd));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (startLineStart != null || finishLineStart != null) {  	if (startLineStart != null && finishLineStart != null && startLineEnd != null && finishLineEnd != null && startLineStart.Equals (finishLineStart) && startLineEnd.Equals (finishLineEnd)) {  		g.DrawLine (new Pen (Color.Cyan' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  	}  	else {  		if (startLineStart != null)  			g.DrawLine (new Pen (Color.Green' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  		if (finishLineStart != null)  			g.DrawLine (new Pen (Color.Red' 2)' box.ConvertPoint (finishLineStart)' box.ConvertPoint (finishLineEnd));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (startLineStart != null || finishLineStart != null) {  	if (startLineStart != null && finishLineStart != null && startLineEnd != null && finishLineEnd != null && startLineStart.Equals (finishLineStart) && startLineEnd.Equals (finishLineEnd)) {  		g.DrawLine (new Pen (Color.Cyan' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  	}  	else {  		if (startLineStart != null)  			g.DrawLine (new Pen (Color.Green' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  		if (finishLineStart != null)  			g.DrawLine (new Pen (Color.Red' 2)' box.ConvertPoint (finishLineStart)' box.ConvertPoint (finishLineEnd));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (startLineStart != null && finishLineStart != null && startLineEnd != null && finishLineEnd != null && startLineStart.Equals (finishLineStart) && startLineEnd.Equals (finishLineEnd)) {  	g.DrawLine (new Pen (Color.Cyan' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  }  else {  	if (startLineStart != null)  		g.DrawLine (new Pen (Color.Green' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  	if (finishLineStart != null)  		g.DrawLine (new Pen (Color.Red' 2)' box.ConvertPoint (finishLineStart)' box.ConvertPoint (finishLineEnd));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (startLineStart != null && finishLineStart != null && startLineEnd != null && finishLineEnd != null && startLineStart.Equals (finishLineStart) && startLineEnd.Equals (finishLineEnd)) {  	g.DrawLine (new Pen (Color.Cyan' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  }  else {  	if (startLineStart != null)  		g.DrawLine (new Pen (Color.Green' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  	if (finishLineStart != null)  		g.DrawLine (new Pen (Color.Red' 2)' box.ConvertPoint (finishLineStart)' box.ConvertPoint (finishLineEnd));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (startLineStart != null && finishLineStart != null && startLineEnd != null && finishLineEnd != null && startLineStart.Equals (finishLineStart) && startLineEnd.Equals (finishLineEnd)) {  	g.DrawLine (new Pen (Color.Cyan' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  }  else {  	if (startLineStart != null)  		g.DrawLine (new Pen (Color.Green' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  	if (finishLineStart != null)  		g.DrawLine (new Pen (Color.Red' 2)' box.ConvertPoint (finishLineStart)' box.ConvertPoint (finishLineEnd));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: g.DrawLine (new Pen (Color.Cyan' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (startLineStart != null)  	g.DrawLine (new Pen (Color.Green' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: g.DrawLine (new Pen (Color.Green' 2)' box.ConvertPoint (startLineStart)' box.ConvertPoint (startLineEnd));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (finishLineStart != null)  	g.DrawLine (new Pen (Color.Red' 2)' box.ConvertPoint (finishLineStart)' box.ConvertPoint (finishLineEnd));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: g.DrawLine (new Pen (Color.Red' 2)' box.ConvertPoint (finishLineStart)' box.ConvertPoint (finishLineEnd));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (analyzeTape.distanceSelected > 0) {  	foreach (ProcessedLap lap in processedLaps) {  		if (!lap.enabled)  			continue;  		Pen selectedPen = new Pen (lap.color);  		for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  			if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  				float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  				GPSPoint nPoint = new GPSPoint ();  				nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  				nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  				Point renderPoint = box.ConvertPoint (nPoint);  				g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  				g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  				g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  				break;  			}  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (analyzeTape.distanceSelected > 0) {  	foreach (ProcessedLap lap in processedLaps) {  		if (!lap.enabled)  			continue;  		Pen selectedPen = new Pen (lap.color);  		for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  			if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  				float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  				GPSPoint nPoint = new GPSPoint ();  				nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  				nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  				Point renderPoint = box.ConvertPoint (nPoint);  				g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  				g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  				g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  				break;  			}  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (analyzeTape.distanceSelected > 0) {  	foreach (ProcessedLap lap in processedLaps) {  		if (!lap.enabled)  			continue;  		Pen selectedPen = new Pen (lap.color);  		for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  			if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  				float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  				GPSPoint nPoint = new GPSPoint ();  				nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  				nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  				Point renderPoint = box.ConvertPoint (nPoint);  				g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  				g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  				g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  				break;  			}  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (analyzeTape.distanceSelected > 0) {  	foreach (ProcessedLap lap in processedLaps) {  		if (!lap.enabled)  			continue;  		Pen selectedPen = new Pen (lap.color);  		for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  			if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  				float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  				GPSPoint nPoint = new GPSPoint ();  				nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  				nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  				Point renderPoint = box.ConvertPoint (nPoint);  				g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  				g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  				g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  				break;  			}  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: foreach (ProcessedLap lap in processedLaps) {  	if (!lap.enabled)  		continue;  	Pen selectedPen = new Pen (lap.color);  	for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  		if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  			float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  			GPSPoint nPoint = new GPSPoint ();  			nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  			nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  			Point renderPoint = box.ConvertPoint (nPoint);  			g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  			g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  			g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  			break;  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: foreach (ProcessedLap lap in processedLaps) {  	if (!lap.enabled)  		continue;  	Pen selectedPen = new Pen (lap.color);  	for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  		if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  			float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  			GPSPoint nPoint = new GPSPoint ();  			nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  			nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  			Point renderPoint = box.ConvertPoint (nPoint);  			g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  			g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  			g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  			break;  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: foreach (ProcessedLap lap in processedLaps) {  	if (!lap.enabled)  		continue;  	Pen selectedPen = new Pen (lap.color);  	for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  		if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  			float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  			GPSPoint nPoint = new GPSPoint ();  			nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  			nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  			Point renderPoint = box.ConvertPoint (nPoint);  			g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  			g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  			g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  			break;  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: foreach (ProcessedLap lap in processedLaps) {  	if (!lap.enabled)  		continue;  	Pen selectedPen = new Pen (lap.color);  	for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  		if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  			float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  			GPSPoint nPoint = new GPSPoint ();  			nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  			nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  			Point renderPoint = box.ConvertPoint (nPoint);  			g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  			g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  			g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  			break;  		}  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  	if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  		float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  		nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  		Point renderPoint = box.ConvertPoint (nPoint);  		g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  		g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  		g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  		break;  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  	if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  		float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  		nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  		Point renderPoint = box.ConvertPoint (nPoint);  		g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  		g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  		g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  		break;  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  	if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  		float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  		nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  		Point renderPoint = box.ConvertPoint (nPoint);  		g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  		g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  		g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  		break;  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: for (int i = 0; i < lap.lapPoints.Count - 1; i++) {  	if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  		float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  		nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  		Point renderPoint = box.ConvertPoint (nPoint);  		g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  		g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  		g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  		break;  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  	float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  	nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  	Point renderPoint = box.ConvertPoint (nPoint);  	g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  	g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  	g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  	break;  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  	float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  	nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  	Point renderPoint = box.ConvertPoint (nPoint);  	g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  	g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  	g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  	break;  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  	float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  	nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  	Point renderPoint = box.ConvertPoint (nPoint);  	g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  	g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  	g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  	break;  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: if (lap.distances [i] <= analyzeTape.distanceSelected && lap.distances [i + 1] >= analyzeTape.distanceSelected) {  	float t = (analyzeTape.distanceSelected - lap.distances [i]) / (lap.distances [i + 1] - lap.distances [i]);  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = t * lap.lapPoints [i + 1].lat + (1 - t) * lap.lapPoints [i].lat;  	nPoint.lon = t * lap.lapPoints [i + 1].lon + (1 - t) * lap.lapPoints [i].lon;  	Point renderPoint = box.ConvertPoint (nPoint);  	g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  	g.DrawLine (selectedPen' renderPoint.X - 2.82f' renderPoint.Y - 2.82f' renderPoint.X + 2.82f' renderPoint.Y + 2.82f);  	g.DrawLine (selectedPen' renderPoint.X + 2.82f' renderPoint.Y - 2.82f' renderPoint.X - 2.82f' renderPoint.Y + 2.82f);  	break;  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,RenderOverviewBox,The following statement contains a magic number: g.DrawEllipse (selectedPen' renderPoint.X - 4' renderPoint.Y - 4' 9' 9);  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.time != null) {  	double newTime = double.Parse (gps.time);  	float s = (float)(newTime - lastGPSTime);  	if (s > 0) {  		float hz = 1.0f / s;  		this.Invoke (new ThreadStart (delegate () {  			gpsStatus.Text = "Connected to " + gps.portName + ": " + Math.Round (hz' 1) + " hz";  		}));  	}  	lastGPSTime = newTime;  	if (gps.fixActive) {  		GPSPoint nPoint = new GPSPoint ();  		nPoint.lat = gps.latitude;  		nPoint.lon = gps.longitude;  		DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  		nPoint.time = checkTime;  		nPoint.velocity = gps.velocityMPH;  		nPoint.altitude = gps.altitudeFeet;  		if (autoRecordBox.Checked) {  			//Figure out if we need to turn it on or off...  			if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  				this.Invoke (new ThreadStart (delegate () {  					recordButton_Click (null' null);  				}));  		}  		lock (recordedPointList) {  			if (recordingPoints) {  				recordedPointList.Add (nPoint);  				recordingSaved = false;  			}  			lastPoint = nPoint;  		}  		this.Invoke (new ThreadStart (delegate () {  			clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  			lock (recordedPointList) {  				if (recordedPointList.Count > 0)  					recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  			}  			gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  		}));  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (gps.fixActive) {  	GPSPoint nPoint = new GPSPoint ();  	nPoint.lat = gps.latitude;  	nPoint.lon = gps.longitude;  	DateTime checkTime = new DateTime (DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' int.Parse (gps.time.Substring (0' 2))' int.Parse (gps.time.Substring (2' 2))' int.Parse (gps.time.Substring (4' 2))' (int)(1000 * float.Parse (gps.time.Substring (6)))' DateTimeKind.Utc).ToLocalTime ();  	nPoint.time = checkTime;  	nPoint.velocity = gps.velocityMPH;  	nPoint.altitude = gps.altitudeFeet;  	if (autoRecordBox.Checked) {  		//Figure out if we need to turn it on or off...  		if ((!recordingPoints && nPoint.velocity >= (float)autoRecordMPH.Value) || (recordingPoints && nPoint.velocity < (float)autoRecordMPH.Value))  			this.Invoke (new ThreadStart (delegate () {  				recordButton_Click (null' null);  			}));  	}  	lock (recordedPointList) {  		if (recordingPoints) {  			recordedPointList.Add (nPoint);  			recordingSaved = false;  		}  		lastPoint = nPoint;  	}  	this.Invoke (new ThreadStart (delegate () {  		clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  		lock (recordedPointList) {  			if (recordedPointList.Count > 0)  				recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  		}  		gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  	}));  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: this.Invoke (new ThreadStart (delegate () {  	clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  	lock (recordedPointList) {  		if (recordedPointList.Count > 0)  			recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  	}  	gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  }));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: this.Invoke (new ThreadStart (delegate () {  	clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  	lock (recordedPointList) {  		if (recordedPointList.Count > 0)  			recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  	}  	gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  }));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: this.Invoke (new ThreadStart (delegate () {  	clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  	lock (recordedPointList) {  		if (recordedPointList.Count > 0)  			recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  	}  	gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  }));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: this.Invoke (new ThreadStart (delegate () {  	clearRecordingButton.Enabled = saveSessionAndAnalyzeButton.Enabled = saveSessionButton.Enabled = !recordingSaved;  	lock (recordedPointList) {  		if (recordedPointList.Count > 0)  			recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  	}  	gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  }));  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: lock (recordedPointList) {  	if (recordedPointList.Count > 0)  		recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: if (recordedPointList.Count > 0)  	recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: recordingStatusText.Text = recordedPointList.Count + " Points (" + Math.Round ((recordedPointList.Last ().time - recordedPointList.First ().time).TotalSeconds' 3) + " s)";  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,GPSPositionUpdate,The following statement contains a magic number: gpsInfoDump.Text = nPoint.time + ": " + Math.Round (nPoint.lat' 6) + "' " + Math.Round (nPoint.lon' 6) + " @ " + Math.Round (nPoint.altitude' 2) + " ft' " + nPoint.velocity + " mph";  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The following statement contains a magic number: if (openFileDialog1.ShowDialog () == System.Windows.Forms.DialogResult.OK) {  	foreach (string fileName in openFileDialog1.FileNames) {  		FileInfo fi = new FileInfo (fileName);  		if (!fi.Exists)  			continue;  		bool loaded = false;  		if (fi.Extension == ".csv") {  			string[] lines = File.ReadAllLines (fileName);  			if (lines.Length < 10)  				continue;  			//Traqmate?  			string[] line0 = lines [0].Split (''');  			if (line0.Length >= 2 && line0 [1] == " Traqmate Trackvision") {  				//Traqmate!  				//Make new CSV out of only the data lines..  				StringBuilder collectedString = new StringBuilder ();  				bool found = false;  				Dictionary<string' string> lookupList = new Dictionary<string' string> ();  				for (int i = 0; i < lines.Length; i++) {  					if (!found) {  						string[] linesplit = lines [i].Split (''');  						if (linesplit [0] == "GPS Reading")  							found = true;  						else if (linesplit.Length > 1)  							lookupList [linesplit [0]] = linesplit [1];  					}  					if (found)  						collectedString.AppendLine (lines [i]);  				}  				TextReader tr = new StreamReader (new MemoryStream (new System.Text.UTF8Encoding ().GetBytes (collectedString.ToString ())));  				CsvReader reader = new CsvReader (tr' true);  				RecordedSession newSession = new RecordedSession ();  				newSession.driverName = lookupList ["Driver"];  				newSession.eventName = lookupList ["Track"];  				newSession.notes = "Vehicle: " + lookupList ["Vehicle"];  				DateTime timeBase = DateTime.Parse (lookupList ["Starting Date"] + " " + lookupList ["Starting Time"]);  				while (reader.ReadNextRecord ()) {  					GPSPoint point = new GPSPoint ();  					float timeAdd = float.Parse (reader ["Elapsed Time"]);  					point.time = timeBase.AddSeconds (timeAdd);  					point.altitude = float.Parse (reader ["Altitude (feet)"]);  					point.velocity = float.Parse (reader ["Velocity (MPH)"]);  					//there's also "feet" we could use to increase precision' but let's try this for now...  					point.lat = double.Parse (reader ["Lat (Degrees)"]);  					point.lon = double.Parse (reader ["Lon (Degrees)"]);  					newSession.gpsPoints.Add (point);  				}  				//Save and add to store  				AddSession (newSession);  				//Serialize session and save to file...  				string serializedSession = newSession.Serialize ();  				DirectoryInfo eventDir = saveDir.CreateSubdirectory (newSession.GetEventDirName ());  				File.WriteAllText (eventDir.FullName + "\\" + newSession.GetFileName () + ".session"' serializedSession);  				//Open for analysis  				OpenSession (newSession);  				loaded = true;  			}  		}  		if (!loaded)  			MessageBox.Show ("Error: File format not known for file:\n" + fi.FullName);  	}  	//Analyze  	modeTab.SelectedTab = pageAnalyze;  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The following statement contains a magic number: if (openFileDialog1.ShowDialog () == System.Windows.Forms.DialogResult.OK) {  	foreach (string fileName in openFileDialog1.FileNames) {  		FileInfo fi = new FileInfo (fileName);  		if (!fi.Exists)  			continue;  		bool loaded = false;  		if (fi.Extension == ".csv") {  			string[] lines = File.ReadAllLines (fileName);  			if (lines.Length < 10)  				continue;  			//Traqmate?  			string[] line0 = lines [0].Split (''');  			if (line0.Length >= 2 && line0 [1] == " Traqmate Trackvision") {  				//Traqmate!  				//Make new CSV out of only the data lines..  				StringBuilder collectedString = new StringBuilder ();  				bool found = false;  				Dictionary<string' string> lookupList = new Dictionary<string' string> ();  				for (int i = 0; i < lines.Length; i++) {  					if (!found) {  						string[] linesplit = lines [i].Split (''');  						if (linesplit [0] == "GPS Reading")  							found = true;  						else if (linesplit.Length > 1)  							lookupList [linesplit [0]] = linesplit [1];  					}  					if (found)  						collectedString.AppendLine (lines [i]);  				}  				TextReader tr = new StreamReader (new MemoryStream (new System.Text.UTF8Encoding ().GetBytes (collectedString.ToString ())));  				CsvReader reader = new CsvReader (tr' true);  				RecordedSession newSession = new RecordedSession ();  				newSession.driverName = lookupList ["Driver"];  				newSession.eventName = lookupList ["Track"];  				newSession.notes = "Vehicle: " + lookupList ["Vehicle"];  				DateTime timeBase = DateTime.Parse (lookupList ["Starting Date"] + " " + lookupList ["Starting Time"]);  				while (reader.ReadNextRecord ()) {  					GPSPoint point = new GPSPoint ();  					float timeAdd = float.Parse (reader ["Elapsed Time"]);  					point.time = timeBase.AddSeconds (timeAdd);  					point.altitude = float.Parse (reader ["Altitude (feet)"]);  					point.velocity = float.Parse (reader ["Velocity (MPH)"]);  					//there's also "feet" we could use to increase precision' but let's try this for now...  					point.lat = double.Parse (reader ["Lat (Degrees)"]);  					point.lon = double.Parse (reader ["Lon (Degrees)"]);  					newSession.gpsPoints.Add (point);  				}  				//Save and add to store  				AddSession (newSession);  				//Serialize session and save to file...  				string serializedSession = newSession.Serialize ();  				DirectoryInfo eventDir = saveDir.CreateSubdirectory (newSession.GetEventDirName ());  				File.WriteAllText (eventDir.FullName + "\\" + newSession.GetFileName () + ".session"' serializedSession);  				//Open for analysis  				OpenSession (newSession);  				loaded = true;  			}  		}  		if (!loaded)  			MessageBox.Show ("Error: File format not known for file:\n" + fi.FullName);  	}  	//Analyze  	modeTab.SelectedTab = pageAnalyze;  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The following statement contains a magic number: foreach (string fileName in openFileDialog1.FileNames) {  	FileInfo fi = new FileInfo (fileName);  	if (!fi.Exists)  		continue;  	bool loaded = false;  	if (fi.Extension == ".csv") {  		string[] lines = File.ReadAllLines (fileName);  		if (lines.Length < 10)  			continue;  		//Traqmate?  		string[] line0 = lines [0].Split (''');  		if (line0.Length >= 2 && line0 [1] == " Traqmate Trackvision") {  			//Traqmate!  			//Make new CSV out of only the data lines..  			StringBuilder collectedString = new StringBuilder ();  			bool found = false;  			Dictionary<string' string> lookupList = new Dictionary<string' string> ();  			for (int i = 0; i < lines.Length; i++) {  				if (!found) {  					string[] linesplit = lines [i].Split (''');  					if (linesplit [0] == "GPS Reading")  						found = true;  					else if (linesplit.Length > 1)  						lookupList [linesplit [0]] = linesplit [1];  				}  				if (found)  					collectedString.AppendLine (lines [i]);  			}  			TextReader tr = new StreamReader (new MemoryStream (new System.Text.UTF8Encoding ().GetBytes (collectedString.ToString ())));  			CsvReader reader = new CsvReader (tr' true);  			RecordedSession newSession = new RecordedSession ();  			newSession.driverName = lookupList ["Driver"];  			newSession.eventName = lookupList ["Track"];  			newSession.notes = "Vehicle: " + lookupList ["Vehicle"];  			DateTime timeBase = DateTime.Parse (lookupList ["Starting Date"] + " " + lookupList ["Starting Time"]);  			while (reader.ReadNextRecord ()) {  				GPSPoint point = new GPSPoint ();  				float timeAdd = float.Parse (reader ["Elapsed Time"]);  				point.time = timeBase.AddSeconds (timeAdd);  				point.altitude = float.Parse (reader ["Altitude (feet)"]);  				point.velocity = float.Parse (reader ["Velocity (MPH)"]);  				//there's also "feet" we could use to increase precision' but let's try this for now...  				point.lat = double.Parse (reader ["Lat (Degrees)"]);  				point.lon = double.Parse (reader ["Lon (Degrees)"]);  				newSession.gpsPoints.Add (point);  			}  			//Save and add to store  			AddSession (newSession);  			//Serialize session and save to file...  			string serializedSession = newSession.Serialize ();  			DirectoryInfo eventDir = saveDir.CreateSubdirectory (newSession.GetEventDirName ());  			File.WriteAllText (eventDir.FullName + "\\" + newSession.GetFileName () + ".session"' serializedSession);  			//Open for analysis  			OpenSession (newSession);  			loaded = true;  		}  	}  	if (!loaded)  		MessageBox.Show ("Error: File format not known for file:\n" + fi.FullName);  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The following statement contains a magic number: foreach (string fileName in openFileDialog1.FileNames) {  	FileInfo fi = new FileInfo (fileName);  	if (!fi.Exists)  		continue;  	bool loaded = false;  	if (fi.Extension == ".csv") {  		string[] lines = File.ReadAllLines (fileName);  		if (lines.Length < 10)  			continue;  		//Traqmate?  		string[] line0 = lines [0].Split (''');  		if (line0.Length >= 2 && line0 [1] == " Traqmate Trackvision") {  			//Traqmate!  			//Make new CSV out of only the data lines..  			StringBuilder collectedString = new StringBuilder ();  			bool found = false;  			Dictionary<string' string> lookupList = new Dictionary<string' string> ();  			for (int i = 0; i < lines.Length; i++) {  				if (!found) {  					string[] linesplit = lines [i].Split (''');  					if (linesplit [0] == "GPS Reading")  						found = true;  					else if (linesplit.Length > 1)  						lookupList [linesplit [0]] = linesplit [1];  				}  				if (found)  					collectedString.AppendLine (lines [i]);  			}  			TextReader tr = new StreamReader (new MemoryStream (new System.Text.UTF8Encoding ().GetBytes (collectedString.ToString ())));  			CsvReader reader = new CsvReader (tr' true);  			RecordedSession newSession = new RecordedSession ();  			newSession.driverName = lookupList ["Driver"];  			newSession.eventName = lookupList ["Track"];  			newSession.notes = "Vehicle: " + lookupList ["Vehicle"];  			DateTime timeBase = DateTime.Parse (lookupList ["Starting Date"] + " " + lookupList ["Starting Time"]);  			while (reader.ReadNextRecord ()) {  				GPSPoint point = new GPSPoint ();  				float timeAdd = float.Parse (reader ["Elapsed Time"]);  				point.time = timeBase.AddSeconds (timeAdd);  				point.altitude = float.Parse (reader ["Altitude (feet)"]);  				point.velocity = float.Parse (reader ["Velocity (MPH)"]);  				//there's also "feet" we could use to increase precision' but let's try this for now...  				point.lat = double.Parse (reader ["Lat (Degrees)"]);  				point.lon = double.Parse (reader ["Lon (Degrees)"]);  				newSession.gpsPoints.Add (point);  			}  			//Save and add to store  			AddSession (newSession);  			//Serialize session and save to file...  			string serializedSession = newSession.Serialize ();  			DirectoryInfo eventDir = saveDir.CreateSubdirectory (newSession.GetEventDirName ());  			File.WriteAllText (eventDir.FullName + "\\" + newSession.GetFileName () + ".session"' serializedSession);  			//Open for analysis  			OpenSession (newSession);  			loaded = true;  		}  	}  	if (!loaded)  		MessageBox.Show ("Error: File format not known for file:\n" + fi.FullName);  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The following statement contains a magic number: if (fi.Extension == ".csv") {  	string[] lines = File.ReadAllLines (fileName);  	if (lines.Length < 10)  		continue;  	//Traqmate?  	string[] line0 = lines [0].Split (''');  	if (line0.Length >= 2 && line0 [1] == " Traqmate Trackvision") {  		//Traqmate!  		//Make new CSV out of only the data lines..  		StringBuilder collectedString = new StringBuilder ();  		bool found = false;  		Dictionary<string' string> lookupList = new Dictionary<string' string> ();  		for (int i = 0; i < lines.Length; i++) {  			if (!found) {  				string[] linesplit = lines [i].Split (''');  				if (linesplit [0] == "GPS Reading")  					found = true;  				else if (linesplit.Length > 1)  					lookupList [linesplit [0]] = linesplit [1];  			}  			if (found)  				collectedString.AppendLine (lines [i]);  		}  		TextReader tr = new StreamReader (new MemoryStream (new System.Text.UTF8Encoding ().GetBytes (collectedString.ToString ())));  		CsvReader reader = new CsvReader (tr' true);  		RecordedSession newSession = new RecordedSession ();  		newSession.driverName = lookupList ["Driver"];  		newSession.eventName = lookupList ["Track"];  		newSession.notes = "Vehicle: " + lookupList ["Vehicle"];  		DateTime timeBase = DateTime.Parse (lookupList ["Starting Date"] + " " + lookupList ["Starting Time"]);  		while (reader.ReadNextRecord ()) {  			GPSPoint point = new GPSPoint ();  			float timeAdd = float.Parse (reader ["Elapsed Time"]);  			point.time = timeBase.AddSeconds (timeAdd);  			point.altitude = float.Parse (reader ["Altitude (feet)"]);  			point.velocity = float.Parse (reader ["Velocity (MPH)"]);  			//there's also "feet" we could use to increase precision' but let's try this for now...  			point.lat = double.Parse (reader ["Lat (Degrees)"]);  			point.lon = double.Parse (reader ["Lon (Degrees)"]);  			newSession.gpsPoints.Add (point);  		}  		//Save and add to store  		AddSession (newSession);  		//Serialize session and save to file...  		string serializedSession = newSession.Serialize ();  		DirectoryInfo eventDir = saveDir.CreateSubdirectory (newSession.GetEventDirName ());  		File.WriteAllText (eventDir.FullName + "\\" + newSession.GetFileName () + ".session"' serializedSession);  		//Open for analysis  		OpenSession (newSession);  		loaded = true;  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The following statement contains a magic number: if (fi.Extension == ".csv") {  	string[] lines = File.ReadAllLines (fileName);  	if (lines.Length < 10)  		continue;  	//Traqmate?  	string[] line0 = lines [0].Split (''');  	if (line0.Length >= 2 && line0 [1] == " Traqmate Trackvision") {  		//Traqmate!  		//Make new CSV out of only the data lines..  		StringBuilder collectedString = new StringBuilder ();  		bool found = false;  		Dictionary<string' string> lookupList = new Dictionary<string' string> ();  		for (int i = 0; i < lines.Length; i++) {  			if (!found) {  				string[] linesplit = lines [i].Split (''');  				if (linesplit [0] == "GPS Reading")  					found = true;  				else if (linesplit.Length > 1)  					lookupList [linesplit [0]] = linesplit [1];  			}  			if (found)  				collectedString.AppendLine (lines [i]);  		}  		TextReader tr = new StreamReader (new MemoryStream (new System.Text.UTF8Encoding ().GetBytes (collectedString.ToString ())));  		CsvReader reader = new CsvReader (tr' true);  		RecordedSession newSession = new RecordedSession ();  		newSession.driverName = lookupList ["Driver"];  		newSession.eventName = lookupList ["Track"];  		newSession.notes = "Vehicle: " + lookupList ["Vehicle"];  		DateTime timeBase = DateTime.Parse (lookupList ["Starting Date"] + " " + lookupList ["Starting Time"]);  		while (reader.ReadNextRecord ()) {  			GPSPoint point = new GPSPoint ();  			float timeAdd = float.Parse (reader ["Elapsed Time"]);  			point.time = timeBase.AddSeconds (timeAdd);  			point.altitude = float.Parse (reader ["Altitude (feet)"]);  			point.velocity = float.Parse (reader ["Velocity (MPH)"]);  			//there's also "feet" we could use to increase precision' but let's try this for now...  			point.lat = double.Parse (reader ["Lat (Degrees)"]);  			point.lon = double.Parse (reader ["Lon (Degrees)"]);  			newSession.gpsPoints.Add (point);  		}  		//Save and add to store  		AddSession (newSession);  		//Serialize session and save to file...  		string serializedSession = newSession.Serialize ();  		DirectoryInfo eventDir = saveDir.CreateSubdirectory (newSession.GetEventDirName ());  		File.WriteAllText (eventDir.FullName + "\\" + newSession.GetFileName () + ".session"' serializedSession);  		//Open for analysis  		OpenSession (newSession);  		loaded = true;  	}  }  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The following statement contains a magic number: if (lines.Length < 10)  	continue;  
Magic Number,SoloFaster,MainForm,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\MainForm.cs,openToolStripMenuItem_Click,The following statement contains a magic number: if (line0.Length >= 2 && line0 [1] == " Traqmate Trackvision") {  	//Traqmate!  	//Make new CSV out of only the data lines..  	StringBuilder collectedString = new StringBuilder ();  	bool found = false;  	Dictionary<string' string> lookupList = new Dictionary<string' string> ();  	for (int i = 0; i < lines.Length; i++) {  		if (!found) {  			string[] linesplit = lines [i].Split (''');  			if (linesplit [0] == "GPS Reading")  				found = true;  			else if (linesplit.Length > 1)  				lookupList [linesplit [0]] = linesplit [1];  		}  		if (found)  			collectedString.AppendLine (lines [i]);  	}  	TextReader tr = new StreamReader (new MemoryStream (new System.Text.UTF8Encoding ().GetBytes (collectedString.ToString ())));  	CsvReader reader = new CsvReader (tr' true);  	RecordedSession newSession = new RecordedSession ();  	newSession.driverName = lookupList ["Driver"];  	newSession.eventName = lookupList ["Track"];  	newSession.notes = "Vehicle: " + lookupList ["Vehicle"];  	DateTime timeBase = DateTime.Parse (lookupList ["Starting Date"] + " " + lookupList ["Starting Time"]);  	while (reader.ReadNextRecord ()) {  		GPSPoint point = new GPSPoint ();  		float timeAdd = float.Parse (reader ["Elapsed Time"]);  		point.time = timeBase.AddSeconds (timeAdd);  		point.altitude = float.Parse (reader ["Altitude (feet)"]);  		point.velocity = float.Parse (reader ["Velocity (MPH)"]);  		//there's also "feet" we could use to increase precision' but let's try this for now...  		point.lat = double.Parse (reader ["Lat (Degrees)"]);  		point.lon = double.Parse (reader ["Lon (Degrees)"]);  		newSession.gpsPoints.Add (point);  	}  	//Save and add to store  	AddSession (newSession);  	//Serialize session and save to file...  	string serializedSession = newSession.Serialize ();  	DirectoryInfo eventDir = saveDir.CreateSubdirectory (newSession.GetEventDirName ());  	File.WriteAllText (eventDir.FullName + "\\" + newSession.GetFileName () + ".session"' serializedSession);  	//Open for analysis  	OpenSession (newSession);  	loaded = true;  }  
Missing Default,SoloFaster,GPS,C:\repos\mylodavidd_SoloFaster\source\SoloFaster\GPS.cs,ProcessMessage,The following switch statement is missing a default case: switch (MessageData [0]) {  case "GPRMC":  	//http://www.codepedia.com/1/The+GPRMC+Sentence  	time = MessageData [1];  	fixActive = (MessageData [2] == "A");  	velocityMPH = (int)(Math.Round (double.Parse (MessageData [7]) * 1.15078));  	if (MessageData [8] != "")  		bearingRadians = float.Parse (MessageData [8]) * (float)Math.PI / 180.0f;  	break;  case "GPGSV":  	/*        GSV - Satellites in view                             GSV'2'1'08'01'40'083'46'02'17'308'41'12'07'344'39'14'22'228'45*75                                2            Number of sentences for full data                                1            sentence 1 of 2                                08           Number of satellites in view                                01           Satellite PRN number                                40           Elevation' degrees                                083          Azimuth' degrees                                46           Signal strength - higher is better                                <repeat for up to 4 satellites per sentence>                                     There my be up to three GSV sentences in a data packet*/int numSent = int.Parse (MessageData [1]);  	int thisSent = int.Parse (MessageData [2]);  	if (thisSent == 1)  		newSatelliteList = new List<GPSSatellite> ();  	if (newSatelliteList == null)  		//Must have started in the middle of a sentence  		break;  	int numSats = int.Parse (MessageData [3]);  	int numParse = (int)Math.Ceiling ((MessageData.Length - 5) / 4.0f);  	for (int i = 0; i < numParse; i++) {  		if (MessageData [4 + 4 * i] == "")  			continue;  		//Valid satellite  		GPSSatellite sat = new GPSSatellite ();  		sat.num = int.Parse (MessageData [4 + 4 * i]);  		if (MessageData [4 + 4 * i + 1] != "")  			sat.elevation = int.Parse (MessageData [4 + 4 * i + 1]);  		if (MessageData [4 + 4 * i + 2] != "")  			sat.azimuth = int.Parse (MessageData [4 + 4 * i + 2]);  		if (MessageData.Length <= 4 + 4 * i + 3 || MessageData [4 + 4 * i + 3] == "")  			sat.signalStrength = 0;  		else {  			string ss = MessageData [4 + 4 * i + 3];  			if (ss.Contains ('*'))  				ss = ss.Substring (0' ss.IndexOf ('*'));  			if (ss == "")  				ss = "0";  			sat.signalStrength = 0;  			int.TryParse (ss' out sat.signalStrength);  			//sat.signalStrength = int.Parse(ss);  		}  		newSatelliteList.Add (sat);  	}  	if (thisSent == numSent) {  		//Got all sentences  		satellites = newSatelliteList;  		newSatelliteList = null;  		if (satelliteUpdate != null)  			satelliteUpdate.Invoke ();  	}  	break;  case "GPGSA":  	/*        GSA - GPS DOP and active satellites                             GSA'A'3'04'05''09'12'''24'''''2.5'1.3'2.1*39                                A            Auto selection of 2D or 3D fix (M = manual)                                3            3D fix                                04'05...     PRNs of satellites used for fix (space for 12)                                2.5          PDOP (dilution of precision)                                1.3          Horizontal dilution of precision (HDOP)                                2.1          Vertical dilution of precision (VDOP)                                  DOP is an indication of the effect of satellite geometry on                                  the accuracy of the fix.*/dimensionalFix = int.Parse (MessageData [2]);  	DOP = float.Parse (MessageData [15]);  	satellitesUsed.Clear ();  	for (int i = 3; i < 3 + 12; i++) {  		if (MessageData [i] != "")  			satellitesUsed.Add (int.Parse (MessageData [i])' true);  	}  	break;  case "GPGGA":  	/* GGA - Global Positioning System Fix Data                             GGA'123519'4807.038'N'01131.324'E'1'08'0.9'545.4'M'46.9'M' ' *42                                123519       Fix taken at 12:35:19 UTC                                4807.038'N   Latitude 48 deg 07.038' N                                01131.324'E  Longitude 11 deg 31.324' E                                1            Fix quality: 0 = invalid                                                          1 = GPS fix                                                          2 = DGPS fix                                08           Number of satellites being tracked                                0.9          Horizontal dilution of position                                545.4'M      Altitude' Metres' above mean sea level                                46.9'M       Height of geoid (mean sea level) above WGS84                                             ellipsoid                                (empty field) time in seconds since last DGPS update                                (empty field) DGPS station ID number */time = MessageData [1];  	latitude = Double.Parse (MessageData [2].Substring (0' 2)) + Double.Parse (MessageData [2].Substring (2)) / 60.0;  	if (MessageData [3] == "S")  		latitude *= -1;  	longitude = Double.Parse (MessageData [4].Substring (0' 3)) + Double.Parse (MessageData [4].Substring (3)) / 60.0;  	if (MessageData [5] == "W")  		longitude *= -1;  	altitudeFeet = float.Parse (MessageData [9]) * 3.2808399f;  	if (positionUpdate != null)  		positionUpdate.Invoke ();  	break;  }  
