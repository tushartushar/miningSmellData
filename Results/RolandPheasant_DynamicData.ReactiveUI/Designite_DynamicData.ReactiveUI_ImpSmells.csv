Implementation smell,Namespace,Class,File,Method,Description
Long Method,DynamicData.ReactiveUI,ReactiveListEx,C:\repos\RolandPheasant_DynamicData.ReactiveUI\Source\DynamicData.ReactiveUI\ReactiveListEx.cs,CloneReactiveList,The method has 107 lines of code.
Long Statement,DynamicData.ReactiveUI,ReactiveListEx,C:\repos\RolandPheasant_DynamicData.ReactiveUI\Source\DynamicData.ReactiveUI\ReactiveListEx.cs,ToObservableChangeSet,The length of the statement  "                                            var removes = resultCache.KeyValues.Select(t => new Change<TObject' TKey>(ChangeReason.Remove' t.Key' t.Value)).ToArray(); " is 122.
Missing Default,DynamicData.ReactiveUI,ObservableCacheToReactiveListAdaptor<TObject;TKey>,C:\repos\RolandPheasant_DynamicData.ReactiveUI\Source\DynamicData.ReactiveUI\ObservableCacheToReactiveListAdaptor.cs,Clone,The following switch statement is missing a default case: switch (item.Reason)                  {                      case ChangeReason.Update:                      case ChangeReason.Add:                      {                          _data[item.Key] = item.Current;                      }                          break;                      case ChangeReason.Remove:                          _data.Remove(item.Key);                          break;                  }
Missing Default,DynamicData.ReactiveUI,ObservableCacheToReactiveListAdaptor<TObject;TKey>,C:\repos\RolandPheasant_DynamicData.ReactiveUI\Source\DynamicData.ReactiveUI\ObservableCacheToReactiveListAdaptor.cs,DoUpdate,The following switch statement is missing a default case: switch (change.Reason)                  {                      case ChangeReason.Add:                          _target.Add(change.Current);                          break;                      case ChangeReason.Remove:                          _target.Remove(change.Current);                          break;                      case ChangeReason.Update:                      {                          _target.Remove(change.Previous.Value);                          _target.Add(change.Current);                      }                          break;                  }
Missing Default,DynamicData.ReactiveUI,ReactiveListEx,C:\repos\RolandPheasant_DynamicData.ReactiveUI\Source\DynamicData.ReactiveUI\ReactiveListEx.cs,CloneReactiveList,The following switch statement is missing a default case: switch (item.Reason)                  {                      case ListChangeReason.Add:                          {                              var change = item.Item;                              var hasIndex = change.CurrentIndex >= 0;                              if (hasIndex)                              {                                  source.Insert(change.CurrentIndex' change.Current);                              }                              else                              {                                  source.Add(change.Current);                              }                              break;                          }                        case ListChangeReason.AddRange:                          {                              var startingIndex = item.Range.Index;                                if (RxApp.SupportsRangeNotifications)                              {                                  if (startingIndex >= 0)                                  {                                      source.InsertRange(startingIndex'item.Range);                                  }                                  else                                  {                                      source.AddRange(item.Range);                                  }                              }                              else                              {                                  if (startingIndex >= 0)                                  {                                      item.Range.Reverse().ForEach(t => source.Insert(startingIndex' t));                                  }                                  else                                  {                                      item.Range.ForEach(source.Add);                                  }                              }                                break;                          }                        case ListChangeReason.Clear:                          {                              source.Clear();                              break;                          }                        case ListChangeReason.Replace:                          {                                var change = item.Item;                              bool hasIndex = change.CurrentIndex >= 0;                              if (hasIndex && change.CurrentIndex == change.PreviousIndex)                              {                                  source[change.CurrentIndex] = change.Current;                              }                              else                              {                                  source.RemoveAt(change.PreviousIndex);                                  source.Insert(change.CurrentIndex' change.Current);                              }                          }                          break;                      case ListChangeReason.Remove:                          {                              var change = item.Item;                              bool hasIndex = change.CurrentIndex >= 0;                              if (hasIndex)                              {                                  source.RemoveAt(change.CurrentIndex);                              }                              else                              {                                  source.Remove(change.Current);                              }                              break;                          }                        case ListChangeReason.RemoveRange:                          {                              if (RxApp.SupportsRangeNotifications && item.Range.Index>=0)                              {                                  source.RemoveRange(item.Range.Index' item.Range.Count);                              }                              else                              {                                  source.RemoveMany(item.Range);                              }                          }                          break;                        case ListChangeReason.Moved:                          {                              var change = item.Item;                              bool hasIndex = change.CurrentIndex >= 0;                              if (!hasIndex)                                  throw new UnspecifiedIndexException("Cannot move as an index was not specified");                                source.Move(change.PreviousIndex' change.CurrentIndex);                              break;                          }                  }
Missing Default,DynamicData.ReactiveUI,SortedReactiveListAdaptor<TObject;TKey>,C:\repos\RolandPheasant_DynamicData.ReactiveUI\Source\DynamicData.ReactiveUI\SortedReactiveListAdaptor.cs,DoUpdate,The following switch statement is missing a default case: switch (change.Reason)                  {                      case ChangeReason.Add:                          _target.Insert(change.CurrentIndex' change.Current);                          break;                      case ChangeReason.Remove:                          _target.RemoveAt(change.CurrentIndex);                          break;                      case ChangeReason.Moved:                          _target.Move(change.PreviousIndex' change.CurrentIndex);                          break;                      case ChangeReason.Update:                          {                              _target.RemoveAt(change.PreviousIndex);                              _target.Insert(change.CurrentIndex' change.Current);                          }                          break;                  }
