Implementation smell,Namespace,Class,File,Method,Description
Long Method,RestApisGen,RestApisCs,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,The method has 142 lines of code.
Long Method,RestApisGen,ApiParent,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The method has 327 lines of code.
Complex Method,RestApisGen,RestApisCs,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,Cyclomatic complexity of the method is 30
Complex Method,RestApisGen,ApiParent,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,Cyclomatic complexity of the method is 63
Long Parameter List,RestApisGen,Method,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Method,The method has 5 parameters. Parameters: definition' parameters' body' hasStaticArgs' takesCancellationToken
Long Statement,RestApisGen,RestApisCs,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,The length of the statement  "                                    writer.WriteLine(ind + "/// <para>- <c>{0}</c> {1} ({2})</para>"' k.Type.Replace("<"' "&lt;").Replace(">"' "&gt;")' k.RealName' k.Kind); " is 136.
Long Statement,RestApisGen,RestApisCs,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,The length of the statement  "                            writer.WriteLine(ind + "/// <param name=\"mode\">Specify whether enumerating goes to the next page or the previous.</param>"); " is 126.
Long Statement,RestApisGen,RestApisCs,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,The length of the statement  "                                writer.WriteLine(ind + "/// <para>- <c>{0}</c> {1} ({2})</para>"' k.Type.Replace("<"' "&lt;").Replace(">"' "&gt;")' k.RealName' k.Kind); " is 136.
Complex Conditional,RestApisGen,ApiParent,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The conditional expression  "!l.StartsWith("#") && !l.StartsWith("//") && !l.All(x => char.IsWhiteSpace(x)) && l != """  is complex.
Magic Number,RestApisGen,Extensions,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Combinate,The following statement contains a magic number: x.Count() < 2
Missing Default,RestApisGen,ApiParent,D:\research\architectureSmells\repos\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following switch statement is missing a default case: switch (mode)                      {                          case Mode.none:                              break;                          case Mode.description:                              now.Description = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.returns:                              now.Returns = string.Join(Environment.NewLine' s);                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.prms:                              now.Params = s.Select(x =>                                  {                                      var y = x.Split(' ');                                      if (y[0].StartsWith("either"))                                      {                                          var j = y[0].Split(new[] { '['' ']' });                                          var index = j.Length > 1 ? int.Parse(j[1]) : 0;                                          var prms = y.Length == 1 ? new Parameter[0]                                              : x.Substring(x.IndexOf(' ')).Split(new[] { ''' }' StringSplitOptions.RemoveEmptyEntries)                                              .Select(z =>                                              {                                                  var e = z.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                                                  var @when = e.Length >= 4 && e[2] == "when" ? z.Substring(z.LastIndexOf(" when ") + 6) : null;                                                  return z.Length == 0 ? null : new Parameter("any one is required"' e[0]' e[1]' @when);                                              })                                              .ToArray();                                          if (!ang.ContainsKey(index))                                              ang[index] = new List<Parameter[]>();                                          ang[index].Add(prms);                                          return prms;                                      }                                      else                                          return new[] { new Parameter(y[0]' y[1]' y[2]' null) };                                  }).SelectMany(_ => _).Where(x => x != null).ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.with:                              foreach (var x in s)                              {                                  if (x.StartsWith("JsonPath="))                                  {                                      now.JsonPath = x.Substring("JsonPath=".Length);                                  }                                  else if (x.StartsWith("OmitExcept="))                                  {                                      now.OmitExcept = x.Substring("OmitExcept=".Length).Split(''');                                  }                                  else if (x.StartsWith("["))                                  {                                      var name = x.Split(new[] { '['' ']' })[1];                                      ats.Add(Tuple.Create(name' x.Replace("[" + name + "]="' "")));                                  }                                  else if (x.StartsWith("Cursor=Forward<"))                                  {                                      now.CursorMode = CursorMode.Forward;                                      now.CursorElementType = x.Remove(x.LastIndexOf('>')).Substring("Cursor=Forward<".Length);                                  }                                  else                                  {                                      throw new FormatException($"'{x}' is not supported.");                                  }                              }                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.jmap:                              jmapi -= l.Count(c => c == '}');                              s.Add(l);                              if(jmapi == 0)                              {                                  // Concatenate lines that do not have '$'                                  for(var index = 1; index < s.Count;)                                  {                                      if(s[index - 1].IndexOf('$') < 0 && s[index].IndexOf('$') < 0)                                      {                                          s[index - 1] += s[index];                                          s.RemoveAt(index);                                      }                                      else                                      {                                          index++;                                      }                                  }                                    now.JsonMap = s.ToArray();                                  s.Clear();                                  mode = Mode.endpoint;                              }                              break;                          case Mode.pe:                              cbs[0] = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.id:                              cbs[1] = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.t:                              cbs[2] = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.stat:                              cbs[3] = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.ape:                              cbs[4] = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.aid:                              cbs[5] = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.at:                              cbs[6] = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.astat:                              cbs[7] = s.ToArray();                              s.Clear();                              mode = Mode.endpoint; break;                          case Mode.endpoint:                              now.CustomBodies = cbs;                              now.Attributes = ats.ToArray();                              now.AnyOneGroups = ang.Values.ToList();                              es.Add(now);                                now = new ApiEndpoint();                              mode = Mode.none;                              s.Clear();                              cbs = new string[][] { null' null' null' null' null' null' null' null };                              ats.Clear();                              ang.Clear();                              break;                      }
