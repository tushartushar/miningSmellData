Implementation smell,Namespace,Class,File,Method,Description
Long Method,RestApisGen,RestApisCs,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,The method has 122 lines of code.
Long Method,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The method has 255 lines of code.
Complex Method,RestApisGen,RestApisCs,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,Cyclomatic complexity of the method is 37
Complex Method,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,Cyclomatic complexity of the method is 31
Long Parameter List,RestApisGen,Method,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Method,The method has 5 parameters.
Long Statement,RestApisGen,RestApisCs,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,The length of the statement  "							writer.WriteLine (ind + "/// <para>- <c>{0}</c> {1} ({2})</para>"' k.Type.Replace ("<"' "&lt;").Replace (">"' "&gt;")' k.RealName' k.Kind); " is 139.
Long Statement,RestApisGen,RestApisCs,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,The length of the statement  "					writer.WriteLine (ind + "/// <param name=\"mode\">Specify whether enumerating goes to the next page or the previous.</param>"); " is 127.
Long Statement,RestApisGen,RestApisCs,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\RestApisCs.cs,Generate,The length of the statement  "						writer.WriteLine (ind + "/// <para>- <c>{0}</c> {1} ({2})</para>"' k.Type.Replace ("<"' "&lt;").Replace (">"' "&gt;")' k.RealName' k.Kind); " is 139.
Complex Conditional,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The conditional expression  "!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != """  is complex.
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: foreach (var i in lines) {  	var l = i.TrimStart ('\t'' ' ');  	if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  		commenting = true;  	} else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  		commenting = false;  		if (l.StartsWith ("#endraw")) {  			es.Add (new RawLines () {  				Lines = s2.ToArray ()  			});  		}  		s2.Clear ();  	} else if (commenting) {  		s2.Add (i);  	} else if (l.StartsWith ("endpoint")) {  		var x = l.Split (' ');  		now.Name = x [2];  		var rt = x [1];  		if (rt.StartsWith ("void")) {  			now.ReturnType = "void";  			now.Type = ApiType.Void;  		} else if (rt.StartsWith ("Listed<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  			now.Type = ApiType.Listed;  		} else if (rt.StartsWith ("Dictionary<")) {  			now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  			now.Type = ApiType.Dictionary;  		} else {  			if (rt.StartsWith ("Cursored<")) {  				now.CursorMode = CursorMode.Both;  				now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  			}  			now.ReturnType = rt;  			now.Type = ApiType.Normal;  		}  		now.Request = x [4];  		now.Uri = now.Request == "Impl" ? null : x [5];  		if (now.Uri.Contains ("{") ?? false) {  			now.ReservedName = now.Uri.Split (new[] {  				'{''  				'}'  			}) [1];  		}  		mode = Mode.endpoint;  	} else if (l.StartsWith ("description")) {  		mode = Mode.description;  	} else if (l.StartsWith ("returns")) {  		mode = Mode.returns;  	} else if (l.StartsWith ("params")) {  		mode = Mode.prms;  	} else if (l.StartsWith ("with")) {  		mode = Mode.with;  	} else if (l.StartsWith ("pe")) {  		mode = Mode.pe;  	} else if (l.StartsWith ("id")) {  		mode = Mode.id;  	} else if (l.StartsWith ("t")) {  		mode = Mode.t;  	} else if (l.StartsWith ("static")) {  		mode = Mode.stat;  	} else if (l.StartsWith ("asyncpe")) {  		mode = Mode.ape;  	} else if (l.StartsWith ("asyncid")) {  		mode = Mode.aid;  	} else if (l.StartsWith ("asynct")) {  		mode = Mode.at;  	} else if (l.StartsWith ("asyncstatic")) {  		mode = Mode.astat;  	} else if (l.StartsWith ("jsonmap")) {  		if (now.Request != "Post" && now.Request != "Impl")  			throw new NotSupportedException ();  		mode = Mode.jmap;  	} else if (mode == Mode.jmap && l.Contains ("{")) {  		jmapi += l.Count (c => c == '{');  		s.Add (l);  	} else if (l.StartsWith ("{")) {  	} else if (l.StartsWith ("}"))  		switch (mode) {  		case Mode.none:  			break;  		case Mode.description:  			now.Description = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.returns:  			now.Returns = string.Join (Environment.NewLine' s);  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.prms:  			now.Params = s.Select (x => {  				var y = x.Split (' ');  				if (y [0].StartsWith ("either")) {  					var j = y [0].Split (new[] {  						'[''  						']'  					});  					var index = j.Length > 1 ? int.Parse (j [1]) : 0;  					var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  						'''  					}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  						var e = z.Split (new[] {  							' '  						}' StringSplitOptions.RemoveEmptyEntries);  						var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  						return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  					}).ToArray ();  					if (!ang.ContainsKey (index))  						ang [index] = new List<Parameter[]> ();  					ang [index].Add (prms);  					return prms;  				} else  					return new[] {  						new Parameter (y [0]' y [1]' y [2]' null)  					};  			}).SelectMany (_ => _).Where (x => x != null).ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.with:  			foreach (var x in s) {  				if (x.StartsWith ("JsonPath=")) {  					now.JsonPath = x.Substring ("JsonPath=".Length);  				} else if (x.StartsWith ("OmitExcept=")) {  					now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  				} else if (x.StartsWith ("[")) {  					var name = x.Split (new[] {  						'[''  						']'  					}) [1];  					ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  				} else if (x.StartsWith ("Cursor=Forward<")) {  					now.CursorMode = CursorMode.Forward;  					now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  				} else {  					throw new FormatException ();  				}  			}  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.jmap:  			jmapi -= l.Count (c => c == '}');  			s.Add (l);  			if (jmapi == 0) {  				// Concatenate lines that do not have '$'  				for (var index = 1; index < s.Count;) {  					if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  						s [index - 1] += s [index];  						s.RemoveAt (index);  					} else {  						index++;  					}  				}  				now.JsonMap = s.ToArray ();  				s.Clear ();  				mode = Mode.endpoint;  			}  			break;  		case Mode.pe:  			cbs [0] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.id:  			cbs [1] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.t:  			cbs [2] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.stat:  			cbs [3] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.ape:  			cbs [4] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.aid:  			cbs [5] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.at:  			cbs [6] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.astat:  			cbs [7] = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  			break;  		case Mode.endpoint:  			now.CustomBodies = cbs;  			now.Attributes = ats.ToArray ();  			now.AnyOneGroups = ang.Values.ToList ();  			es.Add (now);  			now = new ApiEndpoint ();  			mode = Mode.none;  			s.Clear ();  			cbs = new string[][] {  				null'  				null'  				null'  				null'  				null'  				null'  				null'  				null  			};  			ats.Clear ();  			ang.Clear ();  			break;  		}  	else if (mode == Mode.jmap && l.Contains ("}")) {  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  	} else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  		s.Add (l);  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("/*") || l.StartsWith ("#raw")) {  	commenting = true;  } else if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("#endraw") || l.StartsWith ("*/")) {  	commenting = false;  	if (l.StartsWith ("#endraw")) {  		es.Add (new RawLines () {  			Lines = s2.ToArray ()  		});  	}  	s2.Clear ();  } else if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (commenting) {  	s2.Add (i);  } else if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("endpoint")) {  	var x = l.Split (' ');  	now.Name = x [2];  	var rt = x [1];  	if (rt.StartsWith ("void")) {  		now.ReturnType = "void";  		now.Type = ApiType.Void;  	} else if (rt.StartsWith ("Listed<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Listed<".Length);  		now.Type = ApiType.Listed;  	} else if (rt.StartsWith ("Dictionary<")) {  		now.ReturnType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Dictionary<".Length);  		now.Type = ApiType.Dictionary;  	} else {  		if (rt.StartsWith ("Cursored<")) {  			now.CursorMode = CursorMode.Both;  			now.CursorElementType = rt.Remove (rt.LastIndexOf ('>')).Substring ("Cursored<".Length);  		}  		now.ReturnType = rt;  		now.Type = ApiType.Normal;  	}  	now.Request = x [4];  	now.Uri = now.Request == "Impl" ? null : x [5];  	if (now.Uri.Contains ("{") ?? false) {  		now.ReservedName = now.Uri.Split (new[] {  			'{''  			'}'  		}) [1];  	}  	mode = Mode.endpoint;  } else if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: now.Name = x [2];  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: now.Request = x [4];  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: now.Uri = now.Request == "Impl" ? null : x [5];  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("description")) {  	mode = Mode.description;  } else if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("returns")) {  	mode = Mode.returns;  } else if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("params")) {  	mode = Mode.prms;  } else if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("with")) {  	mode = Mode.with;  } else if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("pe")) {  	mode = Mode.pe;  } else if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("id")) {  	mode = Mode.id;  } else if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("t")) {  	mode = Mode.t;  } else if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("static")) {  	mode = Mode.stat;  } else if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncpe")) {  	mode = Mode.ape;  } else if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncid")) {  	mode = Mode.aid;  } else if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asynct")) {  	mode = Mode.at;  } else if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("asyncstatic")) {  	mode = Mode.astat;  } else if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("jsonmap")) {  	if (now.Request != "Post" && now.Request != "Impl")  		throw new NotSupportedException ();  	mode = Mode.jmap;  } else if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (mode == Mode.jmap && l.Contains ("{")) {  	jmapi += l.Count (c => c == '{');  	s.Add (l);  } else if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("{")) {  } else if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (l.StartsWith ("}"))  	switch (mode) {  	case Mode.none:  		break;  	case Mode.description:  		now.Description = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.returns:  		now.Returns = string.Join (Environment.NewLine' s);  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.prms:  		now.Params = s.Select (x => {  			var y = x.Split (' ');  			if (y [0].StartsWith ("either")) {  				var j = y [0].Split (new[] {  					'[''  					']'  				});  				var index = j.Length > 1 ? int.Parse (j [1]) : 0;  				var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  					var e = z.Split (new[] {  						' '  					}' StringSplitOptions.RemoveEmptyEntries);  					var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  					return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  				}).ToArray ();  				if (!ang.ContainsKey (index))  					ang [index] = new List<Parameter[]> ();  				ang [index].Add (prms);  				return prms;  			} else  				return new[] {  					new Parameter (y [0]' y [1]' y [2]' null)  				};  		}).SelectMany (_ => _).Where (x => x != null).ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.with:  		foreach (var x in s) {  			if (x.StartsWith ("JsonPath=")) {  				now.JsonPath = x.Substring ("JsonPath=".Length);  			} else if (x.StartsWith ("OmitExcept=")) {  				now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  			} else if (x.StartsWith ("[")) {  				var name = x.Split (new[] {  					'[''  					']'  				}) [1];  				ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  			} else if (x.StartsWith ("Cursor=Forward<")) {  				now.CursorMode = CursorMode.Forward;  				now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  			} else {  				throw new FormatException ();  			}  		}  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.jmap:  		jmapi -= l.Count (c => c == '}');  		s.Add (l);  		if (jmapi == 0) {  			// Concatenate lines that do not have '$'  			for (var index = 1; index < s.Count;) {  				if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  					s [index - 1] += s [index];  					s.RemoveAt (index);  				} else {  					index++;  				}  			}  			now.JsonMap = s.ToArray ();  			s.Clear ();  			mode = Mode.endpoint;  		}  		break;  	case Mode.pe:  		cbs [0] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.id:  		cbs [1] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.t:  		cbs [2] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.stat:  		cbs [3] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.ape:  		cbs [4] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.aid:  		cbs [5] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.at:  		cbs [6] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.astat:  		cbs [7] = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  		break;  	case Mode.endpoint:  		now.CustomBodies = cbs;  		now.Attributes = ats.ToArray ();  		now.AnyOneGroups = ang.Values.ToList ();  		es.Add (now);  		now = new ApiEndpoint ();  		mode = Mode.none;  		s.Clear ();  		cbs = new string[][] {  			null'  			null'  			null'  			null'  			null'  			null'  			null'  			null  		};  		ats.Clear ();  		ang.Clear ();  		break;  	}  else if (mode == Mode.jmap && l.Contains ("}")) {  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  } else if (!l.StartsWith ("#") && !l.StartsWith ("//") && !l.All (x => char.IsWhiteSpace (x)) && l != "")  	s.Add (l);  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: now.Params = s.Select (x => {  	var y = x.Split (' ');  	if (y [0].StartsWith ("either")) {  		var j = y [0].Split (new[] {  			'[''  			']'  		});  		var index = j.Length > 1 ? int.Parse (j [1]) : 0;  		var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  			var e = z.Split (new[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  			return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  		}).ToArray ();  		if (!ang.ContainsKey (index))  			ang [index] = new List<Parameter[]> ();  		ang [index].Add (prms);  		return prms;  	} else  		return new[] {  			new Parameter (y [0]' y [1]' y [2]' null)  		};  }).SelectMany (_ => _).Where (x => x != null).ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: now.Params = s.Select (x => {  	var y = x.Split (' ');  	if (y [0].StartsWith ("either")) {  		var j = y [0].Split (new[] {  			'[''  			']'  		});  		var index = j.Length > 1 ? int.Parse (j [1]) : 0;  		var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  			var e = z.Split (new[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  			return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  		}).ToArray ();  		if (!ang.ContainsKey (index))  			ang [index] = new List<Parameter[]> ();  		ang [index].Add (prms);  		return prms;  	} else  		return new[] {  			new Parameter (y [0]' y [1]' y [2]' null)  		};  }).SelectMany (_ => _).Where (x => x != null).ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: now.Params = s.Select (x => {  	var y = x.Split (' ');  	if (y [0].StartsWith ("either")) {  		var j = y [0].Split (new[] {  			'[''  			']'  		});  		var index = j.Length > 1 ? int.Parse (j [1]) : 0;  		var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  			var e = z.Split (new[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  			return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  		}).ToArray ();  		if (!ang.ContainsKey (index))  			ang [index] = new List<Parameter[]> ();  		ang [index].Add (prms);  		return prms;  	} else  		return new[] {  			new Parameter (y [0]' y [1]' y [2]' null)  		};  }).SelectMany (_ => _).Where (x => x != null).ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: now.Params = s.Select (x => {  	var y = x.Split (' ');  	if (y [0].StartsWith ("either")) {  		var j = y [0].Split (new[] {  			'[''  			']'  		});  		var index = j.Length > 1 ? int.Parse (j [1]) : 0;  		var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  			var e = z.Split (new[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  			return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  		}).ToArray ();  		if (!ang.ContainsKey (index))  			ang [index] = new List<Parameter[]> ();  		ang [index].Add (prms);  		return prms;  	} else  		return new[] {  			new Parameter (y [0]' y [1]' y [2]' null)  		};  }).SelectMany (_ => _).Where (x => x != null).ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (y [0].StartsWith ("either")) {  	var j = y [0].Split (new[] {  		'[''  		']'  	});  	var index = j.Length > 1 ? int.Parse (j [1]) : 0;  	var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  		var e = z.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  		return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  	}).ToArray ();  	if (!ang.ContainsKey (index))  		ang [index] = new List<Parameter[]> ();  	ang [index].Add (prms);  	return prms;  } else  	return new[] {  		new Parameter (y [0]' y [1]' y [2]' null)  	};  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (y [0].StartsWith ("either")) {  	var j = y [0].Split (new[] {  		'[''  		']'  	});  	var index = j.Length > 1 ? int.Parse (j [1]) : 0;  	var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  		var e = z.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  		return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  	}).ToArray ();  	if (!ang.ContainsKey (index))  		ang [index] = new List<Parameter[]> ();  	ang [index].Add (prms);  	return prms;  } else  	return new[] {  		new Parameter (y [0]' y [1]' y [2]' null)  	};  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (y [0].StartsWith ("either")) {  	var j = y [0].Split (new[] {  		'[''  		']'  	});  	var index = j.Length > 1 ? int.Parse (j [1]) : 0;  	var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  		var e = z.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  		return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  	}).ToArray ();  	if (!ang.ContainsKey (index))  		ang [index] = new List<Parameter[]> ();  	ang [index].Add (prms);  	return prms;  } else  	return new[] {  		new Parameter (y [0]' y [1]' y [2]' null)  	};  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: if (y [0].StartsWith ("either")) {  	var j = y [0].Split (new[] {  		'[''  		']'  	});  	var index = j.Length > 1 ? int.Parse (j [1]) : 0;  	var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  		'''  	}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  		var e = z.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries);  		var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  		return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  	}).ToArray ();  	if (!ang.ContainsKey (index))  		ang [index] = new List<Parameter[]> ();  	ang [index].Add (prms);  	return prms;  } else  	return new[] {  		new Parameter (y [0]' y [1]' y [2]' null)  	};  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: return new[] {  	new Parameter (y [0]' y [1]' y [2]' null)  };  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: cbs [2] = s.ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: cbs [3] = s.ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: cbs [4] = s.ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: cbs [5] = s.ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: cbs [6] = s.ToArray ();  
Magic Number,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following statement contains a magic number: cbs [7] = s.ToArray ();  
Magic Number,RestApisGen,Extensions,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Combinate,The following statement contains a magic number: if (x.Count () < 2)  	return Flatten (x);  
Missing Default,RestApisGen,ApiParent,F:\newReposMay17\CoreTweet_CoreTweet\RestApisGen\DataType.cs,Parse,The following switch statement is missing a default case: switch (mode) {  case Mode.none:  	break;  case Mode.description:  	now.Description = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.returns:  	now.Returns = string.Join (Environment.NewLine' s);  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.prms:  	now.Params = s.Select (x => {  		var y = x.Split (' ');  		if (y [0].StartsWith ("either")) {  			var j = y [0].Split (new[] {  				'[''  				']'  			});  			var index = j.Length > 1 ? int.Parse (j [1]) : 0;  			var prms = y.Length == 1 ? new Parameter[0] : x.Substring (x.IndexOf (' ')).Split (new[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries).Select (z => {  				var e = z.Split (new[] {  					' '  				}' StringSplitOptions.RemoveEmptyEntries);  				var @when = e.Length >= 4 && e [2] == "when" ? z.Substring (z.LastIndexOf (" when ") + 6) : null;  				return z.Length == 0 ? null : new Parameter ("any one is required"' e [0]' e [1]' @when);  			}).ToArray ();  			if (!ang.ContainsKey (index))  				ang [index] = new List<Parameter[]> ();  			ang [index].Add (prms);  			return prms;  		} else  			return new[] {  				new Parameter (y [0]' y [1]' y [2]' null)  			};  	}).SelectMany (_ => _).Where (x => x != null).ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.with:  	foreach (var x in s) {  		if (x.StartsWith ("JsonPath=")) {  			now.JsonPath = x.Substring ("JsonPath=".Length);  		} else if (x.StartsWith ("OmitExcept=")) {  			now.OmitExcept = x.Substring ("OmitExcept=".Length).Split (''');  		} else if (x.StartsWith ("[")) {  			var name = x.Split (new[] {  				'[''  				']'  			}) [1];  			ats.Add (Tuple.Create (name' x.Replace ("[" + name + "]="' "")));  		} else if (x.StartsWith ("Cursor=Forward<")) {  			now.CursorMode = CursorMode.Forward;  			now.CursorElementType = x.Remove (x.LastIndexOf ('>')).Substring ("Cursor=Forward<".Length);  		} else {  			throw new FormatException ();  		}  	}  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.jmap:  	jmapi -= l.Count (c => c == '}');  	s.Add (l);  	if (jmapi == 0) {  		// Concatenate lines that do not have '$'  		for (var index = 1; index < s.Count;) {  			if (s [index - 1].IndexOf ('$') < 0 && s [index].IndexOf ('$') < 0) {  				s [index - 1] += s [index];  				s.RemoveAt (index);  			} else {  				index++;  			}  		}  		now.JsonMap = s.ToArray ();  		s.Clear ();  		mode = Mode.endpoint;  	}  	break;  case Mode.pe:  	cbs [0] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.id:  	cbs [1] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.t:  	cbs [2] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.stat:  	cbs [3] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.ape:  	cbs [4] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.aid:  	cbs [5] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.at:  	cbs [6] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.astat:  	cbs [7] = s.ToArray ();  	s.Clear ();  	mode = Mode.endpoint;  	break;  case Mode.endpoint:  	now.CustomBodies = cbs;  	now.Attributes = ats.ToArray ();  	now.AnyOneGroups = ang.Values.ToList ();  	es.Add (now);  	now = new ApiEndpoint ();  	mode = Mode.none;  	s.Clear ();  	cbs = new string[][] {  		null'  		null'  		null'  		null'  		null'  		null'  		null'  		null  	};  	ats.Clear ();  	ang.Clear ();  	break;  }  
