Implementation smell,Namespace,Class,File,Method,Description
Long Method,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The method has 118 lines of code.
Complex Method,FreePIE.Core.Plugins,VJoyGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VJoyPlugin.cs,VJoyGlobalHolder,Cyclomatic complexity of the method is 8
Complex Method,FreePIE.Core.Plugins,WiimoteGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\WiimotePlugin.cs,OnWiimoteDataReceived,Cyclomatic complexity of the method is 9
Complex Method,FreePIE.Core.Plugins.Wiimote,CapabilitiesGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\CapabilitiesGlobal.cs,ToString,Cyclomatic complexity of the method is 8
Long Parameter List,FreePIE.Core.Plugins,MousePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\MousePlugin.cs,MouseInput,The method has 5 parameters. Parameters: x' y' data' t' flag
Long Parameter List,FreePIE.Core.Plugins,VuzixAPI,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VuzixTrackerPlugin.cs,IWRGet6DTracking,The method has 6 parameters. Parameters: yaw' pitch' roll' x' y' z
Long Parameter List,FreePIE.Core.Plugins,WiimoteGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\WiimotePlugin.cs,WiimoteGlobal,The method has 5 parameters. Parameters: plugin' data' updaters' capabilitiesUpdaters' statusUpdaters
Long Parameter List,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The method has 9 parameters. Parameters: gx' gy' gz' ax' ay' az' mx' my' mz
Long Parameter List,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The method has 6 parameters. Parameters: gx' gy' gz' ax' ay' az
Long Parameter List,FreePIE.Core.Plugins.SensorFusion,Quaternion,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\Quaternion.cs,Update,The method has 5 parameters. Parameters: w' x' y' z' conjugate
Long Parameter List,FreePIE.Core.Plugins.TrackIR,NPClientSpoof,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\NPClientSpoof.cs,SetPosition,The method has 6 parameters. Parameters: x' y' z' roll' pitch' yaw
Long Parameter List,FreePIE.Core.Plugins.Wiimote,DolphiimoteDll,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteDLL.cs,Init,The method has 5 parameters. Parameters: newData' wiimoteConnectionChanged' capabilitiesChanged' statusChanged' newLogMessage
Long Parameter List,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,map,The method has 5 parameters. Parameters: value' istart' istop' ostart' ostop
Long Parameter List,FreePIE.Core.Plugins.Wiimote,IMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,HandleIMUData,The method has 6 parameters. Parameters: yawDown' pitchLeft' rollLeft' accX' accY' accZ
Long Parameter List,FreePIE.Core.Plugins.Wiimote,SimpleIntegrationMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,HandleIMUData,The method has 6 parameters. Parameters: yawDown' pitchLeft' rollLeft' accX' accY' accZ
Long Parameter List,FreePIE.Core.Plugins.Wiimote,MahonyMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,HandleIMUData,The method has 6 parameters. Parameters: yawDown' pitchLeft' rollLeft' accX' accY' accZ
Long Parameter List,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,tss_setStreamingTiming,The method has 5 parameters. Parameters: device' interval' duration' delay' timestamp
Long Identifier,FreePIE.Core.Plugins,PFS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,,The length of the parameter FREESPACE_ERROR_SEND_TOO_LARGE is 30.
Long Identifier,FreePIE.Core.Plugins,PFS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,,The length of the parameter FREESPACE_ERROR_INVALID_DEVICE is 30.
Long Identifier,FreePIE.Core.Plugins,PFS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,,The length of the parameter FREESPACE_ERROR_RECEIVE_BUFFER_TOO_SMALL is 40.
Long Identifier,FreePIE.Core.Plugins,PFS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,,The length of the parameter FREESPACE_ERROR_COULD_NOT_CREATE_THREAD is 39.
Long Identifier,FreePIE.Core.Plugins,PFS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,,The length of the parameter FREESPACE_ERROR_BUFFER_TOO_SMALL is 32.
Long Identifier,FreePIE.Core.Plugins,PFS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,,The length of the parameter FREESPACE_ERROR_MALFORMED_MESSAGE is 33.
Long Identifier,FreePIE.Core.Plugins,PFS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,,The length of the parameter FREESPACE_ERROR_INVALID_HID_PROTOCOL_VERSION is 44.
Long Identifier,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,,The length of the parameter nunchuckAccelerationMagnitudes is 30.
Long Statement,FreePIE.Core.Plugins,MousePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\MousePlugin.cs,DoBeforeNextExecute,The length of the statement  "                input[0].mi = MouseInput((int)deltaXOut' (int)deltaYOut' (uint)wheel' 0' MouseKeyIO.MOUSEEVENTF_MOVE | MouseKeyIO.MOUSEEVENTF_WHEEL); " is 133.
Long Statement,FreePIE.Core.Plugins,TobiiEyeXPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TobiiEyeXPlugin.cs,EyeDataStreamOnNext,The length of the statement  "            var rightEyePositionMm = new Vector3((float)eyePositionEventArgs.RightEye.X' (float)eyePositionEventArgs.RightEye.Y' (float)eyePositionEventArgs.RightEye.Z); " is 157.
Long Statement,FreePIE.Core.Plugins,TobiiEyeXPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TobiiEyeXPlugin.cs,EyeDataStreamOnNext,The length of the statement  "            var leftEyePositionMm = new Vector3((float)eyePositionEventArgs.LeftEye.X' (float)eyePositionEventArgs.LeftEye.Y' (float)eyePositionEventArgs.LeftEye.Z); " is 153.
Long Statement,FreePIE.Core.Plugins,TobiiEyeXPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TobiiEyeXPlugin.cs,EyeDataStreamOnNext,The length of the statement  "            var rightEyePositionNorm = new Vector3((float)eyePositionEventArgs.RightEyeNormalized.X' (float)eyePositionEventArgs.RightEyeNormalized.Y' (float)eyePositionEventArgs.RightEyeNormalized.Z); " is 189.
Long Statement,FreePIE.Core.Plugins,TobiiEyeXPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TobiiEyeXPlugin.cs,EyeDataStreamOnNext,The length of the statement  "            var leftEyePositionNorm = new Vector3((float)eyePositionEventArgs.LeftEyeNormalized.X' (float)eyePositionEventArgs.LeftEyeNormalized.Y' (float)eyePositionEventArgs.LeftEyeNormalized.Z); " is 185.
Long Statement,FreePIE.Core.Plugins,VJoyGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VJoyPlugin.cs,SetButton,The length of the statement  "                throw new Exception(string.Format("Maximum buttons are {0}. You need to increase number of buttons in vJoy config"' maxButtons)); " is 129.
Long Statement,FreePIE.Core.Plugins,VJoyGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VJoyPlugin.cs,SetDirectionalPov,The length of the statement  "                throw new Exception(string.Format("Maximum digital POV hats are {0}. You need to increase number of digital POV hats in vJoy config"' maxDirPov)); " is 146.
Long Statement,FreePIE.Core.Plugins,VJoyGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VJoyPlugin.cs,SetContinuousPov,The length of the statement  "                throw new Exception(string.Format("Maximum analog POV sticks are {0}. You need to increase number of analog POV hats in vJoy config"' maxContinuousPov)); " is 153.
Long Statement,FreePIE.Core.Plugins,WiimotePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\WiimotePlugin.cs,CreateGlobal,The length of the statement  "            var applicationDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' applicationDataSubPath); " is 133.
Long Statement,FreePIE.Core.Plugins,WiimotePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\WiimotePlugin.cs,CreateGlobal,The length of the statement  "            return Enumerable.Range(0' 4).Select(i => new WiimoteGlobal(this' wiimoteBridge.GetData((uint)i)' globalUpdators' globalUpdatorsCapabilities' globalUpdatorsStatus)).ToArray(); " is 175.
Long Statement,FreePIE.Core.Plugins.MemoryMapping,TrackIRWorker,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\MemoryMapping\TrackIRWorker.cs,CallStartupNPClientFunctions,The length of the statement  "            Log("Calling dll with the following values - WindowHandle: " + freePieWindowHandle + " Data: " + data + " ProfileId: " +profileId ); " is 132.
Long Statement,FreePIE.Core.Plugins.MemoryMapping,WorkerProcess<TWorker>,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\MemoryMapping\WorkerProcess.cs,GenerateOrGetAssemblyForType,The length of the statement  "                OutputAssembly = Path.GetTempPath() + "FreePIE.WorkerHost." + typeof(TWorker).Name + "." + Path.GetFileNameWithoutExtension(Path.GetTempFileName()) + ".exe"' " is 157.
Long Statement,FreePIE.Core.Plugins.MemoryMapping,WorkerProcess<TWorker>,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\MemoryMapping\WorkerProcess.cs,GenerateOrGetAssemblyForType,The length of the statement  "                ReferencedAssemblies = { workerTypeAssemblyPath' typeof(EnumerableQuery).Assembly.Location' typeof(int).Assembly.Location } " is 123.
Long Statement,FreePIE.Core.Plugins.MemoryMapping,WorkerProcess<TWorker>,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\MemoryMapping\WorkerProcess.cs,GenerateOrGetAssemblyForType,The length of the statement  "            File.Copy(workerTypeAssemblyPath' Path.Combine(Path.GetDirectoryName(res.PathToAssembly)' Path.GetFileName(workerTypeAssemblyPath))' true); " is 139.
Long Statement,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The length of the statement  "            float q1 = Quaternion[0]' q2 = Quaternion[1]' q3 = Quaternion[2]' q4 = Quaternion[3];   // short name local variable for readability " is 132.
Long Statement,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The length of the statement  "            float q1 = Quaternion[0]' q2 = Quaternion[1]' q3 = Quaternion[2]' q4 = Quaternion[3];   // short name local variable for readability " is 132.
Long Statement,FreePIE.Core.Plugins.TrackIR,HeadPoseData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\HeadPoseData.cs,Equals,The length of the statement  "            return X.Equals(other.X) && Y.Equals(other.Y) && Z.Equals(other.Z) && Yaw.Equals(other.Yaw) && Pitch.Equals(other.Pitch) && Roll.Equals(other.Roll); " is 148.
Long Statement,FreePIE.Core.Plugins.TrackIR,NPClientSpoof,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\NPClientSpoof.cs,SetupRealTrackIRDll,The length of the statement  "            var worker = new WorkerProcess<TrackIRWorker>(Path.Combine(realDllPath' NPClientName).Quote() + " " + Process.GetCurrentProcess().MainWindowHandle.ToInt64() + " " + doLog); " is 172.
Long Statement,FreePIE.Core.Plugins.TrackIR,NPClientSpoof,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\NPClientSpoof.cs,ReadPosition,The length of the statement  "            output = new HeadPoseData { Yaw = headpose.Yaw' Pitch = headpose.Pitch' Roll = headpose.Roll' X = headpose.X' Y = headpose.Y' Z = headpose.Z }; " is 143.
Long Statement,FreePIE.Core.Plugins.TrackIR,NPClientSpoof,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\NPClientSpoof.cs,ReadTrackIRData,The length of the statement  "            output = new InternalHeadPoseData { Yaw = data.Yaw' Pitch = data.Pitch' Roll = data.Roll' X = data.X' Y = data.Y' Z = data.Z }; " is 127.
Long Statement,FreePIE.Core.Plugins.Wiimote,BalanceBoardSensorList,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\BalanceBoard.cs,ToString,The length of the statement  "            return String.Format("topLeft: {0}'\ntopRight: {1}'\nbottomLeft: {2}'\nbottomRight: {3}"' topLeft' topRight' bottomLeft' bottomRight); " is 134.
Long Statement,FreePIE.Core.Plugins.Wiimote,DolphiimoteDll,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteDLL.cs,Init,The length of the statement  "            capabilitiesCallback = (wiimote' capabilities' user) => capabilitiesChanged(wiimote' MarshalType<DolphiimoteCapabilities>(capabilities)); " is 137.
Long Statement,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,CalculateMotionPlus,The length of the statement  "            return new CalibratedValue<Gyro>(gyro.DidCalibrate' new Gyro((motionplus.slow_modes & 0x1) == 0x1 ? gyro.Value.x : gyro.Value.x * fastModeFactor' " is 145.
Long Statement,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The length of the statement  "            Acceleration = calibration.NormalizeAcceleration(DateTime.Now' rawData.acceleration.x' rawData.acceleration.y' rawData.acceleration.z); " is 135.
Long Statement,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The length of the statement  "                fuser.HandleIMUData(MotionPlus.Value.x' MotionPlus.Value.y' MotionPlus.Value.z' Acceleration.Value.x' Acceleration.Value.y' Acceleration.Value.z); " is 146.
Long Statement,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The length of the statement  "                        raw = rawData.balance_board.raw.bottom_left + rawData.balance_board.raw.bottom_right + rawData.balance_board.raw.top_left + rawData.balance_board.raw.top_right " is 159.
Long Statement,FreePIE.Core.Plugins.Wiimote,GuitarGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\ExtensionGlobal.cs,ToString,The length of the statement  "            return String.Format("Stick: {0}' Whammy: {1}' TapBar: {2}' GuitarHeroThree: {3}' Buttons: {4}"' stick' whammy' tapbar' isGH3' buttons); " is 136.
Long Statement,FreePIE.Core.Plugins.Wiimote,ClassicControllerGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\ExtensionGlobal.cs,ToString,The length of the statement  "            return String.Format("LeftStick: {0}'  RightStick: {1}' LeftTrigger: {2}' RightTrigger: {3}' Buttons: {4}"' leftStick' rightStick' leftTrigger' rightTrigger' buttons); " is 167.
Long Statement,FreePIE.Core.Plugins.Wiimote,TapBar,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\Guitar.cs,ToString,The length of the statement  "            return String.Format("green: {0}' red {1}' yellow {2}' blue {3}' orange {4}"' isGreen()' isRed()' isYellow()' isBlue()' isOrange()); " is 132.
Long Statement,FreePIE.Core.Plugins.Wiimote,MahonyMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,HandleIMUData,The length of the statement  "                mahonyAHRS.Update((float)(rollLeft * (Math.PI / 180))' (float)(pitchLeft * (Math.PI / 180))' (float)(yawDown * (Math.PI / 180))' (float)accX' (float)accY' (float)accZ); " is 168.
Long Statement,FreePIE.Core.Plugins.Wiimote,Integrator,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\Integrator.cs,Update,The length of the statement  "                throw new InvalidOperationException("Number of differences in the input list must equal the amount of values desired: " + Values.Length); " is 137.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,IsStationary,The length of the statement  "            return accelerationMagnitudes.Size > 10 && accelerationMagnitudes.DurationStable(WiimoteStationaryDeltaEpsilon) > TimeSpan.FromMilliseconds(500); " is 145.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,NormalizeNunchuckStick,The length of the statement  "            return NunchuckStickCalibrated ? new AnalogStick(TransformLinear(NunchuckStick.X' stickX)' TransformLinear(NunchuckStick.Y' stickY)) : new AnalogStick(0' 0); " is 157.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,NormalizeGuitarStick,The length of the statement  "            return GuitarStickCalibrated ? new AnalogStick(TransformLinear(GuitarStick.X' stickX)' TransformLinear(GuitarStick.Y' stickY)) : new AnalogStick(0' 0); " is 151.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,NormalizeClassicControllerRightStick,The length of the statement  "            return ClassicControllerRightStickCalibrated ? new AnalogStick(TransformLinear(ClassicControllerRightStick.X' stickX)' TransformLinear(ClassicControllerRightStick.Y' stickY)) : new AnalogStick(0' 0); " is 199.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,NormalizeClassicControllerLeftStick,The length of the statement  "            return ClassicControllerLeftStickCalibrated ? new AnalogStick(TransformLinear(ClassicControllerLeftStick.X' stickX)' TransformLinear(ClassicControllerLeftStick.Y' stickY)) : new AnalogStick(0' 0); " is 196.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,NormalizeClassicControllerRightTrigger,The length of the statement  "            return ClassicControllerRightTriggerCalibrated ? new AnalogTrigger(TransformLinear(ClassicControllerRightTrigger' triggerX)) : new AnalogTrigger(0); " is 148.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,NormalizeClassicControllerLeftTrigger,The length of the statement  "            return ClassicControllerLeftTriggerCalibrated ? new AnalogTrigger(TransformLinear(ClassicControllerLeftTrigger' triggerX)) : new AnalogTrigger(0); " is 146.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,IsNunchuckStationary,The length of the statement  "            return nunchuckAccelerationMagnitudes.Size > 10 && nunchuckAccelerationMagnitudes.DurationStable(WiimoteStationaryDeltaEpsilon) > TimeSpan.FromMilliseconds(1000); " is 162.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,TakeClassicControllerRightStickCalibrationSnapshot,The length of the statement  "            ClassicControllerRightStick = new TwoPointCalibration(new LinearCalibration(1' stickX)' new LinearCalibration(1' stickY)); " is 122.
Long Statement,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,TakeClassicControllerLeftStickCalibrationSnapshot,The length of the statement  "            ClassicControllerLeftStick = new TwoPointCalibration(new LinearCalibration(1' stickX)' new LinearCalibration(1' stickY)); " is 121.
Magic Number,FreePIE.Core.Plugins,AhrsImuPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AhrsImuPlugin.cs,Init,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,FreePIE.Core.Plugins,AhrsImuPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AhrsImuPlugin.cs,Init,The following statement contains a magic number: while (serialPort.BytesToRead < sync.Length && !serialPort.ReadLine().Contains(sync))              {                  if (stopwatch.ElapsedMilliseconds > 100)                      throw new Exception(string.Format("No hardware connected to port {0} with AHRS IMU protocol"' port));              }
Magic Number,FreePIE.Core.Plugins,AhrsImuPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AhrsImuPlugin.cs,Init,The following statement contains a magic number: buffer = new byte[4];
Magic Number,FreePIE.Core.Plugins,AhrsImuPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AhrsImuPlugin.cs,Read,The following statement contains a magic number: while (serialPort.BytesToRead >= 12)              {                  var data = Data;                  data.Yaw = ReadFloat(serialPort' buffer);                  data.Pitch = ReadFloat(serialPort' buffer);                  data.Roll = ReadFloat(serialPort' buffer);                    Data = data;                  newData = true;              }
Magic Number,FreePIE.Core.Plugins,AndroidPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,GetProperty,The following statement contains a magic number: if(index == 0)              {                  property.Name = "UDPPort";                  property.Caption = "UDP Port";                  property.DefaultValue = 5555;                  property.HelpText = "UDP Port number that the Wireless IMU app transmits on (default 5555)";                    return true;              }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: var index = 2;
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (raw)                  {                      var ax = Raw.ax = GetFloat(bytes' index' 0);                      var ay = Raw.ay = GetFloat(bytes' index' 4);                      var az = Raw.az = GetFloat(bytes' index' 8);                        var gx = Raw.gx = GetFloat(bytes' index' 12);                      var gy = Raw.gy = GetFloat(bytes' index' 16);                      var gz = Raw.gz = GetFloat(bytes' index' 20);                        var mx = Raw.mx = GetFloat(bytes' index' 24);                      var my = Raw.my = GetFloat(bytes' index' 28);                      var mz = Raw.mz = GetFloat(bytes' index' 32);                        ahrs.Update((float)gx' (float)gy' (float)gz' (float)ax' (float)ay' (float)az' (float)mx' (float)my' (float)mz);                      quaternion.Update(ahrs.Quaternion[0]' ahrs.Quaternion[1]' ahrs.Quaternion[2]' ahrs.Quaternion[3]);                        index += 36;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (orientation)                  {                      GoogleYaw = GetFloat(bytes' index' 0);                      GooglePitch = GetFloat(bytes' index' 4);                      GoogleRoll = GetFloat(bytes' index' 8);                      index += 12;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (orientation)                  {                      GoogleYaw = GetFloat(bytes' index' 0);                      GooglePitch = GetFloat(bytes' index' 4);                      GoogleRoll = GetFloat(bytes' index' 8);                      index += 12;                  }
Magic Number,FreePIE.Core.Plugins,AndroidGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\AndroidPlugin.cs,Update,The following statement contains a magic number: if (orientation)                  {                      GoogleYaw = GetFloat(bytes' index' 0);                      GooglePitch = GetFloat(bytes' index' 4);                      GoogleRoll = GetFloat(bytes' index' 8);                      index += 12;                  }
Magic Number,FreePIE.Core.Plugins,ApplePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ApplePlugin.cs,GetProperty,The following statement contains a magic number: if (index == 0)              {                  property.Name = "UDPPort";                  property.Caption = "UDP Port";                  property.DefaultValue = 10552;                  property.HelpText = "UDP Port number that Sensor Data App transmits on (default 10552)";                  return true;              }
Magic Number,FreePIE.Core.Plugins,ApplePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ApplePlugin.cs,RunSensorPoll,The following statement contains a magic number: try              {                  var peer = new IPEndPoint(IPAddress.Any' 0);                  UdpSock = new UdpClient(UdpPort);                    char[] delims = new char[] {'''};                    Stopped = false;                  OnStarted(this' new EventArgs());                  var started = DateTime.Now;                    while (!Stopped)                  {                        Byte[] bytes = UdpSock.Receive(ref peer);                      int len = bytes.Length;                      if (bytes[len - 2] == '\r') // remove the \r\n                          len -= 2;                        string data = Encoding.ASCII.GetString(bytes' 0' len);                      String[] fields = data.Split(delims);                        if (fields[0] == "Timestamp")                      {                          // The first message is a field definition list                          // Parse it to determine which data is present and where it is going to be located                          for (int i = 1; i < fields.Length; i++)                          {                              // It looksl like there are bugs below but there are not.                              // The iPhone app seems to orient phone with the long axis running east/west                              // while I assume the phone should have the long axis running north/south                              // This difference in perspective' reverses the definition of pitch and roll                              if (fields[i] == "Roll")                                  PitchIndex = i;                              else if (fields[i] == "Pitch")                                  RollIndex = i;                              else if (fields[i] == "Yaw")                                  YawIndex = i;                              YawPeriod = 0;                          }                            columnOrderConfigured = true;                      }                      else if(columnOrderConfigured)                      {                          try                          {                              RollSample = Parse(fields[RollIndex]);                              PitchSample = Parse(fields[PitchIndex]);                              double previous_yaw = YawSample;                              YawSample = Parse(fields[YawIndex]);                                //DateTime now = DateTime.Now;                              //TimeSpan span = now - start;                              //System.Console.WriteLine(span.TotalMilliseconds + " sampled yaw = " + YawSample);                              //start = now;                                double delta = YawSample - previous_yaw;                              double HALF_CIRCLE = Math.PI;                              if (Math.Abs(delta) > HALF_CIRCLE)                              {                                  // We turned across the discontinuity at 180 degrees so increment                                  // the period counter in the probably direction of angular motion                                  if (delta > 0)                                      YawPeriod--;                                  else                                      YawPeriod++;                              }                          }                          catch (Exception e)                          {                              throw new Exception(string.Format("String '{0}' was not parsed correctly: {1}"' data' e.Message));                          }                      }                        if (!columnOrderConfigured && DateTime.Now - started > TimeSpan.FromSeconds(10))                          throw new Exception("Sensor app did not send column order in expected time frame");                  }              }              catch (SocketException err)              {                  // A graceful shutdown calls close socket and throws an exception while blocked in Receive()                  // Ignore this exception unless it was not generated during shutdown sequence                  if (!Stopped)                      throw err;              }
Magic Number,FreePIE.Core.Plugins,ApplePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ApplePlugin.cs,RunSensorPoll,The following statement contains a magic number: try              {                  var peer = new IPEndPoint(IPAddress.Any' 0);                  UdpSock = new UdpClient(UdpPort);                    char[] delims = new char[] {'''};                    Stopped = false;                  OnStarted(this' new EventArgs());                  var started = DateTime.Now;                    while (!Stopped)                  {                        Byte[] bytes = UdpSock.Receive(ref peer);                      int len = bytes.Length;                      if (bytes[len - 2] == '\r') // remove the \r\n                          len -= 2;                        string data = Encoding.ASCII.GetString(bytes' 0' len);                      String[] fields = data.Split(delims);                        if (fields[0] == "Timestamp")                      {                          // The first message is a field definition list                          // Parse it to determine which data is present and where it is going to be located                          for (int i = 1; i < fields.Length; i++)                          {                              // It looksl like there are bugs below but there are not.                              // The iPhone app seems to orient phone with the long axis running east/west                              // while I assume the phone should have the long axis running north/south                              // This difference in perspective' reverses the definition of pitch and roll                              if (fields[i] == "Roll")                                  PitchIndex = i;                              else if (fields[i] == "Pitch")                                  RollIndex = i;                              else if (fields[i] == "Yaw")                                  YawIndex = i;                              YawPeriod = 0;                          }                            columnOrderConfigured = true;                      }                      else if(columnOrderConfigured)                      {                          try                          {                              RollSample = Parse(fields[RollIndex]);                              PitchSample = Parse(fields[PitchIndex]);                              double previous_yaw = YawSample;                              YawSample = Parse(fields[YawIndex]);                                //DateTime now = DateTime.Now;                              //TimeSpan span = now - start;                              //System.Console.WriteLine(span.TotalMilliseconds + " sampled yaw = " + YawSample);                              //start = now;                                double delta = YawSample - previous_yaw;                              double HALF_CIRCLE = Math.PI;                              if (Math.Abs(delta) > HALF_CIRCLE)                              {                                  // We turned across the discontinuity at 180 degrees so increment                                  // the period counter in the probably direction of angular motion                                  if (delta > 0)                                      YawPeriod--;                                  else                                      YawPeriod++;                              }                          }                          catch (Exception e)                          {                              throw new Exception(string.Format("String '{0}' was not parsed correctly: {1}"' data' e.Message));                          }                      }                        if (!columnOrderConfigured && DateTime.Now - started > TimeSpan.FromSeconds(10))                          throw new Exception("Sensor app did not send column order in expected time frame");                  }              }              catch (SocketException err)              {                  // A graceful shutdown calls close socket and throws an exception while blocked in Receive()                  // Ignore this exception unless it was not generated during shutdown sequence                  if (!Stopped)                      throw err;              }
Magic Number,FreePIE.Core.Plugins,ApplePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ApplePlugin.cs,RunSensorPoll,The following statement contains a magic number: try              {                  var peer = new IPEndPoint(IPAddress.Any' 0);                  UdpSock = new UdpClient(UdpPort);                    char[] delims = new char[] {'''};                    Stopped = false;                  OnStarted(this' new EventArgs());                  var started = DateTime.Now;                    while (!Stopped)                  {                        Byte[] bytes = UdpSock.Receive(ref peer);                      int len = bytes.Length;                      if (bytes[len - 2] == '\r') // remove the \r\n                          len -= 2;                        string data = Encoding.ASCII.GetString(bytes' 0' len);                      String[] fields = data.Split(delims);                        if (fields[0] == "Timestamp")                      {                          // The first message is a field definition list                          // Parse it to determine which data is present and where it is going to be located                          for (int i = 1; i < fields.Length; i++)                          {                              // It looksl like there are bugs below but there are not.                              // The iPhone app seems to orient phone with the long axis running east/west                              // while I assume the phone should have the long axis running north/south                              // This difference in perspective' reverses the definition of pitch and roll                              if (fields[i] == "Roll")                                  PitchIndex = i;                              else if (fields[i] == "Pitch")                                  RollIndex = i;                              else if (fields[i] == "Yaw")                                  YawIndex = i;                              YawPeriod = 0;                          }                            columnOrderConfigured = true;                      }                      else if(columnOrderConfigured)                      {                          try                          {                              RollSample = Parse(fields[RollIndex]);                              PitchSample = Parse(fields[PitchIndex]);                              double previous_yaw = YawSample;                              YawSample = Parse(fields[YawIndex]);                                //DateTime now = DateTime.Now;                              //TimeSpan span = now - start;                              //System.Console.WriteLine(span.TotalMilliseconds + " sampled yaw = " + YawSample);                              //start = now;                                double delta = YawSample - previous_yaw;                              double HALF_CIRCLE = Math.PI;                              if (Math.Abs(delta) > HALF_CIRCLE)                              {                                  // We turned across the discontinuity at 180 degrees so increment                                  // the period counter in the probably direction of angular motion                                  if (delta > 0)                                      YawPeriod--;                                  else                                      YawPeriod++;                              }                          }                          catch (Exception e)                          {                              throw new Exception(string.Format("String '{0}' was not parsed correctly: {1}"' data' e.Message));                          }                      }                        if (!columnOrderConfigured && DateTime.Now - started > TimeSpan.FromSeconds(10))                          throw new Exception("Sensor app did not send column order in expected time frame");                  }              }              catch (SocketException err)              {                  // A graceful shutdown calls close socket and throws an exception while blocked in Receive()                  // Ignore this exception unless it was not generated during shutdown sequence                  if (!Stopped)                      throw err;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following statement contains a magic number: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Magic Number,FreePIE.Core.Plugins,FreeImuPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeImuPlugin.cs,Read,The following statement contains a magic number: if (values.Length != 3)                  return;
Magic Number,FreePIE.Core.Plugins,FreeImuPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeImuPlugin.cs,Read,The following statement contains a magic number: data.Roll = ParseFloat(values[2]);
Magic Number,FreePIE.Core.Plugins,FreePieIOPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreePieIOPlugin.cs,Read,The following statement contains a magic number: for (int i = 0; i < deviceCount; i++)              {                  var local = data[i];                  var remote = remoteData[i];                  var holder = holders[i];                    if (local.DataId == remote.DataId)                      holder.SameDataCount++;                  else                  {                      holder.SameDataCount = 0;                      holder.SameDataCountCanTriggerUpdate = true;                      data[i] = remote;                      holder.OnUpdate();                  }                    if (holder.SameDataCount > 20 && holder.SameDataCountCanTriggerUpdate)                  {                      holder.SameDataCountCanTriggerUpdate = false;                      remote = new FreePieIO6Dof {DataId = local.DataId};                      data[i] = remote;                      holder.OnUpdate();                  }              }
Magic Number,FreePIE.Core.Plugins,FreeSpacePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,GetSamples,The following statement contains a magic number: if (err == 0) {                // Float assignments are atomic in C# so I don't have to worry about              // thread access protection to these samples              float previous_yaw = YawSample;              YawSample = yaw;              PitchSample = pitch;              RollSample = roll;                float delta = YawSample - previous_yaw;              float HALF_CIRCLE = (float)Math.PI;              if (Math.Abs(delta) > HALF_CIRCLE) {                 // We turned across the discontinuity at 180 degrees so modify the delta to                  // reflect the probable angular motion                 if (delta > 0)                    delta -= (2 * HALF_CIRCLE);                 else                    delta += (2 * HALF_CIRCLE);              }              ContinuousYaw += delta;           }
Magic Number,FreePIE.Core.Plugins,FreeSpacePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeSpacePlugin.cs,GetSamples,The following statement contains a magic number: if (err == 0) {                // Float assignments are atomic in C# so I don't have to worry about              // thread access protection to these samples              float previous_yaw = YawSample;              YawSample = yaw;              PitchSample = pitch;              RollSample = roll;                float delta = YawSample - previous_yaw;              float HALF_CIRCLE = (float)Math.PI;              if (Math.Abs(delta) > HALF_CIRCLE) {                 // We turned across the discontinuity at 180 degrees so modify the delta to                  // reflect the probable angular motion                 if (delta > 0)                    delta -= (2 * HALF_CIRCLE);                 else                    delta += (2 * HALF_CIRCLE);              }              ContinuousYaw += delta;           }
Magic Number,FreePIE.Core.Plugins,FreeTrackPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeTrackPlugin.cs,Read,The following statement contains a magic number: if (sameDataCount > 20)              {                  local = new FreeTrackData {DataID = Data.DataID};                  OnUpdate();              }
Magic Number,FreePIE.Core.Plugins,FreeTrackPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeTrackPlugin.cs,Write,The following statement contains a magic number: local.CamWidth = 1920;
Magic Number,FreePIE.Core.Plugins,FreeTrackPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\FreeTrackPlugin.cs,Write,The following statement contains a magic number: local.CamHeight = 1080;
Magic Number,FreePIE.Core.Plugins,HydraPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\HydraPlugin.cs,CreateGlobal,The following statement contains a magic number: var globals = new HydraPluginGlobal[2];
Magic Number,FreePIE.Core.Plugins,HydraPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\HydraPlugin.cs,Start,The following statement contains a magic number: Controller = new Sixense.ControllerData[2];
Magic Number,FreePIE.Core.Plugins,HydraPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\HydraPlugin.cs,Start,The following statement contains a magic number: Angles = new Sixense.ControllerAngles[2];
Magic Number,FreePIE.Core.Plugins,HydraPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\HydraPlugin.cs,InitHydraWrite,The following statement contains a magic number: hydraSpoof = new HydraSpoof(2);
Magic Number,FreePIE.Core.Plugins,HydraPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\HydraPlugin.cs,InitHydraWrite,The following statement contains a magic number: EmulatedData = new EmulatedData[2];
Magic Number,FreePIE.Core.Plugins,HydraPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\HydraPlugin.cs,InitHydraRead,The following statement contains a magic number: if (Sixense.Init() == Sixense.SUCCESS)              {                    int attempts = 0;                  int base_found = 0;                  while (base_found == 0 && attempts++ < 2)                  {                      base_found = Sixense.IsBaseConnected(0);                        if(base_found == 0)                          Thread.Sleep(1000);                  }                    if (base_found == 0)                  {                      Sixense.Exit();                      throw new Exception("Hydra not attached");                  }                    Sixense.SetActiveBase(0);              }              else                  throw new Exception("Failed to initialize Hydra");
Magic Number,FreePIE.Core.Plugins,HydraPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\HydraPlugin.cs,InitHydraRead,The following statement contains a magic number: if (Sixense.Init() == Sixense.SUCCESS)              {                    int attempts = 0;                  int base_found = 0;                  while (base_found == 0 && attempts++ < 2)                  {                      base_found = Sixense.IsBaseConnected(0);                        if(base_found == 0)                          Thread.Sleep(1000);                  }                    if (base_found == 0)                  {                      Sixense.Exit();                      throw new Exception("Hydra not attached");                  }                    Sixense.SetActiveBase(0);              }              else                  throw new Exception("Failed to initialize Hydra");
Magic Number,FreePIE.Core.Plugins,HydraPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\HydraPlugin.cs,DoBeforeNextExecute,The following statement contains a magic number: if (isReading)              {                  if (!readInitlized)                  {                      InitHydraRead();                      readInitlized = true;                  }                    //This method will be executed each iteration of the script                  for (int i = 0; i < 2; i++)                  {                      var lastSequence = Controller[i].sequence_number;                      Sixense.GetNewestData(i' out Controller[i]);                        if (lastSequence == Controller[i].sequence_number)                          continue;                        //getEulerAngles() from sixense_math.cpp                      float h' p' r;                      float A' B;                        B =  Controller[i].rot_mat_12;                      p = (float) Math.Asin(B);                      A = (float) Math.Cos(p);                        if (Math.Abs(A) > 0.005f)                      {                          h = (float) Math.Atan2(- Controller[i].rot_mat_02 / A'  Controller[i].rot_mat_22 / A); // atan2( D' C )                          r = (float) Math.Atan2(- Controller[i].rot_mat_10 / A'  Controller[i].rot_mat_11 / A); // atan2( F' E )                      }                      else                      {                          h = 0;                          r = (float) Math.Atan2( Controller[i].rot_mat_21'  Controller[i].rot_mat_20); // atan2( F' E ) when B=0' D=1                      }                        Angles[i].yaw = -h;                      Angles[i].pitch = p;                      Angles[i].roll = -r;                        OnUpdate();                  }              }
Magic Number,FreePIE.Core.Plugins,Device,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\JoystickPlugin.cs,Device,The following statement contains a magic number: SetRange(-1000' 1000);
Magic Number,FreePIE.Core.Plugins,Device,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\JoystickPlugin.cs,Device,The following statement contains a magic number: SetRange(-1000' 1000);
Magic Number,FreePIE.Core.Plugins,Device,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\JoystickPlugin.cs,Device,The following statement contains a magic number: LowerRange = -1000;
Magic Number,FreePIE.Core.Plugins,Device,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\JoystickPlugin.cs,Device,The following statement contains a magic number: UpperRange = 1000;
Magic Number,FreePIE.Core.Plugins,PPJoyPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\PPJoyPlugin.cs,SetAxis,The following statement contains a magic number: int newValue = (VirtualJoystick.MaxAnalogDataSourceVal/2) + 1;
Magic Number,FreePIE.Core.Plugins,TobiiEyeXPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TobiiEyeXPlugin.cs,GazeDataStreamOnNext,The following statement contains a magic number: var gazePointX = gazePointEventArgs.X + screenExtensionX / 2;
Magic Number,FreePIE.Core.Plugins,TobiiEyeXPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TobiiEyeXPlugin.cs,GazeDataStreamOnNext,The following statement contains a magic number: var gazePointY = gazePointEventArgs.Y + screenExtensionY / 2;
Magic Number,FreePIE.Core.Plugins,VJoyGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VJoyPlugin.cs,VJoyGlobalHolder,The following statement contains a magic number: if (index < 1 || index > 16)                  throw new ArgumentException(string.Format("Illegal joystick device id: {0}"' index));
Magic Number,FreePIE.Core.Plugins,VJoyGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VJoyPlugin.cs,VJoyGlobalHolder,The following statement contains a magic number: AxisMax = (int)max / 2 - 1;
Magic Number,FreePIE.Core.Plugins,VuzixTrackerPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VuzixTrackerPlugin.cs,SetDataUnits,The following statement contains a magic number: switch (mode) {              case VuzixDataUnits.RAW:                 DataModeScale = 1.0;                 break;                case VuzixDataUnits.DEGREES:                 DataModeScale = 180.0 / 32768.0;                 break;                case VuzixDataUnits.RADIANS:                 DataModeScale = Math.PI / 32768.0;                 break;                default:                 DataModeScale = 1.0;                 break;           }
Magic Number,FreePIE.Core.Plugins,VuzixTrackerPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VuzixTrackerPlugin.cs,SetDataUnits,The following statement contains a magic number: switch (mode) {              case VuzixDataUnits.RAW:                 DataModeScale = 1.0;                 break;                case VuzixDataUnits.DEGREES:                 DataModeScale = 180.0 / 32768.0;                 break;                case VuzixDataUnits.RADIANS:                 DataModeScale = Math.PI / 32768.0;                 break;                default:                 DataModeScale = 1.0;                 break;           }
Magic Number,FreePIE.Core.Plugins,VuzixTrackerPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VuzixTrackerPlugin.cs,SetDataUnits,The following statement contains a magic number: switch (mode) {              case VuzixDataUnits.RAW:                 DataModeScale = 1.0;                 break;                case VuzixDataUnits.DEGREES:                 DataModeScale = 180.0 / 32768.0;                 break;                case VuzixDataUnits.RADIANS:                 DataModeScale = Math.PI / 32768.0;                 break;                default:                 DataModeScale = 1.0;                 break;           }
Magic Number,FreePIE.Core.Plugins,VuzixTrackerPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VuzixTrackerPlugin.cs,SampleVuzixTracker,The following statement contains a magic number: int HALF_CIRCLE = 32768;
Magic Number,FreePIE.Core.Plugins,VuzixTrackerPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VuzixTrackerPlugin.cs,SampleVuzixTracker,The following statement contains a magic number: if (Math.Abs(delta) > HALF_CIRCLE) {              // We turned across the discontinuity at 180 degrees so modify the delta to               // reflect the probable angular motion              if (delta > 0)                 delta -= (2 * HALF_CIRCLE);              else                 delta += (2 * HALF_CIRCLE);           }
Magic Number,FreePIE.Core.Plugins,VuzixTrackerPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VuzixTrackerPlugin.cs,SampleVuzixTracker,The following statement contains a magic number: if (Math.Abs(delta) > HALF_CIRCLE) {              // We turned across the discontinuity at 180 degrees so modify the delta to               // reflect the probable angular motion              if (delta > 0)                 delta -= (2 * HALF_CIRCLE);              else                 delta += (2 * HALF_CIRCLE);           }
Magic Number,FreePIE.Core.Plugins,WiimotePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\WiimotePlugin.cs,CreateGlobal,The following statement contains a magic number: return Enumerable.Range(0' 4).Select(i => new WiimoteGlobal(this' wiimoteBridge.GetData((uint)i)' globalUpdators' globalUpdatorsCapabilities' globalUpdatorsStatus)).ToArray();
Magic Number,FreePIE.Core.Plugins,WiimotePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\WiimotePlugin.cs,GetProperty,The following statement contains a magic number: if (index > 2)                  return false;
Magic Number,FreePIE.Core.Plugins,WiimotePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\WiimotePlugin.cs,GetProperty,The following statement contains a magic number: if (index == 2)              {                  property.Name = "FuserType";                  property.Caption = "M+ fuser type";                    foreach (var val in Enum.GetNames(typeof(FusionType)))                      property.Choices.Add(val' val);                    property.DefaultValue = FusionType.SimpleIntegration.ToString();                  property.HelpText = "Choose between a extended kalman filter (gyro and acc) or simple integration (only gyro)";              }
Magic Number,FreePIE.Core.Plugins,Yei3SpacePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3SpacePlugin.cs,GetProperty,The following statement contains a magic number: int deviceIndex = index - 2;
Magic Number,FreePIE.Core.Plugins,Yei3SpacePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3SpacePlugin.cs,SetProperties,The following statement contains a magic number: Enumerable.Range(0' settingsDeviceCount)                        .ToList()                        .ForEach(i =>                            {                                var key = string.Format("Device{0}"' i);                                try                                {                                    Api.device_serials[i] = Convert.ToUInt32((string) properties[key]' 16);                                }                                catch (FormatException)                                {                                    throw new Exception(string.Format("{0} serial is invalid"' key));                                }                            });
Magic Number,FreePIE.Core.Plugins,ZeissPlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ZeissPlugin.cs,BackgroundWorker,The following statement contains a magic number: while (running)              {                  if (!(Api.WaitNextFrame())) Thread.Sleep(10);                                    var frame = new Frame();                  var euler = new Euler();                  var cinemizerRot = new Quat();                   var cinemizerEuler = new Euler();                     if (Api.GetFrame(ref frame))                  {                      Api.QuatGetEuler(ref euler' frame.Rot);                      Api.RotateTrackerToCinemizer(ref cinemizerRot' frame.Rot);                       Api.QuatGetEuler(ref cinemizerEuler' cinemizerRot);                                             Euler = cinemizerEuler;                         newData = true;                  }              }
Magic Number,FreePIE.Core.Plugins.MemoryMapping,TrackIRWorker,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\MemoryMapping\TrackIRWorker.cs,DoExecute,The following statement contains a magic number: doLog = args.Count == 3 && bool.Parse(args[2]);
Magic Number,FreePIE.Core.Plugins.MemoryMapping,TrackIRWorker,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\MemoryMapping\TrackIRWorker.cs,DoExecute,The following statement contains a magic number: doLog = args.Count == 3 && bool.Parse(args[2]);
Magic Number,FreePIE.Core.Plugins.Midi,DataGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Midi\DataGlobal.cs,DataGlobal,The following statement contains a magic number: buffer = new byte[2];
Magic Number,FreePIE.Core.Plugins.Midi,DataGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Midi\DataGlobal.cs,DataGlobal,The following statement contains a magic number: status = (MidiStatus)(data[0] >> 4);
Magic Number,FreePIE.Core.Plugins.Midi,DataGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Midi\DataGlobal.cs,DataGlobal,The following statement contains a magic number: Array.Copy(data' 1' buffer' 0' 2);
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: float q1 = Quaternion[0]' q2 = Quaternion[1]' q3 = Quaternion[2]' q4 = Quaternion[3];
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: float q1 = Quaternion[0]' q2 = Quaternion[1]' q3 = Quaternion[2]' q4 = Quaternion[3];
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: if (Ki > 0f)              {                  eInt[0] += ex;      // accumulate integral error                  eInt[1] += ey;                  eInt[2] += ez;              }              else              {                  eInt[0] = 0.0f;     // prevent integral wind up                  eInt[1] = 0.0f;                  eInt[2] = 0.0f;              }
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: if (Ki > 0f)              {                  eInt[0] += ex;      // accumulate integral error                  eInt[1] += ey;                  eInt[2] += ez;              }              else              {                  eInt[0] = 0.0f;     // prevent integral wind up                  eInt[1] = 0.0f;                  eInt[2] = 0.0f;              }
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: gz = gz + Kp * ez + Ki * eInt[2];
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: Quaternion[2] = q3 * norm;
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: Quaternion[3] = q4 * norm;
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: float q1 = Quaternion[0]' q2 = Quaternion[1]' q3 = Quaternion[2]' q4 = Quaternion[3];
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: float q1 = Quaternion[0]' q2 = Quaternion[1]' q3 = Quaternion[2]' q4 = Quaternion[3];
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: if (Ki > 0f)              {                  eInt[0] += ex;      // accumulate integral error                  eInt[1] += ey;                  eInt[2] += ez;              }              else              {                  eInt[0] = 0.0f;     // prevent integral wind up                  eInt[1] = 0.0f;                  eInt[2] = 0.0f;              }
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: if (Ki > 0f)              {                  eInt[0] += ex;      // accumulate integral error                  eInt[1] += ey;                  eInt[2] += ez;              }              else              {                  eInt[0] = 0.0f;     // prevent integral wind up                  eInt[1] = 0.0f;                  eInt[2] = 0.0f;              }
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: gz = gz + Kp * ez + Ki * eInt[2];
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: Quaternion[2] = q3 * norm;
Magic Number,AHRS,MahonyAHRS,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\SensorFusion\MahonyAHRS.cs,Update,The following statement contains a magic number: Quaternion[3] = q4 * norm;
Magic Number,FreePIE.Core.Plugins.TrackIR,HeadPoseData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\HeadPoseData.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = X.GetHashCode();                  hashCode = (hashCode*397) ^ Y.GetHashCode();                  hashCode = (hashCode*397) ^ Z.GetHashCode();                  hashCode = (hashCode*397) ^ Yaw.GetHashCode();                  hashCode = (hashCode*397) ^ Pitch.GetHashCode();                  hashCode = (hashCode*397) ^ Roll.GetHashCode();                  return hashCode;              }
Magic Number,FreePIE.Core.Plugins.TrackIR,HeadPoseData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\HeadPoseData.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = X.GetHashCode();                  hashCode = (hashCode*397) ^ Y.GetHashCode();                  hashCode = (hashCode*397) ^ Z.GetHashCode();                  hashCode = (hashCode*397) ^ Yaw.GetHashCode();                  hashCode = (hashCode*397) ^ Pitch.GetHashCode();                  hashCode = (hashCode*397) ^ Roll.GetHashCode();                  return hashCode;              }
Magic Number,FreePIE.Core.Plugins.TrackIR,HeadPoseData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\HeadPoseData.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = X.GetHashCode();                  hashCode = (hashCode*397) ^ Y.GetHashCode();                  hashCode = (hashCode*397) ^ Z.GetHashCode();                  hashCode = (hashCode*397) ^ Yaw.GetHashCode();                  hashCode = (hashCode*397) ^ Pitch.GetHashCode();                  hashCode = (hashCode*397) ^ Roll.GetHashCode();                  return hashCode;              }
Magic Number,FreePIE.Core.Plugins.TrackIR,HeadPoseData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\HeadPoseData.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = X.GetHashCode();                  hashCode = (hashCode*397) ^ Y.GetHashCode();                  hashCode = (hashCode*397) ^ Z.GetHashCode();                  hashCode = (hashCode*397) ^ Yaw.GetHashCode();                  hashCode = (hashCode*397) ^ Pitch.GetHashCode();                  hashCode = (hashCode*397) ^ Roll.GetHashCode();                  return hashCode;              }
Magic Number,FreePIE.Core.Plugins.TrackIR,HeadPoseData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\HeadPoseData.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = X.GetHashCode();                  hashCode = (hashCode*397) ^ Y.GetHashCode();                  hashCode = (hashCode*397) ^ Z.GetHashCode();                  hashCode = (hashCode*397) ^ Yaw.GetHashCode();                  hashCode = (hashCode*397) ^ Pitch.GetHashCode();                  hashCode = (hashCode*397) ^ Roll.GetHashCode();                  return hashCode;              }
Magic Number,FreePIE.Core.Plugins.TrackIR,NPClientSpoof,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\NPClientSpoof.cs,SetPosition,The following statement contains a magic number: if(freePieTrackIRMutex.WaitOne(10))              {                  var trackIr = freepieData.Read(f => f.TrackIRData);                    trackIr.FakeTrackIRData.FrameNumber++;                    trackIr.FakeTrackIRData.Yaw = yaw;                  trackIr.FakeTrackIRData.Pitch = pitch;                  trackIr.FakeTrackIRData.Roll = roll;                  trackIr.FakeTrackIRData.X = x;                  trackIr.FakeTrackIRData.Y = y;                  trackIr.FakeTrackIRData.Z = z;                    freepieData.Write(f => f.TrackIRData' trackIr);                    freePieTrackIRMutex.ReleaseMutex();              }
Magic Number,FreePIE.Core.Plugins.TrackIR,TrackIRDll,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\TrackIR\TrackIRDll.cs,GetSignature,The following statement contains a magic number: using (var signature = new MarshalledString(400))              {                  ExecuteAndCheckReturnValue(GetSignatureName' () => getSignature(signature.Pointer));                  return signature.Value;              }
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteBridge,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteBridge.cs,DolphiimoteBridge,The following statement contains a magic number: for (byte i = 0; i < 4; i++)                  data[i] = new DolphiimoteWiimoteData(i' new WiimoteCalibration()' fuserFactory());
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteDll,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteDLL.cs,DolphiimoteDll,The following statement contains a magic number: if (Marshal.SizeOf(typeof(DolphiimoteCallbacks)) != 24)                  throw new InvalidOperationException("DolphiimoteCallbacks wrong size. Expected: 24' got:" + Marshal.SizeOf(typeof(DolphiimoteCallbacks)));
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteDll,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteDLL.cs,DolphiimoteDll,The following statement contains a magic number: if (Marshal.SizeOf(typeof(DolphiimoteData)) != 128)                  throw new InvalidOperationException("DolphiimoteData wrong size. Expected: 128' got:"+ Marshal.SizeOf(typeof(DolphiimoteData)));
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteDll,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteDLL.cs,DolphiimoteDll,The following statement contains a magic number: if (Marshal.SizeOf(typeof(DolphiimoteCapabilities)) != 16)                  throw new InvalidOperationException("DolphiimoteCapabilities wrong size.");
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,CalculateMotionPlus,The following statement contains a magic number: const double fastModeFactor = 20.0 / 4.0;
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,CalculateMotionPlus,The following statement contains a magic number: const double fastModeFactor = 20.0 / 4.0;
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The following statement contains a magic number: if (IsDataValid(WiimoteDataValid.ClassicController))              {                  ClassicController = new ClassicController                  {                      RightStick = calibration.NormalizeClassicControllerRightStick(DateTime.Now'                                                                 map(rawData.classic_controller.right_stick_x' 0' CLASSIC_OTHER_MAX' 0' 200)'                                                                 map(rawData.classic_controller.right_stick_y' 0' CLASSIC_OTHER_MAX' 0' 200))'                      LeftStick = calibration.NormalizeClassicControllerLeftStick(DateTime.Now'                                                                 map(rawData.classic_controller.left_stick_x' 0' CLASSIC_LEFT_STICK_MAX' 0' 200)'                                                                 map(rawData.classic_controller.left_stick_y' 0' CLASSIC_LEFT_STICK_MAX' 0' 200))'                      RightTrigger = calibration.NormalizeClassicControllerRightTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.right_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      LeftTrigger = calibration.NormalizeClassicControllerLeftTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.left_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      Buttons = (ClassicControllerButtons)data.classic_controller.buttons                  };              }
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The following statement contains a magic number: if (IsDataValid(WiimoteDataValid.ClassicController))              {                  ClassicController = new ClassicController                  {                      RightStick = calibration.NormalizeClassicControllerRightStick(DateTime.Now'                                                                 map(rawData.classic_controller.right_stick_x' 0' CLASSIC_OTHER_MAX' 0' 200)'                                                                 map(rawData.classic_controller.right_stick_y' 0' CLASSIC_OTHER_MAX' 0' 200))'                      LeftStick = calibration.NormalizeClassicControllerLeftStick(DateTime.Now'                                                                 map(rawData.classic_controller.left_stick_x' 0' CLASSIC_LEFT_STICK_MAX' 0' 200)'                                                                 map(rawData.classic_controller.left_stick_y' 0' CLASSIC_LEFT_STICK_MAX' 0' 200))'                      RightTrigger = calibration.NormalizeClassicControllerRightTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.right_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      LeftTrigger = calibration.NormalizeClassicControllerLeftTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.left_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      Buttons = (ClassicControllerButtons)data.classic_controller.buttons                  };              }
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The following statement contains a magic number: if (IsDataValid(WiimoteDataValid.ClassicController))              {                  ClassicController = new ClassicController                  {                      RightStick = calibration.NormalizeClassicControllerRightStick(DateTime.Now'                                                                 map(rawData.classic_controller.right_stick_x' 0' CLASSIC_OTHER_MAX' 0' 200)'                                                                 map(rawData.classic_controller.right_stick_y' 0' CLASSIC_OTHER_MAX' 0' 200))'                      LeftStick = calibration.NormalizeClassicControllerLeftStick(DateTime.Now'                                                                 map(rawData.classic_controller.left_stick_x' 0' CLASSIC_LEFT_STICK_MAX' 0' 200)'                                                                 map(rawData.classic_controller.left_stick_y' 0' CLASSIC_LEFT_STICK_MAX' 0' 200))'                      RightTrigger = calibration.NormalizeClassicControllerRightTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.right_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      LeftTrigger = calibration.NormalizeClassicControllerLeftTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.left_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      Buttons = (ClassicControllerButtons)data.classic_controller.buttons                  };              }
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The following statement contains a magic number: if (IsDataValid(WiimoteDataValid.ClassicController))              {                  ClassicController = new ClassicController                  {                      RightStick = calibration.NormalizeClassicControllerRightStick(DateTime.Now'                                                                 map(rawData.classic_controller.right_stick_x' 0' CLASSIC_OTHER_MAX' 0' 200)'                                                                 map(rawData.classic_controller.right_stick_y' 0' CLASSIC_OTHER_MAX' 0' 200))'                      LeftStick = calibration.NormalizeClassicControllerLeftStick(DateTime.Now'                                                                 map(rawData.classic_controller.left_stick_x' 0' CLASSIC_LEFT_STICK_MAX' 0' 200)'                                                                 map(rawData.classic_controller.left_stick_y' 0' CLASSIC_LEFT_STICK_MAX' 0' 200))'                      RightTrigger = calibration.NormalizeClassicControllerRightTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.right_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      LeftTrigger = calibration.NormalizeClassicControllerLeftTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.left_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      Buttons = (ClassicControllerButtons)data.classic_controller.buttons                  };              }
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The following statement contains a magic number: if (IsDataValid(WiimoteDataValid.ClassicController))              {                  ClassicController = new ClassicController                  {                      RightStick = calibration.NormalizeClassicControllerRightStick(DateTime.Now'                                                                 map(rawData.classic_controller.right_stick_x' 0' CLASSIC_OTHER_MAX' 0' 200)'                                                                 map(rawData.classic_controller.right_stick_y' 0' CLASSIC_OTHER_MAX' 0' 200))'                      LeftStick = calibration.NormalizeClassicControllerLeftStick(DateTime.Now'                                                                 map(rawData.classic_controller.left_stick_x' 0' CLASSIC_LEFT_STICK_MAX' 0' 200)'                                                                 map(rawData.classic_controller.left_stick_y' 0' CLASSIC_LEFT_STICK_MAX' 0' 200))'                      RightTrigger = calibration.NormalizeClassicControllerRightTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.right_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      LeftTrigger = calibration.NormalizeClassicControllerLeftTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.left_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      Buttons = (ClassicControllerButtons)data.classic_controller.buttons                  };              }
Magic Number,FreePIE.Core.Plugins.Wiimote,DolphiimoteWiimoteData,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\DolphiimoteWiimoteData.cs,Update,The following statement contains a magic number: if (IsDataValid(WiimoteDataValid.ClassicController))              {                  ClassicController = new ClassicController                  {                      RightStick = calibration.NormalizeClassicControllerRightStick(DateTime.Now'                                                                 map(rawData.classic_controller.right_stick_x' 0' CLASSIC_OTHER_MAX' 0' 200)'                                                                 map(rawData.classic_controller.right_stick_y' 0' CLASSIC_OTHER_MAX' 0' 200))'                      LeftStick = calibration.NormalizeClassicControllerLeftStick(DateTime.Now'                                                                 map(rawData.classic_controller.left_stick_x' 0' CLASSIC_LEFT_STICK_MAX' 0' 200)'                                                                 map(rawData.classic_controller.left_stick_y' 0' CLASSIC_LEFT_STICK_MAX' 0' 200))'                      RightTrigger = calibration.NormalizeClassicControllerRightTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.right_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      LeftTrigger = calibration.NormalizeClassicControllerLeftTrigger(DateTime.Now'                                                                  map(rawData.classic_controller.left_trigger' 0' CLASSIC_OTHER_MAX' 0' 100))'                      Buttons = (ClassicControllerButtons)data.classic_controller.buttons                  };              }
Magic Number,FreePIE.Core.Plugins.Wiimote,SimpleIntegrationMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,SimpleIntegrationMotionPlusFuser,The following statement contains a magic number: integrator = new Integrator(3);
Magic Number,FreePIE.Core.Plugins.Wiimote,SimpleIntegrationMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,HandleIMUData,The following statement contains a magic number: FusedValues = new EulerAngles(integrator.Values[0]' integrator.Values[1]' integrator.Values[2]);
Magic Number,FreePIE.Core.Plugins.Wiimote,MahonyMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,HandleIMUData,The following statement contains a magic number: if (EnsureMahonyReady())                  mahonyAHRS.Update((float)(rollLeft * (Math.PI / 180))' (float)(pitchLeft * (Math.PI / 180))' (float)(yawDown * (Math.PI / 180))' (float)accX' (float)accY' (float)accZ);
Magic Number,FreePIE.Core.Plugins.Wiimote,MahonyMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,HandleIMUData,The following statement contains a magic number: if (EnsureMahonyReady())                  mahonyAHRS.Update((float)(rollLeft * (Math.PI / 180))' (float)(pitchLeft * (Math.PI / 180))' (float)(yawDown * (Math.PI / 180))' (float)accX' (float)accY' (float)accZ);
Magic Number,FreePIE.Core.Plugins.Wiimote,MahonyMotionPlusFuser,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\IMotionPlusFuser.cs,HandleIMUData,The following statement contains a magic number: if (EnsureMahonyReady())                  mahonyAHRS.Update((float)(rollLeft * (Math.PI / 180))' (float)(pitchLeft * (Math.PI / 180))' (float)(yawDown * (Math.PI / 180))' (float)accX' (float)accY' (float)accZ);
Magic Number,FreePIE.Core.Plugins.Wiimote,SamplePeriodCounter,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\SamplePeriodCounter.cs,Update,The following statement contains a magic number: if (stopwatch.ElapsedMilliseconds > 1000)              {                  stopwatch.Stop();                  SamplePeriod = 1 / (float)(samples / stopwatch.Elapsed.TotalSeconds);                  return true;              }
Magic Number,FreePIE.Core.Plugins.Wiimote,StatusGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\StatusGlobal.cs,getLEDState,The following statement contains a magic number: if (led == 2) mask = LED3_MASK;
Magic Number,FreePIE.Core.Plugins.Wiimote,StatusGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\StatusGlobal.cs,getLEDState,The following statement contains a magic number: if (led == 3) mask = LED4_MASK;
Magic Number,FreePIE.Core.Plugins.Wiimote,StatusGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\StatusGlobal.cs,setLEDState,The following statement contains a magic number: if (led == 2) mask = LED3_MASK;
Magic Number,FreePIE.Core.Plugins.Wiimote,StatusGlobal,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\StatusGlobal.cs,setLEDState,The following statement contains a magic number: if (led == 3) mask = LED4_MASK;
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: accelerationMagnitudes = new TimeSeries(1024);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: nunchuckAccelerationMagnitudes = new TimeSeries(1024);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: nunchuckStick = new TimeSeries(256);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: classicControllerRightStick = new TimeSeries(256);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: classicControllerLeftStick = new TimeSeries(256);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: classicControllerRightTrigger = new TimeSeries(256);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: classicControllerLeftTrigger = new TimeSeries(256);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: guitarStick = new TimeSeries(256);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,WiimoteCalibration,The following statement contains a magic number: guitarWhammy = new TimeSeries(256);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,IsStationary,The following statement contains a magic number: return accelerationMagnitudes.Size > 10 && accelerationMagnitudes.DurationStable(WiimoteStationaryDeltaEpsilon) > TimeSpan.FromMilliseconds(500);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,IsStationary,The following statement contains a magic number: return accelerationMagnitudes.Size > 10 && accelerationMagnitudes.DurationStable(WiimoteStationaryDeltaEpsilon) > TimeSpan.FromMilliseconds(500);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,TakeAccelerationCalibrationSnapshot,The following statement contains a magic number: Acceleration = new LinearCalibration(9.81 / gravity' offset);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,MotionPlusInsidePermissibleRange,The following statement contains a magic number: const int max = 8000 + 1000;
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,MotionPlusInsidePermissibleRange,The following statement contains a magic number: const int max = 8000 + 1000;
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,MotionPlusInsidePermissibleRange,The following statement contains a magic number: const int min = 8000 - 1000;
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,MotionPlusInsidePermissibleRange,The following statement contains a magic number: const int min = 8000 - 1000;
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,TakeMotionPlusCalibrationSnapshot,The following statement contains a magic number: const double gain = 1.0 / 20.0;
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,TakeNunchuckAccelerationCalibrationSnapshot,The following statement contains a magic number: NunchuckAcceleration = new LinearCalibration(9.81 / gravity' offset);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,IsNunchuckStationary,The following statement contains a magic number: return nunchuckAccelerationMagnitudes.Size > 10 && nunchuckAccelerationMagnitudes.DurationStable(WiimoteStationaryDeltaEpsilon) > TimeSpan.FromMilliseconds(1000);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,IsNunchuckStationary,The following statement contains a magic number: return nunchuckAccelerationMagnitudes.Size > 10 && nunchuckAccelerationMagnitudes.DurationStable(WiimoteStationaryDeltaEpsilon) > TimeSpan.FromMilliseconds(1000);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,IsStickStationary,The following statement contains a magic number: return data.Size > 10 && data.DurationStable(WiimoteStationaryDeltaEpsilon) > TimeSpan.FromMilliseconds(250);
Magic Number,FreePIE.Core.Plugins.Wiimote,WiimoteCalibration,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Wiimote\WiimoteCalibration.cs,IsStickStationary,The following statement contains a magic number: return data.Size > 10 && data.DurationStable(WiimoteStationaryDeltaEpsilon) > TimeSpan.FromMilliseconds(250);
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,GetComPorts,The following statement contains a magic number: var ports = new TssComPort[20];
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,GetComPorts,The following statement contains a magic number: var count = tss_getComPorts(ports' 20' 0' search);
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,GetComPorts,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  if( tss_getTSDeviceInfoFromComPort(ports[i].com_port' out com_info) == TssError.TSS_NO_ERROR)                  {                      if (com_info.device_type == TssType.TSS_DNG)                      {                          count--; //dongle itself is not a device that can stream                          uint dongle_id = (uint)TssDeviceIdMask.TSS_NO_DEVICE_ID;                          dongle_id = tss_createTSDeviceStr(ports[i].com_port' TssTimestampMode.TSS_TIMESTAMP_NONE);                          active_dongles.Add(dongle_id);                          for (byte j = 0; j < 15; j++)                          {                              uint serial_number' timestamp;                              tss_getSerialNumberAtLogicalID(dongle_id' j' out serial_number' out timestamp);                              if (serial_number != 0)                              {                                  SerialInfo info = new SerialInfo();                                  info.com_port = ports[i].com_port;                                  info.logical_id = j;                                  serial_info[serial_number] = info;                                  count++;                              }                          }                      }                      else                      {                          SerialInfo info = new SerialInfo();                          info.com_port = ports[i].com_port;                          info.logical_id = 0xff;                          serial_info[com_info.serial_number] = info;                      }                  }              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: var quat = new float[4];
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: if (stream_button_state)              {                  TssStreamPacketQuatButton packet;                  error = tss_getLastStreamData(deviceId' out packet' 17' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = packet.button_state;              }              else              {                  TssStreamPacketQuat packet;                  error = tss_getLastStreamData(deviceId' out packet' 16' out timestamp);                  quat[0] = packet.quat[0];                  quat[1] = packet.quat[1];                  quat[2] = packet.quat[2];                  quat[3] = packet.quat[3];                  button_state = 0;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: quaternion.Update(quat[3]' quat[0]' quat[1]' quat[2]' false);
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,UpdateSensor,The following statement contains a magic number: quaternion.Update(quat[3]' quat[0]' quat[1]' quat[2]' false);
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: byte[] streamSlots = new byte[8];
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: streamSlots[2] = (byte)TssStreaming.TSS_NULL;
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: streamSlots[3] = (byte)TssStreaming.TSS_NULL;
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: streamSlots[4] = (byte)TssStreaming.TSS_NULL;
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: streamSlots[5] = (byte)TssStreaming.TSS_NULL;
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: streamSlots[6] = (byte)TssStreaming.TSS_NULL;
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: streamSlots[7] = (byte)TssStreaming.TSS_NULL;
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: while (count < 3)              {                  if (tss_setStreamingTiming(device_id' 0' -1' 1500000' out timestamp) == 0)                  {                      if (tss_setStreamingSlots(device_id' streamSlots' out timestamp) == 0)                      {                          if (tss_startStreaming(device_id' out timestamp) == 0)                          {                              //isStreaming = true;                              break;                          }                      }                  }                  count++;              }
Magic Number,FreePIE.Core.Plugins.Yei3Space,Api,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3Space\Api.cs,StartStreamingU,The following statement contains a magic number: while (count < 3)              {                  if (tss_setStreamingTiming(device_id' 0' -1' 1500000' out timestamp) == 0)                  {                      if (tss_setStreamingSlots(device_id' streamSlots' out timestamp) == 0)                      {                          if (tss_startStreaming(device_id' out timestamp) == 0)                          {                              //isStreaming = true;                              break;                          }                      }                  }                  count++;              }
Missing Default,FreePIE.Core.Plugins,ComDevicePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\ComDevicePlugin.cs,GetProperty,The following switch statement is missing a default case: switch (index)              {                  case 0:                      property.Name = "Port";                      property.Caption = "Com port";                      property.HelpText = "The com port of the FTDI device";                        foreach (var p in SerialPort.GetPortNames())                      {                          property.Choices.Add(p' p);                      }                        property.DefaultValue = "COM3";                      return true;                  case 1:                      property.Name = "BaudRate";                      property.Caption = "Baud rate";                      property.DefaultValue = DefaultBaudRate;                      property.HelpText = BaudRateHelpText;                        foreach (var rate in new int[] { 1200' 2400' 4800' 9600' 14400' 19200' 38400' 57600' 115200 })                      {                          property.Choices.Add(rate.ToString(CultureInfo.InvariantCulture)' rate);                      }                        return true;              }
Missing Default,FreePIE.Core.Plugins,VJoyGlobalHolder,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\VJoyPlugin.cs,VJoyGlobalHolder,The following switch statement is missing a default case: switch (status)              {                  case VjdStat.VJD_STAT_BUSY:                      error = "vJoy Device {0} is already owned by another feeder";                      break;                  case VjdStat.VJD_STAT_MISS:                      error = "vJoy Device {0} is not installed or disabled";                      break;                  case VjdStat.VJD_STAT_UNKN:                      error = ("vJoy Device {0} general error");                      break;              }
Missing Default,FreePIE.Core.Plugins,Yei3SpacePlugin,C:\repos\AndersMalmgren_FreePIE\FreePIE.Core.Plugins\Yei3SpacePlugin.cs,GetProperty,The following switch statement is missing a default case: switch (index)              {                  case 0:                      property.Name = "StreamButtonState";                      property.Caption = "Stream Button State";                      property.DefaultValue = false;                      property.HelpText = "Allows Streaming of the sensor button states";                      return true;                  case 1:                      property.Name = "PollUnknownDevices";                      property.Caption = "Poll Unknown Devices";                      property.DefaultValue = false;                      property.HelpText = "Writes bytes to serial ports to find 3-Space devices not listed in registry";                      return true;                }
