Implementation smell,Namespace,Class,File,Method,Description
Long Method,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,PhoneNumberUtil,The method has 106 lines of code.
Long Method,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,ParseHelper,The method has 102 lines of code.
Complex Method,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,LoadTerritoryTagMetadata,Cyclomatic complexity of the method is 10
Complex Method,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,LoadAvailableFormats,Cyclomatic complexity of the method is 8
Complex Method,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,ProcessPhoneNumberDescElement,Cyclomatic complexity of the method is 8
Complex Method,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,Cyclomatic complexity of the method is 10
Complex Method,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeFrom,Cyclomatic complexity of the method is 8
Complex Method,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeFrom,Cyclomatic complexity of the method is 29
Complex Method,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeFrom,Cyclomatic complexity of the method is 9
Complex Method,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,GetHashCode,Cyclomatic complexity of the method is 28
Complex Method,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,Cyclomatic complexity of the method is 33
Complex Method,PhoneNumbers,PhoneNumber,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonenumber.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,ExtractInnerMatch,Cyclomatic complexity of the method is 8
Complex Method,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,ParseAndVerify,Cyclomatic complexity of the method is 8
Complex Method,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatOutOfCountryKeepingAlphaChars,Cyclomatic complexity of the method is 9
Complex Method,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,GetNumberTypeHelper,Cyclomatic complexity of the method is 13
Complex Method,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,ParseHelper,Cyclomatic complexity of the method is 14
Complex Method,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,IsNumberMatch,Cyclomatic complexity of the method is 8
Long Parameter List,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,LoadAvailableFormats,The method has 5 parameters. Parameters: metadata' element' nationalPrefix' nationalPrefixFormattingRule' nationalPrefixOptionalWhenFormatting
Long Parameter List,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,PhoneNumberMatcher,The method has 5 parameters. Parameters: util' text' country' leniency' maxTries
Long Parameter List,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,MaybeExtractCountryCode,The method has 5 parameters. Parameters: number' defaultRegionMetadata' nationalNumber' keepRawInput' phoneNumber
Long Parameter List,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,ParseHelper,The method has 5 parameters. Parameters: numberToParse' defaultRegion' keepRawInput' checkRegion' phoneNumber
Long Identifier,PhoneNumbers,AsYouTypeFormatter,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\AsYouTypeFormatter.cs,AttemptToExtractCountryCallingCode,The length of the parameter numberWithoutCountryCallingCode is 31.
Long Identifier,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,LoadAvailableFormats,The length of the parameter nationalPrefixOptionalWhenFormatting is 36.
Long Identifier,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,,The length of the parameter NATIONAL_PREFIX_FORMATTING_RULE is 31.
Long Identifier,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,,The length of the parameter NATIONAL_PREFIX_OPTIONAL_WHEN_FORMATTING is 40.
Long Identifier,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,,The length of the parameter NATIONAL_PREFIX_TRANSFORM_RULE is 30.
Long Identifier,PhoneNumbers,BuildMetadataFromXml,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\BuildMetadataFromXml.cs,,The length of the parameter PREFERRED_INTERNATIONAL_PREFIX is 30.
Long Identifier,PhoneNumbers,MetadataManager,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\MetadataManager.cs,,The length of the parameter callingCodeToAlternateFormatsMap is 32.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter LeadingDigitsPatternFieldNumber is 31.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter NationalPrefixFormattingRuleFieldNumber is 39.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter hasNationalPrefixFormattingRule is 31.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter NationalPrefixOptionalWhenFormattingFieldNumber is 47.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter hasNationalPrefixOptionalWhenFormatting is 39.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter nationalPrefixOptionalWhenFormatting_ is 37.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter DomesticCarrierCodeFormattingRuleFieldNumber is 44.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter hasDomesticCarrierCodeFormattingRule is 36.
Long Identifier,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter domesticCarrierCodeFormattingRule_ is 34.
Long Identifier,PhoneNumbers,PhoneNumberDesc,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter NationalNumberPatternFieldNumber is 32.
Long Identifier,PhoneNumbers,PhoneNumberDesc,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter PossibleNumberPatternFieldNumber is 32.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter NoInternationalDiallingFieldNumber is 34.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter InternationalPrefixFieldNumber is 30.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter PreferredInternationalPrefixFieldNumber is 39.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter hasPreferredInternationalPrefix is 31.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter PreferredExtnPrefixFieldNumber is 30.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter NationalPrefixForParsingFieldNumber is 35.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter NationalPrefixTransformRuleFieldNumber is 38.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter hasNationalPrefixTransformRule is 30.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter SameMobileAndFixedLinePatternFieldNumber is 40.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter hasSameMobileAndFixedLinePattern is 32.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter sameMobileAndFixedLinePattern_ is 30.
Long Identifier,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,,The length of the parameter LeadingZeroPossibleFieldNumber is 30.
Long Identifier,PhoneNumbers,PhoneNumber,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonenumber.cs,,The length of the parameter PreferredDomesticCarrierCodeFieldNumber is 39.
Long Identifier,PhoneNumbers,PhoneNumber,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonenumber.cs,,The length of the parameter hasPreferredDomesticCarrierCode is 31.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,GetInstance,The length of the parameter countryCallingCodeToRegionCodeMap is 33.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatOutOfCountryCallingNumber,The length of the parameter internationalPrefixForFormatting is 32.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatOutOfCountryKeepingAlphaChars,The length of the parameter internationalPrefixForFormatting is 32.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,IsNumberMatch,The length of the parameter secondNumberWithFirstNumberRegion is 33.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,,The length of the parameter countryCallingCodeToRegionCodeMap_ is 34.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,,The length of the parameter COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX is 36.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,,The length of the parameter ALL_PLUS_NUMBER_GROUPING_SYMBOLS is 32.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,,The length of the parameter countryCodeToNonGeographicalMetadataMap is 39.
Long Identifier,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,,The length of the parameter REGION_CODE_FOR_NON_GEO_ENTITY is 30.
Long Statement,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasNationalPrefixFormattingRule != other.hasNationalPrefixFormattingRule || (hasNationalPrefixFormattingRule && !nationalPrefixFormattingRule_.Equals(other.nationalPrefixFormattingRule_))) return false; " is 206.
Long Statement,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasNationalPrefixOptionalWhenFormatting != other.hasNationalPrefixOptionalWhenFormatting || (hasNationalPrefixOptionalWhenFormatting && !nationalPrefixOptionalWhenFormatting_.Equals(other.nationalPrefixOptionalWhenFormatting_))) return false; " is 246.
Long Statement,PhoneNumbers,NumberFormat,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasDomesticCarrierCodeFormattingRule != other.hasDomesticCarrierCodeFormattingRule || (hasDomesticCarrierCodeFormattingRule && !domesticCarrierCodeFormattingRule_.Equals(other.domesticCarrierCodeFormattingRule_))) return false; " is 231.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeGeneralDesc,The length of the statement  "            result.generalDesc_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.generalDesc_).MergeFrom(value).BuildPartial(); " is 126.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeFixedLine,The length of the statement  "            result.fixedLine_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.fixedLine_).MergeFrom(value).BuildPartial(); " is 122.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeTollFree,The length of the statement  "            result.tollFree_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.tollFree_).MergeFrom(value).BuildPartial(); " is 120.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergePremiumRate,The length of the statement  "            result.premiumRate_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.premiumRate_).MergeFrom(value).BuildPartial(); " is 126.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeSharedCost,The length of the statement  "            result.sharedCost_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.sharedCost_).MergeFrom(value).BuildPartial(); " is 124.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergePersonalNumber,The length of the statement  "            result.personalNumber_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.personalNumber_).MergeFrom(value).BuildPartial(); " is 132.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeEmergency,The length of the statement  "            result.emergency_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.emergency_).MergeFrom(value).BuildPartial(); " is 122.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeVoicemail,The length of the statement  "            result.voicemail_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.voicemail_).MergeFrom(value).BuildPartial(); " is 122.
Long Statement,PhoneNumbers,Builder,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,MergeNoInternationalDialling,The length of the statement  "            result.noInternationalDialling_ = global::PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.noInternationalDialling_).MergeFrom(value).BuildPartial(); " is 150.
Long Statement,PhoneNumbers,PhoneNumberDesc,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasNationalNumberPattern != other.hasNationalNumberPattern || (hasNationalNumberPattern && !nationalNumberPattern_.Equals(other.nationalNumberPattern_))) return false; " is 171.
Long Statement,PhoneNumbers,PhoneNumberDesc,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasPossibleNumberPattern != other.hasPossibleNumberPattern || (hasPossibleNumberPattern && !possibleNumberPattern_.Equals(other.possibleNumberPattern_))) return false; " is 171.
Long Statement,PhoneNumbers,PhoneNumberDesc,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasExampleNumber != other.hasExampleNumber || (hasExampleNumber && !exampleNumber_.Equals(other.exampleNumber_))) return false; " is 131.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasGeneralDesc != other.hasGeneralDesc || (hasGeneralDesc && !generalDesc_.Equals(other.generalDesc_))) return false; " is 121.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasPremiumRate != other.hasPremiumRate || (hasPremiumRate && !premiumRate_.Equals(other.premiumRate_))) return false; " is 121.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasPersonalNumber != other.hasPersonalNumber || (hasPersonalNumber && !personalNumber_.Equals(other.personalNumber_))) return false; " is 136.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasNoInternationalDialling != other.hasNoInternationalDialling || (hasNoInternationalDialling && !noInternationalDialling_.Equals(other.noInternationalDialling_))) return false; " is 181.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasCountryCode != other.hasCountryCode || (hasCountryCode && !countryCode_.Equals(other.countryCode_))) return false; " is 121.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasInternationalPrefix != other.hasInternationalPrefix || (hasInternationalPrefix && !internationalPrefix_.Equals(other.internationalPrefix_))) return false; " is 161.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasPreferredInternationalPrefix != other.hasPreferredInternationalPrefix || (hasPreferredInternationalPrefix && !preferredInternationalPrefix_.Equals(other.preferredInternationalPrefix_))) return false; " is 206.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasNationalPrefix != other.hasNationalPrefix || (hasNationalPrefix && !nationalPrefix_.Equals(other.nationalPrefix_))) return false; " is 136.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasPreferredExtnPrefix != other.hasPreferredExtnPrefix || (hasPreferredExtnPrefix && !preferredExtnPrefix_.Equals(other.preferredExtnPrefix_))) return false; " is 161.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasNationalPrefixForParsing != other.hasNationalPrefixForParsing || (hasNationalPrefixForParsing && !nationalPrefixForParsing_.Equals(other.nationalPrefixForParsing_))) return false; " is 186.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasNationalPrefixTransformRule != other.hasNationalPrefixTransformRule || (hasNationalPrefixTransformRule && !nationalPrefixTransformRule_.Equals(other.nationalPrefixTransformRule_))) return false; " is 201.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasSameMobileAndFixedLinePattern != other.hasSameMobileAndFixedLinePattern || (hasSameMobileAndFixedLinePattern && !sameMobileAndFixedLinePattern_.Equals(other.sameMobileAndFixedLinePattern_))) return false; " is 211.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasMainCountryForCode != other.hasMainCountryForCode || (hasMainCountryForCode && !mainCountryForCode_.Equals(other.mainCountryForCode_))) return false; " is 156.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasLeadingDigits != other.hasLeadingDigits || (hasLeadingDigits && !leadingDigits_.Equals(other.leadingDigits_))) return false; " is 131.
Long Statement,PhoneNumbers,PhoneMetadata,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonemetadata.cs,Equals,The length of the statement  "      if (hasLeadingZeroPossible != other.hasLeadingZeroPossible || (hasLeadingZeroPossible && !leadingZeroPossible_.Equals(other.leadingZeroPossible_))) return false; " is 161.
Long Statement,PhoneNumbers,PhoneNumber,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonenumber.cs,Equals,The length of the statement  "      if (hasCountryCode != other.hasCountryCode || (hasCountryCode && !countryCode_.Equals(other.countryCode_))) return false; " is 121.
Long Statement,PhoneNumbers,PhoneNumber,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonenumber.cs,Equals,The length of the statement  "      if (hasNationalNumber != other.hasNationalNumber || (hasNationalNumber && !nationalNumber_.Equals(other.nationalNumber_))) return false; " is 136.
Long Statement,PhoneNumbers,PhoneNumber,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonenumber.cs,Equals,The length of the statement  "      if (hasCountryCodeSource != other.hasCountryCodeSource || (hasCountryCodeSource && !countryCodeSource_.Equals(other.countryCodeSource_))) return false; " is 151.
Long Statement,PhoneNumbers,PhoneNumber,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\Phonenumber.cs,Equals,The length of the statement  "      if (hasPreferredDomesticCarrierCode != other.hasPreferredDomesticCarrierCode || (hasPreferredDomesticCarrierCode && !preferredDomesticCarrierCode_.Equals(other.preferredDomesticCarrierCode_))) return false; " is 206.
Complex Conditional,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,TrimAfterUnwantedChars,The conditional expression  "c != '#' && (                      uc != UnicodeCategory.UppercaseLetter &&                      uc != UnicodeCategory.LowercaseLetter &&                      uc != UnicodeCategory.TitlecaseLetter &&                      uc != UnicodeCategory.ModifierLetter &&                      uc != UnicodeCategory.OtherLetter &&                      uc != UnicodeCategory.DecimalDigitNumber &&                      uc != UnicodeCategory.LetterNumber &&                      uc != UnicodeCategory.OtherNumber)"  is complex.
Complex Conditional,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,Verify,The conditional expression  "!util.IsValidNumber(number) ||                             !PhoneNumberMatcher.ContainsOnlyValidXChars(number' candidate' util) ||                             PhoneNumberMatcher.ContainsMoreThanOneSlash(candidate) ||                             !PhoneNumberMatcher.IsNationalPrefixPresentIfRequired(number' util)"  is complex.
Complex Conditional,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,Verify,The conditional expression  "!util.IsValidNumber(number) ||                                  !PhoneNumberMatcher.ContainsOnlyValidXChars(number' candidate' util) ||                                  PhoneNumberMatcher.ContainsMoreThanOneSlash(candidate) ||                                  !PhoneNumberMatcher.IsNationalPrefixPresentIfRequired(number' util)"  is complex.
Complex Conditional,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatNumberForMobileDialing,The conditional expression  "regionCode.Equals("BR") && regionCallingFrom.Equals("BR") &&                  ((numberType == PhoneNumberType.FIXED_LINE) || (numberType == PhoneNumberType.MOBILE) ||                  (numberType == PhoneNumberType.FIXED_LINE_OR_MOBILE))"  is complex.
Complex Conditional,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatNsnUsingPattern,The conditional expression  "numberFormat == PhoneNumberFormat.NATIONAL &&                  carrierCode != null && carrierCode.Length > 0 &&                  formattingPattern.DomesticCarrierCodeFormattingRule.Length > 0"  is complex.
Empty Catch Block,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,ParseAndVerify,The method has an empty catch block.
Empty Catch Block,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,LoadMetadataFromFile,The method has an empty catch block.
Empty Catch Block,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,GetExampleNumberForType,The method has an empty catch block.
Empty Catch Block,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,GetExampleNumberForNonGeoEntity,The method has an empty catch block.
Empty Catch Block,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,IsNumberMatch,The method has an empty catch block.
Empty Catch Block,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,IsNumberMatch,The method has an empty catch block.
Magic Number,PhoneNumbers,AreaCodeMap,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\AreaCodeMap.cs,binarySearch,The following statement contains a magic number: while (start <= end)              {                  current = (start + end) / 2;                  int currentValue = areaCodeMapStorage.getPrefix(current);                  if (currentValue == value)                  {                      return current;                  }                  else if (currentValue > value)                  {                      current--;                      end = current;                  }                  else                  {                      start = current + 1;                  }              }
Magic Number,PhoneNumbers,AsYouTypeFormatter,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\AsYouTypeFormatter.cs,InputDigitWithOptionToRememberPosition,The following statement contains a magic number: switch (accruedInputWithoutFormatting.Length)              {                  case 0:                  case 1:                  case 2:                      return accruedInput.ToString();                  case 3:                      if (AttemptToExtractIdd())                      {                          isExpectingCountryCallingCode = true;                      }                      else                      {  // No IDD or plus sign is found' might be entering in national format.                          nationalPrefixExtracted = RemoveNationalPrefixFromNationalNumber();                          return AttemptToChooseFormattingPattern();                      }                      goto default;                  default:                      if (isExpectingCountryCallingCode)                      {                          if (AttemptToExtractCountryCallingCode())                          {                              isExpectingCountryCallingCode = false;                          }                          return prefixBeforeNationalNumber + nationalNumber.ToString();                      }                      if (possibleFormats.Count > 0)                      {  // The formatting pattern is already chosen.                          String tempNationalNumber = InputDigitHelper(nextChar);                          // See if the accrued digits can be formatted properly already. If not' use the results                          // from inputDigitHelper' which does formatting based on the formatting pattern chosen.                          String formattedNumber = AttemptToFormatAccruedDigits();                          if (formattedNumber.Length > 0)                          {                              return formattedNumber;                          }                          NarrowDownPossibleFormats(nationalNumber.ToString());                          if (MaybeCreateNewTemplate())                          {                              return InputAccruedNationalNumber();                          }                          return ableToFormat                             ? prefixBeforeNationalNumber + tempNationalNumber                             : accruedInput.ToString();                      }                      else                      {                          return AttemptToChooseFormattingPattern();                      }              }
Magic Number,PhoneNumbers,AsYouTypeFormatter,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\AsYouTypeFormatter.cs,InputDigitWithOptionToRememberPosition,The following statement contains a magic number: switch (accruedInputWithoutFormatting.Length)              {                  case 0:                  case 1:                  case 2:                      return accruedInput.ToString();                  case 3:                      if (AttemptToExtractIdd())                      {                          isExpectingCountryCallingCode = true;                      }                      else                      {  // No IDD or plus sign is found' might be entering in national format.                          nationalPrefixExtracted = RemoveNationalPrefixFromNationalNumber();                          return AttemptToChooseFormattingPattern();                      }                      goto default;                  default:                      if (isExpectingCountryCallingCode)                      {                          if (AttemptToExtractCountryCallingCode())                          {                              isExpectingCountryCallingCode = false;                          }                          return prefixBeforeNationalNumber + nationalNumber.ToString();                      }                      if (possibleFormats.Count > 0)                      {  // The formatting pattern is already chosen.                          String tempNationalNumber = InputDigitHelper(nextChar);                          // See if the accrued digits can be formatted properly already. If not' use the results                          // from inputDigitHelper' which does formatting based on the formatting pattern chosen.                          String formattedNumber = AttemptToFormatAccruedDigits();                          if (formattedNumber.Length > 0)                          {                              return formattedNumber;                          }                          NarrowDownPossibleFormats(nationalNumber.ToString());                          if (MaybeCreateNewTemplate())                          {                              return InputAccruedNationalNumber();                          }                          return ableToFormat                             ? prefixBeforeNationalNumber + tempNationalNumber                             : accruedInput.ToString();                      }                      else                      {                          return AttemptToChooseFormattingPattern();                      }              }
Magic Number,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,PhoneNumberMatcher,The following statement contains a magic number: String bracketPairLimit = Limit(0' 3);
Magic Number,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,PhoneNumberMatcher,The following statement contains a magic number: String leadLimit = Limit(0' 2);
Magic Number,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,PhoneNumberMatcher,The following statement contains a magic number: String punctuationLimit = Limit(0' 4);
Magic Number,PhoneNumbers,PhoneNumberMatcher,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberMatcher.cs,AllNumberGroupsAreExactlyPresent,The following statement contains a magic number: int candidateNumberGroupIndex =                  number.HasExtension ? candidateGroups.Length - 2 : candidateGroups.Length - 1;
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,GetLengthOfNationalDestinationCode,The following statement contains a magic number: if (numberGroups.Length <= 3)                  return 0;
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,GetLengthOfNationalDestinationCode,The following statement contains a magic number: if (GetRegionCodeForCountryCode(number.CountryCode) == "AR" && GetNumberType(number) == PhoneNumberType.MOBILE)                  // Argentinian mobile numbers' when formatted in the international format' are in the form of                  // +54 9 NDC XXXX.... As a result' we take the length of the third group (NDC) and add 1 for                  // the digit 9' which also forms part of the national significant number.                  //                  // TODO: Investigate the possibility of better modeling the metadata to make it                  // easier to obtain the NDC.                  return numberGroups[3].Length + 1;
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,GetLengthOfNationalDestinationCode,The following statement contains a magic number: return numberGroups[2].Length;
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,Format,The following statement contains a magic number: var formattedNumber = new StringBuilder(20);
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatByPattern,The following statement contains a magic number: StringBuilder formattedNumber = new StringBuilder(20);
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatNationalNumberWithCarrierCode,The following statement contains a magic number: var formattedNumber = new StringBuilder(20);
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatOutOfCountryKeepingAlphaChars,The following statement contains a magic number: if (nationalNumber.Length > 3)              {                  int firstNationalNumberDigit = rawInput.IndexOf(nationalNumber.Substring(0' 3));                  if (firstNationalNumberDigit != -1)                      rawInput = rawInput.Substring(firstNationalNumberDigit);              }
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,FormatOutOfCountryKeepingAlphaChars,The following statement contains a magic number: if (nationalNumber.Length > 3)              {                  int firstNationalNumberDigit = rawInput.IndexOf(nationalNumber.Substring(0' 3));                  if (firstNationalNumberDigit != -1)                      rawInput = rawInput.Substring(firstNationalNumberDigit);              }
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,TruncateTooLongNumber,The following statement contains a magic number: do              {                  nationalNumber /= 10;                  PhoneNumber.Builder numberCopy = number.Clone();                  numberCopy.SetNationalNumber(nationalNumber);                  copy = numberCopy.Build();                  if (IsPossibleNumberWithReason(copy) == ValidationResult.TOO_SHORT ||                    nationalNumber == 0)                      return false;              }              while (!IsValidNumber(copy));
Magic Number,PhoneNumbers,PhoneNumberUtil,C:\repos\erezak_libphonenumber-csharp\csharp\PhoneNumbers\PhoneNumberUtil.cs,MaybeStripNationalPrefixAndCarrierCode,The following statement contains a magic number: if (prefixMatch.Success)              {                  var nationalNumberRule =                      regexCache.GetPatternForRegex(metadata.GeneralDesc.NationalNumberPattern);                  // Check if the original number is viable.                  bool isViableOriginalNumber = nationalNumberRule.MatchAll(number.ToString()).Success;                  // prefixMatcher.group(numOfGroups) == null implies nothing was captured by the capturing                  // groups in possibleNationalPrefix; therefore' no transformation is necessary' and we just                  // remove the national prefix.                  int numOfGroups = prefixMatch.Groups.Count;                  String transformRule = metadata.NationalPrefixTransformRule;                  if (transformRule == null || transformRule.Length == 0 ||                      !prefixMatch.Groups[numOfGroups - 1].Success)                  {                      // If the original number was viable' and the resultant number is not' we return.                      if (isViableOriginalNumber &&                          !nationalNumberRule.MatchAll(number.ToString().Substring(prefixMatch.Index + prefixMatch.Length)).Success)                          return false;                      if (carrierCode != null && numOfGroups > 1 && prefixMatch.Groups[numOfGroups - 1].Success)                          carrierCode.Append(prefixMatch.Groups[1].Value);                      number.Remove(0' prefixMatch.Index + prefixMatch.Length);                      return true;                  }                  else                  {                      // Check that the resultant number is still viable. If not' return. Check this by copying                      // the string buffer and making the transformation on the copy first.                      StringBuilder transformedNumber = new StringBuilder(                          prefixMatcher.Replace(number.ToString()' transformRule' 1)); //XXX: ToString                      if (isViableOriginalNumber &&                          !nationalNumberRule.MatchAll(transformedNumber.ToString()).Success)                          return false;                      if (carrierCode != null && numOfGroups > 2)                          carrierCode.Append(prefixMatcher.Match(number.ToString()).Groups[1].Value);                      number.Length = 0;                      number.Append(transformedNumber.ToString());                      return true;                  }              }
