Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,Encrypt,Cyclomatic complexity of the method is 9
Long Parameter List,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,WriteMemoryStream,The method has 5 parameters.
Empty Catch Block,Nfro.Core.Helpers,ConversionHelper,C:\repos\2nfro_dotNet\Core\Helpers\ConversionHelper.cs,ChangeTo,The method has an empty catch block.
Magic Number,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,Encrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes (key' SALT_SIZE)) {  	byte[] saltBytes = keyDerivationFunction.Salt;  	byte[] keyBytes = keyDerivationFunction.GetBytes (32);  	byte[] ivBytes = keyDerivationFunction.GetBytes (16);  	using (var aesManaged = new AesManaged ()) {  		aesManaged.KeySize = 256;  		using (var encryptor = aesManaged.CreateEncryptor (keyBytes' ivBytes)) {  			MemoryStream memoryStream = null;  			CryptoStream cryptoStream = null;  			return WriteMemoryStream (plainText' ref saltBytes' encryptor' ref memoryStream' ref cryptoStream);  		}  	}  }  
Magic Number,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,Encrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes (key' SALT_SIZE)) {  	byte[] saltBytes = keyDerivationFunction.Salt;  	byte[] keyBytes = keyDerivationFunction.GetBytes (32);  	byte[] ivBytes = keyDerivationFunction.GetBytes (16);  	using (var aesManaged = new AesManaged ()) {  		aesManaged.KeySize = 256;  		using (var encryptor = aesManaged.CreateEncryptor (keyBytes' ivBytes)) {  			MemoryStream memoryStream = null;  			CryptoStream cryptoStream = null;  			return WriteMemoryStream (plainText' ref saltBytes' encryptor' ref memoryStream' ref cryptoStream);  		}  	}  }  
Magic Number,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,Encrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes (key' SALT_SIZE)) {  	byte[] saltBytes = keyDerivationFunction.Salt;  	byte[] keyBytes = keyDerivationFunction.GetBytes (32);  	byte[] ivBytes = keyDerivationFunction.GetBytes (16);  	using (var aesManaged = new AesManaged ()) {  		aesManaged.KeySize = 256;  		using (var encryptor = aesManaged.CreateEncryptor (keyBytes' ivBytes)) {  			MemoryStream memoryStream = null;  			CryptoStream cryptoStream = null;  			return WriteMemoryStream (plainText' ref saltBytes' encryptor' ref memoryStream' ref cryptoStream);  		}  	}  }  
Magic Number,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,Encrypt,The following statement contains a magic number: using (var aesManaged = new AesManaged ()) {  	aesManaged.KeySize = 256;  	using (var encryptor = aesManaged.CreateEncryptor (keyBytes' ivBytes)) {  		MemoryStream memoryStream = null;  		CryptoStream cryptoStream = null;  		return WriteMemoryStream (plainText' ref saltBytes' encryptor' ref memoryStream' ref cryptoStream);  	}  }  
Magic Number,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,Encrypt,The following statement contains a magic number: aesManaged.KeySize = 256;  
Magic Number,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,Decrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes (key' saltBytes)) {  	var keyBytes = keyDerivationFunction.GetBytes (32);  	var ivBytes = keyDerivationFunction.GetBytes (16);  	return DecryptWithAES (ciphertextBytes' keyBytes' ivBytes);  }  
Magic Number,Nfro.Core.Security,AES,C:\repos\2nfro_dotNet\Core\Security\AES.cs,Decrypt,The following statement contains a magic number: using (var keyDerivationFunction = new Rfc2898DeriveBytes (key' saltBytes)) {  	var keyBytes = keyDerivationFunction.GetBytes (32);  	var ivBytes = keyDerivationFunction.GetBytes (16);  	return DecryptWithAES (ciphertextBytes' keyBytes' ivBytes);  }  
Magic Number,Nfro.Core.Security,TokenGenerator,C:\repos\2nfro_dotNet\Core\Security\TokenGenerator.cs,GenerateToken,The following statement contains a magic number: token.Append (getChar (charIndex' rand.Next (2) == 0));  
Magic Number,Nfro.Core.Security,TokenGenerator,C:\repos\2nfro_dotNet\Core\Security\TokenGenerator.cs,GenerateToken,The following statement contains a magic number: while (charIndex / 26 > 0) {  	charIndex /= 13;  	token.Append (getChar (charIndex' rand.Next (2) == 0));  	token.Append (ticks [rand.Next (tickLength)]);  }  
Magic Number,Nfro.Core.Security,TokenGenerator,C:\repos\2nfro_dotNet\Core\Security\TokenGenerator.cs,GenerateToken,The following statement contains a magic number: while (charIndex / 26 > 0) {  	charIndex /= 13;  	token.Append (getChar (charIndex' rand.Next (2) == 0));  	token.Append (ticks [rand.Next (tickLength)]);  }  
Magic Number,Nfro.Core.Security,TokenGenerator,C:\repos\2nfro_dotNet\Core\Security\TokenGenerator.cs,GenerateToken,The following statement contains a magic number: while (charIndex / 26 > 0) {  	charIndex /= 13;  	token.Append (getChar (charIndex' rand.Next (2) == 0));  	token.Append (ticks [rand.Next (tickLength)]);  }  
Magic Number,Nfro.Core.Security,TokenGenerator,C:\repos\2nfro_dotNet\Core\Security\TokenGenerator.cs,GenerateToken,The following statement contains a magic number: charIndex /= 13;  
Magic Number,Nfro.Core.Security,TokenGenerator,C:\repos\2nfro_dotNet\Core\Security\TokenGenerator.cs,GenerateToken,The following statement contains a magic number: token.Append (getChar (charIndex' rand.Next (2) == 0));  
Magic Number,Nfro.Core.Security,UserCodeGenerator,C:\repos\2nfro_dotNet\Core\Security\UserCodeGenerator.cs,GenerateCode,The following statement contains a magic number: for (int i = 0; i < codeLength; i++) {  	codeBuilder.Append (GetChar (rand.Next (72)));  }  
Magic Number,Nfro.Core.Security,UserCodeGenerator,C:\repos\2nfro_dotNet\Core\Security\UserCodeGenerator.cs,GenerateCode,The following statement contains a magic number: codeBuilder.Append (GetChar (rand.Next (72)));  
Magic Number,Nfro.Core.Security,UserCodeGenerator,C:\repos\2nfro_dotNet\Core\Security\UserCodeGenerator.cs,GetChar,The following statement contains a magic number: if (charKey > 72 || charKey < 0) {  	throw new Exception ("CharKey needs to be greater than 0 and less than 36");  }  
Magic Number,Nfro.Core.Security,UserCodeGenerator,C:\repos\2nfro_dotNet\Core\Security\UserCodeGenerator.cs,GetChar,The following statement contains a magic number: if (charKey < 20) {  	return (charKey % 10).ToString () [0];  }  
Magic Number,Nfro.Core.Security,UserCodeGenerator,C:\repos\2nfro_dotNet\Core\Security\UserCodeGenerator.cs,GetChar,The following statement contains a magic number: if (charKey < 20) {  	return (charKey % 10).ToString () [0];  }  
Magic Number,Nfro.Core.Security,UserCodeGenerator,C:\repos\2nfro_dotNet\Core\Security\UserCodeGenerator.cs,GetChar,The following statement contains a magic number: return (charKey % 10).ToString () [0];  
Magic Number,Nfro.Core.Security,UserCodeGenerator,C:\repos\2nfro_dotNet\Core\Security\UserCodeGenerator.cs,GetChar,The following statement contains a magic number: if (key / 26 == 0) {  	return char.ToLower (letter);  }  
