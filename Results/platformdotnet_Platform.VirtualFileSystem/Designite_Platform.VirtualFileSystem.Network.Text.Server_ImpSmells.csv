Implementation smell,Namespace,Class,File,Method,Description
Long Method,Platform.VirtualFileSystem.Network.Text.Server,ListCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ListCommandProcessor.cs,Process,The method has 134 lines of code.
Complex Method,Platform.VirtualFileSystem.Network.Text.Server,CommandOptionsSerializer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\CommandOptionsSerializer.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,Platform.VirtualFileSystem.Network.Text.Server,CommandOptionsSerializer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\CommandOptionsSerializer.cs,SetValue,Cyclomatic complexity of the method is 9
Complex Method,Platform.VirtualFileSystem.Network.Text.Server,ListCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ListCommandProcessor.cs,Process,Cyclomatic complexity of the method is 9
Long Parameter List,Platform.VirtualFileSystem.Network.Text.Server,OptionInfo,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\CommandOptionsSerializer.cs,OptionInfo,The method has 6 parameters. Parameters: key' name' type' memberInfo' attribute' choicesAttribute
Long Parameter List,Platform.VirtualFileSystem.Network.Text.Server,DownloadTicket,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\DownloadTicket.cs,DownloadTicket,The method has 5 parameters. Parameters: connection' file' fileShare' offset' length
Long Parameter List,Platform.VirtualFileSystem.Network.Text.Server,FileSystemNetworkServer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemNetworkServer.cs,FileSystemNetworkServer,The method has 5 parameters. Parameters: connectionFactory' commandBuilderFactory' commandProcessorProviderFactory' address' port
Long Parameter List,Platform.VirtualFileSystem.Network.Text.Server,FileSystemNetworkServer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemNetworkServer.cs,FileSystemNetworkServer,The method has 5 parameters. Parameters: connectionFactory' commandBuilderFactory' commandProcessorProviderFactory' address' port
Long Identifier,Platform.VirtualFileSystem.Network.Text.Server,FileSystemNetworkServer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemNetworkServer.cs,FileSystemNetworkServer,The length of the parameter commandProcessorProviderFactory is 31.
Long Identifier,Platform.VirtualFileSystem.Network.Text.Server,FileSystemNetworkServer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemNetworkServer.cs,FileSystemNetworkServer,The length of the parameter commandProcessorProviderFactory is 31.
Long Identifier,Platform.VirtualFileSystem.Network.Text.Server,FileSystemNetworkServer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemNetworkServer.cs,FileSystemNetworkServer,The length of the parameter commandProcessorProviderFactory is 31.
Long Identifier,Platform.VirtualFileSystem.Network.Text.Server,FileSystemNetworkServer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemNetworkServer.cs,FileSystemNetworkServer,The length of the parameter commandProcessorProviderFactory is 31.
Long Statement,Platform.VirtualFileSystem.Network.Text.Server,CommandOptionsSerializer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\CommandOptionsSerializer.cs,AddCommandLineOption,The length of the statement  "				var choicesAttributes = (CommandOptionChoicesAttribute[])memberInfo.GetCustomAttributes(typeof(CommandOptionChoicesAttribute)' true); " is 133.
Long Statement,Platform.VirtualFileSystem.Network.Text.Server,CopyCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\CopyCommandProcessor.cs,Process,The length of the statement  "				var service = (INodeCopyingService)src.GetService(new NodeCopyingServiceType(des' options.Overwrite' options.BufferSize)); " is 122.
Long Statement,Platform.VirtualFileSystem.Network.Text.Server,DownloadCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\DownloadCommandProcessor.cs,Process,The length of the statement  "			var ticket = new DownloadTicket(this.Connection' file' (FileShare)Enum.Parse(typeof(FileShare)' options.Share' true)'  options.Offset' options.Length); " is 151.
Long Statement,Platform.VirtualFileSystem.Network.Text.Server,AdhocEncryptionCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\AdhocEncryptionCommandProcessor.cs,Process,The length of the statement  "				this.Connection.WriteStream = new InteractiveDeflaterOutputStream(this.Connection.RawWriteStream' new Deflater(Deflater.DEFAULT_COMPRESSION' true)' 512); " is 153.
Long Statement,Platform.VirtualFileSystem.Network.Text.Server,FileSystemCommandConnection,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemCommandConnection.cs,UnhandledExceptionFromSingleCommand,The length of the statement  "						ResponseCodes.ERROR' ErrorCodes.IO_ERROR' e.GetType().Name' TextConversion.ToEscapedHexString(e.ToString()' isEscapeChar)); " is 123.
Long Statement,Platform.VirtualFileSystem.Network.Text.Server,FileSystemCommandConnection,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemCommandConnection.cs,UnhandledExceptionFromSingleCommand,The length of the statement  "						ResponseCodes.ERROR' ((FileSystemServerException)e).ErrorCode' TextConversion.ToEscapedHexString(e.ToString()' isEscapeChar)); " is 126.
Long Statement,Platform.VirtualFileSystem.Network.Text.Server,GetAttributesCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\GetAttributesCommandProcessor.cs,Process,The length of the statement  "					Connection.WriteTextBlock(@"{0}=""{1}:{2}"""' attribute.Name' ProtocolTypes.GetTypeName(attribute.Value.GetType())' ProtocolTypes.ToEscapedString(attribute.Value)); " is 164.
Long Statement,Platform.VirtualFileSystem.Network.Text.Server,ListCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ListCommandProcessor.cs,Process,The length of the statement  "									Connection.WriteTextBlock(TextConversion.ToEscapedHexString(enclosedNode.Name' TextConversion.IsStandardUrlEscapedChar)); " is 121.
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Network.Text.Server,CommandOptionsSerializer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\CommandOptionsSerializer.cs,CommandOptionsSerializer,The constructor "CommandOptionsSerializer" calls a virtual method "Scan".
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,CopyCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\CopyCommandProcessor.cs,Process,The following statement contains a magic number: if (options.Monitor)  			{  				var x = 0;  				var service = (INodeCopyingService)src.GetService(new NodeCopyingServiceType(des' options.Overwrite' options.BufferSize));    				service.Progress.ValueChanged += delegate  				{  					Connection.WriteTextBlock("{0} {1}"' service.Progress.CurrentValue' service.Progress.MaximumValue);    					if (x % 8 == 0)  					{  						Connection.Flush();  					}    					x++;  				};    				int okwritten = 0;    				Connection.WriteOk();    				Action routine = delegate  				{  					service.Run();  					this.Connection.Flush();    					//  					// Only write OK if the main thread hasn't printed OK/CANCEL  					// in response to an a CANCEL request.  					//    					if (System.Threading.Interlocked.CompareExchange(ref okwritten' 1' 0) == 0)  					{  						this.Connection.WriteOk();  						this.Connection.Flush();  					}  				};    				var result = routine.BeginInvoke(null' null);    				//  				// Read the special CANCEL and READY commands.  				//    				var cancelled = false;    				for (;;)  				{  					var line = this.Connection.ReadTextBlock();    					if (line == null)  					{  						this.Connection.RunLevel = DisconnectedRunLevel.Default;    						return;  					}    					if (line.StartsWith(ResponseCodes.READY' StringComparison.CurrentCultureIgnoreCase))  					{  						//  						// READY tells us to process new commands.  						//    						break;  					}  					else if (line.StartsWith(ResponseCodes.CANCEL' StringComparison.CurrentCultureIgnoreCase))  					{  						//  						// CANCEL tells us to cancel the operation.  						//    						// Cancel the operation    						if (cancelled)  						{  							continue;  						}    						service.Stop();    						// Write OK/CANCELED if the operation thread hasn't already    						if (System.Threading.Interlocked.CompareExchange(ref okwritten' 1' 0) == 0)  						{  							if (service.TaskState == Platform.TaskState.Finished)  							{  								Connection.WriteOk();  							}  							else  							{  								Connection.WriteError(ErrorCodes.CANCELLED);  							}    							Connection.Flush();  						}    						// Wait for the operation thread to finish    						routine.EndInvoke(result);    						cancelled = true;  					}  					else  					{  						this.Connection.RunLevel = DisconnectedRunLevel.Default;    						return;  					}  				}    				Connection.Flush();  			}  			else  			{  				// Perform the operation    				Connection.WriteOk();  				  				src.CopyTo(des' options.Overwrite);  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,AdhocEncryptionCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\AdhocEncryptionCommandProcessor.cs,Process,The following statement contains a magic number: if (options.Modulus != null && options.Exponent != null && options.Algorithm != null)  			{  				var symmetric = new RijndaelManaged();  				symmetric.GenerateKey();    				var modulus = TextConversion.FromBase64String(options.Modulus);  				var exponent = TextConversion.FromBase64String(options.Exponent);    				var rsaparameters = new RSAParameters();  				rsaparameters.Modulus = modulus;  				rsaparameters.Exponent = exponent;  				  				var rsa = new RSACryptoServiceProvider();  				rsa.ImportParameters(rsaparameters);  				  				var myrsa = new RSACryptoServiceProvider();    				rsaparameters = myrsa.ExportParameters(false);    				Connection.WriteOk  				(  					"Modulus"'  					TextConversion.ToBase64String(rsaparameters.Modulus)'  					"Exponent"'  					TextConversion.ToBase64String(rsaparameters.Exponent)'  					"IV"'  					TextConversion.ToBase64String(new RSAPKCS1KeyExchangeFormatter(rsa).CreateKeyExchange(symmetric.IV))'  					"KeyExchange"'  					TextConversion.ToBase64String(new RSAPKCS1KeyExchangeFormatter(rsa).CreateKeyExchange(symmetric.Key))  				);    				Connection.Flush();    				if (options.WaitForReady)  				{  					Connection.ReadReady();  				}  			}  			else if (options.Compress)  			{  				Connection.WriteOk();  				Connection.Flush();    				this.Connection.ReadStream = new InteractiveInflaterInputStream(this.Connection.RawReadStream' new Inflater(true));  				this.Connection.WriteStream = new InteractiveDeflaterOutputStream(this.Connection.RawWriteStream' new Deflater(Deflater.DEFAULT_COMPRESSION' true)' 512);    				if (options.WaitForReady)  				{  					Connection.ReadReady();  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,FileSystemCommandConnection,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemCommandConnection.cs,ReadTextBlock,The following statement contains a magic number: var retval = this.reader.ReadLine(10 * 1024 * 1024' out overflow);
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,FileSystemCommandConnection,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemCommandConnection.cs,ReadTextBlock,The following statement contains a magic number: var retval = this.reader.ReadLine(10 * 1024 * 1024' out overflow);
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,FileSystemCommandConnection,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemCommandConnection.cs,ReadTextBlock,The following statement contains a magic number: var retval = this.reader.ReadLine(10 * 1024 * 1024' out overflow);
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,FileSystemCommandConnection,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemCommandConnection.cs,WriteOk,The following statement contains a magic number: if (extraArgs.Length % 2 != 0)  			{  				throw new ArgumentException();  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,FileSystemCommandConnection,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemCommandConnection.cs,WriteOk,The following statement contains a magic number: if (extraArgs.Length > 0)  			{  				var text = new StringBuilder(255);    				text.Append(ResponseCodes.OK);    				if (extraArgs.Length > 0)  				{  					text.Append(' ');    					for (var i = 0; i < extraArgs.Length; i += 2)  					{  						text.Append(extraArgs[i].ToString());  						text.Append('=');  						text.Append('\"');  						text.Append(extraArgs[i + 1].ToString());  						text.Append('\"');    						text.Append(" ");  					}    					text.Length--;  				}    				WriteTextBlock(text.ToString());  			}  			else  			{  				WriteTextBlock(ResponseCodes.OK);  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,FileSystemCommandConnection,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemCommandConnection.cs,WriteOk,The following statement contains a magic number: if (extraArgs.Length > 0)  			{  				var text = new StringBuilder(255);    				text.Append(ResponseCodes.OK);    				if (extraArgs.Length > 0)  				{  					text.Append(' ');    					for (var i = 0; i < extraArgs.Length; i += 2)  					{  						text.Append(extraArgs[i].ToString());  						text.Append('=');  						text.Append('\"');  						text.Append(extraArgs[i + 1].ToString());  						text.Append('\"');    						text.Append(" ");  					}    					text.Length--;  				}    				WriteTextBlock(text.ToString());  			}  			else  			{  				WriteTextBlock(ResponseCodes.OK);  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,FileSystemNetworkServer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\FileSystemNetworkServer.cs,Initialize,The following statement contains a magic number: this.Tickets = new TimedReferenceDictionary<string' Ticket>  			(  				TimeSpan.FromMinutes(15)  			);
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ListCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ListCommandProcessor.cs,Process,The following statement contains a magic number: if (options.IncludeAttributes)  			{  				Exception exception = null;                  InvocationQueue queue;                    if (t_InvocationQueue == null)                  {                      t_InvocationQueue = new InvocationQueue();                  }                                                    queue = t_InvocationQueue;    				queue.TaskAsynchronisity = TaskAsynchronisity.AsyncWithSystemPoolThread;    				queue.Start();    				try  				{  					IEnumerable<INode> children = null;    					if (String.IsNullOrEmpty(options.Regex))  					{  						children = dir.GetChildren();  					}  					else  					{  						children = dir.GetChildren(RegexBasedNodePredicateHelper.New(options.Regex));  					}    					foreach (var node in children)  					{  						var enclosedNode = node;    						if (queue.TaskState == TaskState.Stopped)  						{  							break;  						}    						queue.Enqueue  						(  							delegate  							{  								try  								{  									if (enclosedNode.NodeType == NodeType.Directory)  									{  										Connection.WriteTextPartialBlock("d:");  									}  									else  									{  										Connection.WriteTextPartialBlock("f:");  									}    									Connection.WriteTextBlock(TextConversion.ToEscapedHexString(enclosedNode.Name' TextConversion.IsStandardUrlEscapedChar));    									AttributesCommands.PrintAttributes(this.Connection' enclosedNode);    									count++;    									if (count % 15 == 0)  									{  										Connection.Flush();  									}  								}  								catch (Exception e)  								{  									queue.Stop();    									exception = e;  								}  							}  						);  					}    					if (queue.TaskState == TaskState.Stopped)  					{  						throw exception;  					}  				}  				finally  				{  					queue.Enqueue(queue.Stop);  										  					queue.WaitForAnyTaskState(value => value != TaskState.Running);    					queue.Reset();    					Connection.Flush();  				}  			}  			else  			{  				IEnumerable<string> children;    				if (string.IsNullOrEmpty(options.Regex))  				{  					children = dir.GetChildNames(NodeType.Directory);  				}  				else  				{  					children = dir.GetChildNames(NodeType.Directory' PredicateUtils.NewRegex(options.Regex));  				}    				foreach (var name in children)  				{  					Connection.WriteTextPartialBlock("d:");                      Connection.WriteTextBlock(TextConversion.ToEscapedHexString(name' TextConversion.IsStandardUrlEscapedChar));                                            count++;                        if (count % 15 == 0)                      {                          Connection.Flush();                      }  				}    				count = 0;    				if (string.IsNullOrEmpty(options.Regex))  				{  					children = dir.GetChildNames(NodeType.File);  				}  				else  				{  					children = dir.GetChildNames(NodeType.File' PredicateUtils.NewRegex(options.Regex));  				}    				foreach (var name in children)  				{                      Connection.WriteTextPartialBlock("f:");                      Connection.WriteTextBlock(TextConversion.ToEscapedHexString(name));                        					count++;                        if (count % 15 == 0)                      {                          Connection.Flush();                      }  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ListCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ListCommandProcessor.cs,Process,The following statement contains a magic number: if (options.IncludeAttributes)  			{  				Exception exception = null;                  InvocationQueue queue;                    if (t_InvocationQueue == null)                  {                      t_InvocationQueue = new InvocationQueue();                  }                                                    queue = t_InvocationQueue;    				queue.TaskAsynchronisity = TaskAsynchronisity.AsyncWithSystemPoolThread;    				queue.Start();    				try  				{  					IEnumerable<INode> children = null;    					if (String.IsNullOrEmpty(options.Regex))  					{  						children = dir.GetChildren();  					}  					else  					{  						children = dir.GetChildren(RegexBasedNodePredicateHelper.New(options.Regex));  					}    					foreach (var node in children)  					{  						var enclosedNode = node;    						if (queue.TaskState == TaskState.Stopped)  						{  							break;  						}    						queue.Enqueue  						(  							delegate  							{  								try  								{  									if (enclosedNode.NodeType == NodeType.Directory)  									{  										Connection.WriteTextPartialBlock("d:");  									}  									else  									{  										Connection.WriteTextPartialBlock("f:");  									}    									Connection.WriteTextBlock(TextConversion.ToEscapedHexString(enclosedNode.Name' TextConversion.IsStandardUrlEscapedChar));    									AttributesCommands.PrintAttributes(this.Connection' enclosedNode);    									count++;    									if (count % 15 == 0)  									{  										Connection.Flush();  									}  								}  								catch (Exception e)  								{  									queue.Stop();    									exception = e;  								}  							}  						);  					}    					if (queue.TaskState == TaskState.Stopped)  					{  						throw exception;  					}  				}  				finally  				{  					queue.Enqueue(queue.Stop);  										  					queue.WaitForAnyTaskState(value => value != TaskState.Running);    					queue.Reset();    					Connection.Flush();  				}  			}  			else  			{  				IEnumerable<string> children;    				if (string.IsNullOrEmpty(options.Regex))  				{  					children = dir.GetChildNames(NodeType.Directory);  				}  				else  				{  					children = dir.GetChildNames(NodeType.Directory' PredicateUtils.NewRegex(options.Regex));  				}    				foreach (var name in children)  				{  					Connection.WriteTextPartialBlock("d:");                      Connection.WriteTextBlock(TextConversion.ToEscapedHexString(name' TextConversion.IsStandardUrlEscapedChar));                                            count++;                        if (count % 15 == 0)                      {                          Connection.Flush();                      }  				}    				count = 0;    				if (string.IsNullOrEmpty(options.Regex))  				{  					children = dir.GetChildNames(NodeType.File);  				}  				else  				{  					children = dir.GetChildNames(NodeType.File' PredicateUtils.NewRegex(options.Regex));  				}    				foreach (var name in children)  				{                      Connection.WriteTextPartialBlock("f:");                      Connection.WriteTextBlock(TextConversion.ToEscapedHexString(name));                        					count++;                        if (count % 15 == 0)                      {                          Connection.Flush();                      }  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ListCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ListCommandProcessor.cs,Process,The following statement contains a magic number: if (options.IncludeAttributes)  			{  				Exception exception = null;                  InvocationQueue queue;                    if (t_InvocationQueue == null)                  {                      t_InvocationQueue = new InvocationQueue();                  }                                                    queue = t_InvocationQueue;    				queue.TaskAsynchronisity = TaskAsynchronisity.AsyncWithSystemPoolThread;    				queue.Start();    				try  				{  					IEnumerable<INode> children = null;    					if (String.IsNullOrEmpty(options.Regex))  					{  						children = dir.GetChildren();  					}  					else  					{  						children = dir.GetChildren(RegexBasedNodePredicateHelper.New(options.Regex));  					}    					foreach (var node in children)  					{  						var enclosedNode = node;    						if (queue.TaskState == TaskState.Stopped)  						{  							break;  						}    						queue.Enqueue  						(  							delegate  							{  								try  								{  									if (enclosedNode.NodeType == NodeType.Directory)  									{  										Connection.WriteTextPartialBlock("d:");  									}  									else  									{  										Connection.WriteTextPartialBlock("f:");  									}    									Connection.WriteTextBlock(TextConversion.ToEscapedHexString(enclosedNode.Name' TextConversion.IsStandardUrlEscapedChar));    									AttributesCommands.PrintAttributes(this.Connection' enclosedNode);    									count++;    									if (count % 15 == 0)  									{  										Connection.Flush();  									}  								}  								catch (Exception e)  								{  									queue.Stop();    									exception = e;  								}  							}  						);  					}    					if (queue.TaskState == TaskState.Stopped)  					{  						throw exception;  					}  				}  				finally  				{  					queue.Enqueue(queue.Stop);  										  					queue.WaitForAnyTaskState(value => value != TaskState.Running);    					queue.Reset();    					Connection.Flush();  				}  			}  			else  			{  				IEnumerable<string> children;    				if (string.IsNullOrEmpty(options.Regex))  				{  					children = dir.GetChildNames(NodeType.Directory);  				}  				else  				{  					children = dir.GetChildNames(NodeType.Directory' PredicateUtils.NewRegex(options.Regex));  				}    				foreach (var name in children)  				{  					Connection.WriteTextPartialBlock("d:");                      Connection.WriteTextBlock(TextConversion.ToEscapedHexString(name' TextConversion.IsStandardUrlEscapedChar));                                            count++;                        if (count % 15 == 0)                      {                          Connection.Flush();                      }  				}    				count = 0;    				if (string.IsNullOrEmpty(options.Regex))  				{  					children = dir.GetChildNames(NodeType.File);  				}  				else  				{  					children = dir.GetChildNames(NodeType.File' PredicateUtils.NewRegex(options.Regex));  				}    				foreach (var name in children)  				{                      Connection.WriteTextPartialBlock("f:");                      Connection.WriteTextBlock(TextConversion.ToEscapedHexString(name));                        					count++;                        if (count % 15 == 0)                      {                          Connection.Flush();                      }  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,LoginCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\LoginCommandProcessor.cs,Process,The following statement contains a magic number: if (Interlocked.Increment(ref loginCount) % 8 == 0)  			{  				GC.Collect();  				GC.WaitForPendingFinalizers();  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,PrintBinaryCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\PrintBinaryCommandProcessor.cs,Process,The following statement contains a magic number: using (input = file.GetContent().GetInputStream(FileShare.ReadWrite))  			{  				if (inputBuffer == null)  				{  					inputBuffer = new byte[512];  				}    				byte[] buffer = inputBuffer;    				if (outputBuffer == null)  				{  					int length;    					length = (int)(buffer.Length * (4d / 3d));  					length += length % 4;    					outputBuffer = new char[length];  				}    				var outbuffer = outputBuffer;    				var leftovers = 0;    				try  				{  					for (; ; )  					{  						var x = input.Read(buffer' leftovers' buffer.Length - leftovers);    						if (x == 0)  						{  							if (leftovers == 0)  							{  								break;  							}    							x = leftovers;  							leftovers = 0;  						}  						else if (x < 3)  						{  							leftovers = x;    							continue;  						}    						if (x >= 3)  						{  							leftovers = x % 3;    							x -= leftovers;  						}    						var y = Convert.ToBase64CharArray(buffer' 0' x' outbuffer' 0' Base64FormattingOptions.None);    						Connection.WriteTextPartialBlock(outbuffer' 0' y);    						if (leftovers != 0)  						{  							Array.Copy(buffer' x' buffer' 0' leftovers);  						}  					}  				}  				catch (Exception)  				{  					ActionUtils.IgnoreExceptions(() => this.Connection.WriteTextBlock(""));    					throw;  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,PrintBinaryCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\PrintBinaryCommandProcessor.cs,Process,The following statement contains a magic number: using (input = file.GetContent().GetInputStream(FileShare.ReadWrite))  			{  				if (inputBuffer == null)  				{  					inputBuffer = new byte[512];  				}    				byte[] buffer = inputBuffer;    				if (outputBuffer == null)  				{  					int length;    					length = (int)(buffer.Length * (4d / 3d));  					length += length % 4;    					outputBuffer = new char[length];  				}    				var outbuffer = outputBuffer;    				var leftovers = 0;    				try  				{  					for (; ; )  					{  						var x = input.Read(buffer' leftovers' buffer.Length - leftovers);    						if (x == 0)  						{  							if (leftovers == 0)  							{  								break;  							}    							x = leftovers;  							leftovers = 0;  						}  						else if (x < 3)  						{  							leftovers = x;    							continue;  						}    						if (x >= 3)  						{  							leftovers = x % 3;    							x -= leftovers;  						}    						var y = Convert.ToBase64CharArray(buffer' 0' x' outbuffer' 0' Base64FormattingOptions.None);    						Connection.WriteTextPartialBlock(outbuffer' 0' y);    						if (leftovers != 0)  						{  							Array.Copy(buffer' x' buffer' 0' leftovers);  						}  					}  				}  				catch (Exception)  				{  					ActionUtils.IgnoreExceptions(() => this.Connection.WriteTextBlock(""));    					throw;  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,PrintBinaryCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\PrintBinaryCommandProcessor.cs,Process,The following statement contains a magic number: using (input = file.GetContent().GetInputStream(FileShare.ReadWrite))  			{  				if (inputBuffer == null)  				{  					inputBuffer = new byte[512];  				}    				byte[] buffer = inputBuffer;    				if (outputBuffer == null)  				{  					int length;    					length = (int)(buffer.Length * (4d / 3d));  					length += length % 4;    					outputBuffer = new char[length];  				}    				var outbuffer = outputBuffer;    				var leftovers = 0;    				try  				{  					for (; ; )  					{  						var x = input.Read(buffer' leftovers' buffer.Length - leftovers);    						if (x == 0)  						{  							if (leftovers == 0)  							{  								break;  							}    							x = leftovers;  							leftovers = 0;  						}  						else if (x < 3)  						{  							leftovers = x;    							continue;  						}    						if (x >= 3)  						{  							leftovers = x % 3;    							x -= leftovers;  						}    						var y = Convert.ToBase64CharArray(buffer' 0' x' outbuffer' 0' Base64FormattingOptions.None);    						Connection.WriteTextPartialBlock(outbuffer' 0' y);    						if (leftovers != 0)  						{  							Array.Copy(buffer' x' buffer' 0' leftovers);  						}  					}  				}  				catch (Exception)  				{  					ActionUtils.IgnoreExceptions(() => this.Connection.WriteTextBlock(""));    					throw;  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,PrintBinaryCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\PrintBinaryCommandProcessor.cs,Process,The following statement contains a magic number: using (input = file.GetContent().GetInputStream(FileShare.ReadWrite))  			{  				if (inputBuffer == null)  				{  					inputBuffer = new byte[512];  				}    				byte[] buffer = inputBuffer;    				if (outputBuffer == null)  				{  					int length;    					length = (int)(buffer.Length * (4d / 3d));  					length += length % 4;    					outputBuffer = new char[length];  				}    				var outbuffer = outputBuffer;    				var leftovers = 0;    				try  				{  					for (; ; )  					{  						var x = input.Read(buffer' leftovers' buffer.Length - leftovers);    						if (x == 0)  						{  							if (leftovers == 0)  							{  								break;  							}    							x = leftovers;  							leftovers = 0;  						}  						else if (x < 3)  						{  							leftovers = x;    							continue;  						}    						if (x >= 3)  						{  							leftovers = x % 3;    							x -= leftovers;  						}    						var y = Convert.ToBase64CharArray(buffer' 0' x' outbuffer' 0' Base64FormattingOptions.None);    						Connection.WriteTextPartialBlock(outbuffer' 0' y);    						if (leftovers != 0)  						{  							Array.Copy(buffer' x' buffer' 0' leftovers);  						}  					}  				}  				catch (Exception)  				{  					ActionUtils.IgnoreExceptions(() => this.Connection.WriteTextBlock(""));    					throw;  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,PrintBinaryCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\PrintBinaryCommandProcessor.cs,Process,The following statement contains a magic number: using (input = file.GetContent().GetInputStream(FileShare.ReadWrite))  			{  				if (inputBuffer == null)  				{  					inputBuffer = new byte[512];  				}    				byte[] buffer = inputBuffer;    				if (outputBuffer == null)  				{  					int length;    					length = (int)(buffer.Length * (4d / 3d));  					length += length % 4;    					outputBuffer = new char[length];  				}    				var outbuffer = outputBuffer;    				var leftovers = 0;    				try  				{  					for (; ; )  					{  						var x = input.Read(buffer' leftovers' buffer.Length - leftovers);    						if (x == 0)  						{  							if (leftovers == 0)  							{  								break;  							}    							x = leftovers;  							leftovers = 0;  						}  						else if (x < 3)  						{  							leftovers = x;    							continue;  						}    						if (x >= 3)  						{  							leftovers = x % 3;    							x -= leftovers;  						}    						var y = Convert.ToBase64CharArray(buffer' 0' x' outbuffer' 0' Base64FormattingOptions.None);    						Connection.WriteTextPartialBlock(outbuffer' 0' y);    						if (leftovers != 0)  						{  							Array.Copy(buffer' x' buffer' 0' leftovers);  						}  					}  				}  				catch (Exception)  				{  					ActionUtils.IgnoreExceptions(() => this.Connection.WriteTextBlock(""));    					throw;  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,PrintCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\PrintCommandProcessor.cs,Process,The following statement contains a magic number: if (intputBuffer == null)  			{  				intputBuffer = new char[256];  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,RandomAccessCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\RandomAccessCommandProcessor.cs,Process,The following statement contains a magic number: for (int i = 0; i < 16; i++)  			{  				try  				{  					stream =  						content.OpenStream((FileMode) Enum.Parse(typeof(FileMode)' options.Mode' true)'  						                   (FileAccess) Enum.Parse(typeof(FileAccess)' options.Access' true)'  						                   (FileShare) Enum.Parse(typeof(FileShare)' options.Share' true));    					break;  				}  				catch (Exception)  				{  					if (i == 9)  					{  						throw;  					}    					System.Threading.Thread.Sleep(150);  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,RandomAccessCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\RandomAccessCommandProcessor.cs,Process,The following statement contains a magic number: for (int i = 0; i < 16; i++)  			{  				try  				{  					stream =  						content.OpenStream((FileMode) Enum.Parse(typeof(FileMode)' options.Mode' true)'  						                   (FileAccess) Enum.Parse(typeof(FileAccess)' options.Access' true)'  						                   (FileShare) Enum.Parse(typeof(FileShare)' options.Share' true));    					break;  				}  				catch (Exception)  				{  					if (i == 9)  					{  						throw;  					}    					System.Threading.Thread.Sleep(150);  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,RandomAccessCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\RandomAccessCommandProcessor.cs,Process,The following statement contains a magic number: for (int i = 0; i < 16; i++)  			{  				try  				{  					stream =  						content.OpenStream((FileMode) Enum.Parse(typeof(FileMode)' options.Mode' true)'  						                   (FileAccess) Enum.Parse(typeof(FileAccess)' options.Access' true)'  						                   (FileShare) Enum.Parse(typeof(FileShare)' options.Share' true));    					break;  				}  				catch (Exception)  				{  					if (i == 9)  					{  						throw;  					}    					System.Threading.Thread.Sleep(150);  				}  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ReadCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ReadCommandProcessor.cs,Process,The following statement contains a magic number: if (inputBuffer == null)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}  			else if (inputBuffer.Length < options.Length  				&& inputBuffer.Length < 1024 * 1024)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ReadCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ReadCommandProcessor.cs,Process,The following statement contains a magic number: if (inputBuffer == null)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}  			else if (inputBuffer.Length < options.Length  				&& inputBuffer.Length < 1024 * 1024)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ReadCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ReadCommandProcessor.cs,Process,The following statement contains a magic number: if (inputBuffer == null)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}  			else if (inputBuffer.Length < options.Length  				&& inputBuffer.Length < 1024 * 1024)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ReadCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ReadCommandProcessor.cs,Process,The following statement contains a magic number: if (inputBuffer == null)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}  			else if (inputBuffer.Length < options.Length  				&& inputBuffer.Length < 1024 * 1024)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ReadCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ReadCommandProcessor.cs,Process,The following statement contains a magic number: if (inputBuffer == null)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}  			else if (inputBuffer.Length < options.Length  				&& inputBuffer.Length < 1024 * 1024)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,ReadCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\ReadCommandProcessor.cs,Process,The following statement contains a magic number: if (inputBuffer == null)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}  			else if (inputBuffer.Length < options.Length  				&& inputBuffer.Length < 1024 * 1024)  			{  				inputBuffer = new byte[Math.Max(1024 * 1024' options.Length)];  			}
Magic Number,Platform.VirtualFileSystem.Network.Text.Server,WriteCommandProcessor,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem.Network.Text.Server\WriteCommandProcessor.cs,Process,The following statement contains a magic number: if (inputBuffer == null)  			{  				inputBuffer = new byte[8192];  			}
