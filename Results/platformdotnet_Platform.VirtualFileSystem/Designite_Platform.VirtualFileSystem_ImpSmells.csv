Implementation smell,Namespace,Class,File,Method,Description
Long Method,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The method has 222 lines of code.
Long Method,Platform.VirtualFileSystem.Providers.Local,LocalDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalDirectory.cs,DoGetChildren,The method has 133 lines of code.
Long Method,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,CopyTo,The method has 125 lines of code.
Long Method,Platform.VirtualFileSystem.Providers.Local,LocalNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAddress.cs,Parse,The method has 127 lines of code.
Long Method,Platform.VirtualFileSystem.Providers.SystemInfo,SystemInfoNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\SystemInfo\SystemInfoNodeProvider.cs,SystemInfoNodeProvider,The method has 123 lines of code.
Complex Method,Platform.VirtualFileSystem.Providers,AbstractFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractFileSystem.cs,IsContainedInShortcut,Cyclomatic complexity of the method is 9
Complex Method,Platform.VirtualFileSystem.Providers,StandardDirectoryHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardDirectoryHashingService.cs,ComputeHash,Cyclomatic complexity of the method is 9
Complex Method,Platform.VirtualFileSystem.Providers.Local,LocalDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalDirectory.cs,PrivateGetChildNames,Cyclomatic complexity of the method is 9
Complex Method,Platform.VirtualFileSystem.Providers.Local,LocalDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalDirectory.cs,DoGetChildren,Cyclomatic complexity of the method is 21
Complex Method,Platform.VirtualFileSystem.Providers.Local,LocalNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAddress.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Platform.VirtualFileSystem.Providers.Local,LocalNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAttributes.cs,GetDriveInfo,Cyclomatic complexity of the method is 10
Long Parameter List,Platform.VirtualFileSystem,DefaultNodeOperationFilter,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\DefaultNodeOperationFilter.cs,CopyTo,The method has 5 parameters. Parameters: thisNode' target' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,DefaultNodeOperationFilter,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\DefaultNodeOperationFilter.cs,MoveTo,The method has 5 parameters. Parameters: thisNode' target' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,DefaultNodeOperationFilter,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\DefaultNodeOperationFilter.cs,RenameTo,The method has 5 parameters. Parameters: thisNode' name' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,FileSystemRenamedActivityEventArgs,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemRenamedActivityEventArgs.cs,FileSystemRenamedActivityEventArgs,The method has 6 parameters. Parameters: activity' nodeType' name' path' newName' newPath
Long Parameter List,Platform.VirtualFileSystem,INodeOperationFilter,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\INodeOperationFilter.cs,CopyTo,The method has 5 parameters. Parameters: thisNode' target' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,INodeOperationFilter,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\INodeOperationFilter.cs,MoveTo,The method has 5 parameters. Parameters: thisNode' target' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,INodeOperationFilter,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\INodeOperationFilter.cs,RenameTo,The method has 5 parameters. Parameters: thisNode' name' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,CompositeNodeOperationFilterImpl,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemExtenders.cs,CopyTo,The method has 5 parameters. Parameters: thisNode' target' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,CompositeNodeOperationFilterImpl,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemExtenders.cs,MoveTo,The method has 5 parameters. Parameters: thisNode' target' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,CompositeNodeOperationFilterImpl,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemExtenders.cs,RenameTo,The method has 5 parameters. Parameters: thisNode' name' overwrite' operationPerformed' defaultOperator
Long Parameter List,Platform.VirtualFileSystem,FileSystemOptions,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemOptions.cs,FileSystemOptions,The method has 7 parameters. Parameters: nodeCacheType' nodeServiceProviderTypes' nodeResolutionFilterTypes' nodeOperationFilterTypes' accessPermissionVerifierTypes' variables' isDefault
Long Parameter List,Platform.VirtualFileSystem.Providers,BasicNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\BasicNodeAddress.cs,BasicNodeAddress,The method has 5 parameters. Parameters: scheme' rootUri' path' normalized' query
Long Parameter List,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,LayeredNodeAddress,The method has 10 parameters. Parameters: scheme' userName' password' serverName' port' upperLayerUri' rootPart' path' query' exposeAsNonComplexAddress
Long Parameter List,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAddressDynamically,The method has 11 parameters. Parameters: type' scheme' userName' password' serverName' port' upperLayerUri' rootPart' path' query' exposeAsNonComplexAddress
Long Parameter List,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,ParseNetworkPart,The method has 6 parameters. Parameters: uri' startIndex' userName' password' serverName' port
Long Parameter List,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,Parse,The method has 9 parameters. Parameters: uri' scheme' userName' password' serverName' port' parentUri' path' query
Long Parameter List,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAddress,The method has 10 parameters. Parameters: scheme' userName' password' serverName' port' upperLayerUri' rootPart' path' query' exposeAsNonComplexAddress
Long Parameter List,Platform.VirtualFileSystem.Providers,StandardNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardNodeAddress.cs,StandardNodeAddress,The method has 8 parameters. Parameters: scheme' hostName' defaultPort' port' userName' password' path' query
Long Parameter List,Platform.VirtualFileSystem.Providers,StandardNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardNodeAddress.cs,StandardNodeAddress,The method has 10 parameters. Parameters: scheme' hostName' defaultPort' port' userName' password' rootPart' includeRootPartInUri' path' query
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,NativePosix,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativePosix.cs,SetExtendedAttribute,The method has 5 parameters. Parameters: path' attributeName' value' offset' count
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,LocalNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAddress.cs,LocalNodeAddress,The method has 5 parameters. Parameters: scheme' rootPart' includeRootPartInUri' path' query
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,OpenAlternateContentStream,The method has 5 parameters. Parameters: path' contentName' fileMode' fileAccess' fileShare
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,SetExtendedAttribute,The method has 5 parameters. Parameters: path' attributeName' value' offset' count
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,NativeWin32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,OpenAlternateContentStream,The method has 5 parameters. Parameters: path' contentName' fileMode' fileAccess' fileShare
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,Kernel32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,CreateFileW,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' lpSecurityAttributes' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,Kernel32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,BackupRead,The method has 7 parameters. Parameters: hFile' pBuffer' lBytes' lRead' bAbort' bSecurity' context
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,Kernel32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,BackupRead,The method has 7 parameters. Parameters: hFile' pBuffer' lBytes' lRead' bAbort' bSecurity' context
Long Parameter List,Platform.VirtualFileSystem.Providers.Local,Kernel32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,BackupSeek,The method has 6 parameters. Parameters: hFile' dwLowBytesToSeek' dwHighBytesToSeek' dwLow' dwHigh' context
Long Parameter List,Platform.VirtualFileSystem.Providers.Overlayed,OverlayedNodeSelector,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Overlayed\OverlayedFileSystem.cs,SelectNodeForOperation,The method has 5 parameters. Parameters: fileSystem' operation' address' nodeType' nodes
Long Parameter List,Platform.VirtualFileSystem.Providers.View,ViewNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\View\ViewNodeProvider.cs,ViewNodeProvider,The method has 5 parameters. Parameters: fileSystemManager' scheme' root' options' config
Long Parameter List,Platform.VirtualFileSystem.Providers.Web,WebFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Web\WebFileSystem.cs,DoGetInputStream,The method has 8 parameters. Parameters: node' contentName' encoding' mode' sharing' creationDate' exists' contentLength
Long Parameter List,Platform.VirtualFileSystem.Providers.Web,WebFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Web\WebFileSystem.cs,DoGetOutputStream,The method has 5 parameters. Parameters: node' contentName' encoding' mode' sharing
Long Identifier,Platform.VirtualFileSystem,NodeNameAndTypeComparer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\NodeNameAndTypeComparer.cs,,The length of the parameter defaultCaseInsensitiveComparer is 30.
Long Statement,Platform.VirtualFileSystem,FileSystemOptions,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemOptions.cs,CreateWithAdditionalConfig,The length of the statement  "			return new FileSystemOptions(this.NodeCacheType' this.NodeServiceProviderTypes' this.NodeResolutionFilterTypes' nodeOperationFileTypes' accessPermissionVerifierTypes' variables' false); " is 185.
Long Statement,Platform.VirtualFileSystem,FileSystemOptions,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemOptions.cs,AddVariables,The length of the statement  "			return new FileSystemOptions(this.NodeCacheType' this.NodeServiceProviderTypes' this.NodeResolutionFilterTypes' this.NodeOperationFilterTypes' this.AccessPermissionVerifierTypes' newVariables' false); " is 200.
Long Statement,Platform.VirtualFileSystem,FileSystemOptions,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemOptions.cs,AddVariables,The length of the statement  "					adderCalls.Add(Expression.Call(param2' setMethod' Expression.Constant(property.Name)' Expression.Property(Expression.Convert(param1' typeof(T))' property))); " is 157.
Long Statement,Platform.VirtualFileSystem,FileSystemOptions,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemOptions.cs,AddVariables,The length of the statement  "				adderFunc = Expression.Lambda<Action<object' NameValueCollection>>(Expression.Block(adderCalls)' param1' param2).Compile(); " is 123.
Long Statement,Platform.VirtualFileSystem,FileSystemOptions,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemOptions.cs,AddVariables,The length of the statement  "				variableAdderFuncs = new Dictionary<Type' Action<object' NameValueCollection>>(variableAdderFuncs) { [typeof(T)] = adderFunc }; " is 127.
Long Statement,Platform.VirtualFileSystem,FileSystemOptions,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemOptions.cs,AddVariables,The length of the statement  "			return new FileSystemOptions(this.NodeCacheType' this.NodeServiceProviderTypes' this.NodeResolutionFilterTypes' this.NodeOperationFilterTypes' this.AccessPermissionVerifierTypes' newVariables' false); " is 200.
Long Statement,Platform.VirtualFileSystem,FileSystemOptions,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemOptions.cs,ChangeNodeCacheType,The length of the statement  "			return new FileSystemOptions(nodeCacheType' this.NodeServiceProviderTypes' this.NodeResolutionFilterTypes' this.NodeOperationFilterTypes' this.AccessPermissionVerifierTypes' this.Variables' false); " is 197.
Long Statement,Platform.VirtualFileSystem,SimpleRegexNameFilter,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\NodeFilters.cs,Assert,The length of the statement  "					regex = RegexCache.Default.Create(regexString' RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace | RegexOptions.Multiline); " is 136.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractDirectory.cs,FileSystem_Activity,The length of the statement  "					OnDirectoryActivity(new NodeActivityEventArgs(eventArgs.Activity' node' ((FileSystemRenamedActivityEventArgs) eventArgs).NewName)); " is 131.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractDirectory.cs,FileSystem_Activity,The length of the statement  "					OnRecursiveActivity(new NodeActivityEventArgs(eventArgs.Activity' node' ((FileSystemRenamedActivityEventArgs)eventArgs).NewName)); " is 130.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractDirectory.cs,GetChildren,The length of the statement  "			if (!this.FileSystem.SecurityManager.CurrentContext.HasAccess(new AccessVerificationContext(this' FileSystemSecuredOperation.List))) " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractDirectory.cs,GetChildren,The length of the statement  "				if (this.FileSystem.SecurityManager.CurrentContext.HasAccess(new AccessVerificationContext(node' FileSystemSecuredOperation.View))) " is 131.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractHashingService.cs,ComputeHash,The length of the statement  "			var service = (IHashingService)this.OperatingNode.GetService((HashingServiceType)this.ServiceType.Clone(inputResult.AlgorithmName)); " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractNode,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNode.cs,AcceptsActivity,The length of the statement  "					&& ((this.FileSystem.PathsEqual(eventArgs.Path' this.Address.AbsolutePath' Math.Max(this.Address.AbsolutePath.Length' eventArgs.Path.Length))) || (eventArgs.Path == "*")); " is 171.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractNode,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNode.cs,FileSystem_Activity,The length of the statement  "			if (!this.FileSystem.SecurityManager.CurrentContext.HasAccess(new AccessVerificationContext(this' FileSystemSecuredOperation.View))) " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractNode,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNode.cs,Create,The length of the statement  "			return this.FileSystem.Extenders.CompositeNodeOperationFilter.Create(this' createParent' ref operationPerformed' DoCreate); " is 123.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractNode,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNode.cs,RenameTo,The length of the statement  "			return this.FileSystem.Extenders.CompositeNodeOperationFilter.RenameTo(this' name' overwrite' ref operationPerformed' DoRenameTo);			 " is 130.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractNode,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNode.cs,MoveTo,The length of the statement  "			return this.FileSystem.Extenders.CompositeNodeOperationFilter.MoveTo(this' target' overwrite' ref operationPerformed' DoMoveTo); " is 128.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractNode,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNode.cs,CopyTo,The length of the statement  "			return this.FileSystem.Extenders.CompositeNodeOperationFilter.CopyTo(this' target' overwrite' ref operationPerformed' DoCopyTo); " is 128.
Long Statement,Platform.VirtualFileSystem.Providers,AbstractNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNodeProvider.cs,AmmendOptionsFromAddress,The length of the statement  "			foreach (var key in address.QueryValues.Keys.Cast<string>().Where(key => this.SupportedUriSchemas.Any(c => key.StartsWith(c' StringComparison.InvariantCultureIgnoreCase)))) " is 172.
Long Statement,Platform.VirtualFileSystem.Providers,StandardDirectoryHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardDirectoryHashingService.cs,WriteAttribute,The length of the statement  "				typeof(BinaryWriter).InvokeMember("Write"' BindingFlags.Public | BindingFlags.InvokeMethod' null' writer' new object[] { value }); " is 130.
Long Statement,Platform.VirtualFileSystem.Providers,StandardDirectoryHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardDirectoryHashingService.cs,ComputeHash,The length of the statement  "			foreach (var node in this.OperatingNode.GetFiles().Sorted<IFile>((n1' n2) => StringComparer.Ordinal.Compare(n1.Name' n2.Name))) " is 127.
Long Statement,Platform.VirtualFileSystem.Providers,NodeConsultationWrapper,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\NodeConsultationWrapper.cs,Create,The length of the statement  "			this.FileSystem.Extenders.CompositeNodeOperationFilter.Create(this' false' ref operationPerformed' this.Wrappee.Create); " is 120.
Long Statement,Platform.VirtualFileSystem.Providers,NodeConsultationWrapper,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\NodeConsultationWrapper.cs,Create,The length of the statement  "			this.FileSystem.Extenders.CompositeNodeOperationFilter.Create(this' createParent' ref operationPerformed' this.Wrappee.Create); " is 127.
Long Statement,Platform.VirtualFileSystem.Providers,NodeConsultationWrapper,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\NodeConsultationWrapper.cs,MoveTo,The length of the statement  "			this.FileSystem.Extenders.CompositeNodeOperationFilter.MoveTo(this' target' overwrite' ref operationPerformed' this.Wrappee.MoveTo); " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,NodeConsultationWrapper,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\NodeConsultationWrapper.cs,CopyTo,The length of the statement  "			this.FileSystem.Extenders.CompositeNodeOperationFilter.CopyTo(this' target' overwrite' ref operationPerformed' this.Wrappee.CopyTo); " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,NodeConsultationWrapper,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\NodeConsultationWrapper.cs,RenameTo,The length of the statement  "			this.FileSystem.Extenders.CompositeNodeOperationFilter.RenameTo(this' name' overwrite' ref operationPerformed' this.Wrappee.RenameTo); " is 134.
Long Statement,Platform.VirtualFileSystem.Providers,NodeConsultationWrapper,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\NodeConsultationWrapper.cs,MoveToDirectory,The length of the statement  "			this.FileSystem.Extenders.CompositeNodeOperationFilter.MoveTo(this' target' overwrite' ref operationPerformed' this.Wrappee.MoveTo); " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,NodeConsultationWrapper,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\NodeConsultationWrapper.cs,CopyToDirectory,The length of the statement  "			this.FileSystem.Extenders.CompositeNodeOperationFilter.CopyTo(this' target' overwrite' ref operationPerformed' this.Wrappee.CopyTo); " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,StandardFileHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileHashingService.cs,ComputeHash,The length of the statement  "				retval = new HashValue(this.Algorithm.ComputeHash(meteringStream)' this.ServiceType.AlgorithmName' offset' Convert.ToInt64(meteringStream.ReadMeter.Value)); " is 156.
Long Statement,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The length of the statement  "					var sourceHashingService = (IHashingService)this.OperatingNode.GetService(new StreamHashingServiceType(sourceStream' this.HashAlgorithmName)); " is 142.
Long Statement,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The length of the statement  "					var destinationHashingService = (IHashingService)this.TargetNode.GetService(new FileHashingServiceType(this.HashAlgorithmName)); " is 128.
Long Statement,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The length of the statement  "					destinationTemp = ((ITempIdentityFileService)this.destination.GetService(new TempIdentityFileServiceType(sourceHash))).GetTempFile(); " is 133.
Long Statement,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The length of the statement  "					using (destinationTempStream = destinationTemp.GetContent().OpenStream(FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None)) " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The length of the statement  "						var destinationTempHashingService = (IHashingService) destinationTemp.GetService(new StreamHashingServiceType(destinationTempStream)); " is 134.
Long Statement,Platform.VirtualFileSystem.Providers,TransferProgress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,ToString,The length of the statement  "						return String.Format("Finished {0}/{1} bytes ({2:0}%)"' CurrentValue' MaximumValue' Convert.ToDouble(CurrentValue) / Convert.ToDouble(MaximumValue) * 100.0); " is 157.
Long Statement,Platform.VirtualFileSystem.Providers,TransferProgress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,ToString,The length of the statement  "						return String.Format("Transferring {0}/{1} bytes ({2:0.##}%)"' CurrentValue' MaximumValue' Convert.ToDouble(CurrentValue) / Convert.ToDouble(MaximumValue) * 100.0); " is 164.
Long Statement,Platform.VirtualFileSystem.Providers,StandardStreamHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardStreamHashingService.cs,ComputeHash,The length of the statement  "				return new HashValue(this.hashAlgorithm.ComputeHash(stream)' this.ServiceType.AlgorithmName' 0' Convert.ToInt32(stream.ReadMeter.Value)); " is 137.
Long Statement,Platform.VirtualFileSystem.Providers,StandardStreamHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardStreamHashingService.cs,ComputeHash,The length of the statement  "				return new HashValue(this.hashAlgorithm.ComputeHash(stream)' this.ServiceType.AlgorithmName' offset' Convert.ToInt64(stream.ReadMeter.Value)); " is 142.
Long Statement,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,Parse,The length of the statement  "			return (T)CreateAddressDynamically(typeof(T)' scheme' userName' password' serverName' port' parentUri' ""' path' query' false); " is 127.
Long Statement,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAddressDynamically,The length of the statement  "				return new LayeredNodeAddress(scheme' userName' password' serverName' port' upperLayerUri' ""' path' query' exposeAsNonComplexAddress); " is 135.
Long Statement,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAddressDynamically,The length of the statement  "				var args = new object[] { scheme' userName' password' serverName' port' upperLayerUri' ""' path' query' exposeAsNonComplexAddress }; " is 132.
Long Statement,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAddressDynamically,The length of the statement  "				return (INodeAddress)Activator.CreateInstance(type' BindingFlags.Instance | BindingFlags.CreateInstance | BindingFlags.Public | BindingFlags.NonPublic' null' args' null); " is 170.
Long Statement,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAddress,The length of the statement  "			return CreateAddressDynamically(GetType()' scheme' userName' password' serverName' port' upperLayerUri' rootPart' path' query' exposeAsNonComplexAddress); " is 154.
Long Statement,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAddress,The length of the statement  "			return CreateAddress(this.Scheme' UserName' Password' ServerName' Port' this.InnerUri' this.RootPart' absolutePath' query' this.exposeAsNonComplexAddress); " is 155.
Long Statement,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAsRoot,The length of the statement  "				return CreateAddress(scheme' UserName' Password' ServerName' Port' this.InnerUri' this.RootPart' "/"' ""' this.exposeAsNonComplexAddress); " is 138.
Long Statement,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,CreateAsRoot,The length of the statement  "				return CreateAddress(scheme' UserName' Password' ServerName' Port' this.InnerUri' this.RootPart + this.AbsolutePath' "/"' ""' this.exposeAsNonComplexAddress); " is 158.
Long Statement,Platform.VirtualFileSystem.Providers,StandardNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardNodeAddress.cs,Parse,The length of the statement  "				TextConversion.FromEscapedHexString(sysUri.AbsolutePath)' TextConversion.FromEscapedHexString(StringUtils.Right(sysUri.Query' sysUri.Query.Length - 1))); " is 153.
Long Statement,Platform.VirtualFileSystem.Providers.Local,LocalDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalDirectory.cs,DoGetChildren,The length of the statement  "						if (localRefreshNodes && !String.Equals((string)dir.Attributes["DriveType"]' "Removable"' StringComparison.CurrentCultureIgnoreCase)) " is 133.
Long Statement,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,GetContentNames,The length of the statement  "			return Native.GetInstance().GetContentInfos(((LocalNodeAddress)this.Address).AbsoluteNativePath).Select(contentInfo => contentInfo.Name); " is 137.
Long Statement,Platform.VirtualFileSystem.Providers.Local,LocalFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFileSystem.cs,OnActivityEvent,The length of the statement  "					if (this.SecurityManager.CurrentContext.HasAccess(new AccessVerificationContext(node' FileSystemSecuredOperation.View))) " is 120.
Long Statement,Platform.VirtualFileSystem.Providers.Local,LocalNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAddress.cs,CreateAddress,The length of the statement  "				return (LocalNodeAddress)Activator.CreateInstance(GetType()' this.Scheme' this.RootPart' this.includeRootPartInUri' path' query); " is 129.
Long Statement,Platform.VirtualFileSystem.Providers.Local,LocalNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAttributes.cs,SetExtendedAttribute,The length of the statement  "			Native.GetInstance().SetExtendedAttribute(fileSystemInfo.FullName' name' buffer' 0' buffer == null ? 0 : buffer.Length); " is 120.
Long Statement,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,SetExtendedAttribute,The length of the statement  "						using (var stream = this.OpenAlternateContentStream(path' GetExtendedAttributeAlternateStreamName(attributeName)' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None)) " is 175.
Long Statement,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,GetExtendedAttribute,The length of the statement  "					using (var stream = this.OpenAlternateContentStream(path' GetExtendedAttributeAlternateStreamName(attributeName)' FileMode.Open' FileAccess.ReadWrite' FileShare.None)) " is 167.
Long Statement,Platform.VirtualFileSystem.Providers.Local,NativeWin32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,CreateHardLink,The length of the statement  "					throw new IOException(String.Format(GetType().Name + "_CreateHardLink_Error_{0}_Path={1}_Target={2}"' error' path' target)); " is 124.
Long Statement,Platform.VirtualFileSystem.Providers.Local,NativeWin32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,DeleteFileContent,The length of the statement  "					throw new IOException(String.Format("Win32.DeleteFileContent Error={0} Path={1} ContentName={2}"' Kernel32.GetLastError()' path' contentName)); " is 143.
Long Statement,Platform.VirtualFileSystem.Providers.Local,NativeWin32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,GetContentInfos,The length of the statement  "			var hFile = Kernel32.CreateFileW(path' (int)FileAccess.Read' (int)FileShare.ReadWrite' IntPtr.Zero' (int)FileMode.Open' (int)Kernel32.FileFlags.BackupSemantics' IntPtr.Zero); " is 174.
Long Statement,Platform.VirtualFileSystem.Providers.Overlayed,OverlayedFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Overlayed\OverlayedFile.cs,Create,The length of the statement  "			if (((OverlayedFileSystem)this.FileSystem).OverlayedNodeSelector.SelectNodeForOperation((OverlayedFileSystem)this.FileSystem' FileSystemActivity.Created' this.Address' this.NodeType' out nodes)) " is 194.
Long Statement,Platform.VirtualFileSystem.Providers.Overlayed,OverlayedFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Overlayed\OverlayedFile.cs,Delete,The length of the statement  "			if (((OverlayedFileSystem)this.FileSystem).OverlayedNodeSelector.SelectNodeForOperation((OverlayedFileSystem)this.FileSystem' FileSystemActivity.Deleted' this.Address' this.NodeType' out nodes)) " is 194.
Long Statement,Platform.VirtualFileSystem.Providers.Overlayed,OverlayedFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Overlayed\OverlayedFileSystem.cs,FileSystemsActivity,The length of the statement  "					if (this.SecurityManager.CurrentContext.HasAccess(new AccessVerificationContext(node' FileSystemSecuredOperation.View))) " is 120.
Long Statement,Platform.VirtualFileSystem.Providers.Overlayed,StandardOverlayedNodeSelector,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Overlayed\OverlayedFileSystem.cs,SelectReadNode,The length of the statement  "					foreach (var node in overlayedFileSystem.FileSystems.Select(fs => fs.Resolve(address.AbsolutePath' nodeType)).Where(node => node.Exists)) " is 137.
Long Statement,Platform.VirtualFileSystem.Providers.MyComputer,MyComputerNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\MyComputer\MyComputerNodeProvider.cs,PopulateRoot,The length of the statement  "				if ((((string)driveNode.Value.Attributes["DriveType"]) ?? "").Equals("cdrom"' StringComparison.CurrentCultureIgnoreCase)) " is 121.
Long Statement,Platform.VirtualFileSystem.Providers.MyComputer,MyComputerNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\MyComputer\MyComputerNodeProvider.cs,PopulateRoot,The length of the statement  "				else if ((((string)driveNode.Value.Attributes["DriveType"]) ?? "").Equals("floppy"' StringComparison.CurrentCultureIgnoreCase)) " is 127.
Long Statement,Platform.VirtualFileSystem.Providers.MyComputer,MyComputerNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\MyComputer\MyComputerNodeProvider.cs,PopulateRoot,The length of the statement  "				else if ((((string)driveNode.Value.Attributes["DriveType"]) ?? "").Equals("removable"' StringComparison.CurrentCultureIgnoreCase)) " is 130.
Long Statement,Platform.VirtualFileSystem.Providers.Shadow,ShadowNodeContent,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeContent.cs,DoGetOutputStream,The length of the statement  "			return new ShadowOutputStream(file.GetContent().GetOutputStream(encoding' sharing)' this.shadowFile.ShadowedFile' file); " is 120.
Long Statement,Platform.VirtualFileSystem.Providers.Web,WebDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Web\WebDirectory.cs,DoGetInputStream,The length of the statement  "			return WebFileSystem.DoGetInputStream(this' contentName' out encoding' mode' sharing' out creationDate' out exists' out length); " is 128.
Long Statement,Platform.VirtualFileSystem.Providers.Web,WebFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Web\WebFile.cs,DoGetInputStream,The length of the statement  "{	return WebFileSystem.DoGetInputStream(this' contentName' out encoding' mode' sharing' out creationDate' out exists' out contentLength); " is 137.
Complex Conditional,Platform.VirtualFileSystem.Providers,DictionaryBasedNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\DictionaryBasedNodeAttributes.cs,DefaultSupportsAttribute,The conditional expression  "attributeName == "CreationTime"  				|| attributeName == "LastAccessTime"  				|| attributeName == "LastWriteTime"  				|| attributeName == "ReadOnly"  				|| attributeName == "Hidden"  			    || attributeName == "Exists""  is complex.
Complex Conditional,Platform.VirtualFileSystem.Providers,AbstractNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNodeAddress.cs,CheckPathScope,The conditional expression  "comparePath.Length == baseLength  						/* ComparePath has same parent as base path but different short name */  						|| (baseLength > 1 && comparePath[baseLength] != FileSystemManager.SeperatorChar)  						/* ComparePath is a (grand)*child of basePath */  						|| comparePath.IndexOf(FileSystemManager.SeperatorChar' baseLength + 1) >= 0"  is complex.
Complex Conditional,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,RequestTaskState,The conditional expression  "this.copier != null && this.copier.TaskState != TaskState.NotStarted  				&& this.copier.TaskState != TaskState.Finished && this.copier.TaskState != TaskState.Stopped"  is complex.
Complex Conditional,Platform.VirtualFileSystem.Providers.Local,LocalNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAddress.cs,CanParse,The conditional expression  "!((uri.Length >= 2 && Char.IsLetter(uri[0]) && uri[1] == ':')  				|| (uri == null || (uri != null   				&& uri.StartsWith(scheme' StringComparison.CurrentCultureIgnoreCase)))  				|| uri.StartsWith("/")   				|| uri.StartsWith(@"\")  				|| uri == "."  				|| uri == ".."  				|| uri.StartsWith("./")  				|| uri.StartsWith("../")  				|| uri.StartsWith(".\\")  				|| uri.StartsWith("..\\"))"  is complex.
Complex Conditional,Platform.VirtualFileSystem.Providers.Local,LocalNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAttributes.cs,GetDriveInfo,The conditional expression  "Environment.OSVersion.Platform == PlatformID.Win32NT  				|| Environment.OSVersion.Platform == PlatformID.Win32S  				|| Environment.OSVersion.Platform == PlatformID.Win32Windows  				|| Environment.OSVersion.Platform == PlatformID.WinCE"  is complex.
Complex Conditional,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,Native,The conditional expression  "Environment.OSVersion.Platform == PlatformID.Win32NT  				|| Environment.OSVersion.Platform == PlatformID.Win32S  				|| Environment.OSVersion.Platform == PlatformID.Win32Windows  				|| Environment.OSVersion.Platform == PlatformID.WinCE"  is complex.
Complex Conditional,Platform.VirtualFileSystem.Providers.Shadow,ShadowNodeContent,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeContent.cs,DoGetInputStream,The conditional expression  "!error  					&& length == this.shadowFile.Length  					&& creationTime == this.shadowFile.Attributes.CreationTime  					&& lastWriteTime == this.shadowFile.Attributes.LastWriteTime  					&& (mode == FileMode.Open || mode == FileMode.OpenOrCreate)"  is complex.
Complex Conditional,Platform.VirtualFileSystem.Providers.Shadow,ShadowNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeProvider.cs,Find,The conditional expression  "address.Port >= 0 || address.UserName != "" || address.Password != "" || address.ServerName != """  is complex.
Virtual Method Call from Constructor,Platform.VirtualFileSystem,AttributeChangeDeterminer,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\AttributeChangeDeterminer.cs,AttributeChangeDeterminer,The constructor "AttributeChangeDeterminer" calls a virtual method "MakeUnchanged".
Virtual Method Call from Constructor,Platform.VirtualFileSystem,DefaultFileSystemManager,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\DefaultFileSystemManager.cs,DefaultFileSystemManager,The constructor "DefaultFileSystemManager" calls a virtual method "AddProvider".
Virtual Method Call from Constructor,Platform.VirtualFileSystem,DefaultFileSystemManager,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\DefaultFileSystemManager.cs,DefaultFileSystemManager,The constructor "DefaultFileSystemManager" calls a virtual method "CreateProvider".
Virtual Method Call from Constructor,Platform.VirtualFileSystem,FileSystemExtenders,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemExtenders.cs,FileSystemExtenders,The constructor "FileSystemExtenders" calls a virtual method "CreateExtenders".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers,AbstractFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractFileSystem.cs,AbstractFileSystem,The constructor "AbstractFileSystem" calls a virtual method "InitializeConstruction".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers,AbstractFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractFileSystem.cs,AbstractFileSystem,The constructor "AbstractFileSystem" calls a virtual method "CreateExtenders".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers,AbstractFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractFileSystem.cs,AbstractFileSystem,The constructor "AbstractFileSystem" calls a virtual method "CreateSecurityManager".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers.Imaginary,ImaginaryFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Imaginary\ImaginaryFileSystem.cs,ImaginaryFileSystem,The constructor "ImaginaryFileSystem" calls a virtual method "ResolveDirectory".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers.SystemInfo,SystemInfoNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\SystemInfo\SystemInfoNodeProvider.cs,SystemInfoNodeProvider,The constructor "SystemInfoNodeProvider" calls a virtual method "ResolveDirectory".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers.SystemInfo,SystemInfoNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\SystemInfo\SystemInfoNodeProvider.cs,SystemInfoNodeProvider,The constructor "SystemInfoNodeProvider" calls a virtual method "Add".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers.SystemInfo,SystemInfoNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\SystemInfo\SystemInfoNodeProvider.cs,SystemInfoNodeProvider,The constructor "SystemInfoNodeProvider" calls a virtual method "Add".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers.SystemInfo,SystemInfoNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\SystemInfo\SystemInfoNodeProvider.cs,SystemInfoNodeProvider,The constructor "SystemInfoNodeProvider" calls a virtual method "Add".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers.SystemInfo,SystemInfoNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\SystemInfo\SystemInfoNodeProvider.cs,SystemInfoNodeProvider,The constructor "SystemInfoNodeProvider" calls a virtual method "Add".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers.SystemInfo,SystemInfoNodeProvider,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\SystemInfo\SystemInfoNodeProvider.cs,SystemInfoNodeProvider,The constructor "SystemInfoNodeProvider" calls a virtual method "Add".
Virtual Method Call from Constructor,Platform.VirtualFileSystem.Providers.Shadow,ShadowNodeContent,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeContent.cs,ShadowNodeContent,The constructor "ShadowNodeContent" calls a virtual method "GenerateName".
Empty Catch Block,Platform.VirtualFileSystem,FileSystemExtenders,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemExtenders.cs,ConstructExtender,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem,FileSystemExtenders,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemExtenders.cs,CreateExtenders,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem,FileSystemSecurityContext,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemSecurityContext.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem,StandardFileSystemManager,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\StandardFileSystemManager.cs,CreateProvider,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers,StandardFileHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileHashingService.cs,ComputeHash,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,NativePosix,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativePosix.cs,GetSymbolicLinkTarget,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoCreate,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,CopyTo,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,CopyTo,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,CopyTo,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,LocalFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFileSystem.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,LocalNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAttributes.cs,GetDriveInfo,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,LocalNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAttributes.cs,GetDriveInfo,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,SetExtendedAttribute,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Local,NativeWin32,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,GetShortPath,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Shadow,ShadowFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowFile.cs,GetService,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Shadow,ShadowNodeContent,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeContent.cs,DoGetInputStream,The method has an empty catch block.
Empty Catch Block,Platform.VirtualFileSystem.Providers.Shadow,ShadowInputStream,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeContent.cs,TimerElapsed,The method has an empty catch block.
Magic Number,Platform.VirtualFileSystem,FileTransferServiceType,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileTransferServiceType.cs,FileTransferServiceType,The following statement contains a magic number: this.BufferSize = 4096;
Magic Number,Platform.VirtualFileSystem,StandardTempIdentityFileService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\StandardTempIdentityFileService.cs,StandardTempIdentityFileService,The following statement contains a magic number: var buffer = new StringBuilder(file.Address.Uri.Length * 2);
Magic Number,Platform.VirtualFileSystem.Providers,AbstractNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNodeAttributes.cs,ProcessGetValue,The following statement contains a magic number: switch (split.Right.ToLower())  			{  				case "base64":  					if (value is byte[])  					{  						return Convert.ToBase64String((byte[])value);  					}  					else  					{  						return Convert.ToBase64String(Encoding.UTF8.GetBytes(value.ToString()));  					}  				case "string":  				case "utf8encoding":  					if (value is byte[])  					{  						return Encoding.UTF8.GetString((byte[])value);  					}  					else  					{  						return Convert.ToString(value);  					}  				case "utf16":  					if (value is byte[])  					{  						return Encoding.Unicode.GetString((byte[])value);  					}  					else  					{  						return Convert.ToString(value);  					}  				case "int16":  					return Convert.ToInt16(value);  				case "int32":  					return Convert.ToInt32(value);  				case "int64":  					return Convert.ToInt64(value);  				case "datetime":  					return Convert.ToDateTime(value);  				case "secondsresolution":  					DateTime dateTimeValue;    					dateTimeValue = Convert.ToDateTime(value);    					if (split.Right == "secondsresolution")  					{  						return new DateTime(dateTimeValue.Ticks / 10000000 * 10000000);  					}  					else  					{  						return DateTime.Parse(dateTimeValue.ToString(split.Right));  					}  				default:  					return value;  			}
Magic Number,Platform.VirtualFileSystem.Providers,AbstractNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNodeAttributes.cs,ProcessGetValue,The following statement contains a magic number: switch (split.Right.ToLower())  			{  				case "base64":  					if (value is byte[])  					{  						return Convert.ToBase64String((byte[])value);  					}  					else  					{  						return Convert.ToBase64String(Encoding.UTF8.GetBytes(value.ToString()));  					}  				case "string":  				case "utf8encoding":  					if (value is byte[])  					{  						return Encoding.UTF8.GetString((byte[])value);  					}  					else  					{  						return Convert.ToString(value);  					}  				case "utf16":  					if (value is byte[])  					{  						return Encoding.Unicode.GetString((byte[])value);  					}  					else  					{  						return Convert.ToString(value);  					}  				case "int16":  					return Convert.ToInt16(value);  				case "int32":  					return Convert.ToInt32(value);  				case "int64":  					return Convert.ToInt64(value);  				case "datetime":  					return Convert.ToDateTime(value);  				case "secondsresolution":  					DateTime dateTimeValue;    					dateTimeValue = Convert.ToDateTime(value);    					if (split.Right == "secondsresolution")  					{  						return new DateTime(dateTimeValue.Ticks / 10000000 * 10000000);  					}  					else  					{  						return DateTime.Parse(dateTimeValue.ToString(split.Right));  					}  				default:  					return value;  			}
Magic Number,Platform.VirtualFileSystem.Providers,AbstractNode,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNode.cs,Unescape,The following statement contains a magic number: var builder = new StringBuilder(path.Length + 10);
Magic Number,Platform.VirtualFileSystem.Providers,StandardDirectoryHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardDirectoryHashingService.cs,ComputeHash,The following statement contains a magic number: var resultBuffer = new byte[(hashAlgorithm.HashSize / 8 * 2) + 16];
Magic Number,Platform.VirtualFileSystem.Providers,StandardDirectoryHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardDirectoryHashingService.cs,ComputeHash,The following statement contains a magic number: var resultBuffer = new byte[(hashAlgorithm.HashSize / 8 * 2) + 16];
Magic Number,Platform.VirtualFileSystem.Providers,StandardDirectoryHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardDirectoryHashingService.cs,ComputeHash,The following statement contains a magic number: var resultBuffer = new byte[(hashAlgorithm.HashSize / 8 * 2) + 16];
Magic Number,Platform.VirtualFileSystem.Providers,StandardFileHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileHashingService.cs,ComputeHash,The following statement contains a magic number: if (!(offset == 0 && length == -1 && !stream.CanSeek))  			{  				stream = new PartialStream(stream' offset' length);    				if (length <= 0)  				{  					stream = new BufferedStream(stream' 128 * 1024);  				}  				else  				{  					stream = new BufferedStream(stream' Math.Min(128 * 1024' (int)length));  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers,StandardFileHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileHashingService.cs,ComputeHash,The following statement contains a magic number: if (!(offset == 0 && length == -1 && !stream.CanSeek))  			{  				stream = new PartialStream(stream' offset' length);    				if (length <= 0)  				{  					stream = new BufferedStream(stream' 128 * 1024);  				}  				else  				{  					stream = new BufferedStream(stream' Math.Min(128 * 1024' (int)length));  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers,StandardFileHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileHashingService.cs,ComputeHash,The following statement contains a magic number: if (!(offset == 0 && length == -1 && !stream.CanSeek))  			{  				stream = new PartialStream(stream' offset' length);    				if (length <= 0)  				{  					stream = new BufferedStream(stream' 128 * 1024);  				}  				else  				{  					stream = new BufferedStream(stream' Math.Min(128 * 1024' (int)length));  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers,StandardFileHashingService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileHashingService.cs,ComputeHash,The following statement contains a magic number: if (!(offset == 0 && length == -1 && !stream.CanSeek))  			{  				stream = new PartialStream(stream' offset' length);    				if (length <= 0)  				{  					stream = new BufferedStream(stream' 128 * 1024);  				}  				else  				{  					stream = new BufferedStream(stream' Math.Min(128 * 1024' (int)length));  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The following statement contains a magic number: try  			{  				lock (this)  				{  					SetTransferState(TransferState.Preparing);  				}    				Action<IFile> transferAttributes = delegate(IFile dest)  				{  					using (dest.Attributes.AquireUpdateContext())  					{  						foreach (string s in this.serviceType.AttributesToTransfer)  						{  							dest.Attributes[s] = this.source.Attributes[s];  						}  					}  				};    				Stream sourceStream = null;    				for (var i = 0; i < 4; i++)  				{  					try  					{  						sourceStream = this.OperatingNode.GetContent().GetInputStream(FileMode.Open' FileShare.Read);    						break;  					}  					catch (NodeNotFoundException)  					{  						throw;  					}  					catch (Exception)  					{  						if (i == 3)  						{  							throw;  						}  					}    					ProcessTaskStateRequest();  				}    				using (sourceStream)  				{  					var sourceHashingService = (IHashingService)this.OperatingNode.GetService(new StreamHashingServiceType(sourceStream' this.HashAlgorithmName));    					// Compute the hash of the source file    					SetTransferState(TransferState.Comparing);  					ProcessTaskStateRequest();    					sourceHash = sourceHashingService.ComputeHash().TextValue;    					// Try to open the destination file    					ProcessTaskStateRequest();    					var destinationHashingService = (IHashingService)this.TargetNode.GetService(new FileHashingServiceType(this.HashAlgorithmName));    					string destinationHash;    					try  					{  						destinationHash = destinationHashingService.ComputeHash().TextValue;  					}  					catch (DirectoryNodeNotFoundException)  					{  						this.TargetNode.ParentDirectory.Create(true);    						try  						{  							destinationHash = destinationHashingService.ComputeHash().TextValue;  						}  						catch (NodeNotFoundException)  						{  							destinationHash = null;  						}  					}  					catch (NodeNotFoundException)  					{  						destinationHash = null;  					}    					ProcessTaskStateRequest();    					// Source and destination are identical    					if (sourceHash == destinationHash)  					{  						SetTransferState(TransferState.Transferring);    						this.progress.RaiseValueChanged(0' GetBytesToTransfer());    						SetTransferState(TransferState.Tidying);    						// Transfer attributes    						try  						{  							transferAttributes((IFile) this.TargetNode);  						}  						catch (FileNotFoundException)  						{  						}    						// Done    						SetTransferState(TransferState.Finished);  						ProcessTaskStateRequest();    						return;  					}    					// Get a temp file for the destination based on the source's hash    					destinationTemp = ((ITempIdentityFileService)this.destination.GetService(new TempIdentityFileServiceType(sourceHash))).GetTempFile();    					// Get the stream for the destination temp file    					try  					{  						if (!destinationTemp.ParentDirectory.Exists)  						{  							destinationTemp.ParentDirectory.Create(true);  						}  					}  					catch (IOException)  					{  					}    					using (destinationTempStream = destinationTemp.GetContent().OpenStream(FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))  					{  						Action finishUp = delegate  						{  							SetTransferState(TransferState.Tidying);    							destinationTempStream.Close();    							for (int i = 0; i < 4; i++)  							{  								try  								{  									// Save hash value  									StandardFileHashingService.SaveHashToCache((IFile) destinationTemp' this.HashAlgorithmName'  						                   										sourceHash' (IFile) this.TargetNode);    									try  									{  										// Transfer attributes  										transferAttributes(destinationTemp);  									}  									catch (FileNotFoundException e)  									{  										Console.WriteLine(e);  									}    									// Move destination temp to destination  									destinationTemp.MoveTo(this.TargetNode' true);    									break;  								}  								catch (Exception)  								{  									if (i == 3)  									{  										throw;  									}  								}    								ProcessTaskStateRequest();  							}    							// Done    							SetTransferState(TransferState.Finished);  							ProcessTaskStateRequest();  						};    						// Get the hash for the destination temp file    						var destinationTempHashingService = (IHashingService) destinationTemp.GetService(new StreamHashingServiceType(destinationTempStream));    						// If the destination temp and the source aren't the same  						// then complete the destination temp    						string destinationTempHash;    						if (destinationTempStream.Length >= sourceStream.Length)  						{  							// Destination is longer than source but starts source (unlikely)    							destinationTempHash = destinationTempHashingService.ComputeHash(0' sourceStream.Length).TextValue;    							if (destinationTempHash == sourceHash)  							{  								if (destinationTempStream.Length != sourceStream.Length)  								{  									destinationTempStream.SetLength(sourceStream.Length);  								}    								finishUp();    								return;  							}    							destinationTempStream.SetLength(0);  						}    						if (destinationTempStream.Length > 0)  						{  							destinationTempHash = destinationTempHashingService.ComputeHash().TextValue;    							// Destination shorter than the source but is a partial copy of source    							sourceHash = sourceHashingService.ComputeHash(0' destinationTempStream.Length).TextValue;    							if (sourceHash == destinationTempHash)  							{  								this.offset = destinationTempStream.Length;  							}  							else  							{  								this.offset = 0;  								destinationTempStream.SetLength(0);  							}  						}  						else  						{  							this.offset = 0;  						}    						this.progress.RaiseValueChanged(0' this.offset);    						// Transfer over the remaining part needed (or everything if offset is 0)    						this.offset = destinationTempStream.Length;    						Stream sourcePartialStream = new PartialStream(sourceStream' destinationTempStream.Length);  						Stream destinationTempPartialStream = new PartialStream(destinationTempStream' destinationTempStream.Length);    						this.copier =  							new StreamCopier(new BufferedStream(sourcePartialStream' this.serviceType.BufferSize)' destinationTempPartialStream'  							               false' false' this.serviceType.ChunkSize);    						this.copier.TaskStateChanged += delegate(object sender' TaskEventArgs eventArgs)  						                           {  						                           	if (eventArgs.TaskState == TaskState.Running  						                           	    || eventArgs.TaskState == TaskState.Paused  						                           	    || eventArgs.TaskState == TaskState.Stopped)  						                           	{  						                           		SetTaskState(eventArgs.TaskState);  						                           	}  						                           };    						SetTransferState(TransferState.Transferring);  						ProcessTaskStateRequest();    						this.copier.Run();    						if (this.copier.TaskState == TaskState.Stopped)  						{  							throw new StopRequestedException();  						}    						finishUp();  					}  				}  			}  			catch (StopRequestedException)  			{  			}  			finally  			{  				if (this.TransferState != TransferState.Finished)  				{  					SetTransferState(TransferState.Stopped);  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The following statement contains a magic number: try  			{  				lock (this)  				{  					SetTransferState(TransferState.Preparing);  				}    				Action<IFile> transferAttributes = delegate(IFile dest)  				{  					using (dest.Attributes.AquireUpdateContext())  					{  						foreach (string s in this.serviceType.AttributesToTransfer)  						{  							dest.Attributes[s] = this.source.Attributes[s];  						}  					}  				};    				Stream sourceStream = null;    				for (var i = 0; i < 4; i++)  				{  					try  					{  						sourceStream = this.OperatingNode.GetContent().GetInputStream(FileMode.Open' FileShare.Read);    						break;  					}  					catch (NodeNotFoundException)  					{  						throw;  					}  					catch (Exception)  					{  						if (i == 3)  						{  							throw;  						}  					}    					ProcessTaskStateRequest();  				}    				using (sourceStream)  				{  					var sourceHashingService = (IHashingService)this.OperatingNode.GetService(new StreamHashingServiceType(sourceStream' this.HashAlgorithmName));    					// Compute the hash of the source file    					SetTransferState(TransferState.Comparing);  					ProcessTaskStateRequest();    					sourceHash = sourceHashingService.ComputeHash().TextValue;    					// Try to open the destination file    					ProcessTaskStateRequest();    					var destinationHashingService = (IHashingService)this.TargetNode.GetService(new FileHashingServiceType(this.HashAlgorithmName));    					string destinationHash;    					try  					{  						destinationHash = destinationHashingService.ComputeHash().TextValue;  					}  					catch (DirectoryNodeNotFoundException)  					{  						this.TargetNode.ParentDirectory.Create(true);    						try  						{  							destinationHash = destinationHashingService.ComputeHash().TextValue;  						}  						catch (NodeNotFoundException)  						{  							destinationHash = null;  						}  					}  					catch (NodeNotFoundException)  					{  						destinationHash = null;  					}    					ProcessTaskStateRequest();    					// Source and destination are identical    					if (sourceHash == destinationHash)  					{  						SetTransferState(TransferState.Transferring);    						this.progress.RaiseValueChanged(0' GetBytesToTransfer());    						SetTransferState(TransferState.Tidying);    						// Transfer attributes    						try  						{  							transferAttributes((IFile) this.TargetNode);  						}  						catch (FileNotFoundException)  						{  						}    						// Done    						SetTransferState(TransferState.Finished);  						ProcessTaskStateRequest();    						return;  					}    					// Get a temp file for the destination based on the source's hash    					destinationTemp = ((ITempIdentityFileService)this.destination.GetService(new TempIdentityFileServiceType(sourceHash))).GetTempFile();    					// Get the stream for the destination temp file    					try  					{  						if (!destinationTemp.ParentDirectory.Exists)  						{  							destinationTemp.ParentDirectory.Create(true);  						}  					}  					catch (IOException)  					{  					}    					using (destinationTempStream = destinationTemp.GetContent().OpenStream(FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))  					{  						Action finishUp = delegate  						{  							SetTransferState(TransferState.Tidying);    							destinationTempStream.Close();    							for (int i = 0; i < 4; i++)  							{  								try  								{  									// Save hash value  									StandardFileHashingService.SaveHashToCache((IFile) destinationTemp' this.HashAlgorithmName'  						                   										sourceHash' (IFile) this.TargetNode);    									try  									{  										// Transfer attributes  										transferAttributes(destinationTemp);  									}  									catch (FileNotFoundException e)  									{  										Console.WriteLine(e);  									}    									// Move destination temp to destination  									destinationTemp.MoveTo(this.TargetNode' true);    									break;  								}  								catch (Exception)  								{  									if (i == 3)  									{  										throw;  									}  								}    								ProcessTaskStateRequest();  							}    							// Done    							SetTransferState(TransferState.Finished);  							ProcessTaskStateRequest();  						};    						// Get the hash for the destination temp file    						var destinationTempHashingService = (IHashingService) destinationTemp.GetService(new StreamHashingServiceType(destinationTempStream));    						// If the destination temp and the source aren't the same  						// then complete the destination temp    						string destinationTempHash;    						if (destinationTempStream.Length >= sourceStream.Length)  						{  							// Destination is longer than source but starts source (unlikely)    							destinationTempHash = destinationTempHashingService.ComputeHash(0' sourceStream.Length).TextValue;    							if (destinationTempHash == sourceHash)  							{  								if (destinationTempStream.Length != sourceStream.Length)  								{  									destinationTempStream.SetLength(sourceStream.Length);  								}    								finishUp();    								return;  							}    							destinationTempStream.SetLength(0);  						}    						if (destinationTempStream.Length > 0)  						{  							destinationTempHash = destinationTempHashingService.ComputeHash().TextValue;    							// Destination shorter than the source but is a partial copy of source    							sourceHash = sourceHashingService.ComputeHash(0' destinationTempStream.Length).TextValue;    							if (sourceHash == destinationTempHash)  							{  								this.offset = destinationTempStream.Length;  							}  							else  							{  								this.offset = 0;  								destinationTempStream.SetLength(0);  							}  						}  						else  						{  							this.offset = 0;  						}    						this.progress.RaiseValueChanged(0' this.offset);    						// Transfer over the remaining part needed (or everything if offset is 0)    						this.offset = destinationTempStream.Length;    						Stream sourcePartialStream = new PartialStream(sourceStream' destinationTempStream.Length);  						Stream destinationTempPartialStream = new PartialStream(destinationTempStream' destinationTempStream.Length);    						this.copier =  							new StreamCopier(new BufferedStream(sourcePartialStream' this.serviceType.BufferSize)' destinationTempPartialStream'  							               false' false' this.serviceType.ChunkSize);    						this.copier.TaskStateChanged += delegate(object sender' TaskEventArgs eventArgs)  						                           {  						                           	if (eventArgs.TaskState == TaskState.Running  						                           	    || eventArgs.TaskState == TaskState.Paused  						                           	    || eventArgs.TaskState == TaskState.Stopped)  						                           	{  						                           		SetTaskState(eventArgs.TaskState);  						                           	}  						                           };    						SetTransferState(TransferState.Transferring);  						ProcessTaskStateRequest();    						this.copier.Run();    						if (this.copier.TaskState == TaskState.Stopped)  						{  							throw new StopRequestedException();  						}    						finishUp();  					}  				}  			}  			catch (StopRequestedException)  			{  			}  			finally  			{  				if (this.TransferState != TransferState.Finished)  				{  					SetTransferState(TransferState.Stopped);  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The following statement contains a magic number: try  			{  				lock (this)  				{  					SetTransferState(TransferState.Preparing);  				}    				Action<IFile> transferAttributes = delegate(IFile dest)  				{  					using (dest.Attributes.AquireUpdateContext())  					{  						foreach (string s in this.serviceType.AttributesToTransfer)  						{  							dest.Attributes[s] = this.source.Attributes[s];  						}  					}  				};    				Stream sourceStream = null;    				for (var i = 0; i < 4; i++)  				{  					try  					{  						sourceStream = this.OperatingNode.GetContent().GetInputStream(FileMode.Open' FileShare.Read);    						break;  					}  					catch (NodeNotFoundException)  					{  						throw;  					}  					catch (Exception)  					{  						if (i == 3)  						{  							throw;  						}  					}    					ProcessTaskStateRequest();  				}    				using (sourceStream)  				{  					var sourceHashingService = (IHashingService)this.OperatingNode.GetService(new StreamHashingServiceType(sourceStream' this.HashAlgorithmName));    					// Compute the hash of the source file    					SetTransferState(TransferState.Comparing);  					ProcessTaskStateRequest();    					sourceHash = sourceHashingService.ComputeHash().TextValue;    					// Try to open the destination file    					ProcessTaskStateRequest();    					var destinationHashingService = (IHashingService)this.TargetNode.GetService(new FileHashingServiceType(this.HashAlgorithmName));    					string destinationHash;    					try  					{  						destinationHash = destinationHashingService.ComputeHash().TextValue;  					}  					catch (DirectoryNodeNotFoundException)  					{  						this.TargetNode.ParentDirectory.Create(true);    						try  						{  							destinationHash = destinationHashingService.ComputeHash().TextValue;  						}  						catch (NodeNotFoundException)  						{  							destinationHash = null;  						}  					}  					catch (NodeNotFoundException)  					{  						destinationHash = null;  					}    					ProcessTaskStateRequest();    					// Source and destination are identical    					if (sourceHash == destinationHash)  					{  						SetTransferState(TransferState.Transferring);    						this.progress.RaiseValueChanged(0' GetBytesToTransfer());    						SetTransferState(TransferState.Tidying);    						// Transfer attributes    						try  						{  							transferAttributes((IFile) this.TargetNode);  						}  						catch (FileNotFoundException)  						{  						}    						// Done    						SetTransferState(TransferState.Finished);  						ProcessTaskStateRequest();    						return;  					}    					// Get a temp file for the destination based on the source's hash    					destinationTemp = ((ITempIdentityFileService)this.destination.GetService(new TempIdentityFileServiceType(sourceHash))).GetTempFile();    					// Get the stream for the destination temp file    					try  					{  						if (!destinationTemp.ParentDirectory.Exists)  						{  							destinationTemp.ParentDirectory.Create(true);  						}  					}  					catch (IOException)  					{  					}    					using (destinationTempStream = destinationTemp.GetContent().OpenStream(FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))  					{  						Action finishUp = delegate  						{  							SetTransferState(TransferState.Tidying);    							destinationTempStream.Close();    							for (int i = 0; i < 4; i++)  							{  								try  								{  									// Save hash value  									StandardFileHashingService.SaveHashToCache((IFile) destinationTemp' this.HashAlgorithmName'  						                   										sourceHash' (IFile) this.TargetNode);    									try  									{  										// Transfer attributes  										transferAttributes(destinationTemp);  									}  									catch (FileNotFoundException e)  									{  										Console.WriteLine(e);  									}    									// Move destination temp to destination  									destinationTemp.MoveTo(this.TargetNode' true);    									break;  								}  								catch (Exception)  								{  									if (i == 3)  									{  										throw;  									}  								}    								ProcessTaskStateRequest();  							}    							// Done    							SetTransferState(TransferState.Finished);  							ProcessTaskStateRequest();  						};    						// Get the hash for the destination temp file    						var destinationTempHashingService = (IHashingService) destinationTemp.GetService(new StreamHashingServiceType(destinationTempStream));    						// If the destination temp and the source aren't the same  						// then complete the destination temp    						string destinationTempHash;    						if (destinationTempStream.Length >= sourceStream.Length)  						{  							// Destination is longer than source but starts source (unlikely)    							destinationTempHash = destinationTempHashingService.ComputeHash(0' sourceStream.Length).TextValue;    							if (destinationTempHash == sourceHash)  							{  								if (destinationTempStream.Length != sourceStream.Length)  								{  									destinationTempStream.SetLength(sourceStream.Length);  								}    								finishUp();    								return;  							}    							destinationTempStream.SetLength(0);  						}    						if (destinationTempStream.Length > 0)  						{  							destinationTempHash = destinationTempHashingService.ComputeHash().TextValue;    							// Destination shorter than the source but is a partial copy of source    							sourceHash = sourceHashingService.ComputeHash(0' destinationTempStream.Length).TextValue;    							if (sourceHash == destinationTempHash)  							{  								this.offset = destinationTempStream.Length;  							}  							else  							{  								this.offset = 0;  								destinationTempStream.SetLength(0);  							}  						}  						else  						{  							this.offset = 0;  						}    						this.progress.RaiseValueChanged(0' this.offset);    						// Transfer over the remaining part needed (or everything if offset is 0)    						this.offset = destinationTempStream.Length;    						Stream sourcePartialStream = new PartialStream(sourceStream' destinationTempStream.Length);  						Stream destinationTempPartialStream = new PartialStream(destinationTempStream' destinationTempStream.Length);    						this.copier =  							new StreamCopier(new BufferedStream(sourcePartialStream' this.serviceType.BufferSize)' destinationTempPartialStream'  							               false' false' this.serviceType.ChunkSize);    						this.copier.TaskStateChanged += delegate(object sender' TaskEventArgs eventArgs)  						                           {  						                           	if (eventArgs.TaskState == TaskState.Running  						                           	    || eventArgs.TaskState == TaskState.Paused  						                           	    || eventArgs.TaskState == TaskState.Stopped)  						                           	{  						                           		SetTaskState(eventArgs.TaskState);  						                           	}  						                           };    						SetTransferState(TransferState.Transferring);  						ProcessTaskStateRequest();    						this.copier.Run();    						if (this.copier.TaskState == TaskState.Stopped)  						{  							throw new StopRequestedException();  						}    						finishUp();  					}  				}  			}  			catch (StopRequestedException)  			{  			}  			finally  			{  				if (this.TransferState != TransferState.Finished)  				{  					SetTransferState(TransferState.Stopped);  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers,StandardFileTransferService,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,DoRun,The following statement contains a magic number: try  			{  				lock (this)  				{  					SetTransferState(TransferState.Preparing);  				}    				Action<IFile> transferAttributes = delegate(IFile dest)  				{  					using (dest.Attributes.AquireUpdateContext())  					{  						foreach (string s in this.serviceType.AttributesToTransfer)  						{  							dest.Attributes[s] = this.source.Attributes[s];  						}  					}  				};    				Stream sourceStream = null;    				for (var i = 0; i < 4; i++)  				{  					try  					{  						sourceStream = this.OperatingNode.GetContent().GetInputStream(FileMode.Open' FileShare.Read);    						break;  					}  					catch (NodeNotFoundException)  					{  						throw;  					}  					catch (Exception)  					{  						if (i == 3)  						{  							throw;  						}  					}    					ProcessTaskStateRequest();  				}    				using (sourceStream)  				{  					var sourceHashingService = (IHashingService)this.OperatingNode.GetService(new StreamHashingServiceType(sourceStream' this.HashAlgorithmName));    					// Compute the hash of the source file    					SetTransferState(TransferState.Comparing);  					ProcessTaskStateRequest();    					sourceHash = sourceHashingService.ComputeHash().TextValue;    					// Try to open the destination file    					ProcessTaskStateRequest();    					var destinationHashingService = (IHashingService)this.TargetNode.GetService(new FileHashingServiceType(this.HashAlgorithmName));    					string destinationHash;    					try  					{  						destinationHash = destinationHashingService.ComputeHash().TextValue;  					}  					catch (DirectoryNodeNotFoundException)  					{  						this.TargetNode.ParentDirectory.Create(true);    						try  						{  							destinationHash = destinationHashingService.ComputeHash().TextValue;  						}  						catch (NodeNotFoundException)  						{  							destinationHash = null;  						}  					}  					catch (NodeNotFoundException)  					{  						destinationHash = null;  					}    					ProcessTaskStateRequest();    					// Source and destination are identical    					if (sourceHash == destinationHash)  					{  						SetTransferState(TransferState.Transferring);    						this.progress.RaiseValueChanged(0' GetBytesToTransfer());    						SetTransferState(TransferState.Tidying);    						// Transfer attributes    						try  						{  							transferAttributes((IFile) this.TargetNode);  						}  						catch (FileNotFoundException)  						{  						}    						// Done    						SetTransferState(TransferState.Finished);  						ProcessTaskStateRequest();    						return;  					}    					// Get a temp file for the destination based on the source's hash    					destinationTemp = ((ITempIdentityFileService)this.destination.GetService(new TempIdentityFileServiceType(sourceHash))).GetTempFile();    					// Get the stream for the destination temp file    					try  					{  						if (!destinationTemp.ParentDirectory.Exists)  						{  							destinationTemp.ParentDirectory.Create(true);  						}  					}  					catch (IOException)  					{  					}    					using (destinationTempStream = destinationTemp.GetContent().OpenStream(FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))  					{  						Action finishUp = delegate  						{  							SetTransferState(TransferState.Tidying);    							destinationTempStream.Close();    							for (int i = 0; i < 4; i++)  							{  								try  								{  									// Save hash value  									StandardFileHashingService.SaveHashToCache((IFile) destinationTemp' this.HashAlgorithmName'  						                   										sourceHash' (IFile) this.TargetNode);    									try  									{  										// Transfer attributes  										transferAttributes(destinationTemp);  									}  									catch (FileNotFoundException e)  									{  										Console.WriteLine(e);  									}    									// Move destination temp to destination  									destinationTemp.MoveTo(this.TargetNode' true);    									break;  								}  								catch (Exception)  								{  									if (i == 3)  									{  										throw;  									}  								}    								ProcessTaskStateRequest();  							}    							// Done    							SetTransferState(TransferState.Finished);  							ProcessTaskStateRequest();  						};    						// Get the hash for the destination temp file    						var destinationTempHashingService = (IHashingService) destinationTemp.GetService(new StreamHashingServiceType(destinationTempStream));    						// If the destination temp and the source aren't the same  						// then complete the destination temp    						string destinationTempHash;    						if (destinationTempStream.Length >= sourceStream.Length)  						{  							// Destination is longer than source but starts source (unlikely)    							destinationTempHash = destinationTempHashingService.ComputeHash(0' sourceStream.Length).TextValue;    							if (destinationTempHash == sourceHash)  							{  								if (destinationTempStream.Length != sourceStream.Length)  								{  									destinationTempStream.SetLength(sourceStream.Length);  								}    								finishUp();    								return;  							}    							destinationTempStream.SetLength(0);  						}    						if (destinationTempStream.Length > 0)  						{  							destinationTempHash = destinationTempHashingService.ComputeHash().TextValue;    							// Destination shorter than the source but is a partial copy of source    							sourceHash = sourceHashingService.ComputeHash(0' destinationTempStream.Length).TextValue;    							if (sourceHash == destinationTempHash)  							{  								this.offset = destinationTempStream.Length;  							}  							else  							{  								this.offset = 0;  								destinationTempStream.SetLength(0);  							}  						}  						else  						{  							this.offset = 0;  						}    						this.progress.RaiseValueChanged(0' this.offset);    						// Transfer over the remaining part needed (or everything if offset is 0)    						this.offset = destinationTempStream.Length;    						Stream sourcePartialStream = new PartialStream(sourceStream' destinationTempStream.Length);  						Stream destinationTempPartialStream = new PartialStream(destinationTempStream' destinationTempStream.Length);    						this.copier =  							new StreamCopier(new BufferedStream(sourcePartialStream' this.serviceType.BufferSize)' destinationTempPartialStream'  							               false' false' this.serviceType.ChunkSize);    						this.copier.TaskStateChanged += delegate(object sender' TaskEventArgs eventArgs)  						                           {  						                           	if (eventArgs.TaskState == TaskState.Running  						                           	    || eventArgs.TaskState == TaskState.Paused  						                           	    || eventArgs.TaskState == TaskState.Stopped)  						                           	{  						                           		SetTaskState(eventArgs.TaskState);  						                           	}  						                           };    						SetTransferState(TransferState.Transferring);  						ProcessTaskStateRequest();    						this.copier.Run();    						if (this.copier.TaskState == TaskState.Stopped)  						{  							throw new StopRequestedException();  						}    						finishUp();  					}  				}  			}  			catch (StopRequestedException)  			{  			}  			finally  			{  				if (this.TransferState != TransferState.Finished)  				{  					SetTransferState(TransferState.Stopped);  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers,TransferProgress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,ToString,The following statement contains a magic number: switch (this.service.transferState)  				{  					case TransferState.Finished:  						return String.Format("Finished {0}/{1} bytes ({2:0}%)"' CurrentValue' MaximumValue' Convert.ToDouble(CurrentValue) / Convert.ToDouble(MaximumValue) * 100.0);  					case TransferState.Transferring:  						return String.Format("Transferring {0}/{1} bytes ({2:0.##}%)"' CurrentValue' MaximumValue' Convert.ToDouble(CurrentValue) / Convert.ToDouble(MaximumValue) * 100.0);  					default:  						return Enum.GetName(typeof(TransferState)' this.service.transferState);  				}
Magic Number,Platform.VirtualFileSystem.Providers,TransferProgress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardFileTransferService.cs,ToString,The following statement contains a magic number: switch (this.service.transferState)  				{  					case TransferState.Finished:  						return String.Format("Finished {0}/{1} bytes ({2:0}%)"' CurrentValue' MaximumValue' Convert.ToDouble(CurrentValue) / Convert.ToDouble(MaximumValue) * 100.0);  					case TransferState.Transferring:  						return String.Format("Transferring {0}/{1} bytes ({2:0.##}%)"' CurrentValue' MaximumValue' Convert.ToDouble(CurrentValue) / Convert.ToDouble(MaximumValue) * 100.0);  					default:  						return Enum.GetName(typeof(TransferState)' this.service.transferState);  				}
Magic Number,Platform.VirtualFileSystem.Providers,LayeredNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\LayeredNodeAddress.cs,Parse,The following statement contains a magic number: x = ParseNetworkPart(uri' x + 3' out userName' out password' out serverName' out port);
Magic Number,Platform.VirtualFileSystem.Providers,StandardNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\StandardNodeAddress.cs,GetRootUri,The following statement contains a magic number: var builder = new StringBuilder(64);
Magic Number,Platform.VirtualFileSystem.Providers.Local,NativePosix,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativePosix.cs,ListExtendedAttributes,The following statement contains a magic number: for (var i = 0; i < retval.Length; i++)  			{  				if (retval[i].StartsWith("user."))  				{  					yield return retval[i].Substring(5);  				}    				yield return retval[i];  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,NativePosix,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativePosix.cs,GetExtendedAttribute,The following statement contains a magic number: var buffer = new byte[256];
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalDirectory.cs,DoRenameTo,The following statement contains a magic number: for (var i = 0; i < 5; i++)              {                  try                  {                      if (overwrite)                      {                          Directory.Delete(destPath);                      }                        //                      // Don't use FileInfo.MoveTo as it changes the existing FileInfo                      // use the new path.                      //                        Directory.Move(this.directoryInfo.FullName' destPath);                      this.directoryInfo.Refresh();                        break;                    }                  catch (IOException)                  {                      if (i == 4)                      {                          throw;                      }                        Thread.Sleep(500);                  }              }
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalDirectory.cs,DoRenameTo,The following statement contains a magic number: for (var i = 0; i < 5; i++)              {                  try                  {                      if (overwrite)                      {                          Directory.Delete(destPath);                      }                        //                      // Don't use FileInfo.MoveTo as it changes the existing FileInfo                      // use the new path.                      //                        Directory.Move(this.directoryInfo.FullName' destPath);                      this.directoryInfo.Refresh();                        break;                    }                  catch (IOException)                  {                      if (i == 4)                      {                          throw;                      }                        Thread.Sleep(500);                  }              }
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalDirectory,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalDirectory.cs,DoRenameTo,The following statement contains a magic number: for (var i = 0; i < 5; i++)              {                  try                  {                      if (overwrite)                      {                          Directory.Delete(destPath);                      }                        //                      // Don't use FileInfo.MoveTo as it changes the existing FileInfo                      // use the new path.                      //                        Directory.Move(this.directoryInfo.FullName' destPath);                      this.directoryInfo.Refresh();                        break;                    }                  catch (IOException)                  {                      if (i == 4)                      {                          throw;                      }                        Thread.Sleep(500);                  }              }
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoGetInputStream,The following statement contains a magic number: try  			{  				if (string.IsNullOrEmpty(contentName)  					|| contentName == Native.GetInstance().DefaultContentName)  				{  					for (var i = 0; i < 10; i++)  					{  						try  						{  							return new FileStream(this.fileInfo.FullName' mode' FileAccess.Read' sharing);  						}  						catch (DirectoryNotFoundException)  						{  							throw;  						}  						catch (FileNotFoundException)  						{  							throw;  						}  						catch (IOException)  						{  							if (i == 9)  							{  								throw;  							}    							Thread.Sleep(500);  						}  					}    					throw new IOException();  				}  				else  				{  					return Native.GetInstance().OpenAlternateContentStream  					(  						this.fileInfo.FullName'  						contentName'  						mode' FileAccess.Read' sharing  					);  				}  			}  			catch (FileNotFoundException)  			{  				throw new FileNodeNotFoundException(Address);  			}  			catch (DirectoryNotFoundException)  			{  				throw new DirectoryNodeNotFoundException(Address);  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoGetInputStream,The following statement contains a magic number: try  			{  				if (string.IsNullOrEmpty(contentName)  					|| contentName == Native.GetInstance().DefaultContentName)  				{  					for (var i = 0; i < 10; i++)  					{  						try  						{  							return new FileStream(this.fileInfo.FullName' mode' FileAccess.Read' sharing);  						}  						catch (DirectoryNotFoundException)  						{  							throw;  						}  						catch (FileNotFoundException)  						{  							throw;  						}  						catch (IOException)  						{  							if (i == 9)  							{  								throw;  							}    							Thread.Sleep(500);  						}  					}    					throw new IOException();  				}  				else  				{  					return Native.GetInstance().OpenAlternateContentStream  					(  						this.fileInfo.FullName'  						contentName'  						mode' FileAccess.Read' sharing  					);  				}  			}  			catch (FileNotFoundException)  			{  				throw new FileNodeNotFoundException(Address);  			}  			catch (DirectoryNotFoundException)  			{  				throw new DirectoryNodeNotFoundException(Address);  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoGetInputStream,The following statement contains a magic number: try  			{  				if (string.IsNullOrEmpty(contentName)  					|| contentName == Native.GetInstance().DefaultContentName)  				{  					for (var i = 0; i < 10; i++)  					{  						try  						{  							return new FileStream(this.fileInfo.FullName' mode' FileAccess.Read' sharing);  						}  						catch (DirectoryNotFoundException)  						{  							throw;  						}  						catch (FileNotFoundException)  						{  							throw;  						}  						catch (IOException)  						{  							if (i == 9)  							{  								throw;  							}    							Thread.Sleep(500);  						}  					}    					throw new IOException();  				}  				else  				{  					return Native.GetInstance().OpenAlternateContentStream  					(  						this.fileInfo.FullName'  						contentName'  						mode' FileAccess.Read' sharing  					);  				}  			}  			catch (FileNotFoundException)  			{  				throw new FileNodeNotFoundException(Address);  			}  			catch (DirectoryNotFoundException)  			{  				throw new DirectoryNodeNotFoundException(Address);  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoRenameTo,The following statement contains a magic number: for (var i = 0; i < 5; i++)  			{  				try  				{  					if (overwrite)  					{  						File.Delete(destPath);  					}    					//  					// Don't use FileInfo.MoveTo as it changes the existing FileInfo  					// use the new path.  					//    					File.Move(this.fileInfo.FullName' destPath);  					this.fileInfo.Refresh();    					break;  					  				}  				catch (IOException)  				{  					if (i == 4)  					{  						throw;  					}    					Thread.Sleep(500);  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoRenameTo,The following statement contains a magic number: for (var i = 0; i < 5; i++)  			{  				try  				{  					if (overwrite)  					{  						File.Delete(destPath);  					}    					//  					// Don't use FileInfo.MoveTo as it changes the existing FileInfo  					// use the new path.  					//    					File.Move(this.fileInfo.FullName' destPath);  					this.fileInfo.Refresh();    					break;  					  				}  				catch (IOException)  				{  					if (i == 4)  					{  						throw;  					}    					Thread.Sleep(500);  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoRenameTo,The following statement contains a magic number: for (var i = 0; i < 5; i++)  			{  				try  				{  					if (overwrite)  					{  						File.Delete(destPath);  					}    					//  					// Don't use FileInfo.MoveTo as it changes the existing FileInfo  					// use the new path.  					//    					File.Move(this.fileInfo.FullName' destPath);  					this.fileInfo.Refresh();    					break;  					  				}  				catch (IOException)  				{  					if (i == 4)  					{  						throw;  					}    					Thread.Sleep(500);  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoCreateHardLink,The following statement contains a magic number: if (this.Exists && !overwrite)  			{  				throw new IOException("Hardlink already exists");  			}  			else  			{  				ActionUtils.ToRetryAction<object>  				(  					delegate  					{  						if (this.Exists)  						{  							this.Delete();  						}    						try  						{  							Native.GetInstance().CreateHardLink(path' target);  						}  						catch (TooManyLinksException)  						{  							throw new TooManyLinksException(this' targetFile);  						}  					}'  					TimeSpan.FromSeconds(3)' TimeSpan.FromSeconds(0.25)  				)(null);  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,DoCreateHardLink,The following statement contains a magic number: if (this.Exists && !overwrite)  			{  				throw new IOException("Hardlink already exists");  			}  			else  			{  				ActionUtils.ToRetryAction<object>  				(  					delegate  					{  						if (this.Exists)  						{  							this.Delete();  						}    						try  						{  							Native.GetInstance().CreateHardLink(path' target);  						}  						catch (TooManyLinksException)  						{  							throw new TooManyLinksException(this' targetFile);  						}  					}'  					TimeSpan.FromSeconds(3)' TimeSpan.FromSeconds(0.25)  				)(null);  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFileSystem.cs,InitializeFsw,The following statement contains a magic number: lock (this)  			{  				if (this.fileSystemWatcherInitialised)  				{  					return;  				}    			    WeakReference weakref;                  EventHandler<LocalFileSystemEventArgs> handler = null;    			    weakref = new WeakReference(this);    			    handler = delegate(object sender' LocalFileSystemEventArgs eventArgs)  			              {                                LocalFileSystem _this = (LocalFileSystem)weakref.Target;                                  if (_this == null)                                {                                    LocalFileSystem.DirectoryDeleted -= handler;                                      return;                                }    			                  string s;    			                  s = (((LocalDirectory) eventArgs.Directory).directoryInfo.FullName);                                  if (this.PathsEqual(((LocalNodeAddress)this.RootAddress).AbsoluteNativePath' s' s.Length))                                {                                    // This allows the directory to be deleted                                      this.fileSystemWatcherDirectory.EnableRaisingEvents = false;                                    this.fileSystemWatcherFile.EnableRaisingEvents = false;                                      // TODO: Use file system watcher from level above to allow                                    // events to still be fired if the directory gets recreated                                }  			              };                    LocalFileSystem.DirectoryDeleted += handler;    				// We need two different watchers since we need to determine if the renamed/created/deleted events  				// occured on a file or a directory.  				// Changed events occur on both dirs and files regardless of the NotifyFilters setting so the  				// File watcher will be responsible for handling that.    				DriveInfo driveInfo;                    try                  {                      driveInfo = new DriveInfo(((LocalNodeAddress) this.RootAddress).AbsoluteNativePath);                  }                  catch (ArgumentException)                  {                      driveInfo = null;                  }    			    if (driveInfo == null || (driveInfo != null && driveInfo.DriveType != DriveType.Removable))  				{                      if (!Directory.Exists(((LocalNodeAddress)this.RootAddress).AbsoluteNativePath))                      {                          // TODO: Use directory above                            return;                      }    				    string path;    				    path = ((LocalNodeAddress) this.RootAddress).AbsoluteNativePath;    				    path = path.TrimEnd('/'' '\\');    					if (Environment.OSVersion.Platform != PlatformID.Unix)  					{  						if (Path.GetDirectoryName(path) != null)  						{  							path = Path.GetDirectoryName(path);  						}  					}    					if (!path.EndsWith(Path.DirectorySeparatorChar.ToString()))  					{  						path += Path.DirectorySeparatorChar;  					}    					this.fileSystemWatcherFile = new FileSystemWatcher(path);  					this.fileSystemWatcherFile.InternalBufferSize = 64 * 1024 /* 128K buffer */;  					this.fileSystemWatcherFile.IncludeSubdirectories = true;  					this.fileSystemWatcherFile.NotifyFilter =  						NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.FileName /* Files only */  						| NotifyFilters.LastAccess | NotifyFilters.LastWrite /*| NotifyFilters.Security | NotifyFilters.Size*/;    					this.fileSystemWatcherFile.Renamed += new RenamedEventHandler(FileSystemWatcher_Renamed);  					this.fileSystemWatcherFile.Changed += new FileSystemEventHandler(FileSystemWatcher_Changed);  					this.fileSystemWatcherFile.Created += new FileSystemEventHandler(FileSystemWatcher_Created);  					this.fileSystemWatcherFile.Deleted += new FileSystemEventHandler(FileSystemWatcher_Deleted);  					this.fileSystemWatcherFile.Error += new ErrorEventHandler(FileSystemWatcher_Error);    					this.fileSystemWatcherDirectory = new FileSystemWatcher(path);  					this.fileSystemWatcherDirectory.InternalBufferSize = 64 * 1024;  					this.fileSystemWatcherDirectory.IncludeSubdirectories = true;  					this.fileSystemWatcherDirectory.NotifyFilter =  						NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.DirectoryName /* Dirs only */  						| NotifyFilters.LastAccess | NotifyFilters.LastWrite /*| NotifyFilters.Security | NotifyFilters.Size*/;    					this.fileSystemWatcherDirectory.Filter = "*";  					this.fileSystemWatcherDirectory.Renamed += new RenamedEventHandler(FileSystemWatcher_Renamed);  					this.fileSystemWatcherDirectory.Created += new FileSystemEventHandler(FileSystemWatcher_Created);  					this.fileSystemWatcherDirectory.Deleted += new FileSystemEventHandler(FileSystemWatcher_Deleted);  					//fileSystemWatcherDirectory.Changed += new FileSystemEventHandler(FileSystemWatcher_Changed);  					this.fileSystemWatcherDirectory.Error += new ErrorEventHandler(FileSystemWatcher_Error);    					this.fileSystemWatcherInitialised = true;					  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFileSystem.cs,InitializeFsw,The following statement contains a magic number: lock (this)  			{  				if (this.fileSystemWatcherInitialised)  				{  					return;  				}    			    WeakReference weakref;                  EventHandler<LocalFileSystemEventArgs> handler = null;    			    weakref = new WeakReference(this);    			    handler = delegate(object sender' LocalFileSystemEventArgs eventArgs)  			              {                                LocalFileSystem _this = (LocalFileSystem)weakref.Target;                                  if (_this == null)                                {                                    LocalFileSystem.DirectoryDeleted -= handler;                                      return;                                }    			                  string s;    			                  s = (((LocalDirectory) eventArgs.Directory).directoryInfo.FullName);                                  if (this.PathsEqual(((LocalNodeAddress)this.RootAddress).AbsoluteNativePath' s' s.Length))                                {                                    // This allows the directory to be deleted                                      this.fileSystemWatcherDirectory.EnableRaisingEvents = false;                                    this.fileSystemWatcherFile.EnableRaisingEvents = false;                                      // TODO: Use file system watcher from level above to allow                                    // events to still be fired if the directory gets recreated                                }  			              };                    LocalFileSystem.DirectoryDeleted += handler;    				// We need two different watchers since we need to determine if the renamed/created/deleted events  				// occured on a file or a directory.  				// Changed events occur on both dirs and files regardless of the NotifyFilters setting so the  				// File watcher will be responsible for handling that.    				DriveInfo driveInfo;                    try                  {                      driveInfo = new DriveInfo(((LocalNodeAddress) this.RootAddress).AbsoluteNativePath);                  }                  catch (ArgumentException)                  {                      driveInfo = null;                  }    			    if (driveInfo == null || (driveInfo != null && driveInfo.DriveType != DriveType.Removable))  				{                      if (!Directory.Exists(((LocalNodeAddress)this.RootAddress).AbsoluteNativePath))                      {                          // TODO: Use directory above                            return;                      }    				    string path;    				    path = ((LocalNodeAddress) this.RootAddress).AbsoluteNativePath;    				    path = path.TrimEnd('/'' '\\');    					if (Environment.OSVersion.Platform != PlatformID.Unix)  					{  						if (Path.GetDirectoryName(path) != null)  						{  							path = Path.GetDirectoryName(path);  						}  					}    					if (!path.EndsWith(Path.DirectorySeparatorChar.ToString()))  					{  						path += Path.DirectorySeparatorChar;  					}    					this.fileSystemWatcherFile = new FileSystemWatcher(path);  					this.fileSystemWatcherFile.InternalBufferSize = 64 * 1024 /* 128K buffer */;  					this.fileSystemWatcherFile.IncludeSubdirectories = true;  					this.fileSystemWatcherFile.NotifyFilter =  						NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.FileName /* Files only */  						| NotifyFilters.LastAccess | NotifyFilters.LastWrite /*| NotifyFilters.Security | NotifyFilters.Size*/;    					this.fileSystemWatcherFile.Renamed += new RenamedEventHandler(FileSystemWatcher_Renamed);  					this.fileSystemWatcherFile.Changed += new FileSystemEventHandler(FileSystemWatcher_Changed);  					this.fileSystemWatcherFile.Created += new FileSystemEventHandler(FileSystemWatcher_Created);  					this.fileSystemWatcherFile.Deleted += new FileSystemEventHandler(FileSystemWatcher_Deleted);  					this.fileSystemWatcherFile.Error += new ErrorEventHandler(FileSystemWatcher_Error);    					this.fileSystemWatcherDirectory = new FileSystemWatcher(path);  					this.fileSystemWatcherDirectory.InternalBufferSize = 64 * 1024;  					this.fileSystemWatcherDirectory.IncludeSubdirectories = true;  					this.fileSystemWatcherDirectory.NotifyFilter =  						NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.DirectoryName /* Dirs only */  						| NotifyFilters.LastAccess | NotifyFilters.LastWrite /*| NotifyFilters.Security | NotifyFilters.Size*/;    					this.fileSystemWatcherDirectory.Filter = "*";  					this.fileSystemWatcherDirectory.Renamed += new RenamedEventHandler(FileSystemWatcher_Renamed);  					this.fileSystemWatcherDirectory.Created += new FileSystemEventHandler(FileSystemWatcher_Created);  					this.fileSystemWatcherDirectory.Deleted += new FileSystemEventHandler(FileSystemWatcher_Deleted);  					//fileSystemWatcherDirectory.Changed += new FileSystemEventHandler(FileSystemWatcher_Changed);  					this.fileSystemWatcherDirectory.Error += new ErrorEventHandler(FileSystemWatcher_Error);    					this.fileSystemWatcherInitialised = true;					  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFileSystem.cs,InitializeFsw,The following statement contains a magic number: lock (this)  			{  				if (this.fileSystemWatcherInitialised)  				{  					return;  				}    			    WeakReference weakref;                  EventHandler<LocalFileSystemEventArgs> handler = null;    			    weakref = new WeakReference(this);    			    handler = delegate(object sender' LocalFileSystemEventArgs eventArgs)  			              {                                LocalFileSystem _this = (LocalFileSystem)weakref.Target;                                  if (_this == null)                                {                                    LocalFileSystem.DirectoryDeleted -= handler;                                      return;                                }    			                  string s;    			                  s = (((LocalDirectory) eventArgs.Directory).directoryInfo.FullName);                                  if (this.PathsEqual(((LocalNodeAddress)this.RootAddress).AbsoluteNativePath' s' s.Length))                                {                                    // This allows the directory to be deleted                                      this.fileSystemWatcherDirectory.EnableRaisingEvents = false;                                    this.fileSystemWatcherFile.EnableRaisingEvents = false;                                      // TODO: Use file system watcher from level above to allow                                    // events to still be fired if the directory gets recreated                                }  			              };                    LocalFileSystem.DirectoryDeleted += handler;    				// We need two different watchers since we need to determine if the renamed/created/deleted events  				// occured on a file or a directory.  				// Changed events occur on both dirs and files regardless of the NotifyFilters setting so the  				// File watcher will be responsible for handling that.    				DriveInfo driveInfo;                    try                  {                      driveInfo = new DriveInfo(((LocalNodeAddress) this.RootAddress).AbsoluteNativePath);                  }                  catch (ArgumentException)                  {                      driveInfo = null;                  }    			    if (driveInfo == null || (driveInfo != null && driveInfo.DriveType != DriveType.Removable))  				{                      if (!Directory.Exists(((LocalNodeAddress)this.RootAddress).AbsoluteNativePath))                      {                          // TODO: Use directory above                            return;                      }    				    string path;    				    path = ((LocalNodeAddress) this.RootAddress).AbsoluteNativePath;    				    path = path.TrimEnd('/'' '\\');    					if (Environment.OSVersion.Platform != PlatformID.Unix)  					{  						if (Path.GetDirectoryName(path) != null)  						{  							path = Path.GetDirectoryName(path);  						}  					}    					if (!path.EndsWith(Path.DirectorySeparatorChar.ToString()))  					{  						path += Path.DirectorySeparatorChar;  					}    					this.fileSystemWatcherFile = new FileSystemWatcher(path);  					this.fileSystemWatcherFile.InternalBufferSize = 64 * 1024 /* 128K buffer */;  					this.fileSystemWatcherFile.IncludeSubdirectories = true;  					this.fileSystemWatcherFile.NotifyFilter =  						NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.FileName /* Files only */  						| NotifyFilters.LastAccess | NotifyFilters.LastWrite /*| NotifyFilters.Security | NotifyFilters.Size*/;    					this.fileSystemWatcherFile.Renamed += new RenamedEventHandler(FileSystemWatcher_Renamed);  					this.fileSystemWatcherFile.Changed += new FileSystemEventHandler(FileSystemWatcher_Changed);  					this.fileSystemWatcherFile.Created += new FileSystemEventHandler(FileSystemWatcher_Created);  					this.fileSystemWatcherFile.Deleted += new FileSystemEventHandler(FileSystemWatcher_Deleted);  					this.fileSystemWatcherFile.Error += new ErrorEventHandler(FileSystemWatcher_Error);    					this.fileSystemWatcherDirectory = new FileSystemWatcher(path);  					this.fileSystemWatcherDirectory.InternalBufferSize = 64 * 1024;  					this.fileSystemWatcherDirectory.IncludeSubdirectories = true;  					this.fileSystemWatcherDirectory.NotifyFilter =  						NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.DirectoryName /* Dirs only */  						| NotifyFilters.LastAccess | NotifyFilters.LastWrite /*| NotifyFilters.Security | NotifyFilters.Size*/;    					this.fileSystemWatcherDirectory.Filter = "*";  					this.fileSystemWatcherDirectory.Renamed += new RenamedEventHandler(FileSystemWatcher_Renamed);  					this.fileSystemWatcherDirectory.Created += new FileSystemEventHandler(FileSystemWatcher_Created);  					this.fileSystemWatcherDirectory.Deleted += new FileSystemEventHandler(FileSystemWatcher_Deleted);  					//fileSystemWatcherDirectory.Changed += new FileSystemEventHandler(FileSystemWatcher_Changed);  					this.fileSystemWatcherDirectory.Error += new ErrorEventHandler(FileSystemWatcher_Error);    					this.fileSystemWatcherInitialised = true;					  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalFileSystem,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFileSystem.cs,InitializeFsw,The following statement contains a magic number: lock (this)  			{  				if (this.fileSystemWatcherInitialised)  				{  					return;  				}    			    WeakReference weakref;                  EventHandler<LocalFileSystemEventArgs> handler = null;    			    weakref = new WeakReference(this);    			    handler = delegate(object sender' LocalFileSystemEventArgs eventArgs)  			              {                                LocalFileSystem _this = (LocalFileSystem)weakref.Target;                                  if (_this == null)                                {                                    LocalFileSystem.DirectoryDeleted -= handler;                                      return;                                }    			                  string s;    			                  s = (((LocalDirectory) eventArgs.Directory).directoryInfo.FullName);                                  if (this.PathsEqual(((LocalNodeAddress)this.RootAddress).AbsoluteNativePath' s' s.Length))                                {                                    // This allows the directory to be deleted                                      this.fileSystemWatcherDirectory.EnableRaisingEvents = false;                                    this.fileSystemWatcherFile.EnableRaisingEvents = false;                                      // TODO: Use file system watcher from level above to allow                                    // events to still be fired if the directory gets recreated                                }  			              };                    LocalFileSystem.DirectoryDeleted += handler;    				// We need two different watchers since we need to determine if the renamed/created/deleted events  				// occured on a file or a directory.  				// Changed events occur on both dirs and files regardless of the NotifyFilters setting so the  				// File watcher will be responsible for handling that.    				DriveInfo driveInfo;                    try                  {                      driveInfo = new DriveInfo(((LocalNodeAddress) this.RootAddress).AbsoluteNativePath);                  }                  catch (ArgumentException)                  {                      driveInfo = null;                  }    			    if (driveInfo == null || (driveInfo != null && driveInfo.DriveType != DriveType.Removable))  				{                      if (!Directory.Exists(((LocalNodeAddress)this.RootAddress).AbsoluteNativePath))                      {                          // TODO: Use directory above                            return;                      }    				    string path;    				    path = ((LocalNodeAddress) this.RootAddress).AbsoluteNativePath;    				    path = path.TrimEnd('/'' '\\');    					if (Environment.OSVersion.Platform != PlatformID.Unix)  					{  						if (Path.GetDirectoryName(path) != null)  						{  							path = Path.GetDirectoryName(path);  						}  					}    					if (!path.EndsWith(Path.DirectorySeparatorChar.ToString()))  					{  						path += Path.DirectorySeparatorChar;  					}    					this.fileSystemWatcherFile = new FileSystemWatcher(path);  					this.fileSystemWatcherFile.InternalBufferSize = 64 * 1024 /* 128K buffer */;  					this.fileSystemWatcherFile.IncludeSubdirectories = true;  					this.fileSystemWatcherFile.NotifyFilter =  						NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.FileName /* Files only */  						| NotifyFilters.LastAccess | NotifyFilters.LastWrite /*| NotifyFilters.Security | NotifyFilters.Size*/;    					this.fileSystemWatcherFile.Renamed += new RenamedEventHandler(FileSystemWatcher_Renamed);  					this.fileSystemWatcherFile.Changed += new FileSystemEventHandler(FileSystemWatcher_Changed);  					this.fileSystemWatcherFile.Created += new FileSystemEventHandler(FileSystemWatcher_Created);  					this.fileSystemWatcherFile.Deleted += new FileSystemEventHandler(FileSystemWatcher_Deleted);  					this.fileSystemWatcherFile.Error += new ErrorEventHandler(FileSystemWatcher_Error);    					this.fileSystemWatcherDirectory = new FileSystemWatcher(path);  					this.fileSystemWatcherDirectory.InternalBufferSize = 64 * 1024;  					this.fileSystemWatcherDirectory.IncludeSubdirectories = true;  					this.fileSystemWatcherDirectory.NotifyFilter =  						NotifyFilters.Attributes | NotifyFilters.CreationTime | NotifyFilters.DirectoryName /* Dirs only */  						| NotifyFilters.LastAccess | NotifyFilters.LastWrite /*| NotifyFilters.Security | NotifyFilters.Size*/;    					this.fileSystemWatcherDirectory.Filter = "*";  					this.fileSystemWatcherDirectory.Renamed += new RenamedEventHandler(FileSystemWatcher_Renamed);  					this.fileSystemWatcherDirectory.Created += new FileSystemEventHandler(FileSystemWatcher_Created);  					this.fileSystemWatcherDirectory.Deleted += new FileSystemEventHandler(FileSystemWatcher_Deleted);  					//fileSystemWatcherDirectory.Changed += new FileSystemEventHandler(FileSystemWatcher_Changed);  					this.fileSystemWatcherDirectory.Error += new ErrorEventHandler(FileSystemWatcher_Error);    					this.fileSystemWatcherInitialised = true;					  				}  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAddress.cs,CanParse,The following statement contains a magic number: if (!((uri.Length >= 2 && Char.IsLetter(uri[0]) && uri[1] == ':')  				|| (uri == null || (uri != null   				&& uri.StartsWith(scheme' StringComparison.CurrentCultureIgnoreCase)))  				|| uri.StartsWith("/")   				|| uri.StartsWith(@"\")  				|| uri == "."  				|| uri == ".."  				|| uri.StartsWith("./")  				|| uri.StartsWith("../")  				|| uri.StartsWith(".\\")  				|| uri.StartsWith("..\\")))  			{  				// Fast fail path out.                    				return false;  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAttributes.cs,GetDriveInfo,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT  				|| Environment.OSVersion.Platform == PlatformID.Win32S  				|| Environment.OSVersion.Platform == PlatformID.Win32Windows  				|| Environment.OSVersion.Platform == PlatformID.WinCE)  			{  				if (path.Length != 3)  				{  					return null;  				}    				if (path[1] != ':')  				{  					return null;  				}    				if (!Char.IsLetter(path[0]))  				{  					return null;  				}    				path = path.Left(2) + "\\";  			}  			else if (Environment.OSVersion.Platform == PlatformID.Unix)  			{  				unix = true;  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LocalNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalNodeAttributes.cs,GetDriveInfo,The following statement contains a magic number: if (Environment.OSVersion.Platform == PlatformID.Win32NT  				|| Environment.OSVersion.Platform == PlatformID.Win32S  				|| Environment.OSVersion.Platform == PlatformID.Win32Windows  				|| Environment.OSVersion.Platform == PlatformID.WinCE)  			{  				if (path.Length != 3)  				{  					return null;  				}    				if (path[1] != ':')  				{  					return null;  				}    				if (!Char.IsLetter(path[0]))  				{  					return null;  				}    				path = path.Left(2) + "\\";  			}  			else if (Environment.OSVersion.Platform == PlatformID.Unix)  			{  				unix = true;  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,ListExtendedAttributes,The following statement contains a magic number: if (SupportsAlternateContentStreams)  			{  				foreach (var contentInfo in GetContentInfos(path))  				{  					if (IsAlternateStreamExtendedAttribute(contentInfo.Name))  					{  						yield return contentInfo.Name.Substring(4);  					}  				}  			}  			else  			{  				throw new NotSupportedException();  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,IsAlternateStreamExtendedAttribute,The following statement contains a magic number: return contentName.Length > 4 && contentName.StartsWith("$XA.");
Magic Number,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,SetExtendedAttribute,The following statement contains a magic number: if (SupportsAlternateContentStreams)  			{  				if (value == null)  				{  					try  					{  						this.DeleteFileContent(path' GetExtendedAttributeAlternateStreamName(attributeName));  					}  					catch (FileNodeNotFoundException)  					{  					}  				}  				else  				{  					for (var i = 0; i < 16; i++)  					{  						using (var stream = this.OpenAlternateContentStream(path' GetExtendedAttributeAlternateStreamName(attributeName)' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))  						{  							stream.Write((byte[]) value' 0' ((byte[]) value).Length);  						}    						System.Threading.Thread.Sleep(50);  					}  				}  			}  			else  			{  				throw new NotSupportedException();  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,Native,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\Native.cs,SetExtendedAttribute,The following statement contains a magic number: if (SupportsAlternateContentStreams)  			{  				if (value == null)  				{  					try  					{  						this.DeleteFileContent(path' GetExtendedAttributeAlternateStreamName(attributeName));  					}  					catch (FileNodeNotFoundException)  					{  					}  				}  				else  				{  					for (var i = 0; i < 16; i++)  					{  						using (var stream = this.OpenAlternateContentStream(path' GetExtendedAttributeAlternateStreamName(attributeName)' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.None))  						{  							stream.Write((byte[]) value' 0' ((byte[]) value).Length);  						}    						System.Threading.Thread.Sleep(50);  					}  				}  			}  			else  			{  				throw new NotSupportedException();  			}
Magic Number,Platform.VirtualFileSystem.Providers.Local,LARGE_INTEGER,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\NativeWin32.cs,ToInt64,The following statement contains a magic number: return ((long)High << 32) + (long)Low;
Magic Number,Platform.VirtualFileSystem.Providers.View,ViewNodeAddress,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\View\ViewNodeAddress.cs,Parse,The following statement contains a magic number: absolutePath = uri.Substring(x + 3);
Magic Number,Platform.VirtualFileSystem.Providers.Shadow,ShadowNodeContent,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeContent.cs,ShadowNodeContent,The following statement contains a magic number: var buffer = new StringBuilder(file.Address.Uri.Length * 3);
Magic Number,Platform.VirtualFileSystem.Providers.Shadow,ShadowInputStream,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeContent.cs,SetupTimer,The following statement contains a magic number: period = TimeSpan.FromMinutes(30);
Duplicate Code,Platform.VirtualFileSystem.Providers.Local,LocalFile,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Local\LocalFile.cs,CopyTo,The method contains a code clone-set at the following line numbers (starting from the method definition): ((50' 79)' (101' 130))
Missing Default,Platform.VirtualFileSystem,FileSystemSecurityContext,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\FileSystemSecurityContext.cs,CheckAccess,The following switch statement is missing a default case: switch (verifierEntry.Right.CheckAccess(context))  				{  					case AccessVerificationResult.Granted:  						return AccessVerificationResult.Granted;  					case AccessVerificationResult.Denied:  						return AccessVerificationResult.Denied;  					case AccessVerificationResult.Undefined:  						continue;  				}
Missing Default,Platform.VirtualFileSystem.Providers,AbstractNode,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractNode.cs,FileSystem_Activity,The following switch statement is missing a default case: switch (eventArgs.Activity)  			{  				case FileSystemActivity.Changed:  					OnActivity(new NodeActivityEventArgs(eventArgs.Activity' this));  					OnChanged(new NodeActivityEventArgs(eventArgs.Activity' this));  					break;  				case FileSystemActivity.Created:  					OnActivity(new NodeActivityEventArgs(eventArgs.Activity' this));  					OnCreated(new NodeActivityEventArgs(eventArgs.Activity' this));  					break;  				case FileSystemActivity.Deleted:  					OnActivity(new NodeActivityEventArgs(eventArgs.Activity' this));  					OnDeleted(new NodeActivityEventArgs(eventArgs.Activity' this));  					break;  				case FileSystemActivity.Renamed:  					var renamedEventArgs = (FileSystemRenamedActivityEventArgs)eventArgs;  					OnActivity(new NodeActivityEventArgs(eventArgs.Activity' this' renamedEventArgs.Name));  					OnRenamed(new NodeActivityEventArgs(eventArgs.Activity' this' renamedEventArgs.Name));  					break;  			}
Missing Default,Platform.VirtualFileSystem.Providers,AbstractTypeBasedNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractTypeBasedNodeAttributes.cs,GetValue,The following switch statement is missing a default case: switch (name)  			{  				case "CreationTime":  				case "creationtime":  					return this.CreationTime;  				case "LastAccessTime":  				case "lastaccesstime":  					return this.LastAccessTime;  				case "LastWriteTime":  				case "lastwritetime":  					return this.LastWriteTime;  				case "Exists":  				case "exists":  					return this.Exists;  				case "ReadOnly":  				case "readonly":  					return this.ReadOnly;  				case "Hidden":  				case "hidden":  					return this.IsHidden;  			}
Missing Default,Platform.VirtualFileSystem.Providers,AbstractTypeBasedNodeAttributes,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\AbstractTypeBasedNodeAttributes.cs,SetValue,The following switch statement is missing a default case: switch (name.ToLower())  			{  				case "CreationTime":  				case "creationtime":  					this.CreationTime = (DateTime?)value;  					return;  				case "LastAccessTime":  				case "lastaccesstime":  					this.LastAccessTime = (DateTime?)value;  					return;  				case "LastWriteTime":  				case "lastwritetime":  					this.LastWriteTime = (DateTime?)value;  					return;  				case "ReadOnly":  				case "readonly":  					this.ReadOnly = (bool)value;  					return;  				case "Hidden":  				case "hidden":  					this.IsHidden = (bool)value;  					return;  			}
Missing Default,Platform.VirtualFileSystem.Providers.Shadow,ShadowNodeContent,C:\repos\platformdotnet_Platform.VirtualFileSystem\src\Platform.VirtualFileSystem\Providers\Shadow\ShadowNodeContent.cs,DoGetOutputStream,The following switch statement is missing a default case: switch (mode)  			{  				case FileMode.Truncate:  					file.Create();  					break;  			}
