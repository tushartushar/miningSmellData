Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RAFTiNG.States,Candidate<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\Candidate.cs,EnterState,The length of the statement  "            var request = new RequestVote(nextTerm' this.Node.Id' this.Node.State.LastPersistedIndex' this.Node.State.LastPersistedTerm); " is 125.
Magic Number,RAFTiNG.States,Candidate<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\Candidate.cs,EnterState,The following statement contains a magic number: this.ResetTimeout(.3);
Magic Number,RAFTiNG.States,Follower<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\Follower.cs,EnterState,The following statement contains a magic number: this.ResetTimeout(.2);
Magic Number,RAFTiNG.States,Follower<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\Follower.cs,ProcessVoteRequest,The following statement contains a magic number: if (request.Term < currentTerm)              {                  // requesting a vote for a node that has less recent information                  // we decline                  this.Logger.TraceFormat("Vote request from node with lower term. Declined {0}."' request);                  vote = false;              }              else              {                  if (request.Term > currentTerm)                  {                      this.Logger.DebugFormat(                              "Vote request from node with higher term. Updating our term. {0}"'                              request);                        // we need to upgrade our term                      this.Node.State.CurrentTerm = request.Term;                  }                    // we check how complete is the log ?                  if (this.Node.State.LogIsBetterOrSameAs(request.LastLogTerm' request.LastLogIndex))                  {                      // our log is better than the candidate's                      vote = false;                      this.Logger.TraceFormat(                              "Vote request from node with less information. We do not vote. Message: {0}."'                              request);                  }                  else if (string.IsNullOrEmpty(this.Node.State.VotedFor)                      || this.Node.State.VotedFor == request.CandidateId)                  {                      // grant vote                      this.Logger.TraceFormat(                              "We do vote for node {1}. Message: {0}."' request' request.CandidateId);                      vote = true;                      this.Node.State.VotedFor = request.CandidateId;                                            // as we did vote' we are ok to wait longer                      this.ResetTimeout(0' 2);                  }                  else                  {                      // we already voted for someone                      vote = false;                      this.Logger.TraceFormat(                              "We already voted. We do not grant vote. Message: {0}."' request);                  }              }
Magic Number,RAFTiNG.States,Follower<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\Follower.cs,ProcessAppendEntries,The following statement contains a magic number: this.ResetTimeout(.2);
Magic Number,RAFTiNG.States,Leader<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\Leader.cs,EnterState,The following statement contains a magic number: foreach (var otherNode in this.Node.Settings.OtherNodes())              {                  this.states[otherNode] =                      new LogReplicationAgent(                          TimeSpan.FromMilliseconds(this.Node.Settings.TimeoutInMs / 2.0)'                          this.Node.State.LogEntries.Count'                          otherNode'                          this.Logger);              }
Magic Number,RAFTiNG.States,Leader<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\Leader.cs,BroadcastHeartbeat,The following statement contains a magic number: this.ResetTimeout(0' .5);
Magic Number,RAFTiNG.States,State<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\State.cs,ResetTimeout,The following statement contains a magic number: if (this.Settings.TimeoutInMs != Timeout.Infinite)              {                  timeout =                      (int)                      (((Seed.NextDouble() * randomPart * 2.0) + (fixPart - randomPart))                       * this.Settings.TimeoutInMs);                  if (timeout < 10)                  {                      timeout = 10;                  }                    this.Logger.DebugFormat("Set timeout to {0} ms."' timeout);              }              else              {                  timeout = this.Settings.TimeoutInMs;                  if (this.Logger.IsDebugEnabled)                  {                      this.Logger.Debug("Set timeout to infinite.");                  }              }
Magic Number,RAFTiNG.States,State<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\State.cs,ResetTimeout,The following statement contains a magic number: if (this.Settings.TimeoutInMs != Timeout.Infinite)              {                  timeout =                      (int)                      (((Seed.NextDouble() * randomPart * 2.0) + (fixPart - randomPart))                       * this.Settings.TimeoutInMs);                  if (timeout < 10)                  {                      timeout = 10;                  }                    this.Logger.DebugFormat("Set timeout to {0} ms."' timeout);              }              else              {                  timeout = this.Settings.TimeoutInMs;                  if (this.Logger.IsDebugEnabled)                  {                      this.Logger.Debug("Set timeout to infinite.");                  }              }
Magic Number,RAFTiNG.States,State<T>,C:\repos\dupdob_RAFTiNG\RAFTiNG\States\State.cs,ResetTimeout,The following statement contains a magic number: if (this.Settings.TimeoutInMs != Timeout.Infinite)              {                  timeout =                      (int)                      (((Seed.NextDouble() * randomPart * 2.0) + (fixPart - randomPart))                       * this.Settings.TimeoutInMs);                  if (timeout < 10)                  {                      timeout = 10;                  }                    this.Logger.DebugFormat("Set timeout to {0} ms."' timeout);              }              else              {                  timeout = this.Settings.TimeoutInMs;                  if (this.Logger.IsDebugEnabled)                  {                      this.Logger.Debug("Set timeout to infinite.");                  }              }
