Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileLength,The method has 118 lines of code.
Long Parameter List,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,CreateFileHandle,The method has 5 parameters. Parameters: filePath' creationDisposition' fileAccess' fileShare' useAsync
Long Parameter List,ZetaLongPaths.Native,PInvokeHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\PInvokeHelper.cs,GetNamedSecurityInfo,The method has 8 parameters. Parameters: pObjectName' objectType' securityInfo' ppsidOwner' ppsidGroup' ppDacl' ppSacl' ppSecurityDescriptor
Long Parameter List,ZetaLongPaths.Native,PInvokeHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\PInvokeHelper.cs,LookupAccountSid,The method has 7 parameters. Parameters: systemName' psid' accountName' cbAccount' domainName' cbDomainName' use
Long Parameter List,ZetaLongPaths.Native,PInvokeHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\PInvokeHelper.cs,ReadFile,The method has 5 parameters. Parameters: hFile' lpBuffer' nNumberOfBytesToRead' lpNumberOfBytesRead' lpOverlapped
Long Parameter List,ZetaLongPaths.Native,PInvokeHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\PInvokeHelper.cs,WriteFile,The method has 5 parameters. Parameters: hFile' lpBuffer' nNumberOfBytesToWrite' lpNumberOfBytesWritten' lpOverlapped
Long Parameter List,ZetaLongPaths.Native,PInvokeHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\PInvokeHelper.cs,CreateFile,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' lpSecurityAttributes' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,ZetaLongPaths.Native.FileOperations,FileOperationProgressSink,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\FileOperationProgressSink.cs,PostRenameItem,The method has 5 parameters. Parameters: dwFlags' psiItem' pszNewName' hrRename' psiNewlyCreated
Long Parameter List,ZetaLongPaths.Native.FileOperations,FileOperationProgressSink,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\FileOperationProgressSink.cs,PostMoveItem,The method has 6 parameters. Parameters: dwFlags' psiItem' psiDestinationFolder' pszNewName' hrMove' psiNewlyCreated
Long Parameter List,ZetaLongPaths.Native.FileOperations,FileOperationProgressSink,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\FileOperationProgressSink.cs,PostCopyItem,The method has 6 parameters. Parameters: dwFlags' psiItem' psiDestinationFolder' pszNewName' hrCopy' psiNewlyCreated
Long Parameter List,ZetaLongPaths.Native.FileOperations,FileOperationProgressSink,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\FileOperationProgressSink.cs,PostNewItem,The method has 7 parameters. Parameters: dwFlags' psiDestinationFolder' pszNewName' pszTemplateName' dwFileAttributes' hrNew' psiNewItem
Long Parameter List,ZetaLongPaths.Native.FileOperations.Interop,IFileOperation,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\Interop\IFileOperation.cs,NewItem,The method has 5 parameters. Parameters: psiDestinationFolder' dwFileAttributes' pszName' pszTemplateName' pfopsItem
Long Parameter List,ZetaLongPaths.Native.FileOperations.Interop,IFileOperationProgressSink,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\Interop\IFileOperationProgressSink.cs,PostRenameItem,The method has 5 parameters. Parameters: dwFlags' psiItem' pszNewName' hrRename' psiNewlyCreated
Long Parameter List,ZetaLongPaths.Native.FileOperations.Interop,IFileOperationProgressSink,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\Interop\IFileOperationProgressSink.cs,PostMoveItem,The method has 6 parameters. Parameters: dwFlags' psiItem' psiDestinationFolder' pszNewName' hrMove' psiNewlyCreated
Long Parameter List,ZetaLongPaths.Native.FileOperations.Interop,IFileOperationProgressSink,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\Interop\IFileOperationProgressSink.cs,PostCopyItem,The method has 6 parameters. Parameters: dwFlags' psiItem' psiDestinationFolder' pszNewName' hrCopy' psiNewlyCreated
Long Parameter List,ZetaLongPaths.Native.FileOperations.Interop,IFileOperationProgressSink,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\Native\FileOperations\Interop\IFileOperationProgressSink.cs,PostNewItem,The method has 7 parameters. Parameters: dwFlags' psiDestinationFolder' pszNewName' pszTemplateName' dwFileAttributes' hrNew' psiNewItem
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Linq,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Linq,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Parameter List,System.Linq,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Parameter List,System.Linq,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Parameter List,System.Linq,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Parameter List,System.Linq,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Parameter List,System.Linq,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Parameter List,System.Runtime.CompilerServices,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,System.Runtime.CompilerServices,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Runtime.CompilerServices,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Runtime.CompilerServices,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,System.Runtime.CompilerServices,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,System.Runtime.CompilerServices,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupBy,The method has 5 parameters. Parameters: source' keySelector' elementSelector' resultSelector' comparer
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,Join,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,LinqBridge,Enumerable,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,GroupJoin,The method has 6 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector' comparer
Long Parameter List,LinqBridge,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Parameter List,LinqBridge,OrderedEnumerable<T;K>,C:\repos\UweKeim_ZetaLongPaths\Source\Runtime20\Net20\LinqBridge-1.3.cs,OrderedEnumerable,The method has 5 parameters. Parameters: source' parent' keySelector' comparer' descending
Long Identifier,ZetaLongPaths,ZlpExtensions,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpExtensions.cs,MakeAbsoluteTo,The length of the parameter basePathToWhichToMakeAbsoluteTo is 31.
Long Identifier,ZetaLongPaths,ZlpExtensions,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpExtensions.cs,MakeAbsoluteTo,The length of the parameter basePathToWhichToMakeAbsoluteTo is 31.
Long Identifier,ZetaLongPaths,ZlpExtensions,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpExtensions.cs,MakeAbsoluteTo,The length of the parameter basePathToWhichToMakeAbsoluteTo is 31.
Long Identifier,ZetaLongPaths,ZlpExtensions,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpExtensions.cs,MakeAbsoluteTo,The length of the parameter basePathToWhichToMakeAbsoluteTo is 31.
Long Identifier,ZetaLongPaths,ZlpExtensions,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpExtensions.cs,MakeAbsoluteTo,The length of the parameter basePathToWhichToMakeAbsoluteTo is 31.
Long Identifier,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,GetAbsolutePath,The length of the parameter basePathToWhichToMakeAbsoluteTo is 31.
Long Statement,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,DeleteFileAfterReboot,The length of the statement  "            // "...This value can be used only if the process is in the context of a user who belongs to the administrators group or the LocalSystem account..." " is 148.
Long Statement,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFiles,The length of the statement  "            var findHandle = PInvokeHelper.FindFirstFile(directoryPath.TrimEnd('\\') + "\\" + pattern' out PInvokeHelper.WIN32_FIND_DATA findData); " is 135.
Long Statement,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileSystemInfos,The length of the statement  "            var findHandle = PInvokeHelper.FindFirstFile(directoryPath.TrimEnd('\\') + @"\" + pattern' out PInvokeHelper.WIN32_FIND_DATA findData); " is 135.
Long Statement,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetDirectories,The length of the statement  "            var findHandle = PInvokeHelper.FindFirstFile(directoryPath.TrimEnd('\\') + @"\" + pattern' out PInvokeHelper.WIN32_FIND_DATA findData); " is 135.
Long Statement,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,MustBeLongPath,The length of the statement  "                // Example: "C:\\Users\\cliente\\Desktop\\DRIVES~2\\mdzip\\PASTAC~1\\SUBPAS~1\\PASTAC~1\\SUBPAS~1\\SUBDAS~1\\bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.txt" " is 164.
Long Statement,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,CheckAddLongPathPrefix,The length of the statement  "                // Example: "C:\\Users\\cliente\\Desktop\\DRIVES~2\\mdzip\\PASTAC~1\\SUBPAS~1\\PASTAC~1\\SUBPAS~1\\SUBDAS~1\\bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.txt" " is 164.
Long Statement,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,GetDirectoryNameOnlyFromFilePath,The length of the statement  "            //var ls = filePath.LastIndexOfAny(new[] { Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar/*' Path.VolumeSeparatorChar*/ }); " is 136.
Long Statement,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,GetFullPath,The length of the statement  "                    $"Error {lastWin32Error} getting full path for '{path}': {ZlpIOHelper.CheckAddDotEnd(new Win32Exception(lastWin32Error).Message)}"); " is 132.
Long Statement,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,GetShortPath,The length of the statement  "                    $"Error {lastWin32Error} getting short path for '{path}': {ZlpIOHelper.CheckAddDotEnd(new Win32Exception(lastWin32Error).Message)}"); " is 133.
Long Statement,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,GetLongPath,The length of the statement  "                    $"Error {lastWin32Error} getting long path for '{path}': {ZlpIOHelper.CheckAddDotEnd(new Win32Exception(lastWin32Error).Message)}"); " is 132.
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileOwner,The following statement contains a magic number: if (errorReturn == 0)              {                  const int bufferSize = 64;                  var buffer = new StringBuilder();                  var accounLength = bufferSize;                  var domainLength = bufferSize;                  var account = new StringBuilder(bufferSize);                  var domain = new StringBuilder(bufferSize);                    errorReturn =                      PInvokeHelper.LookupAccountSid(                          null'                          pSid'                          account'                          ref accounLength'                          domain'                          ref domainLength'                          out int _);                    if (errorReturn == 0)                  {                      // http://msdn.microsoft.com/en-us/library/ms681382(VS.85).aspx.                        var lastWin32Error = Marshal.GetLastWin32Error();                      throw new Win32Exception(                          lastWin32Error'                          string.Format(                              Resources.ErrorLookingUpSid'                              lastWin32Error'                              filePath'                              CheckAddDotEnd(new Win32Exception(lastWin32Error).Message)));                  }                  else                  {                      buffer.Append(domain);                      buffer.Append(@"\");                      buffer.Append(account);                      return buffer.ToString();                  }              }              else              {                  // http://msdn.microsoft.com/en-us/library/ms681382(VS.85).aspx.                    var lastWin32Error = Marshal.GetLastWin32Error();                  throw new Win32Exception(                      lastWin32Error'                      string.Format(                          Resources.ErrorGettingSecurityInfo'                          lastWin32Error'                          filePath'                          CheckAddDotEnd(new Win32Exception(lastWin32Error).Message)));              }
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,FileExists,The following statement contains a magic number: return b &&                     wIn32FileAttributeData.dwFileAttributes != -1 &&                     (wIn32FileAttributeData.dwFileAttributes & 16) == 0;
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,DirectoryExists,The following statement contains a magic number: return b &&                     wIn32FileAttributeData.dwFileAttributes != -1 &&                     (wIn32FileAttributeData.dwFileAttributes & 16) != 0;
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileLastWriteTime,The following statement contains a magic number: try              {                  if (result.ToInt64() == PInvokeHelper.ERROR_FILE_NOT_FOUND)                  {                      return DateTime.MinValue;                  }                  else                  {                      var ft = fd.ftLastWriteTime;                        var hft2 = ((long)ft.dwHighDateTime << 32) + ft.dwLowDateTime;                      return getLocalTime(hft2);                  }              }              finally              {                  PInvokeHelper.FindClose(result);              }
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileLastAccessTime,The following statement contains a magic number: try              {                  if (result.ToInt64() == PInvokeHelper.ERROR_FILE_NOT_FOUND)                  {                      return DateTime.MinValue;                  }                  else                  {                      var ft = fd.ftLastAccessTime;                        var hft2 = ((long)ft.dwHighDateTime << 32) + ft.dwLowDateTime;                      return getLocalTime(hft2);                  }              }              finally              {                  PInvokeHelper.FindClose(result);              }
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileCreationTime,The following statement contains a magic number: try              {                  if (result.ToInt64() == PInvokeHelper.ERROR_FILE_NOT_FOUND)                  {                      return DateTime.MinValue;                  }                  else                  {                      var ft = fd.ftCreationTime;                        var hft2 = ((long)ft.dwHighDateTime << 32) + ft.dwLowDateTime;                      return getLocalTime(hft2);                  }              }              finally              {                  PInvokeHelper.FindClose(result);              }
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileLength,The following statement contains a magic number: try              {                  if (result.ToInt64() == PInvokeHelper.ERROR_FILE_NOT_FOUND)                  {                      return 0;                  }                  else                  {                      var sfh = new SafeFileHandle(result' false);                      if (sfh.IsInvalid)                      {                          var num = Marshal.GetLastWin32Error();                          if (num == 2 || num == 3 || num == 21)                          // http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382(v=vs.85).aspx                          {                              return 0;                          }                          else                          {                              return 0;                          }                      }                        // http://zetalongpaths.codeplex.com/discussions/580478#post1351470                      // https://mcdrummerman.wordpress.com/2010/07/13/win32_find_data-and-negative-file-sizes/                        //store nFileSizeLow                      var fDataFSize = (long)fd.nFileSizeLow;                        //store individual file size for later accounting usage                      long fileSize;                        if (fDataFSize < 0 && (long)fd.nFileSizeHigh > 0)                      {                          fileSize = fDataFSize + 0x100000000 + fd.nFileSizeHigh * 0x100000000;                      }                      else                      {                          if ((long)fd.nFileSizeHigh > 0)                          {                              fileSize = fDataFSize + fd.nFileSizeHigh * 0x100000000;                          }                          else if (fDataFSize < 0)                          {                              fileSize = fDataFSize + 0x100000000;                          }                          else                          {                              fileSize = fDataFSize;                          }                      }                        return fileSize;                              /*                      var low = fd.nFileSizeLow;                      var high = fd.nFileSizeHigh;                        //return (high * (0xffffffff + 1)) + low;                      //return (((ulong)high) << 32) + low;                      var l = ((high << 0x20) | (low & 0xffffffffL));                          // Copied from FileInfo.Length via Reflector.NET.                      return (ulong) l;*/                        var low = fd.nFileSizeLow;                      var high = fd.nFileSizeHigh;                        Trace.TraceInformation(@"FindFirstFile returned LOW = {0}' HIGH = {1}."' low' high);                      Trace.Flush();                        try                      {                          return (long)high << 32 | (low & 0xffffffffL);                            //try                          //{                          //var sign = ((long) high << 32 | (low & 0xffffffffL));                            //try                          //{                          //return sign <= 0 ? 0 : unchecked((ulong) sign);                          //}                          //    catch (OverflowException x)                          //    {                          //        var y = new OverflowException(@"Error getting file length (cast)."' x);                            //        y.Data[@"low"] = low;                          //        y.Data[@"high"] = high;                          //        y.Data[@"signed value"] = sign;                            //        throw y;                          //    }                          //}                          //catch (OverflowException x)                          //{                          //    var y = new OverflowException(@"Error getting file length (sign)."' x);                            //    y.Data[@"low"] = low;                          //    y.Data[@"high"] = high;                            //    throw y;                          //}                      }                      catch (OverflowException x)                      {                          Trace.TraceInformation(                              @"Got overflow exception ('{3}') for path '{0}'. LOW = {1}' HIGH = {2}."' filePath' low'                              high' x.Message);                          Trace.Flush();                            throw;                      }                  }              }              finally              {                  PInvokeHelper.FindClose(result);              }
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileLength,The following statement contains a magic number: try              {                  if (result.ToInt64() == PInvokeHelper.ERROR_FILE_NOT_FOUND)                  {                      return 0;                  }                  else                  {                      var sfh = new SafeFileHandle(result' false);                      if (sfh.IsInvalid)                      {                          var num = Marshal.GetLastWin32Error();                          if (num == 2 || num == 3 || num == 21)                          // http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382(v=vs.85).aspx                          {                              return 0;                          }                          else                          {                              return 0;                          }                      }                        // http://zetalongpaths.codeplex.com/discussions/580478#post1351470                      // https://mcdrummerman.wordpress.com/2010/07/13/win32_find_data-and-negative-file-sizes/                        //store nFileSizeLow                      var fDataFSize = (long)fd.nFileSizeLow;                        //store individual file size for later accounting usage                      long fileSize;                        if (fDataFSize < 0 && (long)fd.nFileSizeHigh > 0)                      {                          fileSize = fDataFSize + 0x100000000 + fd.nFileSizeHigh * 0x100000000;                      }                      else                      {                          if ((long)fd.nFileSizeHigh > 0)                          {                              fileSize = fDataFSize + fd.nFileSizeHigh * 0x100000000;                          }                          else if (fDataFSize < 0)                          {                              fileSize = fDataFSize + 0x100000000;                          }                          else                          {                              fileSize = fDataFSize;                          }                      }                        return fileSize;                              /*                      var low = fd.nFileSizeLow;                      var high = fd.nFileSizeHigh;                        //return (high * (0xffffffff + 1)) + low;                      //return (((ulong)high) << 32) + low;                      var l = ((high << 0x20) | (low & 0xffffffffL));                          // Copied from FileInfo.Length via Reflector.NET.                      return (ulong) l;*/                        var low = fd.nFileSizeLow;                      var high = fd.nFileSizeHigh;                        Trace.TraceInformation(@"FindFirstFile returned LOW = {0}' HIGH = {1}."' low' high);                      Trace.Flush();                        try                      {                          return (long)high << 32 | (low & 0xffffffffL);                            //try                          //{                          //var sign = ((long) high << 32 | (low & 0xffffffffL));                            //try                          //{                          //return sign <= 0 ? 0 : unchecked((ulong) sign);                          //}                          //    catch (OverflowException x)                          //    {                          //        var y = new OverflowException(@"Error getting file length (cast)."' x);                            //        y.Data[@"low"] = low;                          //        y.Data[@"high"] = high;                          //        y.Data[@"signed value"] = sign;                            //        throw y;                          //    }                          //}                          //catch (OverflowException x)                          //{                          //    var y = new OverflowException(@"Error getting file length (sign)."' x);                            //    y.Data[@"low"] = low;                          //    y.Data[@"high"] = high;                            //    throw y;                          //}                      }                      catch (OverflowException x)                      {                          Trace.TraceInformation(                              @"Got overflow exception ('{3}') for path '{0}'. LOW = {1}' HIGH = {2}."' filePath' low'                              high' x.Message);                          Trace.Flush();                            throw;                      }                  }              }              finally              {                  PInvokeHelper.FindClose(result);              }
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileLength,The following statement contains a magic number: try              {                  if (result.ToInt64() == PInvokeHelper.ERROR_FILE_NOT_FOUND)                  {                      return 0;                  }                  else                  {                      var sfh = new SafeFileHandle(result' false);                      if (sfh.IsInvalid)                      {                          var num = Marshal.GetLastWin32Error();                          if (num == 2 || num == 3 || num == 21)                          // http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382(v=vs.85).aspx                          {                              return 0;                          }                          else                          {                              return 0;                          }                      }                        // http://zetalongpaths.codeplex.com/discussions/580478#post1351470                      // https://mcdrummerman.wordpress.com/2010/07/13/win32_find_data-and-negative-file-sizes/                        //store nFileSizeLow                      var fDataFSize = (long)fd.nFileSizeLow;                        //store individual file size for later accounting usage                      long fileSize;                        if (fDataFSize < 0 && (long)fd.nFileSizeHigh > 0)                      {                          fileSize = fDataFSize + 0x100000000 + fd.nFileSizeHigh * 0x100000000;                      }                      else                      {                          if ((long)fd.nFileSizeHigh > 0)                          {                              fileSize = fDataFSize + fd.nFileSizeHigh * 0x100000000;                          }                          else if (fDataFSize < 0)                          {                              fileSize = fDataFSize + 0x100000000;                          }                          else                          {                              fileSize = fDataFSize;                          }                      }                        return fileSize;                              /*                      var low = fd.nFileSizeLow;                      var high = fd.nFileSizeHigh;                        //return (high * (0xffffffff + 1)) + low;                      //return (((ulong)high) << 32) + low;                      var l = ((high << 0x20) | (low & 0xffffffffL));                          // Copied from FileInfo.Length via Reflector.NET.                      return (ulong) l;*/                        var low = fd.nFileSizeLow;                      var high = fd.nFileSizeHigh;                        Trace.TraceInformation(@"FindFirstFile returned LOW = {0}' HIGH = {1}."' low' high);                      Trace.Flush();                        try                      {                          return (long)high << 32 | (low & 0xffffffffL);                            //try                          //{                          //var sign = ((long) high << 32 | (low & 0xffffffffL));                            //try                          //{                          //return sign <= 0 ? 0 : unchecked((ulong) sign);                          //}                          //    catch (OverflowException x)                          //    {                          //        var y = new OverflowException(@"Error getting file length (cast)."' x);                            //        y.Data[@"low"] = low;                          //        y.Data[@"high"] = high;                          //        y.Data[@"signed value"] = sign;                            //        throw y;                          //    }                          //}                          //catch (OverflowException x)                          //{                          //    var y = new OverflowException(@"Error getting file length (sign)."' x);                            //    y.Data[@"low"] = low;                          //    y.Data[@"high"] = high;                            //    throw y;                          //}                      }                      catch (OverflowException x)                      {                          Trace.TraceInformation(                              @"Got overflow exception ('{3}') for path '{0}'. LOW = {1}' HIGH = {2}."' filePath' low'                              high' x.Message);                          Trace.Flush();                            throw;                      }                  }              }              finally              {                  PInvokeHelper.FindClose(result);              }
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,GetFileLength,The following statement contains a magic number: try              {                  if (result.ToInt64() == PInvokeHelper.ERROR_FILE_NOT_FOUND)                  {                      return 0;                  }                  else                  {                      var sfh = new SafeFileHandle(result' false);                      if (sfh.IsInvalid)                      {                          var num = Marshal.GetLastWin32Error();                          if (num == 2 || num == 3 || num == 21)                          // http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382(v=vs.85).aspx                          {                              return 0;                          }                          else                          {                              return 0;                          }                      }                        // http://zetalongpaths.codeplex.com/discussions/580478#post1351470                      // https://mcdrummerman.wordpress.com/2010/07/13/win32_find_data-and-negative-file-sizes/                        //store nFileSizeLow                      var fDataFSize = (long)fd.nFileSizeLow;                        //store individual file size for later accounting usage                      long fileSize;                        if (fDataFSize < 0 && (long)fd.nFileSizeHigh > 0)                      {                          fileSize = fDataFSize + 0x100000000 + fd.nFileSizeHigh * 0x100000000;                      }                      else                      {                          if ((long)fd.nFileSizeHigh > 0)                          {                              fileSize = fDataFSize + fd.nFileSizeHigh * 0x100000000;                          }                          else if (fDataFSize < 0)                          {                              fileSize = fDataFSize + 0x100000000;                          }                          else                          {                              fileSize = fDataFSize;                          }                      }                        return fileSize;                              /*                      var low = fd.nFileSizeLow;                      var high = fd.nFileSizeHigh;                        //return (high * (0xffffffff + 1)) + low;                      //return (((ulong)high) << 32) + low;                      var l = ((high << 0x20) | (low & 0xffffffffL));                          // Copied from FileInfo.Length via Reflector.NET.                      return (ulong) l;*/                        var low = fd.nFileSizeLow;                      var high = fd.nFileSizeHigh;                        Trace.TraceInformation(@"FindFirstFile returned LOW = {0}' HIGH = {1}."' low' high);                      Trace.Flush();                        try                      {                          return (long)high << 32 | (low & 0xffffffffL);                            //try                          //{                          //var sign = ((long) high << 32 | (low & 0xffffffffL));                            //try                          //{                          //return sign <= 0 ? 0 : unchecked((ulong) sign);                          //}                          //    catch (OverflowException x)                          //    {                          //        var y = new OverflowException(@"Error getting file length (cast)."' x);                            //        y.Data[@"low"] = low;                          //        y.Data[@"high"] = high;                          //        y.Data[@"signed value"] = sign;                            //        throw y;                          //    }                          //}                          //catch (OverflowException x)                          //{                          //    var y = new OverflowException(@"Error getting file length (sign)."' x);                            //    y.Data[@"low"] = low;                          //    y.Data[@"high"] = high;                            //    throw y;                          //}                      }                      catch (OverflowException x)                      {                          Trace.TraceInformation(                              @"Got overflow exception ('{3}') for path '{0}'. LOW = {1}' HIGH = {2}."' filePath' low'                              high' x.Message);                          Trace.Flush();                            throw;                      }                  }              }              finally              {                  PInvokeHelper.FindClose(result);              }
Magic Number,ZetaLongPaths,ZlpIOHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpIOHelper.cs,ForceAddLongPathPrefix,The following statement contains a magic number: if (string.IsNullOrEmpty(path) || path.StartsWith(@"\\?\"))              {                  return path;              }              else              {                  // http://msdn.microsoft.com/en-us/library/aa365247.aspx                    if (path.StartsWith(@"\\"))                  {                      // UNC.                      return @"\\?\UNC\" + path.Substring(2);                  }                  else                  {                      return @"\\?\" + path;                  }              }
Magic Number,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,GetDirectoryNameOnlyFromFilePath,The following statement contains a magic number: if (filePath.Length > 3)              {                  var s = filePath;                  if (filePath.EndsWith(Path.DirectorySeparatorChar.ToString()) ||                      filePath.EndsWith(Path.AltDirectorySeparatorChar.ToString()))                  {                      s = filePath.Substring(0' filePath.Length - 1);                  }                  dirName = Path.GetFileName(s);              }              else              {                  dirName = filePath; // For rooted paths' like "c:\"              }
Magic Number,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,IsAbsolutePath,The following statement contains a magic number: if (path.Length < 2)              {                  return false;              }              else if (path.Substring(0' 2) == @"\\")              {                  // UNC.                  return IsUncPath(path);              }              else if (path.Substring(1' 1) == @":")              {                  // "C:"                  return IsDriveLetterPath(path);              }              else              {                  return false;              }
Magic Number,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,IsAbsolutePath,The following statement contains a magic number: if (path.Length < 2)              {                  return false;              }              else if (path.Substring(0' 2) == @"\\")              {                  // UNC.                  return IsUncPath(path);              }              else if (path.Substring(1' 1) == @":")              {                  // "C:"                  return IsDriveLetterPath(path);              }              else              {                  return false;              }
Magic Number,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,CombineVirtual,The following statement contains a magic number: if (IsNullOrEmpty(path1))              {                  return path2;              }              else if (IsNullOrEmpty(path2))              {                  return path1;              }              else              {                  // Avoid removing too much "/"' so that "file://" still                  // stays "file://" and does not become "file:/".                  // (The same applies for other protocols.                    path1 = path1.Replace('\\'' '/');                  if (path1[path1.Length - 1] != '/')                  {                      path1 += @"/";                  }                    path2 = path2.Replace('\\'' '/');                    // Do allow "file://" + "/C:/..." to really form "file:///C:/..."'                  // with three slashes.                  if (path2.Length >= 3)                  {                      if (path2[0] == '/' && path2[2] == ':' && Char.IsLetter(path2[1]))                      {                          // Is OK to have a leading slash.                      }                      else                      {                          path2 = path2.TrimStart('/'' '\\');                      }                  }                  else                  {                      path2 = path2.TrimStart('/'' '\\');                  }                    return path1 + path2;              }
Magic Number,ZetaLongPaths,ZlpPathHelper,C:\repos\UweKeim_ZetaLongPaths\Source\RuntimeNetCore\ZlpPathHelper.cs,CombineVirtual,The following statement contains a magic number: if (IsNullOrEmpty(path1))              {                  return path2;              }              else if (IsNullOrEmpty(path2))              {                  return path1;              }              else              {                  // Avoid removing too much "/"' so that "file://" still                  // stays "file://" and does not become "file:/".                  // (The same applies for other protocols.                    path1 = path1.Replace('\\'' '/');                  if (path1[path1.Length - 1] != '/')                  {                      path1 += @"/";                  }                    path2 = path2.Replace('\\'' '/');                    // Do allow "file://" + "/C:/..." to really form "file:///C:/..."'                  // with three slashes.                  if (path2.Length >= 3)                  {                      if (path2[0] == '/' && path2[2] == ':' && Char.IsLetter(path2[1]))                      {                          // Is OK to have a leading slash.                      }                      else                      {                          path2 = path2.TrimStart('/'' '\\');                      }                  }                  else                  {                      path2 = path2.TrimStart('/'' '\\');                  }                    return path1 + path2;              }
