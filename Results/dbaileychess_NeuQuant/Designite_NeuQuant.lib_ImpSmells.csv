Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NeuQuant,NeuQuantFeature,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeature.cs,CheckIsotopicDistribution,Cyclomatic complexity of the method is 12
Complex Method,NeuQuant,NeuQuantFeature,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeature.cs,CheckPeakSpacing,Cyclomatic complexity of the method is 12
Complex Method,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,Quantify,Cyclomatic complexity of the method is 11
Complex Method,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetModifications,Cyclomatic complexity of the method is 8
Complex Method,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPsms,Cyclomatic complexity of the method is 9
Complex Method,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadSpectra,Cyclomatic complexity of the method is 8
Long Parameter List,NeuQuant,NeuQuantFeature,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeature.cs,AssignPeaks,The method has 5 parameters.
Long Parameter List,NeuQuant,NeuQuantFeature,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeature.cs,CheckPeakSpacing,The method has 9 parameters.
Long Parameter List,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,NeuQuantFeatureSet,The method has 6 parameters.
Long Parameter List,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,FindPeaks,The method has 5 parameters.
Long Parameter List,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,SilacFindPeaks,The method has 5 parameters.
Long Parameter List,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,NeuCodeFindPeaks,The method has 5 parameters.
Long Parameter List,NeuQuant,PeptideSpectrumMatch,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\PeptideSpectrumMatch.cs,PeptideSpectrumMatch,The method has 7 parameters.
Long Parameter List,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetSpectra,The method has 5 parameters.
Long Parameter List,NeuQuant.Processing,Processor,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\Processing\T1 Processor Construction.cs,Processor,The method has 11 parameters.
Long Statement,NeuQuant,NeuQuantFeature,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeature.cs,CheckPeakSpacing,The length of the statement  "		numberOfChannelsAssigned += spacingPeaksPassed.OrderBy (k => k).Count (index => AddChannel (channels [channelIndex++]' spectrum.GetPeak (index)' isotope)); " is 155.
Long Statement,NeuQuant,NeuQuantFeature,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeature.cs,ToString,The length of the statement  "	return string.Format ("RT: {0:F4} Total Intensity: {1:F4} Channels Detected: {2} Isotopes Detected: {3} Usuable Isotopes: {4}"' RetentionTime' GetTotalIntensity ()' ChannelsPresent' TotalIsotopesDetected' ValidIsotopes); " is 220.
Long Statement,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,FindPeaks,The length of the statement  "		NeuCodeFindPeaks (peakTolerance' numberOfIsotopes' systematicThError' checkIsotopicDistribuition' isotopicPercentError); " is 120.
Long Statement,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,FindPeaks,The length of the statement  "		throw new ArgumentException ("The peptide contains quantitative channels' but no isotopologues or clusters' should not be here!"); " is 130.
Long Statement,NeuQuant,OmssaPeptideSpectralMatchFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\OmssaPeptideSpectralMatchFile.cs,Open,The length of the statement  "	Dictionary<string' ThermoRawFile> rawFiles = Directory.EnumerateFiles (DataDirectory' "*.raw"' SearchOption.TopDirectoryOnly).ToDictionary (file => Path.GetFileNameWithoutExtension (file)' file => new ThermoRawFile (file)); " is 223.
Long Statement,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPeptides,The length of the statement  "	foreach (PeptideSpectrumMatch psm in GetPsms ().OrderBy (psm => psm.LeucineSequence).ThenBy (psm => psm.MonoisotopicMass)) { " is 124.
Long Statement,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPsms,The length of the statement  "	var selectPSMs = new SQLiteCommand (@"SELECT psms.id AS psmID' m.id AS modID' sequence' charge' isoMZ' matchScore' position' scannumber' filePath' psms.retentionTime" is 165.
Long Statement,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,InsertModification,The length of the statement  "		new SQLiteCommand (@"INSERT INTO mods_to_isotopologue VALUES (" + id + "'" + subId + ")"' _dbConnection).ExecuteNonQuery (); " is 124.
Long Statement,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadSpectra,The length of the statement  "		new SQLiteCommand (@"CREATE INDEX IF NOT EXISTS retentionTime ON spectra (fileID' retentionTime)"' _dbConnection).ExecuteNonQuery (); " is 133.
Long Statement,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadSpectra,The length of the statement  "		new SQLiteCommand (@"CREATE INDEX IF NOT EXISTS spectraNumber ON spectra (scannumber)"' _dbConnection).ExecuteNonQuery (); " is 122.
Long Statement,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,InsertPSM,The length of the statement  "                                    VALUES (" + peptideID + "'(SELECT id FROM modifications WHERE name = '" + mod.Name + "')'" + i + ")"' _dbConnection).ExecuteNonQuery (); " is 136.
Magic Number,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,Quantify,The following statement contains a magic number: foreach (var channel in Peptide.QuantifiableChannels.Values) {  	IRange<int> range;  	if (!_featureBounds.TryGetValue (channel' out range)) {  		quant [channel] = noiseLevel;  		continue;  	}  	List<double> ppmErrors = new List<double> ();  	List<double> intensities = new List<double> ();  	for (int i = range.Minimum; i < range.Maximum; i++) {  		var feature = _features [i];  		foreach (var ppmAndIntensity in feature.GetChannelMassErrorAndItensity (channel)) {  			ppmErrors.Add (ppmAndIntensity.Item1);  			intensities.Add (ppmAndIntensity.Item2);  		}  	}  	if (intensities.Count == 0) {  		quant [channel] = noiseLevel;  		continue;  	}  	double meanPPM = ppmErrors.Average ();  	double stdDevPPM = ppmErrors.StdDev ();  	DoubleRange ppmTolerance = new DoubleRange (meanPPM - stdDevPPM * 2' meanPPM + stdDevPPM * 2);  	double maxIntensity = 0;  	for (int i = 0; i < ppmErrors.Count; i++) {  		double ppm = ppmErrors [i];  		if (!ppmTolerance.Contains (ppm))  			continue;  		double intensity = intensities [i];  		if (intensity > maxIntensity) {  			maxIntensity = intensity;  		}  	}  	double threshold = maxIntensity / (Math.E * Math.E);  	double channelIntensity = 0;  	int avg = 0;  	for (int i = 0; i < ppmErrors.Count; i++) {  		double ppm = ppmErrors [i];  		double intensity = intensities [i];  		if (ppmTolerance.Contains (ppm) && intensity > threshold) {  			channelIntensity += intensity;  			avg++;  		}  	}  	//double maxIntensity = intensities.Max();  	//double threshold = maxIntensity/(2*Math.E);  	//double channelIntensity = intensities.Where(v => v >= threshold).Sum();  	//if (channelIntensity < noiseLevel)  	//{  	//    channelIntensity = noiseLevel;  	//}  	quant [channel] = channelIntensity;  }  
Magic Number,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,Quantify,The following statement contains a magic number: foreach (var channel in Peptide.QuantifiableChannels.Values) {  	IRange<int> range;  	if (!_featureBounds.TryGetValue (channel' out range)) {  		quant [channel] = noiseLevel;  		continue;  	}  	List<double> ppmErrors = new List<double> ();  	List<double> intensities = new List<double> ();  	for (int i = range.Minimum; i < range.Maximum; i++) {  		var feature = _features [i];  		foreach (var ppmAndIntensity in feature.GetChannelMassErrorAndItensity (channel)) {  			ppmErrors.Add (ppmAndIntensity.Item1);  			intensities.Add (ppmAndIntensity.Item2);  		}  	}  	if (intensities.Count == 0) {  		quant [channel] = noiseLevel;  		continue;  	}  	double meanPPM = ppmErrors.Average ();  	double stdDevPPM = ppmErrors.StdDev ();  	DoubleRange ppmTolerance = new DoubleRange (meanPPM - stdDevPPM * 2' meanPPM + stdDevPPM * 2);  	double maxIntensity = 0;  	for (int i = 0; i < ppmErrors.Count; i++) {  		double ppm = ppmErrors [i];  		if (!ppmTolerance.Contains (ppm))  			continue;  		double intensity = intensities [i];  		if (intensity > maxIntensity) {  			maxIntensity = intensity;  		}  	}  	double threshold = maxIntensity / (Math.E * Math.E);  	double channelIntensity = 0;  	int avg = 0;  	for (int i = 0; i < ppmErrors.Count; i++) {  		double ppm = ppmErrors [i];  		double intensity = intensities [i];  		if (ppmTolerance.Contains (ppm) && intensity > threshold) {  			channelIntensity += intensity;  			avg++;  		}  	}  	//double maxIntensity = intensities.Max();  	//double threshold = maxIntensity/(2*Math.E);  	//double channelIntensity = intensities.Where(v => v >= threshold).Sum();  	//if (channelIntensity < noiseLevel)  	//{  	//    channelIntensity = noiseLevel;  	//}  	quant [channel] = channelIntensity;  }  
Magic Number,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,NeuCodeFindPeaks,The following statement contains a magic number: foreach (var miniSpectrum in Spectra) {  	// Create a new feature for this spectrum  	NeuQuantFeature feature = new NeuQuantFeature (this' miniSpectrum);  	// Process each cluster separately' but we can store in the same feature since each cluster contains unique channels  	// We process clusters together in NeuCode  	foreach (var peptidesInCluster in Peptide.Clusters) {  		// The number of isotopologues in this cluster  		int numberOfPeptidesInCluster = peptidesInCluster.Count;  		// Get the expected spacings for all the channels in this cluster' in Th (Lenght should be # of Peptides - 1)  		double[] expectedSpacings = Isotopologue.GetExpectedSpacings (peptidesInCluster.Values' ChargeState);  		// Loop over each isotope  		for (int isotope = 0; isotope < numberOfIsotopes; isotope++) {  			// Storage for the smallest and largest m/z in this cluster for this isotope  			double smallestMZ = peptidesInCluster.Values [0].ToMz (ChargeState' isotope);  			double largestMZ = peptidesInCluster.Values [numberOfPeptidesInCluster - 1].ToMz (ChargeState' isotope);  			// Add a little wiggle room for both the smallest and largest MZ  			double minMz = DoubleRange.FromPPM (smallestMZ' 15).Minimum;  			double maxMZ = DoubleRange.FromPPM (largestMZ' 15).Maximum;  			// Construct the m/z range of interest  			MzRange mzRange = new MzRange (minMz' maxMZ);  			// Extract the m/z range from the mini spectrum into its own' even smaller' tiny spectrum  			// The mini spectrum may contain multiple clusters' so this step further divides that spectrum  			// into a smaller spectrum' a memory optimization  			var tinySpectrum = miniSpectrum.Extract (mzRange' systematicThError);  			// Try to assign the peaks to the correct channels  			feature.AssignPeaks (tinySpectrum' peptidesInCluster.Values' expectedSpacings' isotope);  		}  		// Once all the isotopes peaks are assigned' perform the isotopic distribution check  		feature.CheckIsotopicDistribution (numberOfPeptidesInCluster' isotopicPercentError' checkIsotopicDistribuition);  	}  	// Store the feature  	_features.Add (feature);  }  
Magic Number,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,NeuCodeFindPeaks,The following statement contains a magic number: foreach (var miniSpectrum in Spectra) {  	// Create a new feature for this spectrum  	NeuQuantFeature feature = new NeuQuantFeature (this' miniSpectrum);  	// Process each cluster separately' but we can store in the same feature since each cluster contains unique channels  	// We process clusters together in NeuCode  	foreach (var peptidesInCluster in Peptide.Clusters) {  		// The number of isotopologues in this cluster  		int numberOfPeptidesInCluster = peptidesInCluster.Count;  		// Get the expected spacings for all the channels in this cluster' in Th (Lenght should be # of Peptides - 1)  		double[] expectedSpacings = Isotopologue.GetExpectedSpacings (peptidesInCluster.Values' ChargeState);  		// Loop over each isotope  		for (int isotope = 0; isotope < numberOfIsotopes; isotope++) {  			// Storage for the smallest and largest m/z in this cluster for this isotope  			double smallestMZ = peptidesInCluster.Values [0].ToMz (ChargeState' isotope);  			double largestMZ = peptidesInCluster.Values [numberOfPeptidesInCluster - 1].ToMz (ChargeState' isotope);  			// Add a little wiggle room for both the smallest and largest MZ  			double minMz = DoubleRange.FromPPM (smallestMZ' 15).Minimum;  			double maxMZ = DoubleRange.FromPPM (largestMZ' 15).Maximum;  			// Construct the m/z range of interest  			MzRange mzRange = new MzRange (minMz' maxMZ);  			// Extract the m/z range from the mini spectrum into its own' even smaller' tiny spectrum  			// The mini spectrum may contain multiple clusters' so this step further divides that spectrum  			// into a smaller spectrum' a memory optimization  			var tinySpectrum = miniSpectrum.Extract (mzRange' systematicThError);  			// Try to assign the peaks to the correct channels  			feature.AssignPeaks (tinySpectrum' peptidesInCluster.Values' expectedSpacings' isotope);  		}  		// Once all the isotopes peaks are assigned' perform the isotopic distribution check  		feature.CheckIsotopicDistribution (numberOfPeptidesInCluster' isotopicPercentError' checkIsotopicDistribuition);  	}  	// Store the feature  	_features.Add (feature);  }  
Magic Number,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,NeuCodeFindPeaks,The following statement contains a magic number: foreach (var peptidesInCluster in Peptide.Clusters) {  	// The number of isotopologues in this cluster  	int numberOfPeptidesInCluster = peptidesInCluster.Count;  	// Get the expected spacings for all the channels in this cluster' in Th (Lenght should be # of Peptides - 1)  	double[] expectedSpacings = Isotopologue.GetExpectedSpacings (peptidesInCluster.Values' ChargeState);  	// Loop over each isotope  	for (int isotope = 0; isotope < numberOfIsotopes; isotope++) {  		// Storage for the smallest and largest m/z in this cluster for this isotope  		double smallestMZ = peptidesInCluster.Values [0].ToMz (ChargeState' isotope);  		double largestMZ = peptidesInCluster.Values [numberOfPeptidesInCluster - 1].ToMz (ChargeState' isotope);  		// Add a little wiggle room for both the smallest and largest MZ  		double minMz = DoubleRange.FromPPM (smallestMZ' 15).Minimum;  		double maxMZ = DoubleRange.FromPPM (largestMZ' 15).Maximum;  		// Construct the m/z range of interest  		MzRange mzRange = new MzRange (minMz' maxMZ);  		// Extract the m/z range from the mini spectrum into its own' even smaller' tiny spectrum  		// The mini spectrum may contain multiple clusters' so this step further divides that spectrum  		// into a smaller spectrum' a memory optimization  		var tinySpectrum = miniSpectrum.Extract (mzRange' systematicThError);  		// Try to assign the peaks to the correct channels  		feature.AssignPeaks (tinySpectrum' peptidesInCluster.Values' expectedSpacings' isotope);  	}  	// Once all the isotopes peaks are assigned' perform the isotopic distribution check  	feature.CheckIsotopicDistribution (numberOfPeptidesInCluster' isotopicPercentError' checkIsotopicDistribuition);  }  
Magic Number,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,NeuCodeFindPeaks,The following statement contains a magic number: foreach (var peptidesInCluster in Peptide.Clusters) {  	// The number of isotopologues in this cluster  	int numberOfPeptidesInCluster = peptidesInCluster.Count;  	// Get the expected spacings for all the channels in this cluster' in Th (Lenght should be # of Peptides - 1)  	double[] expectedSpacings = Isotopologue.GetExpectedSpacings (peptidesInCluster.Values' ChargeState);  	// Loop over each isotope  	for (int isotope = 0; isotope < numberOfIsotopes; isotope++) {  		// Storage for the smallest and largest m/z in this cluster for this isotope  		double smallestMZ = peptidesInCluster.Values [0].ToMz (ChargeState' isotope);  		double largestMZ = peptidesInCluster.Values [numberOfPeptidesInCluster - 1].ToMz (ChargeState' isotope);  		// Add a little wiggle room for both the smallest and largest MZ  		double minMz = DoubleRange.FromPPM (smallestMZ' 15).Minimum;  		double maxMZ = DoubleRange.FromPPM (largestMZ' 15).Maximum;  		// Construct the m/z range of interest  		MzRange mzRange = new MzRange (minMz' maxMZ);  		// Extract the m/z range from the mini spectrum into its own' even smaller' tiny spectrum  		// The mini spectrum may contain multiple clusters' so this step further divides that spectrum  		// into a smaller spectrum' a memory optimization  		var tinySpectrum = miniSpectrum.Extract (mzRange' systematicThError);  		// Try to assign the peaks to the correct channels  		feature.AssignPeaks (tinySpectrum' peptidesInCluster.Values' expectedSpacings' isotope);  	}  	// Once all the isotopes peaks are assigned' perform the isotopic distribution check  	feature.CheckIsotopicDistribution (numberOfPeptidesInCluster' isotopicPercentError' checkIsotopicDistribuition);  }  
Magic Number,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,NeuCodeFindPeaks,The following statement contains a magic number: for (int isotope = 0; isotope < numberOfIsotopes; isotope++) {  	// Storage for the smallest and largest m/z in this cluster for this isotope  	double smallestMZ = peptidesInCluster.Values [0].ToMz (ChargeState' isotope);  	double largestMZ = peptidesInCluster.Values [numberOfPeptidesInCluster - 1].ToMz (ChargeState' isotope);  	// Add a little wiggle room for both the smallest and largest MZ  	double minMz = DoubleRange.FromPPM (smallestMZ' 15).Minimum;  	double maxMZ = DoubleRange.FromPPM (largestMZ' 15).Maximum;  	// Construct the m/z range of interest  	MzRange mzRange = new MzRange (minMz' maxMZ);  	// Extract the m/z range from the mini spectrum into its own' even smaller' tiny spectrum  	// The mini spectrum may contain multiple clusters' so this step further divides that spectrum  	// into a smaller spectrum' a memory optimization  	var tinySpectrum = miniSpectrum.Extract (mzRange' systematicThError);  	// Try to assign the peaks to the correct channels  	feature.AssignPeaks (tinySpectrum' peptidesInCluster.Values' expectedSpacings' isotope);  }  
Magic Number,NeuQuant,NeuQuantFeatureSet,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFeatureSet.cs,NeuCodeFindPeaks,The following statement contains a magic number: for (int isotope = 0; isotope < numberOfIsotopes; isotope++) {  	// Storage for the smallest and largest m/z in this cluster for this isotope  	double smallestMZ = peptidesInCluster.Values [0].ToMz (ChargeState' isotope);  	double largestMZ = peptidesInCluster.Values [numberOfPeptidesInCluster - 1].ToMz (ChargeState' isotope);  	// Add a little wiggle room for both the smallest and largest MZ  	double minMz = DoubleRange.FromPPM (smallestMZ' 15).Minimum;  	double maxMZ = DoubleRange.FromPPM (largestMZ' 15).Maximum;  	// Construct the m/z range of interest  	MzRange mzRange = new MzRange (minMz' maxMZ);  	// Extract the m/z range from the mini spectrum into its own' even smaller' tiny spectrum  	// The mini spectrum may contain multiple clusters' so this step further divides that spectrum  	// into a smaller spectrum' a memory optimization  	var tinySpectrum = miniSpectrum.Extract (mzRange' systematicThError);  	// Try to assign the peaks to the correct channels  	feature.AssignPeaks (tinySpectrum' peptidesInCluster.Values' expectedSpacings' isotope);  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadPSMFile,The following statement contains a magic number: using (var transcation = _dbConnection.BeginTransaction ()) {  	int count = 0;  	foreach (PeptideSpectrumMatch psm in psmFile.ReadPSMs ()) {  		InsertPSM (psm);  		count++;  		if (count % 100 == 0) {  			OnProgressUpdate (this' (double)count / psmFile.PSMCount);  		}  	}  	transcation.Commit ();  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadPSMFile,The following statement contains a magic number: foreach (PeptideSpectrumMatch psm in psmFile.ReadPSMs ()) {  	InsertPSM (psm);  	count++;  	if (count % 100 == 0) {  		OnProgressUpdate (this' (double)count / psmFile.PSMCount);  	}  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadPSMFile,The following statement contains a magic number: if (count % 100 == 0) {  	OnProgressUpdate (this' (double)count / psmFile.PSMCount);  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadSpectra,The following statement contains a magic number: using (rawFile) {  	OnMessageUpdate (this' "Reading spectra from " + rawFile.FilePath + "...");  	rawFile.Open ();  	using (var transcation = _dbConnection.BeginTransaction ()) {  		long fileID = InsertFile (rawFile.FilePath' "Thermo Raw File");  		// Loop over every spectra  		for (int i = rawFile.FirstSpectrumNumber; i <= rawFile.LastSpectrumNumber; i++) {  			// Insert it if it is an MS1 or a PSM id  			int msnOrder = rawFile.GetMsnOrder (i);  			if (msnOrder == 1 || includeSpectrumNumber.Contains (i)) {  				NeuQuantSpectrum spectrum = NeuQuantSpectrum.Load (rawFile' i);  				InsertSpectrum (spectrum' fileID' compressSpectra);  			}  			if (i % 1000 == 0) {  				OnProgressUpdate (this' (double)i / rawFile.LastSpectrumNumber);  			}  		}  		transcation.Commit ();  	}  	// Create Indices for faster lookup             	new SQLiteCommand (@"CREATE INDEX IF NOT EXISTS retentionTime ON spectra (fileID' retentionTime)"' _dbConnection).ExecuteNonQuery ();  	new SQLiteCommand (@"CREATE INDEX IF NOT EXISTS spectraNumber ON spectra (scannumber)"' _dbConnection).ExecuteNonQuery ();  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadSpectra,The following statement contains a magic number: using (var transcation = _dbConnection.BeginTransaction ()) {  	long fileID = InsertFile (rawFile.FilePath' "Thermo Raw File");  	// Loop over every spectra  	for (int i = rawFile.FirstSpectrumNumber; i <= rawFile.LastSpectrumNumber; i++) {  		// Insert it if it is an MS1 or a PSM id  		int msnOrder = rawFile.GetMsnOrder (i);  		if (msnOrder == 1 || includeSpectrumNumber.Contains (i)) {  			NeuQuantSpectrum spectrum = NeuQuantSpectrum.Load (rawFile' i);  			InsertSpectrum (spectrum' fileID' compressSpectra);  		}  		if (i % 1000 == 0) {  			OnProgressUpdate (this' (double)i / rawFile.LastSpectrumNumber);  		}  	}  	transcation.Commit ();  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadSpectra,The following statement contains a magic number: for (int i = rawFile.FirstSpectrumNumber; i <= rawFile.LastSpectrumNumber; i++) {  	// Insert it if it is an MS1 or a PSM id  	int msnOrder = rawFile.GetMsnOrder (i);  	if (msnOrder == 1 || includeSpectrumNumber.Contains (i)) {  		NeuQuantSpectrum spectrum = NeuQuantSpectrum.Load (rawFile' i);  		InsertSpectrum (spectrum' fileID' compressSpectra);  	}  	if (i % 1000 == 0) {  		OnProgressUpdate (this' (double)i / rawFile.LastSpectrumNumber);  	}  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,LoadSpectra,The following statement contains a magic number: if (i % 1000 == 0) {  	OnProgressUpdate (this' (double)i / rawFile.LastSpectrumNumber);  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPrecursorSpectrum,The following statement contains a magic number: if (direction == 0) {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime - 1);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime + 1);  }  else if (direction > 0) {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime + 0.000000001);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime + 1);  }  else {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime - 1);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime - 0.0000000001);  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPrecursorSpectrum,The following statement contains a magic number: if (direction == 0) {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime - 1);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime + 1);  }  else if (direction > 0) {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime + 0.000000001);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime + 1);  }  else {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime - 1);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime - 0.0000000001);  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPrecursorSpectrum,The following statement contains a magic number: if (direction > 0) {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime + 0.000000001);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime + 1);  }  else {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime - 1);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime - 0.0000000001);  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPrecursorSpectrum,The following statement contains a magic number: if (direction > 0) {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime + 0.000000001);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime + 1);  }  else {  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime - 1);  	_selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime - 0.0000000001);  }  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPrecursorSpectrum,The following statement contains a magic number: _selectPrecursorSpectrum.Parameters.AddWithValue ("@minRT"' retentionTime + 0.000000001);  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,GetPrecursorSpectrum,The following statement contains a magic number: _selectPrecursorSpectrum.Parameters.AddWithValue ("@maxRT"' retentionTime - 0.0000000001);  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,TryGetLastProcessor,The following statement contains a magic number: processor = new Processor (this' 3' 0.75' 0.75' 480000' checkIsotopicDistribution: true);  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,TryGetLastProcessor,The following statement contains a magic number: processor = new Processor (this' 3' 0.75' 0.75' 480000' checkIsotopicDistribution: true);  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,TryGetLastProcessor,The following statement contains a magic number: processor = new Processor (this' 3' 0.75' 0.75' 480000' checkIsotopicDistribution: true);  
Magic Number,NeuQuant.IO,NeuQuantFile,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\NeuQuantFile.cs,TryGetLastProcessor,The following statement contains a magic number: processor = new Processor (this' 3' 0.75' 0.75' 480000' checkIsotopicDistribution: true);  
Magic Number,NeuQuant.Processing,Processor,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\Processing\T1 Processor Construction.cs,Processor,The following statement contains a magic number: MS2Tolerance = new Tolerance (ToleranceType.PPM' 10);  
Magic Number,NeuQuant.Processing,Processor,C:\repos\dbaileychess_NeuQuant\NeuQuant.lib\Processing\T1 Processor Construction.cs,Processor,The following statement contains a magic number: MinimumResolution = resolution / 2 + 1;  
