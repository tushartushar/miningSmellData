Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,MoveVerticalLine,Cyclomatic complexity of the method is 8
Complex Method,NeuQuant,QuantiativeLabelControl,C:\repos\dbaileychess_NeuQuant\NeuQuant\QuantiativeLabelControl.cs,SetState,Cyclomatic complexity of the method is 14
Complex Method,NeuQuant,QuantiativeLabelManagerForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\QuantiativeLabelManagerForm.cs,SetDefaultQuantitationLabels,Cyclomatic complexity of the method is 23
Long Parameter List,NeuQuant,QuantiativeLabelControl,C:\repos\dbaileychess_NeuQuant\NeuQuant\QuantiativeLabelControl.cs,QuantiativeLabelControl,The method has 5 parameters.
Long Statement,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The length of the statement  "		BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color)); " is 144.
Long Statement,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotXIC,The length of the statement  "		//    //LineItem item = control.GraphPane.AddCurve(isotopologue + " m/z " + range.ToString("F4")' pointPairList' color); " is 120.
Long Statement,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotXIC,The length of the statement  "		//var text = new TextObj(psm.MatchScore.ToString("G3")' x' 0' CoordType.XScaleYChartFraction' AlignH.Center' AlignV.Top); " is 121.
Long Statement,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,ToggleCurveVisibility,The length of the statement  "	if (!graphControl.GraphPane.Legend.FindPoint (e.Location' graphControl.GraphPane' graphControl.GraphPane.CalcScaleFactor ()' out legend)) " is 137.
Long Statement,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,RetentionTimePlotClick,The length of the statement  "	if (retentionTime < graphControl.GraphPane.XAxis.Scale.Min || retentionTime > graphControl.GraphPane.XAxis.Scale.Max || y < graphControl.GraphPane.YAxis.Scale.Min || y > graphControl.GraphPane.YAxis.Scale.Max) { " is 211.
Long Statement,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,MoveVerticalLine,The length of the statement  "	if (x < graphControl.GraphPane.XAxis.Scale.Min || x > graphControl.GraphPane.XAxis.Scale.Max || y < graphControl.GraphPane.YAxis.Scale.Min || y > graphControl.GraphPane.YAxis.Scale.Max) { " is 187.
Long Statement,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,Create,The length of the statement  "		OmssaPeptideSpectralMatchFile psmFile = new OmssaPeptideSpectralMatchFile (@"E:\Desktop\NeuQuant\2plex NeuCode Charger\19February2014_duplex_480K_1to1_ITMS_CID_psms.csv"); " is 171.
Long Statement,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,Create,The length of the statement  "	}).ContinueWith (t2 => LoadNeuQuantFile (@"E:\Desktop\NeuQuant\2plex NeuCode Charger\19February2014_duplex_480K_1to1.sqlite")' TaskScheduler.FromCurrentSynchronizationContext ()); " is 179.
Long Statement,NeuQuant,QuantiativeLabelManagerForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\QuantiativeLabelManagerForm.cs,SetDefaultQuantitationLabels,The length of the statement  "		AddNewQuantitativeLabel (control' new QuantiativeLabelControl ("Light"' "+2"' "Two Amino Acids"' Reagents.K100' Reagents.R200)); " is 128.
Long Statement,NeuQuant,QuantiativeLabelManagerForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\QuantiativeLabelManagerForm.cs,SetDefaultQuantitationLabels,The length of the statement  "		AddNewQuantitativeLabel (control' new QuantiativeLabelControl ("Light"' "+2"' "Two Amino Acids"' Reagents.K002' Reagents.R002)); " is 128.
Complex Conditional,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,RetentionTimePlotClick,The conditional expression  "retentionTime < graphControl.GraphPane.XAxis.Scale.Min || retentionTime > graphControl.GraphPane.XAxis.Scale.Max || y < graphControl.GraphPane.YAxis.Scale.Min || y > graphControl.GraphPane.YAxis.Scale.Max"  is complex.
Complex Conditional,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,MoveVerticalLine,The conditional expression  "x < graphControl.GraphPane.XAxis.Scale.Min || x > graphControl.GraphPane.XAxis.Scale.Max || y < graphControl.GraphPane.YAxis.Scale.Min || y > graphControl.GraphPane.YAxis.Scale.Max"  is complex.
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,OnLoad,The following statement contains a magic number: _msSpectrumForm.GraphControl.GraphPane.XAxis.Scale.Max = 2000;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,OnLoad,The following statement contains a magic number: _xicForm.GraphControl.GraphPane.XAxis.Scale.Max = 2000;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: for (int isotope = 0; isotope < 1; isotope++) {  	var color = colors [isotope];  	double isotopeMass = isotope * Constants.C13C12Difference;  	double[] spacings = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  		double previousMZ = -1;  		double spacing = 0;  		foreach (var isotopologue in isotopologues) {  			double mass = isotopologue.MonoisotopicMass + isotopeMass;  			double mz = Mass.MzFromMass (mass' charge);  			var range = new MzRange (mz' Tolerance.FromPPM (15));  			var peak = spectrum.GetClosestPeak (range);  			if (peak == null)  				continue;  			if (previousMZ < 0) {  				previousMZ = peak.MZ;  			}  			else {  				spacing = peak.MZ - previousMZ;  				previousMZ = peak.MZ;  			}  		}  		times [i] = spectrum.RetentionTime;  		spacings [i] = spacing * 1000;  		i++;  	}  	var pointPairList = new PointPairList (times' spacings);  	LineItem item = control.GraphPane.AddCurve ("Spacing for isotope " + isotope' pointPairList' color' SymbolType.Circle);  	item.Line.IsVisible = false;  	item.Symbol.Size = 10f;  	item.Symbol.Border.Width = 2f;  	var pointPairList2 = new PointPairList (new[] {  		minRT'  		maxRT  	}' new[] {  		expectedSpacing [0] * 1000'  		expectedSpacing [0] * 1000  	});  	LineObj expectedLine = new LineObj (color' 0' expectedSpacing [0] * 1000' 1' expectedSpacing [0] * 1000);  	expectedLine.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	expectedLine.Line.Width = 1.5F;  	expectedLine.Line.Style = DashStyle.Dot;  	control.GraphPane.GraphObjList.Add (expectedLine);  	BoxObj boxObj = new BoxObj (0' expectedSpacing [0] * 1000 * 1.15' 1' expectedSpacing [0] * 1000 * 0.4' Color.Empty' Color.FromArgb (50' color));  	boxObj.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	boxObj.ZOrder = ZOrder.F_BehindGrid;  	boxObj.IsClippedToChartRect = true;  	control.GraphPane.GraphObjList.Add (boxObj);  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  	double previousMZ = -1;  	double spacing = 0;  	foreach (var isotopologue in isotopologues) {  		double mass = isotopologue.MonoisotopicMass + isotopeMass;  		double mz = Mass.MzFromMass (mass' charge);  		var range = new MzRange (mz' Tolerance.FromPPM (15));  		var peak = spectrum.GetClosestPeak (range);  		if (peak == null)  			continue;  		if (previousMZ < 0) {  			previousMZ = peak.MZ;  		}  		else {  			spacing = peak.MZ - previousMZ;  			previousMZ = peak.MZ;  		}  	}  	times [i] = spectrum.RetentionTime;  	spacings [i] = spacing * 1000;  	i++;  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: foreach (var spectrum in featureSet.Select (fs => fs.Spectrum)) {  	double previousMZ = -1;  	double spacing = 0;  	foreach (var isotopologue in isotopologues) {  		double mass = isotopologue.MonoisotopicMass + isotopeMass;  		double mz = Mass.MzFromMass (mass' charge);  		var range = new MzRange (mz' Tolerance.FromPPM (15));  		var peak = spectrum.GetClosestPeak (range);  		if (peak == null)  			continue;  		if (previousMZ < 0) {  			previousMZ = peak.MZ;  		}  		else {  			spacing = peak.MZ - previousMZ;  			previousMZ = peak.MZ;  		}  	}  	times [i] = spectrum.RetentionTime;  	spacings [i] = spacing * 1000;  	i++;  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: foreach (var isotopologue in isotopologues) {  	double mass = isotopologue.MonoisotopicMass + isotopeMass;  	double mz = Mass.MzFromMass (mass' charge);  	var range = new MzRange (mz' Tolerance.FromPPM (15));  	var peak = spectrum.GetClosestPeak (range);  	if (peak == null)  		continue;  	if (previousMZ < 0) {  		previousMZ = peak.MZ;  	}  	else {  		spacing = peak.MZ - previousMZ;  		previousMZ = peak.MZ;  	}  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: spacings [i] = spacing * 1000;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpacing,The following statement contains a magic number: control.GraphPane.YAxis.Scale.Min = -2;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotXIC,The following statement contains a magic number: foreach (var isotopologue in isotopologues) {  	double totalTIC = 0;  	Color color = colors [colorI++];  	double[] totalIntensities = new double[featureSet.NumberOfFeatures];  	double[] times = new double[featureSet.NumberOfFeatures];  	int i = 0;  	foreach (var feature in featureSet) {  		double featureIntensity = feature.GetChannelIntensity (isotopologue' false);  		totalIntensities [i] = featureIntensity;  		totalTIC += featureIntensity;  		times [i] = feature.RetentionTime;  		i++;  	}  	DoubleRange rtBounds = featureSet.GetBounds (isotopologue);  	BoxObj boxObj = new BoxObj (rtBounds.Minimum' 0' rtBounds.Width' 1' Color.Empty' Color.FromArgb (50' color));  	//boxObj.Border.Style = DashStyle.Dot;  	boxObj.Location.CoordinateFrame = CoordType.XScaleYChartFraction;  	boxObj.IsClippedToChartRect = true;  	boxObj.ZOrder = ZOrder.D_BehindAxis;  	control.GraphPane.GraphObjList.Add (boxObj);  	//for (int isotope = 0; isotope < 3; isotope++)  	//{  	//    double mz = isotopologue.ToMz(charge' isotope);  	//    var range = new MzRange(mz' Tolerance.FromPPM(10));  	//    var chrom = spectra.GetClosetsPeakChromatogram(range).Smooth(SmoothingType.BoxCar' 3);  	//    double[] intensities = chrom.GetIntensities();  	//    times = chrom.GetTimes();  	//    totalTIC += chrom.TotalIonCurrent;  	//    var pointPairList = new PointPairList(times' intensities);  	//    for (int i = 0; i < chrom.Count; i++)  	//        totalIntensities[i] += intensities[i];  	//    //LineItem item = control.GraphPane.AddCurve(isotopologue + " m/z " + range.ToString("F4")' pointPairList' color);  	//    //item.Line.DashOn = 2.5F * isotope;  	//    //item.Line.DashOff = 2.5F * isotope;  	//    //item.Line.Style = DashStyle.Custom;  	//    //item.Symbol.IsVisible = false;  	//    //item.Line.IsOptimizedDraw = true;  	//    //item.Line.Width = 1.5f;  	//}  	//var chrom2 = new Chromatogram(times' totalIntensities);  	//var apex = chrom2.FindNearestApex(bestRT' 2);  	//TextObj apexObj = new TextObj(apex.Time.ToString("F2")' apex.Time' apex.Intensity);  	//control.GraphPane.GraphObjList.Add(apexObj);  	//DoubleRange width = chrom2.GetPeakWidth(apex.Time' 0.1' 2);  	//BoxObj boxObj = new BoxObj(width.Minimum' 0' width.Width' 1' Color.Empty' Color.FromArgb(25' color));  	////boxObj.Border.Style = DashStyle.Dot;  	//boxObj.Location.CoordinateFrame = CoordType.XScaleYChartFraction;  	//boxObj.IsClippedToChartRect = true;  	//boxObj.ZOrder = ZOrder.D_BehindAxis;  	//control.GraphPane.GraphObjList.Add(boxObj);  	var pointPairList2 = new PointPairList (times' totalIntensities);  	LineItem item2 = control.GraphPane.AddCurve (isotopologue.ToString ()' pointPairList2' color' SymbolType.Circle);  	item2.Line.Width = 2.5f;  	control.GraphPane.Title.Text += isotopologue + " " + totalTIC.ToString ("G5") + " ";  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpectrum,The following statement contains a magic number: control.GraphPane.XAxis.Scale.Min = pointPairList [0].X - 10;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpectrum,The following statement contains a magic number: control.GraphPane.XAxis.Scale.Max = pointPairList [pointPairList.Count - 1].X + 10;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpectrum,The following statement contains a magic number: control.GraphPane.XAxis.Scale.Min = pointPairList [0].X - 10;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotSpectrum,The following statement contains a magic number: control.GraphPane.XAxis.Scale.Max = pointPairList [pointPairList.Count - 1].X + 10;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotPrecursorSpectrum,The following statement contains a magic number: item.Line.GradientFill.RangeMax = 2;  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotPrecursorSpectrum,The following statement contains a magic number: foreach (var isotopologue in isotopologues) {  	c++;  	string message = string.Join ("'"' isotopologue.GetUniqueModifications<Modification> ());  	for (int i = 0; i < 3; i++) {  		double mz = isotopologue.ToMz (psm.Charge' i);  		PointPair bestPoint = null;  		double bestSpacing = double.MaxValue;  		foreach (var pointpair in pointPairList) {  			double spacing = Math.Abs (pointpair.X - mz);  			if (spacing < bestSpacing) {  				bestSpacing = spacing;  				bestPoint = pointpair;  			}  		}  		double ppm = Tolerance.GetTolerance (mz + bestSpacing' mz' ToleranceType.PPM);  		if (ppm < 10) {  			bestPoint.ColorValue = c;  		}  	}  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotPrecursorSpectrum,The following statement contains a magic number: foreach (var isotopologue in isotopologues) {  	c++;  	string message = string.Join ("'"' isotopologue.GetUniqueModifications<Modification> ());  	for (int i = 0; i < 3; i++) {  		double mz = isotopologue.ToMz (psm.Charge' i);  		PointPair bestPoint = null;  		double bestSpacing = double.MaxValue;  		foreach (var pointpair in pointPairList) {  			double spacing = Math.Abs (pointpair.X - mz);  			if (spacing < bestSpacing) {  				bestSpacing = spacing;  				bestPoint = pointpair;  			}  		}  		double ppm = Tolerance.GetTolerance (mz + bestSpacing' mz' ToleranceType.PPM);  		if (ppm < 10) {  			bestPoint.ColorValue = c;  		}  	}  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotPrecursorSpectrum,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	double mz = isotopologue.ToMz (psm.Charge' i);  	PointPair bestPoint = null;  	double bestSpacing = double.MaxValue;  	foreach (var pointpair in pointPairList) {  		double spacing = Math.Abs (pointpair.X - mz);  		if (spacing < bestSpacing) {  			bestSpacing = spacing;  			bestPoint = pointpair;  		}  	}  	double ppm = Tolerance.GetTolerance (mz + bestSpacing' mz' ToleranceType.PPM);  	if (ppm < 10) {  		bestPoint.ColorValue = c;  	}  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotPrecursorSpectrum,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	double mz = isotopologue.ToMz (psm.Charge' i);  	PointPair bestPoint = null;  	double bestSpacing = double.MaxValue;  	foreach (var pointpair in pointPairList) {  		double spacing = Math.Abs (pointpair.X - mz);  		if (spacing < bestSpacing) {  			bestSpacing = spacing;  			bestPoint = pointpair;  		}  	}  	double ppm = Tolerance.GetTolerance (mz + bestSpacing' mz' ToleranceType.PPM);  	if (ppm < 10) {  		bestPoint.ColorValue = c;  	}  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PlotPrecursorSpectrum,The following statement contains a magic number: if (ppm < 10) {  	bestPoint.ColorValue = c;  }  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PeptideRowEnter,The following statement contains a magic number: featureSet.FindPeaks (Tolerance.FromPPM (10)' 3);  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PeptideRowEnter,The following statement contains a magic number: featureSet.FindPeaks (Tolerance.FromPPM (10)' 3);  
Magic Number,NeuQuant,NeuQuantForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\NeuQuantForm.cs,PeptideRowEnter,The following statement contains a magic number: featureSet.FindElutionProfile (3);  
Magic Number,NeuQuant,QuantiativeLabelManagerForm,C:\repos\dbaileychess_NeuQuant\NeuQuant\QuantiativeLabelManagerForm.cs,QuantiativeLabelManagerForm,The following statement contains a magic number: checkedListBox1.ColumnWidth = 50;  
