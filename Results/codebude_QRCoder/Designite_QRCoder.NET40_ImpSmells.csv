Implementation smell,Namespace,Class,File,Method,Description
Long Method,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The method has 115 lines of code.
Long Method,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The method has 118 lines of code.
Complex Method,QRCoder,ContactData,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,QRCoder,Reference,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Reference,Cyclomatic complexity of the method is 8
Complex Method,QRCoder,Contact,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Contact,Cyclomatic complexity of the method is 10
Complex Method,QRCoder,Girocode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Girocode,Cyclomatic complexity of the method is 10
Complex Method,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,Cyclomatic complexity of the method is 30
Complex Method,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,QRCoder,OneTimePassword,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ProcessCommonFields,Cyclomatic complexity of the method is 11
Complex Method,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,Cyclomatic complexity of the method is 14
Complex Method,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,MaskCode,Cyclomatic complexity of the method is 13
Complex Method,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDataWords,Cyclomatic complexity of the method is 8
Complex Method,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,Cyclomatic complexity of the method is 8
Complex Method,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,Cyclomatic complexity of the method is 17
Long Parameter List,QRCoder,Base64QRCode,C:\repos\codebude_QRCoder\QRCoder\Base64QRCode.cs,GetGraphic,The method has 5 parameters. Parameters: pixelsPerModule' darkColorHtmlHex' lightColorHtmlHex' drawQuietZones' imgType
Long Parameter List,QRCoder,Base64QRCode,C:\repos\codebude_QRCoder\QRCoder\Base64QRCode.cs,GetGraphic,The method has 5 parameters. Parameters: pixelsPerModule' darkColor' lightColor' drawQuietZones' imgType
Long Parameter List,QRCoder,Base64QRCode,C:\repos\codebude_QRCoder\QRCoder\Base64QRCode.cs,GetGraphic,The method has 8 parameters. Parameters: pixelsPerModule' darkColor' lightColor' icon' iconSizePercent' iconBorderWidth' drawQuietZones' imgType
Long Parameter List,QRCoder,ContactData,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ContactData,The method has 16 parameters. Parameters: outputType' firstname' lastname' nickname' phone' mobilePhone' workPhone' email' birthday' website' street' houseNumber' city' zipCode' country' note
Long Parameter List,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,SwissQrCode,The method has 10 parameters. Parameters: iban' currency' creditor' reference' debitor' amount' requestedDateOfPayment' ultimateCreditor' alternativeProcedure1' alternativeProcedure2
Long Parameter List,QRCoder,Contact,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Contact,The method has 6 parameters. Parameters: name' zipCode' city' country' street' houseNumber
Long Parameter List,QRCoder,Girocode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Girocode,The method has 10 parameters. Parameters: iban' bic' name' amount' remittanceInformation' typeOfRemittance' purposeOfCreditTransfer' messageToGirocodeUser' version' encoding
Long Parameter List,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The method has 7 parameters. Parameters: authority' name' account' bnc' iban' bic' reason
Long Parameter List,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The method has 13 parameters. Parameters: authority' name' account' bnc' amount' periodicTimeunit' periodicTimeunitRotation' periodicFirstExecutionDate' periodicLastExecutionDate' reason' postingKey' currency' executionDate
Long Parameter List,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The method has 16 parameters. Parameters: authority' name' iban' bic' amount' periodicTimeunit' periodicTimeunitRotation' periodicFirstExecutionDate' periodicLastExecutionDate' creditorId' mandateId' dateOfSignature' reason' sepaReference' currency' executionDate
Long Parameter List,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The method has 20 parameters. Parameters: authority' name' account' bnc' iban' bic' amount' periodicTimeunit' periodicTimeunitRotation' periodicFirstExecutionDate' periodicLastExecutionDate' creditorId' mandateId' dateOfSignature' reason' postingKey' sepaReference' currency' executionDate' internalMode
Long Parameter List,QRCoder,CalendarEvent,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,CalendarEvent,The method has 7 parameters. Parameters: subject' description' location' start' end' allDayEvent' encoding
Long Parameter List,QRCoder,ShadowSocksConfig,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ShadowSocksConfig,The method has 5 parameters. Parameters: hostname' port' password' method' tag
Long Parameter List,QRCoder,MoneroTransaction,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,MoneroTransaction,The method has 5 parameters. Parameters: address' txAmount' txPaymentId' recipientName' txDescription
Long Parameter List,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The method has 7 parameters. Parameters: pixelsPerModule' darkColor' lightColor' icon' iconSizePercent' iconBorderWidth' drawQuietZones
Long Parameter List,QRCoder,CodewordBlock,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CodewordBlock,The method has 7 parameters. Parameters: groupNumber' blockNumber' bitString' codeWords' eccWords' codeWordsInt' eccWordsInt
Long Parameter List,QRCoder,ECCInfo,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ECCInfo,The method has 8 parameters. Parameters: version' errorCorrectionLevel' totalDataCodewords' eccPerBlock' blocksInGroup1' codewordsInGroup1' blocksInGroup2' codewordsInGroup2
Long Statement,QRCoder,Base64QRCode,C:\repos\codebude_QRCoder\QRCoder\Base64QRCode.cs,GetGraphic,The length of the statement  "            return this.GetGraphic(pixelsPerModule' ColorTranslator.FromHtml(darkColorHtmlHex)' ColorTranslator.FromHtml(lightColorHtmlHex)' drawQuietZones' imgType); " is 154.
Long Statement,QRCoder,Base64QRCode,C:\repos\codebude_QRCoder\QRCoder\Base64QRCode.cs,GetGraphic,The length of the statement  "            Bitmap bmp = qr.GetGraphic(pixelsPerModule' darkColor' lightColor' icon' iconSizePercent' iconBorderWidth' drawQuietZones); " is 123.
Long Statement,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,GetGraphic,The length of the statement  "            bmp.AddRange(new byte[] { 0x42' 0x4D' 0x4C' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x1A' 0x00' 0x00' 0x00' 0x0C' 0x00' 0x00' 0x00 }); " is 136.
Long Statement,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,HexColorToByteArray,The length of the statement  "                byteColor[2-i] = byte.Parse(colorString.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);             " is 157.
Long Statement,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,isHexStyle,The length of the statement  "            return (System.Text.RegularExpressions.Regex.IsMatch(inp' @"\A\b[0-9a-fA-F]+\b\Z") || System.Text.RegularExpressions.Regex.IsMatch(inp' @"\A\b(0[xX])?[0-9a-fA-F]+\b\Z")); " is 170.
Long Statement,QRCoder,Mail,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                            $"mailto:{this.mailReceiver}?subject={System.Uri.EscapeDataString(this.subject)}&body={System.Uri.EscapeDataString(this.message)}"; " is 131.
Long Statement,QRCoder,ContactData,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                    payload += $"ADR:''{(!string.IsNullOrEmpty(street) ? street+" " : "")}{(!string.IsNullOrEmpty(houseNumber)?houseNumber:"")}'{(!string.IsNullOrEmpty(city) ? city : "")}''{(!string.IsNullOrEmpty(zipCode) ? zipCode : "")}'{(!string.IsNullOrEmpty(country) ? country : "")}\r\n"; " is 274.
Long Statement,QRCoder,ContactData,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                    payload += $"N:{(!string.IsNullOrEmpty(lastname) ? lastname : "")};{(!string.IsNullOrEmpty(firstname) ? firstname : "")};;;\r\n"; " is 129.
Long Statement,QRCoder,ContactData,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                    payload += $"FN:{(!string.IsNullOrEmpty(firstname) ? firstname + " " : "")}{(!string.IsNullOrEmpty(lastname) ? lastname : "")}\r\n"; " is 132.
Long Statement,QRCoder,ContactData,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                    payload += $";;{(!string.IsNullOrEmpty(street) ? street + " " : "")}{(!string.IsNullOrEmpty(houseNumber) ? houseNumber : "")};{(!string.IsNullOrEmpty(city) ? city : "")};;{(!string.IsNullOrEmpty(zipCode) ? zipCode : "")};{(!string.IsNullOrEmpty(country) ? country : "")}\r\n"; " is 276.
Long Statement,QRCoder,BitcoinAddress,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                  new KeyValuePair<string' string>(nameof(amount)' amount.HasValue ? amount.Value.ToString("#.########"' CultureInfo.InvariantCulture) : null) " is 140.
Long Statement,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                SwissQrCodePayload += (requestedDateOfPayment != null ?  ((DateTime)requestedDateOfPayment).ToString("yyyy-MM-dd") : string.Empty) + br; //ReqdExctnDt " is 150.
Long Statement,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                SwissQrCodePayload += (!string.IsNullOrEmpty(reference.ReferenceText) ? reference.ReferenceText : string.Empty) + br; //Ref " is 123.
Long Statement,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                SwissQrCodePayload += (!string.IsNullOrEmpty(reference.UnstructureMessage) ? reference.UnstructureMessage : string.Empty) + br; //Ustrd " is 135.
Long Statement,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                    if (authority.Equals(AuthorityType.periodicsinglepayment) || authority.Equals(AuthorityType.singledirectdebit) || authority.Equals(AuthorityType.singlepayment)) " is 160.
Long Statement,QRCoder,CalendarEvent,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                    vEvent = $@"BEGIN:VCALENDAR{Environment.NewLine}VERSION:2.0{Environment.NewLine}{vEvent}{Environment.NewLine}END:VCALENDAR"; " is 124.
Long Statement,QRCoder,MoneroTransaction,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                var moneroUri = $"monero://{address}{(!string.IsNullOrEmpty(txPaymentId) || !string.IsNullOrEmpty(recipientName) || !string.IsNullOrEmpty(txDescription) || txAmount != null ? "?" : string.Empty)}"; " is 197.
Long Statement,QRCoder,MoneroTransaction,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                moneroUri += (!string.IsNullOrEmpty(txPaymentId) ? $"tx_payment_id={Uri.EscapeDataString(txPaymentId)}&" : string.Empty); " is 121.
Long Statement,QRCoder,MoneroTransaction,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                moneroUri += (!string.IsNullOrEmpty(recipientName) ? $"recipient_name={Uri.EscapeDataString(recipientName)}&" : string.Empty); " is 126.
Long Statement,QRCoder,MoneroTransaction,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The length of the statement  "                moneroUri += (!string.IsNullOrEmpty(txDescription) ? $"tx_description={Uri.EscapeDataString(txDescription)}" : string.Empty); " is 125.
Long Statement,QRCoder,PngByteQRCode,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,DrawScanlines,The length of the statement  "            var bytesPerScanline = (matrixSize * pixelsPerModule + 7) / 8 + 1; // A monochrome scanline is one byte for filter type then one bit per pixel. " is 143.
Long Statement,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The length of the statement  "                    var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3]; " is 134.
Long Statement,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The length of the statement  "            return this.GetGraphic(pixelsPerModule' ColorTranslator.FromHtml(darkColorHtmlHex)' ColorTranslator.FromHtml(lightColorHtmlHex)' drawQuietZones); " is 145.
Long Statement,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The length of the statement  "                    var module = this.QrCodeData.ModuleMatrix[(y + pixelsPerModule)/pixelsPerModule - 1][(x + pixelsPerModule)/pixelsPerModule - 1]; " is 128.
Long Statement,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The length of the statement  "                var centerDest = new RectangleF(iconX - iconBorderWidth' iconY - iconBorderWidth' iconDestWidth + iconBorderWidth * 2' iconDestHeight + iconBorderWidth * 2); " is 157.
Long Statement,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The length of the statement  "                    var module = this.QrCodeData.ModuleMatrix[(y + pixelsPerModule)/pixelsPerModule - 1][(x + pixelsPerModule)/pixelsPerModule - 1]; " is 128.
Long Statement,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The length of the statement  "            roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y + rect.Height - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 0' 90); " is 143.
Long Statement,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The length of the statement  "            ModulePlacer.PlaceAlignmentPatterns(ref qr' this.alignmentPatternTable.Where(x => x.Version == version).Select(x => x.PatternPositions).First()' ref blockedModules); " is 165.
Long Statement,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CalculateECCWords,The length of the statement  "            for (var i = 0; (leadTermSource.PolyItems.Count > 0 && leadTermSource.PolyItems[leadTermSource.PolyItems.Count - 1].Exponent > 0); i++) " is 135.
Long Statement,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CalculateECCWords,The length of the statement  "                    leadTermSource.PolyItems.Add(new PolynomItem(0' leadTermSource.PolyItems[leadTermSource.PolyItems.Count - 1].Exponent - 1)); " is 124.
Long Statement,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CalculateECCWords,The length of the statement  "                    var resPoly = this.MultiplyGeneratorPolynomByLeadterm(generatorPolynom' this.ConvertToAlphaNotation(leadTermSource).PolyItems[0]' i); " is 133.
Long Statement,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ConvertToDecNotation,The length of the statement  "                newPoly.PolyItems.Add(new PolynomItem(this.GetIntValFromAlphaExp(poly.PolyItems[i].Coefficient)' poly.PolyItems[i].Exponent)); " is 126.
Long Statement,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryByte,The length of the statement  "                codeBytes = utf8BOM ? Encoding.UTF8.GetPreamble().Concat(Encoding.UTF8.GetBytes(plainText)).ToArray() : Encoding.UTF8.GetBytes(plainText); " is 138.
Long Statement,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,MultiplyAlphaPolynoms,The length of the statement  "            var exponentsToGlue = resultPolynom.PolyItems.GroupBy(x => x.Exponent).Where(x => x.Count() > 1).Select(x => x.First().Exponent); " is 129.
Long Statement,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlphanumEncDict,The length of the statement  "            //alphanumEncTable.ToList().Select((x' i) => new { Chr = x' Index = i }).ToList().ForEach(x => this.alphanumEncDict.Add(x.Chr' x.Index)); " is 137.
Long Statement,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The length of the statement  "                var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } }; " is 369.
Long Statement,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The length of the statement  "            var viewBox = new Size(pixelsPerModule*this.QrCodeData.ModuleMatrix.Count' pixelsPerModule * this.QrCodeData.ModuleMatrix.Count); " is 129.
Long Statement,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The length of the statement  "            var viewBox = new Size(pixelsPerModule * this.QrCodeData.ModuleMatrix.Count' pixelsPerModule * this.QrCodeData.ModuleMatrix.Count); " is 131.
Long Statement,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The length of the statement  "            var viewBox = new Size(pixelsPerModule * this.QrCodeData.ModuleMatrix.Count' pixelsPerModule * this.QrCodeData.ModuleMatrix.Count); " is 131.
Long Statement,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The length of the statement  "            return this.GetGraphic(viewBox' ColorTranslator.ToHtml(Color.FromArgb(darkColor.ToArgb()))' ColorTranslator.ToHtml(Color.FromArgb(lightColor.ToArgb()))' drawQuietZones); " is 169.
Long Statement,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The length of the statement  "            var svgFile = new StringBuilder(@"<svg version=""1.1"" baseProfile=""full"" shape-rendering=""crispEdges"" width=""" +viewBox.Width+ @""" height="""+viewBox.Height+ @""" xmlns=""http://www.w3.org/2000/svg"">"); " is 210.
Long Statement,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The length of the statement  "            svgFile.AppendLine($@"<rect x=""0"" y=""0"" width=""{CleanSvgVal(qrSize)}"" height=""{CleanSvgVal(qrSize)}"" fill=""" + lightColorHex + @""" />"); " is 146.
Long Statement,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The length of the statement  "                        svgFile.AppendLine($@"<rect x=""{CleanSvgVal(x)}"" y=""{CleanSvgVal(y)}"" width=""{CleanSvgVal(unitsPerModule)}"" height=""{CleanSvgVal(unitsPerModule)}"" fill=""{darkColorHex}"" />"); " is 184.
Long Statement,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,GetGraphic,The length of the statement  "                    var module = this.QrCodeData.ModuleMatrix[(y + pixelsPerModule) / pixelsPerModule - 1][(x + pixelsPerModule) / pixelsPerModule - 1]; " is 132.
Complex Conditional,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The conditional expression  "(!oldFilled && !newFilled) || (oldFilled && newFilled)"  is complex.
Complex Conditional,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The conditional expression  "authority.Equals(AuthorityType.periodicsinglepayment) || authority.Equals(AuthorityType.singledirectdebit) || authority.Equals(AuthorityType.singlepayment) || authority.Equals(AuthorityType.contact) || (authority.Equals(AuthorityType.contact_v2) && oldWayFilled)"  is complex.
Complex Conditional,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The conditional expression  "authority.Equals(AuthorityType.periodicsinglepaymentsepa) || authority.Equals(AuthorityType.singledirectdebitsepa) || authority.Equals(AuthorityType.singlepaymentsepa) || (authority.Equals(AuthorityType.contact_v2) && newWayFilled)"  is complex.
Complex Conditional,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The conditional expression  "!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5)))"  is complex.
Complex Conditional,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The conditional expression  "y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2)"  is complex.
Complex Conditional,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The conditional expression  "(qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10])"  is complex.
Complex Conditional,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The conditional expression  "(qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y])"  is complex.
Magic Number,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,GetGraphic,The following statement contains a magic number: for (var x = sideLength-1; x >= 0; x = x - pixelsPerModule)              {                  for (int pm = 0; pm < pixelsPerModule; pm++)                  {                      for (var y = 0; y < sideLength; y = y + pixelsPerModule)                      {                          var module =                              this.QrCodeData.ModuleMatrix[(x + pixelsPerModule)/pixelsPerModule - 1][(y + pixelsPerModule)/pixelsPerModule - 1];                          for (int i = 0; i < pixelsPerModule; i++)                          {                              bmp.AddRange(module ? moduleDark : moduleLight);                          }                      }                      if (sideLength%4 != 0)                      {                          for (int i = 0; i < sideLength%4; i++)                          {                              bmp.Add(0x00);                          }                      }                  }              }
Magic Number,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,GetGraphic,The following statement contains a magic number: for (var x = sideLength-1; x >= 0; x = x - pixelsPerModule)              {                  for (int pm = 0; pm < pixelsPerModule; pm++)                  {                      for (var y = 0; y < sideLength; y = y + pixelsPerModule)                      {                          var module =                              this.QrCodeData.ModuleMatrix[(x + pixelsPerModule)/pixelsPerModule - 1][(y + pixelsPerModule)/pixelsPerModule - 1];                          for (int i = 0; i < pixelsPerModule; i++)                          {                              bmp.AddRange(module ? moduleDark : moduleLight);                          }                      }                      if (sideLength%4 != 0)                      {                          for (int i = 0; i < sideLength%4; i++)                          {                              bmp.Add(0x00);                          }                      }                  }              }
Magic Number,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,HexColorToByteArray,The following statement contains a magic number: byte[] byteColor = new byte[colorString.Length / 2];
Magic Number,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,HexColorToByteArray,The following statement contains a magic number: for (int i = 0; i < byteColor.Length; i++)                  byteColor[2-i] = byte.Parse(colorString.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,HexColorToByteArray,The following statement contains a magic number: for (int i = 0; i < byteColor.Length; i++)                  byteColor[2-i] = byte.Parse(colorString.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,HexColorToByteArray,The following statement contains a magic number: for (int i = 0; i < byteColor.Length; i++)                  byteColor[2-i] = byte.Parse(colorString.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber' System.Globalization.CultureInfo.InvariantCulture);
Magic Number,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,IntTo4Byte,The following statement contains a magic number: byte[] bytes = new byte[2];
Magic Number,QRCoder,BitmapByteQRCode,C:\repos\codebude_QRCoder\QRCoder\BitmapByteQRCode.cs,IntTo4Byte,The following statement contains a magic number: unchecked              {                  bytes[1] = (byte)(inp >> 8);                  bytes[0] = (byte)(inp);              }
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: if (string.IsNullOrEmpty(digits) || digits.Length < 2)                  return false;
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: int[] mods = new int[] { 0' 9' 4' 6' 8' 2' 7' 1' 3' 5 };
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: int[] mods = new int[] { 0' 9' 4' 6' 8' 2' 7' 1' 3' 5 };
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: int[] mods = new int[] { 0' 9' 4' 6' 8' 2' 7' 1' 3' 5 };
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: int[] mods = new int[] { 0' 9' 4' 6' 8' 2' 7' 1' 3' 5 };
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: int[] mods = new int[] { 0' 9' 4' 6' 8' 2' 7' 1' 3' 5 };
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: int[] mods = new int[] { 0' 9' 4' 6' 8' 2' 7' 1' 3' 5 };
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: int[] mods = new int[] { 0' 9' 4' 6' 8' 2' 7' 1' 3' 5 };
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: int[] mods = new int[] { 0' 9' 4' 6' 8' 2' 7' 1' 3' 5 };
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: for (int i = 0; i < digits.Length - 1; i++)              {                  var num = Convert.ToInt32(digits[i]) - 48;                  remainder = mods[(num + remainder) % 10];              }
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: for (int i = 0; i < digits.Length - 1; i++)              {                  var num = Convert.ToInt32(digits[i]) - 48;                  remainder = mods[(num + remainder) % 10];              }
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: var checksum = (10 - remainder) % 10;
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: var checksum = (10 - remainder) % 10;
Magic Number,QRCoder,PayloadGenerator,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ChecksumMod10,The following statement contains a magic number: return checksum == Convert.ToInt32(digits[digits.Length - 1]) - 48;
Magic Number,QRCoder,ContactData,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The following statement contains a magic number: if (outputType.Equals(ContactOutputType.MeCard))                  {                      payload += "MECARD+\r\n";                      if (!string.IsNullOrEmpty(firstname) && !string.IsNullOrEmpty(lastname))                          payload += $"N:{lastname}' {firstname}\r\n";                      else if (!string.IsNullOrEmpty(firstname) || !string.IsNullOrEmpty(lastname))                          payload += $"N:{firstname}{lastname}\r\n";                      if (!string.IsNullOrEmpty(phone))                          payload += $"TEL:{phone}\r\n";                      if (!string.IsNullOrEmpty(mobilePhone))                          payload += $"TEL:{mobilePhone}\r\n";                      if (!string.IsNullOrEmpty(workPhone))                          payload += $"TEL:{workPhone}\r\n";                      if (!string.IsNullOrEmpty(email))                          payload += $"EMAIL:{email}\r\n";                      if (!string.IsNullOrEmpty(note))                          payload += $"NOTE:{note}\r\n";                      if (birthday != null)                          payload += $"BDAY:{((DateTime)birthday).ToString("yyyyMMdd")}\r\n";                                          payload += $"ADR:''{(!string.IsNullOrEmpty(street) ? street+" " : "")}{(!string.IsNullOrEmpty(houseNumber)?houseNumber:"")}'{(!string.IsNullOrEmpty(city) ? city : "")}''{(!string.IsNullOrEmpty(zipCode) ? zipCode : "")}'{(!string.IsNullOrEmpty(country) ? country : "")}\r\n";                      if (!string.IsNullOrEmpty(phone))                          payload += $"URL:{website}\r\n";                      if (!string.IsNullOrEmpty(nickname))                          payload += $"NICKNAME:{nickname}\r\n";                      payload = payload.Trim(new char[] { '\r'' '\n' });                  }                  else                  {                      var version = outputType.ToString().Substring(5);                      if (version.Length > 1)                          version = version.Insert(1' ".");                      else                          version += ".0";                        payload += "BEGIN:VCARD\r\n";                      payload += $"VERSION:{version}\r\n";                        payload += $"N:{(!string.IsNullOrEmpty(lastname) ? lastname : "")};{(!string.IsNullOrEmpty(firstname) ? firstname : "")};;;\r\n";                      payload += $"FN:{(!string.IsNullOrEmpty(firstname) ? firstname + " " : "")}{(!string.IsNullOrEmpty(lastname) ? lastname : "")}\r\n";                                            if (!string.IsNullOrEmpty(phone))                      {                          payload += $"TEL;";                          if (outputType.Equals(ContactOutputType.VCard21))                              payload += $"HOME;VOICE:{phone}";                          else if (outputType.Equals(ContactOutputType.VCard3))                              payload += $"TYPE=HOME'VOICE:{phone}";                          else                              payload += $"TYPE=home'voice;VALUE=uri:tel:{phone}";                          payload += "\r\n";                      }                        if (!string.IsNullOrEmpty(mobilePhone))                      {                          payload += $"TEL;";                          if (outputType.Equals(ContactOutputType.VCard21))                              payload += $"HOME;CELL:{mobilePhone}";                          else if (outputType.Equals(ContactOutputType.VCard3))                              payload += $"TYPE=HOME'CELL:{mobilePhone}";                          else                              payload += $"TYPE=home'cell;VALUE=uri:tel:{mobilePhone}";                          payload += "\r\n";                      }                        if (!string.IsNullOrEmpty(workPhone))                      {                          payload += $"TEL;";                          if (outputType.Equals(ContactOutputType.VCard21))                              payload += $"WORK;VOICE:{workPhone}";                          else if (outputType.Equals(ContactOutputType.VCard3))                              payload += $"TYPE=WORK'VOICE:{workPhone}";                          else                              payload += $"TYPE=work'voice;VALUE=uri:tel:{workPhone}";                          payload += "\r\n";                      }                                          payload += "ADR;";                      if (outputType.Equals(ContactOutputType.VCard21))                          payload += "HOME;PREF:";                      else if (outputType.Equals(ContactOutputType.VCard3))                          payload += "TYPE=HOME'PREF:";                      else                          payload += "TYPE=home'pref:";                      payload += $";;{(!string.IsNullOrEmpty(street) ? street + " " : "")}{(!string.IsNullOrEmpty(houseNumber) ? houseNumber : "")};{(!string.IsNullOrEmpty(city) ? city : "")};;{(!string.IsNullOrEmpty(zipCode) ? zipCode : "")};{(!string.IsNullOrEmpty(country) ? country : "")}\r\n";                                            if (birthday != null)                          payload += $"BDAY:{((DateTime)birthday).ToString("yyyyMMdd")}\r\n";                      if (!string.IsNullOrEmpty(phone))                          payload += $"URL:{website}\r\n";                      if (!string.IsNullOrEmpty(email))                          payload += $"EMAIL:{email}\r\n";                      if (!string.IsNullOrEmpty(note))                          payload += $"NOTE:{note}\r\n";                      if (!outputType.Equals(ContactOutputType.VCard21) && !string.IsNullOrEmpty(nickname))                          payload += $"NICKNAME:{nickname}\r\n";                                            payload += "END:VCARD";                  }
Magic Number,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,SwissQrCode,The following statement contains a magic number: if (amount != null && amount.ToString().Length > 12)                      throw new SwissQrCodeException("Amount (including decimals) must be shorter than 13 places.");
Magic Number,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,SwissQrCode,The following statement contains a magic number: if (alternativeProcedure1 != null && alternativeProcedure1.Length > 100)                      throw new SwissQrCodeException("Alternative procedure information block 1 must be shorter than 101 chars.");
Magic Number,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,SwissQrCode,The following statement contains a magic number: if (alternativeProcedure2 != null && alternativeProcedure2.Length > 100)                      throw new SwissQrCodeException("Alternative procedure information block 2 must be shorter than 101 chars.");
Magic Number,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The following statement contains a magic number: if (ultimateCreditor != null)                      SwissQrCodePayload += ultimateCreditor.ToString();                  else                      SwissQrCodePayload += string.Concat(Enumerable.Repeat(br' 6).ToArray());
Magic Number,QRCoder,SwissQrCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ToString,The following statement contains a magic number: if (debitor != null)                      SwissQrCodePayload += debitor.ToString();                  else                      SwissQrCodePayload += string.Concat(Enumerable.Repeat(br' 6).ToArray());
Magic Number,QRCoder,Reference,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Reference,The following statement contains a magic number: if (referenceTextType.Equals(ReferenceTextType.QrReference) && reference != null && (reference.Length > 27))                          throw new SwissQrCodeReferenceException("QR-references have to be shorter than 28 chars.");
Magic Number,QRCoder,Reference,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Reference,The following statement contains a magic number: if (referenceTextType.Equals(ReferenceTextType.CreditorReferenceIso11649) && reference != null && (reference.Length > 25))                          throw new SwissQrCodeReferenceException("Creditor references (ISO 11649) have to be shorter than 26 chars.");
Magic Number,QRCoder,Reference,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Reference,The following statement contains a magic number: if (unstructuredMessage != null && (unstructuredMessage.Length > 140))                          throw new SwissQrCodeReferenceException("The unstructured message must be shorter than 141 chars.");
Magic Number,QRCoder,Contact,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Contact,The following statement contains a magic number: if (name.Length > 70)                          throw new SwissQrCodeContactException("Name must be shorter than 71 chars.");
Magic Number,QRCoder,Contact,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Contact,The following statement contains a magic number: if (!string.IsNullOrEmpty(street) && (street.Length > 70 || !Regex.IsMatch(street' @"^[^0-9]+$")))                          throw new SwissQrCodeContactException("Street must be shorter than 71 chars and must not contain a house number.");
Magic Number,QRCoder,Contact,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Contact,The following statement contains a magic number: if (!string.IsNullOrEmpty(houseNumber) && houseNumber.Length > 16)                          throw new SwissQrCodeContactException("House number must be shorter than 17 chars.");
Magic Number,QRCoder,Contact,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Contact,The following statement contains a magic number: if (zipCode.Length > 16 || !Regex.IsMatch(zipCode' @"^[0-9]+$"))                          throw new SwissQrCodeContactException("Zip code must be shorter than 17 chars. Only digits are allowed.");
Magic Number,QRCoder,Contact,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Contact,The following statement contains a magic number: if (city.Length > 35)                          throw new SwissQrCodeContactException("City name must be shorter than 36 chars.");
Magic Number,QRCoder,Girocode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Girocode,The following statement contains a magic number: if (name.Length > 70)                      throw new GirocodeException("(Payee-)Name must be shorter than 71 chars.");
Magic Number,QRCoder,Girocode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Girocode,The following statement contains a magic number: if (amount.ToString().Replace("'"' ".").Contains(".") && amount.ToString().Replace("'"'".").Split('.')[1].TrimEnd('0').Length > 2)                      throw new GirocodeException("Amount must have less than 3 digits after decimal point.");
Magic Number,QRCoder,Girocode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Girocode,The following statement contains a magic number: if (purposeOfCreditTransfer.Length > 4)                      throw new GirocodeException("Purpose of credit transfer can only have 4 chars at maximum.");
Magic Number,QRCoder,Girocode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Girocode,The following statement contains a magic number: if (typeOfRemittance.Equals(TypeOfRemittance.Unstructured) && remittanceInformation.Length > 140)                      throw new GirocodeException("Unstructured reference texts have to shorter than 141 chars.");
Magic Number,QRCoder,Girocode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Girocode,The following statement contains a magic number: if (typeOfRemittance.Equals(TypeOfRemittance.Structured) && remittanceInformation.Length > 35)                      throw new GirocodeException("Structured reference texts have to shorter than 36 chars.");
Magic Number,QRCoder,Girocode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,Girocode,The following statement contains a magic number: if (messageToGirocodeUser.Length > 70)                      throw new GirocodeException("Message to the Girocode-User reader texts have to shorter than 71 chars.");
Magic Number,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The following statement contains a magic number: if (internalMode == 1)                  {                      if (!authority.Equals(AuthorityType.contact) && !authority.Equals(AuthorityType.contact_v2))                          throw new BezahlCodeException("The constructor without an amount may only ne used with authority types 'contact' and 'contact_v2'.");                      if (authority.Equals(AuthorityType.contact) && (string.IsNullOrEmpty(account) || string.IsNullOrEmpty(bnc)))                          throw new BezahlCodeException("When using authority type 'contact' the parameters 'account' and 'bnc' must be set.");                        if (!authority.Equals(AuthorityType.contact_v2))                      {                          var oldFilled = (!string.IsNullOrEmpty(account) && !string.IsNullOrEmpty(bnc));                          var newFilled = (!string.IsNullOrEmpty(iban) && !string.IsNullOrEmpty(bic));                          if ((!oldFilled && !newFilled) || (oldFilled && newFilled))                              throw new BezahlCodeException("When using authority type 'contact_v2' either the parameters 'account' and 'bnc' or the parameters 'iban' and 'bic' must be set. Leave the other parameter pair empty.");                      }                  }                  else if (internalMode == 2)                  {                      if (!authority.Equals(AuthorityType.periodicsinglepayment) && !authority.Equals(AuthorityType.singledirectdebit) && !authority.Equals(AuthorityType.singlepayment))                          throw new BezahlCodeException("The constructor with 'account' and 'bnc' may only be used with 'non SEPA' authority types. Either choose another authority type or switch constructor.");                      if (authority.Equals(AuthorityType.periodicsinglepayment) && (string.IsNullOrEmpty(periodicTimeunit) || periodicTimeunitRotation == 0))                          throw new BezahlCodeException("When using 'periodicsinglepayment' as authority type' the parameters 'periodicTimeunit' and 'periodicTimeunitRotation' must be set.");                    }                  else if (internalMode == 3)                  {                      if (!authority.Equals(AuthorityType.periodicsinglepaymentsepa) && !authority.Equals(AuthorityType.singledirectdebitsepa) && !authority.Equals(AuthorityType.singlepaymentsepa))                          throw new BezahlCodeException("The constructor with 'iban' and 'bic' may only be used with 'SEPA' authority types. Either choose another authority type or switch constructor.");                      if (authority.Equals(AuthorityType.periodicsinglepaymentsepa) && (string.IsNullOrEmpty(periodicTimeunit) || periodicTimeunitRotation == 0))                          throw new BezahlCodeException("When using 'periodicsinglepaymentsepa' as authority type' the parameters 'periodicTimeunit' and 'periodicTimeunitRotation' must be set.");                  }
Magic Number,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The following statement contains a magic number: if (internalMode == 1)                  {                      if (!authority.Equals(AuthorityType.contact) && !authority.Equals(AuthorityType.contact_v2))                          throw new BezahlCodeException("The constructor without an amount may only ne used with authority types 'contact' and 'contact_v2'.");                      if (authority.Equals(AuthorityType.contact) && (string.IsNullOrEmpty(account) || string.IsNullOrEmpty(bnc)))                          throw new BezahlCodeException("When using authority type 'contact' the parameters 'account' and 'bnc' must be set.");                        if (!authority.Equals(AuthorityType.contact_v2))                      {                          var oldFilled = (!string.IsNullOrEmpty(account) && !string.IsNullOrEmpty(bnc));                          var newFilled = (!string.IsNullOrEmpty(iban) && !string.IsNullOrEmpty(bic));                          if ((!oldFilled && !newFilled) || (oldFilled && newFilled))                              throw new BezahlCodeException("When using authority type 'contact_v2' either the parameters 'account' and 'bnc' or the parameters 'iban' and 'bic' must be set. Leave the other parameter pair empty.");                      }                  }                  else if (internalMode == 2)                  {                      if (!authority.Equals(AuthorityType.periodicsinglepayment) && !authority.Equals(AuthorityType.singledirectdebit) && !authority.Equals(AuthorityType.singlepayment))                          throw new BezahlCodeException("The constructor with 'account' and 'bnc' may only be used with 'non SEPA' authority types. Either choose another authority type or switch constructor.");                      if (authority.Equals(AuthorityType.periodicsinglepayment) && (string.IsNullOrEmpty(periodicTimeunit) || periodicTimeunitRotation == 0))                          throw new BezahlCodeException("When using 'periodicsinglepayment' as authority type' the parameters 'periodicTimeunit' and 'periodicTimeunitRotation' must be set.");                    }                  else if (internalMode == 3)                  {                      if (!authority.Equals(AuthorityType.periodicsinglepaymentsepa) && !authority.Equals(AuthorityType.singledirectdebitsepa) && !authority.Equals(AuthorityType.singlepaymentsepa))                          throw new BezahlCodeException("The constructor with 'iban' and 'bic' may only be used with 'SEPA' authority types. Either choose another authority type or switch constructor.");                      if (authority.Equals(AuthorityType.periodicsinglepaymentsepa) && (string.IsNullOrEmpty(periodicTimeunit) || periodicTimeunitRotation == 0))                          throw new BezahlCodeException("When using 'periodicsinglepaymentsepa' as authority type' the parameters 'periodicTimeunit' and 'periodicTimeunitRotation' must be set.");                  }
Magic Number,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The following statement contains a magic number: if (name.Length > 70)                      throw new BezahlCodeException("(Payee-)Name must be shorter than 71 chars.");
Magic Number,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The following statement contains a magic number: if (reason.Length > 27)                      throw new BezahlCodeException("Reasons texts have to be shorter than 28 chars.");
Magic Number,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The following statement contains a magic number: if (authority.Equals(AuthorityType.periodicsinglepayment) || authority.Equals(AuthorityType.singledirectdebit) || authority.Equals(AuthorityType.singlepayment) || authority.Equals(AuthorityType.contact) || (authority.Equals(AuthorityType.contact_v2) && oldWayFilled))                  {                      if (!Regex.IsMatch(account.Replace(" "' "")' @"^[0-9]{1'9}$"))                          throw new BezahlCodeException("The account entered isn't valid.");                      this.account = account.Replace(" "' "").ToUpper();                      if(!Regex.IsMatch(bnc.Replace(" "' "")' @"^[0-9]{1'9}$"))                          throw new BezahlCodeException("The bnc entered isn't valid.");                      this.bnc = bnc.Replace(" "' "").ToUpper();                        if (!authority.Equals(AuthorityType.contact) && !authority.Equals(AuthorityType.contact_v2))                      {                          if (postingKey < 0 || postingKey >= 100)                              throw new BezahlCodeException("PostingKey must be within 0 and 99.");                          this.postingKey = postingKey;                      }                                    }
Magic Number,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The following statement contains a magic number: if (authority.Equals(AuthorityType.periodicsinglepaymentsepa) || authority.Equals(AuthorityType.singledirectdebitsepa) || authority.Equals(AuthorityType.singlepaymentsepa) || (authority.Equals(AuthorityType.contact_v2) && newWayFilled))                  {                      if (!IsValidIban(iban))                          throw new BezahlCodeException("The IBAN entered isn't valid.");                      this.iban = iban.Replace(" "' "").ToUpper();                      if (!IsValidBic(bic))                          throw new BezahlCodeException("The BIC entered isn't valid.");                      this.bic = bic.Replace(" "' "").ToUpper();                        if (!authority.Equals(AuthorityType.contact_v2))                      {                          if (sepaReference.Length > 35)                              throw new BezahlCodeException("SEPA reference texts have to be shorter than 36 chars.");                          this.sepaReference = sepaReference;                            if (!string.IsNullOrEmpty(creditorId) && !Regex.IsMatch(creditorId.Replace(" "' "")' @"^[a-zA-Z]{2'2}[0-9]{2'2}([A-Za-z0-9]|[\+|\?|/|\-|:|\(|\)|\.|'|']){3'3}([A-Za-z0-9]|[\+|\?|/|\-|:|\(|\)|\.|'|']){1'28}$"))                              throw new BezahlCodeException("The creditorId entered isn't valid.");                          this.creditorId = creditorId;                          if (!string.IsNullOrEmpty(mandateId) && !Regex.IsMatch(mandateId.Replace(" "' "")' @"^([A-Za-z0-9]|[\+|\?|/|\-|:|\(|\)|\.|'|']){1'35}$"))                              throw new BezahlCodeException("The mandateId entered isn't valid.");                          this.mandateId = mandateId;                          if (dateOfSignature != null)                              this.dateOfSignature = (DateTime)dateOfSignature;                      }                  }
Magic Number,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The following statement contains a magic number: if (!authority.Equals(AuthorityType.contact) && !authority.Equals(AuthorityType.contact_v2))                  {                      if (amount.ToString().Replace("'"' ".").Contains(".") && amount.ToString().Replace("'"' ".").Split('.')[1].TrimEnd('0').Length > 2)                          throw new BezahlCodeException("Amount must have less than 3 digits after decimal point.");                      if (amount < 0.01m || amount > 999999999.99m)                          throw new BezahlCodeException("Amount has to at least 0.01 and must be smaller or equal to 999999999.99.");                      this.amount = amount;                                            this.currency = currency;                        if (executionDate == null)                          this.executionDate = DateTime.Now;                      else                      {                          if (DateTime.Today.Ticks > executionDate.Value.Ticks)                              throw new BezahlCodeException("Execution date must be today or in future.");                          this.executionDate = (DateTime)executionDate;                      }                        if (authority.Equals(AuthorityType.periodicsinglepayment) || authority.Equals(AuthorityType.periodicsinglepaymentsepa))                      {                          if (periodicTimeunit.ToUpper() != "M" && periodicTimeunit.ToUpper() != "W")                              throw new BezahlCodeException("The periodicTimeunit must be either 'M' (monthly) or 'W' (weekly).");                          this.periodicTimeunit = periodicTimeunit;                          if (periodicTimeunitRotation < 1 || periodicTimeunitRotation > 52)                              throw new BezahlCodeException("The periodicTimeunitRotation must be 1 or greater. (It means repeat the payment every 'periodicTimeunitRotation' weeks/months.");                          this.periodicTimeunitRotation = periodicTimeunitRotation;                          if (periodicFirstExecutionDate != null)                              this.periodicFirstExecutionDate = (DateTime)periodicFirstExecutionDate;                          if (periodicLastExecutionDate != null)                              this.periodicLastExecutionDate = (DateTime)periodicLastExecutionDate;                      }                    }
Magic Number,QRCoder,BezahlCode,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,BezahlCode,The following statement contains a magic number: if (!authority.Equals(AuthorityType.contact) && !authority.Equals(AuthorityType.contact_v2))                  {                      if (amount.ToString().Replace("'"' ".").Contains(".") && amount.ToString().Replace("'"' ".").Split('.')[1].TrimEnd('0').Length > 2)                          throw new BezahlCodeException("Amount must have less than 3 digits after decimal point.");                      if (amount < 0.01m || amount > 999999999.99m)                          throw new BezahlCodeException("Amount has to at least 0.01 and must be smaller or equal to 999999999.99.");                      this.amount = amount;                                            this.currency = currency;                        if (executionDate == null)                          this.executionDate = DateTime.Now;                      else                      {                          if (DateTime.Today.Ticks > executionDate.Value.Ticks)                              throw new BezahlCodeException("Execution date must be today or in future.");                          this.executionDate = (DateTime)executionDate;                      }                        if (authority.Equals(AuthorityType.periodicsinglepayment) || authority.Equals(AuthorityType.periodicsinglepaymentsepa))                      {                          if (periodicTimeunit.ToUpper() != "M" && periodicTimeunit.ToUpper() != "W")                              throw new BezahlCodeException("The periodicTimeunit must be either 'M' (monthly) or 'W' (weekly).");                          this.periodicTimeunit = periodicTimeunit;                          if (periodicTimeunitRotation < 1 || periodicTimeunitRotation > 52)                              throw new BezahlCodeException("The periodicTimeunitRotation must be 1 or greater. (It means repeat the payment every 'periodicTimeunitRotation' weeks/months.");                          this.periodicTimeunitRotation = periodicTimeunitRotation;                          if (periodicFirstExecutionDate != null)                              this.periodicFirstExecutionDate = (DateTime)periodicFirstExecutionDate;                          if (periodicLastExecutionDate != null)                              this.periodicLastExecutionDate = (DateTime)periodicLastExecutionDate;                      }                    }
Magic Number,QRCoder,OneTimePassword,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,TimeToString,The following statement contains a magic number: if (Period != 30)                  {                      sb.Append("&period=" + Period);                  }
Magic Number,QRCoder,OneTimePassword,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ProcessCommonFields,The following statement contains a magic number: if (Digits != 6)                  {                      sb.Append("&digits=" + Digits);                  }
Magic Number,QRCoder,ShadowSocksConfig,C:\repos\codebude_QRCoder\QRCoder\PayloadGenerator.cs,ShadowSocksConfig,The following statement contains a magic number: if (port < 1 || port > 65535)                      throw new ShadowSocksConfigException("Value of 'port' must be within 0 and 65535.");
Magic Number,QRCoder,PngByteQRCode,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,DrawScanlines,The following statement contains a magic number: var bytesPerScanline = (matrixSize * pixelsPerModule + 7) / 8 + 1;
Magic Number,QRCoder,PngByteQRCode,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,DrawScanlines,The following statement contains a magic number: var bytesPerScanline = (matrixSize * pixelsPerModule + 7) / 8 + 1;
Magic Number,QRCoder,PngByteQRCode,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,DrawScanlines,The following statement contains a magic number: for (var y = 0; y < matrixSize; y++)              {                  var modules = moduleMatrix[y];                  var scanlineOffset = y * pixelsPerModule * bytesPerScanline;                    // Draw a scanline with the modules from the QR code.                  for (var x = 0; x < matrixSize; x++)                  {                      if (modules[x])                      {                          continue;                      }                        var pixelIndex = x * pixelsPerModule;                      var endIndex = pixelIndex + pixelsPerModule;                      for (; pixelIndex < endIndex; pixelIndex++)                      {                          scanlines[scanlineOffset + 1 + pixelIndex / 8] |= (byte)(0x80 >> (pixelIndex % 8));                      }                  }                    // Copy the scanline required number of times.                  for (var copyCount = 1; copyCount < pixelsPerModule; copyCount++)                  {                      Array.Copy(scanlines' scanlineOffset' scanlines' scanlineOffset + copyCount * bytesPerScanline' bytesPerScanline);                  }              }
Magic Number,QRCoder,PngByteQRCode,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,DrawScanlines,The following statement contains a magic number: for (var y = 0; y < matrixSize; y++)              {                  var modules = moduleMatrix[y];                  var scanlineOffset = y * pixelsPerModule * bytesPerScanline;                    // Draw a scanline with the modules from the QR code.                  for (var x = 0; x < matrixSize; x++)                  {                      if (modules[x])                      {                          continue;                      }                        var pixelIndex = x * pixelsPerModule;                      var endIndex = pixelIndex + pixelsPerModule;                      for (; pixelIndex < endIndex; pixelIndex++)                      {                          scanlines[scanlineOffset + 1 + pixelIndex / 8] |= (byte)(0x80 >> (pixelIndex % 8));                      }                  }                    // Copy the scanline required number of times.                  for (var copyCount = 1; copyCount < pixelsPerModule; copyCount++)                  {                      Array.Copy(scanlines' scanlineOffset' scanlines' scanlineOffset + copyCount * bytesPerScanline' bytesPerScanline);                  }              }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,GetBytes,The following statement contains a magic number: while (chunkOffset < bytes.Length)                  {                      // Read length field.                      var dataLength = (bytes[chunkOffset] << 24) | (bytes[chunkOffset + 1] << 16) | (bytes[chunkOffset + 2] << 8) | bytes[chunkOffset + 3];                        // CRC is computed from type and data fields.                      var crc = Crc32(bytes' chunkOffset + 4' dataLength + 4);                        // Write CRC to end of chunk.                      var crcOffset = chunkOffset + 8 + dataLength;                      bytes[crcOffset + 0] = (byte)(crc >> 24);                      bytes[crcOffset + 1] = (byte)(crc >> 16);                      bytes[crcOffset + 2] = (byte)(crc >> 8);                      bytes[crcOffset + 3] = (byte)crc;                        // Seek to next chunk.                      chunkOffset = crcOffset + 4;                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WriteHeader,The following statement contains a magic number: this.WriteChunkStart(IHDR' 13);
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WritePalette,The following statement contains a magic number: const int Red = 0' Green = 1' Blue = 2' Alpha = 3;
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WritePalette,The following statement contains a magic number: const int Red = 0' Green = 1' Blue = 2' Alpha = 3;
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WritePalette,The following statement contains a magic number: const byte Opaque = 255;
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WritePalette,The following statement contains a magic number: this.WriteChunkStart(PLTE' 3 * rgbaColors.Length);
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WriteScanlines,The following statement contains a magic number: using (var idatStream = new MemoryStream())                  {                      Deflate(idatStream' scanlines);                        this.WriteChunkStart(IDAT' (int)(idatStream.Length + 6));                        // Deflate header.                      this.stream.WriteByte(0x78); // 8 Deflate algorithm' 7 max window size                      this.stream.WriteByte(0x9C); // Check bits.                        // Compressed data.                      idatStream.Position = 0;  #if NET35                      idatStream.WriteTo(this.stream);  #else                      idatStream.CopyTo(this.stream);  #endif                      // Deflate checksum.                      var adler = Adler32(scanlines' 0' scanlines.Length);                      this.WriteIntBigEndian(adler);                        this.WriteChunkEnd();                  }
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WriteChunkStart,The following statement contains a magic number: this.stream.Write(type' 0' 4);
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WriteChunkEnd,The following statement contains a magic number: this.stream.SetLength(this.stream.Length + 4);
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WriteChunkEnd,The following statement contains a magic number: this.stream.Position += 4;
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WriteIntBigEndian,The following statement contains a magic number: this.stream.WriteByte((byte)(value >> 24));
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WriteIntBigEndian,The following statement contains a magic number: this.stream.WriteByte((byte)(value >> 16));
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,WriteIntBigEndian,The following statement contains a magic number: this.stream.WriteByte((byte)(value >> 8));
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,Adler32,The following statement contains a magic number: const uint Base = 65521;
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,Adler32,The following statement contains a magic number: return (s2 << 16) + s1;
Magic Number,QRCoder,PngBuilder,C:\repos\codebude_QRCoder\QRCoder\PngByteQRCode.cs,Crc32,The following statement contains a magic number: for (var n = index; n < end; n++)                  {                      c = CrcTable[(c ^ data[n]) & 0xff] ^ (c >> 8);                  }
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,QRCodeData,The following statement contains a magic number: if (bytes[0] != 0x51 || bytes[1] != 0x52 || bytes[2] != 0x52)                  throw new Exception("Invalid raw data file. Filetype doesn't match \"QRR\".");
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,QRCodeData,The following statement contains a magic number: var sideLen = (int)bytes[4];
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,QRCodeData,The following statement contains a magic number: bytes.RemoveRange(0' 5);
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,QRCodeData,The following statement contains a magic number: this.Version = (sideLen - 21 - 8) / 4 + 1;
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,QRCodeData,The following statement contains a magic number: this.Version = (sideLen - 21 - 8) / 4 + 1;
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,QRCodeData,The following statement contains a magic number: this.Version = (sideLen - 21 - 8) / 4 + 1;
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,QRCodeData,The following statement contains a magic number: foreach (var b in bytes)              {                  var bArr = new BitArray(new byte[] { b });                  for (int i = 7; i >= 0; i--)                  {                      modules.Enqueue((b & (1 << i)) != 0);                  }                             }
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,GetRawData,The following statement contains a magic number: for (int i = 0; i < 8 - (ModuleMatrix.Count * ModuleMatrix.Count) % 8; i++)              {                  dataQueue.Enqueue(0);              }
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,GetRawData,The following statement contains a magic number: for (int i = 0; i < 8 - (ModuleMatrix.Count * ModuleMatrix.Count) % 8; i++)              {                  dataQueue.Enqueue(0);              }
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,GetRawData,The following statement contains a magic number: while (dataQueue.Count > 0)              {                  byte b = 0;                  for (int i = 7; i >= 0; i--)                  {                      b += (byte)(dataQueue.Dequeue() << i);                  }                  bytes.Add(b);              }
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,ModulesPerSideFromVersion,The following statement contains a magic number: return 21 + (version - 1) * 4;
Magic Number,QRCoder,QRCodeData,C:\repos\codebude_QRCoder\QRCoder\QRCodeData.cs,ModulesPerSideFromVersion,The following statement contains a magic number: return 21 + (version - 1) * 4;
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: var size = (this.QrCodeData.ModuleMatrix.Count - (drawQuietZones ? 0 : 8)) * pixelsPerModule;
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: var offset = drawQuietZones ? 0 : 4 * pixelsPerModule;
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: var size = (this.QrCodeData.ModuleMatrix.Count - (drawQuietZones ? 0 : 8)) * pixelsPerModule;
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: var offset = drawQuietZones ? 0 : 4 * pixelsPerModule;
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: var drawIconFlag = icon != null && iconSizePercent>0 && iconSizePercent<=100;
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: if (drawIconFlag)              {                  iconDestWidth = iconSizePercent * bmp.Width / 100f;                  iconDestHeight = drawIconFlag ? iconDestWidth * icon.Height / icon.Width : 0;                  iconX = (bmp.Width - iconDestWidth) / 2;                  iconY = (bmp.Height - iconDestHeight) / 2;                        var centerDest = new RectangleF(iconX - iconBorderWidth' iconY - iconBorderWidth' iconDestWidth + iconBorderWidth * 2' iconDestHeight + iconBorderWidth * 2);                  iconPath = this.CreateRoundedRectanglePath(centerDest' iconBorderWidth * 2);              }
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: if (drawIconFlag)              {                  iconDestWidth = iconSizePercent * bmp.Width / 100f;                  iconDestHeight = drawIconFlag ? iconDestWidth * icon.Height / icon.Width : 0;                  iconX = (bmp.Width - iconDestWidth) / 2;                  iconY = (bmp.Height - iconDestHeight) / 2;                        var centerDest = new RectangleF(iconX - iconBorderWidth' iconY - iconBorderWidth' iconDestWidth + iconBorderWidth * 2' iconDestHeight + iconBorderWidth * 2);                  iconPath = this.CreateRoundedRectanglePath(centerDest' iconBorderWidth * 2);              }
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: if (drawIconFlag)              {                  iconDestWidth = iconSizePercent * bmp.Width / 100f;                  iconDestHeight = drawIconFlag ? iconDestWidth * icon.Height / icon.Width : 0;                  iconX = (bmp.Width - iconDestWidth) / 2;                  iconY = (bmp.Height - iconDestHeight) / 2;                        var centerDest = new RectangleF(iconX - iconBorderWidth' iconY - iconBorderWidth' iconDestWidth + iconBorderWidth * 2' iconDestHeight + iconBorderWidth * 2);                  iconPath = this.CreateRoundedRectanglePath(centerDest' iconBorderWidth * 2);              }
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: if (drawIconFlag)              {                  iconDestWidth = iconSizePercent * bmp.Width / 100f;                  iconDestHeight = drawIconFlag ? iconDestWidth * icon.Height / icon.Width : 0;                  iconX = (bmp.Width - iconDestWidth) / 2;                  iconY = (bmp.Height - iconDestHeight) / 2;                        var centerDest = new RectangleF(iconX - iconBorderWidth' iconY - iconBorderWidth' iconDestWidth + iconBorderWidth * 2' iconDestHeight + iconBorderWidth * 2);                  iconPath = this.CreateRoundedRectanglePath(centerDest' iconBorderWidth * 2);              }
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,GetGraphic,The following statement contains a magic number: if (drawIconFlag)              {                  iconDestWidth = iconSizePercent * bmp.Width / 100f;                  iconDestHeight = drawIconFlag ? iconDestWidth * icon.Height / icon.Width : 0;                  iconX = (bmp.Width - iconDestWidth) / 2;                  iconY = (bmp.Height - iconDestHeight) / 2;                        var centerDest = new RectangleF(iconX - iconBorderWidth' iconY - iconBorderWidth' iconDestWidth + iconBorderWidth * 2' iconDestHeight + iconBorderWidth * 2);                  iconPath = this.CreateRoundedRectanglePath(centerDest' iconBorderWidth * 2);              }
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Y' cornerRadius * 2' cornerRadius * 2' 180' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Y' cornerRadius * 2' cornerRadius * 2' 180' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Y' cornerRadius * 2' cornerRadius * 2' 180' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Y' cornerRadius * 2' cornerRadius * 2' 180' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddLine(rect.X + cornerRadius' rect.Y' rect.Right - cornerRadius * 2' rect.Y);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y' cornerRadius * 2' cornerRadius * 2' 270' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y' cornerRadius * 2' cornerRadius * 2' 270' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y' cornerRadius * 2' cornerRadius * 2' 270' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y' cornerRadius * 2' cornerRadius * 2' 270' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y' cornerRadius * 2' cornerRadius * 2' 270' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddLine(rect.Right' rect.Y + cornerRadius * 2' rect.Right' rect.Y + rect.Height - cornerRadius * 2);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddLine(rect.Right' rect.Y + cornerRadius * 2' rect.Right' rect.Y + rect.Height - cornerRadius * 2);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y + rect.Height - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 0' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y + rect.Height - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 0' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y + rect.Height - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 0' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y + rect.Height - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 0' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X + rect.Width - cornerRadius * 2' rect.Y + rect.Height - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 0' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddLine(rect.Right - cornerRadius * 2' rect.Bottom' rect.X + cornerRadius * 2' rect.Bottom);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddLine(rect.Right - cornerRadius * 2' rect.Bottom' rect.X + cornerRadius * 2' rect.Bottom);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Bottom - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Bottom - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Bottom - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Bottom - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddArc(rect.X' rect.Bottom - cornerRadius * 2' cornerRadius * 2' cornerRadius * 2' 90' 90);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddLine(rect.X' rect.Bottom - cornerRadius * 2' rect.X' rect.Y + cornerRadius * 2);
Magic Number,QRCoder,QRCode,C:\repos\codebude_QRCoder\QRCoder\QRCode.cs,CreateRoundedRectanglePath,The following statement contains a magic number: roundedRect.AddLine(rect.X' rect.Bottom - cornerRadius * 2' rect.X' rect.Y + cornerRadius * 2);
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: var modeIndicator = DecToBin((int)encoding' 4);
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: var dataLength = eccInfo.TotalDataCodewords * 8;
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: if (lengthDiff > 0)                  bitString += new string('0'' Math.Min(lengthDiff' 4));
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: if ((bitString.Length % 8) != 0)                  bitString += new string('0'' 8 - (bitString.Length % 8));
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: if ((bitString.Length % 8) != 0)                  bitString += new string('0'' 8 - (bitString.Length % 8));
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: if ((bitString.Length % 8) != 0)                  bitString += new string('0'' 8 - (bitString.Length % 8));
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: for (var i = 0; i < eccInfo.BlocksInGroup1; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup1 * 8' eccInfo.CodewordsInGroup1 * 8);                  var bitBlockList = this.BinaryStringToBitBlockList(bitStr);                  var bitBlockListDec = this.BinaryStringListToDecList(bitBlockList);                  var eccWordList = this.CalculateECCWords(bitStr' eccInfo);                  var eccWordListDec = this.BinaryStringListToDecList(eccWordList);                  codeWordWithECC.Add(                      new CodewordBlock(1'                                         i + 1'                                         bitStr'                                         bitBlockList'                                        eccWordList'                                        bitBlockListDec'                                        eccWordListDec)                                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: for (var i = 0; i < eccInfo.BlocksInGroup1; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup1 * 8' eccInfo.CodewordsInGroup1 * 8);                  var bitBlockList = this.BinaryStringToBitBlockList(bitStr);                  var bitBlockListDec = this.BinaryStringListToDecList(bitBlockList);                  var eccWordList = this.CalculateECCWords(bitStr' eccInfo);                  var eccWordListDec = this.BinaryStringListToDecList(eccWordList);                  codeWordWithECC.Add(                      new CodewordBlock(1'                                         i + 1'                                         bitStr'                                         bitBlockList'                                        eccWordList'                                        bitBlockListDec'                                        eccWordListDec)                                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: bitString = bitString.Substring(eccInfo.BlocksInGroup1 * eccInfo.CodewordsInGroup1 * 8);
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: for (var i = 0; i < eccInfo.BlocksInGroup2; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup2 * 8' eccInfo.CodewordsInGroup2 * 8);                  var bitBlockList = this.BinaryStringToBitBlockList(bitStr);                  var bitBlockListDec = this.BinaryStringListToDecList(bitBlockList);                  var eccWordList = this.CalculateECCWords(bitStr' eccInfo);                  var eccWordListDec = this.BinaryStringListToDecList(eccWordList);                  codeWordWithECC.Add(new CodewordBlock(2'                                        i + 1'                                        bitStr'                                        bitBlockList'                                        eccWordList'                                        bitBlockListDec'                                        eccWordListDec)                                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: for (var i = 0; i < eccInfo.BlocksInGroup2; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup2 * 8' eccInfo.CodewordsInGroup2 * 8);                  var bitBlockList = this.BinaryStringToBitBlockList(bitStr);                  var bitBlockListDec = this.BinaryStringListToDecList(bitBlockList);                  var eccWordList = this.CalculateECCWords(bitStr' eccInfo);                  var eccWordListDec = this.BinaryStringListToDecList(eccWordList);                  codeWordWithECC.Add(new CodewordBlock(2'                                        i + 1'                                        bitStr'                                        bitBlockList'                                        eccWordList'                                        bitBlockListDec'                                        eccWordListDec)                                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: for (var i = 0; i < eccInfo.BlocksInGroup2; i++)              {                  var bitStr = bitString.Substring(i * eccInfo.CodewordsInGroup2 * 8' eccInfo.CodewordsInGroup2 * 8);                  var bitBlockList = this.BinaryStringToBitBlockList(bitStr);                  var bitBlockListDec = this.BinaryStringListToDecList(bitBlockList);                  var eccWordList = this.CalculateECCWords(bitStr' eccInfo);                  var eccWordListDec = this.BinaryStringListToDecList(eccWordList);                  codeWordWithECC.Add(new CodewordBlock(2'                                        i + 1'                                        bitStr'                                        bitBlockList'                                        eccWordList'                                        bitBlockListDec'                                        eccWordListDec)                                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateQrCode,The following statement contains a magic number: if (version >= 7)              {                  var versionString = GetVersionString(version);                  ModulePlacer.PlaceVersion(ref qr' versionString);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetFormatString,The following statement contains a magic number: fStr += DecToBin(maskVersion' 3);
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetFormatString,The following statement contains a magic number: var fStrEcc = fStr.PadRight(15' '0').TrimStart('0');
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetFormatString,The following statement contains a magic number: while (fStrEcc.Length > 10)              {                  var sb = new StringBuilder();                  generator = generator.PadRight(fStrEcc.Length' '0');                  for (var i = 0; i < fStrEcc.Length; i++)                      sb.Append((Convert.ToInt32(fStrEcc[i]) ^ Convert.ToInt32(generator[i])).ToString());                  fStrEcc = sb.ToString().TrimStart('0');              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetFormatString,The following statement contains a magic number: fStrEcc = fStrEcc.PadLeft(10' '0');
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetVersionString,The following statement contains a magic number: var vStr = DecToBin(version' 6);
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetVersionString,The following statement contains a magic number: var vStrEcc = vStr.PadRight(18' '0').TrimStart('0');
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetVersionString,The following statement contains a magic number: while (vStrEcc.Length > 12)              {                  var sb = new StringBuilder();                  generator = generator.PadRight(vStrEcc.Length' '0');                  for (var i = 0; i < vStrEcc.Length; i++)                      sb.Append((Convert.ToInt32(vStrEcc[i]) ^ Convert.ToInt32(generator[i])).ToString());                  vStrEcc = sb.ToString().TrimStart('0');              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetVersionString,The following statement contains a magic number: vStrEcc = vStrEcc.PadLeft(12' '0');
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CalculateECCWords,The following statement contains a magic number: return leadTermSource.PolyItems.Select(x => DecToBin(x.Coefficient' 8)).ToList();
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CalculateMessagePolynom,The following statement contains a magic number: for (var i = bitString.Length / 8 - 1; i >= 0; i--)              {                  messagePol.PolyItems.Add(new PolynomItem(this.BinToDec(bitString.Substring(0' 8))' i));                  bitString = bitString.Remove(0' 8);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CalculateMessagePolynom,The following statement contains a magic number: for (var i = bitString.Length / 8 - 1; i >= 0; i--)              {                  messagePol.PolyItems.Add(new PolynomItem(this.BinToDec(bitString.Substring(0' 8))' i));                  bitString = bitString.Remove(0' 8);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CalculateMessagePolynom,The following statement contains a magic number: for (var i = bitString.Length / 8 - 1; i >= 0; i--)              {                  messagePol.PolyItems.Add(new PolynomItem(this.BinToDec(bitString.Substring(0' 8))' i));                  bitString = bitString.Remove(0' 8);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,BinaryStringToBitBlockList,The following statement contains a magic number: return new List<char>(bitString.ToCharArray()).Select((x' i) => new { Index = i' Value = x })                  .GroupBy(x => x.Index / 8)                  .Select(x => String.Join(""' x.Select(v => v.Value.ToString()).ToArray()))                  .ToList();
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,BinToDec,The following statement contains a magic number: return Convert.ToInt32(binStr' 2);
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,DecToBin,The following statement contains a magic number: return Convert.ToString(decNum' 2);
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetCountIndicatorLength,The following statement contains a magic number: if (version < 10)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 10;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 9;                  else                      return 8;              }              else if (version < 27)              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 12;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 11;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 10;              }              else              {                  if (encMode.Equals(EncodingMode.Numeric))                      return 14;                  else if (encMode.Equals(EncodingMode.Alphanumeric))                      return 13;                  else if (encMode.Equals(EncodingMode.Byte))                      return 16;                  else                      return 12;              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,GetDataLength,The following statement contains a magic number: return forceUtf8 || this.IsUtf8(encoding' plainText) ? (codedText.Length / 8) : plainText.Length;
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: while (plainText.Length >= 3)              {                  var dec = Convert.ToInt32(plainText.Substring(0' 3));                  codeText += DecToBin(dec' 10);                  plainText = plainText.Substring(3);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: while (plainText.Length >= 3)              {                  var dec = Convert.ToInt32(plainText.Substring(0' 3));                  codeText += DecToBin(dec' 10);                  plainText = plainText.Substring(3);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: while (plainText.Length >= 3)              {                  var dec = Convert.ToInt32(plainText.Substring(0' 3));                  codeText += DecToBin(dec' 10);                  plainText = plainText.Substring(3);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: while (plainText.Length >= 3)              {                  var dec = Convert.ToInt32(plainText.Substring(0' 3));                  codeText += DecToBin(dec' 10);                  plainText = plainText.Substring(3);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: if (plainText.Length == 2)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 7);              }              else if (plainText.Length == 1)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 4);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: if (plainText.Length == 2)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 7);              }              else if (plainText.Length == 1)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 4);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryNumeric,The following statement contains a magic number: if (plainText.Length == 2)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 7);              }              else if (plainText.Length == 1)              {                  var dec = Convert.ToInt32(plainText.Substring(0' plainText.Length));                  codeText += DecToBin(dec' 4);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = this.alphanumEncDict[token[0]] * 45 + this.alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = this.alphanumEncDict[token[0]] * 45 + this.alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = this.alphanumEncDict[token[0]] * 45 + this.alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = this.alphanumEncDict[token[0]] * 45 + this.alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: while (plainText.Length >= 2)              {                  var token = plainText.Substring(0' 2);                  var dec = this.alphanumEncDict[token[0]] * 45 + this.alphanumEncDict[token[1]];                  codeText += DecToBin(dec' 11);                  plainText = plainText.Substring(2);                }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryAlphanumeric,The following statement contains a magic number: if (plainText.Length > 0)              {                  codeText += DecToBin(this.alphanumEncDict[plainText[0]]' 6);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlainTextToBinaryByte,The following statement contains a magic number: foreach (var b in codeBytes)                  codeText += DecToBin(b' 8);
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,MultiplyGeneratorPolynomByLeadterm,The following statement contains a magic number: foreach (var polItemBase in genPolynom.PolyItems)              {                  var polItemRes = new PolynomItem(                        (polItemBase.Coefficient + leadTerm.Coefficient) % 255'                      polItemBase.Exponent - lowerExponentBy                  );                  resultPolynom.PolyItems.Add(polItemRes);              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ShrinkAlphaExp,The following statement contains a magic number: return (int)((alphaExp % 256) + Math.Floor((double)(alphaExp / 256)));
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ShrinkAlphaExp,The following statement contains a magic number: return (int)((alphaExp % 256) + Math.Floor((double)(alphaExp / 256)));
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAlignmentPatternTable,The following statement contains a magic number: for (var i = 0; i < (7 * 40); i = i + 7)              {                  var points = new List<Point>();                  for (var x = 0; x < 7; x++)                  {                      if (this.alignmentPatternBaseValues[i + x] != 0)                      {                          for (var y = 0; y < 7; y++)                          {                              if (this.alignmentPatternBaseValues[i + y] != 0)                              {                                  var p = new Point(this.alignmentPatternBaseValues[i + x] - 2' this.alignmentPatternBaseValues[i + y] - 2);                                  if (!points.Contains(p))                                      points.Add(p);                              }                          }                      }                  }                    this.alignmentPatternTable.Add(new AlignmentPattern()                  {                      Version = (i + 7) / 7'                      PatternPositions = points                  }                  );              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityECCTable,The following statement contains a magic number: for (var i = 0; i < (4 * 6 * 40); i = i + (4 * 6))              {                  this.capacityECCTable.AddRange(                  new[]                  {                      new ECCInfo(                          (i+24) / 24'                          ECCLevel.L'                          this.capacityECCBaseValues[i]'                          this.capacityECCBaseValues[i+1]'                          this.capacityECCBaseValues[i+2]'                          this.capacityECCBaseValues[i+3]'                          this.capacityECCBaseValues[i+4]'                          this.capacityECCBaseValues[i+5])'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.M'                          totalDataCodewords: this.capacityECCBaseValues[i+6]'                          eccPerBlock: this.capacityECCBaseValues[i+7]'                          blocksInGroup1: this.capacityECCBaseValues[i+8]'                          codewordsInGroup1: this.capacityECCBaseValues[i+9]'                          blocksInGroup2: this.capacityECCBaseValues[i+10]'                          codewordsInGroup2: this.capacityECCBaseValues[i+11]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.Q'                          totalDataCodewords: this.capacityECCBaseValues[i+12]'                          eccPerBlock: this.capacityECCBaseValues[i+13]'                          blocksInGroup1: this.capacityECCBaseValues[i+14]'                          codewordsInGroup1: this.capacityECCBaseValues[i+15]'                          blocksInGroup2: this.capacityECCBaseValues[i+16]'                          codewordsInGroup2: this.capacityECCBaseValues[i+17]                      )'                      new ECCInfo                      (                          version: (i + 24) / 24'                          errorCorrectionLevel: ECCLevel.H'                          totalDataCodewords: this.capacityECCBaseValues[i+18]'                          eccPerBlock: this.capacityECCBaseValues[i+19]'                          blocksInGroup1: this.capacityECCBaseValues[i+20]'                          codewordsInGroup1: this.capacityECCBaseValues[i+21]'                          blocksInGroup2: this.capacityECCBaseValues[i+22]'                          codewordsInGroup2: this.capacityECCBaseValues[i+23]                      )                  });              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateCapacityTable,The following statement contains a magic number: for (var i = 0; i < (16 * 40); i = i + 16)              {                  this.capacityTable.Add(new VersionInfo(                        (i + 16) / 16'                      new List<VersionInfoDetails>                      {                          new VersionInfoDetails(                               ECCLevel.L'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+1] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+2] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+3] }'                              }                          )'                          new VersionInfoDetails(                               ECCLevel.M'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+4] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+5] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+6] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+7] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.Q'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+8] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+9] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+10] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+11] }'                               }                          )'                          new VersionInfoDetails(                               ECCLevel.H'                               new Dictionary<EncodingMode'int>(){                                   { EncodingMode.Numeric' this.capacityBaseValues[i+12] }'                                   { EncodingMode.Alphanumeric' this.capacityBaseValues[i+13] }'                                   { EncodingMode.Byte' this.capacityBaseValues[i+14] }'                                   { EncodingMode.Kanji' this.capacityBaseValues[i+15] }'                               }                          )                      }                  ));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAntilogTable,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = this.galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  this.galoisField.Add(new Antilog(i' gfItem));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAntilogTable,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = this.galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  this.galoisField.Add(new Antilog(i' gfItem));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAntilogTable,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = this.galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  this.galoisField.Add(new Antilog(i' gfItem));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAntilogTable,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = this.galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  this.galoisField.Add(new Antilog(i' gfItem));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAntilogTable,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = this.galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  this.galoisField.Add(new Antilog(i' gfItem));              }
Magic Number,QRCoder,QRCodeGenerator,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,CreateAntilogTable,The following statement contains a magic number: for (var i = 0; i < 256; i++)              {                  var gfItem = (int)Math.Pow(2' i);                    if (i > 7)                  {                      gfItem = this.galoisField[i - 1].IntegerValue * 2;                  }                  if (gfItem > 255)                  {                      gfItem = gfItem ^ 285;                  }                  this.galoisField.Add(new Antilog(i' gfItem));              }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,AddQuietZone,The following statement contains a magic number: var quietLine = new bool[qrCode.ModuleMatrix.Count + 8];
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,AddQuietZone,The following statement contains a magic number: for (var i = 0; i < 4; i++)                      qrCode.ModuleMatrix.Insert(0' new BitArray(quietLine));
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,AddQuietZone,The following statement contains a magic number: for (var i = 0; i < 4; i++)                      qrCode.ModuleMatrix.Add(new BitArray(quietLine));
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,AddQuietZone,The following statement contains a magic number: for (var i = 4; i < qrCode.ModuleMatrix.Count - 4; i++)                  {                      bool[] quietPart = { false' false' false' false };                      var tmpLine = new List<bool>(quietPart);                      tmpLine.AddRange(qrCode.ModuleMatrix[i].Cast<bool>());                      tmpLine.AddRange(quietPart);                      qrCode.ModuleMatrix[i] = new BitArray(tmpLine.ToArray());                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,AddQuietZone,The following statement contains a magic number: for (var i = 4; i < qrCode.ModuleMatrix.Count - 4; i++)                  {                      bool[] quietPart = { false' false' false' false };                      var tmpLine = new List<bool>(quietPart);                      tmpLine.AddRange(qrCode.ModuleMatrix[i].Cast<bool>());                      tmpLine.AddRange(quietPart);                      qrCode.ModuleMatrix[i] = new BitArray(tmpLine.ToArray());                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceVersion,The following statement contains a magic number: for (var x = 0; x < 6; x++)                  {                      for (var y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1';                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1';                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceVersion,The following statement contains a magic number: for (var x = 0; x < 6; x++)                  {                      for (var y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1';                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1';                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceVersion,The following statement contains a magic number: for (var x = 0; x < 6; x++)                  {                      for (var y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1';                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1';                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceVersion,The following statement contains a magic number: for (var x = 0; x < 6; x++)                  {                      for (var y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1';                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1';                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceVersion,The following statement contains a magic number: for (var x = 0; x < 6; x++)                  {                      for (var y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1';                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1';                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceVersion,The following statement contains a magic number: for (var x = 0; x < 6; x++)                  {                      for (var y = 0; y < 3; y++)                      {                          qrCode.ModuleMatrix[y + size - 11][x] = vStr[x * 3 + y] == '1';                          qrCode.ModuleMatrix[x][y + size - 11] = vStr[x * 3 + y] == '1';                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: var modules = new['] { { 8' 0' size - 1' 8 }' { 8' 1' size - 2' 8 }' { 8' 2' size - 3' 8 }' { 8' 3' size - 4' 8 }' { 8' 4' size - 5' 8 }' { 8' 5' size - 6' 8 }' { 8' 7' size - 7' 8 }' { 8' 8' size - 8' 8 }' { 7' 8' 8' size - 7 }' { 5' 8' 8' size - 6 }' { 4' 8' 8' size - 5 }' { 3' 8' 8' size - 4 }' { 2' 8' 8' size - 3 }' { 1' 8' 8' size - 2 }' { 0' 8' 8' size - 1 } };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: for (var i = 0; i < 15; i++)                  {                      var p1 = new Point(modules[i' 0]' modules[i' 1]);                      var p2 = new Point(modules[i' 2]' modules[i' 3]);                      qrCode.ModuleMatrix[p1.Y][p1.X] = fStr[i] == '1';                      qrCode.ModuleMatrix[p2.Y][p2.X] = fStr[i] == '1';                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: for (var i = 0; i < 15; i++)                  {                      var p1 = new Point(modules[i' 0]' modules[i' 1]);                      var p2 = new Point(modules[i' 2]' modules[i' 3]);                      qrCode.ModuleMatrix[p1.Y][p1.X] = fStr[i] == '1';                      qrCode.ModuleMatrix[p2.Y][p2.X] = fStr[i] == '1';                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFormat,The following statement contains a magic number: for (var i = 0; i < 15; i++)                  {                      var p1 = new Point(modules[i' 0]' modules[i' 1]);                      var p2 = new Point(modules[i' 2]' modules[i' 3]);                      qrCode.ModuleMatrix[p1.Y][p1.X] = fStr[i] == '1';                      qrCode.ModuleMatrix[p2.Y][p2.X] = fStr[i] == '1';                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,MaskCode,The following statement contains a magic number: foreach (var pattern in methods)                  {                      if (pattern.Name.Length == 8 && pattern.Name.Substring(0' 7) == "Pattern")                      {                          var qrTemp = new QRCodeData(version);                          for (var y = 0; y < size; y++)                          {                              for (var x = 0; x < size; x++)                              {                                  qrTemp.ModuleMatrix[y][x] = qrCode.ModuleMatrix[y][x];                              }                            }                            var formatStr = GetFormatString(eccLevel' Convert.ToInt32((pattern.Name.Substring(7' 1)))-1);                          ModulePlacer.PlaceFormat(ref qrTemp' formatStr);                          if (version >= 7)                          {                              var versionString = GetVersionString(version);                              ModulePlacer.PlaceVersion(ref qrTemp' versionString);                          }                            for (var x = 0; x < size; x++)                          {                              for (var y = 0; y < size; y++)                              {                                  if (!IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  {                                      qrTemp.ModuleMatrix[y][x] ^= (bool)pattern.Invoke(null' new object[] { x' y });                                  }                              }                          }                            var score = MaskPattern.Score(ref qrTemp);                          if (string.IsNullOrEmpty(patternName) || patternScore > score)                          {                              patternName = pattern.Name;                              patternScore = score;                          }                        }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,MaskCode,The following statement contains a magic number: foreach (var pattern in methods)                  {                      if (pattern.Name.Length == 8 && pattern.Name.Substring(0' 7) == "Pattern")                      {                          var qrTemp = new QRCodeData(version);                          for (var y = 0; y < size; y++)                          {                              for (var x = 0; x < size; x++)                              {                                  qrTemp.ModuleMatrix[y][x] = qrCode.ModuleMatrix[y][x];                              }                            }                            var formatStr = GetFormatString(eccLevel' Convert.ToInt32((pattern.Name.Substring(7' 1)))-1);                          ModulePlacer.PlaceFormat(ref qrTemp' formatStr);                          if (version >= 7)                          {                              var versionString = GetVersionString(version);                              ModulePlacer.PlaceVersion(ref qrTemp' versionString);                          }                            for (var x = 0; x < size; x++)                          {                              for (var y = 0; y < size; y++)                              {                                  if (!IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  {                                      qrTemp.ModuleMatrix[y][x] ^= (bool)pattern.Invoke(null' new object[] { x' y });                                  }                              }                          }                            var score = MaskPattern.Score(ref qrTemp);                          if (string.IsNullOrEmpty(patternName) || patternScore > score)                          {                              patternName = pattern.Name;                              patternScore = score;                          }                        }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,MaskCode,The following statement contains a magic number: foreach (var pattern in methods)                  {                      if (pattern.Name.Length == 8 && pattern.Name.Substring(0' 7) == "Pattern")                      {                          var qrTemp = new QRCodeData(version);                          for (var y = 0; y < size; y++)                          {                              for (var x = 0; x < size; x++)                              {                                  qrTemp.ModuleMatrix[y][x] = qrCode.ModuleMatrix[y][x];                              }                            }                            var formatStr = GetFormatString(eccLevel' Convert.ToInt32((pattern.Name.Substring(7' 1)))-1);                          ModulePlacer.PlaceFormat(ref qrTemp' formatStr);                          if (version >= 7)                          {                              var versionString = GetVersionString(version);                              ModulePlacer.PlaceVersion(ref qrTemp' versionString);                          }                            for (var x = 0; x < size; x++)                          {                              for (var y = 0; y < size; y++)                              {                                  if (!IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  {                                      qrTemp.ModuleMatrix[y][x] ^= (bool)pattern.Invoke(null' new object[] { x' y });                                  }                              }                          }                            var score = MaskPattern.Score(ref qrTemp);                          if (string.IsNullOrEmpty(patternName) || patternScore > score)                          {                              patternName = pattern.Name;                              patternScore = score;                          }                        }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,MaskCode,The following statement contains a magic number: foreach (var pattern in methods)                  {                      if (pattern.Name.Length == 8 && pattern.Name.Substring(0' 7) == "Pattern")                      {                          var qrTemp = new QRCodeData(version);                          for (var y = 0; y < size; y++)                          {                              for (var x = 0; x < size; x++)                              {                                  qrTemp.ModuleMatrix[y][x] = qrCode.ModuleMatrix[y][x];                              }                            }                            var formatStr = GetFormatString(eccLevel' Convert.ToInt32((pattern.Name.Substring(7' 1)))-1);                          ModulePlacer.PlaceFormat(ref qrTemp' formatStr);                          if (version >= 7)                          {                              var versionString = GetVersionString(version);                              ModulePlacer.PlaceVersion(ref qrTemp' versionString);                          }                            for (var x = 0; x < size; x++)                          {                              for (var y = 0; y < size; y++)                              {                                  if (!IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  {                                      qrTemp.ModuleMatrix[y][x] ^= (bool)pattern.Invoke(null' new object[] { x' y });                                  }                              }                          }                            var score = MaskPattern.Score(ref qrTemp);                          if (string.IsNullOrEmpty(patternName) || patternScore > score)                          {                              patternName = pattern.Name;                              patternScore = score;                          }                        }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDataWords,The following statement contains a magic number: for (var x = size - 1; x >= 0; x = x - 2)                  {                      if (x == 6)                          x = 5;                      for (var yMod = 1; yMod <= size; yMod++)                      {                          int y;                          if (up)                          {                              y = size - yMod;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                          else                          {                              y = yMod - 1;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                      }                      up = !up;                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDataWords,The following statement contains a magic number: for (var x = size - 1; x >= 0; x = x - 2)                  {                      if (x == 6)                          x = 5;                      for (var yMod = 1; yMod <= size; yMod++)                      {                          int y;                          if (up)                          {                              y = size - yMod;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                          else                          {                              y = yMod - 1;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                      }                      up = !up;                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDataWords,The following statement contains a magic number: for (var x = size - 1; x >= 0; x = x - 2)                  {                      if (x == 6)                          x = 5;                      for (var yMod = 1; yMod <= size; yMod++)                      {                          int y;                          if (up)                          {                              y = size - yMod;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                          else                          {                              y = yMod - 1;                              if (datawords.Count > 0 && !IsBlocked(new Rectangle(x' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x] = datawords.Dequeue();                              if (datawords.Count > 0 && x > 0 && !IsBlocked(new Rectangle(x - 1' y' 1' 1)' blockedModules))                                  qrCode.ModuleMatrix[y][x - 1] = datawords.Dequeue();                          }                      }                      up = !up;                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveSeperatorAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(7' 0' 1' 8)'                      new Rectangle(0' 7' 7' 1)'                      new Rectangle(0' size-8' 8' 1)'                      new Rectangle(7' size-7' 1' 7)'                      new Rectangle(size-8' 0' 1' 8)'                      new Rectangle(size-7' 7' 7' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(8' 0' 1' 6)'                      new Rectangle(8' 7' 1' 1)'                      new Rectangle(0' 8' 6' 1)'                      new Rectangle(7' 8' 2' 1)'                      new Rectangle(size-8' 8' 8' 1)'                      new Rectangle(8' size-7' 1' 7)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,ReserveVersionAreas,The following statement contains a magic number: if (version >= 7)                  {                      blockedModules.AddRange(new[]{                      new Rectangle(size-11' 0' 3' 6)'                      new Rectangle(0' size-11' 6' 3)                  });                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDarkModule,The following statement contains a magic number: qrCode.ModuleMatrix[4 * version + 9][8] = true;
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDarkModule,The following statement contains a magic number: qrCode.ModuleMatrix[4 * version + 9][8] = true;
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDarkModule,The following statement contains a magic number: qrCode.ModuleMatrix[4 * version + 9][8] = true;
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDarkModule,The following statement contains a magic number: blockedModules.Add(new Rectangle(8' 4 * version + 9' 1' 1));
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDarkModule,The following statement contains a magic number: blockedModules.Add(new Rectangle(8' 4 * version + 9' 1' 1));
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceDarkModule,The following statement contains a magic number: blockedModules.Add(new Rectangle(8' 4 * version + 9' 1' 1));
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: int[] locations = { 0' 0' size - 7' 0' 0' size - 7 };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: int[] locations = { 0' 0' size - 7' 0' 0' size - 7 };
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceFinderPatterns,The following statement contains a magic number: for (var i = 0; i < 6; i = i + 2)                  {                      for (var x = 0; x < 7; x++)                      {                          for (var y = 0; y < 7; y++)                          {                              if (!(((x == 1 || x == 5) && y > 0 && y < 6) || (x > 0 && x < 6 && (y == 1 || y == 5))))                              {                                  qrCode.ModuleMatrix[y + locations[i + 1]][x + locations[i]] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(locations[i]' locations[i + 1]' 7' 7));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceAlignmentPatterns,The following statement contains a magic number: foreach (var loc in alignmentPatternLocations)                  {                      var alignmentPatternRect = new Rectangle(loc.X' loc.Y' 5' 5);                      var blocked = false;                      foreach (var blockedRect in blockedModules)                      {                          if (Intersects(alignmentPatternRect' blockedRect))                          {                              blocked = true;                              break;                          }                      }                      if (blocked)                          continue;                        for (var x = 0; x < 5; x++)                      {                          for (var y = 0; y < 5; y++)                          {                              if (y == 0 || y == 4 || x == 0 || x == 4 || (x == 2 && y == 2))                              {                                  qrCode.ModuleMatrix[loc.Y + y][loc.X + x] = true;                              }                          }                      }                      blockedModules.Add(new Rectangle(loc.X' loc.Y' 5' 5));                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: for (var i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: for (var i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: for (var i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: for (var i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: for (var i = 8; i < size - 8; i++)                  {                      if (i % 2 == 0)                      {                          qrCode.ModuleMatrix[6][i] = true;                          qrCode.ModuleMatrix[i][6] = true;                      }                  }
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,QRCoder,ModulePlacer,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,PlaceTimingPatterns,The following statement contains a magic number: blockedModules.AddRange(new[]{                      new Rectangle(6' 8' 1' size-16)'                      new Rectangle(8' 6' size-16' 1)                  });
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern1,The following statement contains a magic number: return (x + y) % 2 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern2,The following statement contains a magic number: return y % 2 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern3,The following statement contains a magic number: return x % 3 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern4,The following statement contains a magic number: return (x + y) % 3 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern5,The following statement contains a magic number: return ((int)(Math.Floor(y / 2d) + Math.Floor(x / 3d)) % 2) == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern6,The following statement contains a magic number: return ((x * y) % 2) + ((x * y) % 3) == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern6,The following statement contains a magic number: return ((x * y) % 2) + ((x * y) % 3) == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern7,The following statement contains a magic number: return (((x * y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern7,The following statement contains a magic number: return (((x * y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern7,The following statement contains a magic number: return (((x * y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern8,The following statement contains a magic number: return (((x + y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern8,The following statement contains a magic number: return (((x + y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Pattern8,The following statement contains a magic number: return (((x + y) % 2) + ((x * y) % 3)) % 2 == 0;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (var x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score1 += 3;                              else if (modInRow > 5)                                  score1++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score1 += 3;                              else if (modInColumn > 5)                                  score1++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (var x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score1 += 3;                              else if (modInRow > 5)                                  score1++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score1 += 3;                              else if (modInColumn > 5)                                  score1++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (var x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score1 += 3;                              else if (modInRow > 5)                                  score1++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score1 += 3;                              else if (modInColumn > 5)                                  score1++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (var x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score1 += 3;                              else if (modInRow > 5)                                  score1++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score1 += 3;                              else if (modInColumn > 5)                                  score1++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (var x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score1 += 3;                              else if (modInRow > 5)                                  score1++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score1 += 3;                              else if (modInColumn > 5)                                  score1++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          var modInRow = 0;                          var modInColumn = 0;                          var lastValRow = qrCode.ModuleMatrix[y][0];                          var lastValColumn = qrCode.ModuleMatrix[0][y];                          for (var x = 0; x < size; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == lastValRow)                                  modInRow++;                              else                                  modInRow = 1;                              if (modInRow == 5)                                  score1 += 3;                              else if (modInRow > 5)                                  score1++;                              lastValRow = qrCode.ModuleMatrix[y][x];                                  if (qrCode.ModuleMatrix[x][y] == lastValColumn)                                  modInColumn++;                              else                                  modInColumn = 1;                              if (modInColumn == 5)                                  score1 += 3;                              else if (modInColumn > 5)                                  score1++;                              lastValColumn = qrCode.ModuleMatrix[x][y];                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size - 1; y++)                      {                          for (var x = 0; x < size - 1; x++)                          {                              if (qrCode.ModuleMatrix[y][x] == qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x] == qrCode.ModuleMatrix[y + 1][x] &&                                  qrCode.ModuleMatrix[y][x] == qrCode.ModuleMatrix[y + 1][x + 1])                                  score2 += 3;                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: for (var y = 0; y < size; y++)                      {                          for (var x = 0; x < size - 10; x++)                          {                              if ((qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  qrCode.ModuleMatrix[y][x + 2] &&                                  qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  !qrCode.ModuleMatrix[y][x + 7] &&                                  !qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  !qrCode.ModuleMatrix[y][x + 10]) ||                                  (!qrCode.ModuleMatrix[y][x] &&                                  !qrCode.ModuleMatrix[y][x + 1] &&                                  !qrCode.ModuleMatrix[y][x + 2] &&                                  !qrCode.ModuleMatrix[y][x + 3] &&                                  qrCode.ModuleMatrix[y][x + 4] &&                                  !qrCode.ModuleMatrix[y][x + 5] &&                                  qrCode.ModuleMatrix[y][x + 6] &&                                  qrCode.ModuleMatrix[y][x + 7] &&                                  qrCode.ModuleMatrix[y][x + 8] &&                                  !qrCode.ModuleMatrix[y][x + 9] &&                                  qrCode.ModuleMatrix[y][x + 10]))                              {                                  score3 += 40;                              }                                if ((qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  qrCode.ModuleMatrix[x + 2][y] &&                                  qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  !qrCode.ModuleMatrix[x + 7][y] &&                                  !qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  !qrCode.ModuleMatrix[x + 10][y]) ||                                  (!qrCode.ModuleMatrix[x][y] &&                                  !qrCode.ModuleMatrix[x + 1][y] &&                                  !qrCode.ModuleMatrix[x + 2][y] &&                                  !qrCode.ModuleMatrix[x + 3][y] &&                                  qrCode.ModuleMatrix[x + 4][y] &&                                  !qrCode.ModuleMatrix[x + 5][y] &&                                  qrCode.ModuleMatrix[x + 6][y] &&                                  qrCode.ModuleMatrix[x + 7][y] &&                                  qrCode.ModuleMatrix[x + 8][y] &&                                  !qrCode.ModuleMatrix[x + 9][y] &&                                  qrCode.ModuleMatrix[x + 10][y]))                              {                                  score3 += 40;                              }                          }                      }
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var percent = (blackModules / (qrCode.ModuleMatrix.Count * qrCode.ModuleMatrix.Count)) * 100;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var prevMultipleOf5 = Math.Abs((int) Math.Floor(percent/5)*5 - 50)/5;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var prevMultipleOf5 = Math.Abs((int) Math.Floor(percent/5)*5 - 50)/5;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var prevMultipleOf5 = Math.Abs((int) Math.Floor(percent/5)*5 - 50)/5;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var prevMultipleOf5 = Math.Abs((int) Math.Floor(percent/5)*5 - 50)/5;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var nextMultipleOf5 = Math.Abs((int)Math.Floor(percent / 5) * 5 -45)/5;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var nextMultipleOf5 = Math.Abs((int)Math.Floor(percent / 5) * 5 -45)/5;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var nextMultipleOf5 = Math.Abs((int)Math.Floor(percent / 5) * 5 -45)/5;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: var nextMultipleOf5 = Math.Abs((int)Math.Floor(percent / 5) * 5 -45)/5;
Magic Number,QRCoder,MaskPattern,C:\repos\codebude_QRCoder\QRCoder\QRCodeGenerator.cs,Score,The following statement contains a magic number: score4 = Math.Min(prevMultipleOf5' nextMultipleOf5)*10;
Magic Number,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The following statement contains a magic number: var drawableModulesCount = this.QrCodeData.ModuleMatrix.Count - (drawQuietZones ? 0 : 8);
Magic Number,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The following statement contains a magic number: var unitsPerModule = Math.Round(Convert.ToDouble(Math.Min(viewBox.Width' viewBox.Height)) / drawableModulesCount'4);
Magic Number,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The following statement contains a magic number: if (unitsPerModule * drawableModulesCount > viewBox.Width)                  unitsPerModule -= 0.0001;
Magic Number,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The following statement contains a magic number: var offset = drawQuietZones ? 4 * unitsPerModule : 0;
Magic Number,QRCoder,SvgQRCode,C:\repos\codebude_QRCoder\QRCoder\SvgQRCode.cs,GetGraphic,The following statement contains a magic number: var offsetModules = drawQuietZones ? 0 : 4;
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: byte a = 255;
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: var r = byte.Parse(hexColor.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: var g = byte.Parse(hexColor.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: var g = byte.Parse(hexColor.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: var b = byte.Parse(hexColor.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: var b = byte.Parse(hexColor.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: if (hexColor.Length == 8)              {                  a = byte.Parse(hexColor.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);              }
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: if (hexColor.Length == 8)              {                  a = byte.Parse(hexColor.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);              }
Magic Number,QRCoder,UnityQRCode,C:\repos\codebude_QRCoder\QRCoder\UnityQRCode.cs,HexToColor,The following statement contains a magic number: if (hexColor.Length == 8)              {                  a = byte.Parse(hexColor.Substring(6' 2)' System.Globalization.NumberStyles.HexNumber);              }
Magic Number,QRCoder.Framework4._0Methods,Stream4Methods,C:\repos\codebude_QRCoder\QRCoder\Framework4.0Methods\Stream4Methods.cs,CopyTo,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,QRCoder.Framework4._0Methods,Stream4Methods,C:\repos\codebude_QRCoder\QRCoder\Framework4.0Methods\Stream4Methods.cs,CopyTo,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
