Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpOS.Tools.KeyCompiler,Compiler,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,SharpOS.Tools,Tokenizer,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\Tokenizer.cs,_StringRead,Cyclomatic complexity of the method is 9
Complex Method,SharpOS.Tools,Tokenizer,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\Tokenizer.cs,_Read,Cyclomatic complexity of the method is 13
Long Parameter List,SharpOS.Tools.KeyCompiler,IEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Encode,The method has 5 parameters. Parameters: keymask' statebit' defaultMap' shiftedMap' output
Long Parameter List,SharpOS.Tools.KeyCompiler,IEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Decode,The method has 5 parameters. Parameters: keymask' statebit' defaultMap' shiftedMap' input
Long Parameter List,SharpOS.Tools.KeyCompiler,ASCIIEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Encode,The method has 5 parameters. Parameters: keymask' statebit' defaultMap' shiftedMap' output
Long Parameter List,SharpOS.Tools.KeyCompiler,ASCIIEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Decode,The method has 5 parameters. Parameters: keymask' statebit' defaultMap' shiftedMap' input
Long Parameter List,SharpOS.Tools.KeyCompiler,UnicodeEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Encode,The method has 5 parameters. Parameters: keymask' statebit' defaultMap' shiftedMap' output
Long Parameter List,SharpOS.Tools.KeyCompiler,UnicodeEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Decode,The method has 5 parameters. Parameters: keymask' statebit' defaultMap' shiftedMap' input
Long Parameter List,SharpOS.Tools,Token,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\Tokenizer.cs,Token,The method has 5 parameters. Parameters: o' c' offset' line' ch
Long Parameter List,SharpOS.Tools,Token,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\Tokenizer.cs,Token,The method has 6 parameters. Parameters: t' text' offset' line' ch' type
Magic Number,SharpOS.Tools.KeyCompiler,ASCIIEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,EncodeKeymap,The following statement contains a magic number: for (int scancode = 0; scancode < max; ++scancode) {  				int value = map.Entries [scancode];  				int specConv = 129 - (int) SpecialKeys.Control;    				if (!map.Entries.ContainsKey (scancode)) {  					w.Write ((byte) 0);  					continue;  					;  				}    				if (value > 0xFFFF)  					value = value + specConv;    				if (value > 255)  					Console.Error.WriteLine ("Warning: key `{0}' is too large"' value);    				w.Write ((byte) value);  			}
Magic Number,SharpOS.Tools.KeyCompiler,ASCIIEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,EncodeKeymap,The following statement contains a magic number: for (int scancode = 0; scancode < max; ++scancode) {  				int value = map.Entries [scancode];  				int specConv = 129 - (int) SpecialKeys.Control;    				if (!map.Entries.ContainsKey (scancode)) {  					w.Write ((byte) 0);  					continue;  					;  				}    				if (value > 0xFFFF)  					value = value + specConv;    				if (value > 255)  					Console.Error.WriteLine ("Warning: key `{0}' is too large"' value);    				w.Write ((byte) value);  			}
Magic Number,SharpOS.Tools.KeyCompiler,ASCIIEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,DecodeKeymap,The following statement contains a magic number: int specConv = (int) SpecialKeys.Control - 129;
Magic Number,SharpOS.Tools.KeyCompiler,ASCIIEncoding,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,DecodeKeymap,The following statement contains a magic number: for (int scancode = 0; scancode < count; ++scancode) {  				byte value = r.ReadByte ();    				if (value > 128)  					map.Entries [scancode] = (int) value + specConv;  				else  					map.Entries [scancode] = value;  			}
Magic Number,SharpOS.Tools.KeyCompiler,Compiler,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Decompile,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (s)) {  				sw.WriteLine ("// decompiled using KeyCompiler {0}"' Version);  				sw.WriteLine ();  				sw.WriteLine ("keymask = 0x{0};"' keymask.ToString ("x"));  				sw.WriteLine ("statebit = 0x{0};"' statebit.ToString ("x"));  				sw.WriteLine ();  				sw.WriteLine ("default {");    				foreach (KeyValuePair<int' int> kvp in defaultMap.Entries) {  					if (kvp.Value <= 128)  						sw.WriteLine ("\t{0} = '{1}';"' kvp.Key' (char) kvp.Value);  					else  						sw.WriteLine ("\t{0} = @{1};"' kvp.Key' (SpecialKeys) kvp.Value);  				}    				sw.WriteLine ("}");  				sw.WriteLine ();  				sw.WriteLine ("shifted {");    				foreach (KeyValuePair<int' int> kvp in shiftedMap.Entries) {  					string val;    					if (kvp.Value == (int) '\n')  						val = "\\n";  					else if (kvp.Value == (int) '\b')  						val = "\\b";  					else if (kvp.Value == (int) '\r')  						val = "\\r";  					else if (kvp.Value == (int) '\t')  						val = "\\t";  					else if (kvp.Value <= 128)  						val = "'" + ((char) kvp.Value) + "'";  					else  						val = "@" + ((SpecialKeys) kvp.Value);    					sw.WriteLine ("\t{0} = '{1}';"' kvp.Key' val);  				}    				sw.WriteLine ("}");  			}
Magic Number,SharpOS.Tools.KeyCompiler,Compiler,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Decompile,The following statement contains a magic number: using (StreamWriter sw = new StreamWriter (s)) {  				sw.WriteLine ("// decompiled using KeyCompiler {0}"' Version);  				sw.WriteLine ();  				sw.WriteLine ("keymask = 0x{0};"' keymask.ToString ("x"));  				sw.WriteLine ("statebit = 0x{0};"' statebit.ToString ("x"));  				sw.WriteLine ();  				sw.WriteLine ("default {");    				foreach (KeyValuePair<int' int> kvp in defaultMap.Entries) {  					if (kvp.Value <= 128)  						sw.WriteLine ("\t{0} = '{1}';"' kvp.Key' (char) kvp.Value);  					else  						sw.WriteLine ("\t{0} = @{1};"' kvp.Key' (SpecialKeys) kvp.Value);  				}    				sw.WriteLine ("}");  				sw.WriteLine ();  				sw.WriteLine ("shifted {");    				foreach (KeyValuePair<int' int> kvp in shiftedMap.Entries) {  					string val;    					if (kvp.Value == (int) '\n')  						val = "\\n";  					else if (kvp.Value == (int) '\b')  						val = "\\b";  					else if (kvp.Value == (int) '\r')  						val = "\\r";  					else if (kvp.Value == (int) '\t')  						val = "\\t";  					else if (kvp.Value <= 128)  						val = "'" + ((char) kvp.Value) + "'";  					else  						val = "@" + ((SpecialKeys) kvp.Value);    					sw.WriteLine ("\t{0} = '{1}';"' kvp.Key' val);  				}    				sw.WriteLine ("}");  			}
Magic Number,SharpOS.Tools.KeyCompiler,Compiler,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,UnpackArchive,The following statement contains a magic number: using (BinaryReader r = new BinaryReader (s)) {  				int count = r.ReadInt32 ();    				for (int x = 0; x < count; ++x) {  					string keymapName = r.ReadString ();  					string fileName = Path.Combine (wd' keymapName + ".skm");  					Stream outp = null;  					byte [] buffer = new byte [2048];  					int read = 0;    					if (File.Exists (fileName) && !Force) {  						Console.Error.WriteLine ("{0}: file exists (-force to override)"'  							fileName);    						continue;  					}    					Console.WriteLine ("Unpacking keymap `{0}' to {1}"'  						keymapName' fileName);    					outp = File.Open (fileName' FileMode.Create'  						FileAccess.Write);    					while ((read = s.Read (buffer' 0' buffer.Length)) > 0)  						outp.Write (buffer' 0' read);    					outp.Close ();  				}  			}
Magic Number,SharpOS.Tools.KeyCompiler,Compiler,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,CreateArchive,The following statement contains a magic number: using (BinaryWriter w = new BinaryWriter (s)) {  				w.Write (args.Count);    				foreach (string arg in args) {  					string name' file;  					Stream inp = null;  					byte [] buffer = new byte [2048];  					int read = 0;    					if (!arg.Contains (":")) {  						Console.Error.WriteLine ("Argument format: name:file");  						return 1;  					}    					name = arg.Substring (0' arg.IndexOf (":"));  					file = arg.Substring (arg.IndexOf (":") + 1);  					inp = File.Open (file' FileMode.Open' FileAccess.Read);    					w.Write (name);    					while ((read = inp.Read (buffer' 0' buffer.Length)) > 0)  						s.Write (buffer' 0' read);    					inp.Close ();  				}  			}
Magic Number,SharpOS.Tools.KeyCompiler,Compiler,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Parse,The following statement contains a magic number: while (true) {  				bool failed = false;    				try {  					if (!ParseStatement (t))  						break;  				} catch (UnexpectedTokenException ute) {    					failed = true;  					Console.Error.WriteLine (  						"Unexpected token '{0}' on line {1}' col {2} (wanted '{3}')"'  						ute.Token.Text' ute.Token.Line' ute.Token.Column'  						ute.ExpectedToken);    				} catch (UnexpectedEndOfFileException ueof) {    					failed = true;  					ueof.Tokenizer.GetLineInfo (out line' out col);  					Console.Error.WriteLine (  						"Unexpected end of file at line {0}' col {1}; expected `{2}'"'  						line' col' ueof.ExpectedToken);    					return 2;  				}    				if (failed) {  					Token tk;    					++errors;    					if (errors >= MaxErrors)  						break;    					while ((tk = t.Read ()) != null) {  						if (tk.Text == ";")  							break;  					}  				}  			}
Magic Number,SharpOS.Tools.KeyCompiler,Compiler,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\KeyCompiler.cs,Main,The following statement contains a magic number: if (args.Length == 0 || opts.RemainingArguments.Length == 9) {  				Console.Error.WriteLine ("Usage: KeyCompiler [options] <input-file> ...");  				Console.Error.WriteLine ("Run `KeyCompiler -help` for more information.");  				return 1;  			}
Magic Number,SharpOS.Tools,Tokenizer,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\Tokenizer.cs,IsQuoteToken,The following statement contains a magic number: for (int x = 0; x + 1 < QuoteTokenPairs.Length; x += 2) {  				if (str == QuoteTokenPairs [x] && cmpn <= 0)  					return true;  				else if (str == QuoteTokenPairs [x + 1] && (cmpn == -1 || cmpn == 1))  					return true;  			}
Magic Number,SharpOS.Tools,Tokenizer,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\Tokenizer.cs,MaybeQuoteToken,The following statement contains a magic number: for (int x = 0; x + 1 < QuoteTokenPairs.Length; x += 2) {  				if (QuoteTokenPairs [x].StartsWith (str) && cmpn <= 0)  					return true;  				else if (QuoteTokenPairs [x + 1].StartsWith (str) && (cmpn == -1 || cmpn == 1))  					return true;  			}
Magic Number,SharpOS.Tools,Tokenizer,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\Tokenizer.cs,IsCommentToken,The following statement contains a magic number: for (int x = 0; x + 1 < CommentTokenPairs.Length; x += 2) {  				if (str == CommentTokenPairs [x] && cmpn <= 0)  					return true;  				else if (str == CommentTokenPairs [x + 1] && (cmpn == -1 || cmpn == 1))  					return true;  			}
Magic Number,SharpOS.Tools,Tokenizer,C:\repos\sharpos_SharpOS\Tools\KeyCompiler\Tokenizer.cs,MaybeCommentToken,The following statement contains a magic number: for (int x = 0; x + 1 < CommentTokenPairs.Length; x += 2) {  				if (CommentTokenPairs [x].StartsWith (str) && cmpn <= 0)  					return true;  				else if (CommentTokenPairs [x + 1].StartsWith (str) && (cmpn == -1 || cmpn == 1))  					return true;  			}
