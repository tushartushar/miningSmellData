Implementation smell,Namespace,Class,File,Method,Description
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: IPEndPoint ep = new IPEndPoint(address[0]' 123);
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
Magic Number,WaveTech.Scutex.Providers.NetworkTimeProvider,NtpProvider,C:\repos\ucswift_Scutex\Providers\Scutex.Providers.NetworkTimeProvider\NtpProvider.cs,GetNetworkTime,The following statement contains a magic number: try  			{  				Socket s = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  				s.ReceiveTimeout = 1000;    				s.Connect(ep);    				byte[] ntpData = new byte[48]; // RFC 2030  				ntpData[0] = 0x1B;  				for (int i = 1; i < 48; i++)  					ntpData[i] = 0;    				s.Send(ntpData);  				s.Receive(ntpData);    				byte offsetTransmitTime = 40;  				ulong intpart = 0;  				ulong fractpart = 0;    				for (int i = 0; i <= 3; i++)  					intpart = 256 * intpart + ntpData[offsetTransmitTime + i];    				for (int i = 4; i <= 7; i++)  					fractpart = 256 * fractpart + ntpData[offsetTransmitTime + i];    				ulong milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000L);  				s.Close();    				TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);    				DateTime dateTime = new DateTime(1900' 1' 1);  				dateTime += timeSpan;    				TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);  				networkDateTime = (dateTime + offsetAmount);  			}  			catch  			{  				networkDateTime = DateTime.Now;  			}
