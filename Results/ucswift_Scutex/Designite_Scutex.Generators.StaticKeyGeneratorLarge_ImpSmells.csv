Implementation smell,Namespace,Class,File,Method,Description
Long Method,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GenerateLicenseKey,The method has 103 lines of code.
Long Method,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,ValidateLicenseKey,The method has 153 lines of code.
Long Method,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,CreateLicensePlaceholders,The method has 126 lines of code.
Complex Method,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GenerateLicenseKey,Cyclomatic complexity of the method is 18
Complex Method,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,ValidateLicenseKey,Cyclomatic complexity of the method is 28
Complex Method,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetLicenseKeyData,Cyclomatic complexity of the method is 13
Long Statement,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,ValidateLicenseKey,The length of the statement  "							bool licenseKeyTypeValueCheck = int.TryParse(decodedLicenseKey.Substring(p.Key' p.Value.Length)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out licenseKeyTypeValue); " is 176.
Long Statement,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,ValidateLicenseKey,The length of the statement  "							string fingerPrint = hashingProvider.Checksum16(_fingerprintService.GetHardwareFingerprint(FingerprintTypes.Default)).ToString("X"); " is 132.
Long Statement,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetLicenseKeyData,The length of the statement  "							bool licenseKeyTypeValueCheck = int.TryParse(decodedLicenseKey.Substring(p.Key' p.Value.Length)' out licenseKeyTypeValue); " is 122.
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GenerateLicenseKey,The following statement contains a magic number: hash = hash.PadLeft(4' char.Parse("0"));
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,ValidateLicenseKey,The following statement contains a magic number: switch (p.Value.ValidationType)  					{  						case ValidationTypes.LicenseKeyType:  							int licenseKeyTypeValue = 0;  							bool licenseKeyTypeValueCheck = int.TryParse(decodedLicenseKey.Substring(p.Key' p.Value.Length)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out licenseKeyTypeValue);    							// The LicenseKeyType value should be able to be converted to an int' else it is invalid  							if (!licenseKeyTypeValueCheck)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							LicenseKeyTypeFlag typeFlag;    							// It is possible that a LicenseKeyType has no supporting LicenseKeyTypeFlag (which means it was   							// placeholded in the LicenseKeyType enum but is not operable). If this parse (cast) fails then  							// there was a valid LicenseKeyType enum value but no valid LicenseKeyTypeFlag value.  							try  							{  								int type = licenseKeyTypeValue;    								if (((LicenseKeyTypes)licenseKeyTypeValue) == LicenseKeyTypes.HardwareLockLocal)  									type = (int) LicenseKeyTypes.HardwareLock;    								typeFlag = (LicenseKeyTypeFlag)Enum.Parse(typeof(LicenseKeyTypeFlag)' ((LicenseKeyTypes)type).ToString()' true);  							}  							catch (Exception)  							{  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);  							}    							LicenseSet ls = null;  							try  							{  								var licSetPH = placeholerLocations.Where(x => x.Value.ValidationType == ValidationTypes.LicenseSet).SingleOrDefault();  								int licenseSetIdValue1 = int.Parse(decodedLicenseKey.Substring(licSetPH.Key' licSetPH.Value.Length));    								Debug.WriteLine(string.Format("Decoded Key: {0}"' decodedLicenseKey));  								Debug.WriteLine(string.Format("LicenseSet Placeholder: {0}"' licSetPH));  								Debug.WriteLine(string.Format("LicenseSet Placeholder Key: {0}"' licSetPH.Key));  								Debug.WriteLine(string.Format("LicenseSet Placeholder Length: {0}"' licSetPH.Value.Length));  								Debug.WriteLine(string.Format("LicenseSetId Value: {0}"' licenseSetIdValue1));  								Debug.WriteLine(string.Format("LicenseSets: {0}"' scutexLicense.LicenseSets.First().LicenseSetId));    								ls = scutexLicense.LicenseSets.Where(x => x.LicenseSetId == licenseSetIdValue1).SingleOrDefault();  							}  							catch   							{  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);  							}    							Debug.WriteLine(string.Format("LicenseSet: {0}"' ls));    							if (ls == null)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							Debug.WriteLine(string.Format("LicenseSet Types: {0}"' ls.SupportedLicenseTypes));    							// If the LicenseSet does not support the key type supplied then throw an error  							if (!ls.SupportedLicenseTypes.IsSet(typeFlag))  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							break;  						case ValidationTypes.LicenseSet:  							int licenseSetIdValue = 0;  							bool licenseSetIdValueCheck = int.TryParse(decodedLicenseKey.Substring(p.Key' p.Value.Length)' out licenseSetIdValue);    							// The LicenseSetId value should be able to be converted to an int' else it is invalid  							if (!licenseSetIdValueCheck)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							LicenseSet ls1 = null;  							try  							{  								ls1 = scutexLicense.LicenseSets.Where(x => x.LicenseSetId == licenseSetIdValue).SingleOrDefault();  							}  							catch  							{  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);  							}    							if (ls1 == null)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							break;  						case ValidationTypes.Product:  							int productIdValue = 0;  							bool productIdValueCheck = int.TryParse(decodedLicenseKey.Substring(p.Key' p.Value.Length)' out productIdValue);    							// The ProductId value should be able to be converted to an int' else it is invalid  							if (!productIdValueCheck)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							if (scutexLicense.Product.ProductId != productIdValue)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							break;  						case ValidationTypes.Fingerprint:  							string fingerPrint = hashingProvider.Checksum16(_fingerprintService.GetHardwareFingerprint(FingerprintTypes.Default)).ToString("X");    							if (fingerPrint != p.Value.Value)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							break;  						case ValidationTypes.ProductIdentifier:  							string prodId = hashingProvider.Checksum16(scutexLicense.GetLicenseProductIdentifier()).ToString("X");  							prodId = prodId.PadLeft(4' char.Parse("0"));    							if (prodId != p.Value.Value)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							break;  						case ValidationTypes.None:  							string keyValue = decodedLicenseKey.Substring(p.Key' p.Value.Length);    							if (keyValue != p.Value.Value)  								throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);    							break;  						default:  							throw new ScutexLicenseException(Resources.ErrorMsg_VerifyLicenseKey);  					}
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetLicenseCapability,The following statement contains a magic number: lc.MaxLicenseKeysPerBatch = 500000;
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetLicenseCapability,The following statement contains a magic number: lc.MaxTotalLicenseKeys = 10000000;
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,CreateLicensePlaceholders,The following statement contains a magic number: placeholders.Add(new LicensePlaceholder  					                 	{  					                 		Length = 4'  					                 		Token = Char.Parse("p")'  					                 		Type = PlaceholderTypes.String'  															Value = hashingProvider.Checksum16(generationOptions.HardwareFingerprint).ToString("X")'  					                 		IsChecksum = false'  					                 		ValidationType = ValidationTypes.Fingerprint  					                 	});
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,CreateLicensePlaceholders,The following statement contains a magic number: placeholders.Add(new LicensePlaceholder  			{  				Length = 2'  				Token = Char.Parse("a")'  				Type = PlaceholderTypes.Number'  				Value = scutexLicense.Product.GetFormattedProductId(2)'  				IsChecksum = false'  				ValidationType = ValidationTypes.Product  			});
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,CreateLicensePlaceholders,The following statement contains a magic number: placeholders.Add(new LicensePlaceholder  			{  				Length = 2'  				Token = Char.Parse("a")'  				Type = PlaceholderTypes.Number'  				Value = scutexLicense.Product.GetFormattedProductId(2)'  				IsChecksum = false'  				ValidationType = ValidationTypes.Product  			});
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,CreateLicensePlaceholders,The following statement contains a magic number: placeholders.Add(new LicensePlaceholder  			{  				Length = 4'  				Token = Char.Parse("c")'  				Type = PlaceholderTypes.Number'  				Value = ""'  				IsChecksum = true'  				ValidationType = ValidationTypes.None  			});
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetRandomCharacter,The following statement contains a magic number: return CharacterMap.Map[rand % 36];
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetWeightingModifer,The following statement contains a magic number: double c1 = Math.Log((c0 * (weight2 * 75)));
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetWeightingModifer,The following statement contains a magic number: double c3 = Math.Abs(c2 * c1 + (weight2 / 2d));
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetWeightingModifer,The following statement contains a magic number: c4 = c4 - (double)Math.Truncate((weight2 / 2m));
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetWeightingModifer,The following statement contains a magic number: c4 = 15;
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetWeightingModifer,The following statement contains a magic number: c4 > 15
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetWeightingModifer,The following statement contains a magic number: c4 > 15
Magic Number,WaveTech.Scutex.Generators.StaticKeyGeneratorLarge,KeyGenerator,D:\research\architectureSmells\repos\ucswift_Scutex\Generators\LargeStaticKeyGenerator\KeyGenerator.cs,GetWeightingModifer,The following statement contains a magic number: c4 = c4 + (double)Math.Truncate((weight2 / 2m));
