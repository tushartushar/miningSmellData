Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,ComputeHashWithSalt,Cyclomatic complexity of the method is 8
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,Checksum16,The following statement contains a magic number: foreach (char cCurrent in data)  			{  				byte bytCurrent = Convert.ToByte(cCurrent);  				crc = (ushort)(((crc >> 8) & 0xff) ^ crc16tab[(crc ^ bytCurrent) & 0xff]);  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,Checksum32,The following statement contains a magic number: table = new uint[256];
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,Checksum32,The following statement contains a magic number: for (uint i = 0; i < table.Length; ++i)  			{  				temp = i;  				for (int j = 8; j > 0; --j)  				{  					if ((temp & 1) == 1)  					{  						temp = (uint)((temp >> 1) ^ poly);  					}  					else  					{  						temp >>= 1;  					}  				}  				table[i] = temp;  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,Checksum32,The following statement contains a magic number: for (int i = 0; i < bytes.Length; ++i)  			{  				byte index = (byte)(((crc) & 0xff) ^ bytes[i]);  				crc = (uint)((crc >> 8) ^ table[index]);  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,ComputeHashWithSalt,The following statement contains a magic number: if (saltBytes == null)  			{  				// Define min and max salt sizes.  				int minSaltSize = 4;  				int maxSaltSize = 8;    				// Generate a random number for the size of the salt.  				Random random = new Random();  				int saltSize = random.Next(minSaltSize' maxSaltSize);    				// Allocate a byte array' which will hold the salt.  				saltBytes = new byte[saltSize];    				// Initialize a random number generator.  				RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();    				// Fill the salt with cryptographically strong byte values.  				rng.GetNonZeroBytes(saltBytes);  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,ComputeHashWithSalt,The following statement contains a magic number: if (saltBytes == null)  			{  				// Define min and max salt sizes.  				int minSaltSize = 4;  				int maxSaltSize = 8;    				// Generate a random number for the size of the salt.  				Random random = new Random();  				int saltSize = random.Next(minSaltSize' maxSaltSize);    				// Allocate a byte array' which will hold the salt.  				saltBytes = new byte[saltSize];    				// Initialize a random number generator.  				RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();    				// Fill the salt with cryptographically strong byte values.  				rng.GetNonZeroBytes(saltBytes);  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,VerifyHashWithSalt,The following statement contains a magic number: switch (hashAlgorithm.ToUpper())  			{  				case "SHA1":  					hashSizeInBits = 160;  					break;    				case "SHA256":  					hashSizeInBits = 256;  					break;    				case "SHA384":  					hashSizeInBits = 384;  					break;    				case "SHA512":  					hashSizeInBits = 512;  					break;    				default: // Must be MD5  					hashSizeInBits = 128;  					break;  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,VerifyHashWithSalt,The following statement contains a magic number: switch (hashAlgorithm.ToUpper())  			{  				case "SHA1":  					hashSizeInBits = 160;  					break;    				case "SHA256":  					hashSizeInBits = 256;  					break;    				case "SHA384":  					hashSizeInBits = 384;  					break;    				case "SHA512":  					hashSizeInBits = 512;  					break;    				default: // Must be MD5  					hashSizeInBits = 128;  					break;  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,VerifyHashWithSalt,The following statement contains a magic number: switch (hashAlgorithm.ToUpper())  			{  				case "SHA1":  					hashSizeInBits = 160;  					break;    				case "SHA256":  					hashSizeInBits = 256;  					break;    				case "SHA384":  					hashSizeInBits = 384;  					break;    				case "SHA512":  					hashSizeInBits = 512;  					break;    				default: // Must be MD5  					hashSizeInBits = 128;  					break;  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,VerifyHashWithSalt,The following statement contains a magic number: switch (hashAlgorithm.ToUpper())  			{  				case "SHA1":  					hashSizeInBits = 160;  					break;    				case "SHA256":  					hashSizeInBits = 256;  					break;    				case "SHA384":  					hashSizeInBits = 384;  					break;    				case "SHA512":  					hashSizeInBits = 512;  					break;    				default: // Must be MD5  					hashSizeInBits = 128;  					break;  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,VerifyHashWithSalt,The following statement contains a magic number: switch (hashAlgorithm.ToUpper())  			{  				case "SHA1":  					hashSizeInBits = 160;  					break;    				case "SHA256":  					hashSizeInBits = 256;  					break;    				case "SHA384":  					hashSizeInBits = 384;  					break;    				case "SHA512":  					hashSizeInBits = 512;  					break;    				default: // Must be MD5  					hashSizeInBits = 128;  					break;  			}
Magic Number,WaveTech.Scutex.Providers.COM.ComBypassProvider,Hashing,C:\repos\ucswift_Scutex\Providers\COM\Scutex.Providers.COM.ComBypassProvider\Hashing.cs,VerifyHashWithSalt,The following statement contains a magic number: hashSizeInBytes = hashSizeInBits / 8;
