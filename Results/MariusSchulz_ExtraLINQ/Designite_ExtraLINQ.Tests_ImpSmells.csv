Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ExtraLinq.Tests,WithEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_only_tuples_whose_selected_string_values_are_considered_distinct,The length of the statement  "                var distinctSpellings = spellingsOfJavaScript.Distinct(tuple => tuple.Item2' StringComparer.InvariantCultureIgnoreCase); " is 120.
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Throws_ArgumentNullException_when_sequence_is_null,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => nullSequence.Chunk(2));
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,ThrowsAnArgumentExceptionWhenChunkSizeIsZeroOrNegative,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,ThrowsAnArgumentExceptionWhenChunkSizeIsZeroOrNegative,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Returns_an_empty_sequence_when_passed_an_empty_sequence,The following statement contains a magic number: IEnumerable<int[]> chunks = numbers.Chunk(2);
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,ReturnsASingleChunkIfTheSequenceOnlyHasOneElement,The following statement contains a magic number: int[] numbers = { 42 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,ReturnsASingleChunkIfTheSequenceOnlyHasOneElement,The following statement contains a magic number: chunks.First().Should().Equal(42);
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1 }'                  new[] { 2 }'                  new[] { 3 }'                  new[] { 4 }'                  new[] { 5 }'                  new[] { 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1 }'                  new[] { 2 }'                  new[] { 3 }'                  new[] { 4 }'                  new[] { 5 }'                  new[] { 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1 }'                  new[] { 2 }'                  new[] { 3 }'                  new[] { 4 }'                  new[] { 5 }'                  new[] { 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1 }'                  new[] { 2 }'                  new[] { 3 }'                  new[] { 4 }'                  new[] { 5 }'                  new[] { 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1 }'                  new[] { 2 }'                  new[] { 3 }'                  new[] { 4 }'                  new[] { 5 }'                  new[] { 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_single_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1 }'                  new[] { 2 }'                  new[] { 3 }'                  new[] { 4 }'                  new[] { 5 }'                  new[] { 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5' 6' 7 };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1' 2 }'                  new[] { 3' 4 }'                  new[] { 5' 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1' 2 }'                  new[] { 3' 4 }'                  new[] { 5' 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1' 2 }'                  new[] { 3' 4 }'                  new[] { 5' 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1' 2 }'                  new[] { 3' 4 }'                  new[] { 5' 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1' 2 }'                  new[] { 3' 4 }'                  new[] { 5' 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[][] expectedChunks =              {                  new[] { 1' 2 }'                  new[] { 3' 4 }'                  new[] { 5' 6 }'                  new[] { 7 }              };
Magic Number,ExtraLinq.Tests,ChunkTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ChunkTests.cs,Correctly_splits_a_sequence_into_two_element_chunks,The following statement contains a magic number: int[][] actualChunks = numbers.Chunk(2).ToArray();
Magic Number,ExtraLinq.Tests,CycleTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\CycleTests.cs,Cycles_through_a_sequence_with_a_single_element,The following statement contains a magic number: int[] singleTen = { 10 };
Magic Number,ExtraLinq.Tests,CycleTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\CycleTests.cs,Cycles_through_a_sequence_with_a_single_element,The following statement contains a magic number: int[] threeTens = singleTen.Cycle().Take(3).ToArray();
Magic Number,ExtraLinq.Tests,CycleTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\CycleTests.cs,Cycles_through_a_sequence_with_a_single_element,The following statement contains a magic number: threeTens.Should().Equal(new[] { 10' 10' 10 });
Magic Number,ExtraLinq.Tests,CycleTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\CycleTests.cs,Cycles_through_a_sequence_with_a_single_element,The following statement contains a magic number: threeTens.Should().Equal(new[] { 10' 10' 10 });
Magic Number,ExtraLinq.Tests,CycleTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\CycleTests.cs,Cycles_through_a_sequence_with_a_single_element,The following statement contains a magic number: threeTens.Should().Equal(new[] { 10' 10' 10 });
Magic Number,ExtraLinq.Tests,CycleTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\CycleTests.cs,Cycles_through_a_sequence_with_multiple_elements,The following statement contains a magic number: int[] alternatingBits = bits.Cycle().Take(5).ToArray();
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: int[][] numbers =              {                  new[] { 1' 2' 3 }'                  new[] { 4' 5 }'                  new[] { 6 }              };
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: int[][] numbers =              {                  new[] { 1' 2' 3 }'                  new[] { 4' 5 }'                  new[] { 6 }              };
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: int[][] numbers =              {                  new[] { 1' 2' 3 }'                  new[] { 4' 5 }'                  new[] { 6 }              };
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: int[][] numbers =              {                  new[] { 1' 2' 3 }'                  new[] { 4' 5 }'                  new[] { 6 }              };
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: int[][] numbers =              {                  new[] { 1' 2' 3 }'                  new[] { 4' 5 }'                  new[] { 6 }              };
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: flattenedNumbers.Should().Equal(1' 2' 3' 4' 5' 6);
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: flattenedNumbers.Should().Equal(1' 2' 3' 4' 5' 6);
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: flattenedNumbers.Should().Equal(1' 2' 3' 4' 5' 6);
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: flattenedNumbers.Should().Equal(1' 2' 3' 4' 5' 6);
Magic Number,ExtraLinq.Tests,FlattenTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\FlattenTests.cs,Flattens_an_array_of_arrays_of_integers,The following statement contains a magic number: flattenedNumbers.Should().Equal(1' 2' 3' 4' 5' 6);
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Throws_ArgumentNullException_when_sequence_is_null,The following statement contains a magic number: Assert.Throws<ArgumentNullException>(() => numbers.Distinct(n => n % 2));
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_an_empty_sequence_when_sequence_is_empty,The following statement contains a magic number: var distinctNumbers = numbers.Distinct(n => n % 2);
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_unmodified_sequence_if_sequence_has_one_element,The following statement contains a magic number: var distinctNumbers = numbers.Distinct(n => n % 2);
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_unmodified_sequence_if_sequence_has_two_different_elements,The following statement contains a magic number: int[] numbers = { 1' 2 };
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_unmodified_sequence_if_sequence_has_two_different_elements,The following statement contains a magic number: var distinctNumbers = numbers.Distinct(n => n % 2);
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_unmodified_sequence_if_sequence_has_two_different_elements,The following statement contains a magic number: distinctNumbers.Should().Equal(1' 2);
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_only_tuples_whose_selected_values_are_considered_distinct,The following statement contains a magic number: Tuple<int' string>[] digitNames =                  {                      Tuple.Create(1' "One")'                      Tuple.Create(1' "I SHOULDN'T BE HERE")'                      Tuple.Create(2' "Two")'                      Tuple.Create(2' "ME NEITHER")'                      Tuple.Create(2' "ME NEITHER")'                      Tuple.Create(3' "Three")                  };
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_only_tuples_whose_selected_values_are_considered_distinct,The following statement contains a magic number: Tuple<int' string>[] digitNames =                  {                      Tuple.Create(1' "One")'                      Tuple.Create(1' "I SHOULDN'T BE HERE")'                      Tuple.Create(2' "Two")'                      Tuple.Create(2' "ME NEITHER")'                      Tuple.Create(2' "ME NEITHER")'                      Tuple.Create(3' "Three")                  };
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_only_tuples_whose_selected_values_are_considered_distinct,The following statement contains a magic number: Tuple<int' string>[] digitNames =                  {                      Tuple.Create(1' "One")'                      Tuple.Create(1' "I SHOULDN'T BE HERE")'                      Tuple.Create(2' "Two")'                      Tuple.Create(2' "ME NEITHER")'                      Tuple.Create(2' "ME NEITHER")'                      Tuple.Create(3' "Three")                  };
Magic Number,ExtraLinq.Tests,WithoutEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_only_tuples_whose_selected_values_are_considered_distinct,The following statement contains a magic number: Tuple<int' string>[] digitNames =                  {                      Tuple.Create(1' "One")'                      Tuple.Create(1' "I SHOULDN'T BE HERE")'                      Tuple.Create(2' "Two")'                      Tuple.Create(2' "ME NEITHER")'                      Tuple.Create(2' "ME NEITHER")'                      Tuple.Create(3' "Three")                  };
Magic Number,ExtraLinq.Tests,WithEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Throws_ArgumentNullException_when_sequence_is_null,The following statement contains a magic number: Func<int' int> valueSelector = n => n % 2;
Magic Number,ExtraLinq.Tests,WithEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Throws_ArgumentNullException_when_equality_comparer_is_null,The following statement contains a magic number: Func<int' int> valueSelector = n => n % 2;
Magic Number,ExtraLinq.Tests,WithEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_an_empty_sequence_when_sequence_is_empty,The following statement contains a magic number: Func<int' int> valueSelector = n => n % 2;
Magic Number,ExtraLinq.Tests,WithEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_unmodified_sequence_if_sequence_has_one_element,The following statement contains a magic number: Func<int' int> valueSelector = n => n % 2;
Magic Number,ExtraLinq.Tests,WithEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_only_tuples_whose_selected_string_values_are_considered_distinct,The following statement contains a magic number: Tuple<int' string>[] spellingsOfJavaScript =                  {                      Tuple.Create(1' "JavaScript")'                      Tuple.Create(2' "Javascript")'                      Tuple.Create(3' "javascript")                  };
Magic Number,ExtraLinq.Tests,WithEqualityComparer,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\DistinctTests.cs,Returns_only_tuples_whose_selected_string_values_are_considered_distinct,The following statement contains a magic number: Tuple<int' string>[] spellingsOfJavaScript =                  {                      Tuple.Create(1' "JavaScript")'                      Tuple.Create(2' "Javascript")'                      Tuple.Create(3' "javascript")                  };
Magic Number,ExtraLinq.Tests,PartitionTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\PartitionTests.cs,Throws_ArgumentNullException_when_predicate_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,PartitionTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\PartitionTests.cs,Throws_ArgumentNullException_when_predicate_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,PartitionTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\PartitionTests.cs,Returns_two_empty_sequences_for_an_empty_sequence,The following statement contains a magic number: Func<int' bool> isEven = x => x % 2 == 0;
Magic Number,ExtraLinq.Tests,PartitionTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\PartitionTests.cs,CorrectlyPartitionsTheGivenSequenceOfNumbersIntoEvensAndOdds,The following statement contains a magic number: Func<int' bool> isEven = x => x % 2 == 0;
Magic Number,ExtraLinq.Tests,ToHashSetTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ToHashSetTests.cs,The_returned_hash_set_contains_all_distinct_values,The following statement contains a magic number: int[] numbers = { 1' 2' 2' 3' 3' 3 };
Magic Number,ExtraLinq.Tests,ToHashSetTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ToHashSetTests.cs,The_returned_hash_set_contains_all_distinct_values,The following statement contains a magic number: int[] numbers = { 1' 2' 2' 3' 3' 3 };
Magic Number,ExtraLinq.Tests,ToHashSetTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ToHashSetTests.cs,The_returned_hash_set_contains_all_distinct_values,The following statement contains a magic number: int[] numbers = { 1' 2' 2' 3' 3' 3 };
Magic Number,ExtraLinq.Tests,ToHashSetTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ToHashSetTests.cs,The_returned_hash_set_contains_all_distinct_values,The following statement contains a magic number: int[] numbers = { 1' 2' 2' 3' 3' 3 };
Magic Number,ExtraLinq.Tests,ToHashSetTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ToHashSetTests.cs,The_returned_hash_set_contains_all_distinct_values,The following statement contains a magic number: int[] numbers = { 1' 2' 2' 3' 3' 3 };
Magic Number,ExtraLinq.Tests,ToHashSetTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ToHashSetTests.cs,The_returned_hash_set_contains_all_distinct_values,The following statement contains a magic number: hashSet.Should().HaveCount(3);
Magic Number,ExtraLinq.Tests,ToHashSetTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ToHashSetTests.cs,The_returned_hash_set_contains_all_distinct_values,The following statement contains a magic number: hashSet.Should().Contain(2);
Magic Number,ExtraLinq.Tests,ToHashSetTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ToHashSetTests.cs,The_returned_hash_set_contains_all_distinct_values,The following statement contains a magic number: hashSet.Should().Contain(3);
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Eagerly_throws_ArgumentOutOfRangeException_when_count_is_negative,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Eagerly_throws_ArgumentOutOfRangeException_when_count_is_negative,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Returns_an_empty_sequence_when_count_is_zero,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Returns_an_empty_sequence_when_count_is_zero,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Returns_an_identical_sequence_when_count_equals_one,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Returns_an_identical_sequence_when_count_equals_one,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_a_single_item_sequence_when_count_is_greater_than_one,The following statement contains a magic number: var sheldonsOcdGreeting = sheldonsGreeting.Repeat(3);
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_a_sequence_with_multiple_items_when_count_is_greater_than_one,The following statement contains a magic number: var repeatedEeatingSounds = eatingSounds.Repeat(2);
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_the_given_sequence_lazily,The following statement contains a magic number: IEnumerable<int> infiniteSequence = new[] { 1' 2' 3 }.Cycle();
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_the_given_sequence_lazily,The following statement contains a magic number: IEnumerable<int> infiniteSequence = new[] { 1' 2' 3 }.Cycle();
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_the_given_sequence_lazily,The following statement contains a magic number: var repeatedSequence = infiniteSequence.Repeat(2048);
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_the_given_sequence_lazily,The following statement contains a magic number: var firstFiveItems = repeatedSequence.Take(5);
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_the_given_sequence_lazily,The following statement contains a magic number: firstFiveItems.Should().Equal(new[] { 1' 2' 3' 1' 2 });
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_the_given_sequence_lazily,The following statement contains a magic number: firstFiveItems.Should().Equal(new[] { 1' 2' 3' 1' 2 });
Magic Number,ExtraLinq.Tests,RepeatTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RepeatTests.cs,Repeats_the_given_sequence_lazily,The following statement contains a magic number: firstFiveItems.Should().Equal(new[] { 1' 2' 3' 1' 2 });
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Eagerly_throws_ArgumentNullException_when_predicate_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Eagerly_throws_ArgumentNullException_when_predicate_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate,The following statement contains a magic number: int[] expectedOdds = { 1' 3' 5 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate,The following statement contains a magic number: int[] expectedOdds = { 1' 3' 5 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate,The following statement contains a magic number: Func<int' bool> isEven = n => n % 2 == 0;
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Eagerly_throws_ArgumentNullException_when_predicate_with_index_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Eagerly_throws_ArgumentNullException_when_predicate_with_index_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] numbers = { 2' 3' 5' 7' 11' 13' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] numbers = { 2' 3' 5' 7' 11' 13' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] numbers = { 2' 3' 5' 7' 11' 13' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] numbers = { 2' 3' 5' 7' 11' 13' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] numbers = { 2' 3' 5' 7' 11' 13' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] numbers = { 2' 3' 5' 7' 11' 13' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] numbers = { 2' 3' 5' 7' 11' 13' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] numbers = { 2' 3' 5' 7' 11' 13' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] expectedNumbers = { 2' 3' 7' 11' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] expectedNumbers = { 2' 3' 7' 11' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] expectedNumbers = { 2' 3' 7' 11' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] expectedNumbers = { 2' 3' 7' 11' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] expectedNumbers = { 2' 3' 7' 11' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: int[] expectedNumbers = { 2' 3' 7' 11' 17' 19 };
Magic Number,ExtraLinq.Tests,WhereNotTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WhereNotTests.cs,Returns_all_items_not_matching_the_specified_predicate_with_index,The following statement contains a magic number: IEnumerable<int> numbersExceptEveryThird = numbers                  .WhereNot((number' index) => (index + 1) % 3 == 0);
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Throws_ArgumentNullException_when_action_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Throws_ArgumentNullException_when_action_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Calls_the_specified_action_for_each_element_when_enumerated,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Calls_the_specified_action_for_each_element_when_enumerated,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Returns_all_elements_of_the_source_sequence_without_modification,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Returns_all_elements_of_the_source_sequence_without_modification,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Throws_ArgumentNullException_when_action_with_index_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Throws_ArgumentNullException_when_action_with_index_is_null,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Calls_the_specified_action_with_index_for_each_element_when_enumerated,The following statement contains a magic number: int[] numbers = { 3' 4' 5 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Calls_the_specified_action_with_index_for_each_element_when_enumerated,The following statement contains a magic number: int[] numbers = { 3' 4' 5 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Calls_the_specified_action_with_index_for_each_element_when_enumerated,The following statement contains a magic number: int[] numbers = { 3' 4' 5 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Calls_the_specified_action_with_index_for_each_element_when_enumerated,The following statement contains a magic number: indicesPassedToAction.Should().Equal(new[] { 0' 1' 2 });
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Returns_all_elements_of_the_source_sequence_without_modification_for_action_with_index,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,EachTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\EachTests.cs,Returns_all_elements_of_the_source_sequence_without_modification_for_action_with_index,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,WithoutTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WithoutTests.cs,Returns_sequence_without_specified_element,The following statement contains a magic number: letters.Should().HaveCount(3);
Magic Number,ExtraLinq.Tests,WithoutTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WithoutTests.cs,Returns_sequence_without_specified_elements,The following statement contains a magic number: letters.Should().HaveCount(2);
Magic Number,ExtraLinq.Tests,WithoutTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WithoutTests.cs,Returns_unmodified_sequence_when_sequence_does_not_contain_any_element_to_remove,The following statement contains a magic number: letters.Should().HaveCount(4);
Magic Number,ExtraLinq.Tests,WithoutTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WithoutTests.cs,Returns_sequence_without_elements_equal_to_passed_element,The following statement contains a magic number: fruits.Should().HaveCount(2);
Magic Number,ExtraLinq.Tests,WithoutTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WithoutTests.cs,Does_not_remove_elements_that_do_not_match_the_passed_element_but_each_other,The following statement contains a magic number: fruitsWithoutElement.Should().HaveCount(3);
Magic Number,ExtraLinq.Tests,WithoutTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\WithoutTests.cs,Returns_unmodified_sequence_when_sequence_does_not_contain_any_element_to_remove_with_equality_comparer,The following statement contains a magic number: stringNumbers.Should().HaveCount(4);
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Throws_ArgumentOutOfRangeException_when_expected_count_is_negative,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => letters.HasExactly(-10));
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Returns_true_when_actual_count_equals_expected_count,The following statement contains a magic number: letters.HasExactly(4).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Returns_true_when_actual_count_equals_expected_count,The following statement contains a magic number: letters.ToList().HasExactly(4).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Returns_false_when_actual_count_does_not_equal_expected_count,The following statement contains a magic number: letters.HasExactly(100).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Returns_false_when_actual_count_does_not_equal_expected_count,The following statement contains a magic number: letters.ToList().HasExactly(100).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Throws_ArgumentOutOfRangeException_when_expected_count_is_negative_and_predicate_is_valid,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => letters.HasExactly(-10' alwaysTruePredicate));
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Returns_true_when_actual_count_equals_expected_count_with_predicate,The following statement contains a magic number: fruits.HasExactly(2' fruit => fruit.StartsWith("a")).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Returns_true_when_actual_count_does_not_equal_expected_count_with_predicate,The following statement contains a magic number: fruits.HasExactly(2' fruit => fruit.StartsWith("b")).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasExactlyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasExactlyTests.cs,Returns_true_when_actual_count_does_not_equal_expected_count_with_predicate,The following statement contains a magic number: fruits.HasExactly(10' fruit => fruit.StartsWith("c")).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Throws_ArgumentOutOfRangeException_when_expected_count_is_negative,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => letters.HasAtMost(-10));
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_true_when_actual_count_is_equal_to_or_lower_than_expected_count,The following statement contains a magic number: letters.HasAtMost(4).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_true_when_actual_count_is_equal_to_or_lower_than_expected_count,The following statement contains a magic number: letters.HasAtMost(5).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_true_when_actual_count_is_equal_to_or_lower_than_expected_count,The following statement contains a magic number: letters.ToList().HasAtMost(4).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_true_when_actual_count_is_equal_to_or_lower_than_expected_count,The following statement contains a magic number: letters.ToList().HasAtMost(5).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_false_when_actual_count_is_greater_than_expected_max_count,The following statement contains a magic number: letters.HasAtMost(4).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_false_when_actual_count_is_greater_than_expected_max_count,The following statement contains a magic number: letters.HasAtMost(5).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_false_when_actual_count_is_greater_than_expected_max_count,The following statement contains a magic number: letters.ToList().HasAtMost(4).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_false_when_actual_count_is_greater_than_expected_max_count,The following statement contains a magic number: letters.ToList().HasAtMost(5).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_true_when_actual_count_is_equal_to_or_lower_than_expected_count_with_predicate,The following statement contains a magic number: fruits.HasAtMost(2' startsWithLowercasedA).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtMostTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtMostTests.cs,Returns_true_when_actual_count_is_equal_to_or_lower_than_expected_count_with_predicate,The following statement contains a magic number: fruits.HasAtMost(3' startsWithLowercasedA).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_true_when_actual_count_is_greater_than_or_equal_to_expected_min_count,The following statement contains a magic number: letters.HasAtLeast(2).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_true_when_actual_count_is_greater_than_or_equal_to_expected_min_count,The following statement contains a magic number: letters.HasAtLeast(4).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_true_when_actual_count_is_greater_than_or_equal_to_expected_min_count,The following statement contains a magic number: letters.ToList().HasAtLeast(2).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_true_when_actual_count_is_greater_than_or_equal_to_expected_min_count,The following statement contains a magic number: letters.ToList().HasAtLeast(4).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_false_when_actual_count_is_lower_than_expected_min_count,The following statement contains a magic number: letters.HasAtLeast(5).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_false_when_actual_count_is_lower_than_expected_min_count,The following statement contains a magic number: letters.HasAtLeast(10).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_false_when_actual_count_is_lower_than_expected_min_count,The following statement contains a magic number: letters.ToList().HasAtLeast(5).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_false_when_actual_count_is_lower_than_expected_min_count,The following statement contains a magic number: letters.ToList().HasAtLeast(10).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_true_when_actual_count_is_greater_than_or_equal_to_expected_min_count_with_predicate,The following statement contains a magic number: fruits.HasAtLeast(2' fruit => fruit.StartsWith("a")).Should().BeTrue();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_false_when_actual_count_is_lower_than_expected_min_count_with_predicate,The following statement contains a magic number: fruits.HasAtLeast(3' fruit => fruit.StartsWith("a")).Should().BeFalse();
Magic Number,ExtraLinq.Tests,HasAtLeastTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\HasAtLeastTests.cs,Returns_false_when_actual_count_is_lower_than_expected_min_count_with_predicate,The following statement contains a magic number: fruits.HasAtLeast(2' fruit => fruit.StartsWith("b")).Should().BeFalse();
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_separator_correctly,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_separator_correctly,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_separator_correctly,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_separator_correctly,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_separator_correctly,The following statement contains a magic number: int[] expectedNumbers = { 1' 0' 2' 0' 3' 0' 4' 0' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_separator_correctly,The following statement contains a magic number: int[] expectedNumbers = { 1' 0' 2' 0' 3' 0' 4' 0' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_separator_correctly,The following statement contains a magic number: int[] expectedNumbers = { 1' 0' 2' 0' 3' 0' 4' 0' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_separator_correctly,The following statement contains a magic number: int[] expectedNumbers = { 1' 0' 2' 0' 3' 0' 4' 0' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] numbers = { 1' 2' 3' 4' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] expectedNumbers = { 1' 0' 0' 0' 2' 0' 0' 0' 3' 0' 0' 0' 4' 0' 0' 0' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] expectedNumbers = { 1' 0' 0' 0' 2' 0' 0' 0' 3' 0' 0' 0' 4' 0' 0' 0' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] expectedNumbers = { 1' 0' 0' 0' 2' 0' 0' 0' 3' 0' 0' 0' 4' 0' 0' 0' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] expectedNumbers = { 1' 0' 0' 0' 2' 0' 0' 0' 3' 0' 0' 0' 4' 0' 0' 0' 5 };
Magic Number,ExtraLinq.Tests,IntersperseTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IntersperseTests.cs,Inserts_seperator_right_amount,The following statement contains a magic number: int[] separatedNumbers = numbers.Intersperse(0' 3).ToArray();
Magic Number,ExtraLinq.Tests,IsEmptyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IsEmptyTests.cs,Returns_false_when_sequence_is_not_empty,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,IsEmptyTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\IsEmptyTests.cs,Returns_false_when_sequence_is_not_empty,The following statement contains a magic number: int[] numbers = { 1' 2' 3 };
Magic Number,ExtraLinq.Tests,RandomTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RandomTests.cs,Only_returns_element_found_within_sequence_with_random,The following statement contains a magic number: const int arbitrarySeed = 1337;
Magic Number,ExtraLinq.Tests,RandomTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RandomTests.cs,Throws_ArgumentOutOfRangeException_when_count_is_negative,The following statement contains a magic number: const int invalidItemCount = -5;
Magic Number,ExtraLinq.Tests,RandomTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RandomTests.cs,Throws_ArgumentOutOfRangeException_when_count_is_greater_than_sequence_count,The following statement contains a magic number: const int invalidItemCount = 100;
Magic Number,ExtraLinq.Tests,RandomTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RandomTests.cs,Only_returns_items_found_within_sequence,The following statement contains a magic number: IEnumerable<char> threeRandomLetters = letters.Random(3);
Magic Number,ExtraLinq.Tests,RandomTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RandomTests.cs,Throws_ArgumentOutOfRangeException_when_count_is_negative_with_random_and_count,The following statement contains a magic number: const int negativeElementsCount = -5;
Magic Number,ExtraLinq.Tests,RandomTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RandomTests.cs,Throws_ArgumentNullException_when_random_is_null_with_random_and_count,The following statement contains a magic number: const int negativeElementsCount = 2;
Magic Number,ExtraLinq.Tests,RandomTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RandomTests.cs,Only_returns_items_found_within_sequence_with_random_and_count,The following statement contains a magic number: const int arbitrarySeed = 1337;
Magic Number,ExtraLinq.Tests,RandomTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\RandomTests.cs,Only_returns_items_found_within_sequence_with_random_and_count,The following statement contains a magic number: IEnumerable<char> threeRandomCharacters = letters.Random(3' random);
Magic Number,ExtraLinq.Tests,ShuffleTests,D:\research\architectureSmells\repos\MariusSchulz_ExtraLINQ\src\tests\ExtraLINQ.Tests\IEnumerable\ShuffleTests.cs,Uses_the_specified_random_number_generator,The following statement contains a magic number: const int arbitrarySeed = 1337;
