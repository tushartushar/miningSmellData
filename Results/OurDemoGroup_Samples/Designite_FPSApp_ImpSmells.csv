Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FPSApp.GeometricPrimitives,SpherePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\SpherePrimitive.cs,SpherePrimitive,Cyclomatic complexity of the method is 8
Long Statement,FPSApp,HealthServiceProxy,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Service\HealthServiceProxy.cs,Connect,The length of the statement  "	DuplexChannelFactory<IFPSService> pipeFactory = new DuplexChannelFactory<IFPSService> (new InstanceContext (callbackInstance)' new NetNamedPipeBinding ()' new EndpointAddress (AppHealthService.BaseAddress + AppHealthService.ServiceAddress)); " is 241.
Long Statement,FPSApp,HealthServiceProxy,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Service\HealthServiceProxy.cs,Connect,The length of the statement  "		pipeProxy.Subscribe (System.Reflection.Assembly.GetExecutingAssembly ().Location' Process.GetCurrentProcess ().ProcessName); " is 124.
Long Statement,FPSApp.Scene,SceneViewModel,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Scene\SceneViewModel.cs,AddSphereMesh,The length of the statement  "			sphere.GeometryModel.Transform = new TranslateTransform3D (step * (sideSize - x) - ((sideSize * sideSize) / 2.0f)' yOffset' step * (sideSize - y) - ((sideSize * sideSize) / 2.0f)); " is 180.
Long Statement,FPSApp.Scene,SceneViewModel,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Scene\SceneViewModel.cs,AddCubeMesh,The length of the statement  "			cube.GeometryModel.Transform = new TranslateTransform3D (step * (sideSize - x) - ((sideSize * sideSize) / 2.0f)' yOffset' step * (sideSize - y) - ((sideSize * sideSize) / 2.0f)); " is 178.
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: foreach (Vector3D normal in normals) {  	// Get two vectors perpendicular to the face normal and to each other.  	Vector3D side1 = new Vector3D (normal.Y' normal.Z' normal.X);  	Vector3D side2 = Vector3D.CrossProduct (normal' side1);  	// Six indices (two triangles) per face.  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 1);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 3);  	// Four vertices per face.  	Vector3D vertex = (normal - side1 - side2) * size / 2;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 0));  	vertex = (normal - side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 1));  	vertex = (normal + side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 0));  	vertex = (normal + side1 - side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 1));  }  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: foreach (Vector3D normal in normals) {  	// Get two vectors perpendicular to the face normal and to each other.  	Vector3D side1 = new Vector3D (normal.Y' normal.Z' normal.X);  	Vector3D side2 = Vector3D.CrossProduct (normal' side1);  	// Six indices (two triangles) per face.  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 1);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 3);  	// Four vertices per face.  	Vector3D vertex = (normal - side1 - side2) * size / 2;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 0));  	vertex = (normal - side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 1));  	vertex = (normal + side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 0));  	vertex = (normal + side1 - side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 1));  }  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: foreach (Vector3D normal in normals) {  	// Get two vectors perpendicular to the face normal and to each other.  	Vector3D side1 = new Vector3D (normal.Y' normal.Z' normal.X);  	Vector3D side2 = Vector3D.CrossProduct (normal' side1);  	// Six indices (two triangles) per face.  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 1);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 3);  	// Four vertices per face.  	Vector3D vertex = (normal - side1 - side2) * size / 2;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 0));  	vertex = (normal - side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 1));  	vertex = (normal + side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 0));  	vertex = (normal + side1 - side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 1));  }  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: foreach (Vector3D normal in normals) {  	// Get two vectors perpendicular to the face normal and to each other.  	Vector3D side1 = new Vector3D (normal.Y' normal.Z' normal.X);  	Vector3D side2 = Vector3D.CrossProduct (normal' side1);  	// Six indices (two triangles) per face.  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 1);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 3);  	// Four vertices per face.  	Vector3D vertex = (normal - side1 - side2) * size / 2;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 0));  	vertex = (normal - side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 1));  	vertex = (normal + side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 0));  	vertex = (normal + side1 - side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 1));  }  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: foreach (Vector3D normal in normals) {  	// Get two vectors perpendicular to the face normal and to each other.  	Vector3D side1 = new Vector3D (normal.Y' normal.Z' normal.X);  	Vector3D side2 = Vector3D.CrossProduct (normal' side1);  	// Six indices (two triangles) per face.  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 1);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 3);  	// Four vertices per face.  	Vector3D vertex = (normal - side1 - side2) * size / 2;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 0));  	vertex = (normal - side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 1));  	vertex = (normal + side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 0));  	vertex = (normal + side1 - side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 1));  }  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: foreach (Vector3D normal in normals) {  	// Get two vectors perpendicular to the face normal and to each other.  	Vector3D side1 = new Vector3D (normal.Y' normal.Z' normal.X);  	Vector3D side2 = Vector3D.CrossProduct (normal' side1);  	// Six indices (two triangles) per face.  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 1);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 3);  	// Four vertices per face.  	Vector3D vertex = (normal - side1 - side2) * size / 2;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 0));  	vertex = (normal - side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 1));  	vertex = (normal + side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 0));  	vertex = (normal + side1 - side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 1));  }  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: foreach (Vector3D normal in normals) {  	// Get two vectors perpendicular to the face normal and to each other.  	Vector3D side1 = new Vector3D (normal.Y' normal.Z' normal.X);  	Vector3D side2 = Vector3D.CrossProduct (normal' side1);  	// Six indices (two triangles) per face.  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 1);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 0);  	AddIndex (CurrentVertex + 2);  	AddIndex (CurrentVertex + 3);  	// Four vertices per face.  	Vector3D vertex = (normal - side1 - side2) * size / 2;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 0));  	vertex = (normal - side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (0' 1));  	vertex = (normal + side1 + side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 0));  	vertex = (normal + side1 - side2) * size / 2;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddTextureCoordinates (new System.Windows.Point (1' 1));  }  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: AddIndex (CurrentVertex + 2);  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: AddIndex (CurrentVertex + 2);  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: AddIndex (CurrentVertex + 3);  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: vertex = (normal - side1 + side2) * size / 2;  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: vertex = (normal + side1 + side2) * size / 2;  
Magic Number,FPSApp.GeometricPrimitives,CubePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CubePrimitive.cs,CubePrimitive,The following statement contains a magic number: vertex = (normal + side1 - side2) * size / 2;  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: if (tessellation < 3)  	throw new ArgumentOutOfRangeException ("tessellation");  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: height /= 2;  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: for (int i = 0; i < tessellation; i++) {  	Vector3D normal = GetCircleVector (i' tessellation);  	Vector3D vertex = normal * radius + up * height;  	Point3D vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	vertex = normal * radius + down * height;  	vertexPoint = new Point3D (vertex.X' vertex.Y' vertex.Z);  	AddVertex (vertexPoint' normal);  	AddIndex (i * 2);  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 2) % (tessellation * 2));  	AddIndex (i * 2 + 1);  	AddIndex ((i * 2 + 3) % (tessellation * 2));  	AddIndex ((i * 2 + 2) % (tessellation * 2));  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex (i * 2);  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex (i * 2 + 1);  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 2) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 2) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 2) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex (i * 2 + 1);  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 3) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 3) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 3) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 2) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 2) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CylinderPrimitive,The following statement contains a magic number: AddIndex ((i * 2 + 2) % (tessellation * 2));  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CreateCap,The following statement contains a magic number: for (int i = 0; i < tessellation - 2; i++) {  	if (normal.Y > 0) {  		AddIndex (CurrentVertex);  		AddIndex (CurrentVertex + (i + 1) % tessellation);  		AddIndex (CurrentVertex + (i + 2) % tessellation);  	}  	else {  		AddIndex (CurrentVertex);  		AddIndex (CurrentVertex + (i + 2) % tessellation);  		AddIndex (CurrentVertex + (i + 1) % tessellation);  	}  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CreateCap,The following statement contains a magic number: for (int i = 0; i < tessellation - 2; i++) {  	if (normal.Y > 0) {  		AddIndex (CurrentVertex);  		AddIndex (CurrentVertex + (i + 1) % tessellation);  		AddIndex (CurrentVertex + (i + 2) % tessellation);  	}  	else {  		AddIndex (CurrentVertex);  		AddIndex (CurrentVertex + (i + 2) % tessellation);  		AddIndex (CurrentVertex + (i + 1) % tessellation);  	}  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CreateCap,The following statement contains a magic number: for (int i = 0; i < tessellation - 2; i++) {  	if (normal.Y > 0) {  		AddIndex (CurrentVertex);  		AddIndex (CurrentVertex + (i + 1) % tessellation);  		AddIndex (CurrentVertex + (i + 2) % tessellation);  	}  	else {  		AddIndex (CurrentVertex);  		AddIndex (CurrentVertex + (i + 2) % tessellation);  		AddIndex (CurrentVertex + (i + 1) % tessellation);  	}  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CreateCap,The following statement contains a magic number: if (normal.Y > 0) {  	AddIndex (CurrentVertex);  	AddIndex (CurrentVertex + (i + 1) % tessellation);  	AddIndex (CurrentVertex + (i + 2) % tessellation);  }  else {  	AddIndex (CurrentVertex);  	AddIndex (CurrentVertex + (i + 2) % tessellation);  	AddIndex (CurrentVertex + (i + 1) % tessellation);  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CreateCap,The following statement contains a magic number: if (normal.Y > 0) {  	AddIndex (CurrentVertex);  	AddIndex (CurrentVertex + (i + 1) % tessellation);  	AddIndex (CurrentVertex + (i + 2) % tessellation);  }  else {  	AddIndex (CurrentVertex);  	AddIndex (CurrentVertex + (i + 2) % tessellation);  	AddIndex (CurrentVertex + (i + 1) % tessellation);  }  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CreateCap,The following statement contains a magic number: AddIndex (CurrentVertex + (i + 2) % tessellation);  
Magic Number,FPSApp.GeometricPrimitives,CylinderPrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\CylinderPrimitive.cs,CreateCap,The following statement contains a magic number: AddIndex (CurrentVertex + (i + 2) % tessellation);  
Magic Number,FPSApp.GeometricPrimitives,SpherePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\SpherePrimitive.cs,SpherePrimitive,The following statement contains a magic number: if (tessellation < 3)  	throw new ArgumentOutOfRangeException ("tessellation");  
Magic Number,FPSApp.GeometricPrimitives,SpherePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\SpherePrimitive.cs,SpherePrimitive,The following statement contains a magic number: for (int i = 0; i < verticalSegments - 2; i++) {  	for (int j = 0; j < horizontalSegments; j++) {  		int nextI = i + 1;  		int nextJ = (j + 1) % horizontalSegments;  		AddIndex (1 + i * horizontalSegments + j);  		AddIndex (1 + i * horizontalSegments + nextJ);  		AddIndex (1 + nextI * horizontalSegments + j);  		AddIndex (1 + i * horizontalSegments + nextJ);  		AddIndex (1 + nextI * horizontalSegments + nextJ);  		AddIndex (1 + nextI * horizontalSegments + j);  	}  }  
Magic Number,FPSApp.GeometricPrimitives,SpherePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\SpherePrimitive.cs,SpherePrimitive,The following statement contains a magic number: for (int i = 0; i < horizontalSegments; i++) {  	AddIndex (CurrentVertex - 1);  	AddIndex (CurrentVertex - 2 - (i + 1) % horizontalSegments);  	AddIndex (CurrentVertex - 2 - i);  }  
Magic Number,FPSApp.GeometricPrimitives,SpherePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\SpherePrimitive.cs,SpherePrimitive,The following statement contains a magic number: for (int i = 0; i < horizontalSegments; i++) {  	AddIndex (CurrentVertex - 1);  	AddIndex (CurrentVertex - 2 - (i + 1) % horizontalSegments);  	AddIndex (CurrentVertex - 2 - i);  }  
Magic Number,FPSApp.GeometricPrimitives,SpherePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\SpherePrimitive.cs,SpherePrimitive,The following statement contains a magic number: AddIndex (CurrentVertex - 2 - (i + 1) % horizontalSegments);  
Magic Number,FPSApp.GeometricPrimitives,SpherePrimitive,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\GeometricPrimitives\SpherePrimitive.cs,SpherePrimitive,The following statement contains a magic number: AddIndex (CurrentVertex - 2 - i);  
Magic Number,FPSApp,HealthServiceClient,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Service\HealthServiceClient.cs,HealthServiceClient,The following statement contains a magic number: if (healthServiceProxy.Connect (this)) {  	timer = new System.Timers.Timer ();  	// raise per 3 seconds  	timer.Interval = 3;  	timer.Elapsed += new ElapsedEventHandler (UpdateServer);  	timer.Start ();  	fpsTimer = new BasicTimer ();  }  
Magic Number,FPSApp,HealthServiceClient,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Service\HealthServiceClient.cs,HealthServiceClient,The following statement contains a magic number: timer.Interval = 3;  
Magic Number,FPSApp,SecondaryWindow,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\SecondaryWindow.xaml.cs,SleepButton_Click,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,FPSApp,SecondaryWindow,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\SecondaryWindow.xaml.cs,AddMeshButton_Click,The following statement contains a magic number: scene.AddSphereMesh (5' 0);  
Magic Number,FPSApp,SecondaryWindow,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\SecondaryWindow.xaml.cs,AddMeshButton_Click,The following statement contains a magic number: scene.AddCubeMesh (5' 5);  
Magic Number,FPSApp,SecondaryWindow,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\SecondaryWindow.xaml.cs,AddMeshButton_Click,The following statement contains a magic number: scene.AddCubeMesh (5' 5);  
Magic Number,FPSApp,MainWindow,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\MainWindow.xaml.cs,AddMeshButton_Click,The following statement contains a magic number: scene.AddSphereMesh (5' 0);  
Magic Number,FPSApp.Scene,SceneViewModel,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Scene\SceneViewModel.cs,SceneViewModel,The following statement contains a magic number: directionalLight = new DirectionalLight (Colors.White' new Vector3D (-5' -5' -7));  
Magic Number,FPSApp.Scene,SceneViewModel,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Scene\SceneViewModel.cs,SceneViewModel,The following statement contains a magic number: directionalLight = new DirectionalLight (Colors.White' new Vector3D (-5' -5' -7));  
Magic Number,FPSApp.Scene,SceneViewModel,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Scene\SceneViewModel.cs,SceneViewModel,The following statement contains a magic number: directionalLight = new DirectionalLight (Colors.White' new Vector3D (-5' -5' -7));  
Magic Number,FPSApp.Scene,SceneViewModel,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Scene\SceneViewModel.cs,AddSphereMesh,The following statement contains a magic number: for (int x = 0; x < sideSize; x++) {  	for (int y = 0; y < sideSize; y++) {  		SpherePrimitive sphere = new SpherePrimitive (new DiffuseMaterial (Brushes.Red)' 2.5f' 40);  		sphere.GeometryModel.Transform = new TranslateTransform3D (step * (sideSize - x) - ((sideSize * sideSize) / 2.0f)' yOffset' step * (sideSize - y) - ((sideSize * sideSize) / 2.0f));  		scene.Children.Add (sphere.GeometryModel);  	}  }  
Magic Number,FPSApp.Scene,SceneViewModel,C:\repos\OurDemoGroup_Samples\FPSApp\FPSApp\Scene\SceneViewModel.cs,AddSphereMesh,The following statement contains a magic number: for (int y = 0; y < sideSize; y++) {  	SpherePrimitive sphere = new SpherePrimitive (new DiffuseMaterial (Brushes.Red)' 2.5f' 40);  	sphere.GeometryModel.Transform = new TranslateTransform3D (step * (sideSize - x) - ((sideSize * sideSize) / 2.0f)' yOffset' step * (sideSize - y) - ((sideSize * sideSize) / 2.0f));  	scene.Children.Add (sphere.GeometryModel);  }  
