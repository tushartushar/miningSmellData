Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,Cyclomatic complexity of the method is 9
Long Parameter List,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,CreateFileMapping,The method has 6 parameters.
Long Parameter List,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,MapViewOfFile,The method has 5 parameters.
Long Statement,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,capGrabber_PropertyChanged,The length of the statement  "				BitmapSource = Imaging.CreateBitmapSourceFromMemorySection (_section' _capGrabber.Width' _capGrabber.Height' PixelFormats.Bgr32' _capGrabber.Width * PixelFormats.Bgr32.BitsPerPixel / 8' 0) as InteropBitmap; " is 206.
Long Statement,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The length of the statement  "			if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) { " is 121.
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,capGrabber_PropertyChanged,The following statement contains a magic number: Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.DataBind' (SendOrPostCallback)delegate {  	try {  		if ((_capGrabber.Width != default(int)) && (_capGrabber.Height != default(int))) {  			// Get the pixel count  			uint pcount = (uint)(_capGrabber.Width * _capGrabber.Height * PixelFormats.Bgr32.BitsPerPixel / 8);  			// Create a file mapping  			_section = CreateFileMapping (new IntPtr (-1)' IntPtr.Zero' 0x04' 0' pcount' null);  			_map = MapViewOfFile (_section' 0xF001F' 0' 0' pcount);  			// Get the bitmap  			BitmapSource = Imaging.CreateBitmapSourceFromMemorySection (_section' _capGrabber.Width' _capGrabber.Height' PixelFormats.Bgr32' _capGrabber.Width * PixelFormats.Bgr32.BitsPerPixel / 8' 0) as InteropBitmap;  			_capGrabber.Map = _map;  			// Invoke event  			if (NewBitmapReady != null) {  				NewBitmapReady (this' null);  			}  		}  	}  	catch (Exception ex) {  		// Trace  		Trace.TraceError (ex.Message);  	}  }' null);  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,capGrabber_PropertyChanged,The following statement contains a magic number: Dispatcher.Invoke (System.Windows.Threading.DispatcherPriority.DataBind' (SendOrPostCallback)delegate {  	try {  		if ((_capGrabber.Width != default(int)) && (_capGrabber.Height != default(int))) {  			// Get the pixel count  			uint pcount = (uint)(_capGrabber.Width * _capGrabber.Height * PixelFormats.Bgr32.BitsPerPixel / 8);  			// Create a file mapping  			_section = CreateFileMapping (new IntPtr (-1)' IntPtr.Zero' 0x04' 0' pcount' null);  			_map = MapViewOfFile (_section' 0xF001F' 0' 0' pcount);  			// Get the bitmap  			BitmapSource = Imaging.CreateBitmapSourceFromMemorySection (_section' _capGrabber.Width' _capGrabber.Height' PixelFormats.Bgr32' _capGrabber.Width * PixelFormats.Bgr32.BitsPerPixel / 8' 0) as InteropBitmap;  			_capGrabber.Map = _map;  			// Invoke event  			if (NewBitmapReady != null) {  				NewBitmapReady (this' null);  			}  		}  	}  	catch (Exception ex) {  		// Trace  		Trace.TraceError (ex.Message);  	}  }' null);  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,capGrabber_PropertyChanged,The following statement contains a magic number: try {  	if ((_capGrabber.Width != default(int)) && (_capGrabber.Height != default(int))) {  		// Get the pixel count  		uint pcount = (uint)(_capGrabber.Width * _capGrabber.Height * PixelFormats.Bgr32.BitsPerPixel / 8);  		// Create a file mapping  		_section = CreateFileMapping (new IntPtr (-1)' IntPtr.Zero' 0x04' 0' pcount' null);  		_map = MapViewOfFile (_section' 0xF001F' 0' 0' pcount);  		// Get the bitmap  		BitmapSource = Imaging.CreateBitmapSourceFromMemorySection (_section' _capGrabber.Width' _capGrabber.Height' PixelFormats.Bgr32' _capGrabber.Width * PixelFormats.Bgr32.BitsPerPixel / 8' 0) as InteropBitmap;  		_capGrabber.Map = _map;  		// Invoke event  		if (NewBitmapReady != null) {  			NewBitmapReady (this' null);  		}  	}  }  catch (Exception ex) {  	// Trace  	Trace.TraceError (ex.Message);  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,capGrabber_PropertyChanged,The following statement contains a magic number: try {  	if ((_capGrabber.Width != default(int)) && (_capGrabber.Height != default(int))) {  		// Get the pixel count  		uint pcount = (uint)(_capGrabber.Width * _capGrabber.Height * PixelFormats.Bgr32.BitsPerPixel / 8);  		// Create a file mapping  		_section = CreateFileMapping (new IntPtr (-1)' IntPtr.Zero' 0x04' 0' pcount' null);  		_map = MapViewOfFile (_section' 0xF001F' 0' 0' pcount);  		// Get the bitmap  		BitmapSource = Imaging.CreateBitmapSourceFromMemorySection (_section' _capGrabber.Width' _capGrabber.Height' PixelFormats.Bgr32' _capGrabber.Width * PixelFormats.Bgr32.BitsPerPixel / 8' 0) as InteropBitmap;  		_capGrabber.Map = _map;  		// Invoke event  		if (NewBitmapReady != null) {  			NewBitmapReady (this' null);  		}  	}  }  catch (Exception ex) {  	// Trace  	Trace.TraceError (ex.Message);  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,capGrabber_PropertyChanged,The following statement contains a magic number: if ((_capGrabber.Width != default(int)) && (_capGrabber.Height != default(int))) {  	// Get the pixel count  	uint pcount = (uint)(_capGrabber.Width * _capGrabber.Height * PixelFormats.Bgr32.BitsPerPixel / 8);  	// Create a file mapping  	_section = CreateFileMapping (new IntPtr (-1)' IntPtr.Zero' 0x04' 0' pcount' null);  	_map = MapViewOfFile (_section' 0xF001F' 0' 0' pcount);  	// Get the bitmap  	BitmapSource = Imaging.CreateBitmapSourceFromMemorySection (_section' _capGrabber.Width' _capGrabber.Height' PixelFormats.Bgr32' _capGrabber.Width * PixelFormats.Bgr32.BitsPerPixel / 8' 0) as InteropBitmap;  	_capGrabber.Map = _map;  	// Invoke event  	if (NewBitmapReady != null) {  		NewBitmapReady (this' null);  	}  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,capGrabber_PropertyChanged,The following statement contains a magic number: if ((_capGrabber.Width != default(int)) && (_capGrabber.Height != default(int))) {  	// Get the pixel count  	uint pcount = (uint)(_capGrabber.Width * _capGrabber.Height * PixelFormats.Bgr32.BitsPerPixel / 8);  	// Create a file mapping  	_section = CreateFileMapping (new IntPtr (-1)' IntPtr.Zero' 0x04' 0' pcount' null);  	_map = MapViewOfFile (_section' 0xF001F' 0' 0' pcount);  	// Get the bitmap  	BitmapSource = Imaging.CreateBitmapSourceFromMemorySection (_section' _capGrabber.Width' _capGrabber.Height' PixelFormats.Bgr32' _capGrabber.Width * PixelFormats.Bgr32.BitsPerPixel / 8' 0) as InteropBitmap;  	_capGrabber.Map = _map;  	// Invoke event  	if (NewBitmapReady != null) {  		NewBitmapReady (this' null);  	}  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,capGrabber_PropertyChanged,The following statement contains a magic number: BitmapSource = Imaging.CreateBitmapSourceFromMemorySection (_section' _capGrabber.Width' _capGrabber.Height' PixelFormats.Bgr32' _capGrabber.Width * PixelFormats.Bgr32.BitsPerPixel / 8' 0) as InteropBitmap;  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,UpdateFramerate,The following statement contains a magic number: if (_timer.ElapsedMilliseconds >= 1000) {  	// Set the framerate  	Framerate = (float)Math.Round (_frames * 1000 / _timer.ElapsedMilliseconds);  	// Reset the timer again so we can count the framerate again  	_timer.Reset ();  	_timer.Start ();  	_frames = 0;  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,UpdateFramerate,The following statement contains a magic number: if (_timer.ElapsedMilliseconds >= 1000) {  	// Set the framerate  	Framerate = (float)Math.Round (_frames * 1000 / _timer.ElapsedMilliseconds);  	// Reset the timer again so we can count the framerate again  	_timer.Reset ();  	_timer.Start ();  	_frames = 0;  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,UpdateFramerate,The following statement contains a magic number: Framerate = (float)Math.Round (_frames * 1000 / _timer.ElapsedMilliseconds);  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: try {  	// Create the main graph  	_graph = Activator.CreateInstance (Type.GetTypeFromCLSID (FilterGraph)) as IGraphBuilder;  	// Create the webcam source  	_sourceObject = FilterInfo.CreateFilter (_monikerString);  	// Create the grabber  	_grabber = Activator.CreateInstance (Type.GetTypeFromCLSID (SampleGrabber)) as ISampleGrabber;  	_grabberObject = _grabber as IBaseFilter;  	// Add the source and grabber to the main graph  	_graph.AddFilter (_sourceObject' "source");  	_graph.AddFilter (_grabberObject' "grabber");  	using (AMMediaType mediaType = new AMMediaType ()) {  		mediaType.MajorType = MediaTypes.Video;  		mediaType.SubType = MediaSubTypes.RGB32;  		_grabber.SetMediaType (mediaType);  		if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) {  			if (_grabber.GetConnectedMediaType (mediaType) == 0) {  				// During startup' this code can be too fast' so try at least 3 times  				int retryCount = 0;  				bool succeeded = false;  				while ((retryCount < 3) && !succeeded) {  					// Tried again  					retryCount++;  					try {  						// Retrieve the grabber information  						VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  						_capGrabber.Width = header.BmiHeader.Width;  						_capGrabber.Height = header.BmiHeader.Height;  						// Succeeded  						succeeded = true;  					}  					catch (Exception retryException) {  						// Trace  						Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  						// Sleep  						Thread.Sleep (50);  					}  				}  			}  		}  		_graph.Render (_grabberObject.GetPin (PinDirection.Output' 0));  		_grabber.SetBufferSamples (false);  		_grabber.SetOneShot (false);  		_grabber.SetCallback (_capGrabber' 1);  		// Get the video window  		IVideoWindow wnd = (IVideoWindow)_graph;  		wnd.put_AutoShow (false);  		wnd = null;  		// Create the control and run  		_control = (IMediaControl)_graph;  		_control.Run ();  		// Wait for the stop signal  		while (!_stopSignal.WaitOne (0' true)) {  			Thread.Sleep (10);  		}  		// Stop when ready  		_control.StopWhenReady ();  	}  }  catch (Exception ex) {  	// Trace  	Trace.WriteLine (ex);  }  finally {  	// Clean up  	Release ();  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: try {  	// Create the main graph  	_graph = Activator.CreateInstance (Type.GetTypeFromCLSID (FilterGraph)) as IGraphBuilder;  	// Create the webcam source  	_sourceObject = FilterInfo.CreateFilter (_monikerString);  	// Create the grabber  	_grabber = Activator.CreateInstance (Type.GetTypeFromCLSID (SampleGrabber)) as ISampleGrabber;  	_grabberObject = _grabber as IBaseFilter;  	// Add the source and grabber to the main graph  	_graph.AddFilter (_sourceObject' "source");  	_graph.AddFilter (_grabberObject' "grabber");  	using (AMMediaType mediaType = new AMMediaType ()) {  		mediaType.MajorType = MediaTypes.Video;  		mediaType.SubType = MediaSubTypes.RGB32;  		_grabber.SetMediaType (mediaType);  		if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) {  			if (_grabber.GetConnectedMediaType (mediaType) == 0) {  				// During startup' this code can be too fast' so try at least 3 times  				int retryCount = 0;  				bool succeeded = false;  				while ((retryCount < 3) && !succeeded) {  					// Tried again  					retryCount++;  					try {  						// Retrieve the grabber information  						VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  						_capGrabber.Width = header.BmiHeader.Width;  						_capGrabber.Height = header.BmiHeader.Height;  						// Succeeded  						succeeded = true;  					}  					catch (Exception retryException) {  						// Trace  						Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  						// Sleep  						Thread.Sleep (50);  					}  				}  			}  		}  		_graph.Render (_grabberObject.GetPin (PinDirection.Output' 0));  		_grabber.SetBufferSamples (false);  		_grabber.SetOneShot (false);  		_grabber.SetCallback (_capGrabber' 1);  		// Get the video window  		IVideoWindow wnd = (IVideoWindow)_graph;  		wnd.put_AutoShow (false);  		wnd = null;  		// Create the control and run  		_control = (IMediaControl)_graph;  		_control.Run ();  		// Wait for the stop signal  		while (!_stopSignal.WaitOne (0' true)) {  			Thread.Sleep (10);  		}  		// Stop when ready  		_control.StopWhenReady ();  	}  }  catch (Exception ex) {  	// Trace  	Trace.WriteLine (ex);  }  finally {  	// Clean up  	Release ();  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: try {  	// Create the main graph  	_graph = Activator.CreateInstance (Type.GetTypeFromCLSID (FilterGraph)) as IGraphBuilder;  	// Create the webcam source  	_sourceObject = FilterInfo.CreateFilter (_monikerString);  	// Create the grabber  	_grabber = Activator.CreateInstance (Type.GetTypeFromCLSID (SampleGrabber)) as ISampleGrabber;  	_grabberObject = _grabber as IBaseFilter;  	// Add the source and grabber to the main graph  	_graph.AddFilter (_sourceObject' "source");  	_graph.AddFilter (_grabberObject' "grabber");  	using (AMMediaType mediaType = new AMMediaType ()) {  		mediaType.MajorType = MediaTypes.Video;  		mediaType.SubType = MediaSubTypes.RGB32;  		_grabber.SetMediaType (mediaType);  		if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) {  			if (_grabber.GetConnectedMediaType (mediaType) == 0) {  				// During startup' this code can be too fast' so try at least 3 times  				int retryCount = 0;  				bool succeeded = false;  				while ((retryCount < 3) && !succeeded) {  					// Tried again  					retryCount++;  					try {  						// Retrieve the grabber information  						VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  						_capGrabber.Width = header.BmiHeader.Width;  						_capGrabber.Height = header.BmiHeader.Height;  						// Succeeded  						succeeded = true;  					}  					catch (Exception retryException) {  						// Trace  						Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  						// Sleep  						Thread.Sleep (50);  					}  				}  			}  		}  		_graph.Render (_grabberObject.GetPin (PinDirection.Output' 0));  		_grabber.SetBufferSamples (false);  		_grabber.SetOneShot (false);  		_grabber.SetCallback (_capGrabber' 1);  		// Get the video window  		IVideoWindow wnd = (IVideoWindow)_graph;  		wnd.put_AutoShow (false);  		wnd = null;  		// Create the control and run  		_control = (IMediaControl)_graph;  		_control.Run ();  		// Wait for the stop signal  		while (!_stopSignal.WaitOne (0' true)) {  			Thread.Sleep (10);  		}  		// Stop when ready  		_control.StopWhenReady ();  	}  }  catch (Exception ex) {  	// Trace  	Trace.WriteLine (ex);  }  finally {  	// Clean up  	Release ();  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: using (AMMediaType mediaType = new AMMediaType ()) {  	mediaType.MajorType = MediaTypes.Video;  	mediaType.SubType = MediaSubTypes.RGB32;  	_grabber.SetMediaType (mediaType);  	if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) {  		if (_grabber.GetConnectedMediaType (mediaType) == 0) {  			// During startup' this code can be too fast' so try at least 3 times  			int retryCount = 0;  			bool succeeded = false;  			while ((retryCount < 3) && !succeeded) {  				// Tried again  				retryCount++;  				try {  					// Retrieve the grabber information  					VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  					_capGrabber.Width = header.BmiHeader.Width;  					_capGrabber.Height = header.BmiHeader.Height;  					// Succeeded  					succeeded = true;  				}  				catch (Exception retryException) {  					// Trace  					Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  					// Sleep  					Thread.Sleep (50);  				}  			}  		}  	}  	_graph.Render (_grabberObject.GetPin (PinDirection.Output' 0));  	_grabber.SetBufferSamples (false);  	_grabber.SetOneShot (false);  	_grabber.SetCallback (_capGrabber' 1);  	// Get the video window  	IVideoWindow wnd = (IVideoWindow)_graph;  	wnd.put_AutoShow (false);  	wnd = null;  	// Create the control and run  	_control = (IMediaControl)_graph;  	_control.Run ();  	// Wait for the stop signal  	while (!_stopSignal.WaitOne (0' true)) {  		Thread.Sleep (10);  	}  	// Stop when ready  	_control.StopWhenReady ();  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: using (AMMediaType mediaType = new AMMediaType ()) {  	mediaType.MajorType = MediaTypes.Video;  	mediaType.SubType = MediaSubTypes.RGB32;  	_grabber.SetMediaType (mediaType);  	if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) {  		if (_grabber.GetConnectedMediaType (mediaType) == 0) {  			// During startup' this code can be too fast' so try at least 3 times  			int retryCount = 0;  			bool succeeded = false;  			while ((retryCount < 3) && !succeeded) {  				// Tried again  				retryCount++;  				try {  					// Retrieve the grabber information  					VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  					_capGrabber.Width = header.BmiHeader.Width;  					_capGrabber.Height = header.BmiHeader.Height;  					// Succeeded  					succeeded = true;  				}  				catch (Exception retryException) {  					// Trace  					Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  					// Sleep  					Thread.Sleep (50);  				}  			}  		}  	}  	_graph.Render (_grabberObject.GetPin (PinDirection.Output' 0));  	_grabber.SetBufferSamples (false);  	_grabber.SetOneShot (false);  	_grabber.SetCallback (_capGrabber' 1);  	// Get the video window  	IVideoWindow wnd = (IVideoWindow)_graph;  	wnd.put_AutoShow (false);  	wnd = null;  	// Create the control and run  	_control = (IMediaControl)_graph;  	_control.Run ();  	// Wait for the stop signal  	while (!_stopSignal.WaitOne (0' true)) {  		Thread.Sleep (10);  	}  	// Stop when ready  	_control.StopWhenReady ();  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: using (AMMediaType mediaType = new AMMediaType ()) {  	mediaType.MajorType = MediaTypes.Video;  	mediaType.SubType = MediaSubTypes.RGB32;  	_grabber.SetMediaType (mediaType);  	if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) {  		if (_grabber.GetConnectedMediaType (mediaType) == 0) {  			// During startup' this code can be too fast' so try at least 3 times  			int retryCount = 0;  			bool succeeded = false;  			while ((retryCount < 3) && !succeeded) {  				// Tried again  				retryCount++;  				try {  					// Retrieve the grabber information  					VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  					_capGrabber.Width = header.BmiHeader.Width;  					_capGrabber.Height = header.BmiHeader.Height;  					// Succeeded  					succeeded = true;  				}  				catch (Exception retryException) {  					// Trace  					Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  					// Sleep  					Thread.Sleep (50);  				}  			}  		}  	}  	_graph.Render (_grabberObject.GetPin (PinDirection.Output' 0));  	_grabber.SetBufferSamples (false);  	_grabber.SetOneShot (false);  	_grabber.SetCallback (_capGrabber' 1);  	// Get the video window  	IVideoWindow wnd = (IVideoWindow)_graph;  	wnd.put_AutoShow (false);  	wnd = null;  	// Create the control and run  	_control = (IMediaControl)_graph;  	_control.Run ();  	// Wait for the stop signal  	while (!_stopSignal.WaitOne (0' true)) {  		Thread.Sleep (10);  	}  	// Stop when ready  	_control.StopWhenReady ();  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) {  	if (_grabber.GetConnectedMediaType (mediaType) == 0) {  		// During startup' this code can be too fast' so try at least 3 times  		int retryCount = 0;  		bool succeeded = false;  		while ((retryCount < 3) && !succeeded) {  			// Tried again  			retryCount++;  			try {  				// Retrieve the grabber information  				VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  				_capGrabber.Width = header.BmiHeader.Width;  				_capGrabber.Height = header.BmiHeader.Height;  				// Succeeded  				succeeded = true;  			}  			catch (Exception retryException) {  				// Trace  				Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  				// Sleep  				Thread.Sleep (50);  			}  		}  	}  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: if (_graph.Connect (_sourceObject.GetPin (PinDirection.Output' 0)' _grabberObject.GetPin (PinDirection.Input' 0)) >= 0) {  	if (_grabber.GetConnectedMediaType (mediaType) == 0) {  		// During startup' this code can be too fast' so try at least 3 times  		int retryCount = 0;  		bool succeeded = false;  		while ((retryCount < 3) && !succeeded) {  			// Tried again  			retryCount++;  			try {  				// Retrieve the grabber information  				VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  				_capGrabber.Width = header.BmiHeader.Width;  				_capGrabber.Height = header.BmiHeader.Height;  				// Succeeded  				succeeded = true;  			}  			catch (Exception retryException) {  				// Trace  				Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  				// Sleep  				Thread.Sleep (50);  			}  		}  	}  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: if (_grabber.GetConnectedMediaType (mediaType) == 0) {  	// During startup' this code can be too fast' so try at least 3 times  	int retryCount = 0;  	bool succeeded = false;  	while ((retryCount < 3) && !succeeded) {  		// Tried again  		retryCount++;  		try {  			// Retrieve the grabber information  			VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  			_capGrabber.Width = header.BmiHeader.Width;  			_capGrabber.Height = header.BmiHeader.Height;  			// Succeeded  			succeeded = true;  		}  		catch (Exception retryException) {  			// Trace  			Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  			// Sleep  			Thread.Sleep (50);  		}  	}  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: if (_grabber.GetConnectedMediaType (mediaType) == 0) {  	// During startup' this code can be too fast' so try at least 3 times  	int retryCount = 0;  	bool succeeded = false;  	while ((retryCount < 3) && !succeeded) {  		// Tried again  		retryCount++;  		try {  			// Retrieve the grabber information  			VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  			_capGrabber.Width = header.BmiHeader.Width;  			_capGrabber.Height = header.BmiHeader.Height;  			// Succeeded  			succeeded = true;  		}  		catch (Exception retryException) {  			// Trace  			Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  			// Sleep  			Thread.Sleep (50);  		}  	}  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: while ((retryCount < 3) && !succeeded) {  	// Tried again  	retryCount++;  	try {  		// Retrieve the grabber information  		VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  		_capGrabber.Width = header.BmiHeader.Width;  		_capGrabber.Height = header.BmiHeader.Height;  		// Succeeded  		succeeded = true;  	}  	catch (Exception retryException) {  		// Trace  		Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  		// Sleep  		Thread.Sleep (50);  	}  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: while ((retryCount < 3) && !succeeded) {  	// Tried again  	retryCount++;  	try {  		// Retrieve the grabber information  		VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  		_capGrabber.Width = header.BmiHeader.Width;  		_capGrabber.Height = header.BmiHeader.Height;  		// Succeeded  		succeeded = true;  	}  	catch (Exception retryException) {  		// Trace  		Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  		// Sleep  		Thread.Sleep (50);  	}  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: try {  	// Retrieve the grabber information  	VideoInfoHeader header = (VideoInfoHeader)Marshal.PtrToStructure (mediaType.FormatPtr' typeof(VideoInfoHeader));  	_capGrabber.Width = header.BmiHeader.Width;  	_capGrabber.Height = header.BmiHeader.Height;  	// Succeeded  	succeeded = true;  }  catch (Exception retryException) {  	// Trace  	Trace.TraceInformation ("Failed to retrieve the grabber information' tried {0} time(s)"' retryCount);  	// Sleep  	Thread.Sleep (50);  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: while (!_stopSignal.WaitOne (0' true)) {  	Thread.Sleep (10);  }  
Magic Number,CatenaLogic.Windows.Presentation.WebcamPlayer,CapDevice,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Controls\WebcamPlayer\CapDevice.cs,RunWorker,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,WebcamPlayer.UI.Converters,ThreeFourthConverter,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Converters\ThreeFourthConverter.cs,Convert,The following statement contains a magic number: return (width > 0) ? (width / 4) * 3 : 0;  
Magic Number,WebcamPlayer.UI.Converters,ThreeFourthConverter,C:\repos\OurDemoGroup_Samples\WebcamPlayer\src\src\UI\Converters\ThreeFourthConverter.cs,Convert,The following statement contains a magic number: return (width > 0) ? (width / 4) * 3 : 0;  
