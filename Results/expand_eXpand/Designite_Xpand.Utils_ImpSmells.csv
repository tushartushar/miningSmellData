Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xpand.Utils.IO,ReverseLineReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\ReverseLineReader.cs,GetEnumeratorImpl,The method has 111 lines of code.
Complex Method,Xpand.Utils.BackingFieldResolver,MethodBodyReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInstruction,Cyclomatic complexity of the method is 21
Complex Method,Xpand.Utils.Fastreflect,PropertyExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Fastreflect\PropertyExtensions.cs,Filter,Cyclomatic complexity of the method is 8
Complex Method,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,Cyclomatic complexity of the method is 9
Complex Method,Xpand.Utils.Helpers,EnumExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnumExtensions.cs,EnumTryParse,Cyclomatic complexity of the method is 12
Complex Method,Xpand.Utils.Helpers,EnumExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnumExtensions.cs,EnumToObject,Cyclomatic complexity of the method is 17
Complex Method,Xpand.Utils.Helpers,KeysConverter,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\Keys.cs,ConvertFrom,Cyclomatic complexity of the method is 9
Complex Method,Xpand.Utils.Helpers,KeysConverter,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\Keys.cs,ConvertTo,Cyclomatic complexity of the method is 17
Complex Method,Xpand.Utils.Helpers,PasswordAdvisor,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\PasswordAdvisor.cs,CheckStrength,Cyclomatic complexity of the method is 8
Complex Method,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeCore,Cyclomatic complexity of the method is 12
Complex Method,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeGuessedValues,Cyclomatic complexity of the method is 13
Complex Method,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeByTryParse,Cyclomatic complexity of the method is 16
Complex Method,Xpand.Utils.IO,ReverseLineReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\ReverseLineReader.cs,GetEnumeratorImpl,Cyclomatic complexity of the method is 15
Complex Method,Xpand.Utils.Threading,TaskExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Threading\TaskExtensions.cs,MainPeriodicTaskAction,Cyclomatic complexity of the method is 8
Long Parameter List,Xpand.Utils.Helpers,EnumExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnumExtensions.cs,EnumToObject,The method has 6 parameters. Parameters: type' underlyingType' names' values' input' value
Long Parameter List,Xpand.Utils.Helpers,EnviromentEx,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnviromentEx.cs,WTSQuerySessionInformation,The method has 5 parameters. Parameters: hServer' sessionId' wtsInfoClass' ppBuffer' pBytesReturned
Long Parameter List,Xpand.Utils.Helpers,EnviromentEx,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnviromentEx.cs,WTSEnumerateSessions,The method has 5 parameters. Parameters: hServer' reserved' version' ppSessionInfo' pCount
Long Parameter List,Xpand.Utils.Helpers,ReflectionExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\ReflectionExtensions.cs,SetProperty,The method has 5 parameters. Parameters: source' propExpr' propertyValueHolder' value' doIfChanged
Long Parameter List,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryToChange,The method has 5 parameters. Parameters: value' destinationType' result' options' culture
Long Parameter List,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeCore,The method has 5 parameters. Parameters: value' destinationType' result' culture' options
Long Parameter List,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeXPlicit,The method has 5 parameters. Parameters: value' invokerType' destinationType' xPlicitMethodName' result
Long Parameter List,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeByIntermediateConversion,The method has 5 parameters. Parameters: value' destinationType' result' culture' options
Long Parameter List,Xpand.Utils.Threading,TaskExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Threading\TaskExtensions.cs,StartNewPeriodic,The method has 10 parameters. Parameters: taskFactory' action' taskScheduler' interval' delay' duration' maxIterations' synchronous' cancelToken' periodicTaskCreationOptions
Long Parameter List,Xpand.Utils.Threading,TaskExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Threading\TaskExtensions.cs,MainPeriodicTaskAction,The method has 10 parameters. Parameters: intervalInMilliseconds' delayInMilliseconds' duration' maxIterations' cancelToken' stopWatch' synchronous' wrapperAction' periodicTaskCreationOptions' taskScheduler
Long Identifier,Xpand.Utils.Linq.Dynamic,Res,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Linq\Dynamic\Res.cs,,The length of the parameter AmbiguousConstructorInvocation is 30.
Long Statement,Xpand.Utils.Fastreflect,PropertyExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Fastreflect\PropertyExtensions.cs,ContainsOverride,The length of the statement  "            return candidates.Select(t => (object) t as MethodInfo).Any(methodInfo => !(methodInfo == null) && methodInfo.IsVirtual && method.Name == methodInfo.Name && list.Select(p => p.ParameterType).SequenceEqual(methodInfo.Parameters().Select(p => p.ParameterType))); " is 260.
Long Statement,Xpand.Utils.Helpers,EnumerableExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnumerableExtensions.cs,AggregateWith,The length of the statement  "            return instance.Aggregate(""' (current' result) => current + (result + accumulator)).TrimEnd(accumulator.ToCharArray()); " is 120.
Long Statement,Xpand.Utils.Helpers,StringExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\StringExtensions.cs,XMLEncode,The length of the statement  "            return value.TrimEnd((char)1).Replace("&"' "&amp;").Replace("'"' "&apos;").Replace("\""' "&quot;").Replace("<"' "&lt;").Replace(">"' "&gt;"); " is 141.
Long Statement,Xpand.Utils.Helpers,StringExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\StringExtensions.cs,XMLDecode,The length of the statement  "            return value.Replace("&amp;"' "&").Replace("&apos;"' "'").Replace("&quot;"' "\"").Replace("&lt;"' "<").Replace("&gt;"' ">"); " is 124.
Long Statement,Xpand.Utils.Helpers,StringExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\StringExtensions.cs,CleanCodeName,The length of the statement  "            if (!(String.IsNullOrEmpty(ret)) && !Char.IsLetter(ret' 0) && !CodeDomProvider.CreateProvider("C#").IsValidIdentifier(ret)) " is 123.
Long Statement,Xpand.Utils,ObjectMerger,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\ObjectMerger.cs,Merge,The length of the statement  "                            sourceProperty.SetValue(source'Convert.ChangeType(targetProp.GetValue(source' null)'sourceProperty.PropertyType)' null); " is 120.
Long Statement,Xpand.Utils,XpandReflectionHelper,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\XpandReflectionHelper.cs,GetPropertyDescriptorByValue,The length of the statement  "            return propertyDescriptorCollection.Cast<PropertyDescriptor>().FirstOrDefault(descriptor => value.Equals(descriptor.GetValue(containedControl))); " is 145.
Long Statement,Xpand.Utils.Threading,TaskExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Threading\TaskExtensions.cs,StartNewPeriodic,The length of the statement  "                MainPeriodicTaskAction(interval' delay' duration' maxIterations' cancelToken' stopWatch' synchronous' WrapperAction' periodicTaskCreationOptions' taskScheduler); " is 161.
Complex Conditional,Xpand.Utils.Helpers,KeyShortcut,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\Keys.cs,IsValidShortcut,The conditional expression  "key == Keys.None || key == Keys.ControlKey || key == Keys.ShiftKey || key == Keys.Alt"  is complex.
Empty Catch Block,Xpand.Utils.Helpers,EnviromentEx,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnviromentEx.cs,KillProcess,The method has an empty catch block.
Empty Catch Block,Xpand.Utils.Helpers,EnviromentEx,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnviromentEx.cs,KillProcessAndChildren,The method has an empty catch block.
Empty Catch Block,Xpand.Utils.Helpers,StringExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\StringExtensions.cs,XMLPrint,The method has an empty catch block.
Empty Catch Block,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeXPlicit,The method has an empty catch block.
Empty Catch Block,Xpand.Utils.Threading,TaskExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Threading\TaskExtensions.cs,MainPeriodicTaskAction,The method has an empty catch block.
Magic Number,Xpand.Utils.BackingFieldResolver,Instruction,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,GetSize,The following statement contains a magic number: switch (opcode.OperandType) {                  case OperandType.InlineSwitch:                      size += (1 + ((int[]) operand).Length)*4;                      break;                  case OperandType.InlineI8:                  case OperandType.InlineR:                      size += 8;                      break;                  case OperandType.InlineBrTarget:                  case OperandType.InlineField:                  case OperandType.InlineI:                  case OperandType.InlineMethod:                  case OperandType.InlineString:                  case OperandType.InlineTok:                  case OperandType.InlineType:                  case OperandType.ShortInlineR:                      size += 4;                      break;                  case OperandType.InlineVar:                      size += 2;                      break;                  case OperandType.ShortInlineBrTarget:                  case OperandType.ShortInlineI:                  case OperandType.ShortInlineVar:                      size += 1;                      break;              }
Magic Number,Xpand.Utils.BackingFieldResolver,Instruction,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,GetSize,The following statement contains a magic number: switch (opcode.OperandType) {                  case OperandType.InlineSwitch:                      size += (1 + ((int[]) operand).Length)*4;                      break;                  case OperandType.InlineI8:                  case OperandType.InlineR:                      size += 8;                      break;                  case OperandType.InlineBrTarget:                  case OperandType.InlineField:                  case OperandType.InlineI:                  case OperandType.InlineMethod:                  case OperandType.InlineString:                  case OperandType.InlineTok:                  case OperandType.InlineType:                  case OperandType.ShortInlineR:                      size += 4;                      break;                  case OperandType.InlineVar:                      size += 2;                      break;                  case OperandType.ShortInlineBrTarget:                  case OperandType.ShortInlineI:                  case OperandType.ShortInlineVar:                      size += 1;                      break;              }
Magic Number,Xpand.Utils.BackingFieldResolver,Instruction,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,GetSize,The following statement contains a magic number: switch (opcode.OperandType) {                  case OperandType.InlineSwitch:                      size += (1 + ((int[]) operand).Length)*4;                      break;                  case OperandType.InlineI8:                  case OperandType.InlineR:                      size += 8;                      break;                  case OperandType.InlineBrTarget:                  case OperandType.InlineField:                  case OperandType.InlineI:                  case OperandType.InlineMethod:                  case OperandType.InlineString:                  case OperandType.InlineTok:                  case OperandType.InlineType:                  case OperandType.ShortInlineR:                      size += 4;                      break;                  case OperandType.InlineVar:                      size += 2;                      break;                  case OperandType.ShortInlineBrTarget:                  case OperandType.ShortInlineI:                  case OperandType.ShortInlineVar:                      size += 1;                      break;              }
Magic Number,Xpand.Utils.BackingFieldResolver,Instruction,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,GetSize,The following statement contains a magic number: switch (opcode.OperandType) {                  case OperandType.InlineSwitch:                      size += (1 + ((int[]) operand).Length)*4;                      break;                  case OperandType.InlineI8:                  case OperandType.InlineR:                      size += 8;                      break;                  case OperandType.InlineBrTarget:                  case OperandType.InlineField:                  case OperandType.InlineI:                  case OperandType.InlineMethod:                  case OperandType.InlineString:                  case OperandType.InlineTok:                  case OperandType.InlineType:                  case OperandType.ShortInlineR:                      size += 4;                      break;                  case OperandType.InlineVar:                      size += 2;                      break;                  case OperandType.ShortInlineBrTarget:                  case OperandType.ShortInlineI:                  case OperandType.ShortInlineVar:                      size += 1;                      break;              }
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt16,The following statement contains a magic number: CheckCanRead(2);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt16,The following statement contains a magic number: var @short = (short) (buffer[position]                                        + (buffer[position + 1] << 8));
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt16,The following statement contains a magic number: position += 2;
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt32,The following statement contains a magic number: CheckCanRead(4);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt32,The following statement contains a magic number: int @int = buffer[position]                             + (buffer[position + 1] << 8)                             + (buffer[position + 2] << 16)                             + (buffer[position + 3] << 24);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt32,The following statement contains a magic number: int @int = buffer[position]                             + (buffer[position + 1] << 8)                             + (buffer[position + 2] << 16)                             + (buffer[position + 3] << 24);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt32,The following statement contains a magic number: int @int = buffer[position]                             + (buffer[position + 1] << 8)                             + (buffer[position + 2] << 16)                             + (buffer[position + 3] << 24);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt32,The following statement contains a magic number: int @int = buffer[position]                             + (buffer[position + 1] << 8)                             + (buffer[position + 2] << 16)                             + (buffer[position + 3] << 24);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt32,The following statement contains a magic number: int @int = buffer[position]                             + (buffer[position + 1] << 8)                             + (buffer[position + 2] << 16)                             + (buffer[position + 3] << 24);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt32,The following statement contains a magic number: position += 4;
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: CheckCanRead(8);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: long @long = buffer[position]                               + (buffer[position + 1] << 8)                               + (buffer[position + 2] << 16)                               + (buffer[position + 3] << 24)                               + (buffer[position + 4] << 32)                               + (buffer[position + 5] << 40)                               + (buffer[position + 6] << 48)                               + (buffer[position + 7] << 56);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadInt64,The following statement contains a magic number: position += 8;
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadSingle,The following statement contains a magic number: byte[] bytes = ReadBytes(4);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadSingle,The following statement contains a magic number: CheckCanRead(4);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadSingle,The following statement contains a magic number: position += 4;
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadDouble,The following statement contains a magic number: byte[] bytes = ReadBytes(8);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadDouble,The following statement contains a magic number: CheckCanRead(8);
Magic Number,Xpand.Utils.BackingFieldResolver,ByteBuffer,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,ReadDouble,The following statement contains a magic number: position += 8;
Magic Number,Xpand.Utils.Fastreflect,PropertyExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Fastreflect\PropertyExtensions.cs,Filter,The following statement contains a magic number: flag4 = ((0) | (!((object) member is FieldInfo) ? 0 : ((int) member.Name[0] == 60 ? 1 : 0))) !=                              0;
Magic Number,Xpand.Utils.Fastreflect,PropertyExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Fastreflect\PropertyExtensions.cs,Filter,The following statement contains a magic number: flag4 = ((flag4 ? 1 : 0) |                                   (member.Name.Length <= 4 ? 0 : (member.Name.Substring(1' 3) == "et_" ? 1 : 0))) != 0 |                                  ContainsOverride(list1' method);
Magic Number,Xpand.Utils.Fastreflect,PropertyExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Fastreflect\PropertyExtensions.cs,Filter,The following statement contains a magic number: flag4 = ((flag4 ? 1 : 0) |                                   (member.Name.Length <= 4 ? 0 : (member.Name.Substring(1' 3) == "et_" ? 1 : 0))) != 0 |                                  ContainsOverride(list1' method);
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,GetDates,The following statement contains a magic number: return Enumerable.Range(1' 12).SelectMany(month => GetDates(year' month)).ToList();
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,GetYears,The following statement contains a magic number: return (int)(timespan.Days / 365.2425);
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,GetMonths,The following statement contains a magic number: return (int)(timespan.Days / 30.436875);
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,UnixTimeStampToDateTime,The following statement contains a magic number: var dtDateTime = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: delta < 60
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: delta < 120
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: delta < 2700
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: delta < 5400
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: delta < 86400
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: delta < 172800
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: delta < 2592000
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: int months = System.Convert.ToInt32(Math.Floor((double)ts.Days / 30));
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: delta < 31104000
Magic Number,Xpand.Utils.Helpers,DateTimeUtils,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\DateTimeUtils.cs,RelativeDate,The following statement contains a magic number: int years = System.Convert.ToInt32(Math.Floor((double)ts.Days / 365));
Magic Number,Xpand.Utils.Helpers,EnviromentEx,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\EnviromentEx.cs,KillProcess,The following statement contains a magic number: var objects = new object[2];
Magic Number,Xpand.Utils.Helpers,KeysConverter,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\Keys.cs,ConvertTo,The following statement contains a magic number: var stringBuilder = new StringBuilder(32);
Magic Number,Xpand.Utils.Helpers,KeysConverter,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\Keys.cs,Initialize,The following statement contains a magic number: _keyNames = new Hashtable(34);
Magic Number,Xpand.Utils.Helpers,KeysConverter,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\Keys.cs,Initialize,The following statement contains a magic number: _displayOrder = new List<string>(34);
Magic Number,Xpand.Utils.Helpers,PasswordAdvisor,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\PasswordAdvisor.cs,CheckStrength,The following statement contains a magic number: password.Length < 4
Magic Number,Xpand.Utils.Helpers,PasswordAdvisor,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\PasswordAdvisor.cs,CheckStrength,The following statement contains a magic number: password.Length >= 8
Magic Number,Xpand.Utils.Helpers,PasswordAdvisor,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\PasswordAdvisor.cs,CheckStrength,The following statement contains a magic number: password.Length >= 12
Magic Number,Xpand.Utils.Helpers,StreamExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\StreamExtensions.cs,ReadFully,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,Xpand.Utils.Helpers,StreamExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\StreamExtensions.cs,ReadFully,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,Xpand.Utils.Helpers,SystemExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\SystemExtensions.cs,RoundToSignificantDigits,The following statement contains a magic number: var scale = Math.Pow(10' Math.Floor(Math.Log10(Math.Abs(d))) + 1);
Magic Number,Xpand.Utils.Helpers,SystemExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\SystemExtensions.cs,ConvertCore,The following statement contains a magic number: return amount * (1024d * difference);
Magic Number,Xpand.Utils.Helpers,SystemExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\SystemExtensions.cs,ConvertCore,The following statement contains a magic number: return amount / (1024d * difference);
Magic Number,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeGuessedValues,The following statement contains a magic number: rectParts.Length == 2
Magic Number,Xpand.Utils.Helpers,XpandConvert,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\XpandConvert.cs,TryChangeGuessedValues,The following statement contains a magic number: strings.Length == 2 && (strings[0].CanChange(typeof (int)) && strings[1].CanChange(typeof (int)))
Magic Number,Xpand.Utils.IO,InverseReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\InverseReader.cs,Readline,The following statement contains a magic number: var bytes = new byte[2];
Magic Number,Xpand.Utils.IO,InverseReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\InverseReader.cs,Readline,The following statement contains a magic number: fileStream.Seek(-2' SeekOrigin.Current);
Magic Number,Xpand.Utils.IO,InverseReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\InverseReader.cs,Readline,The following statement contains a magic number: fileStream.Read(bytes' 0' 2);
Magic Number,Xpand.Utils.IO,InverseReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\InverseReader.cs,Readline,The following statement contains a magic number: fileStream.Seek(-2' SeekOrigin.Current);
Magic Number,Xpand.Utils.IO,InverseReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\InverseReader.cs,Readline,The following statement contains a magic number: fileStream.Seek(-2' SeekOrigin.Current);
Magic Number,Xpand.Utils.IO,ReverseLineReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\ReverseLineReader.cs,GetEnumeratorImpl,The following statement contains a magic number: var buffer = new byte[bufferSize + 2];
Magic Number,Xpand.Utils.IO,ReverseLineReader,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\IO\ReverseLineReader.cs,GetEnumeratorImpl,The following statement contains a magic number: firstCharPosition == 3 || firstCharPosition == bytesToRead
Magic Number,Xpand.Utils.Threading,TaskExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Threading\TaskExtensions.cs,Execute,The following statement contains a magic number: Task.Factory.StartNew(() => {                  started = true;                  while (!cancellationToken.IsCancellationRequested) {                      Thread.Sleep(200);                  }                  cancellationToken.ThrowIfCancellationRequested();              }' cancellationToken).TimeoutAfter(timeout);
Magic Number,Xpand.Utils.Threading,TaskExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Threading\TaskExtensions.cs,Execute,The following statement contains a magic number: Thread.Sleep(100);
Missing Default,Xpand.Utils.BackingFieldResolver,Instruction,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\BackingFieldResolver\MethodBaseRocks.cs,GetSize,The following switch statement is missing a default case: switch (opcode.OperandType) {                  case OperandType.InlineSwitch:                      size += (1 + ((int[]) operand).Length)*4;                      break;                  case OperandType.InlineI8:                  case OperandType.InlineR:                      size += 8;                      break;                  case OperandType.InlineBrTarget:                  case OperandType.InlineField:                  case OperandType.InlineI:                  case OperandType.InlineMethod:                  case OperandType.InlineString:                  case OperandType.InlineTok:                  case OperandType.InlineType:                  case OperandType.ShortInlineR:                      size += 4;                      break;                  case OperandType.InlineVar:                      size += 2;                      break;                  case OperandType.ShortInlineBrTarget:                  case OperandType.ShortInlineI:                  case OperandType.ShortInlineVar:                      size += 1;                      break;              }
Missing Default,Xpand.Utils.Helpers,ReflectionExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Helpers\ReflectionExtensions.cs,GetMemberInfo,The following switch statement is missing a default case: switch (lambda.Body.NodeType){                  case ExpressionType.Convert:                      memberExpr = ((UnaryExpression)lambda.Body).Operand as MemberExpression;                      break;                  case ExpressionType.MemberAccess:                      memberExpr = lambda.Body as MemberExpression;                      break;              }
Missing Default,Xpand.Utils.Threading,TaskExtensions,D:\research\architectureSmells\repos\expand_eXpand\Xpand\Xpand.Utils\Threading\TaskExtensions.cs,MarshalTaskResults,The following switch statement is missing a default case: switch (source.Status){                  case TaskStatus.RanToCompletion:{                      var task = source as Task<TResult>;                      proxy.TrySetResult((task == null) ? default : task.Result);                      break;                  }                  case TaskStatus.Canceled:                      proxy.TrySetCanceled();                      break;                    case TaskStatus.Faulted:{                      AggregateException exception = source.Exception;                      Debug.Assert(exception != null' "aggregateException != null");                      proxy.TrySetException(exception);                      break;                  }              }
