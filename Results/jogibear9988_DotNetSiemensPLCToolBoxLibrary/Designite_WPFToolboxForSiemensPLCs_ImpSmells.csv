Implementation smell,Namespace,Class,File,Method,Description
Long Method,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_2,The method has 113 lines of code.
Long Method,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The method has 108 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The method has 133 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemantic,The method has 113 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupMerge,The method has 126 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,match_bitap,The method has 105 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_apply,The method has 112 lines of code.
Long Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_splitMax,The method has 107 lines of code.
Long Method,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The method has 144 lines of code.
Complex Method,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click,Cyclomatic complexity of the method is 10
Complex Method,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,Cyclomatic complexity of the method is 10
Complex Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,Cyclomatic complexity of the method is 12
Complex Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemantic,Cyclomatic complexity of the method is 8
Complex Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemanticLossless,Cyclomatic complexity of the method is 9
Complex Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupMerge,Cyclomatic complexity of the method is 8
Complex Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,match_bitap,Cyclomatic complexity of the method is 13
Complex Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_make,Cyclomatic complexity of the method is 8
Complex Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_splitMax,Cyclomatic complexity of the method is 11
Complex Method,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_fromText,Cyclomatic complexity of the method is 8
Long Parameter List,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisectSplit,The method has 5 parameters. Parameters: text1' text2' x' y' deadline
Long Identifier,WPFToolboxForSiemensPLCs.Controls,AWLOnlineStatusView,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\AWLOnlineStatusView.xaml.cs,,The length of the parameter CorespondingTextEditorProperty is 30.
Long Statement,WPFToolboxForSiemensPLCs.AvalonEdit,TextColorizer,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\AvalonEdit\TextColorizer.cs,ColorizeLine,The length of the statement  "                base.ChangeLinePart(_start < line.Offset ? line.Offset : _start' _stop > line.Offset + line.Length ? line.Offset + line.Length : _stop' (VisualLineElement element) => " is 166.
Long Statement,WPFToolboxForSiemensPLCs.Controls,AWLOnlineStatusView,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\AWLOnlineStatusView.xaml.cs,CorespondingTextEditorChanged,The length of the statement  "            double bottom = textEditor.TextArea.TextView.GetVisualPosition(new TextViewPosition(1' 1)' VisualYPosition.LineBottom).Y; " is 121.
Long Statement,WPFToolboxForSiemensPLCs.Controls,AWLOnlineStatusView,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\AWLOnlineStatusView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/controls/awlonlinestatusview.xaml"' System.UriKind.Relative); " is 142.
Long Statement,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,ShowLine,The length of the statement  "            //textEditor.SelectionLength = textEditor.TextArea.TextView.GetVisualLine(linenr + 1).StartOffset - textEditor.SelectionStart; " is 126.
Long Statement,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,OnDisplayNetworkChanged,The length of the statement  "            HighlightingManager.Instance.RegisterHighlighting("Custom Highlighting"' new string[] { ".cool" }' nwEdt.customHighlighting); " is 125.
Long Statement,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/controls/networkeditor/networkeditor.xaml"' System.UriKind.Relative); " is 150.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The length of the statement  "                            //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n"; " is 207.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowwincctagvarcreat" + " is 129.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSZL,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSZL.xaml.cs,Button_Click,The length of the statement  "                        myDataGrid.Columns.Add(new DataGridTextColumn() {Binding = new Binding(prpInfo.Name){Converter = new ByteIntArrayConverter() }' Header = prpInfo.Name}); " is 152.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSZL,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSZL.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowszl.xaml"' System.UriKind.Relative); " is 146.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSourceBlock,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSourceBlock.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowsourceblock.xaml" + " is 129.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowReferenceData,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowReferenceData.xaml.cs,DataGrid_MouseDoubleClick,The length of the statement  "                    ContentWindowFunctionBlockEditor tmp = new ContentWindowFunctionBlockEditor(blk' referencePoint.NetworkNumber' referencePoint.LineNumber); " is 138.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowReferenceData,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowReferenceData.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowreferencedata.xa" + " is 129.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowReferenceData,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowReferenceData.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.DataGrid)(target)).MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.DataGrid_MouseDoubleClick); " is 146.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentBlockList,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentBlockList.xaml.cs,myDataGrid_PreviewMouseMove,The length of the statement  "                                dragData.SetData(FileDragDropHelper.CFSTR_FILEDESCRIPTORW' FileDragDropHelper.GetFileDescriptor(blkInfo.BlockName + ".awl"' awlblk)); " is 133.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentBlockList,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentBlockList.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/dockablecontentblocklist.xaml" + " is 129.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentBlockList,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentBlockList.xaml.cs,Connect,The length of the statement  "            ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentBlockList)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.DockableContent_GotFocus); " is 159.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentBlockList,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentBlockList.xaml.cs,Connect,The length of the statement  "            this.myDataGrid.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.myDataGrid_SelectionChanged); " is 127.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDataBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDataBlockEditor.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowdatablockeditor." + " is 129.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDataBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDataBlockEditor.xaml.cs,Connect,The length of the statement  "            ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowDataBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged); " is 179.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowChart,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowChart.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowchart.xaml"' System.UriKind.Relative); " is 148.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowVarTab,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowVarTab.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowvartab.xaml"' System.UriKind.Relative); " is 149.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,Button_Click,The length of the statement  "            this.Connections = new ObservableCollection<string>((IEnumerable<string>)PLCConnectionConfiguration.GetConfigurationNames());          " is 125.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/dockablecontentonlineconnecti" + " is 129.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,Connect,The length of the statement  "            this.myConnectionsList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.myConnectionsList_MouseDoubleClick); " is 133.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,Connect,The length of the statement  "            this.myConnectionsList.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myConnectionsList_PreviewMouseDown); " is 133.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,Connect,The length of the statement  "            this.myConnectionsList.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.myConnectionsList_PreviewMouseMove); " is 127.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,Connect,The length of the statement  "            this.myConnectionsList.GiveFeedback += new System.Windows.GiveFeedbackEventHandler(this.myConnectionsList_GiveFeedback); " is 120.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,viewBlockStatus,The length of the statement  "                    MyDiagnosticData = App.clientForm.Connection.PLCstartRequestDiagnosticData(myS7Blk' bytepos' S7FunctionBlockRow.SelectedStatusValues.ALL); " is 138.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowfunctionblockedi" + " is 129.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The length of the statement  "            ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).Closing += new System.EventHandler<System.ComponentModel.CancelEventArgs>(this.DocumentContent_Closing); " is 190.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The length of the statement  "            ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged); " is 183.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The length of the statement  "            this.myTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTree_SelectedItemChanged); " is 129.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The length of the statement  "            this.myLst.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollChanged)); " is 154.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowdiffwindow.xaml"' System.UriKind.Relative); " is 153.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The length of the statement  "            this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged); " is 131.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The length of the statement  "            this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged); " is 131.
Long Statement,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSymbolTable,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSymbolTable.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/dockablewindows/contentwindowsymboltable.xaml" + " is 129.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemantic,The length of the statement  "                    if (lastequality != null && (lastequality.Length <= Math.Max(length_insertions1' length_deletions1)) && (lastequality.Length <= Math.Max(length_insertions2' length_deletions2))) " is 177.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupEfficiency,The length of the statement  "                    if ((lastequality.Length != 0) && ((pre_ins && pre_del && post_ins && post_del) || ((lastequality.Length < this.Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0) + (post_del ? 1 : 0)) == 3))) " is 223.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupMerge,The length of the statement  "                                    if ((pointer - count_delete - count_insert) > 0 && diffs[pointer - count_delete - count_insert - 1].operation == Operation.EQUAL) " is 129.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupMerge,The length of the statement  "                                diffs.Splice(pointer - count_delete - count_insert' count_delete + count_insert' new Diff(Operation.DELETE' text_delete)' new Diff(Operation.INSERT' text_insert)); " is 163.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupMerge,The length of the statement  "                        diffs[pointer].text = diffs[pointer - 1].text + diffs[pointer].text.Substring(0' diffs[pointer].text.Length - diffs[pointer - 1].text.Length); " is 142.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_fromDelta,The length of the statement  "                            throw new ArgumentException("Delta length (" + pointer + ") larger than source text length (" + text1.Length + ")."' e); " is 120.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_addContext,The length of the statement  "            while (text.IndexOf(pattern' StringComparison.Ordinal) != text.LastIndexOf(pattern' StringComparison.Ordinal) && pattern.Length < Match_MaxBits - Patch_Margin - Patch_Margin) " is 174.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_addContext,The length of the statement  "                pattern = text.JavaSubstring(Math.Max(0' patch.start2 - padding)' Math.Min(text.Length' patch.start2 + patch.length1 + padding)); " is 129.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_addContext,The length of the statement  "            string suffix = text.JavaSubstring(patch.start2 + patch.length1' Math.Min(text.Length' patch.start2 + patch.length1 + padding)); " is 128.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_apply,The length of the statement  "                        end_loc = match_main(text' text1.Substring(text1.Length - this.Match_MaxBits)' expected_loc + text1.Length - this.Match_MaxBits); " is 129.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_apply,The length of the statement  "                        if (text1.Length > this.Match_MaxBits && this.diff_levenshtein(diffs) / (float)text1.Length > this.Patch_DeleteThreshold) " is 121.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_splitMax,The length of the statement  "                        else if (diff_type == Operation.DELETE && patch.diffs.Count == 1 && patch.diffs.First().operation == Operation.EQUAL && diff_text.Length > 2 * patch_size) " is 154.
Long Statement,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,unescapeForEncodeUriCompatability,The length of the statement  "            return str.Replace("%21"' "!").Replace("%7e"' "~").Replace("%27"' "'").Replace("%28"' "(").Replace("%29"' ")").Replace("%3b"' ";").Replace("%2f"' "/").Replace("%3f"' "?").Replace("%3a"' ":").Replace("%40"' "@").Replace("%26"' "&").Replace("%3d"' "=").Replace("%2b"' "+").Replace("%24"' "$").Replace("%2c"' "'").Replace("%23"' "#"); " is 331.
Long Statement,WPFToolboxForSiemensPLCs,App,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\App.xaml.cs,InitializeComponent,The length of the statement  "            this.DispatcherUnhandledException += new System.Windows.Threading.DispatcherUnhandledExceptionEventHandler(this.Application_DispatcherUnhandledException); " is 154.
Long Statement,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,OpenProject,The length of the statement  "            op.Filter = "All supported types (*.zip' *.s7p' *.s5d' *.ap13)|*.s7p;*.zip;*.s5d;*.ap13|Step5 Project|*.s5d|Step7 V5.5 Project|*.s7p|Zipped Step5/Step7 Project|*.zip"; " is 167.
Long Statement,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WPFToolboxForSiemensPLCs;component/mainwindow.xaml"' System.UriKind.Relative); " is 124.
Long Statement,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The length of the statement  "            ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing); " is 125.
Long Statement,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The length of the statement  "            ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged); " is 149.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,WPFToolboxForSiemensPLCs.AvalonEdit,BraceFoldingStrategy,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\AvalonEdit\BraceFoldingStrategy.cs,CreateNewFoldings,The conditional expression  "(c1 == '(' && (c == 'U' || c == 'O' || c == 'X')) || (c2 == '(' && c1=='N' && (c == 'U' || c == 'O' || c == 'X'))"  is complex.
Complex Conditional,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupEfficiency,The conditional expression  "(lastequality.Length != 0) && ((pre_ins && pre_del && post_ins && post_del) || ((lastequality.Length < this.Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0) + (post_del ? 1 : 0)) == 3))"  is complex.
Complex Conditional,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_splitMax,The conditional expression  "diff_type == Operation.DELETE && patch.diffs.Count == 1 && patch.diffs.First().operation == Operation.EQUAL && diff_text.Length > 2 * patch_size"  is complex.
Empty Catch Block,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,myTree_SelectedItemChanged,The method has an empty catch block.
Empty Catch Block,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,myTreeA_SelectedItemChanged,The method has an empty catch block.
Empty Catch Block,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,myTreeB_SelectedItemChanged,The method has an empty catch block.
Magic Number,WPFToolboxForSiemensPLCs.AvalonEdit,BraceFoldingStrategy,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\AvalonEdit\BraceFoldingStrategy.cs,CreateNewFoldings,The following statement contains a magic number: for (int i = 0; i < document.TextLength-2; i++) {  				char c = document.GetCharAt(i);                  char c1 = document.GetCharAt(i+1);                  char c2 = document.GetCharAt(i+2);                  if ((c1 == '(' && (c == 'U' || c == 'O' || c == 'X')) || (c2 == '(' && c1=='N' && (c == 'U' || c == 'O' || c == 'X')))                  {                      startOffsets.Push(i);  				} else if (c == ')' && startOffsets.Count > 0) {  					int startOffset = startOffsets.Pop();  					// don't fold if opening and closing brace are on the same line  					if (startOffset < lastNewLineOffset) {  						newFoldings.Add(new NewFolding(startOffset' i + 1));  					}  				} else if (c == '\n' || c == '\r') {  					lastNewLineOffset = i + 1;  				}  			}
Magic Number,WPFToolboxForSiemensPLCs.AvalonEdit,BraceFoldingStrategy,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\AvalonEdit\BraceFoldingStrategy.cs,CreateNewFoldings,The following statement contains a magic number: for (int i = 0; i < document.TextLength-2; i++) {  				char c = document.GetCharAt(i);                  char c1 = document.GetCharAt(i+1);                  char c2 = document.GetCharAt(i+2);                  if ((c1 == '(' && (c == 'U' || c == 'O' || c == 'X')) || (c2 == '(' && c1=='N' && (c == 'U' || c == 'O' || c == 'X')))                  {                      startOffsets.Push(i);  				} else if (c == ')' && startOffsets.Count > 0) {  					int startOffset = startOffsets.Pop();  					// don't fold if opening and closing brace are on the same line  					if (startOffset < lastNewLineOffset) {  						newFoldings.Add(new NewFolding(startOffset' i + 1));  					}  				} else if (c == '\n' || c == '\r') {  					lastNewLineOffset = i + 1;  				}  			}
Magic Number,WPFToolboxForSiemensPLCs.AvalonEdit,BraceFoldingStrategy,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\AvalonEdit\BraceFoldingStrategy.cs,CreateNewFoldings,The following statement contains a magic number: {                  while (wrt >= 0)                  {                      int old = wrt;                      wrt = document.Text.IndexOf("Netzwerk"' wrt + 1);                      if (wrt > old)                          newFoldings.Add(new NewFolding(old' wrt - 2));                      else                      {                          newFoldings.Add(new NewFolding(old' document.Text.Length));                          break;                                           }                  }              }
Magic Number,WPFToolboxForSiemensPLCs.Controls,AWLOnlineStatusView,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\AWLOnlineStatusView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.wndAWLOnlineStatusView = ((WPFToolboxForSiemensPLCs.Controls.AWLOnlineStatusView)(target));              return;              case 2:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,NetworkEditor,The following statement contains a magic number: foldingUpdateTimer.Interval = TimeSpan.FromSeconds(2);
Magic Number,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,foldingUpdateTimer_Tick,The following statement contains a magic number: foreach (var fld in foldingManager.AllFoldings)              {                  if (textEditor.Document.Text.Substring(fld.StartOffset' 8) == "Netzwerk")                      fld.Title = textEditor.Document.Text.Substring(fld.StartOffset' 11) + " ...";                  else                      fld.Title = textEditor.Document.Text.Substring(fld.StartOffset' 3) + "...";              }
Magic Number,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,foldingUpdateTimer_Tick,The following statement contains a magic number: foreach (var fld in foldingManager.AllFoldings)              {                  if (textEditor.Document.Text.Substring(fld.StartOffset' 8) == "Netzwerk")                      fld.Title = textEditor.Document.Text.Substring(fld.StartOffset' 11) + " ...";                  else                      fld.Title = textEditor.Document.Text.Substring(fld.StartOffset' 3) + "...";              }
Magic Number,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,foldingUpdateTimer_Tick,The following statement contains a magic number: foreach (var fld in foldingManager.AllFoldings)              {                  if (textEditor.Document.Text.Substring(fld.StartOffset' 8) == "Netzwerk")                      fld.Title = textEditor.Document.Text.Substring(fld.StartOffset' 11) + " ...";                  else                      fld.Title = textEditor.Document.Text.Substring(fld.StartOffset' 3) + "...";              }
Magic Number,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,textEditor_MouseHover,The following statement contains a magic number: if (pos != null)              {                  int off = textEditor.Document.GetOffset(pos.Value.Line' pos.Value.Column);                  if (foldingManager != null)                      foreach (var fld in foldingManager.AllFoldings)                      {                          if (fld.StartOffset <= off && off <= fld.EndOffset && fld.IsFolded)                          {                              toolTip.PlacementTarget = this;                                toolTip.Content = new ICSharpCode.AvalonEdit.TextEditor                                                    {                                                        Template = (ControlTemplate) this.Resources["TemplateEditor"]'                                                        Text =                                                            textEditor.Document.Text.Substring(fld.StartOffset'                                                                                               fld.EndOffset -                                                                                               fld.StartOffset)'                                                        SyntaxHighlighting = customHighlighting'                                                        FontFamily = new FontFamily("Consolas")'                                                        Opacity = 0.6                                                    };                              toolTip.IsOpen = true;                              e.Handled = true;                          }                      }                    }
Magic Number,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.NetworkEditorWindow = ((WPFToolboxForSiemensPLCs.Controls.NetworkEditor.NetworkEditor)(target));              return;              case 2:              this.myExpander = ((System.Windows.Controls.Expander)(target));              return;              case 3:              this.textEditor = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 104 "..\..\..\..\..\Controls\NetworkEditor\NetworkEditor.xaml"              this.textEditor.MouseHover += new System.Windows.Input.MouseEventHandler(this.textEditor_MouseHover);                            #line default              #line hidden                            #line 105 "..\..\..\..\..\Controls\NetworkEditor\NetworkEditor.xaml"              this.textEditor.MouseHoverStopped += new System.Windows.Input.MouseEventHandler(this.textEditor_MouseHoverStopped);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.NetworkEditorWindow = ((WPFToolboxForSiemensPLCs.Controls.NetworkEditor.NetworkEditor)(target));              return;              case 2:              this.myExpander = ((System.Windows.Controls.Expander)(target));              return;              case 3:              this.textEditor = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 104 "..\..\..\..\..\Controls\NetworkEditor\NetworkEditor.xaml"              this.textEditor.MouseHover += new System.Windows.Input.MouseEventHandler(this.textEditor_MouseHover);                            #line default              #line hidden                            #line 105 "..\..\..\..\..\Controls\NetworkEditor\NetworkEditor.xaml"              this.textEditor.MouseHoverStopped += new System.Windows.Input.MouseEventHandler(this.textEditor_MouseHoverStopped);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    int cnt = 0;                    if (myDB.Structure != null && myDB.Structure.Children != null)                      cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                    string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                    tags += varname + ";" + txtConnectionName.Text + ";DB " + myDB.BlockNumber + " DBW 0;Int;;" +                                ((cnt - 2) / 2).ToString() + ";2;1 s;;;;;0;10;0;100;0;;0;\r\n";                    int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                    foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                  // myDB.GetRowsAsList())                  {                      if (plcDataRow.DataType == S7DataRowType.BOOL)                      {                          ByteBitAddress akAddr = plcDataRow.BlockAddress;                            int bitnr = (akAddr.ByteAddress / 2) * 16 + akAddr.BitAddress; //akAddr.BitAddress;                          if (akAddr.ByteAddress % 2 == 0)                              bitnr += 8;                            string stoeTxt = "";                          string stoeTxtEn = "";                            stoeTxt = plcDataRow.Comment;                          if (stoeTxt.Contains(";"))                          {                              stoeTxt = "Störort: " + stoeTxt.Split(';')[0] + "' " + stoeTxt.Split(';')[1];                          }                            if (chkFixedErrorNumber.IsChecked.Value)                              errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 + akAddr.BitAddress;                          errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" +                                    bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" +                                    stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                          if (!chkFixedErrorNumber.IsChecked.Value)                              errNr++;                      }                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    int cnt = 0;                    if (myDB.Structure != null && myDB.Structure.Children != null)                      cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                    string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                    tags += varname + ";" + txtConnectionName.Text + ";DB " + myDB.BlockNumber + " DBW 0;Int;;" +                                ((cnt - 2) / 2).ToString() + ";2;1 s;;;;;0;10;0;100;0;;0;\r\n";                    int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                    foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                  // myDB.GetRowsAsList())                  {                      if (plcDataRow.DataType == S7DataRowType.BOOL)                      {                          ByteBitAddress akAddr = plcDataRow.BlockAddress;                            int bitnr = (akAddr.ByteAddress / 2) * 16 + akAddr.BitAddress; //akAddr.BitAddress;                          if (akAddr.ByteAddress % 2 == 0)                              bitnr += 8;                            string stoeTxt = "";                          string stoeTxtEn = "";                            stoeTxt = plcDataRow.Comment;                          if (stoeTxt.Contains(";"))                          {                              stoeTxt = "Störort: " + stoeTxt.Split(';')[0] + "' " + stoeTxt.Split(';')[1];                          }                            if (chkFixedErrorNumber.IsChecked.Value)                              errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 + akAddr.BitAddress;                          errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" +                                    bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" +                                    stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                          if (!chkFixedErrorNumber.IsChecked.Value)                              errNr++;                      }                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    int cnt = 0;                    if (myDB.Structure != null && myDB.Structure.Children != null)                      cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                    string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                    tags += varname + ";" + txtConnectionName.Text + ";DB " + myDB.BlockNumber + " DBW 0;Int;;" +                                ((cnt - 2) / 2).ToString() + ";2;1 s;;;;;0;10;0;100;0;;0;\r\n";                    int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                    foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                  // myDB.GetRowsAsList())                  {                      if (plcDataRow.DataType == S7DataRowType.BOOL)                      {                          ByteBitAddress akAddr = plcDataRow.BlockAddress;                            int bitnr = (akAddr.ByteAddress / 2) * 16 + akAddr.BitAddress; //akAddr.BitAddress;                          if (akAddr.ByteAddress % 2 == 0)                              bitnr += 8;                            string stoeTxt = "";                          string stoeTxtEn = "";                            stoeTxt = plcDataRow.Comment;                          if (stoeTxt.Contains(";"))                          {                              stoeTxt = "Störort: " + stoeTxt.Split(';')[0] + "' " + stoeTxt.Split(';')[1];                          }                            if (chkFixedErrorNumber.IsChecked.Value)                              errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 + akAddr.BitAddress;                          errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" +                                    bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" +                                    stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                          if (!chkFixedErrorNumber.IsChecked.Value)                              errNr++;                      }                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    int cnt = 0;                    if (myDB.Structure != null && myDB.Structure.Children != null)                      cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                    string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                    tags += varname + ";" + txtConnectionName.Text + ";DB " + myDB.BlockNumber + " DBW 0;Int;;" +                                ((cnt - 2) / 2).ToString() + ";2;1 s;;;;;0;10;0;100;0;;0;\r\n";                    int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                    foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                  // myDB.GetRowsAsList())                  {                      if (plcDataRow.DataType == S7DataRowType.BOOL)                      {                          ByteBitAddress akAddr = plcDataRow.BlockAddress;                            int bitnr = (akAddr.ByteAddress / 2) * 16 + akAddr.BitAddress; //akAddr.BitAddress;                          if (akAddr.ByteAddress % 2 == 0)                              bitnr += 8;                            string stoeTxt = "";                          string stoeTxtEn = "";                            stoeTxt = plcDataRow.Comment;                          if (stoeTxt.Contains(";"))                          {                              stoeTxt = "Störort: " + stoeTxt.Split(';')[0] + "' " + stoeTxt.Split(';')[1];                          }                            if (chkFixedErrorNumber.IsChecked.Value)                              errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 + akAddr.BitAddress;                          errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" +                                    bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" +                                    stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                          if (!chkFixedErrorNumber.IsChecked.Value)                              errNr++;                      }                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    int cnt = 0;                    if (myDB.Structure != null && myDB.Structure.Children != null)                      cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                    string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                    tags += varname + ";" + txtConnectionName.Text + ";DB " + myDB.BlockNumber + " DBW 0;Int;;" +                                ((cnt - 2) / 2).ToString() + ";2;1 s;;;;;0;10;0;100;0;;0;\r\n";                    int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                    foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                  // myDB.GetRowsAsList())                  {                      if (plcDataRow.DataType == S7DataRowType.BOOL)                      {                          ByteBitAddress akAddr = plcDataRow.BlockAddress;                            int bitnr = (akAddr.ByteAddress / 2) * 16 + akAddr.BitAddress; //akAddr.BitAddress;                          if (akAddr.ByteAddress % 2 == 0)                              bitnr += 8;                            string stoeTxt = "";                          string stoeTxtEn = "";                            stoeTxt = plcDataRow.Comment;                          if (stoeTxt.Contains(";"))                          {                              stoeTxt = "Störort: " + stoeTxt.Split(';')[0] + "' " + stoeTxt.Split(';')[1];                          }                            if (chkFixedErrorNumber.IsChecked.Value)                              errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 + akAddr.BitAddress;                          errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" +                                    bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" +                                    stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                          if (!chkFixedErrorNumber.IsChecked.Value)                              errNr++;                      }                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    int cnt = 0;                    if (myDB.Structure != null && myDB.Structure.Children != null)                      cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                    string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                    tags += varname + ";" + txtConnectionName.Text + ";DB " + myDB.BlockNumber + " DBW 0;Int;;" +                                ((cnt - 2) / 2).ToString() + ";2;1 s;;;;;0;10;0;100;0;;0;\r\n";                    int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                    foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                  // myDB.GetRowsAsList())                  {                      if (plcDataRow.DataType == S7DataRowType.BOOL)                      {                          ByteBitAddress akAddr = plcDataRow.BlockAddress;                            int bitnr = (akAddr.ByteAddress / 2) * 16 + akAddr.BitAddress; //akAddr.BitAddress;                          if (akAddr.ByteAddress % 2 == 0)                              bitnr += 8;                            string stoeTxt = "";                          string stoeTxtEn = "";                            stoeTxt = plcDataRow.Comment;                          if (stoeTxt.Contains(";"))                          {                              stoeTxt = "Störort: " + stoeTxt.Split(';')[0] + "' " + stoeTxt.Split(';')[1];                          }                            if (chkFixedErrorNumber.IsChecked.Value)                              errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 + akAddr.BitAddress;                          errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" +                                    bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" +                                    stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                          if (!chkFixedErrorNumber.IsChecked.Value)                              errNr++;                      }                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    int cnt = 0;                    if (myDB.Structure != null && myDB.Structure.Children != null)                      cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                    string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                    tags += varname + ";" + txtConnectionName.Text + ";DB " + myDB.BlockNumber + " DBW 0;Int;;" +                                ((cnt - 2) / 2).ToString() + ";2;1 s;;;;;0;10;0;100;0;;0;\r\n";                    int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                    foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                  // myDB.GetRowsAsList())                  {                      if (plcDataRow.DataType == S7DataRowType.BOOL)                      {                          ByteBitAddress akAddr = plcDataRow.BlockAddress;                            int bitnr = (akAddr.ByteAddress / 2) * 16 + akAddr.BitAddress; //akAddr.BitAddress;                          if (akAddr.ByteAddress % 2 == 0)                              bitnr += 8;                            string stoeTxt = "";                          string stoeTxtEn = "";                            stoeTxt = plcDataRow.Comment;                          if (stoeTxt.Contains(";"))                          {                              stoeTxt = "Störort: " + stoeTxt.Split(';')[0] + "' " + stoeTxt.Split(';')[1];                          }                            if (chkFixedErrorNumber.IsChecked.Value)                              errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 + akAddr.BitAddress;                          errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" +                                    bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" +                                    stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                          if (!chkFixedErrorNumber.IsChecked.Value)                              errNr++;                      }                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_1,The following statement contains a magic number: try              {                  foreach (var projectBlockInfo in ConvertBlocks)                  {                      S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                          int cnt = 0;                        if (myDB.Structure != null && myDB.Structure.Children != null)                          cnt = ((S7DataRow)myDB.Structure.Children[myDB.Structure.Children.Count - 1]).NextBlockAddress.ByteAddress;                        string varname = "STOERUNGEN_DB" + myDB.BlockNumber;                        for (int n = 0; n < cnt / 2; n++)                      {                          try                          {                              HMIGOObject.CreateTag(varname + "_" + (n + 1).ToString()'                                                    HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                    txtConnectionName.Text'                                                    "DB" + myDB.BlockNumber + "'DD" + (n * 2).ToString()' "Stoerungen");                          }                          catch (COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                          }                        }                        string errors = "";                        int errNr = Convert.ToInt32(txtStartErrorNumber.Text);                        foreach (S7DataRow plcDataRow in S7DataRow.GetChildrowsAsList(((S7DataRow)myDB.Structure)))                      // myDB.GetRowsAsList())                      {                          if (plcDataRow.DataType == S7DataRowType.BOOL)                          {                              ByteBitAddress akAddr = plcDataRow.BlockAddress;                              int varnr = (akAddr.ByteAddress / 2) + 1;                                int bitnr = akAddr.BitAddress;                              if (akAddr.ByteAddress % 2 == 0)                                  bitnr += 8;                                string stoeTxt = "";                              string stoeOrt = "";                              string stoeTxtEn = "";                                stoeTxt = plcDataRow.Comment;                              if (stoeTxt.Contains(";"))                              {                                  stoeTxt = stoeTxt.Split(';')[1];                                  stoeOrt = stoeTxt.Split(';')[0];                              }                                if (chkFixedErrorNumber.IsChecked.Value)                                  errNr = Convert.ToInt32(txtStartErrorNumber.Text) + akAddr.ByteAddress * 8 +                                          akAddr.BitAddress;                                try                              {                                  HMIGOObject.CreateSingleAlarm(errNr'                                                                HMIGENOBJECTSLib.HMIGO_SINGLE_ALARM_CLASS_ID.                                                                    SINGLE_ALARM_ERROR' 1' stoeTxt'                                                                varname + "_" + varnr.ToString()' bitnr);                                  HMIGOObject.SingleAlarmInfoText = stoeTxt;                                  HMIGOObject.SingleAlarmText2ID = stoeOrt;                                  HMIGOObject.CommitSingleAlarm();                              }                              catch (System.Runtime.InteropServices.COMException ex)                              {                                  if (ex.ErrorCode != -2147467259)                                      throw ex;                              }                                //errors += "\"D\"\t\"" + errNr.ToString() + "\"\t\"Alarms\"\t\"" + varname + "\"\t\"" + bitnr.ToString() + "\"\t\t\t\t\t\t\"0\"\t\"de-DE=" + stoeTxt + "\"\t\"en-US=" + stoeTxtEn + "\"\t\"de-DE=\"" + "\r\n";                              if (!chkFixedErrorNumber.IsChecked.Value)                                  errNr++;                          }                      }                  }              }              catch (System.Runtime.InteropServices.COMException ex)              {                  if (ex.ErrorCode == -2147195889)                      MessageBox.Show("Error: The Connection Name you specified does not exist!");                  else                      MessageBox.Show("Error: " + ex.Message);              }              catch (Exception ex)              {                  MessageBox.Show("Error: " + ex.Message);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_2,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    List<DataBlockRow> myLst = null;                  if (chkExpandArrays.IsChecked.Value)                      myLst =                          DataBlockRow.GetChildrowsAsList(((DataBlockRow)myDB.GetArrayExpandedStructure(new S7DataBlockExpandOptions())));                  // ) myDB.GetRowsAsArrayExpandedList(ne);                  else                      myLst = DataBlockRow.GetChildrowsAsList(((DataBlockRow)myDB.Structure)); // myDB.GetRowsAsList();                    int cnt = 0;                    try                  {                      foreach (S7DataRow plcDataRow in myLst)                      {                          string tagName = txtTagsPrefix.Text +                                           plcDataRow.StructuredName.Replace("."' "_").Replace("["' "_").Replace("]"' "").                                               Replace(" "' "").Replace("'"' "_");                          try                          {                              switch (plcDataRow.DataType)                              {                                  case S7DataRowType.BOOL:                                      HMIGOObject.CreateTag(tagName' HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_BINARY_TAG'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'D" +                                                            plcDataRow.BlockAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.INT:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_SIGNED_16BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DW" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.DINT:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_SIGNED_32BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.WORD:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DW" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.DWORD:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_32BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.BYTE:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_8BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DBB" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.REAL:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.                                                                TAG_FLOATINGPOINT_NUMBER_32BIT_IEEE_754'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                              }                          }                          catch (System.Runtime.InteropServices.COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                              //Tag existiert schoin                                                      }                      }                  }                  catch (System.Runtime.InteropServices.COMException ex)                  {                      if (ex.ErrorCode == -2147195889)                            MessageBox.Show("Error: The Connection Name you specified does not exist!");                      else                          MessageBox.Show("Error: " + ex.Message);                      return;                  }                  catch (Exception ex)                  {                      MessageBox.Show("Error: " + ex.Message);                      return;                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_2,The following statement contains a magic number: foreach (var projectBlockInfo in ConvertBlocks)              {                  S7DataBlock myDB = (S7DataBlock)projectBlockInfo.GetBlock();                    List<DataBlockRow> myLst = null;                  if (chkExpandArrays.IsChecked.Value)                      myLst =                          DataBlockRow.GetChildrowsAsList(((DataBlockRow)myDB.GetArrayExpandedStructure(new S7DataBlockExpandOptions())));                  // ) myDB.GetRowsAsArrayExpandedList(ne);                  else                      myLst = DataBlockRow.GetChildrowsAsList(((DataBlockRow)myDB.Structure)); // myDB.GetRowsAsList();                    int cnt = 0;                    try                  {                      foreach (S7DataRow plcDataRow in myLst)                      {                          string tagName = txtTagsPrefix.Text +                                           plcDataRow.StructuredName.Replace("."' "_").Replace("["' "_").Replace("]"' "").                                               Replace(" "' "").Replace("'"' "_");                          try                          {                              switch (plcDataRow.DataType)                              {                                  case S7DataRowType.BOOL:                                      HMIGOObject.CreateTag(tagName' HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_BINARY_TAG'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'D" +                                                            plcDataRow.BlockAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.INT:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_SIGNED_16BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DW" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.DINT:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_SIGNED_32BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.WORD:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DW" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.DWORD:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_32BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.BYTE:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_8BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DBB" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.REAL:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.                                                                TAG_FLOATINGPOINT_NUMBER_32BIT_IEEE_754'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                              }                          }                          catch (System.Runtime.InteropServices.COMException ex)                          {                              if (ex.ErrorCode != -2147196408)                                  throw ex;                              //Tag existiert schoin                                                      }                      }                  }                  catch (System.Runtime.InteropServices.COMException ex)                  {                      if (ex.ErrorCode == -2147195889)                            MessageBox.Show("Error: The Connection Name you specified does not exist!");                      else                          MessageBox.Show("Error: " + ex.Message);                      return;                  }                  catch (Exception ex)                  {                      MessageBox.Show("Error: " + ex.Message);                      return;                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSZL,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSZL.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtSZLid = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.txtSZLindex = ((System.Windows.Controls.TextBox)(target));              return;              case 3:                            #line 25 "..\..\..\..\DockableWindows\ContentWindowSZL.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 4:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSZL,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSZL.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtSZLid = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.txtSZLindex = ((System.Windows.Controls.TextBox)(target));              return;              case 3:                            #line 25 "..\..\..\..\DockableWindows\ContentWindowSZL.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 4:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSZL,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSZL.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtSZLid = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.txtSZLindex = ((System.Windows.Controls.TextBox)(target));              return;              case 3:                            #line 25 "..\..\..\..\DockableWindows\ContentWindowSZL.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 4:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowReferenceData,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowReferenceData.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 2:                            #line 31 "..\..\..\..\DockableWindows\ContentWindowReferenceData.xaml"              ((System.Windows.Controls.DataGrid)(target)).MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.DataGrid_MouseDoubleClick);                            #line default              #line hidden              break;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentBlockList,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentBlockList.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentBlockList)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.DockableContent_GotFocus);                            #line default              #line hidden              return;              case 2:                            #line 12 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuCreateAwl_Click);                            #line default              #line hidden              return;              case 3:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_MouseDoubleClick);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_PreviewMouseDown);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.myDataGrid_PreviewMouseMove);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.GiveFeedback += new System.Windows.GiveFeedbackEventHandler(this.myDataGrid_GiveFeedback);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_MouseDown);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.myDataGrid_SelectionChanged);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentBlockList,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentBlockList.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentBlockList)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.DockableContent_GotFocus);                            #line default              #line hidden              return;              case 2:                            #line 12 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuCreateAwl_Click);                            #line default              #line hidden              return;              case 3:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_MouseDoubleClick);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_PreviewMouseDown);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.myDataGrid_PreviewMouseMove);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.GiveFeedback += new System.Windows.GiveFeedbackEventHandler(this.myDataGrid_GiveFeedback);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_MouseDown);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.myDataGrid_SelectionChanged);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDataBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDataBlockEditor.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 12 "..\..\..\..\DockableWindows\ContentWindowDataBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowDataBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged);                            #line default              #line hidden              return;              case 2:              this.dtaViewControl = ((WPFToolboxForSiemensPLCs.DockableWindows.DataBlockViewControl.DataBlockViewControl)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,myConnectionsList_MouseDoubleClick,The following statement contains a magic number: if (myConnectionsList.SelectedItem != null)              {                  OnlineBlocksFolder onl = new OnlineBlocksFolder((string) myConnectionsList.SelectedItem);                  IBlocksFolder fld = (IBlocksFolder) onl;                  DockableContentBlockList tmp = new DockableContentBlockList(fld);                  tmp.parentDockingManager = parentDockingManager;                  tmp.Title = fld.ToString(); //.Substring(fld.ToString().LastIndexOf("\\") + 1);                  tmp.ToolTip = fld.ToString();                  tmp.Show(parentDockingManager);                  tmp.ToggleAutoHide();                    //Set size of the parent DockablePane (it's automaticly been created!)                  DockablePane tmpPane = tmp.TryFindParent<DockablePane>();                  ResizingPanel.SetEffectiveSize(tmpPane' new Size(350' 0));                    parentDockingManager.ActiveDocument = tmp;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.myConnectionsList = ((System.Windows.Controls.ListBox)(target));                            #line 14 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              this.myConnectionsList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.myConnectionsList_MouseDoubleClick);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              this.myConnectionsList.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myConnectionsList_PreviewMouseDown);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              this.myConnectionsList.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.myConnectionsList_PreviewMouseMove);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              this.myConnectionsList.GiveFeedback += new System.Windows.GiveFeedbackEventHandler(this.myConnectionsList_GiveFeedback);                            #line default              #line hidden              return;              case 2:                            #line 16 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentProjectList,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentProjectList.xaml.cs,TreeView_MouseDoubleClick,The following statement contains a magic number: if (myTreeView.SelectedItem!=null)              {                  if (myTreeView.SelectedItem is IBlocksFolder)                  {                      IBlocksFolder fld = (IBlocksFolder) myTreeView.SelectedItem;                      DockableContentBlockList tmp = new DockableContentBlockList(fld);                      tmp.parentDockingManager = parentDockingManager;                      tmp.Title = fld.ToString(); //.Substring(fld.ToString().LastIndexOf("\\") + 1);                      if (myTreeView.SelectedItem is BlocksOfflineFolder)                          tmp.ToolTip = ((BlocksOfflineFolder) myTreeView.SelectedItem).Folder;                      else                          tmp.ToolTip = fld.ToString();                                          tmp.Show(parentDockingManager);                      tmp.ToggleAutoHide();                        //Set size of the parent DockablePane (it's automaticly been created!)                      DockablePane tmpPane = tmp.TryFindParent<DockablePane>();                                          ResizingPanel.SetEffectiveSize(tmpPane'new Size(350'0));                        parentDockingManager.ActiveDocument = tmp;                    }                  else if (myTreeView.SelectedItem is ISymbolTable)                  {                      ISymbolTable fld = (ISymbolTable)myTreeView.SelectedItem;                      ContentWindowSymbolTable tmp = new ContentWindowSymbolTable(fld);                      tmp.Title = fld.ToString(); //.Substring(fld.ToString().LastIndexOf("\\") + 1);                      tmp.ToolTip = fld.ToString();                                         tmp.Show(parentDockingManager);                      parentDockingManager.ActiveDocument = tmp;                  }                  else if (myTreeView.SelectedItem is ReferenceData)                  {                      ReferenceData fld = (ReferenceData)myTreeView.SelectedItem;                      ContentWindowReferenceData tmp = new ContentWindowReferenceData(fld);                      tmp.parentDockingManager = parentDockingManager;                                          tmp.Title = fld.ToString(); //.Substring(fld.ToString().LastIndexOf("\\") + 1);                      tmp.ToolTip = fld.ToString();                      tmp.Show(parentDockingManager);                      parentDockingManager.ActiveDocument = tmp;                  }                  else if (myTreeView.SelectedItem is S7VATBlock)                  {                      S7VATBlock fld = (S7VATBlock)myTreeView.SelectedItem;                      ContentWindowVarTab tmp = new ContentWindowVarTab(fld);                      tmp.Title = fld.ToString(); //.Substring(fld.ToString().LastIndexOf("\\") + 1);                      tmp.ToolTip = fld.ToString();                      tmp.Show(parentDockingManager);                      parentDockingManager.ActiveDocument = tmp;                  }              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,ItemContainerGenerator_StatusChanged,The following statement contains a magic number: if (myLst.ItemContainerGenerator.Status == System.Windows.Controls.Primitives.GeneratorStatus.ContainersGenerated)              {                  myLst.ItemContainerGenerator.StatusChanged -= new EventHandler(ItemContainerGenerator_StatusChanged);                    myLst.ScrollIntoView(((S5FunctionBlock) myBlock).Networks[netzwerknr - 1]);                  DependencyObject depObj = myLst.ItemContainerGenerator.ContainerFromIndex(netzwerknr - 1);                    NetworkEditor nedt = depObj.TryFindChild<NetworkEditor>();                    Network netw = ((S5FunctionBlock) myBlock).Networks[netzwerknr - 1];                  int anz = 0;                  for (int q = 0; q < zeile-1; q++)                      anz += netw.AWLCode[q].ToString().Length + 2;                    nedt.ShowLine(zeile' anz' netw.AWLCode[zeile-1].ToString().Length);              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,viewBlockStatus,The following statement contains a magic number: if (myBlock is S7FunctionBlock)              {                  try                  {                        var visRow = getFirstVisbleExpandedItem();                                            int bytepos = 0;                        if (visRow!=null)                          foreach (var row in ((S7FunctionBlock)myBlock).AWLCode)                          {                              if (visRow == row)                                  break;                              bytepos += ((S7FunctionBlockRow) row).ByteSize;                          }                          S7FunctionBlock myS7Blk = (S7FunctionBlock)myBlock;                      MyDiagnosticData = App.clientForm.Connection.PLCstartRequestDiagnosticData(myS7Blk' bytepos' S7FunctionBlockRow.SelectedStatusValues.ALL);                        if (diagTimer == null)                      {                          diagTimer = new DispatcherTimer(); // DispatcherTimer();                          diagTimer.Tick += new EventHandler(diagTimer_Tick);                          diagTimer.Interval = new TimeSpan(0' 0' 0' 0' 40);                      }                      diagTimer.Start();                  }                  catch (Exception ex)                  {                      App.clientForm.lblStatus.Text = ex.Message;                      if (diagTimer != null)                      {                          diagTimer.Stop();                          diagTimer = null;                      }                  }                  //diagTimer.Start();                                                             }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).Closing += new System.EventHandler<System.ComponentModel.CancelEventArgs>(this.DocumentContent_Closing);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged);                            #line default              #line hidden              return;              case 2:              this.mainGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.toppanel = ((System.Windows.Controls.Grid)(target));              return;              case 4:              this.myTree = ((System.Windows.Controls.TreeView)(target));                            #line 62 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTree_SelectedItemChanged);                            #line default              #line hidden              return;              case 5:              this.myDGrid = ((System.Windows.Controls.DataGrid)(target));              return;              case 6:              this.myLst = ((System.Windows.Controls.ListBox)(target));                            #line 123 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myLst.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollChanged));                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).Closing += new System.EventHandler<System.ComponentModel.CancelEventArgs>(this.DocumentContent_Closing);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged);                            #line default              #line hidden              return;              case 2:              this.mainGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.toppanel = ((System.Windows.Controls.Grid)(target));              return;              case 4:              this.myTree = ((System.Windows.Controls.TreeView)(target));                            #line 62 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTree_SelectedItemChanged);                            #line default              #line hidden              return;              case 5:              this.myDGrid = ((System.Windows.Controls.DataGrid)(target));              return;              case 6:              this.myLst = ((System.Windows.Controls.ListBox)(target));                            #line 123 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myLst.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollChanged));                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).Closing += new System.EventHandler<System.ComponentModel.CancelEventArgs>(this.DocumentContent_Closing);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged);                            #line default              #line hidden              return;              case 2:              this.mainGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.toppanel = ((System.Windows.Controls.Grid)(target));              return;              case 4:              this.myTree = ((System.Windows.Controls.TreeView)(target));                            #line 62 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTree_SelectedItemChanged);                            #line default              #line hidden              return;              case 5:              this.myDGrid = ((System.Windows.Controls.DataGrid)(target));              return;              case 6:              this.myLst = ((System.Windows.Controls.ListBox)(target));                            #line 123 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myLst.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollChanged));                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).Closing += new System.EventHandler<System.ComponentModel.CancelEventArgs>(this.DocumentContent_Closing);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged);                            #line default              #line hidden              return;              case 2:              this.mainGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.toppanel = ((System.Windows.Controls.Grid)(target));              return;              case 4:              this.myTree = ((System.Windows.Controls.TreeView)(target));                            #line 62 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTree_SelectedItemChanged);                            #line default              #line hidden              return;              case 5:              this.myDGrid = ((System.Windows.Controls.DataGrid)(target));              return;              case 6:              this.myLst = ((System.Windows.Controls.ListBox)(target));                            #line 123 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myLst.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollChanged));                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).Closing += new System.EventHandler<System.ComponentModel.CancelEventArgs>(this.DocumentContent_Closing);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged);                            #line default              #line hidden              return;              case 2:              this.mainGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.toppanel = ((System.Windows.Controls.Grid)(target));              return;              case 4:              this.myTree = ((System.Windows.Controls.TreeView)(target));                            #line 62 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTree_SelectedItemChanged);                            #line default              #line hidden              return;              case 5:              this.myDGrid = ((System.Windows.Controls.DataGrid)(target));              return;              case 6:              this.myLst = ((System.Windows.Controls.ListBox)(target));                            #line 123 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myLst.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollChanged));                            #line default              #line hidden              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,ContentWindowDiffWindow,The following statement contains a magic number: foldingUpdateTimer1.Interval = TimeSpan.FromSeconds(2);
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,foldingUpdateTimerA_Tick,The following statement contains a magic number: if (foldingManagerA!=null)                  foreach (var fld in foldingManagerA.AllFoldings)                  {                      if (txtResult.Document.Text.Substring(fld.StartOffset' 8) == "Netzwerk")                          fld.Title = txtResult.Document.Text.Substring(fld.StartOffset' 11) + " ...";                      else                          fld.Title = txtResult.Document.Text.Substring(fld.StartOffset' 3) + "...";                  }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,foldingUpdateTimerA_Tick,The following statement contains a magic number: if (foldingManagerA!=null)                  foreach (var fld in foldingManagerA.AllFoldings)                  {                      if (txtResult.Document.Text.Substring(fld.StartOffset' 8) == "Netzwerk")                          fld.Title = txtResult.Document.Text.Substring(fld.StartOffset' 11) + " ...";                      else                          fld.Title = txtResult.Document.Text.Substring(fld.StartOffset' 3) + "...";                  }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,foldingUpdateTimerA_Tick,The following statement contains a magic number: if (foldingManagerA!=null)                  foreach (var fld in foldingManagerA.AllFoldings)                  {                      if (txtResult.Document.Text.Substring(fld.StartOffset' 8) == "Netzwerk")                          fld.Title = txtResult.Document.Text.Substring(fld.StartOffset' 11) + " ...";                      else                          fld.Title = txtResult.Document.Text.Substring(fld.StartOffset' 3) + "...";                  }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_main,The following statement contains a magic number: if (this.Diff_Timeout <= 0)              {                  deadline = DateTime.MaxValue;              }              else              {                  deadline = DateTime.Now + new TimeSpan(((long)(Diff_Timeout * 1000)) * 10000);              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_main,The following statement contains a magic number: if (this.Diff_Timeout <= 0)              {                  deadline = DateTime.MaxValue;              }              else              {                  deadline = DateTime.Now + new TimeSpan(((long)(Diff_Timeout * 1000)) * 10000);              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: if (hm != null)              {                  // A half-match was found' sort out the return data.                  string text1_a = hm[0];                  string text1_b = hm[1];                  string text2_a = hm[2];                  string text2_b = hm[3];                  string mid_common = hm[4];                  // Send both pairs off for separate processing.                  List<Diff> diffs_a = diff_main(text1_a' text2_a' checklines' deadline);                  List<Diff> diffs_b = diff_main(text1_b' text2_b' checklines' deadline);                  // Merge the results.                  diffs = diffs_a;                  diffs.Add(new Diff(Operation.EQUAL' mid_common));                  diffs.AddRange(diffs_b);                  return diffs;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: if (hm != null)              {                  // A half-match was found' sort out the return data.                  string text1_a = hm[0];                  string text1_b = hm[1];                  string text2_a = hm[2];                  string text2_b = hm[3];                  string mid_common = hm[4];                  // Send both pairs off for separate processing.                  List<Diff> diffs_a = diff_main(text1_a' text2_a' checklines' deadline);                  List<Diff> diffs_b = diff_main(text1_b' text2_b' checklines' deadline);                  // Merge the results.                  diffs = diffs_a;                  diffs.Add(new Diff(Operation.EQUAL' mid_common));                  diffs.AddRange(diffs_b);                  return diffs;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: if (hm != null)              {                  // A half-match was found' sort out the return data.                  string text1_a = hm[0];                  string text1_b = hm[1];                  string text2_a = hm[2];                  string text2_b = hm[3];                  string mid_common = hm[4];                  // Send both pairs off for separate processing.                  List<Diff> diffs_a = diff_main(text1_a' text2_a' checklines' deadline);                  List<Diff> diffs_b = diff_main(text1_b' text2_b' checklines' deadline);                  // Merge the results.                  diffs = diffs_a;                  diffs.Add(new Diff(Operation.EQUAL' mid_common));                  diffs.AddRange(diffs_b);                  return diffs;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: if (checklines && text1.Length > 100 && text2.Length > 100)              {                  return diff_lineMode(text1' text2' deadline);              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_compute,The following statement contains a magic number: if (checklines && text1.Length > 100 && text2.Length > 100)              {                  return diff_lineMode(text1' text2' deadline);              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_lineMode,The following statement contains a magic number: List<string> linearray = (List<string>)b[2];
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: int max_d = (text1_length + text2_length + 1) / 2;
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: int v_length = 2 * max_d;
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: bool front = (delta % 2 != 0);
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: for (int d = 0; d < max_d; d++)              {                  // Bail out if deadline is reached.                  if (DateTime.Now > deadline)                  {                      break;                  }                    // Walk the front path one step.                  for (int k1 = -d + k1start; k1 <= d - k1end; k1 += 2)                  {                      int k1_offset = v_offset + k1;                      int x1;                      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])                      {                          x1 = v1[k1_offset + 1];                      }                      else                      {                          x1 = v1[k1_offset - 1] + 1;                      }                      int y1 = x1 - k1;                      while (x1 < text1_length && y1 < text2_length && text1[x1] == text2[y1])                      {                          x1++;                          y1++;                      }                      v1[k1_offset] = x1;                      if (x1 > text1_length)                      {                          // Ran off the right of the graph.                          k1end += 2;                      }                      else if (y1 > text2_length)                      {                          // Ran off the bottom of the graph.                          k1start += 2;                      }                      else if (front)                      {                          int k2_offset = v_offset + delta - k1;                          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1)                          {                              // Mirror x2 onto top-left coordinate system.                              int x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }                    // Walk the reverse path one step.                  for (int k2 = -d + k2start; k2 <= d - k2end; k2 += 2)                  {                      int k2_offset = v_offset + k2;                      int x2;                      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])                      {                          x2 = v2[k2_offset + 1];                      }                      else                      {                          x2 = v2[k2_offset - 1] + 1;                      }                      int y2 = x2 - k2;                      while (x2 < text1_length && y2 < text2_length && text1[text1_length - x2 - 1] == text2[text2_length - y2 - 1])                      {                          x2++;                          y2++;                      }                      v2[k2_offset] = x2;                      if (x2 > text1_length)                      {                          // Ran off the left of the graph.                          k2end += 2;                      }                      else if (y2 > text2_length)                      {                          // Ran off the top of the graph.                          k2start += 2;                      }                      else if (!front)                      {                          int k1_offset = v_offset + delta - k2;                          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1)                          {                              int x1 = v1[k1_offset];                              int y1 = v_offset + x1 - k1_offset;                              // Mirror x2 onto top-left coordinate system.                              x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: for (int d = 0; d < max_d; d++)              {                  // Bail out if deadline is reached.                  if (DateTime.Now > deadline)                  {                      break;                  }                    // Walk the front path one step.                  for (int k1 = -d + k1start; k1 <= d - k1end; k1 += 2)                  {                      int k1_offset = v_offset + k1;                      int x1;                      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])                      {                          x1 = v1[k1_offset + 1];                      }                      else                      {                          x1 = v1[k1_offset - 1] + 1;                      }                      int y1 = x1 - k1;                      while (x1 < text1_length && y1 < text2_length && text1[x1] == text2[y1])                      {                          x1++;                          y1++;                      }                      v1[k1_offset] = x1;                      if (x1 > text1_length)                      {                          // Ran off the right of the graph.                          k1end += 2;                      }                      else if (y1 > text2_length)                      {                          // Ran off the bottom of the graph.                          k1start += 2;                      }                      else if (front)                      {                          int k2_offset = v_offset + delta - k1;                          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1)                          {                              // Mirror x2 onto top-left coordinate system.                              int x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }                    // Walk the reverse path one step.                  for (int k2 = -d + k2start; k2 <= d - k2end; k2 += 2)                  {                      int k2_offset = v_offset + k2;                      int x2;                      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])                      {                          x2 = v2[k2_offset + 1];                      }                      else                      {                          x2 = v2[k2_offset - 1] + 1;                      }                      int y2 = x2 - k2;                      while (x2 < text1_length && y2 < text2_length && text1[text1_length - x2 - 1] == text2[text2_length - y2 - 1])                      {                          x2++;                          y2++;                      }                      v2[k2_offset] = x2;                      if (x2 > text1_length)                      {                          // Ran off the left of the graph.                          k2end += 2;                      }                      else if (y2 > text2_length)                      {                          // Ran off the top of the graph.                          k2start += 2;                      }                      else if (!front)                      {                          int k1_offset = v_offset + delta - k2;                          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1)                          {                              int x1 = v1[k1_offset];                              int y1 = v_offset + x1 - k1_offset;                              // Mirror x2 onto top-left coordinate system.                              x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: for (int d = 0; d < max_d; d++)              {                  // Bail out if deadline is reached.                  if (DateTime.Now > deadline)                  {                      break;                  }                    // Walk the front path one step.                  for (int k1 = -d + k1start; k1 <= d - k1end; k1 += 2)                  {                      int k1_offset = v_offset + k1;                      int x1;                      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])                      {                          x1 = v1[k1_offset + 1];                      }                      else                      {                          x1 = v1[k1_offset - 1] + 1;                      }                      int y1 = x1 - k1;                      while (x1 < text1_length && y1 < text2_length && text1[x1] == text2[y1])                      {                          x1++;                          y1++;                      }                      v1[k1_offset] = x1;                      if (x1 > text1_length)                      {                          // Ran off the right of the graph.                          k1end += 2;                      }                      else if (y1 > text2_length)                      {                          // Ran off the bottom of the graph.                          k1start += 2;                      }                      else if (front)                      {                          int k2_offset = v_offset + delta - k1;                          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1)                          {                              // Mirror x2 onto top-left coordinate system.                              int x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }                    // Walk the reverse path one step.                  for (int k2 = -d + k2start; k2 <= d - k2end; k2 += 2)                  {                      int k2_offset = v_offset + k2;                      int x2;                      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])                      {                          x2 = v2[k2_offset + 1];                      }                      else                      {                          x2 = v2[k2_offset - 1] + 1;                      }                      int y2 = x2 - k2;                      while (x2 < text1_length && y2 < text2_length && text1[text1_length - x2 - 1] == text2[text2_length - y2 - 1])                      {                          x2++;                          y2++;                      }                      v2[k2_offset] = x2;                      if (x2 > text1_length)                      {                          // Ran off the left of the graph.                          k2end += 2;                      }                      else if (y2 > text2_length)                      {                          // Ran off the top of the graph.                          k2start += 2;                      }                      else if (!front)                      {                          int k1_offset = v_offset + delta - k2;                          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1)                          {                              int x1 = v1[k1_offset];                              int y1 = v_offset + x1 - k1_offset;                              // Mirror x2 onto top-left coordinate system.                              x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: for (int d = 0; d < max_d; d++)              {                  // Bail out if deadline is reached.                  if (DateTime.Now > deadline)                  {                      break;                  }                    // Walk the front path one step.                  for (int k1 = -d + k1start; k1 <= d - k1end; k1 += 2)                  {                      int k1_offset = v_offset + k1;                      int x1;                      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])                      {                          x1 = v1[k1_offset + 1];                      }                      else                      {                          x1 = v1[k1_offset - 1] + 1;                      }                      int y1 = x1 - k1;                      while (x1 < text1_length && y1 < text2_length && text1[x1] == text2[y1])                      {                          x1++;                          y1++;                      }                      v1[k1_offset] = x1;                      if (x1 > text1_length)                      {                          // Ran off the right of the graph.                          k1end += 2;                      }                      else if (y1 > text2_length)                      {                          // Ran off the bottom of the graph.                          k1start += 2;                      }                      else if (front)                      {                          int k2_offset = v_offset + delta - k1;                          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1)                          {                              // Mirror x2 onto top-left coordinate system.                              int x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }                    // Walk the reverse path one step.                  for (int k2 = -d + k2start; k2 <= d - k2end; k2 += 2)                  {                      int k2_offset = v_offset + k2;                      int x2;                      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])                      {                          x2 = v2[k2_offset + 1];                      }                      else                      {                          x2 = v2[k2_offset - 1] + 1;                      }                      int y2 = x2 - k2;                      while (x2 < text1_length && y2 < text2_length && text1[text1_length - x2 - 1] == text2[text2_length - y2 - 1])                      {                          x2++;                          y2++;                      }                      v2[k2_offset] = x2;                      if (x2 > text1_length)                      {                          // Ran off the left of the graph.                          k2end += 2;                      }                      else if (y2 > text2_length)                      {                          // Ran off the top of the graph.                          k2start += 2;                      }                      else if (!front)                      {                          int k1_offset = v_offset + delta - k2;                          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1)                          {                              int x1 = v1[k1_offset];                              int y1 = v_offset + x1 - k1_offset;                              // Mirror x2 onto top-left coordinate system.                              x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: for (int d = 0; d < max_d; d++)              {                  // Bail out if deadline is reached.                  if (DateTime.Now > deadline)                  {                      break;                  }                    // Walk the front path one step.                  for (int k1 = -d + k1start; k1 <= d - k1end; k1 += 2)                  {                      int k1_offset = v_offset + k1;                      int x1;                      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])                      {                          x1 = v1[k1_offset + 1];                      }                      else                      {                          x1 = v1[k1_offset - 1] + 1;                      }                      int y1 = x1 - k1;                      while (x1 < text1_length && y1 < text2_length && text1[x1] == text2[y1])                      {                          x1++;                          y1++;                      }                      v1[k1_offset] = x1;                      if (x1 > text1_length)                      {                          // Ran off the right of the graph.                          k1end += 2;                      }                      else if (y1 > text2_length)                      {                          // Ran off the bottom of the graph.                          k1start += 2;                      }                      else if (front)                      {                          int k2_offset = v_offset + delta - k1;                          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1)                          {                              // Mirror x2 onto top-left coordinate system.                              int x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }                    // Walk the reverse path one step.                  for (int k2 = -d + k2start; k2 <= d - k2end; k2 += 2)                  {                      int k2_offset = v_offset + k2;                      int x2;                      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])                      {                          x2 = v2[k2_offset + 1];                      }                      else                      {                          x2 = v2[k2_offset - 1] + 1;                      }                      int y2 = x2 - k2;                      while (x2 < text1_length && y2 < text2_length && text1[text1_length - x2 - 1] == text2[text2_length - y2 - 1])                      {                          x2++;                          y2++;                      }                      v2[k2_offset] = x2;                      if (x2 > text1_length)                      {                          // Ran off the left of the graph.                          k2end += 2;                      }                      else if (y2 > text2_length)                      {                          // Ran off the top of the graph.                          k2start += 2;                      }                      else if (!front)                      {                          int k1_offset = v_offset + delta - k2;                          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1)                          {                              int x1 = v1[k1_offset];                              int y1 = v_offset + x1 - k1_offset;                              // Mirror x2 onto top-left coordinate system.                              x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_bisect,The following statement contains a magic number: for (int d = 0; d < max_d; d++)              {                  // Bail out if deadline is reached.                  if (DateTime.Now > deadline)                  {                      break;                  }                    // Walk the front path one step.                  for (int k1 = -d + k1start; k1 <= d - k1end; k1 += 2)                  {                      int k1_offset = v_offset + k1;                      int x1;                      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])                      {                          x1 = v1[k1_offset + 1];                      }                      else                      {                          x1 = v1[k1_offset - 1] + 1;                      }                      int y1 = x1 - k1;                      while (x1 < text1_length && y1 < text2_length && text1[x1] == text2[y1])                      {                          x1++;                          y1++;                      }                      v1[k1_offset] = x1;                      if (x1 > text1_length)                      {                          // Ran off the right of the graph.                          k1end += 2;                      }                      else if (y1 > text2_length)                      {                          // Ran off the bottom of the graph.                          k1start += 2;                      }                      else if (front)                      {                          int k2_offset = v_offset + delta - k1;                          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1)                          {                              // Mirror x2 onto top-left coordinate system.                              int x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }                    // Walk the reverse path one step.                  for (int k2 = -d + k2start; k2 <= d - k2end; k2 += 2)                  {                      int k2_offset = v_offset + k2;                      int x2;                      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])                      {                          x2 = v2[k2_offset + 1];                      }                      else                      {                          x2 = v2[k2_offset - 1] + 1;                      }                      int y2 = x2 - k2;                      while (x2 < text1_length && y2 < text2_length && text1[text1_length - x2 - 1] == text2[text2_length - y2 - 1])                      {                          x2++;                          y2++;                      }                      v2[k2_offset] = x2;                      if (x2 > text1_length)                      {                          // Ran off the left of the graph.                          k2end += 2;                      }                      else if (y2 > text2_length)                      {                          // Ran off the top of the graph.                          k2start += 2;                      }                      else if (!front)                      {                          int k1_offset = v_offset + delta - k2;                          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1)                          {                              int x1 = v1[k1_offset];                              int y1 = v_offset + x1 - k1_offset;                              // Mirror x2 onto top-left coordinate system.                              x2 = text1_length - v2[k2_offset];                              if (x1 >= x2)                              {                                  // Overlap detected.                                  return diff_bisectSplit(text1' text2' x1' y1' deadline);                              }                          }                      }                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: if (longtext.Length < 4 || shorttext.Length * 2 < longtext.Length)              {                  return null; // Pointless.              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: if (longtext.Length < 4 || shorttext.Length * 2 < longtext.Length)              {                  return null; // Pointless.              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: string[] hm1 = diff_halfMatchI(longtext' shorttext' (longtext.Length + 3) / 4);
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: string[] hm1 = diff_halfMatchI(longtext' shorttext' (longtext.Length + 3) / 4);
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: string[] hm2 = diff_halfMatchI(longtext' shorttext' (longtext.Length + 1) / 2);
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: if (hm1 == null && hm2 == null)              {                  return null;              }              else if (hm2 == null)              {                  hm = hm1;              }              else if (hm1 == null)              {                  hm = hm2;              }              else              {                  // Both matched.  Select the longest.                  hm = hm1[4].Length > hm2[4].Length ? hm1 : hm2;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: if (hm1 == null && hm2 == null)              {                  return null;              }              else if (hm2 == null)              {                  hm = hm1;              }              else if (hm1 == null)              {                  hm = hm2;              }              else              {                  // Both matched.  Select the longest.                  hm = hm1[4].Length > hm2[4].Length ? hm1 : hm2;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: if (text1.Length > text2.Length)              {                  return hm;                  //return new string[]{hm[0]' hm[1]' hm[2]' hm[3]' hm[4]};              }              else              {                  return new string[] { hm[2]' hm[3]' hm[0]' hm[1]' hm[4] };              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: if (text1.Length > text2.Length)              {                  return hm;                  //return new string[]{hm[0]' hm[1]' hm[2]' hm[3]' hm[4]};              }              else              {                  return new string[] { hm[2]' hm[3]' hm[0]' hm[1]' hm[4] };              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatch,The following statement contains a magic number: if (text1.Length > text2.Length)              {                  return hm;                  //return new string[]{hm[0]' hm[1]' hm[2]' hm[3]' hm[4]};              }              else              {                  return new string[] { hm[2]' hm[3]' hm[0]' hm[1]' hm[4] };              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatchI,The following statement contains a magic number: string seed = longtext.Substring(i' longtext.Length / 4);
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_halfMatchI,The following statement contains a magic number: if (best_common.Length * 2 >= longtext.Length)              {                  return new string[] { best_longtext_a' best_longtext_b' best_shorttext_a' best_shorttext_b' best_common };              }              else              {                  return null;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemantic,The following statement contains a magic number: while (pointer < diffs.Count)              {                  if (diffs[pointer - 1].operation == Operation.DELETE && diffs[pointer].operation == Operation.INSERT)                  {                      string deletion = diffs[pointer - 1].text;                      string insertion = diffs[pointer].text;                      int overlap_length1 = diff_commonOverlap(deletion' insertion);                      int overlap_length2 = diff_commonOverlap(insertion' deletion);                      if (overlap_length1 >= overlap_length2)                      {                          if (overlap_length1 >= deletion.Length / 2.0 || overlap_length1 >= insertion.Length / 2.0)                          {                              // Overlap found.                              // Insert an equality and trim the surrounding edits.                              diffs.Insert(pointer' new Diff(Operation.EQUAL' insertion.Substring(0' overlap_length1)));                              diffs[pointer - 1].text = deletion.Substring(0' deletion.Length - overlap_length1);                              diffs[pointer + 1].text = insertion.Substring(overlap_length1);                              pointer++;                          }                      }                      else                      {                          if (overlap_length2 >= deletion.Length / 2.0 || overlap_length2 >= insertion.Length / 2.0)                          {                              // Reverse overlap found.                              // Insert an equality and swap and trim the surrounding edits.                              diffs.Insert(pointer' new Diff(Operation.EQUAL' deletion.Substring(0' overlap_length2)));                              diffs[pointer - 1].operation = Operation.INSERT;                              diffs[pointer - 1].text = insertion.Substring(0' insertion.Length - overlap_length2);                              diffs[pointer + 1].operation = Operation.DELETE;                              diffs[pointer + 1].text = deletion.Substring(overlap_length2);                              pointer++;                          }                      }                      pointer++;                  }                  pointer++;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemantic,The following statement contains a magic number: while (pointer < diffs.Count)              {                  if (diffs[pointer - 1].operation == Operation.DELETE && diffs[pointer].operation == Operation.INSERT)                  {                      string deletion = diffs[pointer - 1].text;                      string insertion = diffs[pointer].text;                      int overlap_length1 = diff_commonOverlap(deletion' insertion);                      int overlap_length2 = diff_commonOverlap(insertion' deletion);                      if (overlap_length1 >= overlap_length2)                      {                          if (overlap_length1 >= deletion.Length / 2.0 || overlap_length1 >= insertion.Length / 2.0)                          {                              // Overlap found.                              // Insert an equality and trim the surrounding edits.                              diffs.Insert(pointer' new Diff(Operation.EQUAL' insertion.Substring(0' overlap_length1)));                              diffs[pointer - 1].text = deletion.Substring(0' deletion.Length - overlap_length1);                              diffs[pointer + 1].text = insertion.Substring(overlap_length1);                              pointer++;                          }                      }                      else                      {                          if (overlap_length2 >= deletion.Length / 2.0 || overlap_length2 >= insertion.Length / 2.0)                          {                              // Reverse overlap found.                              // Insert an equality and swap and trim the surrounding edits.                              diffs.Insert(pointer' new Diff(Operation.EQUAL' deletion.Substring(0' overlap_length2)));                              diffs[pointer - 1].operation = Operation.INSERT;                              diffs[pointer - 1].text = insertion.Substring(0' insertion.Length - overlap_length2);                              diffs[pointer + 1].operation = Operation.DELETE;                              diffs[pointer + 1].text = deletion.Substring(overlap_length2);                              pointer++;                          }                      }                      pointer++;                  }                  pointer++;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemantic,The following statement contains a magic number: while (pointer < diffs.Count)              {                  if (diffs[pointer - 1].operation == Operation.DELETE && diffs[pointer].operation == Operation.INSERT)                  {                      string deletion = diffs[pointer - 1].text;                      string insertion = diffs[pointer].text;                      int overlap_length1 = diff_commonOverlap(deletion' insertion);                      int overlap_length2 = diff_commonOverlap(insertion' deletion);                      if (overlap_length1 >= overlap_length2)                      {                          if (overlap_length1 >= deletion.Length / 2.0 || overlap_length1 >= insertion.Length / 2.0)                          {                              // Overlap found.                              // Insert an equality and trim the surrounding edits.                              diffs.Insert(pointer' new Diff(Operation.EQUAL' insertion.Substring(0' overlap_length1)));                              diffs[pointer - 1].text = deletion.Substring(0' deletion.Length - overlap_length1);                              diffs[pointer + 1].text = insertion.Substring(overlap_length1);                              pointer++;                          }                      }                      else                      {                          if (overlap_length2 >= deletion.Length / 2.0 || overlap_length2 >= insertion.Length / 2.0)                          {                              // Reverse overlap found.                              // Insert an equality and swap and trim the surrounding edits.                              diffs.Insert(pointer' new Diff(Operation.EQUAL' deletion.Substring(0' overlap_length2)));                              diffs[pointer - 1].operation = Operation.INSERT;                              diffs[pointer - 1].text = insertion.Substring(0' insertion.Length - overlap_length2);                              diffs[pointer + 1].operation = Operation.DELETE;                              diffs[pointer + 1].text = deletion.Substring(overlap_length2);                              pointer++;                          }                      }                      pointer++;                  }                  pointer++;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemantic,The following statement contains a magic number: while (pointer < diffs.Count)              {                  if (diffs[pointer - 1].operation == Operation.DELETE && diffs[pointer].operation == Operation.INSERT)                  {                      string deletion = diffs[pointer - 1].text;                      string insertion = diffs[pointer].text;                      int overlap_length1 = diff_commonOverlap(deletion' insertion);                      int overlap_length2 = diff_commonOverlap(insertion' deletion);                      if (overlap_length1 >= overlap_length2)                      {                          if (overlap_length1 >= deletion.Length / 2.0 || overlap_length1 >= insertion.Length / 2.0)                          {                              // Overlap found.                              // Insert an equality and trim the surrounding edits.                              diffs.Insert(pointer' new Diff(Operation.EQUAL' insertion.Substring(0' overlap_length1)));                              diffs[pointer - 1].text = deletion.Substring(0' deletion.Length - overlap_length1);                              diffs[pointer + 1].text = insertion.Substring(overlap_length1);                              pointer++;                          }                      }                      else                      {                          if (overlap_length2 >= deletion.Length / 2.0 || overlap_length2 >= insertion.Length / 2.0)                          {                              // Reverse overlap found.                              // Insert an equality and swap and trim the surrounding edits.                              diffs.Insert(pointer' new Diff(Operation.EQUAL' deletion.Substring(0' overlap_length2)));                              diffs[pointer - 1].operation = Operation.INSERT;                              diffs[pointer - 1].text = insertion.Substring(0' insertion.Length - overlap_length2);                              diffs[pointer + 1].operation = Operation.DELETE;                              diffs[pointer + 1].text = deletion.Substring(overlap_length2);                              pointer++;                          }                      }                      pointer++;                  }                  pointer++;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemanticScore,The following statement contains a magic number: if (one.Length == 0 || two.Length == 0)              {                  // Edges are the best.                  return 6;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemanticScore,The following statement contains a magic number: if (blankLine1 || blankLine2)              {                  // Five points for blank lines.                  return 5;              }              else if (lineBreak1 || lineBreak2)              {                  // Four points for line breaks.                  return 4;              }              else if (nonAlphaNumeric1 && !whitespace1 && whitespace2)              {                  // Three points for end of sentences.                  return 3;              }              else if (whitespace1 || whitespace2)              {                  // Two points for whitespace.                  return 2;              }              else if (nonAlphaNumeric1 || nonAlphaNumeric2)              {                  // One point for non-alphanumeric.                  return 1;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemanticScore,The following statement contains a magic number: if (blankLine1 || blankLine2)              {                  // Five points for blank lines.                  return 5;              }              else if (lineBreak1 || lineBreak2)              {                  // Four points for line breaks.                  return 4;              }              else if (nonAlphaNumeric1 && !whitespace1 && whitespace2)              {                  // Three points for end of sentences.                  return 3;              }              else if (whitespace1 || whitespace2)              {                  // Two points for whitespace.                  return 2;              }              else if (nonAlphaNumeric1 || nonAlphaNumeric2)              {                  // One point for non-alphanumeric.                  return 1;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemanticScore,The following statement contains a magic number: if (blankLine1 || blankLine2)              {                  // Five points for blank lines.                  return 5;              }              else if (lineBreak1 || lineBreak2)              {                  // Four points for line breaks.                  return 4;              }              else if (nonAlphaNumeric1 && !whitespace1 && whitespace2)              {                  // Three points for end of sentences.                  return 3;              }              else if (whitespace1 || whitespace2)              {                  // Two points for whitespace.                  return 2;              }              else if (nonAlphaNumeric1 || nonAlphaNumeric2)              {                  // One point for non-alphanumeric.                  return 1;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupSemanticScore,The following statement contains a magic number: if (blankLine1 || blankLine2)              {                  // Five points for blank lines.                  return 5;              }              else if (lineBreak1 || lineBreak2)              {                  // Four points for line breaks.                  return 4;              }              else if (nonAlphaNumeric1 && !whitespace1 && whitespace2)              {                  // Three points for end of sentences.                  return 3;              }              else if (whitespace1 || whitespace2)              {                  // Two points for whitespace.                  return 2;              }              else if (nonAlphaNumeric1 || nonAlphaNumeric2)              {                  // One point for non-alphanumeric.                  return 1;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupEfficiency,The following statement contains a magic number: while (pointer < diffs.Count)              {                  if (diffs[pointer].operation == Operation.EQUAL)                  {                      // Equality found.                      if (diffs[pointer].text.Length < this.Diff_EditCost && (post_ins || post_del))                      {                          // Candidate found.                          equalities.Push(pointer);                          pre_ins = post_ins;                          pre_del = post_del;                          lastequality = diffs[pointer].text;                      }                      else                      {                          // Not a candidate' and can never become one.                          equalities.Clear();                          lastequality = string.Empty;                      }                      post_ins = post_del = false;                  }                  else                  {                      // An insertion or deletion.                      if (diffs[pointer].operation == Operation.DELETE)                      {                          post_del = true;                      }                      else                      {                          post_ins = true;                      }                      /*                       * Five types to be split:                       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>                       * <ins>A</ins>X<ins>C</ins><del>D</del>                       * <ins>A</ins><del>B</del>X<ins>C</ins>                       * <ins>A</del>X<ins>C</ins><del>D</del>                       * <ins>A</ins><del>B</del>X<del>C</del>                       */                      if ((lastequality.Length != 0) && ((pre_ins && pre_del && post_ins && post_del) || ((lastequality.Length < this.Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0) + (post_del ? 1 : 0)) == 3)))                      {                          // Duplicate record.                          diffs.Insert(equalities.Peek()' new Diff(Operation.DELETE' lastequality));                          // Change second copy to insert.                          diffs[equalities.Peek() + 1].operation = Operation.INSERT;                          equalities.Pop(); // Throw away the equality we just deleted.                          lastequality = string.Empty;                          if (pre_ins && pre_del)                          {                              // No changes made which could affect previous entry' keep going.                              post_ins = post_del = true;                              equalities.Clear();                          }                          else                          {                              if (equalities.Count > 0)                              {                                  equalities.Pop();                              }                                pointer = equalities.Count > 0 ? equalities.Peek() : -1;                              post_ins = post_del = false;                          }                          changes = true;                      }                  }                  pointer++;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupEfficiency,The following statement contains a magic number: while (pointer < diffs.Count)              {                  if (diffs[pointer].operation == Operation.EQUAL)                  {                      // Equality found.                      if (diffs[pointer].text.Length < this.Diff_EditCost && (post_ins || post_del))                      {                          // Candidate found.                          equalities.Push(pointer);                          pre_ins = post_ins;                          pre_del = post_del;                          lastequality = diffs[pointer].text;                      }                      else                      {                          // Not a candidate' and can never become one.                          equalities.Clear();                          lastequality = string.Empty;                      }                      post_ins = post_del = false;                  }                  else                  {                      // An insertion or deletion.                      if (diffs[pointer].operation == Operation.DELETE)                      {                          post_del = true;                      }                      else                      {                          post_ins = true;                      }                      /*                       * Five types to be split:                       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>                       * <ins>A</ins>X<ins>C</ins><del>D</del>                       * <ins>A</ins><del>B</del>X<ins>C</ins>                       * <ins>A</del>X<ins>C</ins><del>D</del>                       * <ins>A</ins><del>B</del>X<del>C</del>                       */                      if ((lastequality.Length != 0) && ((pre_ins && pre_del && post_ins && post_del) || ((lastequality.Length < this.Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0) + (post_del ? 1 : 0)) == 3)))                      {                          // Duplicate record.                          diffs.Insert(equalities.Peek()' new Diff(Operation.DELETE' lastequality));                          // Change second copy to insert.                          diffs[equalities.Peek() + 1].operation = Operation.INSERT;                          equalities.Pop(); // Throw away the equality we just deleted.                          lastequality = string.Empty;                          if (pre_ins && pre_del)                          {                              // No changes made which could affect previous entry' keep going.                              post_ins = post_del = true;                              equalities.Clear();                          }                          else                          {                              if (equalities.Count > 0)                              {                                  equalities.Pop();                              }                                pointer = equalities.Count > 0 ? equalities.Peek() : -1;                              post_ins = post_del = false;                          }                          changes = true;                      }                  }                  pointer++;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,match_bitap,The following statement contains a magic number: for (int d = 0; d < pattern.Length; d++)              {                  // Scan for the best match; each iteration allows for one more error.                  // Run a binary search to determine how far from 'loc' we can stray at                  // this error level.                  bin_min = 0;                  bin_mid = bin_max;                  while (bin_min < bin_mid)                  {                      if (match_bitapScore(d' loc + bin_mid' loc' pattern) <= score_threshold)                      {                          bin_min = bin_mid;                      }                      else                      {                          bin_max = bin_mid;                      }                      bin_mid = (bin_max - bin_min) / 2 + bin_min;                  }                  // Use the result from this iteration as the maximum for the next.                  bin_max = bin_mid;                  int start = Math.Max(1' loc - bin_mid + 1);                  int finish = Math.Min(loc + bin_mid' text.Length) + pattern.Length;                    int[] rd = new int[finish + 2];                  rd[finish + 1] = (1 << d) - 1;                  for (int j = finish; j >= start; j--)                  {                      int charMatch;                      if (text.Length <= j - 1 || !s.ContainsKey(text[j - 1]))                      {                          // Out of range.                          charMatch = 0;                      }                      else                      {                          charMatch = s[text[j - 1]];                      }                      if (d == 0)                      {                          // First pass: exact match.                          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;                      }                      else                      {                          // Subsequent passes: fuzzy match.                          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];                      }                      if ((rd[j] & matchmask) != 0)                      {                          double score = match_bitapScore(d' j - 1' loc' pattern);                          // This match will almost certainly be better than any existing                          // match.  But check anyway.                          if (score <= score_threshold)                          {                              // Told you so.                              score_threshold = score;                              best_loc = j - 1;                              if (best_loc > loc)                              {                                  // When passing loc' don't exceed our current distance from loc.                                  start = Math.Max(1' 2 * loc - best_loc);                              }                              else                              {                                  // Already passed loc' downhill from here on in.                                  break;                              }                          }                      }                  }                  if (match_bitapScore(d + 1' loc' loc' pattern) > score_threshold)                  {                      // No hope for a (better) match at greater error levels.                      break;                  }                  last_rd = rd;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,match_bitap,The following statement contains a magic number: for (int d = 0; d < pattern.Length; d++)              {                  // Scan for the best match; each iteration allows for one more error.                  // Run a binary search to determine how far from 'loc' we can stray at                  // this error level.                  bin_min = 0;                  bin_mid = bin_max;                  while (bin_min < bin_mid)                  {                      if (match_bitapScore(d' loc + bin_mid' loc' pattern) <= score_threshold)                      {                          bin_min = bin_mid;                      }                      else                      {                          bin_max = bin_mid;                      }                      bin_mid = (bin_max - bin_min) / 2 + bin_min;                  }                  // Use the result from this iteration as the maximum for the next.                  bin_max = bin_mid;                  int start = Math.Max(1' loc - bin_mid + 1);                  int finish = Math.Min(loc + bin_mid' text.Length) + pattern.Length;                    int[] rd = new int[finish + 2];                  rd[finish + 1] = (1 << d) - 1;                  for (int j = finish; j >= start; j--)                  {                      int charMatch;                      if (text.Length <= j - 1 || !s.ContainsKey(text[j - 1]))                      {                          // Out of range.                          charMatch = 0;                      }                      else                      {                          charMatch = s[text[j - 1]];                      }                      if (d == 0)                      {                          // First pass: exact match.                          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;                      }                      else                      {                          // Subsequent passes: fuzzy match.                          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];                      }                      if ((rd[j] & matchmask) != 0)                      {                          double score = match_bitapScore(d' j - 1' loc' pattern);                          // This match will almost certainly be better than any existing                          // match.  But check anyway.                          if (score <= score_threshold)                          {                              // Told you so.                              score_threshold = score;                              best_loc = j - 1;                              if (best_loc > loc)                              {                                  // When passing loc' don't exceed our current distance from loc.                                  start = Math.Max(1' 2 * loc - best_loc);                              }                              else                              {                                  // Already passed loc' downhill from here on in.                                  break;                              }                          }                      }                  }                  if (match_bitapScore(d + 1' loc' loc' pattern) > score_threshold)                  {                      // No hope for a (better) match at greater error levels.                      break;                  }                  last_rd = rd;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,match_bitap,The following statement contains a magic number: for (int d = 0; d < pattern.Length; d++)              {                  // Scan for the best match; each iteration allows for one more error.                  // Run a binary search to determine how far from 'loc' we can stray at                  // this error level.                  bin_min = 0;                  bin_mid = bin_max;                  while (bin_min < bin_mid)                  {                      if (match_bitapScore(d' loc + bin_mid' loc' pattern) <= score_threshold)                      {                          bin_min = bin_mid;                      }                      else                      {                          bin_max = bin_mid;                      }                      bin_mid = (bin_max - bin_min) / 2 + bin_min;                  }                  // Use the result from this iteration as the maximum for the next.                  bin_max = bin_mid;                  int start = Math.Max(1' loc - bin_mid + 1);                  int finish = Math.Min(loc + bin_mid' text.Length) + pattern.Length;                    int[] rd = new int[finish + 2];                  rd[finish + 1] = (1 << d) - 1;                  for (int j = finish; j >= start; j--)                  {                      int charMatch;                      if (text.Length <= j - 1 || !s.ContainsKey(text[j - 1]))                      {                          // Out of range.                          charMatch = 0;                      }                      else                      {                          charMatch = s[text[j - 1]];                      }                      if (d == 0)                      {                          // First pass: exact match.                          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;                      }                      else                      {                          // Subsequent passes: fuzzy match.                          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];                      }                      if ((rd[j] & matchmask) != 0)                      {                          double score = match_bitapScore(d' j - 1' loc' pattern);                          // This match will almost certainly be better than any existing                          // match.  But check anyway.                          if (score <= score_threshold)                          {                              // Told you so.                              score_threshold = score;                              best_loc = j - 1;                              if (best_loc > loc)                              {                                  // When passing loc' don't exceed our current distance from loc.                                  start = Math.Max(1' 2 * loc - best_loc);                              }                              else                              {                                  // Already passed loc' downhill from here on in.                                  break;                              }                          }                      }                  }                  if (match_bitapScore(d + 1' loc' loc' pattern) > score_threshold)                  {                      // No hope for a (better) match at greater error levels.                      break;                  }                  last_rd = rd;              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_make,The following statement contains a magic number: if (diffs.Count > 2)              {                  diff_cleanupSemantic(diffs);                  diff_cleanupEfficiency(diffs);              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_make,The following statement contains a magic number: foreach (Diff aDiff in diffs)              {                  if (patch.diffs.Count == 0 && aDiff.operation != Operation.EQUAL)                  {                      // A new patch starts here.                      patch.start1 = char_count1;                      patch.start2 = char_count2;                  }                    switch (aDiff.operation)                  {                      case Operation.INSERT:                          patch.diffs.Add(aDiff);                          patch.length2 += aDiff.text.Length;                          postpatch_text = postpatch_text.Insert(char_count2' aDiff.text);                          break;                      case Operation.DELETE:                          patch.length1 += aDiff.text.Length;                          patch.diffs.Add(aDiff);                          postpatch_text = postpatch_text.Remove(char_count2' aDiff.text.Length);                          break;                      case Operation.EQUAL:                          if (aDiff.text.Length <= 2 * Patch_Margin && patch.diffs.Count() != 0 && aDiff != diffs.Last())                          {                              // Small equality inside a patch.                              patch.diffs.Add(aDiff);                              patch.length1 += aDiff.text.Length;                              patch.length2 += aDiff.text.Length;                          }                            if (aDiff.text.Length >= 2 * Patch_Margin)                          {                              // Time for a new patch.                              if (patch.diffs.Count != 0)                              {                                  patch_addContext(patch' prepatch_text);                                  patches.Add(patch);                                  patch = new Patch();                                  // Unlike Unidiff' our patch lists have a rolling context.                                  // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff                                  // Update prepatch text & pos to reflect the application of the                                  // just completed patch.                                  prepatch_text = postpatch_text;                                  char_count1 = char_count2;                              }                          }                          break;                  }                    // Update the current character count.                  if (aDiff.operation != Operation.INSERT)                  {                      char_count1 += aDiff.text.Length;                  }                  if (aDiff.operation != Operation.DELETE)                  {                      char_count2 += aDiff.text.Length;                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_make,The following statement contains a magic number: foreach (Diff aDiff in diffs)              {                  if (patch.diffs.Count == 0 && aDiff.operation != Operation.EQUAL)                  {                      // A new patch starts here.                      patch.start1 = char_count1;                      patch.start2 = char_count2;                  }                    switch (aDiff.operation)                  {                      case Operation.INSERT:                          patch.diffs.Add(aDiff);                          patch.length2 += aDiff.text.Length;                          postpatch_text = postpatch_text.Insert(char_count2' aDiff.text);                          break;                      case Operation.DELETE:                          patch.length1 += aDiff.text.Length;                          patch.diffs.Add(aDiff);                          postpatch_text = postpatch_text.Remove(char_count2' aDiff.text.Length);                          break;                      case Operation.EQUAL:                          if (aDiff.text.Length <= 2 * Patch_Margin && patch.diffs.Count() != 0 && aDiff != diffs.Last())                          {                              // Small equality inside a patch.                              patch.diffs.Add(aDiff);                              patch.length1 += aDiff.text.Length;                              patch.length2 += aDiff.text.Length;                          }                            if (aDiff.text.Length >= 2 * Patch_Margin)                          {                              // Time for a new patch.                              if (patch.diffs.Count != 0)                              {                                  patch_addContext(patch' prepatch_text);                                  patches.Add(patch);                                  patch = new Patch();                                  // Unlike Unidiff' our patch lists have a rolling context.                                  // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff                                  // Update prepatch text & pos to reflect the application of the                                  // just completed patch.                                  prepatch_text = postpatch_text;                                  char_count1 = char_count2;                              }                          }                          break;                  }                    // Update the current character count.                  if (aDiff.operation != Operation.INSERT)                  {                      char_count1 += aDiff.text.Length;                  }                  if (aDiff.operation != Operation.DELETE)                  {                      char_count2 += aDiff.text.Length;                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_apply,The following statement contains a magic number: text = text.Substring(nullPadding.Length' text.Length - 2 * nullPadding.Length);
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_splitMax,The following statement contains a magic number: for (int x = 0; x < patches.Count; x++)              {                  if (patches[x].length1 <= patch_size)                  {                      continue;                  }                  Patch bigpatch = patches[x];                  // Remove the big old patch.                  patches.Splice(x--' 1);                  int start1 = bigpatch.start1;                  int start2 = bigpatch.start2;                  string precontext = string.Empty;                  while (bigpatch.diffs.Count != 0)                  {                      // Create one of several smaller patches.                      Patch patch = new Patch();                      bool empty = true;                      patch.start1 = start1 - precontext.Length;                      patch.start2 = start2 - precontext.Length;                      if (precontext.Length != 0)                      {                          patch.length1 = patch.length2 = precontext.Length;                          patch.diffs.Add(new Diff(Operation.EQUAL' precontext));                      }                      while (bigpatch.diffs.Count != 0 && patch.length1 < patch_size - this.Patch_Margin)                      {                          Operation diff_type = bigpatch.diffs[0].operation;                          string diff_text = bigpatch.diffs[0].text;                          if (diff_type == Operation.INSERT)                          {                              // Insertions are harmless.                              patch.length2 += diff_text.Length;                              start2 += diff_text.Length;                              patch.diffs.Add(bigpatch.diffs.First());                              bigpatch.diffs.RemoveAt(0);                              empty = false;                          }                          else if (diff_type == Operation.DELETE && patch.diffs.Count == 1 && patch.diffs.First().operation == Operation.EQUAL && diff_text.Length > 2 * patch_size)                          {                              // This is a large deletion.  Let it pass in one chunk.                              patch.length1 += diff_text.Length;                              start1 += diff_text.Length;                              empty = false;                              patch.diffs.Add(new Diff(diff_type' diff_text));                              bigpatch.diffs.RemoveAt(0);                          }                          else                          {                              // Deletion or equality.  Only take as much as we can stomach.                              diff_text = diff_text.Substring(0' Math.Min(diff_text.Length' patch_size - patch.length1 - Patch_Margin));                              patch.length1 += diff_text.Length;                              start1 += diff_text.Length;                              if (diff_type == Operation.EQUAL)                              {                                  patch.length2 += diff_text.Length;                                  start2 += diff_text.Length;                              }                              else                              {                                  empty = false;                              }                              patch.diffs.Add(new Diff(diff_type' diff_text));                              if (diff_text == bigpatch.diffs[0].text)                              {                                  bigpatch.diffs.RemoveAt(0);                              }                              else                              {                                  bigpatch.diffs[0].text = bigpatch.diffs[0].text.Substring(diff_text.Length);                              }                          }                      }                      // Compute the head context for the next patch.                      precontext = this.diff_text2(patch.diffs);                      precontext = precontext.Substring(Math.Max(0' precontext.Length - this.Patch_Margin));                        string postcontext = null;                      // Append the end context for this patch.                      if (diff_text1(bigpatch.diffs).Length > Patch_Margin)                      {                          postcontext = diff_text1(bigpatch.diffs).Substring(0' Patch_Margin);                      }                      else                      {                          postcontext = diff_text1(bigpatch.diffs);                      }                        if (postcontext.Length != 0)                      {                          patch.length1 += postcontext.Length;                          patch.length2 += postcontext.Length;                          if (patch.diffs.Count != 0 && patch.diffs[patch.diffs.Count - 1].operation == Operation.EQUAL)                          {                              patch.diffs[patch.diffs.Count - 1].text += postcontext;                          }                          else                          {                              patch.diffs.Add(new Diff(Operation.EQUAL' postcontext));                          }                      }                      if (!empty)                      {                          patches.Splice(++x' 0' patch);                      }                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: while (textPointer < text.Length)              {                  m = patchHeader.Match(text[textPointer]);                  if (!m.Success)                  {                      throw new ArgumentException("Invalid patch string: " + text[textPointer]);                  }                  patch = new Patch();                  patches.Add(patch);                  patch.start1 = Convert.ToInt32(m.Groups[1].Value);                  if (m.Groups[2].Length == 0)                  {                      patch.start1--;                      patch.length1 = 1;                  }                  else if (m.Groups[2].Value == "0")                  {                      patch.length1 = 0;                  }                  else                  {                      patch.start1--;                      patch.length1 = Convert.ToInt32(m.Groups[2].Value);                  }                    patch.start2 = Convert.ToInt32(m.Groups[3].Value);                  if (m.Groups[4].Length == 0)                  {                      patch.start2--;                      patch.length2 = 1;                  }                  else if (m.Groups[4].Value == "0")                  {                      patch.length2 = 0;                  }                  else                  {                      patch.start2--;                      patch.length2 = Convert.ToInt32(m.Groups[4].Value);                  }                  textPointer++;                    while (textPointer < text.Length)                  {                      try                      {                          sign = text[textPointer][0];                      }                      catch (IndexOutOfRangeException)                      {                          // Blank line?  Whatever.                          textPointer++;                          continue;                      }                      line = text[textPointer].Substring(1);                      line = line.Replace("+"' "%2b");                      line = HttpUtility.UrlDecode(line' new UTF8Encoding(false' true));                      if (sign == '-')                      {                          // Deletion.                          patch.diffs.Add(new Diff(Operation.DELETE' line));                      }                      else if (sign == '+')                      {                          // Insertion.                          patch.diffs.Add(new Diff(Operation.INSERT' line));                      }                      else if (sign == ' ')                      {                          // Minor equality.                          patch.diffs.Add(new Diff(Operation.EQUAL' line));                      }                      else if (sign == '@')                      {                          // Start of next patch.                          break;                      }                      else                      {                          // WTF?                          throw new ArgumentException("Invalid patch mode '" + sign + "' in: " + line);                      }                      textPointer++;                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: while (textPointer < text.Length)              {                  m = patchHeader.Match(text[textPointer]);                  if (!m.Success)                  {                      throw new ArgumentException("Invalid patch string: " + text[textPointer]);                  }                  patch = new Patch();                  patches.Add(patch);                  patch.start1 = Convert.ToInt32(m.Groups[1].Value);                  if (m.Groups[2].Length == 0)                  {                      patch.start1--;                      patch.length1 = 1;                  }                  else if (m.Groups[2].Value == "0")                  {                      patch.length1 = 0;                  }                  else                  {                      patch.start1--;                      patch.length1 = Convert.ToInt32(m.Groups[2].Value);                  }                    patch.start2 = Convert.ToInt32(m.Groups[3].Value);                  if (m.Groups[4].Length == 0)                  {                      patch.start2--;                      patch.length2 = 1;                  }                  else if (m.Groups[4].Value == "0")                  {                      patch.length2 = 0;                  }                  else                  {                      patch.start2--;                      patch.length2 = Convert.ToInt32(m.Groups[4].Value);                  }                  textPointer++;                    while (textPointer < text.Length)                  {                      try                      {                          sign = text[textPointer][0];                      }                      catch (IndexOutOfRangeException)                      {                          // Blank line?  Whatever.                          textPointer++;                          continue;                      }                      line = text[textPointer].Substring(1);                      line = line.Replace("+"' "%2b");                      line = HttpUtility.UrlDecode(line' new UTF8Encoding(false' true));                      if (sign == '-')                      {                          // Deletion.                          patch.diffs.Add(new Diff(Operation.DELETE' line));                      }                      else if (sign == '+')                      {                          // Insertion.                          patch.diffs.Add(new Diff(Operation.INSERT' line));                      }                      else if (sign == ' ')                      {                          // Minor equality.                          patch.diffs.Add(new Diff(Operation.EQUAL' line));                      }                      else if (sign == '@')                      {                          // Start of next patch.                          break;                      }                      else                      {                          // WTF?                          throw new ArgumentException("Invalid patch mode '" + sign + "' in: " + line);                      }                      textPointer++;                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: while (textPointer < text.Length)              {                  m = patchHeader.Match(text[textPointer]);                  if (!m.Success)                  {                      throw new ArgumentException("Invalid patch string: " + text[textPointer]);                  }                  patch = new Patch();                  patches.Add(patch);                  patch.start1 = Convert.ToInt32(m.Groups[1].Value);                  if (m.Groups[2].Length == 0)                  {                      patch.start1--;                      patch.length1 = 1;                  }                  else if (m.Groups[2].Value == "0")                  {                      patch.length1 = 0;                  }                  else                  {                      patch.start1--;                      patch.length1 = Convert.ToInt32(m.Groups[2].Value);                  }                    patch.start2 = Convert.ToInt32(m.Groups[3].Value);                  if (m.Groups[4].Length == 0)                  {                      patch.start2--;                      patch.length2 = 1;                  }                  else if (m.Groups[4].Value == "0")                  {                      patch.length2 = 0;                  }                  else                  {                      patch.start2--;                      patch.length2 = Convert.ToInt32(m.Groups[4].Value);                  }                  textPointer++;                    while (textPointer < text.Length)                  {                      try                      {                          sign = text[textPointer][0];                      }                      catch (IndexOutOfRangeException)                      {                          // Blank line?  Whatever.                          textPointer++;                          continue;                      }                      line = text[textPointer].Substring(1);                      line = line.Replace("+"' "%2b");                      line = HttpUtility.UrlDecode(line' new UTF8Encoding(false' true));                      if (sign == '-')                      {                          // Deletion.                          patch.diffs.Add(new Diff(Operation.DELETE' line));                      }                      else if (sign == '+')                      {                          // Insertion.                          patch.diffs.Add(new Diff(Operation.INSERT' line));                      }                      else if (sign == ' ')                      {                          // Minor equality.                          patch.diffs.Add(new Diff(Operation.EQUAL' line));                      }                      else if (sign == '@')                      {                          // Start of next patch.                          break;                      }                      else                      {                          // WTF?                          throw new ArgumentException("Invalid patch mode '" + sign + "' in: " + line);                      }                      textPointer++;                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: while (textPointer < text.Length)              {                  m = patchHeader.Match(text[textPointer]);                  if (!m.Success)                  {                      throw new ArgumentException("Invalid patch string: " + text[textPointer]);                  }                  patch = new Patch();                  patches.Add(patch);                  patch.start1 = Convert.ToInt32(m.Groups[1].Value);                  if (m.Groups[2].Length == 0)                  {                      patch.start1--;                      patch.length1 = 1;                  }                  else if (m.Groups[2].Value == "0")                  {                      patch.length1 = 0;                  }                  else                  {                      patch.start1--;                      patch.length1 = Convert.ToInt32(m.Groups[2].Value);                  }                    patch.start2 = Convert.ToInt32(m.Groups[3].Value);                  if (m.Groups[4].Length == 0)                  {                      patch.start2--;                      patch.length2 = 1;                  }                  else if (m.Groups[4].Value == "0")                  {                      patch.length2 = 0;                  }                  else                  {                      patch.start2--;                      patch.length2 = Convert.ToInt32(m.Groups[4].Value);                  }                  textPointer++;                    while (textPointer < text.Length)                  {                      try                      {                          sign = text[textPointer][0];                      }                      catch (IndexOutOfRangeException)                      {                          // Blank line?  Whatever.                          textPointer++;                          continue;                      }                      line = text[textPointer].Substring(1);                      line = line.Replace("+"' "%2b");                      line = HttpUtility.UrlDecode(line' new UTF8Encoding(false' true));                      if (sign == '-')                      {                          // Deletion.                          patch.diffs.Add(new Diff(Operation.DELETE' line));                      }                      else if (sign == '+')                      {                          // Insertion.                          patch.diffs.Add(new Diff(Operation.INSERT' line));                      }                      else if (sign == ' ')                      {                          // Minor equality.                          patch.diffs.Add(new Diff(Operation.EQUAL' line));                      }                      else if (sign == '@')                      {                          // Start of next patch.                          break;                      }                      else                      {                          // WTF?                          throw new ArgumentException("Invalid patch mode '" + sign + "' in: " + line);                      }                      textPointer++;                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: while (textPointer < text.Length)              {                  m = patchHeader.Match(text[textPointer]);                  if (!m.Success)                  {                      throw new ArgumentException("Invalid patch string: " + text[textPointer]);                  }                  patch = new Patch();                  patches.Add(patch);                  patch.start1 = Convert.ToInt32(m.Groups[1].Value);                  if (m.Groups[2].Length == 0)                  {                      patch.start1--;                      patch.length1 = 1;                  }                  else if (m.Groups[2].Value == "0")                  {                      patch.length1 = 0;                  }                  else                  {                      patch.start1--;                      patch.length1 = Convert.ToInt32(m.Groups[2].Value);                  }                    patch.start2 = Convert.ToInt32(m.Groups[3].Value);                  if (m.Groups[4].Length == 0)                  {                      patch.start2--;                      patch.length2 = 1;                  }                  else if (m.Groups[4].Value == "0")                  {                      patch.length2 = 0;                  }                  else                  {                      patch.start2--;                      patch.length2 = Convert.ToInt32(m.Groups[4].Value);                  }                  textPointer++;                    while (textPointer < text.Length)                  {                      try                      {                          sign = text[textPointer][0];                      }                      catch (IndexOutOfRangeException)                      {                          // Blank line?  Whatever.                          textPointer++;                          continue;                      }                      line = text[textPointer].Substring(1);                      line = line.Replace("+"' "%2b");                      line = HttpUtility.UrlDecode(line' new UTF8Encoding(false' true));                      if (sign == '-')                      {                          // Deletion.                          patch.diffs.Add(new Diff(Operation.DELETE' line));                      }                      else if (sign == '+')                      {                          // Insertion.                          patch.diffs.Add(new Diff(Operation.INSERT' line));                      }                      else if (sign == ' ')                      {                          // Minor equality.                          patch.diffs.Add(new Diff(Operation.EQUAL' line));                      }                      else if (sign == '@')                      {                          // Start of next patch.                          break;                      }                      else                      {                          // WTF?                          throw new ArgumentException("Invalid patch mode '" + sign + "' in: " + line);                      }                      textPointer++;                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: while (textPointer < text.Length)              {                  m = patchHeader.Match(text[textPointer]);                  if (!m.Success)                  {                      throw new ArgumentException("Invalid patch string: " + text[textPointer]);                  }                  patch = new Patch();                  patches.Add(patch);                  patch.start1 = Convert.ToInt32(m.Groups[1].Value);                  if (m.Groups[2].Length == 0)                  {                      patch.start1--;                      patch.length1 = 1;                  }                  else if (m.Groups[2].Value == "0")                  {                      patch.length1 = 0;                  }                  else                  {                      patch.start1--;                      patch.length1 = Convert.ToInt32(m.Groups[2].Value);                  }                    patch.start2 = Convert.ToInt32(m.Groups[3].Value);                  if (m.Groups[4].Length == 0)                  {                      patch.start2--;                      patch.length2 = 1;                  }                  else if (m.Groups[4].Value == "0")                  {                      patch.length2 = 0;                  }                  else                  {                      patch.start2--;                      patch.length2 = Convert.ToInt32(m.Groups[4].Value);                  }                  textPointer++;                    while (textPointer < text.Length)                  {                      try                      {                          sign = text[textPointer][0];                      }                      catch (IndexOutOfRangeException)                      {                          // Blank line?  Whatever.                          textPointer++;                          continue;                      }                      line = text[textPointer].Substring(1);                      line = line.Replace("+"' "%2b");                      line = HttpUtility.UrlDecode(line' new UTF8Encoding(false' true));                      if (sign == '-')                      {                          // Deletion.                          patch.diffs.Add(new Diff(Operation.DELETE' line));                      }                      else if (sign == '+')                      {                          // Insertion.                          patch.diffs.Add(new Diff(Operation.INSERT' line));                      }                      else if (sign == ' ')                      {                          // Minor equality.                          patch.diffs.Add(new Diff(Operation.EQUAL' line));                      }                      else if (sign == '@')                      {                          // Start of next patch.                          break;                      }                      else                      {                          // WTF?                          throw new ArgumentException("Invalid patch mode '" + sign + "' in: " + line);                      }                      textPointer++;                  }              }
Magic Number,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_fromText,The following statement contains a magic number: while (textPointer < text.Length)              {                  m = patchHeader.Match(text[textPointer]);                  if (!m.Success)                  {                      throw new ArgumentException("Invalid patch string: " + text[textPointer]);                  }                  patch = new Patch();                  patches.Add(patch);                  patch.start1 = Convert.ToInt32(m.Groups[1].Value);                  if (m.Groups[2].Length == 0)                  {                      patch.start1--;                      patch.length1 = 1;                  }                  else if (m.Groups[2].Value == "0")                  {                      patch.length1 = 0;                  }                  else                  {                      patch.start1--;                      patch.length1 = Convert.ToInt32(m.Groups[2].Value);                  }                    patch.start2 = Convert.ToInt32(m.Groups[3].Value);                  if (m.Groups[4].Length == 0)                  {                      patch.start2--;                      patch.length2 = 1;                  }                  else if (m.Groups[4].Value == "0")                  {                      patch.length2 = 0;                  }                  else                  {                      patch.start2--;                      patch.length2 = Convert.ToInt32(m.Groups[4].Value);                  }                  textPointer++;                    while (textPointer < text.Length)                  {                      try                      {                          sign = text[textPointer][0];                      }                      catch (IndexOutOfRangeException)                      {                          // Blank line?  Whatever.                          textPointer++;                          continue;                      }                      line = text[textPointer].Substring(1);                      line = line.Replace("+"' "%2b");                      line = HttpUtility.UrlDecode(line' new UTF8Encoding(false' true));                      if (sign == '-')                      {                          // Deletion.                          patch.diffs.Add(new Diff(Operation.DELETE' line));                      }                      else if (sign == '+')                      {                          // Insertion.                          patch.diffs.Add(new Diff(Operation.INSERT' line));                      }                      else if (sign == ' ')                      {                          // Minor equality.                          patch.diffs.Add(new Diff(Operation.EQUAL' line));                      }                      else if (sign == '@')                      {                          // Start of next patch.                          break;                      }                      else                      {                          // WTF?                          throw new ArgumentException("Invalid patch mode '" + sign + "' in: " + line);                      }                      textPointer++;                  }              }
Magic Number,WPFToolboxForSiemensPLCs,FileDragDropHelper,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\FileDragDropHelper.cs,GetFileDescriptor,The following statement contains a magic number: fileDescriptor.ftLastWriteTime.dwHighDateTime = (Int32)(fileWriteTimeUtc >> 32);
Magic Number,WPFToolboxForSiemensPLCs,FileDragDropHelper,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\FileDragDropHelper.cs,GetFileDescriptor,The following statement contains a magic number: fileDescriptor.nFileSizeHigh = (UInt32)(content.Length >> 32);
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,mnuPrint_Click,The following statement contains a magic number: if (PrintData != null)              {                  Paragraph p = new Paragraph();                  p.Inlines.Add(PrintData);                  FlowDocument fd = new FlowDocument(p);                  fd.FontFamily = new FontFamily("Courier New");                  fd.FontSize = 14.0;                    PrintDialog pd = new PrintDialog();                  fd.PageHeight = pd.PrintableAreaHeight;                  fd.PageWidth = pd.PrintableAreaWidth;                  fd.PagePadding = new Thickness(50);                  fd.ColumnGap = 0;                  fd.ColumnWidth = pd.PrintableAreaWidth;                    IDocumentPaginatorSource dps = fd;                  if (pd.ShowDialog().Value == true)                      pd.PrintDocument(dps.DocumentPaginator' "WPFToolboxForSiemensPLCs");              }              else              {                  MessageBox.Show(                      "Activate the Window with the Block you wish to Print' maybe the current Window doesn't support printing!");              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,mnuPrint_Click,The following statement contains a magic number: if (PrintData != null)              {                  Paragraph p = new Paragraph();                  p.Inlines.Add(PrintData);                  FlowDocument fd = new FlowDocument(p);                  fd.FontFamily = new FontFamily("Courier New");                  fd.FontSize = 14.0;                    PrintDialog pd = new PrintDialog();                  fd.PageHeight = pd.PrintableAreaHeight;                  fd.PageWidth = pd.PrintableAreaWidth;                  fd.PagePadding = new Thickness(50);                  fd.ColumnGap = 0;                  fd.ColumnWidth = pd.PrintableAreaWidth;                    IDocumentPaginatorSource dps = fd;                  if (pd.ShowDialog().Value == true)                      pd.PrintDocument(dps.DocumentPaginator' "WPFToolboxForSiemensPLCs");              }              else              {                  MessageBox.Show(                      "Activate the Window with the Block you wish to Print' maybe the current Window doesn't support printing!");              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,mnuOnlineBlocks_Click,The following statement contains a magic number: ResizingPanel.SetEffectiveSize(tmpPane' new Size(350' 0));
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,WPFToolboxForSiemensPLCs.Controls,AWLOnlineStatusView,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\AWLOnlineStatusView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.wndAWLOnlineStatusView = ((WPFToolboxForSiemensPLCs.Controls.AWLOnlineStatusView)(target));              return;              case 2:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Missing Default,WPFToolboxForSiemensPLCs.Controls.NetworkEditor,NetworkEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\Controls\NetworkEditor\NetworkEditor.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.NetworkEditorWindow = ((WPFToolboxForSiemensPLCs.Controls.NetworkEditor.NetworkEditor)(target));              return;              case 2:              this.myExpander = ((System.Windows.Controls.Expander)(target));              return;              case 3:              this.textEditor = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 104 "..\..\..\..\..\Controls\NetworkEditor\NetworkEditor.xaml"              this.textEditor.MouseHover += new System.Windows.Input.MouseEventHandler(this.textEditor_MouseHover);                            #line default              #line hidden                            #line 105 "..\..\..\..\..\Controls\NetworkEditor\NetworkEditor.xaml"              this.textEditor.MouseHoverStopped += new System.Windows.Input.MouseEventHandler(this.textEditor_MouseHoverStopped);                            #line default              #line hidden              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Button_Click_2,The following switch statement is missing a default case: switch (plcDataRow.DataType)                              {                                  case S7DataRowType.BOOL:                                      HMIGOObject.CreateTag(tagName' HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_BINARY_TAG'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'D" +                                                            plcDataRow.BlockAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.INT:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_SIGNED_16BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DW" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.DINT:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_SIGNED_32BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.WORD:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_16BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DW" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.DWORD:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_32BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.BYTE:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.TAG_UNSIGNED_8BIT_VALUE'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DBB" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                                  case S7DataRowType.REAL:                                      HMIGOObject.CreateTag(tagName'                                                            HMIGENOBJECTSLib.HMIGO_TAG_TYPE.                                                                TAG_FLOATINGPOINT_NUMBER_32BIT_IEEE_754'                                                            txtConnectionName.Text'                                                            "DB" + myDB.BlockNumber + "'DD" +                                                            plcDataRow.BlockAddress.ByteAddress.ToString()'                                                            "TAGS_DB" + myDB.BlockNumber);                                      break;                              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowWinCCTagVarCreator,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowWinCCTagVarCreator.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.myBlockList = ((System.Windows.Controls.ListBox)(target));                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.DragOver += new System.Windows.DragEventHandler(this.ListBox_DragOver);                            #line default              #line hidden                            #line 19 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              this.myBlockList.Drop += new System.Windows.DragEventHandler(this.ListBox_Drop);                            #line default              #line hidden              return;              case 2:              this.txtConnectionName = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.txtStartErrorNumber = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.chkFixedErrorNumber = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:                            #line 34 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 6:                            #line 36 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_1);                            #line default              #line hidden              return;              case 7:              this.txtTagsPrefix = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.chkExpandArrays = ((System.Windows.Controls.CheckBox)(target));              return;              case 9:                            #line 46 "..\..\..\..\DockableWindows\ContentWindowWinCCTagVarCreator.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click_2);                            #line default              #line hidden              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSZL,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSZL.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.txtSZLid = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.txtSZLindex = ((System.Windows.Controls.TextBox)(target));              return;              case 3:                            #line 25 "..\..\..\..\DockableWindows\ContentWindowSZL.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              case 4:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSourceBlock,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSourceBlock.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.textEditor = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowReferenceData,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowReferenceData.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowReferenceData,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowReferenceData.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 2:                            #line 31 "..\..\..\..\DockableWindows\ContentWindowReferenceData.xaml"              ((System.Windows.Controls.DataGrid)(target)).MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.DataGrid_MouseDoubleClick);                            #line default              #line hidden              break;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentBlockList,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentBlockList.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentBlockList)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.DockableContent_GotFocus);                            #line default              #line hidden              return;              case 2:                            #line 12 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuCreateAwl_Click);                            #line default              #line hidden              return;              case 3:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_MouseDoubleClick);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_PreviewMouseDown);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.myDataGrid_PreviewMouseMove);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.GiveFeedback += new System.Windows.GiveFeedbackEventHandler(this.myDataGrid_GiveFeedback);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myDataGrid_MouseDown);                            #line default              #line hidden                            #line 21 "..\..\..\..\DockableWindows\DockableContentBlockList.xaml"              this.myDataGrid.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.myDataGrid_SelectionChanged);                            #line default              #line hidden              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDataBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDataBlockEditor.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 12 "..\..\..\..\DockableWindows\ContentWindowDataBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowDataBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged);                            #line default              #line hidden              return;              case 2:              this.dtaViewControl = ((WPFToolboxForSiemensPLCs.DockableWindows.DataBlockViewControl.DataBlockViewControl)(target));              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowVarTab,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowVarTab.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,DockableContentOnlineConnections,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\DockableContentOnlineConnections.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.myConnectionsList = ((System.Windows.Controls.ListBox)(target));                            #line 14 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              this.myConnectionsList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.myConnectionsList_MouseDoubleClick);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              this.myConnectionsList.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.myConnectionsList_PreviewMouseDown);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              this.myConnectionsList.PreviewMouseMove += new System.Windows.Input.MouseEventHandler(this.myConnectionsList_PreviewMouseMove);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              this.myConnectionsList.GiveFeedback += new System.Windows.GiveFeedbackEventHandler(this.myConnectionsList_GiveFeedback);                            #line default              #line hidden              return;              case 2:                            #line 16 "..\..\..\..\DockableWindows\DockableContentOnlineConnections.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowFunctionBlockEditor,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowFunctionBlockEditor.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).Closing += new System.EventHandler<System.ComponentModel.CancelEventArgs>(this.DocumentContent_Closing);                            #line default              #line hidden                            #line 14 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              ((WPFToolboxForSiemensPLCs.DockableWindows.ContentWindowFunctionBlockEditor)(target)).IsActiveDocumentChanged += new System.EventHandler(this.DocumentContent_IsActiveDocumentChanged);                            #line default              #line hidden              return;              case 2:              this.mainGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.toppanel = ((System.Windows.Controls.Grid)(target));              return;              case 4:              this.myTree = ((System.Windows.Controls.TreeView)(target));                            #line 62 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myTree.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTree_SelectedItemChanged);                            #line default              #line hidden              return;              case 5:              this.myDGrid = ((System.Windows.Controls.DataGrid)(target));              return;              case 6:              this.myLst = ((System.Windows.Controls.ListBox)(target));                            #line 123 "..\..\..\..\DockableWindows\ContentWindowFunctionBlockEditor.xaml"              this.myLst.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ScrollChanged));                            #line default              #line hidden              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowDiffWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowDiffWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.mainGridA = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.toppanelA = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.myTreeA = ((System.Windows.Controls.TreeView)(target));                            #line 39 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.Drop += new System.Windows.DragEventHandler(this.myTreeA_Drop);                            #line default              #line hidden                            #line 41 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeA.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeA_SelectedItemChanged);                            #line default              #line hidden              return;              case 4:              this.myDGridA = ((System.Windows.Controls.DataGrid)(target));                            #line 54 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridA.Drop += new System.Windows.DragEventHandler(this.myDGridA_Drop);                            #line default              #line hidden              return;              case 5:              this.textEditorA = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 119 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.DragOver += new System.Windows.DragEventHandler(this.textEditorA_DragOver);                            #line default              #line hidden                            #line 120 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorA.Drop += new System.Windows.DragEventHandler(this.textEditorA_Drop);                            #line default              #line hidden              return;              case 6:              this.mainGridB = ((System.Windows.Controls.Grid)(target));              return;              case 7:              this.toppanelB = ((System.Windows.Controls.Grid)(target));              return;              case 8:              this.myTreeB = ((System.Windows.Controls.TreeView)(target));                            #line 142 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.Drop += new System.Windows.DragEventHandler(this.myTreeB_Drop);                            #line default              #line hidden                            #line 144 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myTreeB.SelectedItemChanged += new System.Windows.RoutedPropertyChangedEventHandler<object>(this.myTreeB_SelectedItemChanged);                            #line default              #line hidden              return;              case 9:              this.myDGridB = ((System.Windows.Controls.DataGrid)(target));                            #line 157 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.myDGridB.Drop += new System.Windows.DragEventHandler(this.myDGridB_Drop);                            #line default              #line hidden              return;              case 10:              this.textEditorB = ((ICSharpCode.AvalonEdit.TextEditor)(target));                            #line 222 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.DragOver += new System.Windows.DragEventHandler(this.textEditorB_DragOver);                            #line default              #line hidden                            #line 223 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.textEditorB.Drop += new System.Windows.DragEventHandler(this.textEditorB_Drop);                            #line default              #line hidden              return;              case 11:              this.cmdCompare = ((System.Windows.Controls.Button)(target));                            #line 248 "..\..\..\..\DockableWindows\ContentWindowDiffWindow.xaml"              this.cmdCompare.Click += new System.Windows.RoutedEventHandler(this.cmdCompare_Click);                            #line default              #line hidden              return;              case 12:              this.txtResult = ((ICSharpCode.AvalonEdit.TextEditor)(target));              return;              }
Missing Default,WPFToolboxForSiemensPLCs.DockableWindows,ContentWindowSymbolTable,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\DockableWindows\ContentWindowSymbolTable.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.myDataGrid = ((System.Windows.Controls.DataGrid)(target));              return;              }
Missing Default,DiffMatchPatch,Patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,ToString,The following switch statement is missing a default case: switch (aDiff.operation)                  {                      case Operation.INSERT:                          text.Append('+');                          break;                      case Operation.DELETE:                          text.Append('-');                          break;                      case Operation.EQUAL:                          text.Append(' ');                          break;                  }
Missing Default,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_lineMode,The following switch statement is missing a default case: switch (diffs[pointer].operation)                  {                      case Operation.INSERT:                          count_insert++;                          text_insert += diffs[pointer].text;                          break;                      case Operation.DELETE:                          count_delete++;                          text_delete += diffs[pointer].text;                          break;                      case Operation.EQUAL:                          // Upon reaching an equality' check for prior redundancies.                          if (count_delete >= 1 && count_insert >= 1)                          {                              // Delete the offending records and add the merged ones.                              diffs.RemoveRange(pointer - count_delete - count_insert' count_delete + count_insert);                              pointer = pointer - count_delete - count_insert;                              List<Diff> a = this.diff_main(text_delete' text_insert' false' deadline);                              diffs.InsertRange(pointer' a);                              pointer = pointer + a.Count;                          }                          count_insert = 0;                          count_delete = 0;                          text_delete = string.Empty;                          text_insert = string.Empty;                          break;                  }
Missing Default,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_cleanupMerge,The following switch statement is missing a default case: switch (diffs[pointer].operation)                  {                      case Operation.INSERT:                          count_insert++;                          text_insert += diffs[pointer].text;                          pointer++;                          break;                      case Operation.DELETE:                          count_delete++;                          text_delete += diffs[pointer].text;                          pointer++;                          break;                      case Operation.EQUAL:                          // Upon reaching an equality' check for prior redundancies.                          if (count_delete + count_insert > 1)                          {                              if (count_delete != 0 && count_insert != 0)                              {                                  // Factor out any common prefixies.                                  commonlength = this.diff_commonPrefix(text_insert' text_delete);                                  if (commonlength != 0)                                  {                                      if ((pointer - count_delete - count_insert) > 0 && diffs[pointer - count_delete - count_insert - 1].operation == Operation.EQUAL)                                      {                                          diffs[pointer - count_delete - count_insert - 1].text += text_insert.Substring(0' commonlength);                                      }                                      else                                      {                                          diffs.Insert(0' new Diff(Operation.EQUAL' text_insert.Substring(0' commonlength)));                                          pointer++;                                      }                                      text_insert = text_insert.Substring(commonlength);                                      text_delete = text_delete.Substring(commonlength);                                  }                                  // Factor out any common suffixies.                                  commonlength = this.diff_commonSuffix(text_insert' text_delete);                                  if (commonlength != 0)                                  {                                      diffs[pointer].text = text_insert.Substring(text_insert.Length - commonlength) + diffs[pointer].text;                                      text_insert = text_insert.Substring(0' text_insert.Length - commonlength);                                      text_delete = text_delete.Substring(0' text_delete.Length - commonlength);                                  }                              }                              // Delete the offending records and add the merged ones.                              if (count_delete == 0)                              {                                  diffs.Splice(pointer - count_insert' count_delete + count_insert' new Diff(Operation.INSERT' text_insert));                              }                              else if (count_insert == 0)                              {                                  diffs.Splice(pointer - count_delete' count_delete + count_insert' new Diff(Operation.DELETE' text_delete));                              }                              else                              {                                  diffs.Splice(pointer - count_delete - count_insert' count_delete + count_insert' new Diff(Operation.DELETE' text_delete)' new Diff(Operation.INSERT' text_insert));                              }                              pointer = pointer - count_delete - count_insert + (count_delete != 0 ? 1 : 0) + (count_insert != 0 ? 1 : 0) + 1;                          }                          else if (pointer != 0 && diffs[pointer - 1].operation == Operation.EQUAL)                          {                              // Merge this equality with the previous one.                              diffs[pointer - 1].text += diffs[pointer].text;                              diffs.RemoveAt(pointer);                          }                          else                          {                              pointer++;                          }                          count_insert = 0;                          count_delete = 0;                          text_delete = string.Empty;                          text_insert = string.Empty;                          break;                  }
Missing Default,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_prettyHtml,The following switch statement is missing a default case: switch (aDiff.operation)                  {                      case Operation.INSERT:                          html.Append("<ins style=\"background:#e6ffe6;\">").Append(text).Append("</ins>");                          break;                      case Operation.DELETE:                          html.Append("<del style=\"background:#ffe6e6;\">").Append(text).Append("</del>");                          break;                      case Operation.EQUAL:                          html.Append("<span>").Append(text).Append("</span>");                          break;                  }
Missing Default,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_levenshtein,The following switch statement is missing a default case: switch (aDiff.operation)                  {                      case Operation.INSERT:                          insertions += aDiff.text.Length;                          break;                      case Operation.DELETE:                          deletions += aDiff.text.Length;                          break;                      case Operation.EQUAL:                          // A deletion and an insertion is one substitution.                          levenshtein += Math.Max(insertions' deletions);                          insertions = 0;                          deletions = 0;                          break;                  }
Missing Default,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,diff_toDelta,The following switch statement is missing a default case: switch (aDiff.operation)                  {                      case Operation.INSERT:                          text.Append("+").Append(HttpUtility.UrlEncode(aDiff.text' new UTF8Encoding()).Replace('+'' ' ')).Append("\t");                          break;                      case Operation.DELETE:                          text.Append("-").Append(aDiff.text.Length).Append("\t");                          break;                      case Operation.EQUAL:                          text.Append("=").Append(aDiff.text.Length).Append("\t");                          break;                  }
Missing Default,DiffMatchPatch,diff_match_patch,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\ExternalCode\DiffMatchPatch.cs,patch_make,The following switch statement is missing a default case: switch (aDiff.operation)                  {                      case Operation.INSERT:                          patch.diffs.Add(aDiff);                          patch.length2 += aDiff.text.Length;                          postpatch_text = postpatch_text.Insert(char_count2' aDiff.text);                          break;                      case Operation.DELETE:                          patch.length1 += aDiff.text.Length;                          patch.diffs.Add(aDiff);                          postpatch_text = postpatch_text.Remove(char_count2' aDiff.text.Length);                          break;                      case Operation.EQUAL:                          if (aDiff.text.Length <= 2 * Patch_Margin && patch.diffs.Count() != 0 && aDiff != diffs.Last())                          {                              // Small equality inside a patch.                              patch.diffs.Add(aDiff);                              patch.length1 += aDiff.text.Length;                              patch.length2 += aDiff.text.Length;                          }                            if (aDiff.text.Length >= 2 * Patch_Margin)                          {                              // Time for a new patch.                              if (patch.diffs.Count != 0)                              {                                  patch_addContext(patch' prepatch_text);                                  patches.Add(patch);                                  patch = new Patch();                                  // Unlike Unidiff' our patch lists have a rolling context.                                  // http://code.google.com/p/google-diff-match-patch/wiki/Unidiff                                  // Update prepatch text & pos to reflect the application of the                                  // just completed patch.                                  prepatch_text = postpatch_text;                                  char_count1 = char_count2;                              }                          }                          break;                  }
Missing Default,WPFToolboxForSiemensPLCs,MainWindow,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\WPFToolboxForPLCs\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 11 "..\..\..\MainWindow.xaml"              ((WPFToolboxForSiemensPLCs.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:                            #line 34 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click);                            #line default              #line hidden              return;              case 3:                            #line 35 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_1);                            #line default              #line hidden              return;              case 4:              this.mnuPrint = ((System.Windows.Controls.MenuItem)(target));                            #line 37 "..\..\..\MainWindow.xaml"              this.mnuPrint.Click += new System.Windows.RoutedEventHandler(this.mnuPrint_Click);                            #line default              #line hidden              return;              case 5:              this.mnuConfig = ((System.Windows.Controls.MenuItem)(target));                            #line 43 "..\..\..\MainWindow.xaml"              this.mnuConfig.Click += new System.Windows.RoutedEventHandler(this.mnuConfig_Click);                            #line default              #line hidden              return;              case 6:              this.mnuConnect = ((System.Windows.Controls.MenuItem)(target));                            #line 45 "..\..\..\MainWindow.xaml"              this.mnuConnect.Click += new System.Windows.RoutedEventHandler(this.mnuConnect_Click);                            #line default              #line hidden              return;              case 7:              this.mnuDisconnect = ((System.Windows.Controls.MenuItem)(target));                            #line 46 "..\..\..\MainWindow.xaml"              this.mnuDisconnect.Click += new System.Windows.RoutedEventHandler(this.mnuDisconnect_Click);                            #line default              #line hidden              return;              case 8:              this.mnuOnlineBlocks = ((System.Windows.Controls.MenuItem)(target));                            #line 48 "..\..\..\MainWindow.xaml"              this.mnuOnlineBlocks.Click += new System.Windows.RoutedEventHandler(this.mnuOnlineBlocks_Click);                            #line default              #line hidden              return;              case 9:              this.mnuViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 50 "..\..\..\MainWindow.xaml"              this.mnuViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuViewBlock_Click);                            #line default              #line hidden              return;              case 10:              this.mnuUnViewBlock = ((System.Windows.Controls.MenuItem)(target));                            #line 51 "..\..\..\MainWindow.xaml"              this.mnuUnViewBlock.Click += new System.Windows.RoutedEventHandler(this.mnuUnViewBlock_Click);                            #line default              #line hidden              return;              case 11:              this.mnuSZLWindow = ((System.Windows.Controls.MenuItem)(target));                            #line 53 "..\..\..\MainWindow.xaml"              this.mnuSZLWindow.Click += new System.Windows.RoutedEventHandler(this.mnuSZLWindow_Click);                            #line default              #line hidden              return;              case 12:                            #line 55 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_3);                            #line default              #line hidden              return;              case 13:                            #line 56 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MenuItem_Click_4);                            #line default              #line hidden              return;              case 14:              this.DockManager = ((AvalonDock.DockingManager)(target));              return;              case 15:                            #line 68 "..\..\..\MainWindow.xaml"              ((AvalonDock.DockablePane)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.DockablePane_SelectionChanged);                            #line default              #line hidden              return;              case 16:              this.ProjectTree = ((WPFToolboxForSiemensPLCs.DockableWindows.DockableContentProjectList)(target));              return;              case 17:              this.DocumentHost = ((AvalonDock.DocumentPane)(target));              return;              case 18:              this.zoomSlider = ((System.Windows.Controls.Slider)(target));              return;              case 19:              this.lblStatus = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:              this.lblVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
