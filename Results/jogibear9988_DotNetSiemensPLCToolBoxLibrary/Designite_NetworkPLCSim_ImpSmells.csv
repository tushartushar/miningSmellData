Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,InitSendClientPassive,Cyclomatic complexity of the method is 8
Complex Method,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitSendClientPassive,Cyclomatic complexity of the method is 9
Complex Method,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitSendClientActive,Cyclomatic complexity of the method is 8
Long Parameter List,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,TCPFunctions,The method has 9 parameters. Parameters: context' PlcIP' onlyOneConnection' send_connection_port' send_connection_active' send_tele_len' recieve_connection_port' recieve_connection_active' recieve_tele_len
Long Identifier,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,,The length of the parameter ReceiveDataRecieveClientThread is 30.
Long Statement,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,cmdStart_Click,The length of the statement  "            myTCPServer.ConnectionEstablished += new TCPServerTPKT.ConnectionEstablishedEventHandler(MyTcpServerConnectionEstablished); " is 123.
Long Statement,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The length of the statement  "            this.listBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 144.
Long Statement,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The length of the statement  "            this.cmdStart.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Complex Conditional,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,InitSendClientPassive,The conditional expression  "ConnectionClosed != null && SendClosed && (_tcpClient == null || _tcpClient.Connected == false)"  is complex.
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,cmdStart_Click,The following statement contains a magic number: myConnection = myS7OnlineInterface.ConnectPlc(new ConnectionConfig(2' 0' 2));
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,cmdStart_Click,The following statement contains a magic number: myConnection = myS7OnlineInterface.ConnectPlc(new ConnectionConfig(2' 0' 2));
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,cmdStart_Click,The following statement contains a magic number: myTCPServer = new TCPServerTPKT(SynchronizationContext.Current' 102);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,myConnection_PDURecieved,The following statement contains a magic number: byte[] data = new byte[pdu_bt.Length + 3];
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,myConnection_PDURecieved,The following statement contains a magic number: Array.Copy(pdu_bt' 0' data' 3' pdu_bt.Length);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,myConnection_PDURecieved,The following statement contains a magic number: data[0] = 2;
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,myConnection_PDURecieved,The following statement contains a magic number: data[2] = 0x80;
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,myTCPServer_TelegrammRecieved,The following statement contains a magic number: try              {                  if (coptPart[1] == 0xe0 /* 0xe0 = CR = Connection Request */)                  {                      // Auf Anfrage mit CC Connect Confirm antworten                      byte[] cc = {                                      // *** fixed part ***                                      0x11' // Length 17                                      0x0D' // 0xD0 = CC Connect Confirm                                      0x00' 0x01' // 2' 3: Dest.Reference                                      0x00' 0x01' // 4' 5: Source Reference                                      0x00' // 6 :Class Option                                      // *** variable part ***                                      0xC0' // 7: Param. Code: tdpu-size                                      0x01' // 8: Param. length 1                                      0x09' // 9: TPDU size                                      0xC1' // 10: Param. Code:scr-tsap                                      0x02' // 11: Param. length 2                                      0x01' // 12:                                      0x00' // 13:                                      0xC2' // 14: Param. Code: dst-tsap                                      0x02' // 15: Param. length 2                                      0x03' // 16:                                      0x02 // 17:                                  };                      cc[2] = coptPart[4];                      cc[3] = coptPart[5];                      listBox1.Items.Add("Send (TCP): " + ByteExtensions.ToHexString(cc));                                    myTCPServer.SendData(cc);                    }                  else if (coptPart[1] == 0xf0 /* 0xf0 = DT = Data */)                  {                      byte[] pduBytes = new byte[telegramm.Length - coptPart.Length];                      Array.Copy(telegramm' coptPart.Length' pduBytes' 0' pduBytes.Length);                      Pdu recPdu = new Pdu(pduBytes);                        if (recPdu.Param[0] == 0xf0)                      {                          //Negotiate PDU Length request                       }                      else                          myConnection.SendPdu(recPdu);                  }              }              catch (Exception ex)              {                  listBox1.Items.Add(ex.Message);              }
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,myTCPServer_TelegrammRecieved,The following statement contains a magic number: try              {                  if (coptPart[1] == 0xe0 /* 0xe0 = CR = Connection Request */)                  {                      // Auf Anfrage mit CC Connect Confirm antworten                      byte[] cc = {                                      // *** fixed part ***                                      0x11' // Length 17                                      0x0D' // 0xD0 = CC Connect Confirm                                      0x00' 0x01' // 2' 3: Dest.Reference                                      0x00' 0x01' // 4' 5: Source Reference                                      0x00' // 6 :Class Option                                      // *** variable part ***                                      0xC0' // 7: Param. Code: tdpu-size                                      0x01' // 8: Param. length 1                                      0x09' // 9: TPDU size                                      0xC1' // 10: Param. Code:scr-tsap                                      0x02' // 11: Param. length 2                                      0x01' // 12:                                      0x00' // 13:                                      0xC2' // 14: Param. Code: dst-tsap                                      0x02' // 15: Param. length 2                                      0x03' // 16:                                      0x02 // 17:                                  };                      cc[2] = coptPart[4];                      cc[3] = coptPart[5];                      listBox1.Items.Add("Send (TCP): " + ByteExtensions.ToHexString(cc));                                    myTCPServer.SendData(cc);                    }                  else if (coptPart[1] == 0xf0 /* 0xf0 = DT = Data */)                  {                      byte[] pduBytes = new byte[telegramm.Length - coptPart.Length];                      Array.Copy(telegramm' coptPart.Length' pduBytes' 0' pduBytes.Length);                      Pdu recPdu = new Pdu(pduBytes);                        if (recPdu.Param[0] == 0xf0)                      {                          //Negotiate PDU Length request                       }                      else                          myConnection.SendPdu(recPdu);                  }              }              catch (Exception ex)              {                  listBox1.Items.Add(ex.Message);              }
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,myTCPServer_TelegrammRecieved,The following statement contains a magic number: try              {                  if (coptPart[1] == 0xe0 /* 0xe0 = CR = Connection Request */)                  {                      // Auf Anfrage mit CC Connect Confirm antworten                      byte[] cc = {                                      // *** fixed part ***                                      0x11' // Length 17                                      0x0D' // 0xD0 = CC Connect Confirm                                      0x00' 0x01' // 2' 3: Dest.Reference                                      0x00' 0x01' // 4' 5: Source Reference                                      0x00' // 6 :Class Option                                      // *** variable part ***                                      0xC0' // 7: Param. Code: tdpu-size                                      0x01' // 8: Param. length 1                                      0x09' // 9: TPDU size                                      0xC1' // 10: Param. Code:scr-tsap                                      0x02' // 11: Param. length 2                                      0x01' // 12:                                      0x00' // 13:                                      0xC2' // 14: Param. Code: dst-tsap                                      0x02' // 15: Param. length 2                                      0x03' // 16:                                      0x02 // 17:                                  };                      cc[2] = coptPart[4];                      cc[3] = coptPart[5];                      listBox1.Items.Add("Send (TCP): " + ByteExtensions.ToHexString(cc));                                    myTCPServer.SendData(cc);                    }                  else if (coptPart[1] == 0xf0 /* 0xf0 = DT = Data */)                  {                      byte[] pduBytes = new byte[telegramm.Length - coptPart.Length];                      Array.Copy(telegramm' coptPart.Length' pduBytes' 0' pduBytes.Length);                      Pdu recPdu = new Pdu(pduBytes);                        if (recPdu.Param[0] == 0xf0)                      {                          //Negotiate PDU Length request                       }                      else                          myConnection.SendPdu(recPdu);                  }              }              catch (Exception ex)              {                  listBox1.Items.Add(ex.Message);              }
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,myTCPServer_TelegrammRecieved,The following statement contains a magic number: try              {                  if (coptPart[1] == 0xe0 /* 0xe0 = CR = Connection Request */)                  {                      // Auf Anfrage mit CC Connect Confirm antworten                      byte[] cc = {                                      // *** fixed part ***                                      0x11' // Length 17                                      0x0D' // 0xD0 = CC Connect Confirm                                      0x00' 0x01' // 2' 3: Dest.Reference                                      0x00' 0x01' // 4' 5: Source Reference                                      0x00' // 6 :Class Option                                      // *** variable part ***                                      0xC0' // 7: Param. Code: tdpu-size                                      0x01' // 8: Param. length 1                                      0x09' // 9: TPDU size                                      0xC1' // 10: Param. Code:scr-tsap                                      0x02' // 11: Param. length 2                                      0x01' // 12:                                      0x00' // 13:                                      0xC2' // 14: Param. Code: dst-tsap                                      0x02' // 15: Param. length 2                                      0x03' // 16:                                      0x02 // 17:                                  };                      cc[2] = coptPart[4];                      cc[3] = coptPart[5];                      listBox1.Items.Add("Send (TCP): " + ByteExtensions.ToHexString(cc));                                    myTCPServer.SendData(cc);                    }                  else if (coptPart[1] == 0xf0 /* 0xf0 = DT = Data */)                  {                      byte[] pduBytes = new byte[telegramm.Length - coptPart.Length];                      Array.Copy(telegramm' coptPart.Length' pduBytes' 0' pduBytes.Length);                      Pdu recPdu = new Pdu(pduBytes);                        if (recPdu.Param[0] == 0xf0)                      {                          //Negotiate PDU Length request                       }                      else                          myConnection.SendPdu(recPdu);                  }              }              catch (Exception ex)              {                  listBox1.Items.Add(ex.Message);              }
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point(2' 36);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point(2' 36);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size(719' 251);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size(719' 251);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.cmdStart.Location = new System.Drawing.Point(478' 2);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.cmdStart.Location = new System.Drawing.Point(478' 2);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.cmdStart.Size = new System.Drawing.Size(243' 28);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.cmdStart.Size = new System.Drawing.Size(243' 28);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(120' 10);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(120' 10);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(158' 13);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(158' 13);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(723' 300);
Magic Number,NetworkPLCSim,NetworkPLCSim,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\NetworkPLCSim.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(723' 300);
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,SendData,The following statement contains a magic number: byte[] data = new byte[telegramm.Length + 4];
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,SendData,The following statement contains a magic number: Array.Copy(telegramm' 0' data' 4' telegramm.Length);
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,SendData,The following statement contains a magic number: data[0] = 3;
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,SendData,The following statement contains a magic number: data[2] = BitConverter.GetBytes(data.Length)[1];
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,SendData,The following statement contains a magic number: data[3] = BitConverter.GetBytes(data.Length)[0];
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,InitSendClientPassive,The following statement contains a magic number: while (true)              {                  if (ConnectionClosed != null && SendClosed && (_tcpClient == null || _tcpClient.Connected == false))                  {                      oldTcpClient = _tcpClient;                      SendClosed = false;                      context.Post(delegate { ConnectionClosed(oldTcpClient); }' null);                  }                    if (!SendClosed && (_tcpClient == null || _tcpClient.Connected == false))                  {                      if (_tcpClient != null)                          _tcpClient.Close();                        if (server == null)                      {                          server = new TcpListener(/*local_ip'*/ _port);                          server.Start();                      }                        _tcpClient = null;                      _tcpClient = server.AcceptTcpClient();                      SocketExtensions.SetKeepAlive(_tcpClient.Client' 100' 20);                      SendClosed = true;                        if (ConnectionEstablished != null)                          context.Post(delegate { ConnectionEstablished(_tcpClient); }' null);                        //Thread for Recieving Data                      if (_receiveDataThread != null)                      {                          _receiveDataThread.Abort();                          Threads.Remove(_receiveDataThread);                      }                      _receiveDataThread = new Thread(ReceiveDataSendClient);                      _receiveDataThread.Name = "PReceiveDataSendClientThread";                      _receiveDataThread.Start();                      Threads.Add(_receiveDataThread);                      //End Thread                                      }                  else                      Thread.Sleep(100);              }
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,InitSendClientPassive,The following statement contains a magic number: while (true)              {                  if (ConnectionClosed != null && SendClosed && (_tcpClient == null || _tcpClient.Connected == false))                  {                      oldTcpClient = _tcpClient;                      SendClosed = false;                      context.Post(delegate { ConnectionClosed(oldTcpClient); }' null);                  }                    if (!SendClosed && (_tcpClient == null || _tcpClient.Connected == false))                  {                      if (_tcpClient != null)                          _tcpClient.Close();                        if (server == null)                      {                          server = new TcpListener(/*local_ip'*/ _port);                          server.Start();                      }                        _tcpClient = null;                      _tcpClient = server.AcceptTcpClient();                      SocketExtensions.SetKeepAlive(_tcpClient.Client' 100' 20);                      SendClosed = true;                        if (ConnectionEstablished != null)                          context.Post(delegate { ConnectionEstablished(_tcpClient); }' null);                        //Thread for Recieving Data                      if (_receiveDataThread != null)                      {                          _receiveDataThread.Abort();                          Threads.Remove(_receiveDataThread);                      }                      _receiveDataThread = new Thread(ReceiveDataSendClient);                      _receiveDataThread.Name = "PReceiveDataSendClientThread";                      _receiveDataThread.Start();                      Threads.Add(_receiveDataThread);                      //End Thread                                      }                  else                      Thread.Sleep(100);              }
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,InitSendClientPassive,The following statement contains a magic number: while (true)              {                  if (ConnectionClosed != null && SendClosed && (_tcpClient == null || _tcpClient.Connected == false))                  {                      oldTcpClient = _tcpClient;                      SendClosed = false;                      context.Post(delegate { ConnectionClosed(oldTcpClient); }' null);                  }                    if (!SendClosed && (_tcpClient == null || _tcpClient.Connected == false))                  {                      if (_tcpClient != null)                          _tcpClient.Close();                        if (server == null)                      {                          server = new TcpListener(/*local_ip'*/ _port);                          server.Start();                      }                        _tcpClient = null;                      _tcpClient = server.AcceptTcpClient();                      SocketExtensions.SetKeepAlive(_tcpClient.Client' 100' 20);                      SendClosed = true;                        if (ConnectionEstablished != null)                          context.Post(delegate { ConnectionEstablished(_tcpClient); }' null);                        //Thread for Recieving Data                      if (_receiveDataThread != null)                      {                          _receiveDataThread.Abort();                          Threads.Remove(_receiveDataThread);                      }                      _receiveDataThread = new Thread(ReceiveDataSendClient);                      _receiveDataThread.Name = "PReceiveDataSendClientThread";                      _receiveDataThread.Start();                      Threads.Add(_receiveDataThread);                      //End Thread                                      }                  else                      Thread.Sleep(100);              }
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,ReceiveDataSendClient,The following statement contains a magic number: try              {                  while (true)                  {                      if (stream == null)                          stream = _tcpClient.GetStream();                                            try                      {                          //Read Telegramm                            //Read TPKT Header                          bytes = new Byte[4];                          len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length || bytes[0] != 3 /* TelegrammVersion == 3 */)                               throw new Exception();                                                                            //Read ISO 8073 COPT                          bytes = new Byte[bytes[2] * 0x100 + bytes[3] - 4];                           len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length)                              throw new Exception();                            if (TelegrammRecieved != null && len > 0)                              context.Post(delegate { TelegrammRecieved(bytes' _tcpClient); }' null);                            //stream.Dispose();                      }                      catch (Exception ex)                      {                          if (stream != null)                          {                              stream.Dispose();                              stream = null;                          }                      }                  }              }              catch (Exception ex) //Kill this Thread when a Exception occurs!              {                  if (stream != null)                  {                      stream.Dispose();                      stream = null;                  }                    if (_tcpClient != null)                      _tcpClient.Close();              }
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,ReceiveDataSendClient,The following statement contains a magic number: try              {                  while (true)                  {                      if (stream == null)                          stream = _tcpClient.GetStream();                                            try                      {                          //Read Telegramm                            //Read TPKT Header                          bytes = new Byte[4];                          len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length || bytes[0] != 3 /* TelegrammVersion == 3 */)                               throw new Exception();                                                                            //Read ISO 8073 COPT                          bytes = new Byte[bytes[2] * 0x100 + bytes[3] - 4];                           len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length)                              throw new Exception();                            if (TelegrammRecieved != null && len > 0)                              context.Post(delegate { TelegrammRecieved(bytes' _tcpClient); }' null);                            //stream.Dispose();                      }                      catch (Exception ex)                      {                          if (stream != null)                          {                              stream.Dispose();                              stream = null;                          }                      }                  }              }              catch (Exception ex) //Kill this Thread when a Exception occurs!              {                  if (stream != null)                  {                      stream.Dispose();                      stream = null;                  }                    if (_tcpClient != null)                      _tcpClient.Close();              }
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,ReceiveDataSendClient,The following statement contains a magic number: try              {                  while (true)                  {                      if (stream == null)                          stream = _tcpClient.GetStream();                                            try                      {                          //Read Telegramm                            //Read TPKT Header                          bytes = new Byte[4];                          len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length || bytes[0] != 3 /* TelegrammVersion == 3 */)                               throw new Exception();                                                                            //Read ISO 8073 COPT                          bytes = new Byte[bytes[2] * 0x100 + bytes[3] - 4];                           len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length)                              throw new Exception();                            if (TelegrammRecieved != null && len > 0)                              context.Post(delegate { TelegrammRecieved(bytes' _tcpClient); }' null);                            //stream.Dispose();                      }                      catch (Exception ex)                      {                          if (stream != null)                          {                              stream.Dispose();                              stream = null;                          }                      }                  }              }              catch (Exception ex) //Kill this Thread when a Exception occurs!              {                  if (stream != null)                  {                      stream.Dispose();                      stream = null;                  }                    if (_tcpClient != null)                      _tcpClient.Close();              }
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,ReceiveDataSendClient,The following statement contains a magic number: try              {                  while (true)                  {                      if (stream == null)                          stream = _tcpClient.GetStream();                                            try                      {                          //Read Telegramm                            //Read TPKT Header                          bytes = new Byte[4];                          len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length || bytes[0] != 3 /* TelegrammVersion == 3 */)                               throw new Exception();                                                                            //Read ISO 8073 COPT                          bytes = new Byte[bytes[2] * 0x100 + bytes[3] - 4];                           len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length)                              throw new Exception();                            if (TelegrammRecieved != null && len > 0)                              context.Post(delegate { TelegrammRecieved(bytes' _tcpClient); }' null);                            //stream.Dispose();                      }                      catch (Exception ex)                      {                          if (stream != null)                          {                              stream.Dispose();                              stream = null;                          }                      }                  }              }              catch (Exception ex) //Kill this Thread when a Exception occurs!              {                  if (stream != null)                  {                      stream.Dispose();                      stream = null;                  }                    if (_tcpClient != null)                      _tcpClient.Close();              }
Magic Number,Kopplungstester,TCPServerTPKT,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPServer.cs,ReceiveDataSendClient,The following statement contains a magic number: try              {                  while (true)                  {                      if (stream == null)                          stream = _tcpClient.GetStream();                                            try                      {                          //Read Telegramm                            //Read TPKT Header                          bytes = new Byte[4];                          len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length || bytes[0] != 3 /* TelegrammVersion == 3 */)                               throw new Exception();                                                                            //Read ISO 8073 COPT                          bytes = new Byte[bytes[2] * 0x100 + bytes[3] - 4];                           len = stream.Read(bytes' 0' bytes.Length);                          if (len != bytes.Length)                              throw new Exception();                            if (TelegrammRecieved != null && len > 0)                              context.Post(delegate { TelegrammRecieved(bytes' _tcpClient); }' null);                            //stream.Dispose();                      }                      catch (Exception ex)                      {                          if (stream != null)                          {                              stream.Dispose();                              stream = null;                          }                      }                  }              }              catch (Exception ex) //Kill this Thread when a Exception occurs!              {                  if (stream != null)                  {                      stream.Dispose();                      stream = null;                  }                    if (_tcpClient != null)                      _tcpClient.Close();              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitSendClientPassive,The following statement contains a magic number: while (true)              {                                  if (ConnectionClosed != null && SendClosed)                  {                      SendClosed = false;                      context.Post(delegate { ConnectionClosed(1); }' null);                  }                                       if (Send_Client == null || Send_Client.Connected == false)                  {                      if (Send_Client!=null)                          Send_Client.Close();                        TcpListener server = new TcpListener(local_ip' send_connection_port);                      server.Start();                                            Send_Client = null;                      if (onlyOneConnection)                          Recieve_Client = null;                      Send_Client = server.AcceptTcpClient();                        SocketExtensions.SetKeepAlive(Send_Client.Client' 100' 20);                                            SendClosed = true;                                            if (ConnectionEstablished != null)                          context.Post(delegate { ConnectionEstablished(1); }' null);                        //Thread for Recieving Data                      if (ReceiveDataSendClientThread != null)                      {                          ReceiveDataSendClientThread.Abort();                          Threads.Remove(ReceiveDataSendClientThread);                      }                      ReceiveDataSendClientThread = new Thread(ReceiveDataSendClient);                      ReceiveDataSendClientThread.Name = "PReceiveDataSendClientThread";                      ReceiveDataSendClientThread.Start();                      Threads.Add(ReceiveDataSendClientThread);                      //End Thread                        if (onlyOneConnection)                          Recieve_Client = Send_Client;                  }                            }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitSendClientPassive,The following statement contains a magic number: while (true)              {                                  if (ConnectionClosed != null && SendClosed)                  {                      SendClosed = false;                      context.Post(delegate { ConnectionClosed(1); }' null);                  }                                       if (Send_Client == null || Send_Client.Connected == false)                  {                      if (Send_Client!=null)                          Send_Client.Close();                        TcpListener server = new TcpListener(local_ip' send_connection_port);                      server.Start();                                            Send_Client = null;                      if (onlyOneConnection)                          Recieve_Client = null;                      Send_Client = server.AcceptTcpClient();                        SocketExtensions.SetKeepAlive(Send_Client.Client' 100' 20);                                            SendClosed = true;                                            if (ConnectionEstablished != null)                          context.Post(delegate { ConnectionEstablished(1); }' null);                        //Thread for Recieving Data                      if (ReceiveDataSendClientThread != null)                      {                          ReceiveDataSendClientThread.Abort();                          Threads.Remove(ReceiveDataSendClientThread);                      }                      ReceiveDataSendClientThread = new Thread(ReceiveDataSendClient);                      ReceiveDataSendClientThread.Name = "PReceiveDataSendClientThread";                      ReceiveDataSendClientThread.Start();                      Threads.Add(ReceiveDataSendClientThread);                      //End Thread                        if (onlyOneConnection)                          Recieve_Client = Send_Client;                  }                            }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitSendClientActive,The following statement contains a magic number: while (true)              {                  try                  {                                          if (Send_Client == null || Send_Client.Connected == false)                      {                          if (SendClosed)                          {                              SendClosed = false;                              context.Post(delegate { ConnectionClosed(1); }' null);                          }                            Send_Client = null;                          if (onlyOneConnection)                              Recieve_Client = null;                                                    Send_Client = new TcpClient(plc_ip.ToString()' send_connection_port);                          SocketExtensions.SetKeepAlive(Send_Client.Client' 100' 20);                                                    SendClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(1); }' null);                            //Thread for Recieving Data                          if (ReceiveDataSendClientThread != null)                          {                              ReceiveDataSendClientThread.Abort();                              Threads.Remove(ReceiveDataSendClientThread);                          }                          ReceiveDataSendClientThread = new Thread(ReceiveDataSendClient);                          ReceiveDataSendClientThread.Name = "AReceiveDataSendClientThread";                          ReceiveDataSendClientThread.Start();                          Threads.Add(ReceiveDataSendClientThread);                          //End Thread                            if (onlyOneConnection)                              Recieve_Client = Send_Client;                      }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitSendClientActive,The following statement contains a magic number: while (true)              {                  try                  {                                          if (Send_Client == null || Send_Client.Connected == false)                      {                          if (SendClosed)                          {                              SendClosed = false;                              context.Post(delegate { ConnectionClosed(1); }' null);                          }                            Send_Client = null;                          if (onlyOneConnection)                              Recieve_Client = null;                                                    Send_Client = new TcpClient(plc_ip.ToString()' send_connection_port);                          SocketExtensions.SetKeepAlive(Send_Client.Client' 100' 20);                                                    SendClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(1); }' null);                            //Thread for Recieving Data                          if (ReceiveDataSendClientThread != null)                          {                              ReceiveDataSendClientThread.Abort();                              Threads.Remove(ReceiveDataSendClientThread);                          }                          ReceiveDataSendClientThread = new Thread(ReceiveDataSendClient);                          ReceiveDataSendClientThread.Name = "AReceiveDataSendClientThread";                          ReceiveDataSendClientThread.Start();                          Threads.Add(ReceiveDataSendClientThread);                          //End Thread                            if (onlyOneConnection)                              Recieve_Client = Send_Client;                      }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitSendClientActive,The following statement contains a magic number: while (true)              {                  try                  {                                          if (Send_Client == null || Send_Client.Connected == false)                      {                          if (SendClosed)                          {                              SendClosed = false;                              context.Post(delegate { ConnectionClosed(1); }' null);                          }                            Send_Client = null;                          if (onlyOneConnection)                              Recieve_Client = null;                                                    Send_Client = new TcpClient(plc_ip.ToString()' send_connection_port);                          SocketExtensions.SetKeepAlive(Send_Client.Client' 100' 20);                                                    SendClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(1); }' null);                            //Thread for Recieving Data                          if (ReceiveDataSendClientThread != null)                          {                              ReceiveDataSendClientThread.Abort();                              Threads.Remove(ReceiveDataSendClientThread);                          }                          ReceiveDataSendClientThread = new Thread(ReceiveDataSendClient);                          ReceiveDataSendClientThread.Name = "AReceiveDataSendClientThread";                          ReceiveDataSendClientThread.Start();                          Threads.Add(ReceiveDataSendClientThread);                          //End Thread                            if (onlyOneConnection)                              Recieve_Client = Send_Client;                      }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitSendClientActive,The following statement contains a magic number: while (true)              {                  try                  {                                          if (Send_Client == null || Send_Client.Connected == false)                      {                          if (SendClosed)                          {                              SendClosed = false;                              context.Post(delegate { ConnectionClosed(1); }' null);                          }                            Send_Client = null;                          if (onlyOneConnection)                              Recieve_Client = null;                                                    Send_Client = new TcpClient(plc_ip.ToString()' send_connection_port);                          SocketExtensions.SetKeepAlive(Send_Client.Client' 100' 20);                                                    SendClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(1); }' null);                            //Thread for Recieving Data                          if (ReceiveDataSendClientThread != null)                          {                              ReceiveDataSendClientThread.Abort();                              Threads.Remove(ReceiveDataSendClientThread);                          }                          ReceiveDataSendClientThread = new Thread(ReceiveDataSendClient);                          ReceiveDataSendClientThread.Name = "AReceiveDataSendClientThread";                          ReceiveDataSendClientThread.Start();                          Threads.Add(ReceiveDataSendClientThread);                          //End Thread                            if (onlyOneConnection)                              Recieve_Client = Send_Client;                      }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientPassive,The following statement contains a magic number: while (true)              {                  if (RecieveClosed)                  {                      RecieveClosed = false;                      context.Post(delegate { ConnectionClosed(1); }' null);                  }                                       if (Recieve_Client == null || Recieve_Client.Connected == false)                  {                      if (Recieve_Client != null)                          Recieve_Client.Close();                        TcpListener server = new TcpListener(local_ip' recieve_connection_port);                      server.Start();                        Recieve_Client = null;                      Recieve_Client = server.AcceptTcpClient();                      SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                        RecieveClosed = true;                        if (ConnectionEstablished != null)                          context.Post(delegate { ConnectionEstablished(2); }' null);                        //Thread for Recieving Data                      if (ReceiveDataRecieveClientThread != null)                      {                          ReceiveDataRecieveClientThread.Abort();                          Threads.Remove(ReceiveDataRecieveClientThread);                      }                      ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                      ReceiveDataRecieveClientThread.Name = "PReceiveDataRecieveClientThread";                      ReceiveDataRecieveClientThread.Start();                      Threads.Add(ReceiveDataRecieveClientThread);                      //End Thread                  }                              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientPassive,The following statement contains a magic number: while (true)              {                  if (RecieveClosed)                  {                      RecieveClosed = false;                      context.Post(delegate { ConnectionClosed(1); }' null);                  }                                       if (Recieve_Client == null || Recieve_Client.Connected == false)                  {                      if (Recieve_Client != null)                          Recieve_Client.Close();                        TcpListener server = new TcpListener(local_ip' recieve_connection_port);                      server.Start();                        Recieve_Client = null;                      Recieve_Client = server.AcceptTcpClient();                      SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                        RecieveClosed = true;                        if (ConnectionEstablished != null)                          context.Post(delegate { ConnectionEstablished(2); }' null);                        //Thread for Recieving Data                      if (ReceiveDataRecieveClientThread != null)                      {                          ReceiveDataRecieveClientThread.Abort();                          Threads.Remove(ReceiveDataRecieveClientThread);                      }                      ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                      ReceiveDataRecieveClientThread.Name = "PReceiveDataRecieveClientThread";                      ReceiveDataRecieveClientThread.Start();                      Threads.Add(ReceiveDataRecieveClientThread);                      //End Thread                  }                              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientPassive,The following statement contains a magic number: while (true)              {                  if (RecieveClosed)                  {                      RecieveClosed = false;                      context.Post(delegate { ConnectionClosed(1); }' null);                  }                                       if (Recieve_Client == null || Recieve_Client.Connected == false)                  {                      if (Recieve_Client != null)                          Recieve_Client.Close();                        TcpListener server = new TcpListener(local_ip' recieve_connection_port);                      server.Start();                        Recieve_Client = null;                      Recieve_Client = server.AcceptTcpClient();                      SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                        RecieveClosed = true;                        if (ConnectionEstablished != null)                          context.Post(delegate { ConnectionEstablished(2); }' null);                        //Thread for Recieving Data                      if (ReceiveDataRecieveClientThread != null)                      {                          ReceiveDataRecieveClientThread.Abort();                          Threads.Remove(ReceiveDataRecieveClientThread);                      }                      ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                      ReceiveDataRecieveClientThread.Name = "PReceiveDataRecieveClientThread";                      ReceiveDataRecieveClientThread.Start();                      Threads.Add(ReceiveDataRecieveClientThread);                      //End Thread                  }                              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientActive,The following statement contains a magic number: while (true)              {                  try                  {                      if (Recieve_Client == null || Recieve_Client.Connected == false)                      {                          if (RecieveClosed)                          {                              RecieveClosed = false;                              context.Post(delegate { ConnectionClosed(2); }' null);                          }                            Recieve_Client = null;                          Recieve_Client = new TcpClient(plc_ip.ToString()' recieve_connection_port);                          SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                            RecieveClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(2); }' null);                            //Thread for Recieving Data                          if (ReceiveDataRecieveClientThread != null)                          {                              ReceiveDataRecieveClientThread.Abort();                              Threads.Remove(ReceiveDataRecieveClientThread);                          }                          ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                          ReceiveDataRecieveClientThread.Name = "AReceiveDataRecieveClient";                          ReceiveDataRecieveClientThread.Start();                          Threads.Add(ReceiveDataRecieveClientThread);                          //End Thread                                             }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientActive,The following statement contains a magic number: while (true)              {                  try                  {                      if (Recieve_Client == null || Recieve_Client.Connected == false)                      {                          if (RecieveClosed)                          {                              RecieveClosed = false;                              context.Post(delegate { ConnectionClosed(2); }' null);                          }                            Recieve_Client = null;                          Recieve_Client = new TcpClient(plc_ip.ToString()' recieve_connection_port);                          SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                            RecieveClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(2); }' null);                            //Thread for Recieving Data                          if (ReceiveDataRecieveClientThread != null)                          {                              ReceiveDataRecieveClientThread.Abort();                              Threads.Remove(ReceiveDataRecieveClientThread);                          }                          ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                          ReceiveDataRecieveClientThread.Name = "AReceiveDataRecieveClient";                          ReceiveDataRecieveClientThread.Start();                          Threads.Add(ReceiveDataRecieveClientThread);                          //End Thread                                             }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientActive,The following statement contains a magic number: while (true)              {                  try                  {                      if (Recieve_Client == null || Recieve_Client.Connected == false)                      {                          if (RecieveClosed)                          {                              RecieveClosed = false;                              context.Post(delegate { ConnectionClosed(2); }' null);                          }                            Recieve_Client = null;                          Recieve_Client = new TcpClient(plc_ip.ToString()' recieve_connection_port);                          SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                            RecieveClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(2); }' null);                            //Thread for Recieving Data                          if (ReceiveDataRecieveClientThread != null)                          {                              ReceiveDataRecieveClientThread.Abort();                              Threads.Remove(ReceiveDataRecieveClientThread);                          }                          ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                          ReceiveDataRecieveClientThread.Name = "AReceiveDataRecieveClient";                          ReceiveDataRecieveClientThread.Start();                          Threads.Add(ReceiveDataRecieveClientThread);                          //End Thread                                             }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientActive,The following statement contains a magic number: while (true)              {                  try                  {                      if (Recieve_Client == null || Recieve_Client.Connected == false)                      {                          if (RecieveClosed)                          {                              RecieveClosed = false;                              context.Post(delegate { ConnectionClosed(2); }' null);                          }                            Recieve_Client = null;                          Recieve_Client = new TcpClient(plc_ip.ToString()' recieve_connection_port);                          SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                            RecieveClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(2); }' null);                            //Thread for Recieving Data                          if (ReceiveDataRecieveClientThread != null)                          {                              ReceiveDataRecieveClientThread.Abort();                              Threads.Remove(ReceiveDataRecieveClientThread);                          }                          ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                          ReceiveDataRecieveClientThread.Name = "AReceiveDataRecieveClient";                          ReceiveDataRecieveClientThread.Start();                          Threads.Add(ReceiveDataRecieveClientThread);                          //End Thread                                             }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientActive,The following statement contains a magic number: while (true)              {                  try                  {                      if (Recieve_Client == null || Recieve_Client.Connected == false)                      {                          if (RecieveClosed)                          {                              RecieveClosed = false;                              context.Post(delegate { ConnectionClosed(2); }' null);                          }                            Recieve_Client = null;                          Recieve_Client = new TcpClient(plc_ip.ToString()' recieve_connection_port);                          SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                            RecieveClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(2); }' null);                            //Thread for Recieving Data                          if (ReceiveDataRecieveClientThread != null)                          {                              ReceiveDataRecieveClientThread.Abort();                              Threads.Remove(ReceiveDataRecieveClientThread);                          }                          ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                          ReceiveDataRecieveClientThread.Name = "AReceiveDataRecieveClient";                          ReceiveDataRecieveClientThread.Start();                          Threads.Add(ReceiveDataRecieveClientThread);                          //End Thread                                             }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,Kopplungstester,TCPFunctions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\TCPFunctions.cs,InitRecieveClientActive,The following statement contains a magic number: while (true)              {                  try                  {                      if (Recieve_Client == null || Recieve_Client.Connected == false)                      {                          if (RecieveClosed)                          {                              RecieveClosed = false;                              context.Post(delegate { ConnectionClosed(2); }' null);                          }                            Recieve_Client = null;                          Recieve_Client = new TcpClient(plc_ip.ToString()' recieve_connection_port);                          SocketExtensions.SetKeepAlive(Recieve_Client.Client' 100' 20);                            RecieveClosed = true;                            if (ConnectionEstablished != null)                              context.Post(delegate { ConnectionEstablished(2); }' null);                            //Thread for Recieving Data                          if (ReceiveDataRecieveClientThread != null)                          {                              ReceiveDataRecieveClientThread.Abort();                              Threads.Remove(ReceiveDataRecieveClientThread);                          }                          ReceiveDataRecieveClientThread = new Thread(ReceiveDataRecieveClient);                          ReceiveDataRecieveClientThread.Name = "AReceiveDataRecieveClient";                          ReceiveDataRecieveClientThread.Start();                          Threads.Add(ReceiveDataRecieveClientThread);                          //End Thread                                             }                      Thread.Sleep(1000);                  }                  catch (ThreadAbortException ex)                  {                      return;                  }                  catch (Exception ex)                  {                      Thread.Sleep(5000);                  }              }
Magic Number,System.Net.Sockets,SocketExtensions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\SocketExtensions.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[]              	{              		(time == 0 || interval == 0) ? 0UL : 1UL' // on or off  					time'  					interval  				};                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);                                             }              catch (SocketException e)              {                  Console.WriteLine("Failed to set keep-alive: {0} {1}"' e.ErrorCode' e);                  return false;              }
Magic Number,System.Net.Sockets,SocketExtensions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\SocketExtensions.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[]              	{              		(time == 0 || interval == 0) ? 0UL : 1UL' // on or off  					time'  					interval  				};                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);                                             }              catch (SocketException e)              {                  Console.WriteLine("Failed to set keep-alive: {0} {1}"' e.ErrorCode' e);                  return false;              }
Magic Number,System.Net.Sockets,SocketExtensions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\SocketExtensions.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[]              	{              		(time == 0 || interval == 0) ? 0UL : 1UL' // on or off  					time'  					interval  				};                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);                                             }              catch (SocketException e)              {                  Console.WriteLine("Failed to set keep-alive: {0} {1}"' e.ErrorCode' e);                  return false;              }
Magic Number,System.Net.Sockets,SocketExtensions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\SocketExtensions.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[]              	{              		(time == 0 || interval == 0) ? 0UL : 1UL' // on or off  					time'  					interval  				};                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);                                             }              catch (SocketException e)              {                  Console.WriteLine("Failed to set keep-alive: {0} {1}"' e.ErrorCode' e);                  return false;              }
Magic Number,System.Net.Sockets,SocketExtensions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\SocketExtensions.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[]              	{              		(time == 0 || interval == 0) ? 0UL : 1UL' // on or off  					time'  					interval  				};                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);                                             }              catch (SocketException e)              {                  Console.WriteLine("Failed to set keep-alive: {0} {1}"' e.ErrorCode' e);                  return false;              }
Magic Number,System.Net.Sockets,SocketExtensions,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\NetworkPLCSim\SocketExtensions.cs,SetKeepAlive,The following statement contains a magic number: try              {                  // Array to hold input values.                  var input = new[]              	{              		(time == 0 || interval == 0) ? 0UL : 1UL' // on or off  					time'  					interval  				};                    // Pack input into byte struct.                  byte[] inValue = new byte[3 * BytesPerLong];                  for (int i = 0; i < input.Length; i++)                  {                      inValue[i * BytesPerLong + 3] = (byte)(input[i] >> ((BytesPerLong - 1) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 2] = (byte)(input[i] >> ((BytesPerLong - 2) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 1] = (byte)(input[i] >> ((BytesPerLong - 3) * BitsPerByte) & 0xff);                      inValue[i * BytesPerLong + 0] = (byte)(input[i] >> ((BytesPerLong - 4) * BitsPerByte) & 0xff);                  }                    // Create bytestruct for result (bytes pending on server socket).                  byte[] outValue = BitConverter.GetBytes(0);                                    // Write SIO_VALS to Socket IOControl.                  socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' true);                  socket.IOControl(IOControlCode.KeepAliveValues' inValue' outValue);                                             }              catch (SocketException e)              {                  Console.WriteLine("Failed to set keep-alive: {0} {1}"' e.ErrorCode' e);                  return false;              }
