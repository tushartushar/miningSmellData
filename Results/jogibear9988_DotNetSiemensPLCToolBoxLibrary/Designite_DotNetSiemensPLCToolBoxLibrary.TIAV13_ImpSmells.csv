Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,parseChildren,The method has 162 lines of code.
Complex Method,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,Step7ProjectV13,Cyclomatic complexity of the method is 11
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,currentDomain_AssemblyResolve,The length of the statement  "            var filePathReg = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Wow6432Node\\Siemens\\Automation\\_InstalledSW\\TIAP13\\TIA_Opns") ?? " is 131.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,BinaryParseTIAFile,The length of the statement  "                var projectid = rootObjects.TiaRootObjectEntrys.FirstOrDefault(x => x.ObjectId.TypeId == (int)TiaTypeIds.Siemens_Automation_DomainModel_ProjectData).ObjectId; " is 158.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            ////XmlWriter xmlWriter = XmlWriter.Create(streamWriter' new XmlWriterSettings { Indent = true' CheckCharacters = false }); " is 123.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            //    tiaExportType = Type.GetType("Siemens.Automation.ObjectFrame.FileStorage.Conversion.Export' Siemens.Automation.ObjectFrame.FileStorage"); " is 143.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            //        tiaExport = tiaExportType.InvokeMember("CreateInstance"' BindingFlags.Static | BindingFlags.Public | BindingFlags.InvokeMethod' null' null' new object[] { DataFile' true }); " is 183.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            //        var helper = Type.GetType("Siemens.Automation.ObjectFrame.FileStorage.Base.Client.DataStoreClientHelper' Siemens.Automation.ObjectFrame.FileStorage.Base"); " is 165.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            //        var metaManagerMth = helper.GetMethods(BindingFlags.NonPublic | BindingFlags.Static).FirstOrDefault(x => x.Name == "GetMetaManager"); " is 143.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            //    var memMgrType = Type.GetType("Siemens.Automation.ObjectFrame.Kernel.MemoryManager' Siemens.Automation.ObjectFrame.Kernel"); " is 130.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            //        memMgrType.InvokeMember("Initialize"' BindingFlags.Static | BindingFlags.Public | BindingFlags.InvokeMethod' null' null' new object[] { 104857600 });                     " is 159.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            ////tiaExportType.InvokeMember("WriteCultures"' BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance' null' tiaExport' new object[] { xmlWriter }); " is 169.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            ////tiaExportType.InvokeMember("StartExport"' BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance' null' tiaExport' new object[] { xmlWriter }); " is 189.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            ////tiaExportType.InvokeMember("WriteRootObjectList"' BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance' null' tiaExport' new object[] { xmlWriter }); " is 175.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadProject,The length of the statement  "            //    bgWorker.SetValue(tiaExport' new BackgroundWorker() {WorkerReportsProgress = true' WorkerSupportsCancellation = true}); " is 125.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadViaOpennessDlls,The length of the statement  "                if (d.Subtype.EndsWith(".Device") && !d.Subtype.StartsWith("GSD.") && !d.Subtype.StartsWith("ET200eco.")) //d.Subtype.StartsWith("S7300") || d.Subtype.StartsWith("S7400") || d.Subtype.StartsWith("S71200") || d.Subtype.StartsWith("S71500")) " is 239.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,TIAOpennessProjectBlockInfo,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13Tia.cs,ExportToString,The length of the statement  "                var file = Path.Combine(tmp' "tmp_dnspt_" + Guid.NewGuid().ToString().Replace("{"' "").Replace("}"' "").Replace("-"' "").Replace(" "' "") + ".tmp"); " is 148.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,TIAOpennessProjectBlockInfo,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13Tia.cs,GenerateSourceXML,The length of the statement  "                var file = Path.Combine(tmp' "tmp_dnspt_" + Guid.NewGuid().ToString().Replace("{"' "").Replace("}"' "").Replace("-"' "").Replace(" "' "") + "." + ext); " is 151.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,TIAOpennessProjectDataTypeInfo,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13Tia.cs,ExportToString,The length of the statement  "                var file = Path.Combine(tmp' "tmp_dnspt_" + Guid.NewGuid().ToString().Replace("{"' "").Replace("}"' "").Replace("-"' "").Replace(" "' "") + ".tmp"); " is 148.
Long Statement,DotNetSiemensPLCToolBoxLibrary.Projectfiles,TIAOpennessConstant,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13Tia.cs,ExportToString,The length of the statement  "                var file = Path.Combine(tmp' "tmp_dnspt_" + Guid.NewGuid().ToString().Replace("{"' "").Replace("}"' "").Replace("-"' "").Replace(" "' "") + ".tmp"); " is 148.
Empty Catch Block,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,Step7ProjectV13,The method has an empty catch block.
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,BinaryParseTIAFile,The following statement contains a magic number: using (var sourceStream = new FileStream(DataFile' FileMode.Open' FileAccess.Read' System.IO.FileShare.ReadWrite))              {                  var buffer = new byte[Marshal.SizeOf(typeof(TiaFileHeader))];                  sourceStream.Read(buffer' 0' buffer.Length);                    GCHandle handle = GCHandle.Alloc(buffer' GCHandleType.Pinned);                  TiaFileHeader header = (TiaFileHeader)Marshal.PtrToStructure(handle.AddrOfPinnedObject()' typeof(TiaFileHeader));                  handle.Free();                  TiaMarker? lastMarker = null;                    while (sourceStream.Position < sourceStream.Length)                  {                      if (TiaHelper.IsMarker(sourceStream))                      {                          var buffer2 = new byte[Marshal.SizeOf(typeof(TiaMarker))];                          sourceStream.Read(buffer2' 0' buffer2.Length);                          GCHandle handle2 = GCHandle.Alloc(buffer2' GCHandleType.Pinned);                          TiaMarker marker = (TiaMarker)Marshal.PtrToStructure(handle2.AddrOfPinnedObject()' typeof(TiaMarker));                          handle2.Free();                            lastMarker = marker;                      }                      else                      {                          var buffer3 = new byte[Marshal.SizeOf(typeof(TiaObjectHeader))];                          sourceStream.Read(buffer3' 0' buffer3.Length);                          GCHandle handle3 = GCHandle.Alloc(buffer3' GCHandleType.Pinned);                          TiaObjectHeader hd = (TiaObjectHeader)Marshal.PtrToStructure(handle3.AddrOfPinnedObject()' typeof(TiaObjectHeader));                          handle3.Free();                            var bytes = new byte[hd.Size - buffer3.Length];                          sourceStream.Read(bytes' 0' bytes.Length);                          var id = hd.GetTiaObjectId();                          if (!TiaObjects.ContainsKey(id))                          {                              TiaObjects.Add(id' new TiaFileObject(hd' bytes));                                var size = Marshal.SizeOf(typeof (TiaObjectHeader))+4+BitConverter.ToInt32(bytes' 0)+1;                              if (hd.Size != size || bytes[bytes.Length - 1] != 0xff)                              {                                  //Fehler ???                               }                                  //var strm = new MemoryStream(bytes);                              //var dec = TiaCompression.DecompressStream(strm);                              //var rd = new StreamReader(dec);                              //var wr = rd.ReadToEnd();                          }                          else                          {                              //Todo: look why this happens' and how TIA Handles this!!                              //Console.WriteLine("double Id:" + id.ToString());                          }                      }                  }                    var rootId = new TiaObjectId(TiaFixedRootObjectInstanceIds.RootObjectCollectionId);                  var rootObjects = new TiaRootObjectList(TiaObjects[rootId]);                  var projectid = rootObjects.TiaRootObjectEntrys.FirstOrDefault(x => x.ObjectId.TypeId == (int)TiaTypeIds.Siemens_Automation_DomainModel_ProjectData).ObjectId;                  var projectobj = TiaObjects[projectid];              }
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadViaOpennessDlls,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  try                  {                      if (tiaPortal != null)                      {                          tiaPortal.Dispose();                          tiaPortal = null;                      }                      tiaPortal = new Siemens.Engineering.TiaPortal(Siemens.Engineering.TiaPortalMode.WithoutUserInterface);                      tiapProject = tiaPortal.Projects.Open(ProjectFile);                  }                  catch (Siemens.Engineering.EngineeringSecurityException ex)                  {                      throw;                  }                  catch (Exception ex)                  {                      if (i == 9)                          throw;                  }                  if (tiapProject != null)                      break;              }
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,LoadViaOpennessDlls,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  try                  {                      if (tiaPortal != null)                      {                          tiaPortal.Dispose();                          tiaPortal = null;                      }                      tiaPortal = new Siemens.Engineering.TiaPortal(Siemens.Engineering.TiaPortalMode.WithoutUserInterface);                      tiapProject = tiaPortal.Projects.Open(ProjectFile);                  }                  catch (Siemens.Engineering.EngineeringSecurityException ex)                  {                      throw;                  }                  catch (Exception ex)                  {                      if (i == 9)                          throw;                  }                  if (tiapProject != null)                      break;              }
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,parseChildren,The following statement contains a magic number: foreach (var xElement in parentElement.Elements())              {                  if (xElement.Name.LocalName == "Comment")                  {                      var text = xElement.Elements().FirstOrDefault(x => x.Attribute("Lang").Value == "de-DE");                      if (text == null)                          text = xElement.Elements().FirstOrDefault();                      if (text != null)                          parentRow.Comment = text.Value;                  }                  else if (xElement.Name.LocalName == "StartValue")                  {                      parentRow.StartValue = xElement.Value;                  }                  else if (xElement.Name.LocalName == "Sections")                  {                      var row = ParseTiaDbUdtSections(xElement' (TIADataBlock) parentRow.CurrentBlock' controllerFolder);                      parentRow.AddRange(row.Children);                  }                  else if (xElement.Name.LocalName == "Member")                  {                      var name = xElement.Attribute("Name").Value;                      var datatype = xElement.Attribute("Datatype").Value;                        var row = new TIADataRow(name' S7DataRowType.STRUCT' (TIABlock) parentRow.PlcBlock);                      row.Parent = parentRow;                        if (datatype.Contains("Array["))                      {                          List<int> arrayStart = new List<int>();                          List<int> arrayStop = new List<int>();                            int pos1 = datatype.IndexOf("[");                          int pos2 = datatype.IndexOf("]"' pos1);                          string[] arrays = datatype.Substring(pos1 + 1' pos2 - pos1 - 1).Split(''');                            foreach (string array in arrays)                          {                              string[] akar = array.Split(new string[] {".."}' StringSplitOptions.RemoveEmptyEntries);                              int start = 0;                              if (akar[0].StartsWith("\""))                              {                                  start = (int)controllerFolder.VarTabFolder.FindConstant(akar[0].Substring(1' akar[0].Length - 2)).Value;                              }                              else                              {                                  start = Convert.ToInt32(akar[0].Trim());                              }                                int stop = 0;                              if (akar[1].StartsWith("\""))                              {                                  stop = (int)controllerFolder.VarTabFolder.FindConstant(akar[1].Substring(1' akar[1].Length - 2)).Value;                              }                              else                              {                                  stop = Convert.ToInt32(akar[1].Trim());                              }                                arrayStart.Add(start);                              arrayStop.Add(stop);                          }                            row.ArrayStart = arrayStart;                          row.ArrayStop = arrayStop;                          row.IsArray = true;                          datatype = datatype.Substring(pos2 + 5);                      }                        parentRow.Add(row);                        parseChildren(row' xElement' controllerFolder);                        if (datatype.StartsWith("\""))                      {                          var udt =                              controllerFolder.PlcDatatypeFolder.GetBlock(datatype.Substring(1' datatype.Length - 2));                          if (udt != null)                          {                              var tiaUdt = udt as TIADataBlock;                              row.AddRange(((TIADataRow) tiaUdt.Structure).DeepCopy().Children);                                row.DataTypeBlock = udt;                          }                          row.DataType = S7DataRowType.UDT;                      }                      else if (datatype == "Struct")                      {                        }                      else if (datatype.StartsWith("String["))                      {                          row.DataType = S7DataRowType.STRING;                          row.StringSize = int.Parse(datatype.Substring(7' datatype.Length - 8));                      }                      else                      {                          switch (datatype.ToLower())                          {                              case "byte":                                  row.DataType = S7DataRowType.BYTE;                                  break;                              case "bool":                                  row.DataType = S7DataRowType.BOOL;                                  break;                              case "int":                                  row.DataType = S7DataRowType.INT;                                  break;                              case "uint":                                  row.DataType = S7DataRowType.UINT;                                  break;                              case "dint":                                  row.DataType = S7DataRowType.DINT;                                  break;                              case "udint":                                  row.DataType = S7DataRowType.UDINT;                                  break;                              case "word":                                  row.DataType = S7DataRowType.WORD;                                  break;                              case "dword":                                  row.DataType = S7DataRowType.DWORD;                                  break;                              case "char":                                  row.DataType = S7DataRowType.CHAR;                                  break;                              case "any":                                  row.DataType = S7DataRowType.ANY;                                  break;                              case "date":                                  row.DataType = S7DataRowType.DATE;                                  break;                              case "date_and_time":                                  row.DataType = S7DataRowType.DATE_AND_TIME;                                  break;                              case "real":                                  row.DataType = S7DataRowType.REAL;                                  break;                              case "s5time":                                  row.DataType = S7DataRowType.S5TIME;                                  break;                              case "time_of_day":                                  row.DataType = S7DataRowType.TIME_OF_DAY;                                  break;                              case "time":                                  row.DataType = S7DataRowType.TIME;                                  break;                              case "sint":                                  row.DataType = S7DataRowType.SINT;                                  break;                              case "usint":                                  row.DataType = S7DataRowType.USINT;                                  break;                              case "ulint":                                  row.DataType = S7DataRowType.ULINT;                                  break;                              case "lint":                                  row.DataType = S7DataRowType.LINT;                                  break;                              case "lreal":                                  row.DataType = S7DataRowType.LREAL;                                  break;                              default:                                  row.DataType = S7DataRowType.UNKNOWN;                                  break;                          }                      }                  }                  else                  {                  }              }
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,parseChildren,The following statement contains a magic number: foreach (var xElement in parentElement.Elements())              {                  if (xElement.Name.LocalName == "Comment")                  {                      var text = xElement.Elements().FirstOrDefault(x => x.Attribute("Lang").Value == "de-DE");                      if (text == null)                          text = xElement.Elements().FirstOrDefault();                      if (text != null)                          parentRow.Comment = text.Value;                  }                  else if (xElement.Name.LocalName == "StartValue")                  {                      parentRow.StartValue = xElement.Value;                  }                  else if (xElement.Name.LocalName == "Sections")                  {                      var row = ParseTiaDbUdtSections(xElement' (TIADataBlock) parentRow.CurrentBlock' controllerFolder);                      parentRow.AddRange(row.Children);                  }                  else if (xElement.Name.LocalName == "Member")                  {                      var name = xElement.Attribute("Name").Value;                      var datatype = xElement.Attribute("Datatype").Value;                        var row = new TIADataRow(name' S7DataRowType.STRUCT' (TIABlock) parentRow.PlcBlock);                      row.Parent = parentRow;                        if (datatype.Contains("Array["))                      {                          List<int> arrayStart = new List<int>();                          List<int> arrayStop = new List<int>();                            int pos1 = datatype.IndexOf("[");                          int pos2 = datatype.IndexOf("]"' pos1);                          string[] arrays = datatype.Substring(pos1 + 1' pos2 - pos1 - 1).Split(''');                            foreach (string array in arrays)                          {                              string[] akar = array.Split(new string[] {".."}' StringSplitOptions.RemoveEmptyEntries);                              int start = 0;                              if (akar[0].StartsWith("\""))                              {                                  start = (int)controllerFolder.VarTabFolder.FindConstant(akar[0].Substring(1' akar[0].Length - 2)).Value;                              }                              else                              {                                  start = Convert.ToInt32(akar[0].Trim());                              }                                int stop = 0;                              if (akar[1].StartsWith("\""))                              {                                  stop = (int)controllerFolder.VarTabFolder.FindConstant(akar[1].Substring(1' akar[1].Length - 2)).Value;                              }                              else                              {                                  stop = Convert.ToInt32(akar[1].Trim());                              }                                arrayStart.Add(start);                              arrayStop.Add(stop);                          }                            row.ArrayStart = arrayStart;                          row.ArrayStop = arrayStop;                          row.IsArray = true;                          datatype = datatype.Substring(pos2 + 5);                      }                        parentRow.Add(row);                        parseChildren(row' xElement' controllerFolder);                        if (datatype.StartsWith("\""))                      {                          var udt =                              controllerFolder.PlcDatatypeFolder.GetBlock(datatype.Substring(1' datatype.Length - 2));                          if (udt != null)                          {                              var tiaUdt = udt as TIADataBlock;                              row.AddRange(((TIADataRow) tiaUdt.Structure).DeepCopy().Children);                                row.DataTypeBlock = udt;                          }                          row.DataType = S7DataRowType.UDT;                      }                      else if (datatype == "Struct")                      {                        }                      else if (datatype.StartsWith("String["))                      {                          row.DataType = S7DataRowType.STRING;                          row.StringSize = int.Parse(datatype.Substring(7' datatype.Length - 8));                      }                      else                      {                          switch (datatype.ToLower())                          {                              case "byte":                                  row.DataType = S7DataRowType.BYTE;                                  break;                              case "bool":                                  row.DataType = S7DataRowType.BOOL;                                  break;                              case "int":                                  row.DataType = S7DataRowType.INT;                                  break;                              case "uint":                                  row.DataType = S7DataRowType.UINT;                                  break;                              case "dint":                                  row.DataType = S7DataRowType.DINT;                                  break;                              case "udint":                                  row.DataType = S7DataRowType.UDINT;                                  break;                              case "word":                                  row.DataType = S7DataRowType.WORD;                                  break;                              case "dword":                                  row.DataType = S7DataRowType.DWORD;                                  break;                              case "char":                                  row.DataType = S7DataRowType.CHAR;                                  break;                              case "any":                                  row.DataType = S7DataRowType.ANY;                                  break;                              case "date":                                  row.DataType = S7DataRowType.DATE;                                  break;                              case "date_and_time":                                  row.DataType = S7DataRowType.DATE_AND_TIME;                                  break;                              case "real":                                  row.DataType = S7DataRowType.REAL;                                  break;                              case "s5time":                                  row.DataType = S7DataRowType.S5TIME;                                  break;                              case "time_of_day":                                  row.DataType = S7DataRowType.TIME_OF_DAY;                                  break;                              case "time":                                  row.DataType = S7DataRowType.TIME;                                  break;                              case "sint":                                  row.DataType = S7DataRowType.SINT;                                  break;                              case "usint":                                  row.DataType = S7DataRowType.USINT;                                  break;                              case "ulint":                                  row.DataType = S7DataRowType.ULINT;                                  break;                              case "lint":                                  row.DataType = S7DataRowType.LINT;                                  break;                              case "lreal":                                  row.DataType = S7DataRowType.LREAL;                                  break;                              default:                                  row.DataType = S7DataRowType.UNKNOWN;                                  break;                          }                      }                  }                  else                  {                  }              }
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,parseChildren,The following statement contains a magic number: foreach (var xElement in parentElement.Elements())              {                  if (xElement.Name.LocalName == "Comment")                  {                      var text = xElement.Elements().FirstOrDefault(x => x.Attribute("Lang").Value == "de-DE");                      if (text == null)                          text = xElement.Elements().FirstOrDefault();                      if (text != null)                          parentRow.Comment = text.Value;                  }                  else if (xElement.Name.LocalName == "StartValue")                  {                      parentRow.StartValue = xElement.Value;                  }                  else if (xElement.Name.LocalName == "Sections")                  {                      var row = ParseTiaDbUdtSections(xElement' (TIADataBlock) parentRow.CurrentBlock' controllerFolder);                      parentRow.AddRange(row.Children);                  }                  else if (xElement.Name.LocalName == "Member")                  {                      var name = xElement.Attribute("Name").Value;                      var datatype = xElement.Attribute("Datatype").Value;                        var row = new TIADataRow(name' S7DataRowType.STRUCT' (TIABlock) parentRow.PlcBlock);                      row.Parent = parentRow;                        if (datatype.Contains("Array["))                      {                          List<int> arrayStart = new List<int>();                          List<int> arrayStop = new List<int>();                            int pos1 = datatype.IndexOf("[");                          int pos2 = datatype.IndexOf("]"' pos1);                          string[] arrays = datatype.Substring(pos1 + 1' pos2 - pos1 - 1).Split(''');                            foreach (string array in arrays)                          {                              string[] akar = array.Split(new string[] {".."}' StringSplitOptions.RemoveEmptyEntries);                              int start = 0;                              if (akar[0].StartsWith("\""))                              {                                  start = (int)controllerFolder.VarTabFolder.FindConstant(akar[0].Substring(1' akar[0].Length - 2)).Value;                              }                              else                              {                                  start = Convert.ToInt32(akar[0].Trim());                              }                                int stop = 0;                              if (akar[1].StartsWith("\""))                              {                                  stop = (int)controllerFolder.VarTabFolder.FindConstant(akar[1].Substring(1' akar[1].Length - 2)).Value;                              }                              else                              {                                  stop = Convert.ToInt32(akar[1].Trim());                              }                                arrayStart.Add(start);                              arrayStop.Add(stop);                          }                            row.ArrayStart = arrayStart;                          row.ArrayStop = arrayStop;                          row.IsArray = true;                          datatype = datatype.Substring(pos2 + 5);                      }                        parentRow.Add(row);                        parseChildren(row' xElement' controllerFolder);                        if (datatype.StartsWith("\""))                      {                          var udt =                              controllerFolder.PlcDatatypeFolder.GetBlock(datatype.Substring(1' datatype.Length - 2));                          if (udt != null)                          {                              var tiaUdt = udt as TIADataBlock;                              row.AddRange(((TIADataRow) tiaUdt.Structure).DeepCopy().Children);                                row.DataTypeBlock = udt;                          }                          row.DataType = S7DataRowType.UDT;                      }                      else if (datatype == "Struct")                      {                        }                      else if (datatype.StartsWith("String["))                      {                          row.DataType = S7DataRowType.STRING;                          row.StringSize = int.Parse(datatype.Substring(7' datatype.Length - 8));                      }                      else                      {                          switch (datatype.ToLower())                          {                              case "byte":                                  row.DataType = S7DataRowType.BYTE;                                  break;                              case "bool":                                  row.DataType = S7DataRowType.BOOL;                                  break;                              case "int":                                  row.DataType = S7DataRowType.INT;                                  break;                              case "uint":                                  row.DataType = S7DataRowType.UINT;                                  break;                              case "dint":                                  row.DataType = S7DataRowType.DINT;                                  break;                              case "udint":                                  row.DataType = S7DataRowType.UDINT;                                  break;                              case "word":                                  row.DataType = S7DataRowType.WORD;                                  break;                              case "dword":                                  row.DataType = S7DataRowType.DWORD;                                  break;                              case "char":                                  row.DataType = S7DataRowType.CHAR;                                  break;                              case "any":                                  row.DataType = S7DataRowType.ANY;                                  break;                              case "date":                                  row.DataType = S7DataRowType.DATE;                                  break;                              case "date_and_time":                                  row.DataType = S7DataRowType.DATE_AND_TIME;                                  break;                              case "real":                                  row.DataType = S7DataRowType.REAL;                                  break;                              case "s5time":                                  row.DataType = S7DataRowType.S5TIME;                                  break;                              case "time_of_day":                                  row.DataType = S7DataRowType.TIME_OF_DAY;                                  break;                              case "time":                                  row.DataType = S7DataRowType.TIME;                                  break;                              case "sint":                                  row.DataType = S7DataRowType.SINT;                                  break;                              case "usint":                                  row.DataType = S7DataRowType.USINT;                                  break;                              case "ulint":                                  row.DataType = S7DataRowType.ULINT;                                  break;                              case "lint":                                  row.DataType = S7DataRowType.LINT;                                  break;                              case "lreal":                                  row.DataType = S7DataRowType.LREAL;                                  break;                              default:                                  row.DataType = S7DataRowType.UNKNOWN;                                  break;                          }                      }                  }                  else                  {                  }              }
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,parseChildren,The following statement contains a magic number: foreach (var xElement in parentElement.Elements())              {                  if (xElement.Name.LocalName == "Comment")                  {                      var text = xElement.Elements().FirstOrDefault(x => x.Attribute("Lang").Value == "de-DE");                      if (text == null)                          text = xElement.Elements().FirstOrDefault();                      if (text != null)                          parentRow.Comment = text.Value;                  }                  else if (xElement.Name.LocalName == "StartValue")                  {                      parentRow.StartValue = xElement.Value;                  }                  else if (xElement.Name.LocalName == "Sections")                  {                      var row = ParseTiaDbUdtSections(xElement' (TIADataBlock) parentRow.CurrentBlock' controllerFolder);                      parentRow.AddRange(row.Children);                  }                  else if (xElement.Name.LocalName == "Member")                  {                      var name = xElement.Attribute("Name").Value;                      var datatype = xElement.Attribute("Datatype").Value;                        var row = new TIADataRow(name' S7DataRowType.STRUCT' (TIABlock) parentRow.PlcBlock);                      row.Parent = parentRow;                        if (datatype.Contains("Array["))                      {                          List<int> arrayStart = new List<int>();                          List<int> arrayStop = new List<int>();                            int pos1 = datatype.IndexOf("[");                          int pos2 = datatype.IndexOf("]"' pos1);                          string[] arrays = datatype.Substring(pos1 + 1' pos2 - pos1 - 1).Split(''');                            foreach (string array in arrays)                          {                              string[] akar = array.Split(new string[] {".."}' StringSplitOptions.RemoveEmptyEntries);                              int start = 0;                              if (akar[0].StartsWith("\""))                              {                                  start = (int)controllerFolder.VarTabFolder.FindConstant(akar[0].Substring(1' akar[0].Length - 2)).Value;                              }                              else                              {                                  start = Convert.ToInt32(akar[0].Trim());                              }                                int stop = 0;                              if (akar[1].StartsWith("\""))                              {                                  stop = (int)controllerFolder.VarTabFolder.FindConstant(akar[1].Substring(1' akar[1].Length - 2)).Value;                              }                              else                              {                                  stop = Convert.ToInt32(akar[1].Trim());                              }                                arrayStart.Add(start);                              arrayStop.Add(stop);                          }                            row.ArrayStart = arrayStart;                          row.ArrayStop = arrayStop;                          row.IsArray = true;                          datatype = datatype.Substring(pos2 + 5);                      }                        parentRow.Add(row);                        parseChildren(row' xElement' controllerFolder);                        if (datatype.StartsWith("\""))                      {                          var udt =                              controllerFolder.PlcDatatypeFolder.GetBlock(datatype.Substring(1' datatype.Length - 2));                          if (udt != null)                          {                              var tiaUdt = udt as TIADataBlock;                              row.AddRange(((TIADataRow) tiaUdt.Structure).DeepCopy().Children);                                row.DataTypeBlock = udt;                          }                          row.DataType = S7DataRowType.UDT;                      }                      else if (datatype == "Struct")                      {                        }                      else if (datatype.StartsWith("String["))                      {                          row.DataType = S7DataRowType.STRING;                          row.StringSize = int.Parse(datatype.Substring(7' datatype.Length - 8));                      }                      else                      {                          switch (datatype.ToLower())                          {                              case "byte":                                  row.DataType = S7DataRowType.BYTE;                                  break;                              case "bool":                                  row.DataType = S7DataRowType.BOOL;                                  break;                              case "int":                                  row.DataType = S7DataRowType.INT;                                  break;                              case "uint":                                  row.DataType = S7DataRowType.UINT;                                  break;                              case "dint":                                  row.DataType = S7DataRowType.DINT;                                  break;                              case "udint":                                  row.DataType = S7DataRowType.UDINT;                                  break;                              case "word":                                  row.DataType = S7DataRowType.WORD;                                  break;                              case "dword":                                  row.DataType = S7DataRowType.DWORD;                                  break;                              case "char":                                  row.DataType = S7DataRowType.CHAR;                                  break;                              case "any":                                  row.DataType = S7DataRowType.ANY;                                  break;                              case "date":                                  row.DataType = S7DataRowType.DATE;                                  break;                              case "date_and_time":                                  row.DataType = S7DataRowType.DATE_AND_TIME;                                  break;                              case "real":                                  row.DataType = S7DataRowType.REAL;                                  break;                              case "s5time":                                  row.DataType = S7DataRowType.S5TIME;                                  break;                              case "time_of_day":                                  row.DataType = S7DataRowType.TIME_OF_DAY;                                  break;                              case "time":                                  row.DataType = S7DataRowType.TIME;                                  break;                              case "sint":                                  row.DataType = S7DataRowType.SINT;                                  break;                              case "usint":                                  row.DataType = S7DataRowType.USINT;                                  break;                              case "ulint":                                  row.DataType = S7DataRowType.ULINT;                                  break;                              case "lint":                                  row.DataType = S7DataRowType.LINT;                                  break;                              case "lreal":                                  row.DataType = S7DataRowType.LREAL;                                  break;                              default:                                  row.DataType = S7DataRowType.UNKNOWN;                                  break;                          }                      }                  }                  else                  {                  }              }
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,parseChildren,The following statement contains a magic number: foreach (var xElement in parentElement.Elements())              {                  if (xElement.Name.LocalName == "Comment")                  {                      var text = xElement.Elements().FirstOrDefault(x => x.Attribute("Lang").Value == "de-DE");                      if (text == null)                          text = xElement.Elements().FirstOrDefault();                      if (text != null)                          parentRow.Comment = text.Value;                  }                  else if (xElement.Name.LocalName == "StartValue")                  {                      parentRow.StartValue = xElement.Value;                  }                  else if (xElement.Name.LocalName == "Sections")                  {                      var row = ParseTiaDbUdtSections(xElement' (TIADataBlock) parentRow.CurrentBlock' controllerFolder);                      parentRow.AddRange(row.Children);                  }                  else if (xElement.Name.LocalName == "Member")                  {                      var name = xElement.Attribute("Name").Value;                      var datatype = xElement.Attribute("Datatype").Value;                        var row = new TIADataRow(name' S7DataRowType.STRUCT' (TIABlock) parentRow.PlcBlock);                      row.Parent = parentRow;                        if (datatype.Contains("Array["))                      {                          List<int> arrayStart = new List<int>();                          List<int> arrayStop = new List<int>();                            int pos1 = datatype.IndexOf("[");                          int pos2 = datatype.IndexOf("]"' pos1);                          string[] arrays = datatype.Substring(pos1 + 1' pos2 - pos1 - 1).Split(''');                            foreach (string array in arrays)                          {                              string[] akar = array.Split(new string[] {".."}' StringSplitOptions.RemoveEmptyEntries);                              int start = 0;                              if (akar[0].StartsWith("\""))                              {                                  start = (int)controllerFolder.VarTabFolder.FindConstant(akar[0].Substring(1' akar[0].Length - 2)).Value;                              }                              else                              {                                  start = Convert.ToInt32(akar[0].Trim());                              }                                int stop = 0;                              if (akar[1].StartsWith("\""))                              {                                  stop = (int)controllerFolder.VarTabFolder.FindConstant(akar[1].Substring(1' akar[1].Length - 2)).Value;                              }                              else                              {                                  stop = Convert.ToInt32(akar[1].Trim());                              }                                arrayStart.Add(start);                              arrayStop.Add(stop);                          }                            row.ArrayStart = arrayStart;                          row.ArrayStop = arrayStop;                          row.IsArray = true;                          datatype = datatype.Substring(pos2 + 5);                      }                        parentRow.Add(row);                        parseChildren(row' xElement' controllerFolder);                        if (datatype.StartsWith("\""))                      {                          var udt =                              controllerFolder.PlcDatatypeFolder.GetBlock(datatype.Substring(1' datatype.Length - 2));                          if (udt != null)                          {                              var tiaUdt = udt as TIADataBlock;                              row.AddRange(((TIADataRow) tiaUdt.Structure).DeepCopy().Children);                                row.DataTypeBlock = udt;                          }                          row.DataType = S7DataRowType.UDT;                      }                      else if (datatype == "Struct")                      {                        }                      else if (datatype.StartsWith("String["))                      {                          row.DataType = S7DataRowType.STRING;                          row.StringSize = int.Parse(datatype.Substring(7' datatype.Length - 8));                      }                      else                      {                          switch (datatype.ToLower())                          {                              case "byte":                                  row.DataType = S7DataRowType.BYTE;                                  break;                              case "bool":                                  row.DataType = S7DataRowType.BOOL;                                  break;                              case "int":                                  row.DataType = S7DataRowType.INT;                                  break;                              case "uint":                                  row.DataType = S7DataRowType.UINT;                                  break;                              case "dint":                                  row.DataType = S7DataRowType.DINT;                                  break;                              case "udint":                                  row.DataType = S7DataRowType.UDINT;                                  break;                              case "word":                                  row.DataType = S7DataRowType.WORD;                                  break;                              case "dword":                                  row.DataType = S7DataRowType.DWORD;                                  break;                              case "char":                                  row.DataType = S7DataRowType.CHAR;                                  break;                              case "any":                                  row.DataType = S7DataRowType.ANY;                                  break;                              case "date":                                  row.DataType = S7DataRowType.DATE;                                  break;                              case "date_and_time":                                  row.DataType = S7DataRowType.DATE_AND_TIME;                                  break;                              case "real":                                  row.DataType = S7DataRowType.REAL;                                  break;                              case "s5time":                                  row.DataType = S7DataRowType.S5TIME;                                  break;                              case "time_of_day":                                  row.DataType = S7DataRowType.TIME_OF_DAY;                                  break;                              case "time":                                  row.DataType = S7DataRowType.TIME;                                  break;                              case "sint":                                  row.DataType = S7DataRowType.SINT;                                  break;                              case "usint":                                  row.DataType = S7DataRowType.USINT;                                  break;                              case "ulint":                                  row.DataType = S7DataRowType.ULINT;                                  break;                              case "lint":                                  row.DataType = S7DataRowType.LINT;                                  break;                              case "lreal":                                  row.DataType = S7DataRowType.LREAL;                                  break;                              default:                                  row.DataType = S7DataRowType.UNKNOWN;                                  break;                          }                      }                  }                  else                  {                  }              }
Magic Number,DotNetSiemensPLCToolBoxLibrary.Projectfiles,Step7ProjectV13,C:\repos\jogibear9988_DotNetSiemensPLCToolBoxLibrary\DotNetSiemensPLCToolBoxLibrary.TIAV13\Step7ProjectV13.cs,parseChildren,The following statement contains a magic number: foreach (var xElement in parentElement.Elements())              {                  if (xElement.Name.LocalName == "Comment")                  {                      var text = xElement.Elements().FirstOrDefault(x => x.Attribute("Lang").Value == "de-DE");                      if (text == null)                          text = xElement.Elements().FirstOrDefault();                      if (text != null)                          parentRow.Comment = text.Value;                  }                  else if (xElement.Name.LocalName == "StartValue")                  {                      parentRow.StartValue = xElement.Value;                  }                  else if (xElement.Name.LocalName == "Sections")                  {                      var row = ParseTiaDbUdtSections(xElement' (TIADataBlock) parentRow.CurrentBlock' controllerFolder);                      parentRow.AddRange(row.Children);                  }                  else if (xElement.Name.LocalName == "Member")                  {                      var name = xElement.Attribute("Name").Value;                      var datatype = xElement.Attribute("Datatype").Value;                        var row = new TIADataRow(name' S7DataRowType.STRUCT' (TIABlock) parentRow.PlcBlock);                      row.Parent = parentRow;                        if (datatype.Contains("Array["))                      {                          List<int> arrayStart = new List<int>();                          List<int> arrayStop = new List<int>();                            int pos1 = datatype.IndexOf("[");                          int pos2 = datatype.IndexOf("]"' pos1);                          string[] arrays = datatype.Substring(pos1 + 1' pos2 - pos1 - 1).Split(''');                            foreach (string array in arrays)                          {                              string[] akar = array.Split(new string[] {".."}' StringSplitOptions.RemoveEmptyEntries);                              int start = 0;                              if (akar[0].StartsWith("\""))                              {                                  start = (int)controllerFolder.VarTabFolder.FindConstant(akar[0].Substring(1' akar[0].Length - 2)).Value;                              }                              else                              {                                  start = Convert.ToInt32(akar[0].Trim());                              }                                int stop = 0;                              if (akar[1].StartsWith("\""))                              {                                  stop = (int)controllerFolder.VarTabFolder.FindConstant(akar[1].Substring(1' akar[1].Length - 2)).Value;                              }                              else                              {                                  stop = Convert.ToInt32(akar[1].Trim());                              }                                arrayStart.Add(start);                              arrayStop.Add(stop);                          }                            row.ArrayStart = arrayStart;                          row.ArrayStop = arrayStop;                          row.IsArray = true;                          datatype = datatype.Substring(pos2 + 5);                      }                        parentRow.Add(row);                        parseChildren(row' xElement' controllerFolder);                        if (datatype.StartsWith("\""))                      {                          var udt =                              controllerFolder.PlcDatatypeFolder.GetBlock(datatype.Substring(1' datatype.Length - 2));                          if (udt != null)                          {                              var tiaUdt = udt as TIADataBlock;                              row.AddRange(((TIADataRow) tiaUdt.Structure).DeepCopy().Children);                                row.DataTypeBlock = udt;                          }                          row.DataType = S7DataRowType.UDT;                      }                      else if (datatype == "Struct")                      {                        }                      else if (datatype.StartsWith("String["))                      {                          row.DataType = S7DataRowType.STRING;                          row.StringSize = int.Parse(datatype.Substring(7' datatype.Length - 8));                      }                      else                      {                          switch (datatype.ToLower())                          {                              case "byte":                                  row.DataType = S7DataRowType.BYTE;                                  break;                              case "bool":                                  row.DataType = S7DataRowType.BOOL;                                  break;                              case "int":                                  row.DataType = S7DataRowType.INT;                                  break;                              case "uint":                                  row.DataType = S7DataRowType.UINT;                                  break;                              case "dint":                                  row.DataType = S7DataRowType.DINT;                                  break;                              case "udint":                                  row.DataType = S7DataRowType.UDINT;                                  break;                              case "word":                                  row.DataType = S7DataRowType.WORD;                                  break;                              case "dword":                                  row.DataType = S7DataRowType.DWORD;                                  break;                              case "char":                                  row.DataType = S7DataRowType.CHAR;                                  break;                              case "any":                                  row.DataType = S7DataRowType.ANY;                                  break;                              case "date":                                  row.DataType = S7DataRowType.DATE;                                  break;                              case "date_and_time":                                  row.DataType = S7DataRowType.DATE_AND_TIME;                                  break;                              case "real":                                  row.DataType = S7DataRowType.REAL;                                  break;                              case "s5time":                                  row.DataType = S7DataRowType.S5TIME;                                  break;                              case "time_of_day":                                  row.DataType = S7DataRowType.TIME_OF_DAY;                                  break;                              case "time":                                  row.DataType = S7DataRowType.TIME;                                  break;                              case "sint":                                  row.DataType = S7DataRowType.SINT;                                  break;                              case "usint":                                  row.DataType = S7DataRowType.USINT;                                  break;                              case "ulint":                                  row.DataType = S7DataRowType.ULINT;                                  break;                              case "lint":                                  row.DataType = S7DataRowType.LINT;                                  break;                              case "lreal":                                  row.DataType = S7DataRowType.LREAL;                                  break;                              default:                                  row.DataType = S7DataRowType.UNKNOWN;                                  break;                          }                      }                  }                  else                  {                  }              }
