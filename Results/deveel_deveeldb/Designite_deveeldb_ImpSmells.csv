Implementation smell,Namespace,Class,File,Method,Description
Long Method,Deveel.Data.Client,DeveelDbConnectionStringBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbConnectionStringBuilder.cs,DeveelDbConnectionStringBuilder,The method has 104 lines of code.
Long Method,Deveel.Data.Client,DeveelDbConnectionStringBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbConnectionStringBuilder.cs,SetValue,The method has 195 lines of code.
Long Method,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The method has 65 lines of code.
Long Method,Deveel.Data.Client,LocalRowCache,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalRowCache.cs,GetResultPart,The method has 120 lines of code.
Long Method,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The method has 71 lines of code.
Long Method,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PlanQuery,The method has 124 lines of code.
Long Method,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PlanForOrderBy,The method has 70 lines of code.
Long Method,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,PlanExpressionList,The method has 75 lines of code.
Long Method,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,PlanExpression,The method has 94 lines of code.
Long Method,Deveel.Data.Sql.Query,QueryExpressionFrom,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryExpressionFrom.cs,Create,The method has 69 lines of code.
Long Method,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The method has 223 lines of code.
Long Method,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitStatement,The method has 122 lines of code.
Long Method,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,ExecuteStatement,The method has 123 lines of code.
Long Method,Deveel.Data.Sql.Statements,InsertStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\InsertStatement.cs,PrepareStatement,The method has 71 lines of code.
Long Method,Deveel.Data.Sql.Tables,RawTableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\RawTableInfo.cs,Union,The method has 81 lines of code.
Long Method,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,Search,The method has 98 lines of code.
Long Method,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SimpleSelect,The method has 68 lines of code.
Long Method,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectAnyAllNonCorrelated,The method has 110 lines of code.
Long Method,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,AlterTable,The method has 68 lines of code.
Long Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetupInitialStore,The method has 69 lines of code.
Long Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReadStoreHeaders,The method has 60 lines of code.
Long Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The method has 84 lines of code.
Long Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The method has 94 lines of code.
Long Method,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,CastTo,The method has 62 lines of code.
Long Method,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The method has 76 lines of code.
Long Method,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,CastTo,The method has 105 lines of code.
Long Method,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,AddToRecordList,The method has 71 lines of code.
Long Method,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The method has 91 lines of code.
Long Method,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,The method has 85 lines of code.
Long Method,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,AddToBinChain,The method has 63 lines of code.
Long Method,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The method has 122 lines of code.
Long Method,Deveel.Data.Mapping,Mapper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Mapping\Mapper.cs,GetMemberMapInfo,The method has 61 lines of code.
Long Method,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,RollForwardRecover,The method has 62 lines of code.
Long Method,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The method has 63 lines of code.
Long Method,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,Read,The method has 77 lines of code.
Long Method,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,Write,The method has 64 lines of code.
Long Method,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,TransactionTableContainer,The method has 71 lines of code.
Long Method,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,AssertConstraints,The method has 109 lines of code.
Long Method,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,The method has 85 lines of code.
Long Method,Deveel.Data.Transactions,TransactionWork,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionWork.cs,CheckConflicts,The method has 75 lines of code.
Long Method,Deveel.Data.Transactions,TransactionWork,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionWork.cs,Commit,The method has 131 lines of code.
Long Method,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The method has 127 lines of code.
Long Method,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The method has 87 lines of code.
Long Method,Deveel.Data.Index,CollatedSearchIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\CollatedSearchIndex.cs,PositionOfRangePoint,The method has 69 lines of code.
Long Method,Deveel.Data.Text,PatternSearch,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Text\PatternSearch.cs,PatternMatch,The method has 99 lines of code.
Complex Method,Deveel.Data.Build,FeatureBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Build\FeatureBuilder.cs,FindMemberValue,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Build,SystemBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Build\SystemBuilder.cs,Use,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Client,DatabaseExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DatabaseExtensions.cs,BuildConnectionString,Cyclomatic complexity of the method is 34
Complex Method,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,PrepareParameter,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,CreateQuery,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,Dispose,Cyclomatic complexity of the method is 14
Complex Method,Deveel.Data.Client,DeveelDbConnectionStringBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbConnectionStringBuilder.cs,SetValue,Cyclomatic complexity of the method is 93
Complex Method,Deveel.Data.Client,DeveelDbParameter,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbParameter.cs,ResetDbType,Cyclomatic complexity of the method is 54
Complex Method,Deveel.Data.Client,DeveelDbParameter,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbParameter.cs,ResetSqlType,Cyclomatic complexity of the method is 54
Complex Method,Deveel.Data.Client,DeveelDbParameter,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbParameter.cs,GetSqlType,Cyclomatic complexity of the method is 28
Complex Method,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,Download,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Protocol,QueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\QueryResult.cs,FormColumns,Cyclomatic complexity of the method is 14
Complex Method,Deveel.Data.Protocol,ServerConnector,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\ServerConnector.cs,CoreExecuteQuery,Cyclomatic complexity of the method is 14
Complex Method,Deveel.Data.Protocol,ServerConnector,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\ServerConnector.cs,GetResultPart,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Diagnostics,LoggerBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\LoggerBase.cs,CanRoute,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Routines,ExternalProcedure,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalProcedure.cs,ConvertArguments,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Routines,ExternalRef,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalRef.cs,ResolveType,Cyclomatic complexity of the method is 36
Complex Method,Deveel.Data.Routines,ExternalRef,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalRef.cs,TryParse,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Routines,ExternalRef,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalRef.cs,MakeRef,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Routines,Routine,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\Routine.cs,PrepareBlock,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Routines,ExternalFunction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalFunction.cs,ConvertArguments,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,Cyclomatic complexity of the method is 15
Complex Method,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Routines,InvokeContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\InvokeContext.cs,SetOutput,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Routines,SystemFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctions.cs,AddDate,Cyclomatic complexity of the method is 24
Complex Method,Deveel.Data.Routines,SystemFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctions.cs,Extract,Cyclomatic complexity of the method is 24
Complex Method,Deveel.Data.Routines,SystemFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctions.cs,FRuleConvert,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Security,SecurityActionRegistrar,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SecurityActionRegistrar.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Security,SecurityAssertionRegistrar,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SecurityAssertionRegistrar.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AddUserToRole,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Compile,CreateTableBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\CreateTableBuilder.cs,Build,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Compile,DataTypeVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\DataTypeVisitor.cs,VisitNumeric_type,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Compile,DataTypeVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\DataTypeVisitor.cs,VisitString_type,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Sql.Compile,PlSqlCompiler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\PlSqlCompiler.cs,Compile,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Compile,SelectBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SelectBuilder.cs,Build,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Compile,SequenceStatements,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SequenceStatements.cs,Create,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Sql.Compile,SqlExpressionVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlExpressionVisitor.cs,VisitRelationalExpression,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Compile,SqlExpressionVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlExpressionVisitor.cs,VisitEqualityExpression,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitCreateTriggerStatement,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitCreateTypeStatement,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitLoopStatement,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitFetchStatement,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitLockTableStatement,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitInsertStatement,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitCreateFunctionStatement,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitCreateProcedureStatement,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Compile,Subquery,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\Subquery.cs,Form,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Compile,Subquery,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\Subquery.cs,Form,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Sql.Compile,TableColumn,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\TableColumn.cs,Form,Cyclomatic complexity of the method is 15
Complex Method,Deveel.Data.Sql.Compile,TableConstraint,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\TableConstraint.cs,GetForeignKeyAction,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql.Compile,TableConstraint,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\TableConstraint.cs,Form,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Sql.Expressions.Build,QueryExpressionBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions.Build\QueryExpressionBuilder.cs,Build,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PrepareJoins,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PlanQuery,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PlanForOrderBy,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Query,QuerySelectColumns,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QuerySelectColumns.cs,PrepareColumn,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,NaturallyJoinPlans,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,PlanExpressionList,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,EvaluateSubLogic,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,EvaluateSubQueries,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,PlanExpression,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql.Query,TablePlan,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\TablePlan.cs,MergeJoin,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Query,FromTableDirectSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableDirectSource.cs,ResolveColumn,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Query,QueryExpressionFrom,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryExpressionFrom.cs,Create,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Statements,ConditionStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\ConditionStatement.cs,ExecuteStatement,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Statements,CreateProcedureTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateProcedureTriggerStatement.cs,AppendTo,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Statements,CreateSequenceStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateSequenceStatement.cs,ExecuteStatement,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql.Statements,CreateTypeStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateTypeStatement.cs,ExecuteStatement,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Statements,PlSqlBlockStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\PlSqlBlockStatement.cs,AppendTo,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,ExecuteStatement,Cyclomatic complexity of the method is 26
Complex Method,Deveel.Data.Sql.Statements,InsertSelectStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\InsertSelectStatement.cs,PrepareStatement,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Statements,InsertStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\InsertStatement.cs,PrepareStatement,Cyclomatic complexity of the method is 17
Complex Method,Deveel.Data.Sql.Statements,InsertStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\InsertStatement.cs,AppendTo,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql.Statements,SelectIntoStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\SelectIntoStatement.cs,PrepareStatement,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Statements,SelectStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\SelectStatement.cs,AppendTo,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Statements,CreateViewStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateViewStatement.cs,PrepareStatement,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Statements,AddConstraintAction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AddConstraintAction.cs,AppendTo,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Statements,CreateTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateTableStatement.cs,AppendTo,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Statements,SqlStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\SqlStatement.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Tables,FunctionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\FunctionTable.cs,MergeWith,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Tables,MutableTableExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\MutableTableExtensions.cs,Delete,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Tables,MutableTableExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\MutableTableExtensions.cs,Update,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Tables,RawTableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\RawTableInfo.cs,Union,Cyclomatic complexity of the method is 19
Complex Method,Deveel.Data.Sql.Tables,RawTableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\RawTableInfo.cs,RemoveDuplicates,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,Search,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SimpleSelect,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectAnyAllNonCorrelated,Cyclomatic complexity of the method is 16
Complex Method,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,DisposeAllIndices,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,AlterTable,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetupInitialStore,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReadStoreHeaders,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Types,BooleanType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BooleanType.cs,CastTo,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Types,DateType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\DateType.cs,CastTo,Cyclomatic complexity of the method is 17
Complex Method,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetPrecision,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,Wider,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,CastTo,Cyclomatic complexity of the method is 49
Complex Method,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,Cyclomatic complexity of the method is 14
Complex Method,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,CastTo,Cyclomatic complexity of the method is 61
Complex Method,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,LexicographicalOrder,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Types,TypeSerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeSerializer.cs,SerializeTo,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Types,TypeSerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeSerializer.cs,Deserialize,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Types,UserType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\UserType.cs,NewObject,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Sql,ExecutionContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\ExecutionContext.cs,Raise,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql,GroupOperatorHelper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\GroupOperatorHelper.cs,EvaluateAny,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql,GroupOperatorHelper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\GroupOperatorHelper.cs,EvaluateAll,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql,GroupOperatorHelper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\GroupOperatorHelper.cs,Evaluate,Cyclomatic complexity of the method is 20
Complex Method,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,Configure,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Store,ObjectStream,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStream.cs,Read,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,AddToBinChain,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Free,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,Cyclomatic complexity of the method is 14
Complex Method,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,FindAllocatedAreasNotIn,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data,Database,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\Database.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data,Database,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\Database.cs,Create,Cyclomatic complexity of the method is 14
Complex Method,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,ExecuteQuery,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,ExecuteStatements,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,ResolveFieldType,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,CreateUser,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data,TableContainerBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\TableContainerBase.cs,FindByName,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,Dispose,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,SetupSystem,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,CreateSystem,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Mapping,Mapper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Mapping\Mapper.cs,GetMemberMapInfo,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Sql.Cursors,NativeCursor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Cursors\NativeCursor.cs,Fetch,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Sql.Cursors,CursorState,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Cursors\CursorState.cs,FetchRowFrom,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,EvaluateBinary,Cyclomatic complexity of the method is 20
Complex Method,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,VisitAssign,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Sql.Expressions,PreparerVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\PreparerVisitor.cs,VisitQuery,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Expressions,ReturnTypeVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ReturnTypeVisitor.cs,VisitBinary,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Sql.Expressions,SqlExpressionVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\SqlExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 33
Complex Method,Deveel.Data.Sql.Expressions,SqlExpressionVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\SqlExpressionVisitor.cs,VisitQuery,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Expressions,SqlBinaryExpression,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\SqlBinaryExpression.cs,GetBinaryOperatorString,Cyclomatic complexity of the method is 20
Complex Method,Deveel.Data.Sql.Expressions,SqlQueryExpression,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\SqlQueryExpression.cs,AppendTo,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Sql.Expressions,FromClause,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\FromClause.cs,AppendTo,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Sql.Objects,SqlBoolean,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlBoolean.cs,CompareTo,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,Concat,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,DeserializeType,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,SerializeValue,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Store.Journaled,JournaledStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledStoreSystem.cs,Configure,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,RollForwardRecover,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,Cyclomatic complexity of the method is 14
Complex Method,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,Persist,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,EnsureRowIndexListCurrent,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,UpdateRow,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,ExecuteUpdateReferentialAction,Cyclomatic complexity of the method is 11
Complex Method,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,AssertConstraints,Cyclomatic complexity of the method is 22
Complex Method,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,ExecuteDeleteReferentialAction,Cyclomatic complexity of the method is 10
Complex Method,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,IsUniqueColumns,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,Cyclomatic complexity of the method is 22
Complex Method,Deveel.Data.Transactions,TransactionWork,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionWork.cs,CheckConflicts,Cyclomatic complexity of the method is 13
Complex Method,Deveel.Data.Util,ProductInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\ProductInfo.cs,GetProductInfo,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,Cyclomatic complexity of the method is 56
Complex Method,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,FormatForOutput,Cyclomatic complexity of the method is 26
Complex Method,Deveel.Data.Index,SnapshotIndexSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\SnapshotIndexSet.cs,Dispose,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindLastBlock,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindFirstBlock,Cyclomatic complexity of the method is 8
Complex Method,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindLastBlock,Cyclomatic complexity of the method is 9
Complex Method,Deveel.Data.Index,CollatedSearchIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\CollatedSearchIndex.cs,PositionOfRangePoint,Cyclomatic complexity of the method is 31
Complex Method,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,Cyclomatic complexity of the method is 12
Complex Method,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,ChangeRangeSizeToEncompass,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Text,PatternSearch,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Text\PatternSearch.cs,FullPatternMatch,Cyclomatic complexity of the method is 7
Complex Method,Deveel.Data.Text,PatternSearch,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Text\PatternSearch.cs,PatternMatch,Cyclomatic complexity of the method is 15
Long Parameter List,Deveel.Data.Caching,TableCacheExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Caching\TableCacheExtensions.cs,TryGetValue,The method has 6 parameters.
Long Parameter List,Deveel.Data.Caching,TableCacheExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Caching\TableCacheExtensions.cs,Set,The method has 6 parameters.
Long Parameter List,Deveel.Data.Caching,TableCacheExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Caching\TableCacheExtensions.cs,Remove,The method has 5 parameters.
Long Parameter List,Deveel.Data.Caching,TableCellCache,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Caching\TableCellCache.cs,Remove,The method has 4 parameters.
Long Parameter List,Deveel.Data.Client,ConnectionClient,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\ConnectionClient.cs,CreateDatabase,The method has 5 parameters.
Long Parameter List,Deveel.Data.Client,DatabaseExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DatabaseExtensions.cs,CreateDbConnection,The method has 4 parameters.
Long Parameter List,Deveel.Data.Client,DeveelDbCommandBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommandBuilder.cs,ApplyParameterInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetBytes,The method has 5 parameters.
Long Parameter List,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetChars,The method has 5 parameters.
Long Parameter List,Deveel.Data.Client,LocalRowCache,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalRowCache.cs,GetResultPart,The method has 5 parameters.
Long Parameter List,Deveel.Data.Protocol,ConnectResponse,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\ConnectResponse.cs,ConnectResponse,The method has 4 parameters.
Long Parameter List,Deveel.Data.Protocol,QueryResultColumn,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\QueryResultColumn.cs,QueryResultColumn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Protocol,ServerConnector,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\ServerConnector.cs,CoreExecuteQuery,The method has 4 parameters.
Long Parameter List,Deveel.Data.Protocol,TriggerEventNotification,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\TriggerEventNotification.cs,TriggerEventNotification,The method has 4 parameters.
Long Parameter List,Deveel.Data.Configuration,ConfigurationExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Configuration\ConfigurationExtensions.cs,Save,The method has 4 parameters.
Long Parameter List,Deveel.Data.Configuration,ConfigurationExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Configuration\ConfigurationExtensions.cs,Save,The method has 4 parameters.
Long Parameter List,Deveel.Data.Configuration,ConfigurationExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Configuration\ConfigurationExtensions.cs,Save,The method has 4 parameters.
Long Parameter List,Deveel.Data.Diagnostics,HasContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\HasContextExtensions.cs,OnError,The method has 4 parameters.
Long Parameter List,Deveel.Data.Diagnostics,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ContextExtensions.cs,OnError,The method has 4 parameters.
Long Parameter List,Deveel.Data.Diagnostics,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ContextExtensions.cs,OnError,The method has 4 parameters.
Long Parameter List,Deveel.Data.Diagnostics,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ContextExtensions.cs,OnError,The method has 4 parameters.
Long Parameter List,Deveel.Data.Diagnostics,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ContextExtensions.cs,OnError,The method has 5 parameters.
Long Parameter List,Deveel.Data.Diagnostics,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ContextExtensions.cs,OnWarning,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,ExternalFunctionInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalFunctionInfo.cs,ExternalFunctionInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,ExternalRef,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalRef.cs,ExternalRef,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,PlSqlFunctionInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\PlSqlFunctionInfo.cs,PlSqlFunctionInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineEvent,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineEvent.cs,RoutineEvent,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineEvent,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineEvent.cs,RoutineEvent,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineEvent,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineEvent.cs,RoutineEvent,The method has 5 parameters.
Long Parameter List,Deveel.Data.Routines,SystemFunction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunction.cs,SystemFunction,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,SystemFunctionInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionInfo.cs,SystemFunctionInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,FunctionProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\FunctionProvider.cs,Register,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineExtensions.cs,Execute,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineExtensions.cs,Execute,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineExtensions.cs,Execute,The method has 5 parameters.
Long Parameter List,Deveel.Data.Routines,InvokeContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\InvokeContext.cs,InvokeContext,The method has 5 parameters.
Long Parameter List,Deveel.Data.Routines,FunctionExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\FunctionExtensions.cs,ReturnType,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,FunctionInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\FunctionInfo.cs,FunctionInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineParameter,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineParameter.cs,RoutineParameter,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineResolverExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineResolverExtensions.cs,ResolveFunction,The method has 4 parameters.
Long Parameter List,Deveel.Data.Routines,RoutineResolverExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineResolverExtensions.cs,ResolveFunction,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\QueryExtensions.cs,CreateAdminUser,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The method has 8 parameters.
Long Parameter List,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrants,The method has 7 parameters.
Long Parameter List,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateUserGrants,The method has 6 parameters.
Long Parameter List,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,QueryPrivileges,The method has 7 parameters.
Long Parameter List,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,QueryUserPrivileges,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetPrivileges,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,MissingPrivilegesException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\MissingPrivilegesException.cs,MissingPrivilegesException,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2String,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2String,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2String,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2String,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,VerifyPbkdf2,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,VerifyPbkdf2,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,VerifyPbkdf2String,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,VerifyPbkdf2String,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,VerifyPbkdf2String,The method has 4 parameters.
Long Parameter List,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,VerifyPbkdf2String,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,Grant,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\Grant.cs,Grant,The method has 5 parameters.
Long Parameter List,Deveel.Data.Security,Grant,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\Grant.cs,Grant,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Expressions.Build,QueryExpressionBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions.Build\QueryExpressionBuilderExtensions.cs,Function,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Expressions.Build,QueryExpressionBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions.Build\QueryExpressionBuilderExtensions.cs,Function,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,QueryInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryInfo.cs,QueryInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,GroupNode,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\GroupNode.cs,GroupNode,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,GroupNode,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\GroupNode.cs,GroupNode,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Query,JoinNode,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\JoinNode.cs,JoinNode,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Query,NonCorrelatedAnyAllNode,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\NonCorrelatedAnyAllNode.cs,NonCorrelatedAnyAllNode,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,MakeupFunctions,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PrepareJoins,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,ResolveGroupBy,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PlanQuery,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PlanForOrderBy,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,QuerySelectColumns,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QuerySelectColumns.cs,PrepareColumn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,AddSingleColumnPlan,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Query,CompositeNode,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\CompositeNode.cs,CompositeNode,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,FromTableDirectSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableDirectSource.cs,FromTableDirectSource,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Query,FromTableDirectSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableDirectSource.cs,ResolveColumnCount,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,FromTableDirectSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableDirectSource.cs,ResolveColumn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,FromTableSubQuerySource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableSubQuerySource.cs,FromTableSubQuerySource,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Query,FromTableSubQuerySource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableSubQuerySource.cs,Matches,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Query,FromTableSubQuerySource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableSubQuerySource.cs,ResolveColumnCount,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,FromTableSubQuerySource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableSubQuerySource.cs,ResolveColumn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,IFromTableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\IFromTableSource.cs,ResolveColumnCount,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,IFromTableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\IFromTableSource.cs,ResolveColumn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Query,SimpleSelectNode,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\SimpleSelectNode.cs,SimpleSelectNode,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Sequences,SequenceInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceInfo.cs,SequenceInfo,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Sequences,SequenceInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceInfo.cs,SequenceInfo,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Sequences,SequenceInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceInfo.cs,SequenceInfo,The method has 7 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,CreateCallbackTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateCallbackTriggerStatement.cs,CreateCallbackTriggerStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,CreateExternalFunctionStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateExternalFunctionStatement.cs,CreateExternalFunctionStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,CreateFunctionStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateFunctionStatement.cs,CreateFunctionStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,CreateProcedureTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateProcedureTriggerStatement.cs,CreateProcedureTriggerStatement,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,CreateProcedureTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateProcedureTriggerStatement.cs,CreateProcedureTriggerStatement,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,CreateTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateTriggerStatement.cs,CreateTriggerStatement,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,FetchIntoStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\FetchIntoStatement.cs,FetchIntoStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,RevokePrivilegesStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\RevokePrivilegesStatement.cs,RevokePrivilegesStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,RevokePrivilegesStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\RevokePrivilegesStatement.cs,RevokePrivilegesStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,RevokePrivilegesStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\RevokePrivilegesStatement.cs,RevokePrivilegesStatement,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,GrantPrivilegesStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantPrivilegesStatement.cs,GrantPrivilegesStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,GrantPrivilegesStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantPrivilegesStatement.cs,GrantPrivilegesStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,GrantPrivilegesStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantPrivilegesStatement.cs,GrantPrivilegesStatement,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,DeclareCursorStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DeclareCursorStatement.cs,DeclareCursorStatement,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,CheckColumnConstraint,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,SqlTableConstraint,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\SqlTableConstraint.cs,ForeignKey,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Statements,CreateTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateTableStatement.cs,CreateColumnInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,CheckViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\CheckViolationException.cs,CheckViolationException,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,CheckViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\CheckViolationException.cs,FormatMessage,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,DropColumnViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\DropColumnViolationException.cs,DropColumnViolationException,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,DropColumnViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\DropColumnViolationException.cs,FormatMessage,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,ForeignKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ForeignKeyViolationException.cs,ForeignKeyViolationException,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,ForeignKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ForeignKeyViolationException.cs,FormatMessage,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,PrimaryKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\PrimaryKeyViolationException.cs,PrimaryKeyViolationException,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,PrimaryKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\PrimaryKeyViolationException.cs,FormatMessage,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,UniqueKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\UniqueKeyViolationException.cs,UniqueKeyViolationException,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,UniqueKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\UniqueKeyViolationException.cs,FormatMessage,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,CompositeTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\CompositeTable.cs,CompositeTable,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,ConstraintInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ConstraintInfo.cs,ConstraintInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,ConstraintInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ConstraintInfo.cs,Check,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,ConstraintInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ConstraintInfo.cs,ForeignKey,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,ConstraintInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ConstraintInfo.cs,ForeignKey,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,ConstraintInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ConstraintInfo.cs,ForeignKey,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,FunctionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\FunctionTable.cs,FunctionTable,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,MutableTableExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\MutableTableExtensions.cs,Update,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableInfo.cs,TableInfo,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableInternalExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableInternalExtensions.cs,ResolveRows,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableInternalExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableInternalExtensions.cs,GetIndex,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRowsEqual,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRows,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRows,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRowsBetween,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRows,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,Search,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SimpleSelect,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectFromPattern,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,AllRowsMatchColumnValue,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,AnyRowMatchesColumnValue,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectAnyAllNonCorrelated,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRowsIn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRowsIn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRowsNotIn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectRowsNotIn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,NotIn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,Composite,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,Join,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SimpleJoin,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,Exists,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,UserContextTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\UserContextTable.cs,OnTableEvent,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,TableSource,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,CallbackTriggerInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\CallbackTriggerInfo.cs,CallbackTriggerInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,PlSqlTriggerInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\PlSqlTriggerInfo.cs,PlSqlTriggerInfo,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,ProcedureTriggerInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\ProcedureTriggerInfo.cs,ProcedureTriggerInfo,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,ProcedureTriggerInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\ProcedureTriggerInfo.cs,ProcedureTriggerInfo,The method has 6 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,TriggerInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerInfo.cs,TriggerInfo,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,TriggerException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerException.cs,FormMessage,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,OldNewTableState,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\OldNewTableState.cs,OldNewTableState,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,TableEvent,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TableEvent.cs,TableEvent,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Triggers,TriggerEvent,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerEvent.cs,TriggerEvent,The method has 7 parameters.
Long Parameter List,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,String,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Types,SqlType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SqlType.cs,Resolve,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,StringType,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Types,TypeResolver,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeResolver.cs,Resolve,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Variables,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Variables\ContextExtensions.cs,DeclareVariable,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Variables,VariableScopeExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Variables\VariableScopeExtensions.cs,DefineVariable,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql,GroupOperatorHelper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\GroupOperatorHelper.cs,EvaluateAny,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql,GroupOperatorHelper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\GroupOperatorHelper.cs,EvaluateAll,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql,GroupOperatorHelper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\GroupOperatorHelper.cs,Evaluate,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql,IndexInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\IndexInfo.cs,IndexInfo,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql,IndexInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\IndexInfo.cs,IndexInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,FileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FileStoreData.cs,Read,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,FileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FileStoreData.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,IStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\IStoreData.cs,Read,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,IStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\IStoreData.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,SingleFileStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStore.cs,Read,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,SingleFileStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStore.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The method has 5 parameters.
Long Parameter List,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,The method has 5 parameters.
Long Parameter List,Deveel.Data.Store,ScatteringFileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ScatteringFileStoreData.cs,ScatteringFileStoreData,The method has 5 parameters.
Long Parameter List,Deveel.Data.Store,ScatteringFileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ScatteringFileStoreData.cs,Read,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,ScatteringFileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ScatteringFileStoreData.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Read,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\ContextExtensions.cs,RegisterService,The method has 4 parameters.
Long Parameter List,Deveel.Data,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\ContextExtensions.cs,RegisterInstance,The method has 4 parameters.
Long Parameter List,Deveel.Data,Database,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\Database.cs,New,The method has 4 parameters.
Long Parameter List,Deveel.Data,DatabaseSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\DatabaseSystem.cs,CreateDatabase,The method has 4 parameters.
Long Parameter List,Deveel.Data,ISystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\ISystem.cs,CreateDatabase,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateTable,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,AddColumn,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,AddCheck,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,AddPrimaryKey,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,AddForeignKey,The method has 7 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,AddForeignKey,The method has 8 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,AddUniqueKey,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,SetDefault,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateView,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateView,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateType,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,Grant,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,Grant,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,GrantRole,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,Revoke,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,Revoke,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateTrigger,The method has 6 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateCallbackTrigger,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateProcedureTrigger,The method has 6 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateProcedureTrigger,The method has 7 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateProcedureTrigger,The method has 7 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateSequence,The method has 7 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateSequence,The method has 8 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateFunction,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateFunction,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateFunction,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateFunction,The method has 6 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateOrReplaceFunction,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateOrReplaceFunction,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateExternFunction,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateExternFunction,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateExternFunction,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateExternFunction,The method has 6 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateOrReplaceExternFunction,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateOrReplaceExternFunction,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateProcedure,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateProcedure,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateProcedure,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateOrReplaceProcedure,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateExternProcedure,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateExternProcedure,The method has 4 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateExternProcedure,The method has 5 parameters.
Long Parameter List,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateOrReplaceExternProcedure,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,DeclareCursor,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,DeclareCursor,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,DeclareCursor,The method has 5 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,Fetch,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,FetchInto,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,FetchInto,The method has 5 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,DeclareVariable,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,DeclareVariable,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,DeclareVariable,The method has 5 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,DeclareVariable,The method has 6 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,DeclareConstantVariable,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,Insert,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,Insert,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,InsertSelect,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,Update,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,Delete,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,LockTable,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,Select,The method has 4 parameters.
Long Parameter List,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,If,The method has 4 parameters.
Long Parameter List,Deveel.Data,SessionExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SessionExtensions.cs,Lock,The method has 5 parameters.
Long Parameter List,Deveel.Data,DatabaseExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\DatabaseExtensions.cs,CreateSession,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddPrimaryKey,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddForeignKey,The method has 7 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddForeignKey,The method has 8 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddForeignKey,The method has 5 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddForeignKey,The method has 6 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddUniqueKey,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddCheck,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,CreateCallbackTrigger,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,GetPrivileges,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,HasGrantOption,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,UserHasPrivilege,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,GrantOn,The method has 5 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,GrantOnSchema,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,GrantTo,The method has 5 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,GrantOnTable,The method has 4 parameters.
Long Parameter List,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,Revoke,The method has 5 parameters.
Long Parameter List,Deveel.Data,SystemExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemExtensions.cs,CreateDatabase,The method has 4 parameters.
Long Parameter List,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,Commit,The method has 5 parameters.
Long Parameter List,Deveel.Data.Mapping,ConstraintMapInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Mapping\ConstraintMapInfo.cs,ConstraintMapInfo,The method has 4 parameters.
Long Parameter List,Deveel.Data.Mapping,MemberMapInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Mapping\MemberMapInfo.cs,MemberMapInfo,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Cursors,CursorException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Cursors\CursorException.cs,CursorException,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Cursors,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Cursors\ContextExtensions.cs,DeclareCursor,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,EvaluateBinary,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,EvaluateBinary,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Expressions,SqlExpression,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\SqlExpression.cs,TryParse,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The method has 7 parameters.
Long Parameter List,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The method has 8 parameters.
Long Parameter List,Deveel.Data.Sql.Objects,SqlDayToSecond,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDayToSecond.cs,SqlDayToSecond,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Objects,SqlDayToSecond,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDayToSecond.cs,SqlDayToSecond,The method has 5 parameters.
Long Parameter List,Deveel.Data.Sql.Objects,SqlLongString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlLongString.cs,Create,The method has 4 parameters.
Long Parameter List,Deveel.Data.Sql.Objects,SqlLongString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlLongString.cs,Create,The method has 4 parameters.
Long Parameter List,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,SerializeGraph,The method has 4 parameters.
Long Parameter List,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,WriteValueHead,The method has 4 parameters.
Long Parameter List,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,SerializeValue,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,IJournaledResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\IJournaledResource.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,JournaledFileStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledFileStore.cs,Read,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,JournaledFileStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledFileStore.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,JournaledSystem,The method has 7 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,LogPageModification,The method has 5 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,JournalEntry,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalEntry.cs,JournalEntry,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,JournalFile,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The method has 5 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,LoggingBufferManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingBufferManager.cs,LoggingBufferManager,The method has 7 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,LoggingBufferManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingBufferManager.cs,ReadFrom,The method has 5 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,LoggingBufferManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingBufferManager.cs,WriteTo,The method has 5 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,LoggingResource,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,NonLoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\NonLoggingResource.cs,NonLoggingResource,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,NonLoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\NonLoggingResource.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,PersistPageChangeCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\PersistPageChangeCommand.cs,PersistPageChangeCommand,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,ResourceBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\ResourceBase.cs,ResourceBase,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,ResourceBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\ResourceBase.cs,Write,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,ResourceBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\ResourceBase.cs,PersistPageChange,The method has 4 parameters.
Long Parameter List,Deveel.Data.Store.Journaled,StreamFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\StreamFile.cs,Read,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,LockEvent,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\LockEvent.cs,LockEvent,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,TableCommitEvent,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TableCommitEvent.cs,TableCommitEvent,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,ExecuteUpdateReferentialAction,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,Locker,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\Locker.cs,AddToHandle,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The method has 5 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The method has 8 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The method has 6 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The method has 7 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The method has 9 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The method has 5 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The method has 5 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,IsUniqueColumns,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,RowCountOfReferenceTable,The method has 7 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckRemoveConstraintViolations,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,Transaction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\Transaction.cs,Transaction,The method has 6 parameters.
Long Parameter List,Deveel.Data.Transactions,Transaction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\Transaction.cs,Transaction,The method has 4 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionExtensions.cs,Lock,The method has 5 parameters.
Long Parameter List,Deveel.Data.Transactions,TransactionWork,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionWork.cs,TransactionWork,The method has 5 parameters.
Long Parameter List,Deveel.Data.Services,ScopeExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Services\ScopeExtensions.cs,Register,The method has 4 parameters.
Long Parameter List,Deveel.Data.Services,ScopeExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Services\ScopeExtensions.cs,RegisterInstance,The method has 4 parameters.
Long Parameter List,Deveel.Data.Services,ScopeExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Services\ScopeExtensions.cs,Replace,The method has 4 parameters.
Long Parameter List,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,IndexBlock,The method has 4 parameters.
Long Parameter List,Deveel.Data.Index,SystemContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\SystemContextExtensions.cs,CreateColumnIndex,The method has 4 parameters.
Long Parameter List,Deveel.Data.Index,SystemContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\SystemContextExtensions.cs,CreateColumnIndex,The method has 5 parameters.
Long Parameter List,Deveel.Data.Index,StoreIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\StoreIndex.cs,StoreIndex,The method has 4 parameters.
Long Parameter List,Deveel.Data.Index,StoreIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\StoreIndex.cs,NewMappedBlock,The method has 7 parameters.
Long Parameter List,Deveel.Data.Index,BlindSearchIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlindSearchIndex.cs,HighestSearch,The method has 4 parameters.
Long Parameter List,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,InsertIntoBlock,The method has 4 parameters.
Long Parameter List,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,The method has 4 parameters.
Long Parameter List,Deveel.Data.Index,IndexRange,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRange.cs,IndexRange,The method has 4 parameters.
Long Statement,Deveel.Data.Build,FeatureBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Build\FeatureBuilder.cs,FindMemberValue,The length of the statement  "					throw new InvalidOperationException (String.Format ("The property '{0}' of type '{1}' is not a string."' prop.Name' type)); " is 123.
Long Statement,Deveel.Data.Build,FeatureBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Build\FeatureBuilder.cs,FindMemberValue,The length of the statement  "					throw new InvalidOperationException (String.Format ("The field '{0}' of type '{1}' is not a string."' field.Name' type)); " is 121.
Long Statement,Deveel.Data.Build,SystemBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Build\SystemBuilder.cs,RegisterDefaultServices,The length of the statement  "	.UseDefaultQueryPlanner ().UseLocalFileSystem ().UseInMemoryStoreSystem ().UseSingleFileStoreSystem ().UseJournaledStoreSystem ().UseScatteringFileDataFactory (); " is 162.
Long Statement,Deveel.Data.Build,SystemBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Build\SystemBuilder.cs,Build,The length of the statement  "	this.UseTablesFeature ().UseRoutinesFeature ().UseSchemaFeature ().UseViewsFeature ().UseSequencesFeature ().UseTriggersFeature ().UseTypesFeature ().UseVariables (); " is 166.
Long Statement,Deveel.Data.Client,ConnectionClient,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\ConnectionClient.cs,IsInMemory,The length of the statement  "	return String.Equals (source' "In-Memory"' StringComparison.OrdinalIgnoreCase) || String.Equals (source' "Memory"' StringComparison.OrdinalIgnoreCase); " is 151.
Long Statement,Deveel.Data.Client,ConnectionClient,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\ConnectionClient.cs,IsJournaled,The length of the statement  "	return source.StartsWith ("path="' StringComparison.OrdinalIgnoreCase) || source.StartsWith ("directory="' StringComparison.OrdinalIgnoreCase) || source.Equals ("journaled"' StringComparison.OrdinalIgnoreCase); " is 210.
Long Statement,Deveel.Data.Client,ConnectionClient,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\ConnectionClient.cs,IsSingleFile,The length of the statement  "	return source.StartsWith ("file="' StringComparison.OrdinalIgnoreCase) || source.Equals ("file"' StringComparison.OrdinalIgnoreCase); " is 133.
Long Statement,Deveel.Data.Client,ConnectionClient,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\ConnectionClient.cs,CreateDatabase,The length of the statement  "			throw new DeveelDbException (String.Format ("The database '{0}' does not exist and it is not set to be created."' databaseName)); " is 129.
Long Statement,Deveel.Data.Client,ConnectionClient,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\ConnectionClient.cs,Authenticate,The length of the statement  "	var response = SendMessage (new AuthenticateRequest (Settings.Schema' Settings.UserName' Settings.Password)) as AuthenticateResponse; " is 133.
Long Statement,Deveel.Data.Client,DatabaseExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DatabaseExtensions.cs,CreateDbConnection,The length of the statement  "		throw new ArgumentException (String.Format ("The specified database name '{0}' differs from the original database name '{1}'."' dbName' database.Name)); " is 152.
Long Statement,Deveel.Data.Client,DatabaseExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DatabaseExtensions.cs,BuildConnectionString,The length of the statement  "			throw new ArgumentException (String.Format ("An error occurred while setting the key '{0}' into the connection string."' pair.Key)); " is 132.
Long Statement,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,ToStringWithParameters,The length of the statement  "		sb.AppendFormat ("ParameterName: {0}'  Direction: {1}' DbType: {2}' Value: {3}" + Environment.NewLine' p.ParameterName' p.Direction' p.DbType' p.Value); " is 152.
Long Statement,Deveel.Data.Client,DeveelDbConnection,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbConnection.cs,RequestResultPart,The length of the statement  "		throw new DeveelDbException (String.Format ("Could not retrieve part of the result '{0}' from the server."' resultId)' ex); " is 123.
Long Statement,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,IsLongType,The length of the statement  "	return sqlType.TypeCode == SqlTypeCode.LongVarChar || sqlType.TypeCode == SqlTypeCode.Clob || sqlType.TypeCode == SqlTypeCode.LongVarBinary || sqlType.TypeCode == SqlTypeCode.Blob; " is 180.
Long Statement,Deveel.Data.Protocol,QueryResultColumn,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\QueryResultColumn.cs,Equals,The length of the statement  "	return (Name.Equals (cd.Name) && Type == cd.Type && Size == cd.Size && IsNotNull == cd.IsNotNull && IsUnique == cd.IsUnique && UniqueGroup == cd.UniqueGroup); " is 158.
Long Statement,Deveel.Data.Configuration,ConfigurationExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Configuration\ConfigurationExtensions.cs,ConvertToBoolean,The length of the statement  "	if (String.Equals (value' "true"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "enabled"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "1") || String.Equals (value' "on"' StringComparison.OrdinalIgnoreCase)) " is 239.
Long Statement,Deveel.Data.Configuration,ConfigurationExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Configuration\ConfigurationExtensions.cs,ConvertToBoolean,The length of the statement  "	if (String.Equals (value' "false"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "disabled"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "0") || String.Equals (value' "off")) " is 206.
Long Statement,Deveel.Data.Routines,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemBuilderExtensions.cs,UseRoutinesFeature,The length of the statement  "	return builder.UseFeature (feature => feature.Named (SystemFeatureNames.Routines).WithAssemblyVersion ().OnSystemBuild (OnBuild).OnDatabaseCreate (OnDatabaseCreate).OnTableCompositeSetup (OnCompositeSetup)); " is 207.
Long Statement,Deveel.Data.Routines,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemBuilderExtensions.cs,GrantToPublic,The length of the statement  "	systemQuery.Access ().GrantOnTable (RoutineManager.RoutineParameterTableName' User.PublicName' PrivilegeSets.TableRead); " is 120.
Long Statement,Deveel.Data.Routines,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemBuilderExtensions.cs,Create,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (RoutineManager.RoutineTableName).WithColumn ("id"' PrimitiveTypes.Numeric ()).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("type"' PrimitiveTypes.String ()).WithColumn ("location"' PrimitiveTypes.String ()).WithColumn ("body"' PrimitiveTypes.Binary ()).WithColumn ("return_type"' PrimitiveTypes.String ()).WithColumn ("username"' PrimitiveTypes.String ())); " is 475.
Long Statement,Deveel.Data.Routines,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemBuilderExtensions.cs,Create,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (RoutineManager.RoutineParameterTableName).WithColumn ("routine_id"' PrimitiveTypes.Numeric ()).WithColumn ("arg_name"' PrimitiveTypes.String ()).WithColumn ("arg_type"' PrimitiveTypes.String ()).WithColumn ("arg_attrs"' PrimitiveTypes.Numeric ()).WithColumn ("in_out"' PrimitiveTypes.Integer ()).WithColumn ("offset"' PrimitiveTypes.Integer ())); " is 403.
Long Statement,Deveel.Data.Routines,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemBuilderExtensions.cs,AddForeignKeys,The length of the statement  "	systemQuery.Access ().AddForeignKey (RoutineManager.RoutineParameterTableName' fkCol' RoutineManager.RoutineTableName' refCol' onDelete' onUpdate' "ROUTINE_PARAMS_FK"); " is 168.
Long Statement,Deveel.Data.Routines,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemBuilderExtensions.cs,OnBuild,The length of the statement  "	builder.Use<IObjectManager> (options => options.With<RoutineManager> ().HavingKey (DbObjectType.Routine).InTransactionScope ()).Use<IRoutineResolver> (options => options.With<SystemFunctionsProvider> ().InDatabaseScope ()).Use<IRoutineResolver> (options => options.With<RoutineManager> ().InTransactionScope ()).Use<ITableContainer> (options => options.With<RoutinesTableContainer> ().InTransactionScope ()); " is 408.
Long Statement,Deveel.Data.Routines,Routine,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\Routine.cs,PrepareBlock,The length of the statement  "				throw new ArgumentException (String.Format ("Invoking routine '{0}' with the named argument '{1}' that is not a parameter of the routine."' Name' argument.Name)); " is 162.
Long Statement,Deveel.Data.Routines,Routine,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\Routine.cs,PrepareBlock,The length of the statement  "				throw new ArgumentException (String.Format ("Cannot pass any value for parameter '{0}' of routine '{1}'."' parameter.Name' Name)); " is 130.
Long Statement,Deveel.Data.Routines,Routine,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\Routine.cs,CollectOutput,The length of the statement  "			throw new InvalidOperationException (String.Format ("Cannot find the output parameter '{0}' in the routine context."' parameter.Name)); " is 135.
Long Statement,Deveel.Data.Routines,RoutinesTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutinesTableContainer.cs,GetTableType,The length of the statement  "	if (String.Equals (typeString' RoutineManager.FunctionType' StringComparison.OrdinalIgnoreCase) || String.Equals (typeString' RoutineManager.ExtrernalFunctionType' StringComparison.OrdinalIgnoreCase)) " is 200.
Long Statement,Deveel.Data.Routines,RoutinesTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutinesTableContainer.cs,GetTableType,The length of the statement  "	if (String.Equals (typeString' RoutineManager.ProcedureType' StringComparison.OrdinalIgnoreCase) || String.Equals (typeString' RoutineManager.ExternalProcedureType' StringComparison.OrdinalIgnoreCase)) " is 201.
Long Statement,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,FindEntry,The length of the statement  "			var t = table.SimpleSelect (context' namev' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (routineName.Name))); " is 127.
Long Statement,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,FindEntry,The length of the statement  "			t = t.ExhaustiveSelect (context' SqlExpression.Equal (SqlExpression.Reference (schemav)' SqlExpression.Constant (Field.String (routineName.ParentName)))); " is 154.
Long Statement,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,RoutineExists,The length of the statement  "			var t = table.SimpleSelect (context' namev' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (routineName.Name))); " is 127.
Long Statement,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,RoutineExists,The length of the statement  "			t = t.ExhaustiveSelect (context' SqlExpression.Equal (SqlExpression.Reference (schemav)' SqlExpression.Constant (Field.String (routineName.ParentName)))); " is 154.
Long Statement,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The length of the statement  "				throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location)); " is 135.
Long Statement,Deveel.Data.Routines,InvokeContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\InvokeContext.cs,SetOutput,The length of the statement  "		throw new InvalidOperationException (String.Format ("Routine {0} has none parameter named '{1}'."' Routine.RoutineInfo.RoutineName' argName)); " is 142.
Long Statement,Deveel.Data.Routines,InvokeContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\InvokeContext.cs,SetOutput,The length of the statement  "		throw new ArgumentException (String.Format ("The output parameter '{0}' is marked as NOT NULL but a NULL value was passed."' argName)); " is 135.
Long Statement,Deveel.Data.Routines,InvokeContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\InvokeContext.cs,SetOutput,The length of the statement  "			throw new ArgumentException (String.Format ("The passed value of type '{0}' is not assignable to the type '{1}' of parameter '{2}'."' value.Type' parameter.Type' parameter.Name)); " is 179.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,AggregateFunctions,The length of the statement  "	Register (configuration => configuration.Named ("aggor").WithParameter (p => p.Named ("args").Unbounded ().OfDynamicType ()).OfAggregateType ().WhenExecute (context => Binary (context' SystemFunctions.Or))); " is 207.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,AggregateFunctions,The length of the statement  "	Register (config => config.Named ("count").WithUnoundedParameter ("args"' Function.DynamicType).WhenExecute (Count.Execute).OfAggregateType ().ReturnsNumeric ()); " is 162.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,AggregateFunctions,The length of the statement  "	Register (config => config.Named ("sum").WithUnoundedParameter ("args"' Function.DynamicType).OfAggregateType ().WhenExecute (context => Simple (context' args => { " is 163.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,AggregateFunctions,The length of the statement  "	Register (config => config.Named ("max").WithUnoundedParameter ("args"' Function.DynamicType).OfAggregateType ().WhenExecute (context => Simple (context' args => { " is 163.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,AggregateFunctions,The length of the statement  "	Register (config => config.Named ("min").WithUnoundedParameter ("args"' Function.DynamicType).OfAggregateType ().WhenExecute (context => Simple (context' args => { " is 163.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,AggregateFunctions,The length of the statement  "	Register (config => config.Named ("avg").WithUnoundedParameter ("args"' Function.DynamicType).WhenExecute (context => Simple (context' args => { " is 144.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,AggregateFunctions,The length of the statement  "	})).OfAggregateType ().OnAfterAggregate ((context' result) => result.IsNull ? result : result.Divide (Field.Integer (context.GroupResolver.Count)))); " is 149.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,SecurityFunctions,The length of the statement  "	Register (config => config.Named ("user").WhenExecute (context => context.Result (SystemFunctions.User (context.Request))).ReturnsString ()); " is 141.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The length of the statement  "	Register (config => config.Named ("cast").WithDynamicParameter ("value").WithStringParameter ("destType").WhenExecute (Cast.Execute).ReturnsType (Cast.ReturnType)); " is 164.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The length of the statement  "	Register (config => config.Named ("tonumber").WithDynamicParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.ToNumber (args [0]))).ReturnsNumeric ()); " is 183.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The length of the statement  "	Register (config => config.Named ("tostring").WithDynamicParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.ToString (args [0]))).ReturnsString ()); " is 182.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The length of the statement  "	Register (config => config.Named ("tobinary").WithDynamicParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.ToBinary (args [0]))).ReturnsType (PrimitiveTypes.Binary ())); " is 204.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The length of the statement  "	Register (config => config.Named ("todate").WithStringParameter ("value").WhenExecute (context => Simple (context' objects => SystemFunctions.ToDate (objects [0]))).ReturnsType (PrimitiveTypes.Date ())); " is 203.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The length of the statement  "	Register (config => config.Named ("todatetime").WithStringParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.ToDateTime (args [0]))).ReturnsType (PrimitiveTypes.DateTime ())); " is 209.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The length of the statement  "	Register (config => config.Named ("totimestamp").WithParameter (p => p.Named ("value").OfStringType ()).WithParameter (p => p.Named ("ts").OfStringType ()).WhenExecute (context => { " is 181.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,SequenceFunctions,The length of the statement  "	Register (config => config.Named ("uniquekey").WithStringParameter ("table").WhenExecute (context => Simple (context' args => SystemFunctions.UniqueKey (context.Request' args [0]))).ReturnsNumeric ()); " is 201.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,SequenceFunctions,The length of the statement  "	Register (config => config.Named ("curval").WithStringParameter ("sequence").WhenExecute (context => Simple (context' args => SystemFunctions.CurrentValue (context.Request' args [0]))).ReturnsNumeric ()); " is 204.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,SequenceFunctions,The length of the statement  "	Register (config => config.Named ("nextval").WithParameter ("sequence"' PrimitiveTypes.String ()).WhenExecute (context => Simple (context' args => SystemFunctions.NextValue (context.Request' args [0]))).ReturnsNumeric ()); " is 222.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,SequenceFunctions,The length of the statement  "	Register (config => config.Named ("curkey").WithStringParameter ("table").WhenExecute (context => Simple (context' args => SystemFunctions.CurrentKey (context.Request' args [0]))).ReturnsNumeric ()); " is 199.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The length of the statement  "	Register (config => config.Named ("iif").WithBooleanParameter ("condition").WithDynamicParameter ("ifTrue").WithDynamicParameter ("ifFalse").WhenExecute (context => Simple (context' args => { " is 191.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The length of the statement  "	Register (config => config.Named ("i_frule_convert").WithDynamicParameter ("rule").WhenExecute (context => Simple (context' args => SystemFunctions.FRuleConvert (args [0]))).ReturnsType (context => { " is 199.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The length of the statement  "	Register (config => config.Named ("i_privilege_string").WithNumericParameter ("privBit").WhenExecute (context => Simple (context' args => SystemFunctions.PrivilegeString (args [0]))).ReturnsString ()); " is 201.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The length of the statement  "	Register (config => config.Named ("version").WhenExecute (context => context.Result (Field.String (context.Request.Query.Session.Database ().Version.ToString (3)))).ReturnsString ()); " is 183.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The length of the statement  "	Register (config => config.Named ("new_object").WithStringParameter ("typeName").WithUnoundedParameter ("args"' Function.DynamicType).WhenExecute (context => { " is 159.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("date").WhenExecute (context => Simple (context' () => SystemFunctions.CurrentDate (context.Request))).ReturnsType (PrimitiveTypes.Date ())); " is 175.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("time").WhenExecute (context => Simple (context' () => SystemFunctions.CurrentTime (context.Request))).ReturnsType (PrimitiveTypes.Time ())); " is 175.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("timestamp").WhenExecute (context => Simple (context' () => SystemFunctions.CurrentTimeStamp (context.Request))).ReturnsDateTime ()); " is 167.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("system_date").WhenExecute (context => Simple (context' SystemFunctions.SystemDate)).ReturnsType (PrimitiveTypes.Date ())); " is 157.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("system_time").WhenExecute (context => Simple (context' SystemFunctions.SystemTime)).ReturnsType (PrimitiveTypes.Time ())); " is 157.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("system_timestamp").WhenExecute (context => Simple (context' SystemFunctions.SystemTimeStamp)).ReturnsDateTime ()); " is 149.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("add_date").WithDateTimeParameter ("date").WithStringParameter ("datePart").WithNumericParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.AddDate (args [0]' args [1]' args [2]))).ReturnsDateTime ()); " is 267.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("extract").WithDateTimeParameter ("date").WithStringParameter ("unit").WhenExecute (context => Simple (context' args => SystemFunctions.Extract (args [0]' args [1]))).ReturnsNumeric ()); " is 220.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("dateformat").WithDateTimeParameter ("date").WithStringParameter ("format").WhenExecute (context => Simple (context' args => SystemFunctions.DateFormat (args [0]' args [1]))).ReturnsString ()); " is 227.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The length of the statement  "	Register (config => config.Named ("next_day").WithDateTimeParameter ("date").WithStringParameter ("dayOfWeek").WhenExecute (context => Simple (context' args => SystemFunctions.NextDay (args [0]' args [1]))).ReturnsDateTime ()); " is 227.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,StringFunctions,The length of the statement  "	Register (config => config.Named ("concat").WithUnoundedParameter ("strings"' PrimitiveTypes.VarChar ()).WhenExecute (context => Simple (context' SystemFunctions.Concat)).ReturnsType (ConcatReturnType)); " is 203.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("cos").WithNumericParameter ("value").ReturnsNumeric ().WhenExecute (context => Simple (context' args => SystemFunctions.Cos (args [0])))); " is 173.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("cosh").WithNumericParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.CosH (args [0]))).ReturnsNumeric ()); " is 175.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("log2").WithNumericParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.Log2 (args [0]))).ReturnsNumeric ()); " is 175.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("log").WithNumericParameter ("value").WithNumericParameter ("newBase").WhenExecute (context => Simple (context' args => SystemFunctions.Log (args [0]' args [1])))); " is 198.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("abs").WithNumericParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.Abs (args [0]))).ReturnsNumeric ()); " is 173.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("tan").WithNumericParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.Tan (args [0]))).ReturnsNumeric ()); " is 173.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("tanh").WithNumericParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.TanH (args [0]))).ReturnsNumeric ()); " is 175.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("sin").WithNumericParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.Sin (args [0]))).ReturnsNumeric ()); " is 173.
Long Statement,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MathFunctions,The length of the statement  "	Register (config => config.Named ("round").WithNumericParameter ("value").WithNumericParameter ("precision").WhenExecute (context => Simple (context' args => SystemFunctions.Round (args [0]' args [1]))).ReturnsNumeric ()); " is 222.
Long Statement,Deveel.Data.Security,ResourceGrantAction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\ResourceGrantAction.cs,OnActionExecuted,The length of the statement  "		throw new SecurityException (String.Format ("An error occurred while granting '{0}' to '{1}' on '{2}'."' Privileges' ResourceName' context.User.Name)' ex); " is 155.
Long Statement,Deveel.Data.Security,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SystemBuilderExtensions.cs,UseSecurityFeature,The length of the statement  "	return builder.UseFeature (feature => feature.Named (SystemFeatureNames.Security).WithAssemblyVersion ().OnSystemBuild (OnSystemBuild).OnDatabaseCreate (OnDatabaseCreate).OnTableCompositeSetup (OnTableCompositeSetup)); " is 218.
Long Statement,Deveel.Data.Security,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SystemBuilderExtensions.cs,CreateTables,The length of the statement  "	context.Access ().AddForeignKey (UserManager.PasswordTableName' fkCol' UserManager.UserTableName' refCol' onDelete' onUpdate' "USER_PASSWORD_FK"); " is 146.
Long Statement,Deveel.Data.Security,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SystemBuilderExtensions.cs,CreateTables,The length of the statement  "	context.Access ().AddForeignKey (UserManager.UserRoleTableName' fkCol' UserManager.UserTableName' refCol' onDelete' onUpdate' "USER_PRIV_FK"); " is 142.
Long Statement,Deveel.Data.Security,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SystemBuilderExtensions.cs,CreateTables,The length of the statement  "	context.Access ().AddForeignKey (UserManager.UserRoleTableName' rfkCol' UserManager.RoleTableName' refCol' onDelete' onUpdate' "USER_ROLE_FK"); " is 143.
Long Statement,Deveel.Data.Security,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SystemBuilderExtensions.cs,OnSystemBuild,The length of the statement  "	builder.Use<IUserManager> (options => options.With<UserManager> ().InSessionScope ())//.Use<IDatabaseCreateCallback>(options => options " is 135.
Long Statement,Deveel.Data.Security,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SystemBuilderExtensions.cs,OnSystemBuild,The length of the statement  "	.Use<IPrivilegeManager> (options => options.With<PrivilegeManager> ().InSessionScope ())//.Use<ITableCompositeSetupCallback>(options => options " is 143.
Long Statement,Deveel.Data.Security,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\QueryExtensions.cs,CreateAdminUser,The length of the statement  "		context.Access ().GrantOnSchema (context.Session.Database ().Context.DefaultSchema ()' userName' PrivilegeSets.SchemaAll' true); " is 128.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrants,The length of the statement  "	t1 = t1.SimpleSelect (queryContext' paramCol' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName))); " is 132.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrants,The length of the statement  "	var userCheck = SqlExpression.Equal (SqlExpression.Reference (granteeCol)' SqlExpression.Constant (Field.String (grantee))); " is 124.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrants,The length of the statement  "	var expr = SqlExpression.And (SqlExpression.Equal (SqlExpression.Reference (objectCol)' SqlExpression.Constant (Field.BigInt ((int)objectType)))' userCheck); " is 157.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrants,The length of the statement  "	var grantOptionCheck = SqlExpression.Equal (SqlExpression.Reference (grantOptionCol)' SqlExpression.Constant (Field.Boolean (withOption))); " is 139.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrants,The length of the statement  "	var granterCheck = SqlExpression.Equal (SqlExpression.Reference (granterCol)' SqlExpression.Constant (Field.String (revoker))); " is 127.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The length of the statement  "		t1 = t1.SimpleSelect (query' paramCol' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName))); " is 125.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The length of the statement  "		var userCheck = SqlExpression.Equal (SqlExpression.Reference (granteeCol)' SqlExpression.Constant (Field.String (grantee))); " is 124.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The length of the statement  "		var expr = SqlExpression.And (SqlExpression.Equal (SqlExpression.Reference (objectCol)' SqlExpression.Constant (Field.BigInt ((int)objectType)))' userCheck); " is 157.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The length of the statement  "		var grantOptionCheck = SqlExpression.Equal (SqlExpression.Reference (grantOptionCol)' SqlExpression.Constant (Field.Boolean (withOption))); " is 139.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The length of the statement  "		var granterCheck = SqlExpression.Equal (SqlExpression.Reference (granterCol)' SqlExpression.Constant (Field.String (revoker))); " is 127.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The length of the statement  "		var granteeCheck = SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (grantee))); " is 130.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The length of the statement  "			granteeCheck = SqlExpression.Or (granteeCheck' SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (User.PublicName)))); " is 167.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,QueryPrivileges,The length of the statement  "	t1 = t1.SimpleSelect (queryContext' paramCol' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName))); " is 132.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,QueryPrivileges,The length of the statement  "	var granteeCheck = SqlExpression.Equal (SqlExpression.Reference (granteeCol)' SqlExpression.Constant (Field.String (grantee))); " is 127.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,QueryPrivileges,The length of the statement  "		granteeCheck = SqlExpression.Or (granteeCheck' SqlExpression.Equal (SqlExpression.Reference (granteeCol)' SqlExpression.Constant (Field.String (User.PublicName)))); " is 164.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,QueryPrivileges,The length of the statement  "	var expr = SqlExpression.And (SqlExpression.Equal (SqlExpression.Reference (objectCol)' SqlExpression.Constant (Field.BigInt ((int)objectType)))' granteeCheck); " is 160.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,QueryPrivileges,The length of the statement  "		var grantOptionCheck = SqlExpression.Equal (SqlExpression.Reference (grantOptionCol)' SqlExpression.Constant (Field.BooleanTrue)); " is 130.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The length of the statement  "		var t1 = grantTable.SimpleSelect (query' objectTypeColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.Integer ((int)objectType))); " is 142.
Long Statement,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The length of the statement  "		t1 = t1.SimpleSelect (query' objectNameColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName))); " is 133.
Long Statement,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AddUserToRole,The length of the statement  "		throw new ArgumentException (String.Format ("Group name '{0}' is invalid: cannot start with {1}"' roleName' c)' "roleName"); " is 124.
Long Statement,Deveel.Data.Security,SystemRoles,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\SystemRoles.cs,IsSystemRole,The length of the statement  "	return String.Equals (groupName' SecureAccessRole) || String.Equals (groupName' UserManagerRole) || String.Equals (groupName' SchemaManagerRole) || String.Equals (groupName' LockedRole); " is 186.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "SHA256"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "SHA-256"' StringComparison.OrdinalIgnoreCase)) " is 158.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "SHA384"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "SHA-384"' StringComparison.OrdinalIgnoreCase)) " is 158.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "SHA512"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "SHA-512"' StringComparison.OrdinalIgnoreCase)) " is 158.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "SHA1"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "SHA-1"' StringComparison.OrdinalIgnoreCase)) " is 154.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "HMAC-SHA256"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMACSHA256"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMAC-SHA-256"' StringComparison.OrdinalIgnoreCase)) " is 250.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "HMAC-SHA384"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMACSHA384"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMAC-SHA-384"' StringComparison.OrdinalIgnoreCase)) " is 250.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "HMAC-SHA512"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMACSHA512"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMAC-SHA-512"' StringComparison.OrdinalIgnoreCase)) " is 250.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "HMAC-SHA1"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMACSHA1"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMAC-SHA-1"' StringComparison.OrdinalIgnoreCase)) " is 244.
Long Statement,Deveel.Data.Security,HashFunctions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\HashFunctions.cs,GetFunction,The length of the statement  "	if (String.Equals (functionName' "HMAC-MD5"' StringComparison.OrdinalIgnoreCase) || String.Equals (functionName' "HMACMD5"' StringComparison.OrdinalIgnoreCase)) " is 160.
Long Statement,Deveel.Data.Sql.Compile,CreateTableBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\CreateTableBuilder.cs,Build,The length of the statement  "			var index = tableConstraints.FindIndex (x => String.IsNullOrEmpty (x.ConstraintName) && x.ConstraintType == constraintGroup.Key); " is 129.
Long Statement,Deveel.Data.Sql.Compile,SqlExpressionVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlExpressionVisitor.cs,VisitInvokedFunction,The length of the statement  "		args = context.argument ().Select (FunctionArgument.Form).Select (x => new InvokeArgument (x.Id' x.Expression)).ToArray (); " is 123.
Long Statement,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitCreateTriggerStatement,The length of the statement  "		args = triggerBody.function_argument ().argument ().Select (FunctionArgument.Form).Select (x => new InvokeArgument (x.Id' x.Expression)).ToArray (); " is 148.
Long Statement,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitCallStatement,The length of the statement  "		args = context.function_argument ().argument ().Select (FunctionArgument.Form).Select (x => new InvokeArgument (x.Id' x.Expression)).ToArray (); " is 144.
Long Statement,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitFetchStatement,The length of the statement  "			refExpression = SqlExpression.Tuple (varNames.Select (SqlExpression.VariableReference).Cast<SqlExpression> ().ToArray ()); " is 122.
Long Statement,Deveel.Data.Sql.Compile,SqlStatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\SqlStatementVisitor.cs,VisitCreateFunctionStatement,The length of the statement  "			throw new NotSupportedException (String.Format ("The return type of function '{0}' ('{1}') is not primitive."' functionName' typeInfo)); " is 136.
Long Statement,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,PlanGroup,The length of the statement  "			node = new GroupNode (node' groupInfo.GroupByNames' groupInfo.GroupMax' groupInfo.FunctionExpressions' groupInfo.FunctionNames); " is 128.
Long Statement,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,CreateTablePlanner,The length of the statement  "			throw new InvalidOperationException (String.Format ("The type of FROM source '{0}' is not supported."' tableSource.GetType ())); " is 128.
Long Statement,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,ResolveGroupBy,The length of the statement  "				throw new InvalidOperationException (String.Format ("Aggregate expression '{0}' is not allowed in a GROUP BY clause"' expression)); " is 131.
Long Statement,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,EvaluateSingles,The length of the statement  "	plans.AddRange (simplePlanList.Select (plan => new SimpleSinglePlan (this' plan.UniqueName' plan.Expression)).Cast<ExpressionPlan> ()); " is 135.
Long Statement,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,EvaluateSingles,The length of the statement  "	plans.AddRange (complexPlanList.Select (plan => new ComplexSinglePlan (this' plan.UniqueName' plan.Expression)).Cast<ExpressionPlan> ()); " is 137.
Long Statement,Deveel.Data.Sql.Query,FromTableDirectSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableDirectSource.cs,ResolveColumn,The length of the statement  "		var columnName = tableInfo.Where (x => StringCompare (x.ColumnName' column)).Select (x => x.ColumnName).FirstOrDefault (); " is 122.
Long Statement,Deveel.Data.Sql.Query,FromTableDirectSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableDirectSource.cs,ResolveColumn,The length of the statement  "			throw new InvalidOperationException (String.Format ("Could not resolve column '{0}' within the table '{1}'."' column' GivenTableName)); " is 135.
Long Statement,Deveel.Data.Sql.Query,FromTableSubQuerySource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableSubQuerySource.cs,ResolveColumnCount,The length of the statement  "	if (String.IsNullOrEmpty (catalog) && String.IsNullOrEmpty (schema) && String.IsNullOrEmpty (table) && String.IsNullOrEmpty (column)) " is 133.
Long Statement,Deveel.Data.Sql.Schemas,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\SystemBuilderExtensions.cs,UseSchemaFeature,The length of the statement  "	return builder.UseFeature (feature => feature.Named (SystemFeatureNames.Schemata).WithAssemblyVersion ().OnSystemBuild (OnBuild).OnTableCompositeCreate (OnCompositeCreate).OnDatabaseCreate (OnDatabaseCreate)); " is 209.
Long Statement,Deveel.Data.Sql.Schemas,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SystemSchema.SchemaInfoTableName).WithColumn ("id"' PrimitiveTypes.Numeric ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("type"' PrimitiveTypes.String ()).WithColumn ("culture"' PrimitiveTypes.String ()).WithColumn ("other"' PrimitiveTypes.String ())); " is 325.
Long Statement,Deveel.Data.Sql.Schemas,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\SystemBuilderExtensions.cs,OnBuild,The length of the statement  "	builder.Use<IObjectManager> (options => options.With<SchemaManager> ().HavingKey (DbObjectType.Schema).InTransactionScope ()); " is 126.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (ThisUserSimpleGrantViewName' query => query.Column ("priv_bit").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName))))); " is 395.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "description").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName))))); " is 325.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (ThisUserSchemaInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.SchemaInfoTableName).Where (where => where.Reference ("name").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserGrantViewName).Where (filter => filter.Reference ("object").Equal (value => value.Value ((int)DbObjectType.Schema)).And (and => and.Reference ("description").Like (String.Format ("%{0}%"' Privileges.List.ToString ().ToUpperInvariant ())))))))); " is 479.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (ThisUserTableColumnsViewName' query => query.AllColumns ().FromTable (SystemSchema.TableColumnsTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName))))); " is 265.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (ThisUserTableInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.TableInfoTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName))))); " is 259.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (Tables' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("name"' "TABLE_NAME").Column ("type"' "TABLE_TYPE").Column ("other"' "REMARKS").Constant (null' "TYPE_CATALOG").Constant (null' "TYPE_SCHEMA").Constant (null' "TYPE_NAME").Constant (null' "SELF_REFERENCING_COL_NAME").Constant (null' "REF_GENERATION").FromTable (ThisUserTableInfoViewName)); " is 412.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (Schemata' query => query.Column ("name"' "TABLE_SCHEMA").Constant (null' "TABLE_CATALOG").FromTable (ThisUserSchemaInfoViewName)); " is 154.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (Catalogs' query => query.Constant (null' "TABLE_CATALOG").FromTable (SystemSchema.SchemaInfoTableName).Where (SqlExpression.Constant (false))); " is 167.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] { " is 284.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] { " is 124.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "			SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))' " is 125.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] { " is 194.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] { " is 195.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		//            IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR' " is 131.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		//            IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE' " is 134.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (ColumnPrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Column ("COLUMN_NAME").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "granter").Equal (eq => eq.Value (User.SystemName))' b => b.Value (null)' c => c.Reference (ThisUserGrantViewName' "granter"))).As ("GRANTOR")).Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] { " is 681.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "IS_GRANTABLE").From (source => source.Table (Columns)' source => source.Table (ThisUserGrantViewName)).Where (where => where.Function ("CONCAT"' a => a.Reference (Columns' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Columns' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null))))); " is 524.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		//          IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR' " is 129.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		//          IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE' " is 132.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (TablePrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Function ("IIF"' new SqlExpression[] { " is 165.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "			SqlExpression.Equal (SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))' SqlExpression.Constant (User.SystemName))' " is 140.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "GRANTOR").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] { " is 300.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "IS_GRANTABLE").Column (new ObjectName (ThisUserGrantViewName' "description")' "PRIVILEGE").FromTable (Tables).FromTable (ThisUserGrantViewName).Where (where => where.Function ("CONCAT"' a => a.Reference (Tables' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Tables' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null))))); " is 563.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (PrimaryKeys' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column (new ObjectName (SystemSchema.PrimaryKeyColumnsTableName' "seq_no")' "KEY_SEQ").Column ("name"' "PK_NAME").FromTable (SystemSchema.PrimaryKeyInfoTableName).FromTable (SystemSchema.PrimaryKeyColumnsTableName).Where (where => where.Reference ("pkey_info"' "id").Equal (eq => eq.Reference ("pkey_cols"' "pk_id")).And (and => and.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))))); " is 630.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (ImportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] { " is 814.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName)))))); " is 724.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (ExportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] { " is 814.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName)))))); " is 724.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		systemQuery.CreateView (CrossReference' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] { " is 816.
Long Statement,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The length of the statement  "		}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName)))))); " is 724.
Long Statement,Deveel.Data.Sql.Sequences,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SystemBuilderExtensions.cs,UseSequencesFeature,The length of the statement  "	return builder.UseFeature (feature => feature.Named (SystemFeatureNames.Sequences).WithAssemblyVersion ().OnSystemBuild (OnBuild).OnTableCompositeCreate (OnCompositeCreate)); " is 174.
Long Statement,Deveel.Data.Sql.Sequences,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SequenceManager.SequenceInfoTableName).WithColumn ("id"' PrimitiveTypes.Numeric ()).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("type"' PrimitiveTypes.Numeric ())); " is 283.
Long Statement,Deveel.Data.Sql.Sequences,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SequenceManager.SequenceTableName).WithColumn ("seq_id"' PrimitiveTypes.Numeric ()).WithColumn ("last_value"' PrimitiveTypes.Numeric ()).WithColumn ("increment"' PrimitiveTypes.Numeric ()).WithColumn ("minvalue"' PrimitiveTypes.Numeric ()).WithColumn ("maxvalue"' PrimitiveTypes.Numeric ()).WithColumn ("start"' PrimitiveTypes.Numeric ()).WithColumn ("cache"' PrimitiveTypes.Numeric ()).WithColumn ("cycle"' PrimitiveTypes.Boolean ())); " is 493.
Long Statement,Deveel.Data.Sql.Sequences,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SystemBuilderExtensions.cs,OnBuild,The length of the statement  "	builder.Use<IObjectManager> (options => options.With<SequenceManager> ().HavingKey (DbObjectType.Sequence).InTransactionScope ()).Use<ITableContainer> (optiions => optiions.With<SequenceTableContainer> ().InTransactionScope ()); " is 228.
Long Statement,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateSequence,The length of the statement  "	if (sequenceName.Equals (SequenceTableName) || sequenceName.Equals (SequenceInfoTableName) || !Transaction.TableExists (SequenceTableName) || !Transaction.TableExists (SequenceInfoTableName)) { " is 193.
Long Statement,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The length of the statement  "	var list = seqi.SelectRowsEqual (2' Field.VarChar (sequenceName.Name)' 1' Field.VarChar (sequenceName.Parent.FullName)); " is 120.
Long Statement,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,RemoveNativeTableSequence,The length of the statement  "	if (tableName.Equals (SequenceTableName) || tableName.Equals (SequenceInfoTableName) || !Transaction.ObjectExists (SequenceTableName) || !Transaction.ObjectExists (SequenceInfoTableName)) { " is 189.
Long Statement,Deveel.Data.Sql.Statements.Build,CreateTableStatementBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements.Build\CreateTableStatementBuilder.cs,WithConstraint,The length of the statement  "			constraints [constraintName] = new SqlTableConstraint (constraintName' existing.ConstraintType' constraintColumns.ToArray ()) { " is 127.
Long Statement,Deveel.Data.Sql.Statements.Build,CreateTableStatementBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements.Build\CreateTableStatementBuilderExtensions.cs,WithIdentityColumn,The length of the statement  "	return builder.WithColumn (column => column.Named (columnName).OfType (columnType).NotNull ().Identity ().PrimaryKey ()); " is 121.
Long Statement,Deveel.Data.Sql.Statements,CallStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CallStatement.cs,ExecuteStatement,The length of the statement  "		throw new StatementException (String.Format ("Could not retrieve the procedure '{0}': maybe not a procedure."' ProcedureName)); " is 127.
Long Statement,Deveel.Data.Sql.Statements,CreateProcedureTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateProcedureTriggerStatement.cs,PrepareStatement,The length of the statement  "	return new CreateProcedureTriggerStatement (triggerName' tableName' procedureName' ProcedureArguments' EventTime' EventType) { " is 126.
Long Statement,Deveel.Data.Sql.Statements,CreateProcedureTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateProcedureTriggerStatement.cs,ExecuteStatement,The length of the statement  "	//	throw new SecurityException(String.Format("The user '{0}' cannot create in schema '{1}'."' context.User.Name' TriggerName.ParentName)); " is 138.
Long Statement,Deveel.Data.Sql.Statements,CreateProcedureTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateProcedureTriggerStatement.cs,ExecuteStatement,The length of the statement  "	var triggerInfo = new ProcedureTriggerInfo (TriggerName' TableName' EventTime' EventType' ProcedureName' ProcedureArguments); " is 125.
Long Statement,Deveel.Data.Sql.Statements,CreateRoleStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateRoleStatement.cs,ConfigureSecurity,The length of the statement  "			return AssertResult.Deny (new SecurityException (String.Format ("User '{0}' has not enough rights to create roles."' c.User.Name))); " is 132.
Long Statement,Deveel.Data.Sql.Statements,CreateTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateTriggerStatement.cs,ExecuteStatement,The length of the statement  "	//	throw new SecurityException(String.Format("The user '{0}' cannot create in schema '{1}'."' context.User.Name' TriggerName.ParentName)); " is 138.
Long Statement,Deveel.Data.Sql.Statements,DropFunctionStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropFunctionStatement.cs,ExecuteStatement,The length of the statement  "		throw new InvalidOperationException (String.Format ("Unable to drop the function '{0}' from the system."' FunctionName)); " is 121.
Long Statement,Deveel.Data.Sql.Statements,DropProcedureStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropProcedureStatement.cs,ExecuteStatement,The length of the statement  "		throw new InvalidOperationException (String.Format ("Unable to drop the procedure '{0}' from the system."' ProcedureName)); " is 123.
Long Statement,Deveel.Data.Sql.Statements,DropRoleStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropRoleStatement.cs,ConfigureSecurity,The length of the statement  "			return AssertResult.Deny (new SecurityException (String.Format ("User '{0}' has not enough rights to drop a role."' c.User.Name))); " is 131.
Long Statement,Deveel.Data.Sql.Statements,RevokeRoleStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\RevokeRoleStatement.cs,ExecuteStatement,The length of the statement  "		throw new SecurityException (String.Format ("User '{0}' has no role rights to revoke role '{1}' from '{2'}'."' context.User.Name' RoleName' Grantee)); " is 150.
Long Statement,Deveel.Data.Sql.Statements,CodeBlockStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CodeBlockStatement.cs,AssertPlSqlStatement,The length of the statement  "		throw new ArgumentException (String.Format ("The statement of type '{0}' cannot be inserted into a PL/SQL block."' obj.GetType ())); " is 132.
Long Statement,Deveel.Data.Sql.Statements,CreateTypeStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateTypeStatement.cs,ExecuteStatement,The length of the statement  "			throw new StatementException (String.Format ("The type '{0}' inherits from the type '{1}' that does not exist."' TypeName' ParentTypeName)); " is 140.
Long Statement,Deveel.Data.Sql.Statements,CreateTypeStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateTypeStatement.cs,ExecuteStatement,The length of the statement  "			throw new StatementException (String.Format ("The type '{0}' is sealed and cannot be inherited by '{1}'."' ParentTypeName' TypeName)); " is 134.
Long Statement,Deveel.Data.Sql.Statements,CursorForLoopStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CursorForLoopStatement.cs,BeforeLoop,The length of the statement  "		throw new StatementException (String.Format ("The cursor '{0}' is in an invalid status ({1})."' CursorName' cursor.Status.ToString ().ToUpperInvariant ())); " is 156.
Long Statement,Deveel.Data.Sql.Statements,DeclareVariableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DeclareVariableStatement.cs,ExecuteStatement,The length of the statement  "		throw new InvalidOperationException (String.Format ("A variable named '{0}' was already defined in the context."' VariableName)); " is 129.
Long Statement,Deveel.Data.Sql.Statements,DropCallbackTriggersStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropCallbackTriggersStatement.cs,ExecuteStatement,The length of the statement  "		throw new StatementException (String.Format ("The callback trigger '{0}' does not exist in the context."' TriggerName)); " is 120.
Long Statement,Deveel.Data.Sql.Statements,DropCallbackTriggersStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropCallbackTriggersStatement.cs,ExecuteStatement,The length of the statement  "		throw new StatementException (String.Format ("Could not drop the callback trigger '{0}' from the context"' TriggerName)); " is 121.
Long Statement,Deveel.Data.Sql.Statements,DropTriggerStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropTriggerStatement.cs,ExecuteStatement,The length of the statement  "	//	throw new SecurityException(String.Format("User '{0}' has not enough rights to drop trigger '{1}'."' context.User.Name' TriggerName)); " is 137.
Long Statement,Deveel.Data.Sql.Statements,DropUserStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropUserStatement.cs,ConfigureSecurity,The length of the statement  "		if (String.Equals (UserName' User.PublicName' StringComparison.OrdinalIgnoreCase) || String.Equals (UserName' User.SystemName' StringComparison.OrdinalIgnoreCase)) " is 163.
Long Statement,Deveel.Data.Sql.Statements,DropUserStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropUserStatement.cs,ConfigureSecurity,The length of the statement  "			return AssertResult.Deny (new SecurityException (String.Format ("User '{0}' is reserved and cannot be dropped."' UserName))); " is 125.
Long Statement,Deveel.Data.Sql.Statements,DropUserStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropUserStatement.cs,ConfigureSecurity,The length of the statement  "			throw new SecurityException (String.Format ("The user '{0}' has not enough rights to drop the other user '{1}'"' c.User.Name' UserName)); " is 137.
Long Statement,Deveel.Data.Sql.Statements,RevokePrivilegesStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\RevokePrivilegesStatement.cs,ExecuteStatement,The length of the statement  "		throw new SecurityException (String.Format ("User '{0}' cannot revoke '{1}' privilege from '{2}' on '{3}'."' context.User.Name' Privileges' Grantee' ObjectName)); " is 162.
Long Statement,Deveel.Data.Sql.Statements,ShowStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\ShowStatement.cs,ShowSchema,The length of the statement  "	var sql = "SELECT \"name\" AS \"schema_name\"' " + "       \"type\"' " + "       \"other\" AS \"notes\" " + "    FROM " + InformationSchema.ThisUserSchemaInfoViewName + " " + "ORDER BY \"schema_name\""; " is 202.
Long Statement,Deveel.Data.Sql.Statements,ShowStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\ShowStatement.cs,ShowProduct,The length of the statement  "	const string sql = "SELECT \"name\"' \"version\" FROM " + "  ( SELECT \"value\" AS \"name\" FROM SYSTEM.product_info " + "     WHERE \"var\" = 'name' )' " + "  ( SELECT \"value\" AS \"version\" FROM SYSTEM.product_info " + "     WHERE \"var\" = 'version' ) "; " is 259.
Long Statement,Deveel.Data.Sql.Statements,ShowStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\ShowStatement.cs,ShowSchemaTables,The length of the statement  "	var sql = "  SELECT \"Tables.TABLE_NAME\" AS \"table_name\"' " + "         I_PRIVILEGE_STRING(\"agg_priv_bit\") AS \"user_privs\"' " + "         \"Tables.TABLE_TYPE\" as \"table_type\" " + "    FROM " + InformationSchema.Tables + "' " + "         ( SELECT AGGOR(\"priv_bit\") agg_priv_bit' " + "                  \"object\"' \"name\" " + "             FROM " + InformationSchema.ThisUserSimpleGrantViewName + "            WHERE \"object\" = " + ((int)DbObjectType.Table) + "         GROUP BY \"name\" )" + "   WHERE \"Tables.TABLE_SCHEMA\" = ? " + "     AND CONCAT(\"Tables.TABLE_SCHEMA\"' '.'' \"Tables.TABLE_NAME\") = \"name\" " + "ORDER BY Tables.TABLE_NAME"; " is 662.
Long Statement,Deveel.Data.Sql.Statements,ShowStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\ShowStatement.cs,ShowTable,The length of the statement  "	var sql = "  SELECT \"column\" AS \"name\"' " + "         i_sql_type(\"type_desc\"' \"size\"' \"scale\") AS \"type\"' " + "         \"not_null\"' " + "         \"index_str\" AS \"index\"' " + "         \"default\" " + "    FROM " + InformationSchema.ThisUserTableColumnsViewName + " " + "   WHERE \"schema\" = ? " + "     AND \"table\" = ? " + "ORDER BY \"seq_no\" "; " is 367.
Long Statement,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitDeclareCursor,The length of the statement  "	return new DeclareCursorStatement (statement.CursorName' statement.Parameters' statement.Flags' statement.QueryExpression); " is 123.
Long Statement,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitRevokePrivilege,The length of the statement  "	return new RevokePrivilegesStatement (statement.Grantee' statement.Privileges' statement.GrantOption' statement.ObjectName' statement.Columns); " is 143.
Long Statement,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitGrantPrivilege,The length of the statement  "	return new GrantPrivilegesStatement (statement.Grantee' statement.Privilege' statement.WithGrant' statement.ObjectName' statement.Columns); " is 139.
Long Statement,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitCreateExternFunction,The length of the statement  "	return new CreateExternalFunctionStatement (statement.FunctionName' statement.ReturnType' statement.Parameters' statement.ExternalReference) { " is 142.
Long Statement,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitCreateExternProcedure,The length of the statement  "	return new CreateExternalProcedureStatement (statement.ProcedureName' statement.Parameters' statement.ExternalReference) { " is 122.
Long Statement,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitCreateProcedureTrigger,The length of the statement  "	return new CreateProcedureTriggerStatement (statement.TriggerName' statement.TableName' statement.ProcedureName' statement.ProcedureArguments' statement.EventTime' statement.EventType); " is 185.
Long Statement,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitCreateCallbackTrigger,The length of the statement  "	return new CreateCallbackTriggerStatement (statement.TriggerName' statement.TableName' statement.EventTime' statement.EventType); " is 129.
Long Statement,Deveel.Data.Sql.Statements,StatementVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\StatementVisitor.cs,VisitCreateTrigger,The length of the statement  "	return new CreateTriggerStatement (statement.TriggerName' statement.TableName' body' statement.EventTime' statement.EventType); " is 127.
Long Statement,Deveel.Data.Sql.Statements,GrantPrivilegesStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantPrivilegesStatement.cs,ExecuteStatement,The length of the statement  "		throw new SecurityException (String.Format ("User '{0}' has not the option to grant '{1}' to '{2}' on {3}"' context.User.Name' Privilege' Grantee' ObjectName)); " is 160.
Long Statement,Deveel.Data.Sql.Statements,GrantRoleStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantRoleStatement.cs,ConfigureSecurity,The length of the statement  "			return AssertResult.Deny (new SecurityException (String.Format ("User '{0}' cannot grant role '{1}' to '{2}'."' c.User.Name' Role' Grantee))); " is 142.
Long Statement,Deveel.Data.Sql.Statements,GrantRoleStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantRoleStatement.cs,ConfigureSecurity,The length of the statement  "				return AssertResult.Deny (new SecurityException (String.Format ("User '{0}' does not administrate role '{1}'."' c.User' Role))); " is 128.
Long Statement,Deveel.Data.Sql.Statements,GrantRoleStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantRoleStatement.cs,ConfigureSecurity,The length of the statement  "			throw new SecurityException (String.Format ("The user '{0}' has not enough rights to manage other users."' c.User.Name)); " is 121.
Long Statement,Deveel.Data.Sql.Statements,GrantRoleStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantRoleStatement.cs,ExecuteStatement,The length of the statement  "	//	throw new SecurityException(String.Format("User '{0}' cannot grant role '{1}' to '{2}'."' context.User.Name' Role' Grantee)); " is 128.
Long Statement,Deveel.Data.Sql.Statements,GrantRoleStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\GrantRoleStatement.cs,ExecuteStatement,The length of the statement  "		throw new SecurityException (String.Format ("The user '{0}' has not enough rights to manage other users."' context.User.Name)); " is 127.
Long Statement,Deveel.Data.Sql.Statements,DropTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropTableStatement.cs,ExecuteStatement,The length of the statement  "			throw new InvalidOperationException (String.Format ("The table '{0}' does not exist and cannot be dropped."' TableName)); " is 121.
Long Statement,Deveel.Data.Sql.Statements,DropViewStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\DropViewStatement.cs,ExecuteStatement,The length of the statement  "			throw new ObjectNotFoundException (ViewName' String.Format ("The view '{0}' does not exist and cannot be dropped."' ViewName)); " is 127.
Long Statement,Deveel.Data.Sql.Statements,OpenStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\OpenStatement.cs,PrepareStatement,The length of the statement  "			throw new StatementException (String.Format ("Invalid number of arguments for cursor '{0}' OPEN statement."' CursorName)); " is 122.
Long Statement,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,CheckColumnNamesMatch,The length of the statement  "	var comparison = context.Query.IgnoreIdentifiersCase () ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal; " is 120.
Long Statement,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,ExecuteStatement,The length of the statement  "		if (Action.ActionType == AlterTableActionType.SetDefault && CheckColumnNamesMatch (context.Request' ((SetDefaultAction)Action).ColumnName' columnName)) { " is 153.
Long Statement,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,ExecuteStatement,The length of the statement  "		} else if (Action.ActionType == AlterTableActionType.DropDefault && CheckColumnNamesMatch (context.Request' ((DropDefaultAction)Action).ColumnName' columnName)) { " is 162.
Long Statement,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,ExecuteStatement,The length of the statement  "		} else if (Action.ActionType == AlterTableActionType.DropColumn && CheckColumnNamesMatch (context.Request' ((DropColumnAction)Action).ColumnName' columnName)) { " is 160.
Long Statement,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,ExecuteStatement,The length of the statement  "			throw new InvalidOperationException ("The column '" + col.ColumnName + "' is already in the table '" + tableInfo.TableName + "'."); " is 131.
Long Statement,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,ExecuteStatement,The length of the statement  "			throw new InvalidOperationException ("Named constraint to drop on table " + TableName + " was not found: " + constraintName); " is 125.
Long Statement,Deveel.Data.Sql.Statements,AlterTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterTableStatement.cs,ExecuteStatement,The length of the statement  "		var newConstraint = new ConstraintInfo (constraint.ConstraintName' constraint.ConstraintType' TableName' columnNames.ToArray ()); " is 129.
Long Statement,Deveel.Data.Sql.Statements,AlterUserStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterUserStatement.cs,ConfigureSecurity,The length of the statement  "		if (String.Equals (UserName' User.PublicName' StringComparison.OrdinalIgnoreCase) || String.Equals (UserName' User.SystemName' StringComparison.OrdinalIgnoreCase)) " is 163.
Long Statement,Deveel.Data.Sql.Statements,AlterUserStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterUserStatement.cs,ConfigureSecurity,The length of the statement  "			return AssertResult.Deny (new SecurityException (String.Format ("User name '{0}' is reserved for the system."' UserName))); " is 123.
Long Statement,Deveel.Data.Sql.Statements,AlterUserStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AlterUserStatement.cs,ExecuteStatement,The length of the statement  "		var roleNames = ((SetUserRolesAction)AlterAction).Roles.Cast<SqlConstantExpression> ().Select (x => x.Value.Value.ToString ()).ToArray (); " is 138.
Long Statement,Deveel.Data.Sql.Statements,CreateUserStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateUserStatement.cs,ExecuteStatement,The length of the statement  "		throw new NotSupportedException (String.Format ("The identification type '{0}' is not supported yet."' Identifier.Type)); " is 121.
Long Statement,Deveel.Data.Sql.Statements,InsertSelectStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\InsertSelectStatement.cs,PrepareStatement,The length of the statement  "	var fromTable = new FromTableDirectSource (context.Query.IgnoreIdentifiersCase ()' tableQueryInfo' "INSERT_TABLE"' tableName' tableName); " is 137.
Long Statement,Deveel.Data.Sql.Statements,InsertStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\InsertStatement.cs,PrepareStatement,The length of the statement  "	var fromTable = new FromTableDirectSource (context.Query.IgnoreIdentifiersCase ()' tableQueryInfo' "INSERT_TABLE"' tableName' tableName); " is 137.
Long Statement,Deveel.Data.Sql.Statements,InsertStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\InsertStatement.cs,PrepareStatement,The length of the statement  "			throw new InvalidOperationException (String.Format ("Cannot find column '{0}' in table '{1}'"' columnName' table.TableInfo.TableName)); " is 135.
Long Statement,Deveel.Data.Sql.Statements,InsertStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\InsertStatement.cs,PrepareStatement,The length of the statement  "					sb.AppendFormat ("Unable to convert type {0} of {1} into type {2} of column {3}"' expReturnType' value' columnInfo.ColumnType' columnInfo.FullColumnName.FullName); " is 163.
Long Statement,Deveel.Data.Sql.Statements,SelectStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\SelectStatement.cs,PrepareStatement,The length of the statement  "	var queryPlan = context.Query.Context.QueryPlanner ().PlanQuery (new QueryInfo (context' QueryExpression' OrderBy' Limit)); " is 123.
Long Statement,Deveel.Data.Sql.Statements,ColumnChecker,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\ColumnChecker.cs,StripTableName,The length of the statement  "			throw new InvalidOperationException (String.Format ("Column '{0}' is not within the expected table'{1}'"' column' tableDomain)); " is 128.
Long Statement,Deveel.Data.Sql.Statements,CreateViewStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateViewStatement.cs,PrepareStatement,The length of the statement  "				throw new InvalidOperationException (String.Format ("Duplicate column name '{0}' in view. A view may not contain duplicate column names."' columnName)); " is 152.
Long Statement,Deveel.Data.Sql.Statements,AddConstraintAction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\AddConstraintAction.cs,AppendTo,The length of the statement  "		builder.AppendFormat (" REFERENCES {0}({1}) ON DELETE {2} ON UPDATE {3}"' Constraint.ReferenceTable' String.Join ("' "' Constraint.ReferenceColumns)' onDelete' onUpdate); " is 170.
Long Statement,Deveel.Data.Sql.Statements,CreateTableStatement,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Statements\CreateTableStatement.cs,CreateColumnInfo,The length of the statement  "		throw new InvalidOperationException (String.Format ("Identity column '{0}' cannot define a DEFAULT expression."' column.ColumnName)); " is 133.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,UseTablesFeature,The length of the statement  "	return builder.UseFeature (feature => feature.Named (SystemFeatureNames.Tables).WithAssemblyVersion ().OnSystemBuild (OnBuild).OnTableCompositeCreate (OnCompositeCreate).OnTableCompositeSetup (OnCompositeSetup)); " is 212.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeSetup,The length of the statement  "	systemQuery.Access ().AddForeignKey (SystemSchema.PrimaryKeyColumnsTableName' fkCol' SystemSchema.PrimaryKeyInfoTableName' fkRefCol' "SYSTEM_PK_FK"); " is 149.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeSetup,The length of the statement  "	systemQuery.Access ().AddForeignKey (SystemSchema.ForeignKeyColumnsTableName' fkCol' SystemSchema.ForeignKeyInfoTableName' fkRefCol' "SYSTEM_FK_FK"); " is 149.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeSetup,The length of the statement  "	systemQuery.Access ().AddForeignKey (SystemSchema.UniqueKeyColumnsTableName' fkCol' SystemSchema.UniqueKeyInfoTableName' fkRefCol' "SYSTEM_UNIQUE_FK"); " is 151.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SystemSchema.PrimaryKeyInfoTableName).WithColumn ("id"' PrimitiveTypes.Numeric ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("table"' PrimitiveTypes.String ()).WithColumn ("deferred"' PrimitiveTypes.Numeric ())); " is 333.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SystemSchema.PrimaryKeyColumnsTableName).WithColumn ("pk_id"' PrimitiveTypes.Numeric ()).WithColumn ("column"' PrimitiveTypes.String ()).WithColumn ("seq_no"' PrimitiveTypes.Numeric ())); " is 244.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SystemSchema.ForeignKeyInfoTableName).WithColumn ("id"' PrimitiveTypes.Numeric ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("table"' PrimitiveTypes.String ()).WithColumn ("ref_schema"' PrimitiveTypes.String ()).WithColumn ("ref_table"' PrimitiveTypes.String ()).WithColumn ("update_rule"' PrimitiveTypes.Numeric ()).WithColumn ("delete_rule"' PrimitiveTypes.Numeric ()).WithColumn ("deferred"' PrimitiveTypes.Numeric ())); " is 544.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SystemSchema.ForeignKeyColumnsTableName).WithColumn ("fk_id"' PrimitiveTypes.Numeric ()).WithColumn ("fcolumn"' PrimitiveTypes.String ()).WithColumn ("pcolumn"' PrimitiveTypes.String ()).WithColumn ("seq_no"' PrimitiveTypes.Numeric ())); " is 294.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SystemSchema.UniqueKeyInfoTableName).WithColumn ("id"' PrimitiveTypes.Numeric ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("table"' PrimitiveTypes.String ()).WithColumn ("deferred"' PrimitiveTypes.Numeric ())); " is 332.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SystemSchema.UniqueKeyColumnsTableName).WithColumn ("un_id"' PrimitiveTypes.Numeric ()).WithColumn ("column"' PrimitiveTypes.String ()).WithColumn ("seq_no"' PrimitiveTypes.Numeric ())); " is 243.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (SystemSchema.CheckInfoTableName).WithColumn ("id"' PrimitiveTypes.Numeric ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("table"' PrimitiveTypes.String ()).WithColumn ("expression"' PrimitiveTypes.String ()).WithColumn ("deferred"' PrimitiveTypes.Numeric ()).WithColumn ("serialized_expression"' PrimitiveTypes.Binary ())); " is 443.
Long Statement,Deveel.Data.Sql.Tables,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\SystemBuilderExtensions.cs,OnBuild,The length of the statement  "	builder.Use<IObjectManager> (options => options.With<TableManager> ().HavingKey (DbObjectType.Table).InTransactionScope ()); " is 124.
Long Statement,Deveel.Data.Sql.Tables,CheckViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\CheckViolationException.cs,FormatMessage,The length of the statement  "	return String.Format ("{0} CHECK violation for constraint '{1}' ({2}) on table '{3}'"' deferrability' constraintName' expression' tableName); " is 141.
Long Statement,Deveel.Data.Sql.Tables,DropColumnViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\DropColumnViolationException.cs,FormatMessage,The length of the statement  "	return String.Format ("Attempt to DROP the column '{0}' in table '{1}' that is linked by constraint '{2}' to table '{3}'"' columnName' tableName' constraintName' linkedTableName); " is 179.
Long Statement,Deveel.Data.Sql.Tables,DropTableViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\DropTableViolationException.cs,FormatMessage,The length of the statement  "	return String.Format ("Attempt to DROP the table '{0}' that is linked by the constraint '{1}' to table '{2}'."' tableName' constraintName' linkedTableName); " is 156.
Long Statement,Deveel.Data.Sql.Tables,ForeignKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ForeignKeyViolationException.cs,FormatMessage,The length of the statement  "	return String.Format ("{0} FOREIGN KEY violation for constraint '{1}({2})' referencing '{3}({4})'"' deferrability.AsDebugString ()' constraintName' String.Join ("' "' columnNames)' refTableName' String.Join ("' "' refColumnNames)); " is 231.
Long Statement,Deveel.Data.Sql.Tables,PrimaryKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\PrimaryKeyViolationException.cs,FormatMessage,The length of the statement  "	return String.Format ("{0} PRIMARY KEY violation for constraint '{1}({2})' on table '{3}'."' deferrability.AsDebugString ()' constraintName' String.Join ("' "' columnNames)' tableName); " is 185.
Long Statement,Deveel.Data.Sql.Tables,UniqueKeyViolationException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\UniqueKeyViolationException.cs,FormatMessage,The length of the statement  "	return String.Format ("{0} UNIQUE KEY violation for constraint '{1}({2})' on table '{3}'."' deferrability.AsDebugString ()' constraintName' String.Join ("' "' columnNames)' tableName); " is 184.
Long Statement,Deveel.Data.Sql.Tables,FunctionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\FunctionTable.cs,GetValue,The length of the statement  "		if (cache.TryGetValue (context.Query.Session.Transaction.Database.Name' uniqueId' (int)rowNumber' columnOffset' out cell)) " is 122.
Long Statement,Deveel.Data.Sql.Tables,Row,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\Row.cs,SetValue,The length of the statement  "			throw new ArgumentException (String.Format ("The value of type {0} cannot be casted to column type {1}."' value.Type' columnType)); " is 131.
Long Statement,Deveel.Data.Sql.Tables,Row,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\Row.cs,GetValue,The length of the statement  "		throw new ArgumentException (String.Format ("Could not find column '{0}' in the table '{1}'."' columnName' Table.TableInfo.TableName)); " is 135.
Long Statement,Deveel.Data.Sql.Tables,Row,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\Row.cs,SetValue,The length of the statement  "		throw new ArgumentException (String.Format ("Could not find column '{0}' in the table '{1}'."' columnName' Table.TableInfo.TableName)); " is 135.
Long Statement,Deveel.Data.Sql.Tables,Row,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\Row.cs,SetDefault,The length of the statement  "		throw new InvalidOperationException (String.Format ("Column '{0}' in table '{1}' has no DEFAULT set."' column.ColumnName' Table.TableInfo.TableName)); " is 150.
Long Statement,Deveel.Data.Sql.Tables,Row,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\Row.cs,EvaluateAssignment,The length of the statement  "		throw new ObjectNotFoundException (columnName' String.Format ("Table '{0}' has none column named '{1}': cannot assign."' Table.TableInfo.TableName' columnName)); " is 161.
Long Statement,Deveel.Data.Sql.Tables,TableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableInfo.cs,AddColumn,The length of the statement  "		throw new ArgumentException (String.Format ("The column {0} belongs to another table already ({1})"' column.ColumnName' column.TableInfo.Name)); " is 144.
Long Statement,Deveel.Data.Sql.Tables,TableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableInfo.cs,AddColumn,The length of the statement  "		throw new ArgumentException (String.Format ("Column {0} is already defined in table {1}"' column.ColumnName' TableName)); " is 121.
Long Statement,Deveel.Data.Sql.Tables,TableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableInfo.cs,Deserialize,The length of the statement  "	var objSchemaName = !String.IsNullOrEmpty (catName) ? new ObjectName (new ObjectName (catName)' schemName) : new ObjectName (schemName); " is 136.
Long Statement,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,GetColumn,The length of the statement  "		throw new ArgumentException (String.Format ("The table '{0}' has no columns named '{1}'."' table.TableInfo.TableName' columnName)); " is 131.
Long Statement,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SimpleSelect,The length of the statement  "				throw new InvalidOperationException (String.Format ("Column {0} of type {1} cannot be searched."' colInfo.ColumnName' colInfo.ColumnType)); " is 139.
Long Statement,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectAnyAllNonCorrelated,The length of the statement  "		throw new ArgumentException (String.Format ("The right table has {0} columns that is different from the specified column names ({1})"' rightTable.TableInfo.ColumnCount' leftColumns.Length)); " is 190.
Long Statement,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectAnyAllNonCorrelated,The length of the statement  "			throw new ArgumentException (String.Format ("The type of the sub-query expression {0}({1}) " + "is not compatible with the sub-query type {2}."' leftColumns [i]' leftType' rightType)); " is 184.
Long Statement,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,Subset,The length of the statement  "			throw new InvalidOperationException (String.Format ("The column '{0}' was not found in table '{1}'."' columnName' table.TableInfo.TableName)); " is 142.
Long Statement,Deveel.Data.Sql.Tables,UserContextTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\UserContextTable.cs,ResolveRows,The length of the statement  "	if (!TableName.Equals (ancestor.TableInfo.TableName) && !ancestor.TableInfo.TableName.Equals (Table.TableInfo.TableName)) " is 121.
Long Statement,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,SetUniqueId,The length of the statement  "		throw new ObjectNotFoundException (tableName' String.Format ("Table with name '{0}' could not be found to set the unique id."' tableName)); " is 139.
Long Statement,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,NextUniqueId,The length of the statement  "		throw new ObjectNotFoundException (tableName' String.Format ("Table with name '{0}' could not be found to retrieve unique id."' tableName)); " is 140.
Long Statement,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,CurrentUniqueId,The length of the statement  "		throw new ObjectNotFoundException (tableName' String.Format ("Table with name '{0}' could not be found to retrieve unique id."' tableName)); " is 140.
Long Statement,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,CommitTransactionChange,The length of the statement  "							throw new InvalidOperationException (String.Format ("Record {0} of table {1} was not in an uncommitted state!"' rowIndex' TableName)); " is 134.
Long Statement,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,CommitTransactionChange,The length of the statement  "							throw new InvalidOperationException (String.Format ("Record {0} of table {1} was not in an added state!"' rowIndex' TableName)); " is 128.
Long Statement,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,CreateColumnIndex,The length of the statement  "		if (!column.IsIndexable || (String.IsNullOrEmpty (column.IndexType) || column.IndexType.Equals (DefaultIndexTypes.BlindSearch))) " is 128.
Long Statement,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,CreateIndexAt,The length of the statement  "			throw new InvalidOperationException (String.Format ("An error occurred while creating a colummn for table {0}"' TableName)' ex); " is 128.
Long Statement,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The length of the statement  "		throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e); " is 133.
Long Statement,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,RollbackTransactionChange,The length of the statement  "							throw new InvalidOperationException (String.Format ("Record {0} was not in an uncommitted state."' rowEvent.RowNumber)); " is 120.
Long Statement,Deveel.Data.Sql.Triggers,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\SystemBuilderExtensions.cs,UseTriggersFeature,The length of the statement  "	return builder.UseFeature (feature => feature.Named (SystemFeatureNames.Triggers).WithAssemblyVersion ().OnSystemBuild (OnBuild).OnTableCompositeCreate (OnCompositeCreate)); " is 173.
Long Statement,Deveel.Data.Sql.Triggers,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (TriggerManager.TriggerTableName).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("type"' PrimitiveTypes.Integer ()).WithColumn ("on_object"' PrimitiveTypes.String ()).WithColumn ("time"' PrimitiveTypes.Integer ()).WithColumn ("action"' PrimitiveTypes.Integer ()).WithColumn ("procedure_name"' PrimitiveTypes.String ()).WithColumn ("args"' PrimitiveTypes.Binary ()).WithColumn ("body"' PrimitiveTypes.Binary ()).WithColumn ("status"' PrimitiveTypes.TinyInt ())); " is 576.
Long Statement,Deveel.Data.Sql.Triggers,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\SystemBuilderExtensions.cs,OnBuild,The length of the statement  "	builder.Use<IObjectManager> (options => options.With<TriggerManager> ().HavingKey (DbObjectType.Trigger).InTransactionScope ()).Use<ITableContainer> (options => options.With<OldAndNewTableContainer> ().InTransactionScope ()).Use<ITableContainer> (options => options.With<TriggersTableContainer> ().InTransactionScope ()); " is 321.
Long Statement,Deveel.Data.Sql.Triggers,CallbackTrigger,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\CallbackTrigger.cs,FireTrigger,The length of the statement  "	var e = new TriggerEvent (TriggerType.Callback' TriggerInfo.TriggerName' tableEvent.Table.TableInfo.TableName' tableEvent.EventTime' tableEvent.EventType' tableEvent.OldRowId' tableEvent.NewRow); " is 195.
Long Statement,Deveel.Data.Sql.Triggers,Trigger,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\Trigger.cs,Fire,The length of the statement  "		context.Context.OnEvent (new TriggerEvent (triggerType' Name' tableName' tableEvent.EventTime' tableEvent.EventType' tableEvent.OldRowId' tableEvent.NewRow)); " is 158.
Long Statement,Deveel.Data.Sql.Triggers,Trigger,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\Trigger.cs,Fire,The length of the statement  "		var newState = new OldNewTableState (tableName' tableEvent.OldRowId.RowNumber' tableEvent.NewRow' tableEvent.EventTime == TriggerEventTime.Before); " is 147.
Long Statement,Deveel.Data.Sql.Triggers,TriggerException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerException.cs,FormMessage,The length of the statement  "	return FormMessage (trigger.TriggerInfo.TableName' trigger.TriggerInfo.TriggerName' trigger.TriggerInfo.EventTime' trigger.TriggerInfo.EventType); " is 146.
Long Statement,Deveel.Data.Sql.Triggers,TriggerException,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerException.cs,FormMessage,The length of the statement  "	return String.Format ("An error occurred when firing trigger '{0}' {1} {2} on table '{3}'"' triggerName' eventTime' eventType' tableName); " is 138.
Long Statement,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,OnTableCommit,The length of the statement  "	} else if ((commitEvent.AddedRows != null && commitEvent.AddedRows.Any ()) || (commitEvent.RemovedRows != null && commitEvent.RemovedRows.Any ())) { " is 148.
Long Statement,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,FindTrigger,The length of the statement  "			var t = table.SimpleSelect (context' nameColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (name))); " is 120.
Long Statement,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,FindTrigger,The length of the statement  "			return t.ExhaustiveSelect (context' SqlExpression.Equal (SqlExpression.Reference (schemaColumn)' SqlExpression.Constant (Field.String (schema)))); " is 146.
Long Statement,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,DropTrigger,The length of the statement  "			t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (schemaCol)' SqlExpression.Constant (schemaName))); " is 127.
Long Statement,Deveel.Data.Sql.Types,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SystemBuilderExtensions.cs,UseTypesFeature,The length of the statement  "	return builder.UseFeature (feature => feature.Named (SystemFeatureNames.Types).WithAssemblyVersion ().OnSystemBuild (OnBuild).OnTableCompositeCreate (OnCompositeCreate)); " is 170.
Long Statement,Deveel.Data.Sql.Types,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (TypeManager.TypeTableName).WithColumn ("id"' PrimitiveTypes.Integer ()).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("parent"' PrimitiveTypes.String ()).WithColumn ("sealed"' PrimitiveTypes.Boolean ()).WithColumn ("abstract"' PrimitiveTypes.Boolean ()).WithColumn ("owner"' PrimitiveTypes.String ())); " is 419.
Long Statement,Deveel.Data.Sql.Types,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (TypeManager.TypeMemberTableName).WithColumn ("type_id"' PrimitiveTypes.Integer ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("type"' PrimitiveTypes.String ())); " is 233.
Long Statement,Deveel.Data.Sql.Types,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SystemBuilderExtensions.cs,OnBuild,The length of the statement  "	builder.Use<IObjectManager> (options => options.With<TypeManager> ().HavingKey (DbObjectType.Type).InTransactionScope ()).Use<ITableContainer> (options => options.With<TypesTableContainer> ().InTransactionScope ())//.Use<ITableCompositeCreateCallback>(options => options " is 270.
Long Statement,Deveel.Data.Sql.Types,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SystemBuilderExtensions.cs,OnBuild,The length of the statement  "	.Use<ITypeResolver> (options => options.With<TypeManager> ().InTransactionScope ()).Use<IRoutineResolver> (options => options.With<TypeManager> ().InTransactionScope ()); " is 170.
Long Statement,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,IsBinaryType,The length of the statement  "	return sqlType == SqlTypeCode.Binary || sqlType == SqlTypeCode.VarBinary || sqlType == SqlTypeCode.LongVarBinary || sqlType == SqlTypeCode.Blob; " is 144.
Long Statement,Deveel.Data.Sql.Types,BooleanType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BooleanType.cs,Compare,The length of the statement  "		b = ((SqlNumber)y) == SqlNumber.One ? SqlBoolean.True : ((SqlNumber)y) == SqlNumber.Zero ? SqlBoolean.False : SqlBoolean.Null; " is 126.
Long Statement,Deveel.Data.Sql.Types,DateType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\DateType.cs,ToTime,The length of the statement  "	return new SqlDateTime (0' 0' 0' dateTime.Hour' dateTime.Minute' dateTime.Second' dateTime.Millisecond' dateTime.Offset); " is 121.
Long Statement,Deveel.Data.Sql.Types,DateType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\DateType.cs,CastTo,The length of the statement  "		throw new InvalidCastException (String.Format ("Cannot cast type '{0}' to '{1}'."' sqlType.ToString ().ToUpperInvariant ()' TypeCode.ToString ().ToUpperInvariant ())); " is 167.
Long Statement,Deveel.Data.Sql.Types,DateType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\DateType.cs,IsDateType,The length of the statement  "	return sqlType == SqlTypeCode.Date || sqlType == SqlTypeCode.Time || sqlType == SqlTypeCode.TimeStamp || sqlType == SqlTypeCode.DateTime; " is 137.
Long Statement,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,AssertIsInterval,The length of the statement  "		throw new ArgumentException (String.Format ("SQL Type {0} is not a valid INTERVAL."' sqlType.ToString ().ToUpperInvariant ())); " is 127.
Long Statement,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,IsNumericType,The length of the statement  "	return typeCode == SqlTypeCode.TinyInt || typeCode == SqlTypeCode.SmallInt || typeCode == SqlTypeCode.Integer || typeCode == SqlTypeCode.BigInt || typeCode == SqlTypeCode.Real || typeCode == SqlTypeCode.Float || typeCode == SqlTypeCode.Double || typeCode == SqlTypeCode.Decimal || typeCode == SqlTypeCode.Numeric; " is 313.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (sqlType == SqlTypeCode.Unknown || sqlType == SqlTypeCode.Type || sqlType == SqlTypeCode.QueryPlan || sqlType == SqlTypeCode.Object) " is 135.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (name.EndsWith ("%TYPE"' StringComparison.OrdinalIgnoreCase) || name.EndsWith ("%ROWTYPE"' StringComparison.OrdinalIgnoreCase)) " is 130.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (name.Equals ("NUMERIC"' StringComparison.OrdinalIgnoreCase) || name.Equals ("STRING"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DATE"' StringComparison.OrdinalIgnoreCase) || name.Equals ("NULL"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BOOLEAN"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BINARY"' StringComparison.OrdinalIgnoreCase)) " is 371.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (name.Equals ("BIT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BOOLEAN"' StringComparison.OrdinalIgnoreCase)) " is 123.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (name.Equals ("TINYINT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("SMALLINT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("INTEGER"' StringComparison.OrdinalIgnoreCase) || name.Equals ("INT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BIGINT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("REAL"' StringComparison.OrdinalIgnoreCase) || name.Equals ("FLOAT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DOUBLE"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DECIMAL"' StringComparison.OrdinalIgnoreCase)) " is 558.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (name.Equals ("DATE"' StringComparison.OrdinalIgnoreCase) || name.Equals ("TIME"' StringComparison.OrdinalIgnoreCase) || name.Equals ("TIMESTAMP"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DATETIME"' StringComparison.OrdinalIgnoreCase)) " is 250.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (name.Equals ("YEAR TO MONTH"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DAY TO SECOND"' StringComparison.OrdinalIgnoreCase) || name.Equals ("INTERVAL"' StringComparison.OrdinalIgnoreCase)) " is 203.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (name.Equals ("CHAR"' StringComparison.OrdinalIgnoreCase) || name.Equals ("VARCHAR"' StringComparison.OrdinalIgnoreCase) || name.Equals ("LONGVARCHAR"' StringComparison.OrdinalIgnoreCase) || name.Equals ("CLOB"' StringComparison.OrdinalIgnoreCase)) " is 251.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The length of the statement  "	if (name.Equals ("BINARY"' StringComparison.OrdinalIgnoreCase) || name.Equals ("VARBINARY"' StringComparison.OrdinalIgnoreCase) || name.Equals ("LONGVARBINARY"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BLOB"' StringComparison.OrdinalIgnoreCase)) " is 257.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The length of the statement  "	if (sqlType == SqlTypeCode.Numeric || sqlType == SqlTypeCode.TinyInt || sqlType == SqlTypeCode.SmallInt || sqlType == SqlTypeCode.Integer || sqlType == SqlTypeCode.BigInt || sqlType == SqlTypeCode.Real || sqlType == SqlTypeCode.Double || sqlType == SqlTypeCode.Float || sqlType == SqlTypeCode.Decimal) { " is 303.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The length of the statement  "	if (sqlType == SqlTypeCode.Char || sqlType == SqlTypeCode.VarChar || sqlType == SqlTypeCode.LongVarChar || sqlType == SqlTypeCode.String || sqlType == SqlTypeCode.Clob) { " is 170.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The length of the statement  "	if (sqlType == SqlTypeCode.Binary || sqlType == SqlTypeCode.VarBinary || sqlType == SqlTypeCode.LongVarBinary || sqlType == SqlTypeCode.Blob) { " is 143.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The length of the statement  "	if (sqlType == SqlTypeCode.Date || sqlType == SqlTypeCode.Time || sqlType == SqlTypeCode.TimeStamp || sqlType == SqlTypeCode.DateTime) " is 134.
Long Statement,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,FromType,The length of the statement  "	throw new NotSupportedException (System.String.Format ("The runtime type '{0}' is not supported as SQL type (yet)."' type)); " is 124.
Long Statement,Deveel.Data.Sql.Types,SqlType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SqlType.cs,Parse,The length of the statement  "			throw new NotSupportedException (String.Format ("The type '{0}' is not primitive and no resolve context is provided."' info.TypeName)); " is 135.
Long Statement,Deveel.Data.Sql.Types,SqlType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SqlType.cs,Parse,The length of the statement  "		return context.TypeResolver ().ResolveType (new TypeResolveContext (SqlTypeCode.Unknown' info.TypeName' info.Metadata)); " is 120.
Long Statement,Deveel.Data.Sql.Types,SqlType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SqlType.cs,SerializeObject,The length of the statement  "	throw new NotSupportedException (String.Format ("Type {0} cannot serialize object of type {1}."' GetType ()' obj.GetType ())); " is 126.
Long Statement,Deveel.Data.Sql.Types,SqlType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\SqlType.cs,CreateFrom,The length of the statement  "	throw new NotSupportedException (String.Format ("The type {0} does not support runtime object conversion."' ToString ())); " is 122.
Long Statement,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,DateErrorMessage,The length of the statement  "	return String.Format ("The input string {0} of type {1} is not compatible with any of the formats for SQL Type {2} ( {3} )"' str' TypeCode.ToString ().ToUpperInvariant ()' sqlType.ToString ().ToUpperInvariant ()' String.Join ("' "' formats)); " is 242.
Long Statement,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,ToBoolean,The length of the statement  "	throw new InvalidCastException (String.Format ("Could not convert string '{0}' of type '{1}' to BOOLEAN"' s' TypeCode.ToString ().ToUpperInvariant ())); " is 152.
Long Statement,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,CanCastTo,The length of the statement  "	return destType.TypeCode != SqlTypeCode.Array && destType.TypeCode != SqlTypeCode.Object && destType.TypeCode != SqlTypeCode.Blob; " is 130.
Long Statement,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,CastTo,The length of the statement  "				throw new InvalidCastException (String.Format ("The source object is too large ({0} bytes) for the destination type '{1}'"' clob.Length' destStringType)); " is 154.
Long Statement,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,CastTo,The length of the statement  "				throw new InvalidCastException (String.Format ("The source object is too large ({0} bytes) for the destination type '{1}'"' clob.Length' destBinaryType)); " is 154.
Long Statement,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The length of the statement  "		throw new FormatException (String.Format ("The object of type '{0}' is not handled by {1}"' obj.GetType ()' ToString ())); " is 122.
Long Statement,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,IsStringType,The length of the statement  "	return typeCode == SqlTypeCode.String || typeCode == SqlTypeCode.VarChar || typeCode == SqlTypeCode.Char || typeCode == SqlTypeCode.LongVarChar || typeCode == SqlTypeCode.Clob; " is 176.
Long Statement,Deveel.Data.Sql.Types,TypeSerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeSerializer.cs,SerializeTo,The length of the statement  "			throw new NotSupportedException (String.Format ("The data type '{0}' cannot be serialized."' type.GetType ().FullName)); " is 120.
Long Statement,Deveel.Data.Sql.Types,UserType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\UserType.cs,NewObject,The length of the statement  "			throw new ArgumentException (String.Format ("Invalid number of arguments provided to construct an object of type '{0}'."' FullName)); " is 133.
Long Statement,Deveel.Data.Sql.Types,UserType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\UserType.cs,NewObject,The length of the statement  "				throw new InvalidOperationException (String.Format ("The input argument is not compatible with the type '{0}' of member '{1}'."' member.MemberType' member.MemberName)); " is 168.
Long Statement,Deveel.Data.Sql.Types,UserTypeInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\UserTypeInfo.cs,AddMember,The length of the statement  "		throw new ArgumentException (String.Format ("Cannot add member '{0}' of type '{1}' to type '{2}'."' member.MemberName' member.MemberType' TypeName)); " is 149.
Long Statement,Deveel.Data.Sql.Types,UserTypeInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\UserTypeInfo.cs,AddMember,The length of the statement  "		throw new ArgumentException (String.Format ("A member named '{0}' is already present in type '{1}'."' member.MemberName' member.MemberType)); " is 141.
Long Statement,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The length of the statement  "				t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name))); " is 122.
Long Statement,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The length of the statement  "						throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName)); " is 155.
Long Statement,Deveel.Data.Sql.Variables,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Variables\ContextExtensions.cs,DeclareVariable,The length of the statement  "		throw new InvalidOperationException (String.Format ("Variable '{0}' already defined in the context hierarchy."' variableInfo.VariableName)); " is 140.
Long Statement,Deveel.Data.Sql.Variables,Variable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Variables\Variable.cs,SetValue,The length of the statement  "			throw new ArgumentException (String.Format ("Trying to assign a value of type '{0}' to a variable of type '{1}'."' value.Type' Type)); " is 134.
Long Statement,Deveel.Data.Sql.Views,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\SystemBuilderExtensions.cs,UseViewsFeature,The length of the statement  "	return builder.UseFeature (feature => feature.Named (SystemFeatureNames.Views).WithAssemblyVersion ().OnSystemBuild (OnBuild).OnTableCompositeCreate (OnCompositeCreate)); " is 170.
Long Statement,Deveel.Data.Sql.Views,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\SystemBuilderExtensions.cs,OnCompositeCreate,The length of the statement  "	systemQuery.Access ().CreateTable (table => table.Named (ViewManager.ViewTableName).WithColumn ("schema"' PrimitiveTypes.String ()).WithColumn ("name"' PrimitiveTypes.String ()).WithColumn ("query"' PrimitiveTypes.String ()).WithColumn ("plan"' PrimitiveTypes.Binary ())); " is 272.
Long Statement,Deveel.Data.Sql.Views,SystemBuilderExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\SystemBuilderExtensions.cs,OnBuild,The length of the statement  "	builder.Use<IObjectManager> (options => options.With<ViewManager> ().InTransactionScope ().HavingKey (DbObjectType.View)).Use<ITableContainer> (options => options.With<ViewTableContainer> ().InTransactionScope ()); " is 214.
Long Statement,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,FindViewEntry,The length of the statement  "			var t = table.SimpleSelect (query' namev' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (viewName.Name))); " is 122.
Long Statement,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,FindViewEntry,The length of the statement  "			t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (schemav)' SqlExpression.Constant (viewName.ParentName))); " is 134.
Long Statement,Deveel.Data.Sql,ExecutionContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\ExecutionContext.cs,Raise,The length of the statement  "			throw new InvalidOperationException (String.Format ("Exception '{0}' was not declared in the context."' exceptionName)); " is 120.
Long Statement,Deveel.Data.Sql,ExecutionContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\ExecutionContext.cs,Raise,The length of the statement  "		throw new StatementException (declared.ErrorCode' String.Format ("Declared exception '{0}' explicitly risen from code"' exceptionName)); " is 136.
Long Statement,Deveel.Data.Sql,ExecutionContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\ExecutionContext.cs,Control,The length of the statement  "		throw new StatementException (String.Format ("Could not control {0} any loop."' controlType.ToString ().ToUpperInvariant ())); " is 126.
Long Statement,Deveel.Data.Sql,ExceptionHandler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\ExceptionHandler.cs,Handles,The length of the statement  "	return Handled.ExceptionNames.Any (x => String.Equals (x' exceptionName' StringComparison.OrdinalIgnoreCase)) || Handled.IsForOthers; " is 133.
Long Statement,Deveel.Data.Sql,GroupOperatorHelper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\GroupOperatorHelper.cs,Evaluate,The length of the statement  "		throw new ExpressionEvaluateException (String.Format ("The type {0} is not a binary expression or is not supported."' binaryType)); " is 131.
Long Statement,Deveel.Data.Sql,Field,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\Field.cs,Date,The length of the statement  "	var offset = new SqlDayToSecond (value.Offset.Days' value.Offset.Hours' value.Offset.Minutes' value.Offset.Seconds' value.Offset.Milliseconds); " is 143.
Long Statement,Deveel.Data.Sql,Field,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\Field.cs,Date,The length of the statement  "	var sqlDate = new SqlDateTime (value.Year' value.Month' value.Day' value.Hour' value.Minute' value.Second' value.Millisecond' offset); " is 134.
Long Statement,Deveel.Data.Store,ScatteringFileStoreDataFactory,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ScatteringFileStoreDataFactory.cs,Configure,The length of the statement  "		throw new DatabaseConfigurationException (String.Format ("File system '{0}' was not found in context."' fileSystemName)); " is 121.
Long Statement,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,Configure,The length of the statement  "		throw new DatabaseConfigurationException (String.Format ("The file-system '{0}' was not found in context."' fileSystemName)); " is 125.
Long Statement,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,OpenOrCreateFile,The length of the statement  "		throw new InvalidOperationException (string.Format ("The file '{0}' does not exist and the store is configured to be read-only."' FileName)); " is 141.
Long Statement,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,CheckOffset,The length of the statement  "		throw new IOException (String.Format ("The offset is out of range ({0} > {1} > {2})"' DataAreaOffset' offset' DataAreaEndOffset)); " is 130.
Long Statement,Deveel.Data,ServiceUseOptions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\ServiceUseOptions.cs,CheckImplementationType,The length of the statement  "		throw new ArgumentException (String.Format ("The type '{0}' is not assignable from service type '{1}'."' type' ServiceType)); " is 125.
Long Statement,Deveel.Data,ServiceUseOptions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\ServiceUseOptions.cs,CheckInstanceValue,The length of the statement  "		throw new ArgumentException (String.Format ("The provided instance is not assignable from service type '{0}'"' ServiceType)); " is 125.
Long Statement,Deveel.Data,ServiceUseOptions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\ServiceUseOptions.cs,Validate,The length of the statement  "			throw new InvalidOperationException (String.Format ("The type '{0}' is not instantiable and no implementation was specified"' ServiceType)); " is 140.
Long Statement,Deveel.Data,Database,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\Database.cs,DiscoverDataVersion,The length of the statement  "	var dataVerion = Attribute.GetCustomAttribute (typeof(Database).Assembly' typeof(DataVersionAttribute)) as DataVersionAttribute; " is 128.
Long Statement,Deveel.Data,Database,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\Database.cs,OnDatabaseCreate,The length of the statement  "			context.OnError (new Exception (String.Format ("Feature '{0}' (v{1}) caused an error on Database-Create event."' feature.FeatureName' feature.Version)' ex)); " is 157.
Long Statement,Deveel.Data,Database,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\Database.cs,OnDatabaseCreated,The length of the statement  "			context.OnError (new Exception (String.Format ("Feature '{0}' (v{1}) caused an error on Database-Created event."' feature.FeatureName' feature.Version)' ex)); " is 158.
Long Statement,Deveel.Data,DatabaseContext,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\DatabaseContext.cs,InitStorageSystem,The length of the statement  "			throw new DatabaseConfigurationException (String.Format ("The storage system '{0}' for the database was not set."' storageTypeName)); " is 133.
Long Statement,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,AddForeignKey,The length of the statement  "	query.AddConstraint (tableName' SqlTableConstraint.ForeignKey (constraintName' columnNames' foreignTableName.FullName' foreignColumns' onDelete' onUpdate)); " is 156.
Long Statement,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateUser,The length of the statement  "	query.ExecuteStatement (new CreateUserStatement (userName' new Sql.Statements.SqlUserIdentifier (SqlIdentificationType.Password' password))); " is 141.
Long Statement,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateProcedureTrigger,The length of the statement  "	query.ExecuteStatement (new CreateProcedureTriggerStatement (triggerName' tableName' procedureName' procedureArgs' eventTime' eventType)); " is 138.
Long Statement,Deveel.Data,QueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\QueryExtensions.cs,CreateProcedureTrigger,The length of the statement  "	query.ExecuteStatement (new CreateProcedureTriggerStatement (triggerName' tableName' procedureName' args' eventTime' eventType)); " is 129.
Long Statement,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,ExecuteStatements,The length of the statement  "				throw new InvalidOperationException (String.Format ("The preparation of the statement '{0}' returned a null instance"' statement.GetType ())); " is 142.
Long Statement,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,Call,The length of the statement  "	return request.Call (procedureName' args == null ? new InvokeArgument[0] : args.Select (x => new InvokeArgument (x)).ToArray ()); " is 129.
Long Statement,Deveel.Data,RequestExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\RequestExtensions.cs,SelectInto,The length of the statement  "	request.SelectInto (query' SqlExpression.Tuple (variableNames.Select (SqlExpression.VariableReference).Cast<SqlExpression> ().ToArray ())); " is 139.
Long Statement,Deveel.Data,DatabaseExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\DatabaseExtensions.cs,CreateSession,The length of the statement  "		throw new InvalidOperationException (String.Format ("Unable to create a session for user '{0}': not authenticated."' userName)); " is 128.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddForeignKey,The length of the statement  "	AddForeignKey (table' columns' refTable' refColumns' deleteRule' updateRule' ConstraintDeferrability.InitiallyImmediate' constraintName); " is 137.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddForeignKey,The length of the statement  "	Session.Transaction.AddForeignKey (table' columns' refTable' refColumns' deleteRule' updateRule' deferred' constraintName); " is 123.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddForeignKey,The length of the statement  "	AddForeignKey (table' columns' refTable' refColumns' ForeignKeyAction.Cascade' ForeignKeyAction.Cascade' deferred' constraintName); " is 131.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,AddConstraint,The length of the statement  "		AddForeignKey (tableName' constraintInfo.ColumnNames' constraintInfo.ForeignTable' constraintInfo.ForeignColumnNames' constraintInfo.OnDelete' constraintInfo.OnUpdate' constraintInfo.ConstraintName); " is 199.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,ResolveTableName,The length of the statement  "		throw new InvalidOperationException (String.Format ("The default schema of the session '{0}' is not defined in the database."' schema)); " is 136.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,ResolveFieldType,The length of the statement  "			throw new InvalidOperationException (String.Format ("Could not resolve the variable '{0}' in the context."' fieldName)); " is 120.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,ResolveFieldType,The length of the statement  "		throw new InvalidOperationException (String.Format ("The object '{0}' does not allows field determination."' obj.ObjectInfo.FullName)); " is 135.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,ResolveFieldType,The length of the statement  "		throw new InvalidOperationException (String.Format ("Could not find the field '{0}' in the object '{1}'."' fieldName.Name' obj.ObjectInfo.FullName)); " is 149.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,ResolveRowType,The length of the statement  "		throw new InvalidOperationException (String.Format ("The object '{0}' does not allows field determination."' obj.ObjectInfo.FullName)); " is 135.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,CreateUser,The length of the statement  "		throw new ArgumentException (String.Format ("User name '{0}' is reserved and cannot be registered."' User.PublicName)' "userName"); " is 131.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,CreateUser,The length of the statement  "		throw new ArgumentException (String.Format ("User name '{0}' is invalid: cannot start with '{1}' character."' userName' c)' "userName"); " is 136.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,Authenticate,The length of the statement  "			throw new SecurityException (String.Format ("The user '{0}' was identified by '{1}' but the identifier cannot be found in the context."' userInfo.Name' userId.Method)); " is 168.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,GetPrivileges,The length of the statement  "			PrivilegesCache.Set (new GrantCacheKey (g.Grantee' g.ObjectType' g.ObjectName.FullName' g.WithOption' true)' g.Privileges); " is 123.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,RevokeAllGrantsOn,The length of the statement  "			PrivilegesCache.Remove (new GrantCacheKey (grant.Grantee' grant.ObjectType' grant.ObjectName.FullName' grant.WithOption' false)); " is 129.
Long Statement,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,RevokeAllGrantsFrom,The length of the statement  "			PrivilegesCache.Remove (new GrantCacheKey (grant.Grantee' grant.ObjectType' grant.ObjectName.FullName' grant.WithOption' false)); " is 129.
Long Statement,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,SetupSystem,The length of the statement  "							query.Context.OnError (new Exception (String.Format ("The feature {0} (v{1}) caused an error on Composite-Setup event."' feature.FeatureName' feature.Version)' ex)); " is 165.
Long Statement,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,CreateTableSource,The length of the statement  "			throw new InvalidOperationException (String.Format ("Unable to create source for table '{0}'."' tableInfo.TableName)' e); " is 121.
Long Statement,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,GetTableSource,The length of the statement  "			throw new ObjectNotFoundException (String.Format ("Could not find any source for table with id {0} in this composite."' tableId)); " is 130.
Long Statement,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,CopySourceTable,The length of the statement  "			throw new Exception (String.Format ("Unable to copy source table '{0}' because of an error."' tableSource.TableInfo.TableName)' e); " is 131.
Long Statement,Deveel.Data.Mapping,Mapper,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Mapping\Mapper.cs,GetMemberMapInfo,The length of the statement  "		throw new NotSupportedException (String.Format ("The member '{0}' is marked as NULL but is not nullable."' memberInfo.Name)); " is 125.
Long Statement,Deveel.Data.Mapping,MemberMapInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Mapping\MemberMapInfo.cs,SetValue,The length of the statement  "		throw new InvalidOperationException (String.Format ("The source table '{0}' has no column named '{1}'."' row.Table.TableInfo.TableName' ColumnName)); " is 149.
Long Statement,Deveel.Data.Mapping,MemberMapInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Mapping\MemberMapInfo.cs,SetValue,The length of the statement  "			throw new InvalidOperationException (String.Format ("Cannot set NULL to the non-nullable field '{0}' of {1}."' Member.Name' Member.DeclaringType)); " is 147.
Long Statement,Deveel.Data.Mapping,TypeMapInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Mapping\TypeMapInfo.cs,ToObject,The length of the statement  "	var ctor = Type.GetConstructors (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).FirstOrDefault (x => x.GetParameters ().Length == 0); " is 156.
Long Statement,Deveel.Data.Sql.Cursors,ContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Cursors\ContextExtensions.cs,DeclareCursor,The length of the statement  "		throw new InvalidOperationException (String.Format ("A cursor named '{0}' was already defined in the context."' cursorInfo.CursorName)); " is 136.
Long Statement,Deveel.Data.Sql.Cursors,Cursor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Cursors\Cursor.cs,FetchIntoVatiable,The length of the statement  "		throw new FetchException (CursorInfo.CursorName' "The destination number of variables does not match the source number of columns."); " is 133.
Long Statement,Deveel.Data.Sql.Cursors,Cursor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Cursors\Cursor.cs,FetchIntoVatiable,The length of the statement  "			throw new FetchException (CursorInfo.CursorName' String.Format ("The value of column '{0}' is not compatible with the type of the destination variable '{1}'."' columnInfo.FullColumnName' varName)); " is 197.
Long Statement,Deveel.Data.Sql.Cursors,Cursor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Cursors\Cursor.cs,GetEnumerator,The length of the statement  "		throw new InvalidOperationException (String.Format ("Another enumeration is currently going on cursor '{0}': cannot double enumerate."' CursorInfo.CursorName)); " is 160.
Long Statement,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,EvaluateBinary,The length of the statement  "		throw new ExpressionEvaluateException (String.Format ("The type {0} is not a binary expression or is not supported."' binaryType)); " is 131.
Long Statement,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,VisitCast,The length of the statement  "		throw new ExpressionEvaluateException (String.Format ("Cannot CAST an expression of type {0}."' valueExp.ExpressionType)); " is 122.
Long Statement,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,VisitFunctionCall,The length of the statement  "		throw new ExpressionEvaluateException (String.Format ("Could not evaluate function expression '{0}' because of an error."' expression)' ex); " is 140.
Long Statement,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,VisitReference,The length of the statement  "		throw new ExpressionEvaluateException (String.Format ("A resolver is required to dereference variable '{0}'."' refName)); " is 121.
Long Statement,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,VisitReference,The length of the statement  "		throw new ExpressionEvaluateException (String.Format ("An error occurred while trying to dereference '{0}' to a constant value"' refName)' ex); " is 143.
Long Statement,Deveel.Data.Sql.Expressions,ExpressionEvaluatorVisitor,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\ExpressionEvaluatorVisitor.cs,VisitVariableReference,The length of the statement  "		throw new ExpressionEvaluateException (String.Format ("Cannot dereference variable {0} outside a query context"' refName)); " is 123.
Long Statement,Deveel.Data.Sql.Expressions,SqlExpressionTypeExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\SqlExpressionTypeExtensions.cs,Reverse,The length of the statement  "	if (type == SqlExpressionType.Equal || type == SqlExpressionType.NotEqual || type == SqlExpressionType.Is || type == SqlExpressionType.IsNot) " is 141.
Long Statement,Deveel.Data.Sql.Expressions,SqlExpression,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\SqlExpression.cs,FunctionCall,The length of the statement  "	var invokeArgs = args != null && args.Length > 0 ? args.Select (x => new InvokeArgument (x)).ToArray () : new InvokeArgument[0]; " is 128.
Long Statement,Deveel.Data.Sql.Objects,SqlBoolean,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlBoolean.cs,CompareTo,The length of the statement  "			throw new ArgumentOutOfRangeException ("other"' "The given numeric value is out of range for a comparison with SQL BOOLEAN."); " is 126.
Long Statement,Deveel.Data.Sql.Objects,SqlBoolean,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlBoolean.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format ("Object of type {0} cannot be compared to SQL BOOLEAN"' other.GetType ().FullName)); " is 128.
Long Statement,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,TryParseTime,The length of the statement  "	if (DateTimeOffset.TryParseExact (s' SqlTimeFormats' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal' out date)) { " is 127.
Long Statement,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,TryParseTimeStamp,The length of the statement  "	if (DateTimeOffset.TryParseExact (s' SqlTimeStampFormats' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal' out date)) { " is 132.
Long Statement,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,TryParseTimeStamp,The length of the statement  "		value = new SqlDateTime (date.Year' date.Month' date.Day' date.Hour' date.Minute' date.Second' date.Millisecond' offset); " is 121.
Long Statement,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,ToByteArray,The length of the statement  "	return State == NumericState.None ? innerValue.MovePointRight (innerValue.Scale).ToBigInteger ().ToByteArray () : new byte[0]; " is 126.
Long Statement,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,TryParse,The length of the statement  "	if (string.Equals (s' "+Infinity"' StringComparison.OrdinalIgnoreCase) || string.Equals (s' "+Inf"' StringComparison.OrdinalIgnoreCase) || string.Equals (s' "Infinity"' StringComparison.OrdinalIgnoreCase)) { " is 207.
Long Statement,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,TryParse,The length of the statement  "	if (string.Equals (s' "-Infinity"' StringComparison.OrdinalIgnoreCase) || string.Equals (s' "-Inf"' StringComparison.OrdinalIgnoreCase)) { " is 138.
Long Statement,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,TryParse,The length of the statement  "	if (string.Equals (s' "NaN"' StringComparison.OrdinalIgnoreCase) || string.Equals (s' "NotANumber"' StringComparison.OrdinalIgnoreCase)) { " is 138.
Long Statement,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,DeserializeType,The length of the statement  "			throw new NotSupportedException (String.Format ("The type '{0}' does not specify any default empty constructor."' graphType)); " is 126.
Long Statement,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,DeserializeType,The length of the statement  "	var fields = graphType.GetFields (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where (member => !member.IsDefined (typeof(NonSerializedAttribute)' false)); " is 180.
Long Statement,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,DeserializeType,The length of the statement  "	var properties = graphType.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where (member => member.CanWrite && !member.IsDefined (typeof(NonSerializedAttribute)' false)); " is 207.
Long Statement,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,CustomDeserialize,The length of the statement  "		throw new NotSupportedException (String.Format ("The type '{0}' has not the special serialization constructor"' graphType)); " is 124.
Long Statement,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,GetSpecialConstructor,The length of the statement  "		if (paramTypes.Length == 2 && paramTypes [0] == typeof(SerializationInfo) && paramTypes [1] == typeof(StreamingContext)) " is 120.
Long Statement,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,GetObjectValues,The length of the statement  "	var fields = objType.GetFields (BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where (x => !x.IsDefined (typeof(NonSerializedAttribute)' false) && !x.Name.EndsWith ("_BackingField")); " is 206.
Long Statement,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,GetObjectValues,The length of the statement  "	var properties = objType.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where (x => !x.IsDefined (typeof(NonSerializedAttribute)' false) && x.CanRead); " is 189.
Long Statement,Deveel.Data.Store.Journaled,JournaledStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledStoreSystem.cs,Configure,The length of the statement  "		throw new ArgumentException (String.Format ("The data factory '{0}' could not be resolved in this context."' dataFactoryName)); " is 127.
Long Statement,Deveel.Data.Store.Journaled,JournaledStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledStoreSystem.cs,Configure,The length of the statement  "		throw new DatabaseConfigurationException (String.Format ("The file-system '{0}' is not found in this context."' fsName)); " is 121.
Long Statement,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,RollForwardRecover,The length of the statement  "				throw new IOException ("Journal file " + f + " exists for a read-only session.  " + "There may not be any pending journals for a Read-only session."); " is 150.
Long Statement,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,PersistPageModification,The length of the statement  "	JournaledSystem.Context.OnDebug (String.Format ("Jounral Command: Page Change {0} page= {1} offset = {2} length = {3}"' resourceName' page' off' len)); " is 151.
Long Statement,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The length of the statement  "			throw new IOException (String.Format ("The page number '{0}' does not match the number of the page to build ('{1}')"' pageNumber' buildPageNumber)); " is 148.
Long Statement,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,AddRow,The length of the statement  "		throw new InvalidOperationException (String.Format ("Unknown error when adding a row to the table '{0}'."' TableInfo.TableName)' ex); " is 133.
Long Statement,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,ExecuteUpdateReferentialAction,The length of the statement  "			throw new ForeignKeyViolationException (constraint.TableName' constraint.ConstraintName' constraint.ColumnNames' constraint.ForeignTable' constraint.ForeignColumnNames' constraint.Deferred); " is 190.
Long Statement,Deveel.Data.Transactions,TransactionTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTable.cs,ExecuteDeleteReferentialAction,The length of the statement  "			throw new ForeignKeyViolationException (constraint.TableName' constraint.ConstraintName' constraint.ColumnNames' constraint.ForeignTable' constraint.ForeignColumnNames' constraint.Deferred); " is 190.
Long Statement,Deveel.Data.Transactions,Lock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\Lock.cs,ToDebugString,The length of the statement  "	return String.Format ("LOCK {0} ON {1} IN {2} MODE"' AccessType.ToString ().ToUpperInvariant ()' objName' Mode.ToString ().ToUpperInvariant ()); " is 144.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The length of the statement  "	AddForeignKey (transaction' table' columns' refTable' refColumns' deleteRule' updateRule' ConstraintDeferrability.InitiallyImmediate' constraintName); " is 150.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The length of the statement  "	AddForeignKey (transaction' table' columns' refTable' refColumns' ConstraintDeferrability.InitiallyImmediate' constraintName); " is 126.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The length of the statement  "	AddForeignKey (transaction' table' columns' refTable' refColumns' ForeignKeyAction.NoAction' ForeignKeyAction.NoAction' deferred' constraintName); " is 146.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The length of the statement  "			throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable)); " is 146.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,IsUniqueColumns,The length of the statement  "			throw new InvalidOperationException ("Assertion failed: We must be able to find the " + "row we are testing uniqueness against!"); " is 130.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,The length of the statement  "			if (primaryKey != null && (deferred == ConstraintDeferrability.InitiallyDeferred || primaryKey.Deferred == ConstraintDeferrability.InitiallyImmediate)) { " is 153.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,The length of the statement  "				if (deferred == ConstraintDeferrability.InitiallyDeferred || unique.Deferred == ConstraintDeferrability.InitiallyImmediate) { " is 125.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,The length of the statement  "				if (deferred == ConstraintDeferrability.InitiallyDeferred || reference.Deferred == ConstraintDeferrability.InitiallyImmediate) { " is 128.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,The length of the statement  "						int rowCount = RowCountOfReferenceTable (transaction' rowIndex' reference.TableName' reference.ColumnNames' reference.ForeignTable' reference.ForeignColumnNames' false); " is 169.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,The length of the statement  "							throw new ForeignKeyViolationException (tableName' reference.ConstraintName' reference.ColumnNames' reference.ForeignTable' reference.ForeignColumnNames' deferred); " is 164.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckAddConstraintViolations,The length of the statement  "				if (deferred == ConstraintDeferrability.InitiallyDeferred || check.Deferred == ConstraintDeferrability.InitiallyImmediate) { " is 124.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckRemoveConstraintViolations,The length of the statement  "		if (deferred == ConstraintDeferrability.InitiallyDeferred || reference.Deferred == ConstraintDeferrability.InitiallyImmediate) { " is 128.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckRemoveConstraintViolations,The length of the statement  "				int rowCount = RowCountOfReferenceTable (transaction' rowIndex' reference.ForeignTable' reference.ForeignColumnNames' reference.TableName' reference.ColumnNames' true); " is 168.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,CheckRemoveConstraintViolations,The length of the statement  "					throw new ForeignKeyViolationException (tableName' reference.ConstraintName' reference.ColumnNames' reference.ForeignTable' reference.ForeignColumnNames' deferred); " is 164.
Long Statement,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The length of the statement  "		var refTableName = new ObjectName (new ObjectName (t.GetValue (rowIndex' 4).Value.ToString ())' t.GetValue (rowIndex' 5).Value.ToString ()); " is 140.
Long Statement,Deveel.Data.Transactions,Transaction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\Transaction.cs,Enter,The length of the statement  "		var tables = lockables.OfType<IDbObject> ().Where (x => x.ObjectInfo.ObjectType == DbObjectType.Table).Select (x => x.ObjectInfo.FullName); " is 139.
Long Statement,Deveel.Data.Transactions,TransactionExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionExtensions.cs,CreateObject,The length of the statement  "		throw new InvalidOperationException (String.Format ("Could not find any manager for object type '{0}' configured for the system."' objInfo.ObjectType)); " is 152.
Long Statement,Deveel.Data.Transactions,TransactionExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionExtensions.cs,CreateObject,The length of the statement  "		throw new ArgumentException (String.Format ("Could not create an object of type '{0}' with the manager '{1}' (supported '{2}' type)"' objInfo.ObjectType' manager.GetType ().FullName' manager.ObjectType)); " is 204.
Long Statement,Deveel.Data.Transactions,TransactionWork,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionWork.cs,FireChangeEvents,The length of the statement  "			Transaction.OnEvent (new TableCommitEvent (tableName' tableInfo.Master.TableId' tableInfo.NormalizedAddedRows' tableInfo.NormalizedRemovedRows)); " is 145.
Long Statement,Deveel.Data.Transactions,TransactionWork,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionWork.cs,CheckConstraintViolations,The length of the statement  "			checkTransaction.CheckRemoveConstraintViolations (changedTableSource [i]' normalizedRemovedRows' ConstraintDeferrability.InitiallyDeferred); " is 140.
Long Statement,Deveel.Data.Transactions,TransactionWork,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionWork.cs,CheckConstraintViolations,The length of the statement  "			checkTransaction.CheckAddConstraintViolations (changedTableSource [i]' normalizedAddedRows' ConstraintDeferrability.InitiallyDeferred); " is 135.
Long Statement,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,CreateMappedBlocks,The length of the statement  "			blocks [i] = StoreIndex.NewMappedBlock (indexSetStore' firstEntry' lastEntry' blockPointer' elementCount' type' BlockSize); " is 123.
Long Statement,Deveel.Data.Index,SystemContextExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\SystemContextExtensions.cs,CreateColumnIndex,The length of the statement  "		throw new NotSupportedException (String.Format ("None index factory for type '{0}' was configured in the system."' indexType)); " is 127.
Long Statement,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,The length of the statement  "	bool inclusive = op == SqlExpressionType.Is || op == SqlExpressionType.Equal || op == SqlExpressionType.GreaterOrEqualThan || op == SqlExpressionType.SmallerOrEqualThan; " is 169.
Long Statement,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,The length of the statement  "	if (op == SqlExpressionType.Is || op == SqlExpressionType.Equal || op == SqlExpressionType.GreaterThan || op == SqlExpressionType.GreaterOrEqualThan) { " is 151.
Long Statement,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,The length of the statement  "	if (op == SqlExpressionType.Is || op == SqlExpressionType.Equal || op == SqlExpressionType.SmallerThan || op == SqlExpressionType.SmallerOrEqualThan) { " is 151.
Long Statement,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,The length of the statement  "		if ((c == 0 && (startPosition == RangeFieldOffset.AfterLastValue || endPosition == RangeFieldOffset.BeforeFirstValue)) || c > 0) { " is 130.
Long Statement,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,ChangeRangeSizeToEncompass,The length of the statement  "			if (c > 0 || c == 0 && startPosition1 == RangeFieldOffset.AfterLastValue && startPosition2 == RangeFieldOffset.FirstValue) { " is 124.
Long Statement,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,ChangeRangeSizeToEncompass,The length of the statement  "			if (c < 0 || c == 0 && endPosition1 == RangeFieldOffset.BeforeFirstValue && endPosition2 == RangeFieldOffset.LastValue) { " is 121.
Long Statement,Deveel.Data.Index,IndexRange,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRange.cs,Equals,The length of the statement  "	return (StartValue.Value.Equals (destRange.StartValue.Value) && EndValue.Value.Equals (destRange.EndValue.Value) && StartOffset == destRange.StartOffset && EndOffset == destRange.EndOffset); " is 190.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectAll,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.FirstValue' IndexRange.FirstInSet' RangeFieldOffset.LastValue' IndexRange.LastInSet)); " is 139.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectFirst,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.FirstValue' IndexRange.FirstInSet' RangeFieldOffset.LastValue' IndexRange.FirstInSet)); " is 140.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectNotFirst,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.AfterLastValue' IndexRange.FirstInSet' RangeFieldOffset.LastValue' IndexRange.LastInSet)); " is 143.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectLast,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.FirstValue' IndexRange.LastInSet' RangeFieldOffset.LastValue' IndexRange.LastInSet)); " is 138.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectNotLast,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.FirstValue' IndexRange.FirstInSet' RangeFieldOffset.BeforeFirstValue' IndexRange.LastInSet)); " is 146.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectAllNonNull,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.AfterLastValue' Field.Null ()' RangeFieldOffset.LastValue' IndexRange.LastInSet)); " is 135.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectGreater,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.AfterLastValue' ob' RangeFieldOffset.LastValue' IndexRange.LastInSet)); " is 124.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectLess,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.AfterLastValue' Field.Null ()' RangeFieldOffset.BeforeFirstValue' ob)); " is 124.
Long Statement,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,SelectGreaterOrEqual,The length of the statement  "	return SelectRange (new IndexRange (RangeFieldOffset.FirstValue' ob' RangeFieldOffset.LastValue' IndexRange.LastInSet)); " is 120.
Long Statement,Deveel.Data.Text,PatternSearch,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Text\PatternSearch.cs,PatternMatch,The length of the statement  "		bool matched = PatternMatch (pattern.Substring (1 + findStrLength)' expression.Substring (strIndex + findStrLength)' escapeChar); " is 129.
Complex Conditional,Deveel.Data.Client,DeveelDbConnectionStringBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbConnectionStringBuilder.cs,ToBoolean,The conditional expression  "s == "YES" || s == "ENABLED" || s == "TRUE" || s == "ON""  is complex.
Complex Conditional,Deveel.Data.Client,DeveelDbConnectionStringBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbConnectionStringBuilder.cs,ToBoolean,The conditional expression  "s == "NO" || s == "DISABLED" || s == "FALSE" || s == "OFF""  is complex.
Complex Conditional,Deveel.Data.Configuration,ConfigurationExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Configuration\ConfigurationExtensions.cs,ConvertToEnum,The conditional expression  "value is int || value is short || value is long || value is byte"  is complex.
Complex Conditional,Deveel.Data.Configuration,ConfigurationExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Configuration\ConfigurationExtensions.cs,ConvertToBoolean,The conditional expression  "String.Equals (value' "true"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "enabled"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "1") || String.Equals (value' "on"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Deveel.Data.Configuration,ConfigurationExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Configuration\ConfigurationExtensions.cs,ConvertToBoolean,The conditional expression  "String.Equals (value' "false"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "disabled"' StringComparison.OrdinalIgnoreCase) || String.Equals (value' "0") || String.Equals (value' "off")"  is complex.
Complex Conditional,Deveel.Data.Routines,ExternalProcedure,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalProcedure.cs,ConvertArguments,The conditional expression  "(paramType == typeof(ISession) || paramType == typeof(IRequest) || paramType == typeof(IQuery)) && i > 0"  is complex.
Complex Conditional,Deveel.Data.Routines,ExternalRef,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalRef.cs,CheckParametersMatch,The conditional expression  "(routineParameters == null || routineParameters.Length == 0) && (parameters == null || parameters.Length == 0)"  is complex.
Complex Conditional,Deveel.Data.Routines,ExternalRef,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalRef.cs,TypesMatch,The conditional expression  "(methodTypes == null || methodTypes.Length == 0) && (refTypes == null || refTypes.Length == 0)"  is complex.
Complex Conditional,Deveel.Data.Routines,ExternalFunction,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\ExternalFunction.cs,ConvertArguments,The conditional expression  "(paramType == typeof(ISession) || paramType == typeof(IRequest) || paramType == typeof(IQuery)) && i > 0"  is complex.
Complex Conditional,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AddUserToRole,The conditional expression  "c == '@' || c == '&' || c == '#' || c == '$'"  is complex.
Complex Conditional,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,AssertBeNaturalJoin,The conditional expression  "(plan1.LeftPlan == null && plan2.RightPlan == null) || (plan1.RightPlan == null && plan2.LeftPlan == null)"  is complex.
Complex Conditional,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,NaturallyJoinPlans,The conditional expression  "(plan1.LeftPlan != null && plan2.LeftPlan != null) || (plan1.RightPlan != null && plan2.RightPlan != null)"  is complex.
Complex Conditional,Deveel.Data.Sql.Query,FromTableSubQuerySource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\FromTableSubQuerySource.cs,ResolveColumnCount,The conditional expression  "String.IsNullOrEmpty (catalog) && String.IsNullOrEmpty (schema) && String.IsNullOrEmpty (table) && String.IsNullOrEmpty (column)"  is complex.
Complex Conditional,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateSequence,The conditional expression  "sequenceName.Equals (SequenceTableName) || sequenceName.Equals (SequenceInfoTableName) || !Transaction.TableExists (SequenceTableName) || !Transaction.TableExists (SequenceInfoTableName)"  is complex.
Complex Conditional,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,RemoveNativeTableSequence,The conditional expression  "tableName.Equals (SequenceTableName) || tableName.Equals (SequenceInfoTableName) || !Transaction.ObjectExists (SequenceTableName) || !Transaction.ObjectExists (SequenceInfoTableName)"  is complex.
Complex Conditional,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,MakeSourceIdentity,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '_'"  is complex.
Complex Conditional,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,OnTableCommit,The conditional expression  "(commitEvent.AddedRows != null && commitEvent.AddedRows.Any ()) || (commitEvent.RemovedRows != null && commitEvent.RemovedRows.Any ())"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The conditional expression  "sqlType == SqlTypeCode.Unknown || sqlType == SqlTypeCode.Type || sqlType == SqlTypeCode.QueryPlan || sqlType == SqlTypeCode.Object"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The conditional expression  "name.Equals ("NUMERIC"' StringComparison.OrdinalIgnoreCase) || name.Equals ("STRING"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DATE"' StringComparison.OrdinalIgnoreCase) || name.Equals ("NULL"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BOOLEAN"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BINARY"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The conditional expression  "name.Equals ("TINYINT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("SMALLINT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("INTEGER"' StringComparison.OrdinalIgnoreCase) || name.Equals ("INT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BIGINT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("REAL"' StringComparison.OrdinalIgnoreCase) || name.Equals ("FLOAT"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DOUBLE"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DECIMAL"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The conditional expression  "name.Equals ("DATE"' StringComparison.OrdinalIgnoreCase) || name.Equals ("TIME"' StringComparison.OrdinalIgnoreCase) || name.Equals ("TIMESTAMP"' StringComparison.OrdinalIgnoreCase) || name.Equals ("DATETIME"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The conditional expression  "name.Equals ("CHAR"' StringComparison.OrdinalIgnoreCase) || name.Equals ("VARCHAR"' StringComparison.OrdinalIgnoreCase) || name.Equals ("LONGVARCHAR"' StringComparison.OrdinalIgnoreCase) || name.Equals ("CLOB"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,IsPrimitive,The conditional expression  "name.Equals ("BINARY"' StringComparison.OrdinalIgnoreCase) || name.Equals ("VARBINARY"' StringComparison.OrdinalIgnoreCase) || name.Equals ("LONGVARBINARY"' StringComparison.OrdinalIgnoreCase) || name.Equals ("BLOB"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The conditional expression  "sqlType == SqlTypeCode.Numeric || sqlType == SqlTypeCode.TinyInt || sqlType == SqlTypeCode.SmallInt || sqlType == SqlTypeCode.Integer || sqlType == SqlTypeCode.BigInt || sqlType == SqlTypeCode.Real || sqlType == SqlTypeCode.Double || sqlType == SqlTypeCode.Float || sqlType == SqlTypeCode.Decimal"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The conditional expression  "sqlType == SqlTypeCode.Char || sqlType == SqlTypeCode.VarChar || sqlType == SqlTypeCode.LongVarChar || sqlType == SqlTypeCode.String || sqlType == SqlTypeCode.Clob"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The conditional expression  "sqlType == SqlTypeCode.Binary || sqlType == SqlTypeCode.VarBinary || sqlType == SqlTypeCode.LongVarBinary || sqlType == SqlTypeCode.Blob"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,PrimitiveTypes,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\PrimitiveTypes.cs,Resolve,The conditional expression  "sqlType == SqlTypeCode.Date || sqlType == SqlTypeCode.Time || sqlType == SqlTypeCode.TimeStamp || sqlType == SqlTypeCode.DateTime"  is complex.
Complex Conditional,Deveel.Data.Sql.Types,TypeSerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeSerializer.cs,SerializeTo,The conditional expression  "type is BooleanType || type is IntervalType || type is DateType || type is NullType"  is complex.
Complex Conditional,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,OnCommit,The conditional expression  "(e.AddedRows != null && e.AddedRows.Any ()) || (e.RemovedRows != null && e.RemovedRows.Any ())"  is complex.
Complex Conditional,Deveel.Data.Sql,Field,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\Field.cs,Equals,The conditional expression  "(ReferenceEquals (Value' null) || Value.IsNull) && (ReferenceEquals (other.Value' null) || other.Value.IsNull)"  is complex.
Complex Conditional,Deveel.Data,SystemAccess,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SystemAccess.cs,CreateUser,The conditional expression  "c == '#' || c == '@' || c == '$' || c == '&'"  is complex.
Complex Conditional,Deveel.Data.Sql.Expressions,SqlExpressionTypeExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Expressions\SqlExpressionTypeExtensions.cs,Reverse,The conditional expression  "type == SqlExpressionType.Equal || type == SqlExpressionType.NotEqual || type == SqlExpressionType.Is || type == SqlExpressionType.IsNot"  is complex.
Complex Conditional,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,The conditional expression  "op == SqlExpressionType.Is || op == SqlExpressionType.Equal || op == SqlExpressionType.GreaterThan || op == SqlExpressionType.GreaterOrEqualThan"  is complex.
Complex Conditional,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,The conditional expression  "op == SqlExpressionType.Is || op == SqlExpressionType.Equal || op == SqlExpressionType.SmallerThan || op == SqlExpressionType.SmallerOrEqualThan"  is complex.
Complex Conditional,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectOn,The conditional expression  "(c == 0 && (startPosition == RangeFieldOffset.AfterLastValue || endPosition == RangeFieldOffset.BeforeFirstValue)) || c > 0"  is complex.
Complex Conditional,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectedBy,The conditional expression  "c < 0 || (c == 0 && (startFlag1 == RangeFieldOffset.FirstValue || endFlag2 == RangeFieldOffset.LastValue))"  is complex.
Complex Conditional,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,IntersectedBy,The conditional expression  "c < 0 || (c == 0 && (startFlag2 == RangeFieldOffset.FirstValue || endFlag1 == RangeFieldOffset.LastValue))"  is complex.
Complex Conditional,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,ChangeRangeSizeToEncompass,The conditional expression  "c > 0 || c == 0 && startPosition1 == RangeFieldOffset.AfterLastValue && startPosition2 == RangeFieldOffset.FirstValue"  is complex.
Complex Conditional,Deveel.Data.Index,IndexRangeSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexRangeSet.cs,ChangeRangeSizeToEncompass,The conditional expression  "c < 0 || c == 0 && endPosition1 == RangeFieldOffset.BeforeFirstValue && endPosition2 == RangeFieldOffset.LastValue"  is complex.
Virtual Method Call from Constructor,Deveel.Data.Sql.Tables,JoinedTable,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\JoinedTable.cs,JoinedTable,The constructor "JoinedTable" calls a virtual method "Init".
Empty Catch Block,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Protocol,ServerConnector,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Protocol\ServerConnector.cs,CloseConnector,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Diagnostics,ThreadedQueue,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ThreadedQueue.cs,Stop,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,Close,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Sql.Tables,TableSourceGC,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceGC.cs,Collect,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Store,FileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FileStoreData.cs,Flush,The method has an empty catch block.
Empty Catch Block,Deveel.Data,TableSourceComposite,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSourceComposite.cs,CloseTransaction,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Store.Journaled,JournaledStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledStoreSystem.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Store.Journaled,StreamFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\StreamFile.cs,Synch,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Transactions,TransactionWork,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionWork.cs,Commit,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,DeleteAreas,The method has an empty catch block.
Empty Catch Block,Deveel.Data.Index,SnapshotIndexSet,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\SnapshotIndexSet.cs,Dispose,The method has an empty catch block.
Magic Number,Deveel.Data.Build,FeatureBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Build\FeatureBuilder.cs,WithAssemblyVersion,The following statement contains a magic number: return Version (assemblyName.Version.ToString (3));  
Magic Number,Deveel.Data.Build,FeatureBuilder,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Build\FeatureBuilder.cs,WithAssemblyVersion,The following statement contains a magic number: return Version (assemblyName.Version.ToString (3));  
Magic Number,Deveel.Data.Caching,CellKey,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Caching\CellKey.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((database != null ? database.GetHashCode () : 0) * 397) ^ cellId.GetHashCode ();  }  
Magic Number,Deveel.Data.Caching,CellKey,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Caching\CellKey.cs,GetHashCode,The following statement contains a magic number: return ((database != null ? database.GetHashCode () : 0) * 397) ^ cellId.GetHashCode ();  
Magic Number,Deveel.Data.Caching,TableCellCache,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Caching\TableCellCache.cs,AmountMemory,The following statement contains a magic number: return 16 + value.CacheUsage;  
Magic Number,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,CreateResults,The following statement contains a magic number: for (int i = 0; i < response.Length; i++) {  	var r = response [i];  	var columns = new QueryResultColumn[r.ColumnCount];  	for (int j = 0; j < columns.Length; j++) {  		columns [j] = r.GetColumn (j);  	}  	var result = new LocalQueryResult (connection);  	result.QueryTime = r.QueryTimeMillis;  	result.Setup (r.ResultId' columns' r.RowCount);  	result.SetFetchSize (connection.Settings.FetchSize);  	result.SetMaxRowCount (connection.Settings.MaxFetchSize);  	// Does the result set contain large objects?  We can't cache a  	// result that contains binary data.  	bool hasLargeObject = result.HasLargeObject;  	// If the result row count < 40 then download and store locally in the  	// result set and dispose the resources on the server.  	if (!hasLargeObject && result.RowCount < 40) {  		result.DownloadAndClose ();  	} else {  		result.Download (0' System.Math.Min (10' result.RowCount));  	}  	results [i] = result;  }  
Magic Number,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,CreateResults,The following statement contains a magic number: for (int i = 0; i < response.Length; i++) {  	var r = response [i];  	var columns = new QueryResultColumn[r.ColumnCount];  	for (int j = 0; j < columns.Length; j++) {  		columns [j] = r.GetColumn (j);  	}  	var result = new LocalQueryResult (connection);  	result.QueryTime = r.QueryTimeMillis;  	result.Setup (r.ResultId' columns' r.RowCount);  	result.SetFetchSize (connection.Settings.FetchSize);  	result.SetMaxRowCount (connection.Settings.MaxFetchSize);  	// Does the result set contain large objects?  We can't cache a  	// result that contains binary data.  	bool hasLargeObject = result.HasLargeObject;  	// If the result row count < 40 then download and store locally in the  	// result set and dispose the resources on the server.  	if (!hasLargeObject && result.RowCount < 40) {  		result.DownloadAndClose ();  	} else {  		result.Download (0' System.Math.Min (10' result.RowCount));  	}  	results [i] = result;  }  
Magic Number,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,CreateResults,The following statement contains a magic number: if (!hasLargeObject && result.RowCount < 40) {  	result.DownloadAndClose ();  } else {  	result.Download (0' System.Math.Min (10' result.RowCount));  }  
Magic Number,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,CreateResults,The following statement contains a magic number: if (!hasLargeObject && result.RowCount < 40) {  	result.DownloadAndClose ();  } else {  	result.Download (0' System.Math.Min (10' result.RowCount));  }  
Magic Number,Deveel.Data.Client,DeveelDbCommand,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbCommand.cs,CreateResults,The following statement contains a magic number: result.Download (0' System.Math.Min (10' result.RowCount));  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: for (int i = 0; i < FieldCount; i++) {  	var row = table.NewRow ();  	var column = GetColumn (i);  	string fullColumnName = column.Name;  	string schemaName = null;  	string tableName = null;  	string columnName = column.Name;  	if (columnName.StartsWith ("@f")) {  		// this is a field' so take the table and schema of the field...  		columnName = columnName.Substring (2' columnName.Length - 2);  		fullColumnName = columnName;  		int index = columnName.IndexOf ('.');  		schemaName = columnName.Substring (0' index);  		columnName = columnName.Substring (index + 1);  		index = columnName.IndexOf ('.');  		tableName = columnName.Substring (0' index);  		columnName = columnName.Substring (index + 1);  	} else if (columnName.StartsWith ("@a")) {  		// this is an alias: strip out the leading indicator...  		columnName = columnName.Substring (2' columnName.Length - 2);  		fullColumnName = columnName;  	}  	row [SchemaTableColumn.BaseSchemaName] = schemaName;  	row [SchemaTableColumn.BaseTableName] = tableName;  	row [SchemaTableColumn.BaseColumnName] = columnName;  	row [SchemaTableColumn.ColumnName] = fullColumnName;  	row [SchemaTableColumn.ColumnOrdinal] = column.Offset;  	row [SchemaTableColumn.ProviderType] = (int)column.Type.TypeCode;  	row [SchemaTableColumn.DataType] = column.Type.Name;  	row [SchemaTableColumn.ColumnSize] = column.Size;  	row [SchemaTableColumn.NumericScale] = column.Scale;  	row [SchemaTableColumn.IsKey] = column.IsKey;  	row [SchemaTableColumn.IsUnique] = column.IsUnique;  	row ["IsQuantifiable"] = column.Type is ISizeableType;  	row ["IsNumeric"] = column.IsNumericType;  	row [SchemaTableColumn.AllowDBNull] = !column.IsNotNull;  	row ["UniqueGroup"] = column.UniqueGroup;  	row [SchemaTableColumn.IsAliased] = column.IsAliased;  	row [SchemaTableColumn.IsLong] = IsLongType (column.Type);  	table.Rows.Add (row);  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: for (int i = 0; i < FieldCount; i++) {  	var row = table.NewRow ();  	var column = GetColumn (i);  	string fullColumnName = column.Name;  	string schemaName = null;  	string tableName = null;  	string columnName = column.Name;  	if (columnName.StartsWith ("@f")) {  		// this is a field' so take the table and schema of the field...  		columnName = columnName.Substring (2' columnName.Length - 2);  		fullColumnName = columnName;  		int index = columnName.IndexOf ('.');  		schemaName = columnName.Substring (0' index);  		columnName = columnName.Substring (index + 1);  		index = columnName.IndexOf ('.');  		tableName = columnName.Substring (0' index);  		columnName = columnName.Substring (index + 1);  	} else if (columnName.StartsWith ("@a")) {  		// this is an alias: strip out the leading indicator...  		columnName = columnName.Substring (2' columnName.Length - 2);  		fullColumnName = columnName;  	}  	row [SchemaTableColumn.BaseSchemaName] = schemaName;  	row [SchemaTableColumn.BaseTableName] = tableName;  	row [SchemaTableColumn.BaseColumnName] = columnName;  	row [SchemaTableColumn.ColumnName] = fullColumnName;  	row [SchemaTableColumn.ColumnOrdinal] = column.Offset;  	row [SchemaTableColumn.ProviderType] = (int)column.Type.TypeCode;  	row [SchemaTableColumn.DataType] = column.Type.Name;  	row [SchemaTableColumn.ColumnSize] = column.Size;  	row [SchemaTableColumn.NumericScale] = column.Scale;  	row [SchemaTableColumn.IsKey] = column.IsKey;  	row [SchemaTableColumn.IsUnique] = column.IsUnique;  	row ["IsQuantifiable"] = column.Type is ISizeableType;  	row ["IsNumeric"] = column.IsNumericType;  	row [SchemaTableColumn.AllowDBNull] = !column.IsNotNull;  	row ["UniqueGroup"] = column.UniqueGroup;  	row [SchemaTableColumn.IsAliased] = column.IsAliased;  	row [SchemaTableColumn.IsLong] = IsLongType (column.Type);  	table.Rows.Add (row);  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: for (int i = 0; i < FieldCount; i++) {  	var row = table.NewRow ();  	var column = GetColumn (i);  	string fullColumnName = column.Name;  	string schemaName = null;  	string tableName = null;  	string columnName = column.Name;  	if (columnName.StartsWith ("@f")) {  		// this is a field' so take the table and schema of the field...  		columnName = columnName.Substring (2' columnName.Length - 2);  		fullColumnName = columnName;  		int index = columnName.IndexOf ('.');  		schemaName = columnName.Substring (0' index);  		columnName = columnName.Substring (index + 1);  		index = columnName.IndexOf ('.');  		tableName = columnName.Substring (0' index);  		columnName = columnName.Substring (index + 1);  	} else if (columnName.StartsWith ("@a")) {  		// this is an alias: strip out the leading indicator...  		columnName = columnName.Substring (2' columnName.Length - 2);  		fullColumnName = columnName;  	}  	row [SchemaTableColumn.BaseSchemaName] = schemaName;  	row [SchemaTableColumn.BaseTableName] = tableName;  	row [SchemaTableColumn.BaseColumnName] = columnName;  	row [SchemaTableColumn.ColumnName] = fullColumnName;  	row [SchemaTableColumn.ColumnOrdinal] = column.Offset;  	row [SchemaTableColumn.ProviderType] = (int)column.Type.TypeCode;  	row [SchemaTableColumn.DataType] = column.Type.Name;  	row [SchemaTableColumn.ColumnSize] = column.Size;  	row [SchemaTableColumn.NumericScale] = column.Scale;  	row [SchemaTableColumn.IsKey] = column.IsKey;  	row [SchemaTableColumn.IsUnique] = column.IsUnique;  	row ["IsQuantifiable"] = column.Type is ISizeableType;  	row ["IsNumeric"] = column.IsNumericType;  	row [SchemaTableColumn.AllowDBNull] = !column.IsNotNull;  	row ["UniqueGroup"] = column.UniqueGroup;  	row [SchemaTableColumn.IsAliased] = column.IsAliased;  	row [SchemaTableColumn.IsLong] = IsLongType (column.Type);  	table.Rows.Add (row);  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: for (int i = 0; i < FieldCount; i++) {  	var row = table.NewRow ();  	var column = GetColumn (i);  	string fullColumnName = column.Name;  	string schemaName = null;  	string tableName = null;  	string columnName = column.Name;  	if (columnName.StartsWith ("@f")) {  		// this is a field' so take the table and schema of the field...  		columnName = columnName.Substring (2' columnName.Length - 2);  		fullColumnName = columnName;  		int index = columnName.IndexOf ('.');  		schemaName = columnName.Substring (0' index);  		columnName = columnName.Substring (index + 1);  		index = columnName.IndexOf ('.');  		tableName = columnName.Substring (0' index);  		columnName = columnName.Substring (index + 1);  	} else if (columnName.StartsWith ("@a")) {  		// this is an alias: strip out the leading indicator...  		columnName = columnName.Substring (2' columnName.Length - 2);  		fullColumnName = columnName;  	}  	row [SchemaTableColumn.BaseSchemaName] = schemaName;  	row [SchemaTableColumn.BaseTableName] = tableName;  	row [SchemaTableColumn.BaseColumnName] = columnName;  	row [SchemaTableColumn.ColumnName] = fullColumnName;  	row [SchemaTableColumn.ColumnOrdinal] = column.Offset;  	row [SchemaTableColumn.ProviderType] = (int)column.Type.TypeCode;  	row [SchemaTableColumn.DataType] = column.Type.Name;  	row [SchemaTableColumn.ColumnSize] = column.Size;  	row [SchemaTableColumn.NumericScale] = column.Scale;  	row [SchemaTableColumn.IsKey] = column.IsKey;  	row [SchemaTableColumn.IsUnique] = column.IsUnique;  	row ["IsQuantifiable"] = column.Type is ISizeableType;  	row ["IsNumeric"] = column.IsNumericType;  	row [SchemaTableColumn.AllowDBNull] = !column.IsNotNull;  	row ["UniqueGroup"] = column.UniqueGroup;  	row [SchemaTableColumn.IsAliased] = column.IsAliased;  	row [SchemaTableColumn.IsLong] = IsLongType (column.Type);  	table.Rows.Add (row);  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (columnName.StartsWith ("@f")) {  	// this is a field' so take the table and schema of the field...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  	int index = columnName.IndexOf ('.');  	schemaName = columnName.Substring (0' index);  	columnName = columnName.Substring (index + 1);  	index = columnName.IndexOf ('.');  	tableName = columnName.Substring (0' index);  	columnName = columnName.Substring (index + 1);  } else if (columnName.StartsWith ("@a")) {  	// this is an alias: strip out the leading indicator...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (columnName.StartsWith ("@f")) {  	// this is a field' so take the table and schema of the field...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  	int index = columnName.IndexOf ('.');  	schemaName = columnName.Substring (0' index);  	columnName = columnName.Substring (index + 1);  	index = columnName.IndexOf ('.');  	tableName = columnName.Substring (0' index);  	columnName = columnName.Substring (index + 1);  } else if (columnName.StartsWith ("@a")) {  	// this is an alias: strip out the leading indicator...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (columnName.StartsWith ("@f")) {  	// this is a field' so take the table and schema of the field...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  	int index = columnName.IndexOf ('.');  	schemaName = columnName.Substring (0' index);  	columnName = columnName.Substring (index + 1);  	index = columnName.IndexOf ('.');  	tableName = columnName.Substring (0' index);  	columnName = columnName.Substring (index + 1);  } else if (columnName.StartsWith ("@a")) {  	// this is an alias: strip out the leading indicator...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (columnName.StartsWith ("@f")) {  	// this is a field' so take the table and schema of the field...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  	int index = columnName.IndexOf ('.');  	schemaName = columnName.Substring (0' index);  	columnName = columnName.Substring (index + 1);  	index = columnName.IndexOf ('.');  	tableName = columnName.Substring (0' index);  	columnName = columnName.Substring (index + 1);  } else if (columnName.StartsWith ("@a")) {  	// this is an alias: strip out the leading indicator...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: columnName = columnName.Substring (2' columnName.Length - 2);  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: columnName = columnName.Substring (2' columnName.Length - 2);  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (columnName.StartsWith ("@a")) {  	// this is an alias: strip out the leading indicator...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: if (columnName.StartsWith ("@a")) {  	// this is an alias: strip out the leading indicator...  	columnName = columnName.Substring (2' columnName.Length - 2);  	fullColumnName = columnName;  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: columnName = columnName.Substring (2' columnName.Length - 2);  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetSchemaTable,The following statement contains a magic number: columnName = columnName.Substring (2' columnName.Length - 2);  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetName,The following statement contains a magic number: if (columnName.Length <= 2)  	return columnName;  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetName,The following statement contains a magic number: if (columnName [0] == '@') {  	if (columnName == "@aresult")  		return String.Empty;  	columnName = columnName.Substring (2);  }  
Magic Number,Deveel.Data.Client,DeveelDbDataReader,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbDataReader.cs,GetName,The following statement contains a magic number: columnName = columnName.Substring (2);  
Magic Number,Deveel.Data.Client,DeveelDbLob,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbLob.cs,DeveelDbLob,The following statement contains a magic number: readStream = new BufferedStream (new LobInputStream (this)' (int)(size / 64));  
Magic Number,Deveel.Data.Client,DeveelDbLob,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DeveelDbLob.cs,Upload,The following statement contains a magic number: using (var channel = connection.OpenLargeObjectChannel (objId)) {  	const int bufferSize = 2048;  	var copyBuffer = new byte[bufferSize];  	int readCount;  	long copyOffset = 0;  	lob.writeStream.Seek (0' SeekOrigin.Begin);  	while ((readCount = lob.writeStream.Read (copyBuffer' 0' bufferSize)) > 0) {  		channel.PushData (copyOffset' copyBuffer' readCount);  		copyOffset += readCount;  	}  }  
Magic Number,Deveel.Data.Client,LocalRowCache,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalRowCache.cs,GetResultPart,The following statement contains a magic number: lock (this) {  	// What was requested....  	int origRowIndex = rowIndex;  	int origRowCount = rowCount;  	var cachedRows = new List<CachedRow> ();  	// The top row that isn't found in the cache.  	bool foundNotcached = false;  	// Look for the top row in the block that hasn't been cached  	for (int r = 0; r < rowCount && !foundNotcached; ++r) {  		int daRow = rowIndex + r;  		// Is the row in the cache?  		var rowRef = new RowRef (resultId' daRow);  		// Not in cache so mark this as top row not in cache...  		object rowObj;  		if (!rowCache.TryGet (rowRef' out rowObj)) {  			rowIndex = daRow;  			if (rowIndex + rowCount > totalRowCount) {  				rowCount = totalRowCount - rowIndex;  			}  			foundNotcached = true;  		} else {  			var row = (CachedRow)rowObj;  			cachedRows.Add (row);  		}  	}  	var notCachedRows = new List<CachedRow> ();  	if (foundNotcached) {  		// Now work up from the bottom and find row that isn't in cache....  		foundNotcached = false;  		// Look for the bottom row in the block that hasn't been cached  		for (int r = rowCount - 1; r >= 0 && !foundNotcached; --r) {  			int daRow = rowIndex + r;  			// Is the row in the cache?  			var rowRef = new RowRef (resultId' daRow);  			// Not in cache so mark this as top row not in cache...  			object rowObj;  			if (!rowCache.TryGet (rowRef' out rowObj)) {  				if (rowIndex == origRowIndex) {  					rowIndex = rowIndex - (rowCount - (r + 1));  					if (rowIndex < 0) {  						rowCount = rowCount + rowIndex;  						rowIndex = 0;  					}  				} else {  					rowCount = r + 1;  				}  				foundNotcached = true;  			} else {  				var row = (CachedRow)rowObj;  				notCachedRows.Insert (0' row);  			}  		}  	}  	// Some of it not in the cache...  	if (foundNotcached) {  		// Request a part of a result from the server (blocks)  		QueryResultPart block = connection.RequestResultPart (resultId' rowIndex' rowCount);  		for (int r = 0; r < rowCount; ++r) {  			var rowData = new ISqlObject[block.ColumnCount];  			var dataSizes = new int[block.ColumnCount];  			int theRow = (rowIndex + r);  			int colSize = 0;  			var row = block.GetRow (r);  			for (int c = 0; c < colCount; ++c) {  				var ob = row.Values [c];  				rowData [c] = ob;  				dataSizes [c] = row.ValueSizes [c];  				colSize += row.ValueSizes [c];  			}  			var cachedRow = new CachedRow {  				ResultId = resultId'  				Row = theRow'  				RowData = rowData'  				Sizes = dataSizes  			};  			// Don't cache if it's over a certain size'  			if (colSize <= 3200) {  				rowCache.Set (new RowRef (resultId' theRow)' cachedRow);  			}  			cachedRows.Add (cachedRow);  		}  	}  	// At this point' the cached rows should be completely in the cache so  	// retrieve it from the cache.  	var resultPart = new QueryResultPart (colCount);  	int low = origRowIndex;  	int high = origRowIndex + origRowCount;  	foreach (CachedRow row in cachedRows) {  		if (row.ResultId != resultId)  			continue;  		// Put into the result block  		if (row.Row >= low && row.Row < high) {  			var rowArray = new ISqlObject[colCount];  			var rowSizes = new int[colCount];  			for (int c = 0; c < colCount; ++c) {  				rowArray [c] = row.RowData [c];  				rowSizes [c] = row.Sizes [c];  			}  			resultPart.AddRow (new QueryResultRow (rowArray' rowSizes));  		}  	}  	foreach (CachedRow row in notCachedRows) {  		if (row.ResultId != resultId)  			continue;  		// Put into the result block  		if (row.Row >= low && row.Row < high) {  			var rowArray = new ISqlObject[colCount];  			var sizes = new int[colCount];  			for (int c = 0; c < colCount; ++c) {  				rowArray [c] = row.RowData [c];  				sizes [c] = row.Sizes [c];  			}  			resultPart.AddRow (new QueryResultRow (rowArray' sizes));  		}  	}  	// And return the result (phew!)  	return resultPart;  }  
Magic Number,Deveel.Data.Client,LocalRowCache,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalRowCache.cs,GetResultPart,The following statement contains a magic number: if (foundNotcached) {  	// Request a part of a result from the server (blocks)  	QueryResultPart block = connection.RequestResultPart (resultId' rowIndex' rowCount);  	for (int r = 0; r < rowCount; ++r) {  		var rowData = new ISqlObject[block.ColumnCount];  		var dataSizes = new int[block.ColumnCount];  		int theRow = (rowIndex + r);  		int colSize = 0;  		var row = block.GetRow (r);  		for (int c = 0; c < colCount; ++c) {  			var ob = row.Values [c];  			rowData [c] = ob;  			dataSizes [c] = row.ValueSizes [c];  			colSize += row.ValueSizes [c];  		}  		var cachedRow = new CachedRow {  			ResultId = resultId'  			Row = theRow'  			RowData = rowData'  			Sizes = dataSizes  		};  		// Don't cache if it's over a certain size'  		if (colSize <= 3200) {  			rowCache.Set (new RowRef (resultId' theRow)' cachedRow);  		}  		cachedRows.Add (cachedRow);  	}  }  
Magic Number,Deveel.Data.Client,LocalRowCache,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalRowCache.cs,GetResultPart,The following statement contains a magic number: for (int r = 0; r < rowCount; ++r) {  	var rowData = new ISqlObject[block.ColumnCount];  	var dataSizes = new int[block.ColumnCount];  	int theRow = (rowIndex + r);  	int colSize = 0;  	var row = block.GetRow (r);  	for (int c = 0; c < colCount; ++c) {  		var ob = row.Values [c];  		rowData [c] = ob;  		dataSizes [c] = row.ValueSizes [c];  		colSize += row.ValueSizes [c];  	}  	var cachedRow = new CachedRow {  		ResultId = resultId'  		Row = theRow'  		RowData = rowData'  		Sizes = dataSizes  	};  	// Don't cache if it's over a certain size'  	if (colSize <= 3200) {  		rowCache.Set (new RowRef (resultId' theRow)' cachedRow);  	}  	cachedRows.Add (cachedRow);  }  
Magic Number,Deveel.Data.Client,LocalRowCache,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalRowCache.cs,GetResultPart,The following statement contains a magic number: if (colSize <= 3200) {  	rowCache.Set (new RowRef (resultId' theRow)' cachedRow);  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,EnsureIndexLoaded,The following statement contains a magic number: if (rowOffset >= blockRowCount) {  	// Need to download the next block from the server.  	Download (realIndex' fetchSize);  	// Set up the index into the downloaded block.  	rowOffset = realIndex - blockTopRow;  	realIndexOffset = rowOffset;  } else if (rowOffset < 0) {  	int fsDif = System.Math.Min (fetchSize' 8);  	// Need to download the next block from the server.  	Download (realIndex - fetchSize + fsDif' fetchSize);  	// Set up the index into the downloaded block.  	rowOffset = realIndex - blockTopRow;  	realIndexOffset = rowOffset;  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,EnsureIndexLoaded,The following statement contains a magic number: if (rowOffset < 0) {  	int fsDif = System.Math.Min (fetchSize' 8);  	// Need to download the next block from the server.  	Download (realIndex - fetchSize + fsDif' fetchSize);  	// Set up the index into the downloaded block.  	rowOffset = realIndex - blockTopRow;  	realIndexOffset = rowOffset;  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,The following statement contains a magic number: if (!columnHash.TryGetValue (name' out index)) {  	int colCount = ColumnCount;  	// First construct an unquoted list of all column names  	String[] cols = new String[colCount];  	for (int i = 0; i < colCount; ++i) {  		String colName = columns [i].Name;  		if (colName.StartsWith ("\"")) {  			colName = colName.Substring (1' colName.Length - 2);  		}  		// Strip any codes from the name  		if (colName.StartsWith ("@")) {  			colName = colName.Substring (2);  		}  		cols [i] = colName;  	}  	for (int i = 0; i < colCount; ++i) {  		String colName = cols [i];  		if (colName.Equals (name)) {  			columnHash [name] = i;  			return i;  		}  	}  	// If not found then search for column name ending'  	string pointName = "." + name;  	for (int i = 0; i < colCount; ++i) {  		String colName = cols [i];  		if (colName.EndsWith (pointName)) {  			columnHash [name] = i;  			return i;  		}  	}  	throw new DeveelDbException ("Couldn't find column with name: " + name);  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,The following statement contains a magic number: if (!columnHash.TryGetValue (name' out index)) {  	int colCount = ColumnCount;  	// First construct an unquoted list of all column names  	String[] cols = new String[colCount];  	for (int i = 0; i < colCount; ++i) {  		String colName = columns [i].Name;  		if (colName.StartsWith ("\"")) {  			colName = colName.Substring (1' colName.Length - 2);  		}  		// Strip any codes from the name  		if (colName.StartsWith ("@")) {  			colName = colName.Substring (2);  		}  		cols [i] = colName;  	}  	for (int i = 0; i < colCount; ++i) {  		String colName = cols [i];  		if (colName.Equals (name)) {  			columnHash [name] = i;  			return i;  		}  	}  	// If not found then search for column name ending'  	string pointName = "." + name;  	for (int i = 0; i < colCount; ++i) {  		String colName = cols [i];  		if (colName.EndsWith (pointName)) {  			columnHash [name] = i;  			return i;  		}  	}  	throw new DeveelDbException ("Couldn't find column with name: " + name);  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,The following statement contains a magic number: for (int i = 0; i < colCount; ++i) {  	String colName = columns [i].Name;  	if (colName.StartsWith ("\"")) {  		colName = colName.Substring (1' colName.Length - 2);  	}  	// Strip any codes from the name  	if (colName.StartsWith ("@")) {  		colName = colName.Substring (2);  	}  	cols [i] = colName;  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,The following statement contains a magic number: for (int i = 0; i < colCount; ++i) {  	String colName = columns [i].Name;  	if (colName.StartsWith ("\"")) {  		colName = colName.Substring (1' colName.Length - 2);  	}  	// Strip any codes from the name  	if (colName.StartsWith ("@")) {  		colName = colName.Substring (2);  	}  	cols [i] = colName;  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,The following statement contains a magic number: if (colName.StartsWith ("\"")) {  	colName = colName.Substring (1' colName.Length - 2);  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,The following statement contains a magic number: colName = colName.Substring (1' colName.Length - 2);  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,The following statement contains a magic number: if (colName.StartsWith ("@")) {  	colName = colName.Substring (2);  }  
Magic Number,Deveel.Data.Protocol,LocalQueryResult,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\LocalQueryResult.cs,FindColumnIndex,The following statement contains a magic number: colName = colName.Substring (2);  
Magic Number,Deveel.Data.Diagnostics,EventRegistry,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\EventRegistry.cs,EventRegistry,The following statement contains a magic number: threadCount = config.GetInt32 ("system.events.threadCount"' 2);  
Magic Number,Deveel.Data.Diagnostics,EventMessage,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\EventMessage.cs,EventMessage,The following statement contains a magic number: foreach (var entry in info) {  	if (entry.Name.StartsWith ("[event]:")) {  		var key = entry.Name.Substring (0' 8);  		eventMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  	} else if (entry.Name.StartsWith ("[source]:")) {  		var key = entry.Name.Substring (0' 9);  		sourceMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  	}  }  
Magic Number,Deveel.Data.Diagnostics,EventMessage,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\EventMessage.cs,EventMessage,The following statement contains a magic number: foreach (var entry in info) {  	if (entry.Name.StartsWith ("[event]:")) {  		var key = entry.Name.Substring (0' 8);  		eventMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  	} else if (entry.Name.StartsWith ("[source]:")) {  		var key = entry.Name.Substring (0' 9);  		sourceMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  	}  }  
Magic Number,Deveel.Data.Diagnostics,EventMessage,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\EventMessage.cs,EventMessage,The following statement contains a magic number: if (entry.Name.StartsWith ("[event]:")) {  	var key = entry.Name.Substring (0' 8);  	eventMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  } else if (entry.Name.StartsWith ("[source]:")) {  	var key = entry.Name.Substring (0' 9);  	sourceMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  }  
Magic Number,Deveel.Data.Diagnostics,EventMessage,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\EventMessage.cs,EventMessage,The following statement contains a magic number: if (entry.Name.StartsWith ("[event]:")) {  	var key = entry.Name.Substring (0' 8);  	eventMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  } else if (entry.Name.StartsWith ("[source]:")) {  	var key = entry.Name.Substring (0' 9);  	sourceMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  }  
Magic Number,Deveel.Data.Diagnostics,EventMessage,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\EventMessage.cs,EventMessage,The following statement contains a magic number: if (entry.Name.StartsWith ("[source]:")) {  	var key = entry.Name.Substring (0' 9);  	sourceMeta [key] = info.GetValue (entry.Name' entry.ObjectType);  }  
Magic Number,Deveel.Data.Diagnostics,SystemPerformanceCounter,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\SystemPerformanceCounter.cs,SystemPerformanceCounter,The following statement contains a magic number: timer = new Timer (Count' null' 0' 100);  
Magic Number,Deveel.Data.Diagnostics,ThreadedQueue,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ThreadedQueue.cs,Stop,The following statement contains a magic number: foreach (var thread in threads) {  	try {  		thread.Join (50);  		thread.Interrupt ();  	} catch (ThreadInterruptedException) {  	}  }  
Magic Number,Deveel.Data.Diagnostics,ThreadedQueue,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ThreadedQueue.cs,Stop,The following statement contains a magic number: try {  	thread.Join (50);  	thread.Interrupt ();  } catch (ThreadInterruptedException) {  }  
Magic Number,Deveel.Data.Diagnostics,ThreadedQueue,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\ThreadedQueue.cs,Stop,The following statement contains a magic number: thread.Join (50);  
Magic Number,Deveel.Data.Routines,RoutinesTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutinesTableContainer.cs,GetParameterTypes,The following statement contains a magic number: foreach (var rowIndex in rows) {  	var argName = table.GetValue (rowIndex' 1);  	var argType = table.GetValue (rowIndex' 2);  	var inOut = table.GetValue (rowIndex' 3);  	var paramString = BuildParameterString (argName' argType' inOut);  	types.Add (paramString);  }  
Magic Number,Deveel.Data.Routines,RoutinesTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutinesTableContainer.cs,GetParameterTypes,The following statement contains a magic number: foreach (var rowIndex in rows) {  	var argName = table.GetValue (rowIndex' 1);  	var argType = table.GetValue (rowIndex' 2);  	var inOut = table.GetValue (rowIndex' 3);  	var paramString = BuildParameterString (argName' argType' inOut);  	types.Add (paramString);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: try {  	string routineType = null;  	if (routineInfo is FunctionInfo) {  		if (routineInfo is ExternalFunctionInfo) {  			routineType = ExtrernalFunctionType;  		} else if (routineInfo is PlSqlFunctionInfo) {  			routineType = FunctionType;  		}  	} else if (routineInfo is ProcedureInfo) {  		if (routineInfo is PlSqlProcedureInfo) {  			routineType = ProcedureType;  		} else if (routineInfo is ExternalProcedureInfo) {  			routineType = ExternalProcedureType;  		}  	} else {  		throw new ArgumentException ();  	}  	if (String.IsNullOrEmpty (routineType))  		throw new InvalidOperationException ("Could not determine the kind of routine.");  	var id = transaction.NextTableId (RoutineTableName);  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParams = transaction.GetMutableTable (RoutineParameterTableName);  	var row = routine.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' routineInfo.RoutineName.ParentName);  	row.SetValue (2' routineInfo.RoutineName.Name);  	row.SetValue (3' routineType);  	if (routineType == ExternalProcedureType) {  		var extProcedure = (ExternalProcedureInfo)routineInfo;  		var location = extProcedure.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ExtrernalFunctionType) {  		var extFunction = (ExternalFunctionInfo)routineInfo;  		var location = extFunction.ExternalRef.ToString ();  		row.SetValue (4' location);  	} else if (routineType == ProcedureType) {  		var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  		row.SetValue (5' bin);  	} else if (routineType == FunctionType) {  		var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  		var bin = SqlBinary.ToBinary (plsqlFunction.Body);  		row.SetValue (5' bin);  	}  	if (routineInfo is FunctionInfo) {  		var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  		row.SetValue (6' returnType);  	}  	row.SetValue (7' routineInfo.Owner);  	routine.AddRow (row);  	if (routineInfo.Parameters != null) {  		foreach (var parameter in routineInfo.Parameters) {  			var prow = routineParams.NewRow ();  			prow.SetValue (0' id);  			prow.SetValue (1' parameter.Name);  			var argType = parameter.Type.ToString ();  			prow.SetValue (2' argType);  			var attrs = new SqlNumber ((int)parameter.Attributes);  			prow.SetValue (3' attrs);  			var dir = new SqlNumber ((int)parameter.Direction);  			prow.SetValue (4' dir);  			prow.SetValue (5' parameter.Offset);  			routineParams.AddRow (prow);  		}  	}  	transaction.OnObjectCreated (DbObjectType.Routine' routineInfo.RoutineName);  } finally {  	routinesCache.Clear ();  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: row.SetValue (2' routineInfo.RoutineName.Name);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: row.SetValue (3' routineType);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ExternalProcedureType) {  	var extProcedure = (ExternalProcedureInfo)routineInfo;  	var location = extProcedure.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ExtrernalFunctionType) {  	var extFunction = (ExternalFunctionInfo)routineInfo;  	var location = extFunction.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ExternalProcedureType) {  	var extProcedure = (ExternalProcedureInfo)routineInfo;  	var location = extProcedure.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ExtrernalFunctionType) {  	var extFunction = (ExternalFunctionInfo)routineInfo;  	var location = extFunction.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ExternalProcedureType) {  	var extProcedure = (ExternalProcedureInfo)routineInfo;  	var location = extProcedure.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ExtrernalFunctionType) {  	var extFunction = (ExternalFunctionInfo)routineInfo;  	var location = extFunction.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ExternalProcedureType) {  	var extProcedure = (ExternalProcedureInfo)routineInfo;  	var location = extProcedure.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ExtrernalFunctionType) {  	var extFunction = (ExternalFunctionInfo)routineInfo;  	var location = extFunction.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: row.SetValue (4' location);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ExtrernalFunctionType) {  	var extFunction = (ExternalFunctionInfo)routineInfo;  	var location = extFunction.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ExtrernalFunctionType) {  	var extFunction = (ExternalFunctionInfo)routineInfo;  	var location = extFunction.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ExtrernalFunctionType) {  	var extFunction = (ExternalFunctionInfo)routineInfo;  	var location = extFunction.ExternalRef.ToString ();  	row.SetValue (4' location);  } else if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: row.SetValue (4' location);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == ProcedureType) {  	var plsqlProcedure = (PlSqlProcedureInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlProcedure.Body);  	row.SetValue (5' bin);  } else if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: row.SetValue (5' bin);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineType == FunctionType) {  	var plsqlFunction = (PlSqlFunctionInfo)routineInfo;  	var bin = SqlBinary.ToBinary (plsqlFunction.Body);  	row.SetValue (5' bin);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: row.SetValue (5' bin);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineInfo is FunctionInfo) {  	var returnType = ((FunctionInfo)routineInfo).ReturnType.ToString ();  	row.SetValue (6' returnType);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: row.SetValue (6' returnType);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: row.SetValue (7' routineInfo.Owner);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineInfo.Parameters != null) {  	foreach (var parameter in routineInfo.Parameters) {  		var prow = routineParams.NewRow ();  		prow.SetValue (0' id);  		prow.SetValue (1' parameter.Name);  		var argType = parameter.Type.ToString ();  		prow.SetValue (2' argType);  		var attrs = new SqlNumber ((int)parameter.Attributes);  		prow.SetValue (3' attrs);  		var dir = new SqlNumber ((int)parameter.Direction);  		prow.SetValue (4' dir);  		prow.SetValue (5' parameter.Offset);  		routineParams.AddRow (prow);  	}  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineInfo.Parameters != null) {  	foreach (var parameter in routineInfo.Parameters) {  		var prow = routineParams.NewRow ();  		prow.SetValue (0' id);  		prow.SetValue (1' parameter.Name);  		var argType = parameter.Type.ToString ();  		prow.SetValue (2' argType);  		var attrs = new SqlNumber ((int)parameter.Attributes);  		prow.SetValue (3' attrs);  		var dir = new SqlNumber ((int)parameter.Direction);  		prow.SetValue (4' dir);  		prow.SetValue (5' parameter.Offset);  		routineParams.AddRow (prow);  	}  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineInfo.Parameters != null) {  	foreach (var parameter in routineInfo.Parameters) {  		var prow = routineParams.NewRow ();  		prow.SetValue (0' id);  		prow.SetValue (1' parameter.Name);  		var argType = parameter.Type.ToString ();  		prow.SetValue (2' argType);  		var attrs = new SqlNumber ((int)parameter.Attributes);  		prow.SetValue (3' attrs);  		var dir = new SqlNumber ((int)parameter.Direction);  		prow.SetValue (4' dir);  		prow.SetValue (5' parameter.Offset);  		routineParams.AddRow (prow);  	}  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: if (routineInfo.Parameters != null) {  	foreach (var parameter in routineInfo.Parameters) {  		var prow = routineParams.NewRow ();  		prow.SetValue (0' id);  		prow.SetValue (1' parameter.Name);  		var argType = parameter.Type.ToString ();  		prow.SetValue (2' argType);  		var attrs = new SqlNumber ((int)parameter.Attributes);  		prow.SetValue (3' attrs);  		var dir = new SqlNumber ((int)parameter.Direction);  		prow.SetValue (4' dir);  		prow.SetValue (5' parameter.Offset);  		routineParams.AddRow (prow);  	}  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: foreach (var parameter in routineInfo.Parameters) {  	var prow = routineParams.NewRow ();  	prow.SetValue (0' id);  	prow.SetValue (1' parameter.Name);  	var argType = parameter.Type.ToString ();  	prow.SetValue (2' argType);  	var attrs = new SqlNumber ((int)parameter.Attributes);  	prow.SetValue (3' attrs);  	var dir = new SqlNumber ((int)parameter.Direction);  	prow.SetValue (4' dir);  	prow.SetValue (5' parameter.Offset);  	routineParams.AddRow (prow);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: foreach (var parameter in routineInfo.Parameters) {  	var prow = routineParams.NewRow ();  	prow.SetValue (0' id);  	prow.SetValue (1' parameter.Name);  	var argType = parameter.Type.ToString ();  	prow.SetValue (2' argType);  	var attrs = new SqlNumber ((int)parameter.Attributes);  	prow.SetValue (3' attrs);  	var dir = new SqlNumber ((int)parameter.Direction);  	prow.SetValue (4' dir);  	prow.SetValue (5' parameter.Offset);  	routineParams.AddRow (prow);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: foreach (var parameter in routineInfo.Parameters) {  	var prow = routineParams.NewRow ();  	prow.SetValue (0' id);  	prow.SetValue (1' parameter.Name);  	var argType = parameter.Type.ToString ();  	prow.SetValue (2' argType);  	var attrs = new SqlNumber ((int)parameter.Attributes);  	prow.SetValue (3' attrs);  	var dir = new SqlNumber ((int)parameter.Direction);  	prow.SetValue (4' dir);  	prow.SetValue (5' parameter.Offset);  	routineParams.AddRow (prow);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: foreach (var parameter in routineInfo.Parameters) {  	var prow = routineParams.NewRow ();  	prow.SetValue (0' id);  	prow.SetValue (1' parameter.Name);  	var argType = parameter.Type.ToString ();  	prow.SetValue (2' argType);  	var attrs = new SqlNumber ((int)parameter.Attributes);  	prow.SetValue (3' attrs);  	var dir = new SqlNumber ((int)parameter.Direction);  	prow.SetValue (4' dir);  	prow.SetValue (5' parameter.Offset);  	routineParams.AddRow (prow);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: prow.SetValue (2' argType);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: prow.SetValue (3' attrs);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: prow.SetValue (4' dir);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateRoutine,The following statement contains a magic number: prow.SetValue (5' parameter.Offset);  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateParameters,The following statement contains a magic number: foreach (var row in result) {  	var paramName = row.GetValue (1).Value.ToString ();  	var paramTypeString = row.GetValue (2).Value.ToString ();  	var paramType = SqlType.Parse (transaction.Context' paramTypeString);  	var attrs = (ParameterAttributes)((SqlNumber)row.GetValue (3).Value).ToInt32 ();  	var direction = (ParameterDirection)((SqlNumber)row.GetValue (4).Value).ToInt32 ();  	var offset = ((SqlNumber)row.GetValue (5).Value).ToInt32 ();  	list.Add (new RoutineParameter (paramName' paramType' direction' attrs) {  		Offset = offset  	});  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateParameters,The following statement contains a magic number: foreach (var row in result) {  	var paramName = row.GetValue (1).Value.ToString ();  	var paramTypeString = row.GetValue (2).Value.ToString ();  	var paramType = SqlType.Parse (transaction.Context' paramTypeString);  	var attrs = (ParameterAttributes)((SqlNumber)row.GetValue (3).Value).ToInt32 ();  	var direction = (ParameterDirection)((SqlNumber)row.GetValue (4).Value).ToInt32 ();  	var offset = ((SqlNumber)row.GetValue (5).Value).ToInt32 ();  	list.Add (new RoutineParameter (paramName' paramType' direction' attrs) {  		Offset = offset  	});  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateParameters,The following statement contains a magic number: foreach (var row in result) {  	var paramName = row.GetValue (1).Value.ToString ();  	var paramTypeString = row.GetValue (2).Value.ToString ();  	var paramType = SqlType.Parse (transaction.Context' paramTypeString);  	var attrs = (ParameterAttributes)((SqlNumber)row.GetValue (3).Value).ToInt32 ();  	var direction = (ParameterDirection)((SqlNumber)row.GetValue (4).Value).ToInt32 ();  	var offset = ((SqlNumber)row.GetValue (5).Value).ToInt32 ();  	list.Add (new RoutineParameter (paramName' paramType' direction' attrs) {  		Offset = offset  	});  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,CreateParameters,The following statement contains a magic number: foreach (var row in result) {  	var paramName = row.GetValue (1).Value.ToString ();  	var paramTypeString = row.GetValue (2).Value.ToString ();  	var paramType = SqlType.Parse (transaction.Context' paramTypeString);  	var attrs = (ParameterAttributes)((SqlNumber)row.GetValue (3).Value).ToInt32 ();  	var direction = (ParameterDirection)((SqlNumber)row.GetValue (4).Value).ToInt32 ();  	var offset = ((SqlNumber)row.GetValue (5).Value).ToInt32 ();  	list.Add (new RoutineParameter (paramName' paramType' direction' attrs) {  		Offset = offset  	});  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (!routinesCache.TryGet (routineName' out result)) {  	var t = FindEntry (routineName);  	if (t == null || t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var schemaName = t.GetValue (0' 1).Value.ToString ();  	var name = t.GetValue (0' 2).Value.ToString ();  	var fullName = new ObjectName (ObjectName.Parse (schemaName)' name);  	var t2 = GetParameters (id);  	var parameters = CreateParameters (t2);  	var routineType = t.GetValue (0' 3).Value.ToString ();  	var returnTypeString = t.GetValue (0' 6).Value.ToString ();  	var owner = t.GetValue (0' 7).Value.ToString ();  	RoutineInfo info;  	SqlType returnType = null;  	if (routineType == FunctionType || routineType == ExtrernalFunctionType) {  		returnType = transaction.Context.ResolveType (returnTypeString);  	}  	SqlStatement body = null;  	ExternalRef externalRef = null;  	if (routineType == FunctionType || routineType == ProcedureType) {  		var bodyBin = (SqlBinary)t.GetValue (0' 5).Value;  		body = bodyBin.ToObject<PlSqlBlockStatement> ();  	} else if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  		var location = t.GetValue (0' 4).Value.ToString ();  		if (!ExternalRef.TryParse (location' out externalRef))  			throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  	}  	if (routineType == FunctionType) {  		info = new PlSqlFunctionInfo (fullName' parameters' returnType' body);  	} else if (routineType == ProcedureType) {  		info = new PlSqlProcedureInfo (fullName' parameters' body);  	} else if (routineType == ExtrernalFunctionType) {  		info = new ExternalFunctionInfo (fullName' parameters' returnType' externalRef);  	} else if (routineType == ExternalProcedureType) {  		info = new ExternalProcedureInfo (fullName' parameters' externalRef);  	} else {  		throw new InvalidOperationException (String.Format ("Invalid routine type '{0}' found in database"' routineType));  	}  	info.Owner = owner;  	if (info is PlSqlFunctionInfo) {  		result = new PlSqlFunction ((PlSqlFunctionInfo)info);  	} else if (info is PlSqlProcedureInfo) {  		result = new PlSqlProcedure ((PlSqlProcedureInfo)info);  	} else if (info is ExternalFunctionInfo) {  		result = new ExternalFunction ((ExternalFunctionInfo)info);  	} else {  		result = new ExternalProcedure ((ExternalProcedureInfo)info);  	}  	routinesCache.Set (fullName' result);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (!routinesCache.TryGet (routineName' out result)) {  	var t = FindEntry (routineName);  	if (t == null || t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var schemaName = t.GetValue (0' 1).Value.ToString ();  	var name = t.GetValue (0' 2).Value.ToString ();  	var fullName = new ObjectName (ObjectName.Parse (schemaName)' name);  	var t2 = GetParameters (id);  	var parameters = CreateParameters (t2);  	var routineType = t.GetValue (0' 3).Value.ToString ();  	var returnTypeString = t.GetValue (0' 6).Value.ToString ();  	var owner = t.GetValue (0' 7).Value.ToString ();  	RoutineInfo info;  	SqlType returnType = null;  	if (routineType == FunctionType || routineType == ExtrernalFunctionType) {  		returnType = transaction.Context.ResolveType (returnTypeString);  	}  	SqlStatement body = null;  	ExternalRef externalRef = null;  	if (routineType == FunctionType || routineType == ProcedureType) {  		var bodyBin = (SqlBinary)t.GetValue (0' 5).Value;  		body = bodyBin.ToObject<PlSqlBlockStatement> ();  	} else if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  		var location = t.GetValue (0' 4).Value.ToString ();  		if (!ExternalRef.TryParse (location' out externalRef))  			throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  	}  	if (routineType == FunctionType) {  		info = new PlSqlFunctionInfo (fullName' parameters' returnType' body);  	} else if (routineType == ProcedureType) {  		info = new PlSqlProcedureInfo (fullName' parameters' body);  	} else if (routineType == ExtrernalFunctionType) {  		info = new ExternalFunctionInfo (fullName' parameters' returnType' externalRef);  	} else if (routineType == ExternalProcedureType) {  		info = new ExternalProcedureInfo (fullName' parameters' externalRef);  	} else {  		throw new InvalidOperationException (String.Format ("Invalid routine type '{0}' found in database"' routineType));  	}  	info.Owner = owner;  	if (info is PlSqlFunctionInfo) {  		result = new PlSqlFunction ((PlSqlFunctionInfo)info);  	} else if (info is PlSqlProcedureInfo) {  		result = new PlSqlProcedure ((PlSqlProcedureInfo)info);  	} else if (info is ExternalFunctionInfo) {  		result = new ExternalFunction ((ExternalFunctionInfo)info);  	} else {  		result = new ExternalProcedure ((ExternalProcedureInfo)info);  	}  	routinesCache.Set (fullName' result);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (!routinesCache.TryGet (routineName' out result)) {  	var t = FindEntry (routineName);  	if (t == null || t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var schemaName = t.GetValue (0' 1).Value.ToString ();  	var name = t.GetValue (0' 2).Value.ToString ();  	var fullName = new ObjectName (ObjectName.Parse (schemaName)' name);  	var t2 = GetParameters (id);  	var parameters = CreateParameters (t2);  	var routineType = t.GetValue (0' 3).Value.ToString ();  	var returnTypeString = t.GetValue (0' 6).Value.ToString ();  	var owner = t.GetValue (0' 7).Value.ToString ();  	RoutineInfo info;  	SqlType returnType = null;  	if (routineType == FunctionType || routineType == ExtrernalFunctionType) {  		returnType = transaction.Context.ResolveType (returnTypeString);  	}  	SqlStatement body = null;  	ExternalRef externalRef = null;  	if (routineType == FunctionType || routineType == ProcedureType) {  		var bodyBin = (SqlBinary)t.GetValue (0' 5).Value;  		body = bodyBin.ToObject<PlSqlBlockStatement> ();  	} else if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  		var location = t.GetValue (0' 4).Value.ToString ();  		if (!ExternalRef.TryParse (location' out externalRef))  			throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  	}  	if (routineType == FunctionType) {  		info = new PlSqlFunctionInfo (fullName' parameters' returnType' body);  	} else if (routineType == ProcedureType) {  		info = new PlSqlProcedureInfo (fullName' parameters' body);  	} else if (routineType == ExtrernalFunctionType) {  		info = new ExternalFunctionInfo (fullName' parameters' returnType' externalRef);  	} else if (routineType == ExternalProcedureType) {  		info = new ExternalProcedureInfo (fullName' parameters' externalRef);  	} else {  		throw new InvalidOperationException (String.Format ("Invalid routine type '{0}' found in database"' routineType));  	}  	info.Owner = owner;  	if (info is PlSqlFunctionInfo) {  		result = new PlSqlFunction ((PlSqlFunctionInfo)info);  	} else if (info is PlSqlProcedureInfo) {  		result = new PlSqlProcedure ((PlSqlProcedureInfo)info);  	} else if (info is ExternalFunctionInfo) {  		result = new ExternalFunction ((ExternalFunctionInfo)info);  	} else {  		result = new ExternalProcedure ((ExternalProcedureInfo)info);  	}  	routinesCache.Set (fullName' result);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (!routinesCache.TryGet (routineName' out result)) {  	var t = FindEntry (routineName);  	if (t == null || t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var schemaName = t.GetValue (0' 1).Value.ToString ();  	var name = t.GetValue (0' 2).Value.ToString ();  	var fullName = new ObjectName (ObjectName.Parse (schemaName)' name);  	var t2 = GetParameters (id);  	var parameters = CreateParameters (t2);  	var routineType = t.GetValue (0' 3).Value.ToString ();  	var returnTypeString = t.GetValue (0' 6).Value.ToString ();  	var owner = t.GetValue (0' 7).Value.ToString ();  	RoutineInfo info;  	SqlType returnType = null;  	if (routineType == FunctionType || routineType == ExtrernalFunctionType) {  		returnType = transaction.Context.ResolveType (returnTypeString);  	}  	SqlStatement body = null;  	ExternalRef externalRef = null;  	if (routineType == FunctionType || routineType == ProcedureType) {  		var bodyBin = (SqlBinary)t.GetValue (0' 5).Value;  		body = bodyBin.ToObject<PlSqlBlockStatement> ();  	} else if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  		var location = t.GetValue (0' 4).Value.ToString ();  		if (!ExternalRef.TryParse (location' out externalRef))  			throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  	}  	if (routineType == FunctionType) {  		info = new PlSqlFunctionInfo (fullName' parameters' returnType' body);  	} else if (routineType == ProcedureType) {  		info = new PlSqlProcedureInfo (fullName' parameters' body);  	} else if (routineType == ExtrernalFunctionType) {  		info = new ExternalFunctionInfo (fullName' parameters' returnType' externalRef);  	} else if (routineType == ExternalProcedureType) {  		info = new ExternalProcedureInfo (fullName' parameters' externalRef);  	} else {  		throw new InvalidOperationException (String.Format ("Invalid routine type '{0}' found in database"' routineType));  	}  	info.Owner = owner;  	if (info is PlSqlFunctionInfo) {  		result = new PlSqlFunction ((PlSqlFunctionInfo)info);  	} else if (info is PlSqlProcedureInfo) {  		result = new PlSqlProcedure ((PlSqlProcedureInfo)info);  	} else if (info is ExternalFunctionInfo) {  		result = new ExternalFunction ((ExternalFunctionInfo)info);  	} else {  		result = new ExternalProcedure ((ExternalProcedureInfo)info);  	}  	routinesCache.Set (fullName' result);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (!routinesCache.TryGet (routineName' out result)) {  	var t = FindEntry (routineName);  	if (t == null || t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var schemaName = t.GetValue (0' 1).Value.ToString ();  	var name = t.GetValue (0' 2).Value.ToString ();  	var fullName = new ObjectName (ObjectName.Parse (schemaName)' name);  	var t2 = GetParameters (id);  	var parameters = CreateParameters (t2);  	var routineType = t.GetValue (0' 3).Value.ToString ();  	var returnTypeString = t.GetValue (0' 6).Value.ToString ();  	var owner = t.GetValue (0' 7).Value.ToString ();  	RoutineInfo info;  	SqlType returnType = null;  	if (routineType == FunctionType || routineType == ExtrernalFunctionType) {  		returnType = transaction.Context.ResolveType (returnTypeString);  	}  	SqlStatement body = null;  	ExternalRef externalRef = null;  	if (routineType == FunctionType || routineType == ProcedureType) {  		var bodyBin = (SqlBinary)t.GetValue (0' 5).Value;  		body = bodyBin.ToObject<PlSqlBlockStatement> ();  	} else if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  		var location = t.GetValue (0' 4).Value.ToString ();  		if (!ExternalRef.TryParse (location' out externalRef))  			throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  	}  	if (routineType == FunctionType) {  		info = new PlSqlFunctionInfo (fullName' parameters' returnType' body);  	} else if (routineType == ProcedureType) {  		info = new PlSqlProcedureInfo (fullName' parameters' body);  	} else if (routineType == ExtrernalFunctionType) {  		info = new ExternalFunctionInfo (fullName' parameters' returnType' externalRef);  	} else if (routineType == ExternalProcedureType) {  		info = new ExternalProcedureInfo (fullName' parameters' externalRef);  	} else {  		throw new InvalidOperationException (String.Format ("Invalid routine type '{0}' found in database"' routineType));  	}  	info.Owner = owner;  	if (info is PlSqlFunctionInfo) {  		result = new PlSqlFunction ((PlSqlFunctionInfo)info);  	} else if (info is PlSqlProcedureInfo) {  		result = new PlSqlProcedure ((PlSqlProcedureInfo)info);  	} else if (info is ExternalFunctionInfo) {  		result = new ExternalFunction ((ExternalFunctionInfo)info);  	} else {  		result = new ExternalProcedure ((ExternalProcedureInfo)info);  	}  	routinesCache.Set (fullName' result);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (!routinesCache.TryGet (routineName' out result)) {  	var t = FindEntry (routineName);  	if (t == null || t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var schemaName = t.GetValue (0' 1).Value.ToString ();  	var name = t.GetValue (0' 2).Value.ToString ();  	var fullName = new ObjectName (ObjectName.Parse (schemaName)' name);  	var t2 = GetParameters (id);  	var parameters = CreateParameters (t2);  	var routineType = t.GetValue (0' 3).Value.ToString ();  	var returnTypeString = t.GetValue (0' 6).Value.ToString ();  	var owner = t.GetValue (0' 7).Value.ToString ();  	RoutineInfo info;  	SqlType returnType = null;  	if (routineType == FunctionType || routineType == ExtrernalFunctionType) {  		returnType = transaction.Context.ResolveType (returnTypeString);  	}  	SqlStatement body = null;  	ExternalRef externalRef = null;  	if (routineType == FunctionType || routineType == ProcedureType) {  		var bodyBin = (SqlBinary)t.GetValue (0' 5).Value;  		body = bodyBin.ToObject<PlSqlBlockStatement> ();  	} else if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  		var location = t.GetValue (0' 4).Value.ToString ();  		if (!ExternalRef.TryParse (location' out externalRef))  			throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  	}  	if (routineType == FunctionType) {  		info = new PlSqlFunctionInfo (fullName' parameters' returnType' body);  	} else if (routineType == ProcedureType) {  		info = new PlSqlProcedureInfo (fullName' parameters' body);  	} else if (routineType == ExtrernalFunctionType) {  		info = new ExternalFunctionInfo (fullName' parameters' returnType' externalRef);  	} else if (routineType == ExternalProcedureType) {  		info = new ExternalProcedureInfo (fullName' parameters' externalRef);  	} else {  		throw new InvalidOperationException (String.Format ("Invalid routine type '{0}' found in database"' routineType));  	}  	info.Owner = owner;  	if (info is PlSqlFunctionInfo) {  		result = new PlSqlFunction ((PlSqlFunctionInfo)info);  	} else if (info is PlSqlProcedureInfo) {  		result = new PlSqlProcedure ((PlSqlProcedureInfo)info);  	} else if (info is ExternalFunctionInfo) {  		result = new ExternalFunction ((ExternalFunctionInfo)info);  	} else {  		result = new ExternalProcedure ((ExternalProcedureInfo)info);  	}  	routinesCache.Set (fullName' result);  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (routineType == FunctionType || routineType == ProcedureType) {  	var bodyBin = (SqlBinary)t.GetValue (0' 5).Value;  	body = bodyBin.ToObject<PlSqlBlockStatement> ();  } else if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  	var location = t.GetValue (0' 4).Value.ToString ();  	if (!ExternalRef.TryParse (location' out externalRef))  		throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (routineType == FunctionType || routineType == ProcedureType) {  	var bodyBin = (SqlBinary)t.GetValue (0' 5).Value;  	body = bodyBin.ToObject<PlSqlBlockStatement> ();  } else if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  	var location = t.GetValue (0' 4).Value.ToString ();  	if (!ExternalRef.TryParse (location' out externalRef))  		throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,GetRoutine,The following statement contains a magic number: if (routineType == ExtrernalFunctionType || routineType == ExternalProcedureType) {  	var location = t.GetValue (0' 4).Value.ToString ();  	if (!ExternalRef.TryParse (location' out externalRef))  		throw new InvalidOperationException (String.Format ("The location stored for function '{0}' is invalid: {1}."' routineName' location));  }  
Magic Number,Deveel.Data.Routines,RoutineManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\RoutineManager.cs,RemoveRoutine,The following statement contains a magic number: try {  	var routine = transaction.GetMutableTable (RoutineTableName);  	var routineParam = transaction.GetMutableTable (RoutineParameterTableName);  	var list = routine.SelectRowsEqual (2' Field.VarChar (routineName.Name)' 1' Field.VarChar (routineName.ParentName));  	bool deleted = false;  	foreach (var rowIndex in list) {  		var sid = routine.GetValue (rowIndex' 0);  		var list2 = routineParam.SelectRowsEqual (0' sid);  		foreach (int rowIndex2 in list2) {  			routineParam.RemoveRow (rowIndex2);  		}  		routine.RemoveRow (rowIndex);  		deleted = true;  	}  	return deleted;  } finally {  	routinesCache.Remove (routineName);  }  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The following statement contains a magic number: Register (config => config.Named ("totimestamp").WithParameter (p => p.Named ("value").OfStringType ()).WithParameter (p => p.Named ("ts").OfStringType ()).WhenExecute (context => {  	if (context.ArgumentCount == 1)  		return Simple (context' args => SystemFunctions.ToTimeStamp (args [0]));  	if (context.ArgumentCount == 2)  		return Simple (context' args => SystemFunctions.ToTimeStamp (args [0]' args [1]));  	throw new InvalidOperationException ("Invalid number of arguments for TOTIMESTAMP function");  }).ReturnsType (PrimitiveTypes.TimeStamp ()));  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,ConversionFunctions,The following statement contains a magic number: if (context.ArgumentCount == 2)  	return Simple (context' args => SystemFunctions.ToTimeStamp (args [0]' args [1]));  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,IifReturnType,The following statement contains a magic number: if (t1 is NullType) {  	return ReturnType (context.Arguments [2].Value' context);  }  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,IifReturnType,The following statement contains a magic number: return ReturnType (context.Arguments [2].Value' context);  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The following statement contains a magic number: Register (config => config.Named ("iif").WithBooleanParameter ("condition").WithDynamicParameter ("ifTrue").WithDynamicParameter ("ifFalse").WhenExecute (context => Simple (context' args => {  	Field result = Field.Null ();  	var condition = args [0];  	if (condition.Type is BooleanType) {  		if (condition.Equals (Field.BooleanTrue)) {  			result = args [1];  		} else if (condition.Equals (Field.BooleanFalse)) {  			result = args [2];  		}  	}  	return result;  })).ReturnsType (IifReturnType));  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The following statement contains a magic number: if (condition.Type is BooleanType) {  	if (condition.Equals (Field.BooleanTrue)) {  		result = args [1];  	} else if (condition.Equals (Field.BooleanFalse)) {  		result = args [2];  	}  }  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The following statement contains a magic number: if (condition.Equals (Field.BooleanTrue)) {  	result = args [1];  } else if (condition.Equals (Field.BooleanFalse)) {  	result = args [2];  }  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The following statement contains a magic number: if (condition.Equals (Field.BooleanFalse)) {  	result = args [2];  }  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The following statement contains a magic number: result = args [2];  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,MiscFunctions,The following statement contains a magic number: Register (config => config.Named ("version").WhenExecute (context => context.Result (Field.String (context.Request.Query.Session.Database ().Version.ToString (3)))).ReturnsString ());  
Magic Number,Deveel.Data.Routines,SystemFunctionsProvider,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Routines\SystemFunctionsProvider.cs,DateFunctions,The following statement contains a magic number: Register (config => config.Named ("add_date").WithDateTimeParameter ("date").WithStringParameter ("datePart").WithNumericParameter ("value").WhenExecute (context => Simple (context' args => SystemFunctions.AddDate (args [0]' args [1]' args [2]))).ReturnsDateTime ());  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The following statement contains a magic number: if (privileges != Privileges.None) {  	// Add the grant to the grants table.  	var row = grantTable.NewRow ();  	row.SetValue (0' (int)privileges);  	row.SetValue (1' (int)objectType);  	row.SetValue (2' objectName.FullName);  	row.SetValue (3' grantee);  	row.SetValue (4' withOption);  	row.SetValue (5' granter);  	grantTable.AddRow (row);  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The following statement contains a magic number: if (privileges != Privileges.None) {  	// Add the grant to the grants table.  	var row = grantTable.NewRow ();  	row.SetValue (0' (int)privileges);  	row.SetValue (1' (int)objectType);  	row.SetValue (2' objectName.FullName);  	row.SetValue (3' grantee);  	row.SetValue (4' withOption);  	row.SetValue (5' granter);  	grantTable.AddRow (row);  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The following statement contains a magic number: if (privileges != Privileges.None) {  	// Add the grant to the grants table.  	var row = grantTable.NewRow ();  	row.SetValue (0' (int)privileges);  	row.SetValue (1' (int)objectType);  	row.SetValue (2' objectName.FullName);  	row.SetValue (3' grantee);  	row.SetValue (4' withOption);  	row.SetValue (5' granter);  	grantTable.AddRow (row);  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The following statement contains a magic number: if (privileges != Privileges.None) {  	// Add the grant to the grants table.  	var row = grantTable.NewRow ();  	row.SetValue (0' (int)privileges);  	row.SetValue (1' (int)objectType);  	row.SetValue (2' objectName.FullName);  	row.SetValue (3' grantee);  	row.SetValue (4' withOption);  	row.SetValue (5' granter);  	grantTable.AddRow (row);  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The following statement contains a magic number: row.SetValue (2' objectName.FullName);  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The following statement contains a magic number: row.SetValue (3' grantee);  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The following statement contains a magic number: row.SetValue (4' withOption);  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,UpdateGrants,The following statement contains a magic number: row.SetValue (5' granter);  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var grantTable = query.Access ().GetMutableTable (SystemSchema.GrantsTableName);  	var objectCol = grantTable.GetResolvedColumnName (1);  	var paramCol = grantTable.GetResolvedColumnName (2);  	var granteeCol = grantTable.GetResolvedColumnName (3);  	var grantOptionCol = grantTable.GetResolvedColumnName (4);  	var granterCol = grantTable.GetResolvedColumnName (5);  	ITable t1 = grantTable;  	// All that match the given object parameter  	// It's most likely this will reduce the search by the most so we do  	// it first.  	t1 = t1.SimpleSelect (query' paramCol' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName)));  	// The next is a single exhaustive select through the remaining records.  	// It finds all grants that match either public or the grantee is the  	// user or role' and that match the object type.  	// Expression: ("grantee_col" = grantee)  	var userCheck = SqlExpression.Equal (SqlExpression.Reference (granteeCol)' SqlExpression.Constant (Field.String (grantee)));  	// Expression: ("object_col" = object AND  	//              "grantee_col" = grantee)  	// All that match the given grantee or public and given object  	var expr = SqlExpression.And (SqlExpression.Equal (SqlExpression.Reference (objectCol)' SqlExpression.Constant (Field.BigInt ((int)objectType)))' userCheck);  	// Are we only searching for grant options?  	var grantOptionCheck = SqlExpression.Equal (SqlExpression.Reference (grantOptionCol)' SqlExpression.Constant (Field.Boolean (withOption)));  	expr = SqlExpression.And (expr' grantOptionCheck);  	// Make sure the granter matches up also  	var granterCheck = SqlExpression.Equal (SqlExpression.Reference (granterCol)' SqlExpression.Constant (Field.String (revoker)));  	expr = SqlExpression.And (expr' granterCheck);  	t1 = t1.ExhaustiveSelect (query' expr);  	// Remove these rows from the table  	grantTable.Delete (t1);  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var grantTable = query.Access ().GetMutableTable (SystemSchema.GrantsTableName);  	var objectCol = grantTable.GetResolvedColumnName (1);  	var paramCol = grantTable.GetResolvedColumnName (2);  	var granteeCol = grantTable.GetResolvedColumnName (3);  	var grantOptionCol = grantTable.GetResolvedColumnName (4);  	var granterCol = grantTable.GetResolvedColumnName (5);  	ITable t1 = grantTable;  	// All that match the given object parameter  	// It's most likely this will reduce the search by the most so we do  	// it first.  	t1 = t1.SimpleSelect (query' paramCol' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName)));  	// The next is a single exhaustive select through the remaining records.  	// It finds all grants that match either public or the grantee is the  	// user or role' and that match the object type.  	// Expression: ("grantee_col" = grantee)  	var userCheck = SqlExpression.Equal (SqlExpression.Reference (granteeCol)' SqlExpression.Constant (Field.String (grantee)));  	// Expression: ("object_col" = object AND  	//              "grantee_col" = grantee)  	// All that match the given grantee or public and given object  	var expr = SqlExpression.And (SqlExpression.Equal (SqlExpression.Reference (objectCol)' SqlExpression.Constant (Field.BigInt ((int)objectType)))' userCheck);  	// Are we only searching for grant options?  	var grantOptionCheck = SqlExpression.Equal (SqlExpression.Reference (grantOptionCol)' SqlExpression.Constant (Field.Boolean (withOption)));  	expr = SqlExpression.And (expr' grantOptionCheck);  	// Make sure the granter matches up also  	var granterCheck = SqlExpression.Equal (SqlExpression.Reference (granterCol)' SqlExpression.Constant (Field.String (revoker)));  	expr = SqlExpression.And (expr' granterCheck);  	t1 = t1.ExhaustiveSelect (query' expr);  	// Remove these rows from the table  	grantTable.Delete (t1);  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var grantTable = query.Access ().GetMutableTable (SystemSchema.GrantsTableName);  	var objectCol = grantTable.GetResolvedColumnName (1);  	var paramCol = grantTable.GetResolvedColumnName (2);  	var granteeCol = grantTable.GetResolvedColumnName (3);  	var grantOptionCol = grantTable.GetResolvedColumnName (4);  	var granterCol = grantTable.GetResolvedColumnName (5);  	ITable t1 = grantTable;  	// All that match the given object parameter  	// It's most likely this will reduce the search by the most so we do  	// it first.  	t1 = t1.SimpleSelect (query' paramCol' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName)));  	// The next is a single exhaustive select through the remaining records.  	// It finds all grants that match either public or the grantee is the  	// user or role' and that match the object type.  	// Expression: ("grantee_col" = grantee)  	var userCheck = SqlExpression.Equal (SqlExpression.Reference (granteeCol)' SqlExpression.Constant (Field.String (grantee)));  	// Expression: ("object_col" = object AND  	//              "grantee_col" = grantee)  	// All that match the given grantee or public and given object  	var expr = SqlExpression.And (SqlExpression.Equal (SqlExpression.Reference (objectCol)' SqlExpression.Constant (Field.BigInt ((int)objectType)))' userCheck);  	// Are we only searching for grant options?  	var grantOptionCheck = SqlExpression.Equal (SqlExpression.Reference (grantOptionCol)' SqlExpression.Constant (Field.Boolean (withOption)));  	expr = SqlExpression.And (expr' grantOptionCheck);  	// Make sure the granter matches up also  	var granterCheck = SqlExpression.Equal (SqlExpression.Reference (granterCol)' SqlExpression.Constant (Field.String (revoker)));  	expr = SqlExpression.And (expr' granterCheck);  	t1 = t1.ExhaustiveSelect (query' expr);  	// Remove these rows from the table  	grantTable.Delete (t1);  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,RevokeAllGrantsFrom,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var grantTable = query.Access ().GetMutableTable (SystemSchema.GrantsTableName);  	var objectCol = grantTable.GetResolvedColumnName (1);  	var paramCol = grantTable.GetResolvedColumnName (2);  	var granteeCol = grantTable.GetResolvedColumnName (3);  	var grantOptionCol = grantTable.GetResolvedColumnName (4);  	var granterCol = grantTable.GetResolvedColumnName (5);  	ITable t1 = grantTable;  	// All that match the given object parameter  	// It's most likely this will reduce the search by the most so we do  	// it first.  	t1 = t1.SimpleSelect (query' paramCol' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName)));  	// The next is a single exhaustive select through the remaining records.  	// It finds all grants that match either public or the grantee is the  	// user or role' and that match the object type.  	// Expression: ("grantee_col" = grantee)  	var userCheck = SqlExpression.Equal (SqlExpression.Reference (granteeCol)' SqlExpression.Constant (Field.String (grantee)));  	// Expression: ("object_col" = object AND  	//              "grantee_col" = grantee)  	// All that match the given grantee or public and given object  	var expr = SqlExpression.And (SqlExpression.Equal (SqlExpression.Reference (objectCol)' SqlExpression.Constant (Field.BigInt ((int)objectType)))' userCheck);  	// Are we only searching for grant options?  	var grantOptionCheck = SqlExpression.Equal (SqlExpression.Reference (grantOptionCol)' SqlExpression.Constant (Field.Boolean (withOption)));  	expr = SqlExpression.And (expr' grantOptionCheck);  	// Make sure the granter matches up also  	var granterCheck = SqlExpression.Equal (SqlExpression.Reference (granterCol)' SqlExpression.Constant (Field.String (revoker)));  	expr = SqlExpression.And (expr' granterCheck);  	t1 = t1.ExhaustiveSelect (query' expr);  	// Remove these rows from the table  	grantTable.Delete (t1);  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var table = query.Access ().GetTable (SystemSchema.GrantsTableName);  	var granteeColumn = table.GetResolvedColumnName (3);  	ITable t1 = table;  	// The next is a single exhaustive select through the remaining records.  	// It finds all grants that match either public or the grantee is the  	// user or role' and that match the object type.  	// Expression: ("grantee_col" = grantee OR "grantee_col" = 'public')  	var granteeCheck = SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (grantee)));  	if (withPublic) {  		granteeCheck = SqlExpression.Or (granteeCheck' SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (User.PublicName))));  	}  	t1 = t1.ExhaustiveSelect (query' granteeCheck);  	var list = new List<Grant> ();  	foreach (var row in t1) {  		var privBit = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  		var objType = (DbObjectType)((SqlNumber)row.GetValue (1).Value).ToInt32 ();  		var objName = ObjectName.Parse (row.GetValue (2));  		var withOption = row.GetValue (4);  		var granter = row.GetValue (5);  		list.Add (new Grant (privBit' objName' objType' grantee' granter' withOption));  	}  	return list.ToArray ();  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var table = query.Access ().GetTable (SystemSchema.GrantsTableName);  	var granteeColumn = table.GetResolvedColumnName (3);  	ITable t1 = table;  	// The next is a single exhaustive select through the remaining records.  	// It finds all grants that match either public or the grantee is the  	// user or role' and that match the object type.  	// Expression: ("grantee_col" = grantee OR "grantee_col" = 'public')  	var granteeCheck = SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (grantee)));  	if (withPublic) {  		granteeCheck = SqlExpression.Or (granteeCheck' SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (User.PublicName))));  	}  	t1 = t1.ExhaustiveSelect (query' granteeCheck);  	var list = new List<Grant> ();  	foreach (var row in t1) {  		var privBit = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  		var objType = (DbObjectType)((SqlNumber)row.GetValue (1).Value).ToInt32 ();  		var objName = ObjectName.Parse (row.GetValue (2));  		var withOption = row.GetValue (4);  		var granter = row.GetValue (5);  		list.Add (new Grant (privBit' objName' objType' grantee' granter' withOption));  	}  	return list.ToArray ();  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var table = query.Access ().GetTable (SystemSchema.GrantsTableName);  	var granteeColumn = table.GetResolvedColumnName (3);  	ITable t1 = table;  	// The next is a single exhaustive select through the remaining records.  	// It finds all grants that match either public or the grantee is the  	// user or role' and that match the object type.  	// Expression: ("grantee_col" = grantee OR "grantee_col" = 'public')  	var granteeCheck = SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (grantee)));  	if (withPublic) {  		granteeCheck = SqlExpression.Or (granteeCheck' SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (User.PublicName))));  	}  	t1 = t1.ExhaustiveSelect (query' granteeCheck);  	var list = new List<Grant> ();  	foreach (var row in t1) {  		var privBit = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  		var objType = (DbObjectType)((SqlNumber)row.GetValue (1).Value).ToInt32 ();  		var objName = ObjectName.Parse (row.GetValue (2));  		var withOption = row.GetValue (4);  		var granter = row.GetValue (5);  		list.Add (new Grant (privBit' objName' objType' grantee' granter' withOption));  	}  	return list.ToArray ();  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var table = query.Access ().GetTable (SystemSchema.GrantsTableName);  	var granteeColumn = table.GetResolvedColumnName (3);  	ITable t1 = table;  	// The next is a single exhaustive select through the remaining records.  	// It finds all grants that match either public or the grantee is the  	// user or role' and that match the object type.  	// Expression: ("grantee_col" = grantee OR "grantee_col" = 'public')  	var granteeCheck = SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (grantee)));  	if (withPublic) {  		granteeCheck = SqlExpression.Or (granteeCheck' SqlExpression.Equal (SqlExpression.Reference (granteeColumn)' SqlExpression.Constant (Field.String (User.PublicName))));  	}  	t1 = t1.ExhaustiveSelect (query' granteeCheck);  	var list = new List<Grant> ();  	foreach (var row in t1) {  		var privBit = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  		var objType = (DbObjectType)((SqlNumber)row.GetValue (1).Value).ToInt32 ();  		var objName = ObjectName.Parse (row.GetValue (2));  		var withOption = row.GetValue (4);  		var granter = row.GetValue (5);  		list.Add (new Grant (privBit' objName' objType' grantee' granter' withOption));  	}  	return list.ToArray ();  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The following statement contains a magic number: foreach (var row in t1) {  	var privBit = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  	var objType = (DbObjectType)((SqlNumber)row.GetValue (1).Value).ToInt32 ();  	var objName = ObjectName.Parse (row.GetValue (2));  	var withOption = row.GetValue (4);  	var granter = row.GetValue (5);  	list.Add (new Grant (privBit' objName' objType' grantee' granter' withOption));  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The following statement contains a magic number: foreach (var row in t1) {  	var privBit = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  	var objType = (DbObjectType)((SqlNumber)row.GetValue (1).Value).ToInt32 ();  	var objName = ObjectName.Parse (row.GetValue (2));  	var withOption = row.GetValue (4);  	var granter = row.GetValue (5);  	list.Add (new Grant (privBit' objName' objType' grantee' granter' withOption));  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrants,The following statement contains a magic number: foreach (var row in t1) {  	var privBit = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  	var objType = (DbObjectType)((SqlNumber)row.GetValue (1).Value).ToInt32 ();  	var objName = ObjectName.Parse (row.GetValue (2));  	var withOption = row.GetValue (4);  	var granter = row.GetValue (5);  	list.Add (new Grant (privBit' objName' objType' grantee' granter' withOption));  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var grantTable = query.Access ().GetMutableTable (SystemSchema.GrantsTableName);  	var objectTypeColumn = grantTable.GetResolvedColumnName (1);  	var objectNameColumn = grantTable.GetResolvedColumnName (2);  	// All that match the given object  	var t1 = grantTable.SimpleSelect (query' objectTypeColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.Integer ((int)objectType)));  	// All that match the given parameter  	t1 = t1.SimpleSelect (query' objectNameColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName)));  	var list = new List<Grant> ();  	foreach (var row in t1) {  		var priv = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  		var grantee = row.GetValue (3);  		var grantOption = row.GetValue (4);  		var granter = row.GetValue (5);  		list.Add (new Grant (priv' objectName' objectType' grantee' granter' grantOption));  	}  	return list.ToArray ();  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var grantTable = query.Access ().GetMutableTable (SystemSchema.GrantsTableName);  	var objectTypeColumn = grantTable.GetResolvedColumnName (1);  	var objectNameColumn = grantTable.GetResolvedColumnName (2);  	// All that match the given object  	var t1 = grantTable.SimpleSelect (query' objectTypeColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.Integer ((int)objectType)));  	// All that match the given parameter  	t1 = t1.SimpleSelect (query' objectNameColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName)));  	var list = new List<Grant> ();  	foreach (var row in t1) {  		var priv = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  		var grantee = row.GetValue (3);  		var grantOption = row.GetValue (4);  		var granter = row.GetValue (5);  		list.Add (new Grant (priv' objectName' objectType' grantee' granter' grantOption));  	}  	return list.ToArray ();  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var grantTable = query.Access ().GetMutableTable (SystemSchema.GrantsTableName);  	var objectTypeColumn = grantTable.GetResolvedColumnName (1);  	var objectNameColumn = grantTable.GetResolvedColumnName (2);  	// All that match the given object  	var t1 = grantTable.SimpleSelect (query' objectTypeColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.Integer ((int)objectType)));  	// All that match the given parameter  	t1 = t1.SimpleSelect (query' objectNameColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName)));  	var list = new List<Grant> ();  	foreach (var row in t1) {  		var priv = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  		var grantee = row.GetValue (3);  		var grantOption = row.GetValue (4);  		var granter = row.GetValue (5);  		list.Add (new Grant (priv' objectName' objectType' grantee' granter' grantOption));  	}  	return list.ToArray ();  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var grantTable = query.Access ().GetMutableTable (SystemSchema.GrantsTableName);  	var objectTypeColumn = grantTable.GetResolvedColumnName (1);  	var objectNameColumn = grantTable.GetResolvedColumnName (2);  	// All that match the given object  	var t1 = grantTable.SimpleSelect (query' objectTypeColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.Integer ((int)objectType)));  	// All that match the given parameter  	t1 = t1.SimpleSelect (query' objectNameColumn' SqlExpressionType.Equal' SqlExpression.Constant (Field.String (objectName.FullName)));  	var list = new List<Grant> ();  	foreach (var row in t1) {  		var priv = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  		var grantee = row.GetValue (3);  		var grantOption = row.GetValue (4);  		var granter = row.GetValue (5);  		list.Add (new Grant (priv' objectName' objectType' grantee' granter' grantOption));  	}  	return list.ToArray ();  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The following statement contains a magic number: foreach (var row in t1) {  	var priv = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  	var grantee = row.GetValue (3);  	var grantOption = row.GetValue (4);  	var granter = row.GetValue (5);  	list.Add (new Grant (priv' objectName' objectType' grantee' granter' grantOption));  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The following statement contains a magic number: foreach (var row in t1) {  	var priv = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  	var grantee = row.GetValue (3);  	var grantOption = row.GetValue (4);  	var granter = row.GetValue (5);  	list.Add (new Grant (priv' objectName' objectType' grantee' granter' grantOption));  }  
Magic Number,Deveel.Data.Security,PrivilegeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\PrivilegeManager.cs,GetGrantsOn,The following statement contains a magic number: foreach (var row in t1) {  	var priv = (Privileges)((SqlNumber)row.GetValue (0).Value).ToInt32 ();  	var grantee = row.GetValue (3);  	var grantOption = row.GetValue (4);  	var granter = row.GetValue (5);  	list.Add (new Grant (priv' objectName' objectType' grantee' granter' grantOption));  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,CreateUser,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	// Add to the key 'user' table  	var table = query.Access ().GetMutableTable (UserTableName);  	var row = table.NewRow ();  	row [0] = Field.String (userName);  	table.AddRow (row);  	var method = userInfo.Identification.Method;  	var methodArgs = SerializeArguments (userInfo.Identification.Arguments);  	var token = userInfo.Identification.Token;  	table = query.Access ().GetMutableTable (PasswordTableName);  	row = table.NewRow ();  	row.SetValue (0' userName);  	row.SetValue (1' method);  	row.SetValue (2' methodArgs);  	row.SetValue (3' token);  	table.AddRow (row);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,CreateUser,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	// Add to the key 'user' table  	var table = query.Access ().GetMutableTable (UserTableName);  	var row = table.NewRow ();  	row [0] = Field.String (userName);  	table.AddRow (row);  	var method = userInfo.Identification.Method;  	var methodArgs = SerializeArguments (userInfo.Identification.Arguments);  	var token = userInfo.Identification.Token;  	table = query.Access ().GetMutableTable (PasswordTableName);  	row = table.NewRow ();  	row.SetValue (0' userName);  	row.SetValue (1' method);  	row.SetValue (2' methodArgs);  	row.SetValue (3' token);  	table.AddRow (row);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,CreateUser,The following statement contains a magic number: row.SetValue (2' methodArgs);  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,CreateUser,The following statement contains a magic number: row.SetValue (3' token);  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: using (var stream = new MemoryStream ()) {  	using (var writer = new BinaryWriter (stream)) {  		writer.Write (args.Count);  		foreach (var arg in args) {  			writer.Write (arg.Key);  			if (arg.Value is bool) {  				writer.Write ((byte)1);  				writer.Write ((bool)arg.Value);  			} else if (arg.Value is short || arg.Value is int || arg.Value is long) {  				var value = (long)arg.Value;  				writer.Write ((byte)2);  				writer.Write (value);  			} else if (arg.Value is string) {  				writer.Write ((byte)3);  				writer.Write ((string)arg.Value);  			}  		}  		writer.Flush ();  		return stream.ToArray ();  	}  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: using (var stream = new MemoryStream ()) {  	using (var writer = new BinaryWriter (stream)) {  		writer.Write (args.Count);  		foreach (var arg in args) {  			writer.Write (arg.Key);  			if (arg.Value is bool) {  				writer.Write ((byte)1);  				writer.Write ((bool)arg.Value);  			} else if (arg.Value is short || arg.Value is int || arg.Value is long) {  				var value = (long)arg.Value;  				writer.Write ((byte)2);  				writer.Write (value);  			} else if (arg.Value is string) {  				writer.Write ((byte)3);  				writer.Write ((string)arg.Value);  			}  		}  		writer.Flush ();  		return stream.ToArray ();  	}  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: using (var writer = new BinaryWriter (stream)) {  	writer.Write (args.Count);  	foreach (var arg in args) {  		writer.Write (arg.Key);  		if (arg.Value is bool) {  			writer.Write ((byte)1);  			writer.Write ((bool)arg.Value);  		} else if (arg.Value is short || arg.Value is int || arg.Value is long) {  			var value = (long)arg.Value;  			writer.Write ((byte)2);  			writer.Write (value);  		} else if (arg.Value is string) {  			writer.Write ((byte)3);  			writer.Write ((string)arg.Value);  		}  	}  	writer.Flush ();  	return stream.ToArray ();  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: using (var writer = new BinaryWriter (stream)) {  	writer.Write (args.Count);  	foreach (var arg in args) {  		writer.Write (arg.Key);  		if (arg.Value is bool) {  			writer.Write ((byte)1);  			writer.Write ((bool)arg.Value);  		} else if (arg.Value is short || arg.Value is int || arg.Value is long) {  			var value = (long)arg.Value;  			writer.Write ((byte)2);  			writer.Write (value);  		} else if (arg.Value is string) {  			writer.Write ((byte)3);  			writer.Write ((string)arg.Value);  		}  	}  	writer.Flush ();  	return stream.ToArray ();  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: foreach (var arg in args) {  	writer.Write (arg.Key);  	if (arg.Value is bool) {  		writer.Write ((byte)1);  		writer.Write ((bool)arg.Value);  	} else if (arg.Value is short || arg.Value is int || arg.Value is long) {  		var value = (long)arg.Value;  		writer.Write ((byte)2);  		writer.Write (value);  	} else if (arg.Value is string) {  		writer.Write ((byte)3);  		writer.Write ((string)arg.Value);  	}  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: foreach (var arg in args) {  	writer.Write (arg.Key);  	if (arg.Value is bool) {  		writer.Write ((byte)1);  		writer.Write ((bool)arg.Value);  	} else if (arg.Value is short || arg.Value is int || arg.Value is long) {  		var value = (long)arg.Value;  		writer.Write ((byte)2);  		writer.Write (value);  	} else if (arg.Value is string) {  		writer.Write ((byte)3);  		writer.Write ((string)arg.Value);  	}  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: if (arg.Value is bool) {  	writer.Write ((byte)1);  	writer.Write ((bool)arg.Value);  } else if (arg.Value is short || arg.Value is int || arg.Value is long) {  	var value = (long)arg.Value;  	writer.Write ((byte)2);  	writer.Write (value);  } else if (arg.Value is string) {  	writer.Write ((byte)3);  	writer.Write ((string)arg.Value);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: if (arg.Value is bool) {  	writer.Write ((byte)1);  	writer.Write ((bool)arg.Value);  } else if (arg.Value is short || arg.Value is int || arg.Value is long) {  	var value = (long)arg.Value;  	writer.Write ((byte)2);  	writer.Write (value);  } else if (arg.Value is string) {  	writer.Write ((byte)3);  	writer.Write ((string)arg.Value);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: if (arg.Value is short || arg.Value is int || arg.Value is long) {  	var value = (long)arg.Value;  	writer.Write ((byte)2);  	writer.Write (value);  } else if (arg.Value is string) {  	writer.Write ((byte)3);  	writer.Write ((string)arg.Value);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: if (arg.Value is short || arg.Value is int || arg.Value is long) {  	var value = (long)arg.Value;  	writer.Write ((byte)2);  	writer.Write (value);  } else if (arg.Value is string) {  	writer.Write ((byte)3);  	writer.Write ((string)arg.Value);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: writer.Write ((byte)2);  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: if (arg.Value is string) {  	writer.Write ((byte)3);  	writer.Write ((string)arg.Value);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,SerializeArguments,The following statement contains a magic number: writer.Write ((byte)3);  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: using (var stream = new MemoryStream (bytes)) {  	using (var reader = new BinaryReader (stream)) {  		var argCount = reader.ReadInt32 ();  		var args = new Dictionary<string' object> (argCount);  		for (int i = 0; i < argCount; i++) {  			var argName = reader.ReadString ();  			var argType = reader.ReadByte ();  			object value = null;  			if (argType == 1) {  				value = reader.ReadBoolean ();  			} else if (argType == 2) {  				value = reader.ReadInt64 ();  			} else if (argType == 3) {  				value = reader.ReadString ();  			}  			args [argName] = value;  		}  		return args;  	}  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: using (var stream = new MemoryStream (bytes)) {  	using (var reader = new BinaryReader (stream)) {  		var argCount = reader.ReadInt32 ();  		var args = new Dictionary<string' object> (argCount);  		for (int i = 0; i < argCount; i++) {  			var argName = reader.ReadString ();  			var argType = reader.ReadByte ();  			object value = null;  			if (argType == 1) {  				value = reader.ReadBoolean ();  			} else if (argType == 2) {  				value = reader.ReadInt64 ();  			} else if (argType == 3) {  				value = reader.ReadString ();  			}  			args [argName] = value;  		}  		return args;  	}  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: using (var reader = new BinaryReader (stream)) {  	var argCount = reader.ReadInt32 ();  	var args = new Dictionary<string' object> (argCount);  	for (int i = 0; i < argCount; i++) {  		var argName = reader.ReadString ();  		var argType = reader.ReadByte ();  		object value = null;  		if (argType == 1) {  			value = reader.ReadBoolean ();  		} else if (argType == 2) {  			value = reader.ReadInt64 ();  		} else if (argType == 3) {  			value = reader.ReadString ();  		}  		args [argName] = value;  	}  	return args;  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: using (var reader = new BinaryReader (stream)) {  	var argCount = reader.ReadInt32 ();  	var args = new Dictionary<string' object> (argCount);  	for (int i = 0; i < argCount; i++) {  		var argName = reader.ReadString ();  		var argType = reader.ReadByte ();  		object value = null;  		if (argType == 1) {  			value = reader.ReadBoolean ();  		} else if (argType == 2) {  			value = reader.ReadInt64 ();  		} else if (argType == 3) {  			value = reader.ReadString ();  		}  		args [argName] = value;  	}  	return args;  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: for (int i = 0; i < argCount; i++) {  	var argName = reader.ReadString ();  	var argType = reader.ReadByte ();  	object value = null;  	if (argType == 1) {  		value = reader.ReadBoolean ();  	} else if (argType == 2) {  		value = reader.ReadInt64 ();  	} else if (argType == 3) {  		value = reader.ReadString ();  	}  	args [argName] = value;  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: for (int i = 0; i < argCount; i++) {  	var argName = reader.ReadString ();  	var argType = reader.ReadByte ();  	object value = null;  	if (argType == 1) {  		value = reader.ReadBoolean ();  	} else if (argType == 2) {  		value = reader.ReadInt64 ();  	} else if (argType == 3) {  		value = reader.ReadString ();  	}  	args [argName] = value;  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: if (argType == 1) {  	value = reader.ReadBoolean ();  } else if (argType == 2) {  	value = reader.ReadInt64 ();  } else if (argType == 3) {  	value = reader.ReadString ();  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: if (argType == 1) {  	value = reader.ReadBoolean ();  } else if (argType == 2) {  	value = reader.ReadInt64 ();  } else if (argType == 3) {  	value = reader.ReadString ();  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: if (argType == 2) {  	value = reader.ReadInt64 ();  } else if (argType == 3) {  	value = reader.ReadString ();  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: if (argType == 2) {  	value = reader.ReadInt64 ();  } else if (argType == 3) {  	value = reader.ReadString ();  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,DeserializeArguments,The following statement contains a magic number: if (argType == 3) {  	value = reader.ReadString ();  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AlterUser,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var userName = userInfo.Name;  	var userExpr = SqlExpression.Constant (Field.String (userName));  	// Delete the current username from the 'password' table  	var table = query.Access ().GetMutableTable (PasswordTableName);  	var c1 = table.GetResolvedColumnName (0);  	var t = table.SimpleSelect (query' c1' SqlExpressionType.Equal' userExpr);  	if (t.RowCount != 1)  		throw new SecurityException (String.Format ("User '{0}' was not found."' userName));  	table.Delete (t);  	// TODO: get the hash algorithm and hash ...  	var method = userInfo.Identification.Method;  	var methodArgs = SerializeArguments (userInfo.Identification.Arguments);  	var token = userInfo.Identification.Token;  	// Add the new username  	table = query.Access ().GetMutableTable (PasswordTableName);  	var row = table.NewRow ();  	row.SetValue (0' userName);  	row.SetValue (1' method);  	row.SetValue (2' methodArgs);  	row.SetValue (3' token);  	table.AddRow (row);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AlterUser,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var userName = userInfo.Name;  	var userExpr = SqlExpression.Constant (Field.String (userName));  	// Delete the current username from the 'password' table  	var table = query.Access ().GetMutableTable (PasswordTableName);  	var c1 = table.GetResolvedColumnName (0);  	var t = table.SimpleSelect (query' c1' SqlExpressionType.Equal' userExpr);  	if (t.RowCount != 1)  		throw new SecurityException (String.Format ("User '{0}' was not found."' userName));  	table.Delete (t);  	// TODO: get the hash algorithm and hash ...  	var method = userInfo.Identification.Method;  	var methodArgs = SerializeArguments (userInfo.Identification.Arguments);  	var token = userInfo.Identification.Token;  	// Add the new username  	table = query.Access ().GetMutableTable (PasswordTableName);  	var row = table.NewRow ();  	row.SetValue (0' userName);  	row.SetValue (1' method);  	row.SetValue (2' methodArgs);  	row.SetValue (3' token);  	table.AddRow (row);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AlterUser,The following statement contains a magic number: row.SetValue (2' methodArgs);  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AlterUser,The following statement contains a magic number: row.SetValue (3' token);  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,GetUser,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var table = query.Access ().GetTable (PasswordTableName);  	var unameColumn = table.GetResolvedColumnName (0);  	var methodColumn = table.GetResolvedColumnName (1);  	var methodArgsColumn = table.GetResolvedColumnName (2);  	var tokenColumn = table.GetResolvedColumnName (3);  	var t = table.SimpleSelect (query' unameColumn' SqlExpressionType.Equal' SqlExpression.Constant (userName));  	if (t.RowCount == 0)  		throw new SecurityException (String.Format ("User '{0}' is not registered."' userName));  	var method = t.GetValue (0' methodColumn);  	var methodArgs = t.GetValue (0' methodArgsColumn);  	var argBytes = ((SqlBinary)methodArgs.Value).ToByteArray ();  	var args = DeserializeArguments (argBytes);  	var token = t.GetValue (0' tokenColumn);  	var identification = new UserIdentification (method' token);  	foreach (var arg in args) {  		identification.Arguments [arg.Key] = arg.Value;  	}  	return new UserInfo (userName' identification);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,GetUser,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var table = query.Access ().GetTable (PasswordTableName);  	var unameColumn = table.GetResolvedColumnName (0);  	var methodColumn = table.GetResolvedColumnName (1);  	var methodArgsColumn = table.GetResolvedColumnName (2);  	var tokenColumn = table.GetResolvedColumnName (3);  	var t = table.SimpleSelect (query' unameColumn' SqlExpressionType.Equal' SqlExpression.Constant (userName));  	if (t.RowCount == 0)  		throw new SecurityException (String.Format ("User '{0}' is not registered."' userName));  	var method = t.GetValue (0' methodColumn);  	var methodArgs = t.GetValue (0' methodArgsColumn);  	var argBytes = ((SqlBinary)methodArgs.Value).ToByteArray ();  	var args = DeserializeArguments (argBytes);  	var token = t.GetValue (0' tokenColumn);  	var identification = new UserIdentification (method' token);  	foreach (var arg in args) {  		identification.Arguments [arg.Key] = arg.Value;  	}  	return new UserInfo (userName' identification);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AddUserToRole,The following statement contains a magic number: if (!IsUserInRole (userName' roleName)) {  	using (var query = Session.CreateQuery ()) {  		var table = query.Access ().GetMutableTable (UserRoleTableName);  		var row = table.NewRow ();  		row.SetValue (0' userName);  		row.SetValue (1' roleName);  		row.SetValue (2' asAdmin);  		table.AddRow (row);  	}  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AddUserToRole,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	var table = query.Access ().GetMutableTable (UserRoleTableName);  	var row = table.NewRow ();  	row.SetValue (0' userName);  	row.SetValue (1' roleName);  	row.SetValue (2' asAdmin);  	table.AddRow (row);  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,AddUserToRole,The following statement contains a magic number: row.SetValue (2' asAdmin);  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,IsUserRoleAdmin,The following statement contains a magic number: using (var query = Session.CreateQuery ()) {  	// This is a special query that needs to access the lowest level of ITable' skipping  	// other security controls  	var table = query.Access ().GetTable (UserRoleTableName);  	var c1 = table.GetResolvedColumnName (0);  	var c2 = table.GetResolvedColumnName (1);  	var t = table.SimpleSelect (query' c1' SqlExpressionType.Equal' SqlExpression.Constant (userName));  	t = t.SimpleSelect (query' c2' SqlExpressionType.Equal' SqlExpression.Constant (roleName));  	if (t.RowCount == 0)  		return false;  	return t.GetValue (0' 2).AsBoolean ();  }  
Magic Number,Deveel.Data.Security,UserManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\UserManager.cs,IsUserRoleAdmin,The following statement contains a magic number: return t.GetValue (0' 2).AsBoolean ();  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: if ((hash.HashSize & 7) != 0)  	hashLength++;  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	for (int i = 0; i < keyLength; i++) {  		extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  		extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  		extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  		extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  		byte[] u = hash.Compute (extendedkey);  		Array.Clear (extendedkey' salt.Length' 4);  		byte[] f = u;  		for (int j = 1; j < iterationCount; j++) {  			u = hash.Compute (u);  			for (int k = 0; k < f.Length; k++) {  				f [k] ^= u [k];  			}  		}  		ms.Write (f' 0' f.Length);  		Array.Clear (u' 0' u.Length);  		Array.Clear (f' 0' f.Length);  	}  	byte[] dk = new byte[length];  	ms.Position = 0;  	ms.Read (dk' 0' length);  	ms.Position = 0;  	for (long i = 0; i < ms.Length; i++) {  		ms.WriteByte (0);  	}  	Array.Clear (extendedkey' 0' extendedkey.Length);  	return dk;  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	for (int i = 0; i < keyLength; i++) {  		extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  		extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  		extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  		extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  		byte[] u = hash.Compute (extendedkey);  		Array.Clear (extendedkey' salt.Length' 4);  		byte[] f = u;  		for (int j = 1; j < iterationCount; j++) {  			u = hash.Compute (u);  			for (int k = 0; k < f.Length; k++) {  				f [k] ^= u [k];  			}  		}  		ms.Write (f' 0' f.Length);  		Array.Clear (u' 0' u.Length);  		Array.Clear (f' 0' f.Length);  	}  	byte[] dk = new byte[length];  	ms.Position = 0;  	ms.Read (dk' 0' length);  	ms.Position = 0;  	for (long i = 0; i < ms.Length; i++) {  		ms.WriteByte (0);  	}  	Array.Clear (extendedkey' 0' extendedkey.Length);  	return dk;  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	for (int i = 0; i < keyLength; i++) {  		extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  		extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  		extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  		extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  		byte[] u = hash.Compute (extendedkey);  		Array.Clear (extendedkey' salt.Length' 4);  		byte[] f = u;  		for (int j = 1; j < iterationCount; j++) {  			u = hash.Compute (u);  			for (int k = 0; k < f.Length; k++) {  				f [k] ^= u [k];  			}  		}  		ms.Write (f' 0' f.Length);  		Array.Clear (u' 0' u.Length);  		Array.Clear (f' 0' f.Length);  	}  	byte[] dk = new byte[length];  	ms.Position = 0;  	ms.Read (dk' 0' length);  	ms.Position = 0;  	for (long i = 0; i < ms.Length; i++) {  		ms.WriteByte (0);  	}  	Array.Clear (extendedkey' 0' extendedkey.Length);  	return dk;  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	for (int i = 0; i < keyLength; i++) {  		extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  		extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  		extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  		extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  		byte[] u = hash.Compute (extendedkey);  		Array.Clear (extendedkey' salt.Length' 4);  		byte[] f = u;  		for (int j = 1; j < iterationCount; j++) {  			u = hash.Compute (u);  			for (int k = 0; k < f.Length; k++) {  				f [k] ^= u [k];  			}  		}  		ms.Write (f' 0' f.Length);  		Array.Clear (u' 0' u.Length);  		Array.Clear (f' 0' f.Length);  	}  	byte[] dk = new byte[length];  	ms.Position = 0;  	ms.Read (dk' 0' length);  	ms.Position = 0;  	for (long i = 0; i < ms.Length; i++) {  		ms.WriteByte (0);  	}  	Array.Clear (extendedkey' 0' extendedkey.Length);  	return dk;  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	for (int i = 0; i < keyLength; i++) {  		extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  		extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  		extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  		extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  		byte[] u = hash.Compute (extendedkey);  		Array.Clear (extendedkey' salt.Length' 4);  		byte[] f = u;  		for (int j = 1; j < iterationCount; j++) {  			u = hash.Compute (u);  			for (int k = 0; k < f.Length; k++) {  				f [k] ^= u [k];  			}  		}  		ms.Write (f' 0' f.Length);  		Array.Clear (u' 0' u.Length);  		Array.Clear (f' 0' f.Length);  	}  	byte[] dk = new byte[length];  	ms.Position = 0;  	ms.Read (dk' 0' length);  	ms.Position = 0;  	for (long i = 0; i < ms.Length; i++) {  		ms.WriteByte (0);  	}  	Array.Clear (extendedkey' 0' extendedkey.Length);  	return dk;  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	for (int i = 0; i < keyLength; i++) {  		extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  		extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  		extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  		extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  		byte[] u = hash.Compute (extendedkey);  		Array.Clear (extendedkey' salt.Length' 4);  		byte[] f = u;  		for (int j = 1; j < iterationCount; j++) {  			u = hash.Compute (u);  			for (int k = 0; k < f.Length; k++) {  				f [k] ^= u [k];  			}  		}  		ms.Write (f' 0' f.Length);  		Array.Clear (u' 0' u.Length);  		Array.Clear (f' 0' f.Length);  	}  	byte[] dk = new byte[length];  	ms.Position = 0;  	ms.Read (dk' 0' length);  	ms.Position = 0;  	for (long i = 0; i < ms.Length; i++) {  		ms.WriteByte (0);  	}  	Array.Clear (extendedkey' 0' extendedkey.Length);  	return dk;  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: for (int i = 0; i < keyLength; i++) {  	extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  	extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  	extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  	extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  	byte[] u = hash.Compute (extendedkey);  	Array.Clear (extendedkey' salt.Length' 4);  	byte[] f = u;  	for (int j = 1; j < iterationCount; j++) {  		u = hash.Compute (u);  		for (int k = 0; k < f.Length; k++) {  			f [k] ^= u [k];  		}  	}  	ms.Write (f' 0' f.Length);  	Array.Clear (u' 0' u.Length);  	Array.Clear (f' 0' f.Length);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: for (int i = 0; i < keyLength; i++) {  	extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  	extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  	extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  	extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  	byte[] u = hash.Compute (extendedkey);  	Array.Clear (extendedkey' salt.Length' 4);  	byte[] f = u;  	for (int j = 1; j < iterationCount; j++) {  		u = hash.Compute (u);  		for (int k = 0; k < f.Length; k++) {  			f [k] ^= u [k];  		}  	}  	ms.Write (f' 0' f.Length);  	Array.Clear (u' 0' u.Length);  	Array.Clear (f' 0' f.Length);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: for (int i = 0; i < keyLength; i++) {  	extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  	extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  	extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  	extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  	byte[] u = hash.Compute (extendedkey);  	Array.Clear (extendedkey' salt.Length' 4);  	byte[] f = u;  	for (int j = 1; j < iterationCount; j++) {  		u = hash.Compute (u);  		for (int k = 0; k < f.Length; k++) {  			f [k] ^= u [k];  		}  	}  	ms.Write (f' 0' f.Length);  	Array.Clear (u' 0' u.Length);  	Array.Clear (f' 0' f.Length);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: for (int i = 0; i < keyLength; i++) {  	extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  	extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  	extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  	extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  	byte[] u = hash.Compute (extendedkey);  	Array.Clear (extendedkey' salt.Length' 4);  	byte[] f = u;  	for (int j = 1; j < iterationCount; j++) {  		u = hash.Compute (u);  		for (int k = 0; k < f.Length; k++) {  			f [k] ^= u [k];  		}  	}  	ms.Write (f' 0' f.Length);  	Array.Clear (u' 0' u.Length);  	Array.Clear (f' 0' f.Length);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: for (int i = 0; i < keyLength; i++) {  	extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  	extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  	extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  	extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  	byte[] u = hash.Compute (extendedkey);  	Array.Clear (extendedkey' salt.Length' 4);  	byte[] f = u;  	for (int j = 1; j < iterationCount; j++) {  		u = hash.Compute (u);  		for (int k = 0; k < f.Length; k++) {  			f [k] ^= u [k];  		}  	}  	ms.Write (f' 0' f.Length);  	Array.Clear (u' 0' u.Length);  	Array.Clear (f' 0' f.Length);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: for (int i = 0; i < keyLength; i++) {  	extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  	extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  	extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  	extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  	byte[] u = hash.Compute (extendedkey);  	Array.Clear (extendedkey' salt.Length' 4);  	byte[] f = u;  	for (int j = 1; j < iterationCount; j++) {  		u = hash.Compute (u);  		for (int k = 0; k < f.Length; k++) {  			f [k] ^= u [k];  		}  	}  	ms.Write (f' 0' f.Length);  	Array.Clear (u' 0' u.Length);  	Array.Clear (f' 0' f.Length);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: extendedkey [salt.Length] = (byte)(((i + 1) >> 24) & 0xFF);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: extendedkey [salt.Length + 1] = (byte)(((i + 1) >> 16) & 0xFF);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: extendedkey [salt.Length + 2] = (byte)(((i + 1) >> 8) & 0xFF);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: extendedkey [salt.Length + 3] = (byte)(((i + 1)) & 0xFF);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,MakePbkdf2,The following statement contains a magic number: Array.Clear (extendedkey' salt.Length' 4);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: for (int iter = 0; iter < data.Length; iter++) {  	byte hexChar = ((byte)(data [iter] >> 4));  	hex [iter * 2] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  	hexChar = ((byte)(data [iter] & 0xF));  	hex [(iter * 2) + 1] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: for (int iter = 0; iter < data.Length; iter++) {  	byte hexChar = ((byte)(data [iter] >> 4));  	hex [iter * 2] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  	hexChar = ((byte)(data [iter] & 0xF));  	hex [(iter * 2) + 1] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: for (int iter = 0; iter < data.Length; iter++) {  	byte hexChar = ((byte)(data [iter] >> 4));  	hex [iter * 2] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  	hexChar = ((byte)(data [iter] & 0xF));  	hex [(iter * 2) + 1] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: for (int iter = 0; iter < data.Length; iter++) {  	byte hexChar = ((byte)(data [iter] >> 4));  	hex [iter * 2] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  	hexChar = ((byte)(data [iter] & 0xF));  	hex [(iter * 2) + 1] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: for (int iter = 0; iter < data.Length; iter++) {  	byte hexChar = ((byte)(data [iter] >> 4));  	hex [iter * 2] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  	hexChar = ((byte)(data [iter] & 0xF));  	hex [(iter * 2) + 1] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  }  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: hex [iter * 2] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: hex [iter * 2] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: hex [(iter * 2) + 1] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  
Magic Number,Deveel.Data.Security,CryptoHashExtenions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Security\CryptoHashExtensions.cs,BinaryToHex,The following statement contains a magic number: hex [(iter * 2) + 1] = (char)(hexChar > 9 ? hexChar + 0x37 : hexChar + 0x30);  
Magic Number,Deveel.Data.Sql.Compile,PlSqlCompiler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\PlSqlCompiler.cs,PlSqlCompiler,The following statement contains a magic number: messages = new List<SqlCompileMessage> (12);  
Magic Number,Deveel.Data.Sql.Compile,PlSqlCompiler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\PlSqlCompiler.cs,Dispose,The following statement contains a magic number: if (disposing) {  	if (messages != null)  		messages.Clear ();  	if (lexer != null) {  		lexer.Interpreter.ClearDFA ();  		lexer.Reset ();  		lexer.Interpreter = new LexerATNSimulator (new ATN (ATNType.Lexer' 2));  	}  	if (plSqlParser != null) {  		plSqlParser.Interpreter.ClearDFA ();  		plSqlParser.Reset ();  		plSqlParser.Interpreter = new ParserATNSimulator (new ATN (ATNType.Parser' 2));  	}  }  
Magic Number,Deveel.Data.Sql.Compile,PlSqlCompiler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\PlSqlCompiler.cs,Dispose,The following statement contains a magic number: if (disposing) {  	if (messages != null)  		messages.Clear ();  	if (lexer != null) {  		lexer.Interpreter.ClearDFA ();  		lexer.Reset ();  		lexer.Interpreter = new LexerATNSimulator (new ATN (ATNType.Lexer' 2));  	}  	if (plSqlParser != null) {  		plSqlParser.Interpreter.ClearDFA ();  		plSqlParser.Reset ();  		plSqlParser.Interpreter = new ParserATNSimulator (new ATN (ATNType.Parser' 2));  	}  }  
Magic Number,Deveel.Data.Sql.Compile,PlSqlCompiler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\PlSqlCompiler.cs,Dispose,The following statement contains a magic number: if (lexer != null) {  	lexer.Interpreter.ClearDFA ();  	lexer.Reset ();  	lexer.Interpreter = new LexerATNSimulator (new ATN (ATNType.Lexer' 2));  }  
Magic Number,Deveel.Data.Sql.Compile,PlSqlCompiler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\PlSqlCompiler.cs,Dispose,The following statement contains a magic number: lexer.Interpreter = new LexerATNSimulator (new ATN (ATNType.Lexer' 2));  
Magic Number,Deveel.Data.Sql.Compile,PlSqlCompiler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\PlSqlCompiler.cs,Dispose,The following statement contains a magic number: if (plSqlParser != null) {  	plSqlParser.Interpreter.ClearDFA ();  	plSqlParser.Reset ();  	plSqlParser.Interpreter = new ParserATNSimulator (new ATN (ATNType.Parser' 2));  }  
Magic Number,Deveel.Data.Sql.Compile,PlSqlCompiler,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Compile\PlSqlCompiler.cs,Dispose,The following statement contains a magic number: plSqlParser.Interpreter = new ParserATNSimulator (new ATN (ATNType.Parser' 2));  
Magic Number,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,MakeupFunctions,The following statement contains a magic number: for (int i = 0; i < fsz2; ++i) {  	defFunList [i] = (SqlExpression)completeFunList [i * 2];  	defFunNames [i] = (string)completeFunList [(i * 2) + 1];  }  
Magic Number,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,MakeupFunctions,The following statement contains a magic number: for (int i = 0; i < fsz2; ++i) {  	defFunList [i] = (SqlExpression)completeFunList [i * 2];  	defFunNames [i] = (string)completeFunList [(i * 2) + 1];  }  
Magic Number,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,MakeupFunctions,The following statement contains a magic number: defFunList [i] = (SqlExpression)completeFunList [i * 2];  
Magic Number,Deveel.Data.Sql.Query,QueryPlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryPlanner.cs,MakeupFunctions,The following statement contains a magic number: defFunNames [i] = (string)completeFunList [(i * 2) + 1];  
Magic Number,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,AssertBeNaturalJoin,The following statement contains a magic number: if (plan1.LeftPlan != null && plan2.LeftPlan != null)  	// This is a left clash  	return 2;  
Magic Number,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,AssertBeNaturalJoin,The following statement contains a magic number: return 2;  
Magic Number,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,AssertBeNaturalJoin,The following statement contains a magic number: return 2;  
Magic Number,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,JoinToSingle,The following statement contains a magic number: while (workingPlanList.Count > 1) {  	var leftPlan = workingPlanList [0];  	var rightPlan = workingPlanList [1];  	// First we need to determine if the left and right plan can be  	// naturally joined.  	int status = AssertBeNaturalJoin (leftPlan' rightPlan);  	if (status == 0) {  		// Yes they can so join them  		var newPlan = NaturallyJoinPlans (leftPlan' rightPlan);  		// Remove the left and right plan from the list and add the new plan  		workingPlanList.Remove (leftPlan);  		workingPlanList.Remove (rightPlan);  		workingPlanList.Insert (0' newPlan);  	} else if (status == 1) {  		// No we can't because of a right join clash' so we join the left  		// plan right in hopes of resolving the clash.  		var newPlan = NaturallyJoinPlans (leftPlan' leftPlan.RightPlan);  		workingPlanList.Remove (leftPlan);  		workingPlanList.Remove (leftPlan.RightPlan);  		workingPlanList.Insert (0' newPlan);  	} else if (status == 2) {  		// No we can't because of a left join clash' so we join the left  		// plan left in hopes of resolving the clash.  		var newPlan = NaturallyJoinPlans (leftPlan' leftPlan.LeftPlan);  		workingPlanList.Remove (leftPlan);  		workingPlanList.Remove (leftPlan.LeftPlan);  		workingPlanList.Insert (0' newPlan);  	} else {  		throw new InvalidOperationException (String.Format ("Natural join assessed status {0} is unknown."' status));  	}  }  
Magic Number,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,JoinToSingle,The following statement contains a magic number: if (status == 0) {  	// Yes they can so join them  	var newPlan = NaturallyJoinPlans (leftPlan' rightPlan);  	// Remove the left and right plan from the list and add the new plan  	workingPlanList.Remove (leftPlan);  	workingPlanList.Remove (rightPlan);  	workingPlanList.Insert (0' newPlan);  } else if (status == 1) {  	// No we can't because of a right join clash' so we join the left  	// plan right in hopes of resolving the clash.  	var newPlan = NaturallyJoinPlans (leftPlan' leftPlan.RightPlan);  	workingPlanList.Remove (leftPlan);  	workingPlanList.Remove (leftPlan.RightPlan);  	workingPlanList.Insert (0' newPlan);  } else if (status == 2) {  	// No we can't because of a left join clash' so we join the left  	// plan left in hopes of resolving the clash.  	var newPlan = NaturallyJoinPlans (leftPlan' leftPlan.LeftPlan);  	workingPlanList.Remove (leftPlan);  	workingPlanList.Remove (leftPlan.LeftPlan);  	workingPlanList.Insert (0' newPlan);  } else {  	throw new InvalidOperationException (String.Format ("Natural join assessed status {0} is unknown."' status));  }  
Magic Number,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,JoinToSingle,The following statement contains a magic number: if (status == 1) {  	// No we can't because of a right join clash' so we join the left  	// plan right in hopes of resolving the clash.  	var newPlan = NaturallyJoinPlans (leftPlan' leftPlan.RightPlan);  	workingPlanList.Remove (leftPlan);  	workingPlanList.Remove (leftPlan.RightPlan);  	workingPlanList.Insert (0' newPlan);  } else if (status == 2) {  	// No we can't because of a left join clash' so we join the left  	// plan left in hopes of resolving the clash.  	var newPlan = NaturallyJoinPlans (leftPlan' leftPlan.LeftPlan);  	workingPlanList.Remove (leftPlan);  	workingPlanList.Remove (leftPlan.LeftPlan);  	workingPlanList.Insert (0' newPlan);  } else {  	throw new InvalidOperationException (String.Format ("Natural join assessed status {0} is unknown."' status));  }  
Magic Number,Deveel.Data.Sql.Query,QueryTablePlanner,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\QueryTablePlanner.cs,JoinToSingle,The following statement contains a magic number: if (status == 2) {  	// No we can't because of a left join clash' so we join the left  	// plan left in hopes of resolving the clash.  	var newPlan = NaturallyJoinPlans (leftPlan' leftPlan.LeftPlan);  	workingPlanList.Remove (leftPlan);  	workingPlanList.Remove (leftPlan.LeftPlan);  	workingPlanList.Insert (0' newPlan);  } else {  	throw new InvalidOperationException (String.Format ("Natural join assessed status {0} is unknown."' status));  }  
Magic Number,Deveel.Data.Sql.Query,CachePointNode,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\CachePointNode.cs,NewId,The following statement contains a magic number: lock (GlobLock) {  	id = ((int)DateTime.Now.Ticks << 16) | (GlobId & 0x0FFFF);  	++GlobId;  }  
Magic Number,Deveel.Data.Sql.Query,CachePointNode,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Query\CachePointNode.cs,NewId,The following statement contains a magic number: id = ((int)DateTime.Now.Ticks << 16) | (GlobId & 0x0FFFF);  
Magic Number,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The following statement contains a magic number: if (systemQuery.Access ().HasSecurity) {  	// This view shows the grants that the user has (no join' only priv_bit).  	systemQuery.CreateView (ThisUserSimpleGrantViewName' query => query.Column ("priv_bit").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName)))));  	// This view shows the grants that the user is allowed to see  	// CREATE VIEW ThisUserGrant AS  	//     SELECT i_privilege_string(priv_bit) AS description' object' name' grantee' grant_option' granter  	//         FROM grants  	//         WHERE (grantee = user() OR grantee = 'PUBLIC')  	systemQuery.CreateView (ThisUserGrantViewName' query => query.Function ("i_privilege_string"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("priv_bit"))  	}' "description").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName)))));  	// A view that represents the list of schema this user is allowed to view  	// the contents of.  	//  CREATE VIEW ThisUserSchemaInfo AS  	//      SELECT * FROM  SYSTEM.schema_info  	//          WHERE name IN (  	//              SELECT name  	//                  FROM INFORMATION_SCHEMA.ThisUserGrant  	//                  WHERE object = 1 AND description LIKE '%LIST%')  	systemQuery.CreateView (ThisUserSchemaInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.SchemaInfoTableName).Where (where => where.Reference ("name").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserGrantViewName).Where (filter => filter.Reference ("object").Equal (value => value.Value ((int)DbObjectType.Schema)).And (and => and.Reference ("description").Like (String.Format ("%{0}%"' Privileges.List.ToString ().ToUpperInvariant ()))))))));  	// A view that exposes the table_columns table but only for the tables  	// this user has read access to.  	// CREATE VIEW INFORMATION_SCHEMA.ThisUserTableColumns AS  	//     SELECT * FROM SYSTEM.table_columns  	//         WHERE schema IN (  	//             SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo)  	systemQuery.CreateView (ThisUserTableColumnsViewName' query => query.AllColumns ().FromTable (SystemSchema.TableColumnsTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))));  	// A view that exposes the 'table_info' table but only for the tables  	// this user has read access to.  	// CREATE VIEW INFORMATION_SCHEMA.ThisUserTableInfo AS  	//    SELECT * FROM SYSTEM.table_info  	//        WHERE schema IN (  	//            SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo)  	systemQuery.CreateView (ThisUserTableInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.TableInfoTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))));  	// CREATE VIEW INFORMATION_SCHEMA.Tables AS  	//     SELECT NULL AS TABLE_CATALOG'  	//            schema AS TABLE_SCHEMA'  	//            name AS TABLE_NAME  	//            type AS TABLE_TYPE'  	//            other AS REMARKS  	//            NULL AS TYPE_CATALOG  	//            NULL AS TYPE_SCHEMA  	//            NULL AS TYPE_NAME  	//            NULL AS SELF_REFERENCING_COL_NAME  	//            NULL AS REF_GENERATION  	//    FROM INFORMATION_SCHEMA.ThisUserTableInfo  	systemQuery.CreateView (Tables' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("name"' "TABLE_NAME").Column ("type"' "TABLE_TYPE").Column ("other"' "REMARKS").Constant (null' "TYPE_CATALOG").Constant (null' "TYPE_SCHEMA").Constant (null' "TYPE_NAME").Constant (null' "SELF_REFERENCING_COL_NAME").Constant (null' "REF_GENERATION").FromTable (ThisUserTableInfoViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Schemata AS  	//    SELECT name AS TABLE_SCHEMA  	//           NULL AS TABLE_CATALOG  	//    FROM INFORMATION_SCHEMA.ThisUserSchemaInfo  	systemQuery.CreateView (Schemata' query => query.Column ("name"' "TABLE_SCHEMA").Constant (null' "TABLE_CATALOG").FromTable (ThisUserSchemaInfoViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Catalogs AS  	//    SELECT NULL AS TABLE_CATALOG  	//        FROM SYSTEM.schema_info  	//        WHERE FALSE  	systemQuery.CreateView (Catalogs' query => query.Constant (null' "TABLE_CATALOG").FromTable (SystemSchema.SchemaInfoTableName).Where (SqlExpression.Constant (false)));  	// Hacky' this will generate a 0 row  	//  CREATE VIEW INFORMATION_SCHEMA.Columns AS  	//      SELECT NULL AS TABLE_CATALOG'  	//             schema AS TABLE_SCHEMA'  	//             table AS TABLE_NAME'  	//             column AS COLUMN_NAME'  	//	           sql_type AS DATA_TYPE'  	//             type_desc AS TYPE_NAME'  	//             IIF(size = -1' 1024' size) AS COLUMN_SIZE'  	//             NULL AS BUFFER_LENGTH'  	//             scale AS DECIMAL_DIGITS'  	//             IIF(sql_type = -7' 2' 10) AS NUM_PREC_RADIX'  	//             IIF(not_null' 0' 1) AS NULLABLE'  	//             '' AS REMARKS'  	//             default AS COLUMN_DEFAULT'  	//             NULL AS SQL_DATA_TYPE'  	//             NULL AS SQL_DATETIME_SUB'  	//             IIF(size = -1' 1024' size) AS CHAR_OCTET_LENGTH'  	//             seq_no + 1 AS ORDINAL_POSITION'  	//             IIF(not_null' 'NO'' 'YES') AS IS_NULLABLE  	//      FROM INFORMATION_SCHEMA.ThisUserTableColumns  	systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  		SqlExpression.Constant (1024)'  		SqlExpression.Reference (new ObjectName ("size"))  	}' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))'  		SqlExpression.Constant (2)'  		SqlExpression.Constant (10)  	}' "NUM_PREC_RADIX").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("not_null"))'  		SqlExpression.Constant (0)'  		SqlExpression.Constant (1)'  	}' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  		SqlExpression.Constant (1024)'  		SqlExpression.Reference (new ObjectName ("size"))  	}' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("not_null"))'  		SqlExpression.Constant ("NO")'  		SqlExpression.Constant ("YES")'  	}' "IS_NULLABLE").FromTable (ThisUserTableColumnsViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Column_Privileges AS   	//     SELECT TABLE_CATALOG'  	//            TABLE_SCHEMA'  	//            TABLE_NAME'  	//            COLUMN_NAME'  	//            IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR'  	//            IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE'  	//            INFORMATION_SCHEMA.ThisUserGrant.description AS PRIVILEGE'  	//            IIF(grant_option' 'YES'' 'NO') AS IS_GRANTABLE  	//    FROM INFROMATION_SCHEMA.Columns' INFORMATION_SCHEMA.ThisUserGrant  	//    WHERE CONCAT(columns.TABLE_SCHEMA' '.'' columns.TABLE_NAME) = ThisUserGrant.name  	//        AND INFORMATION_SCHEMA.ThisUserGrant.object = 1   	//        AND INFORMATION_SCHEMA.ThisUserGrant.description IS NOT NULL  	systemQuery.CreateView (ColumnPrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Column ("COLUMN_NAME").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "granter").Equal (eq => eq.Value (User.SystemName))' b => b.Value (null)' c => c.Reference (ThisUserGrantViewName' "granter"))).As ("GRANTOR")).Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("grant_option"))'  		SqlExpression.Constant ("YES")'  		SqlExpression.Constant ("NO")  	}' "IS_GRANTABLE").From (source => source.Table (Columns)' source => source.Table (ThisUserGrantViewName)).Where (where => where.Function ("CONCAT"' a => a.Reference (Columns' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Columns' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null)))));  	// CREATE VIEW INFORMATION_SCHEMA.Table_Privileges AS  	//   SELECT TABLE_CATALOG'  	//          TABLE_SCHEMA'  	//          TABLE_NAME'  	//          IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR'  	//          IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE'  	//          INFORMATION_SCHEMA.ThisUserGrant.description AS PRIVILEGE'  	//          IIF(grant_option' 'YES'' 'NO') AS IS_GRANTABLE  	//    FROM INFORMATION_SCHEMA.Tables' INFORMATION_SCHEMA.ThisUserGrantViewName  	//    WHERE CONCAT(tables.TABLE_SCHEMA' '.'' tables.TABLE_NAME) = INFORMATION_SCHEMA.ThisUserGrant.name  	//     AND INFORMATION_SCHEMA.ThisUserGrant.object = 1  	//     AND INFORMATION_SCHEMA.ThisUserGrant.description IS NOT NULL  	systemQuery.CreateView (TablePrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))' SqlExpression.Constant (User.SystemName))'  		SqlExpression.Constant (null)'  		SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))  	}' "GRANTOR").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("grant_option"))'  		SqlExpression.Constant ("YES")'  		SqlExpression.Constant ("NO")  	}' "IS_GRANTABLE").Column (new ObjectName (ThisUserGrantViewName' "description")' "PRIVILEGE").FromTable (Tables).FromTable (ThisUserGrantViewName).Where (where => where.Function ("CONCAT"' a => a.Reference (Tables' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Tables' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null)))));  	// CREATE VIEW INFORMATION_SCHEMA.Primary_Keys AS   	//   SELECT NULL AS TABLE_CATALOG'  	//          schema AS TABLE_SCHEMA'  	//          table AS TABLE_NAME'  	//          column AS COLUMN_NAME'  	//          SYSTEM.pkey_cols.seq_no AS KEY_SEQ'  	//          name AS PK_NAME  	//   FROM SYSTEM.pkey_info' SYSTEM_pkey_cols  	//	 WHERE pkey_info.id = pkey_cols.pk_id  	//     AND schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (PrimaryKeys' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column (new ObjectName (SystemSchema.PrimaryKeyColumnsTableName' "seq_no")' "KEY_SEQ").Column ("name"' "PK_NAME").FromTable (SystemSchema.PrimaryKeyInfoTableName).FromTable (SystemSchema.PrimaryKeyColumnsTableName).Where (where => where.Reference ("pkey_info"' "id").Equal (eq => eq.Reference ("pkey_cols"' "pk_id")).And (and => and.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Imported_Keys AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (ImportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Exported_Keys AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (ExportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Cross_Reference AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (CrossReference' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	GrantToPublic (systemQuery);  }  
Magic Number,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The following statement contains a magic number: if (systemQuery.Access ().HasSecurity) {  	// This view shows the grants that the user has (no join' only priv_bit).  	systemQuery.CreateView (ThisUserSimpleGrantViewName' query => query.Column ("priv_bit").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName)))));  	// This view shows the grants that the user is allowed to see  	// CREATE VIEW ThisUserGrant AS  	//     SELECT i_privilege_string(priv_bit) AS description' object' name' grantee' grant_option' granter  	//         FROM grants  	//         WHERE (grantee = user() OR grantee = 'PUBLIC')  	systemQuery.CreateView (ThisUserGrantViewName' query => query.Function ("i_privilege_string"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("priv_bit"))  	}' "description").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName)))));  	// A view that represents the list of schema this user is allowed to view  	// the contents of.  	//  CREATE VIEW ThisUserSchemaInfo AS  	//      SELECT * FROM  SYSTEM.schema_info  	//          WHERE name IN (  	//              SELECT name  	//                  FROM INFORMATION_SCHEMA.ThisUserGrant  	//                  WHERE object = 1 AND description LIKE '%LIST%')  	systemQuery.CreateView (ThisUserSchemaInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.SchemaInfoTableName).Where (where => where.Reference ("name").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserGrantViewName).Where (filter => filter.Reference ("object").Equal (value => value.Value ((int)DbObjectType.Schema)).And (and => and.Reference ("description").Like (String.Format ("%{0}%"' Privileges.List.ToString ().ToUpperInvariant ()))))))));  	// A view that exposes the table_columns table but only for the tables  	// this user has read access to.  	// CREATE VIEW INFORMATION_SCHEMA.ThisUserTableColumns AS  	//     SELECT * FROM SYSTEM.table_columns  	//         WHERE schema IN (  	//             SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo)  	systemQuery.CreateView (ThisUserTableColumnsViewName' query => query.AllColumns ().FromTable (SystemSchema.TableColumnsTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))));  	// A view that exposes the 'table_info' table but only for the tables  	// this user has read access to.  	// CREATE VIEW INFORMATION_SCHEMA.ThisUserTableInfo AS  	//    SELECT * FROM SYSTEM.table_info  	//        WHERE schema IN (  	//            SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo)  	systemQuery.CreateView (ThisUserTableInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.TableInfoTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))));  	// CREATE VIEW INFORMATION_SCHEMA.Tables AS  	//     SELECT NULL AS TABLE_CATALOG'  	//            schema AS TABLE_SCHEMA'  	//            name AS TABLE_NAME  	//            type AS TABLE_TYPE'  	//            other AS REMARKS  	//            NULL AS TYPE_CATALOG  	//            NULL AS TYPE_SCHEMA  	//            NULL AS TYPE_NAME  	//            NULL AS SELF_REFERENCING_COL_NAME  	//            NULL AS REF_GENERATION  	//    FROM INFORMATION_SCHEMA.ThisUserTableInfo  	systemQuery.CreateView (Tables' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("name"' "TABLE_NAME").Column ("type"' "TABLE_TYPE").Column ("other"' "REMARKS").Constant (null' "TYPE_CATALOG").Constant (null' "TYPE_SCHEMA").Constant (null' "TYPE_NAME").Constant (null' "SELF_REFERENCING_COL_NAME").Constant (null' "REF_GENERATION").FromTable (ThisUserTableInfoViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Schemata AS  	//    SELECT name AS TABLE_SCHEMA  	//           NULL AS TABLE_CATALOG  	//    FROM INFORMATION_SCHEMA.ThisUserSchemaInfo  	systemQuery.CreateView (Schemata' query => query.Column ("name"' "TABLE_SCHEMA").Constant (null' "TABLE_CATALOG").FromTable (ThisUserSchemaInfoViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Catalogs AS  	//    SELECT NULL AS TABLE_CATALOG  	//        FROM SYSTEM.schema_info  	//        WHERE FALSE  	systemQuery.CreateView (Catalogs' query => query.Constant (null' "TABLE_CATALOG").FromTable (SystemSchema.SchemaInfoTableName).Where (SqlExpression.Constant (false)));  	// Hacky' this will generate a 0 row  	//  CREATE VIEW INFORMATION_SCHEMA.Columns AS  	//      SELECT NULL AS TABLE_CATALOG'  	//             schema AS TABLE_SCHEMA'  	//             table AS TABLE_NAME'  	//             column AS COLUMN_NAME'  	//	           sql_type AS DATA_TYPE'  	//             type_desc AS TYPE_NAME'  	//             IIF(size = -1' 1024' size) AS COLUMN_SIZE'  	//             NULL AS BUFFER_LENGTH'  	//             scale AS DECIMAL_DIGITS'  	//             IIF(sql_type = -7' 2' 10) AS NUM_PREC_RADIX'  	//             IIF(not_null' 0' 1) AS NULLABLE'  	//             '' AS REMARKS'  	//             default AS COLUMN_DEFAULT'  	//             NULL AS SQL_DATA_TYPE'  	//             NULL AS SQL_DATETIME_SUB'  	//             IIF(size = -1' 1024' size) AS CHAR_OCTET_LENGTH'  	//             seq_no + 1 AS ORDINAL_POSITION'  	//             IIF(not_null' 'NO'' 'YES') AS IS_NULLABLE  	//      FROM INFORMATION_SCHEMA.ThisUserTableColumns  	systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  		SqlExpression.Constant (1024)'  		SqlExpression.Reference (new ObjectName ("size"))  	}' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))'  		SqlExpression.Constant (2)'  		SqlExpression.Constant (10)  	}' "NUM_PREC_RADIX").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("not_null"))'  		SqlExpression.Constant (0)'  		SqlExpression.Constant (1)'  	}' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  		SqlExpression.Constant (1024)'  		SqlExpression.Reference (new ObjectName ("size"))  	}' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("not_null"))'  		SqlExpression.Constant ("NO")'  		SqlExpression.Constant ("YES")'  	}' "IS_NULLABLE").FromTable (ThisUserTableColumnsViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Column_Privileges AS   	//     SELECT TABLE_CATALOG'  	//            TABLE_SCHEMA'  	//            TABLE_NAME'  	//            COLUMN_NAME'  	//            IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR'  	//            IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE'  	//            INFORMATION_SCHEMA.ThisUserGrant.description AS PRIVILEGE'  	//            IIF(grant_option' 'YES'' 'NO') AS IS_GRANTABLE  	//    FROM INFROMATION_SCHEMA.Columns' INFORMATION_SCHEMA.ThisUserGrant  	//    WHERE CONCAT(columns.TABLE_SCHEMA' '.'' columns.TABLE_NAME) = ThisUserGrant.name  	//        AND INFORMATION_SCHEMA.ThisUserGrant.object = 1   	//        AND INFORMATION_SCHEMA.ThisUserGrant.description IS NOT NULL  	systemQuery.CreateView (ColumnPrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Column ("COLUMN_NAME").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "granter").Equal (eq => eq.Value (User.SystemName))' b => b.Value (null)' c => c.Reference (ThisUserGrantViewName' "granter"))).As ("GRANTOR")).Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("grant_option"))'  		SqlExpression.Constant ("YES")'  		SqlExpression.Constant ("NO")  	}' "IS_GRANTABLE").From (source => source.Table (Columns)' source => source.Table (ThisUserGrantViewName)).Where (where => where.Function ("CONCAT"' a => a.Reference (Columns' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Columns' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null)))));  	// CREATE VIEW INFORMATION_SCHEMA.Table_Privileges AS  	//   SELECT TABLE_CATALOG'  	//          TABLE_SCHEMA'  	//          TABLE_NAME'  	//          IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR'  	//          IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE'  	//          INFORMATION_SCHEMA.ThisUserGrant.description AS PRIVILEGE'  	//          IIF(grant_option' 'YES'' 'NO') AS IS_GRANTABLE  	//    FROM INFORMATION_SCHEMA.Tables' INFORMATION_SCHEMA.ThisUserGrantViewName  	//    WHERE CONCAT(tables.TABLE_SCHEMA' '.'' tables.TABLE_NAME) = INFORMATION_SCHEMA.ThisUserGrant.name  	//     AND INFORMATION_SCHEMA.ThisUserGrant.object = 1  	//     AND INFORMATION_SCHEMA.ThisUserGrant.description IS NOT NULL  	systemQuery.CreateView (TablePrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))' SqlExpression.Constant (User.SystemName))'  		SqlExpression.Constant (null)'  		SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))  	}' "GRANTOR").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("grant_option"))'  		SqlExpression.Constant ("YES")'  		SqlExpression.Constant ("NO")  	}' "IS_GRANTABLE").Column (new ObjectName (ThisUserGrantViewName' "description")' "PRIVILEGE").FromTable (Tables).FromTable (ThisUserGrantViewName).Where (where => where.Function ("CONCAT"' a => a.Reference (Tables' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Tables' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null)))));  	// CREATE VIEW INFORMATION_SCHEMA.Primary_Keys AS   	//   SELECT NULL AS TABLE_CATALOG'  	//          schema AS TABLE_SCHEMA'  	//          table AS TABLE_NAME'  	//          column AS COLUMN_NAME'  	//          SYSTEM.pkey_cols.seq_no AS KEY_SEQ'  	//          name AS PK_NAME  	//   FROM SYSTEM.pkey_info' SYSTEM_pkey_cols  	//	 WHERE pkey_info.id = pkey_cols.pk_id  	//     AND schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (PrimaryKeys' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column (new ObjectName (SystemSchema.PrimaryKeyColumnsTableName' "seq_no")' "KEY_SEQ").Column ("name"' "PK_NAME").FromTable (SystemSchema.PrimaryKeyInfoTableName).FromTable (SystemSchema.PrimaryKeyColumnsTableName).Where (where => where.Reference ("pkey_info"' "id").Equal (eq => eq.Reference ("pkey_cols"' "pk_id")).And (and => and.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Imported_Keys AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (ImportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Exported_Keys AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (ExportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Cross_Reference AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (CrossReference' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	GrantToPublic (systemQuery);  }  
Magic Number,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The following statement contains a magic number: if (systemQuery.Access ().HasSecurity) {  	// This view shows the grants that the user has (no join' only priv_bit).  	systemQuery.CreateView (ThisUserSimpleGrantViewName' query => query.Column ("priv_bit").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName)))));  	// This view shows the grants that the user is allowed to see  	// CREATE VIEW ThisUserGrant AS  	//     SELECT i_privilege_string(priv_bit) AS description' object' name' grantee' grant_option' granter  	//         FROM grants  	//         WHERE (grantee = user() OR grantee = 'PUBLIC')  	systemQuery.CreateView (ThisUserGrantViewName' query => query.Function ("i_privilege_string"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("priv_bit"))  	}' "description").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName)))));  	// A view that represents the list of schema this user is allowed to view  	// the contents of.  	//  CREATE VIEW ThisUserSchemaInfo AS  	//      SELECT * FROM  SYSTEM.schema_info  	//          WHERE name IN (  	//              SELECT name  	//                  FROM INFORMATION_SCHEMA.ThisUserGrant  	//                  WHERE object = 1 AND description LIKE '%LIST%')  	systemQuery.CreateView (ThisUserSchemaInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.SchemaInfoTableName).Where (where => where.Reference ("name").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserGrantViewName).Where (filter => filter.Reference ("object").Equal (value => value.Value ((int)DbObjectType.Schema)).And (and => and.Reference ("description").Like (String.Format ("%{0}%"' Privileges.List.ToString ().ToUpperInvariant ()))))))));  	// A view that exposes the table_columns table but only for the tables  	// this user has read access to.  	// CREATE VIEW INFORMATION_SCHEMA.ThisUserTableColumns AS  	//     SELECT * FROM SYSTEM.table_columns  	//         WHERE schema IN (  	//             SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo)  	systemQuery.CreateView (ThisUserTableColumnsViewName' query => query.AllColumns ().FromTable (SystemSchema.TableColumnsTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))));  	// A view that exposes the 'table_info' table but only for the tables  	// this user has read access to.  	// CREATE VIEW INFORMATION_SCHEMA.ThisUserTableInfo AS  	//    SELECT * FROM SYSTEM.table_info  	//        WHERE schema IN (  	//            SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo)  	systemQuery.CreateView (ThisUserTableInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.TableInfoTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))));  	// CREATE VIEW INFORMATION_SCHEMA.Tables AS  	//     SELECT NULL AS TABLE_CATALOG'  	//            schema AS TABLE_SCHEMA'  	//            name AS TABLE_NAME  	//            type AS TABLE_TYPE'  	//            other AS REMARKS  	//            NULL AS TYPE_CATALOG  	//            NULL AS TYPE_SCHEMA  	//            NULL AS TYPE_NAME  	//            NULL AS SELF_REFERENCING_COL_NAME  	//            NULL AS REF_GENERATION  	//    FROM INFORMATION_SCHEMA.ThisUserTableInfo  	systemQuery.CreateView (Tables' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("name"' "TABLE_NAME").Column ("type"' "TABLE_TYPE").Column ("other"' "REMARKS").Constant (null' "TYPE_CATALOG").Constant (null' "TYPE_SCHEMA").Constant (null' "TYPE_NAME").Constant (null' "SELF_REFERENCING_COL_NAME").Constant (null' "REF_GENERATION").FromTable (ThisUserTableInfoViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Schemata AS  	//    SELECT name AS TABLE_SCHEMA  	//           NULL AS TABLE_CATALOG  	//    FROM INFORMATION_SCHEMA.ThisUserSchemaInfo  	systemQuery.CreateView (Schemata' query => query.Column ("name"' "TABLE_SCHEMA").Constant (null' "TABLE_CATALOG").FromTable (ThisUserSchemaInfoViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Catalogs AS  	//    SELECT NULL AS TABLE_CATALOG  	//        FROM SYSTEM.schema_info  	//        WHERE FALSE  	systemQuery.CreateView (Catalogs' query => query.Constant (null' "TABLE_CATALOG").FromTable (SystemSchema.SchemaInfoTableName).Where (SqlExpression.Constant (false)));  	// Hacky' this will generate a 0 row  	//  CREATE VIEW INFORMATION_SCHEMA.Columns AS  	//      SELECT NULL AS TABLE_CATALOG'  	//             schema AS TABLE_SCHEMA'  	//             table AS TABLE_NAME'  	//             column AS COLUMN_NAME'  	//	           sql_type AS DATA_TYPE'  	//             type_desc AS TYPE_NAME'  	//             IIF(size = -1' 1024' size) AS COLUMN_SIZE'  	//             NULL AS BUFFER_LENGTH'  	//             scale AS DECIMAL_DIGITS'  	//             IIF(sql_type = -7' 2' 10) AS NUM_PREC_RADIX'  	//             IIF(not_null' 0' 1) AS NULLABLE'  	//             '' AS REMARKS'  	//             default AS COLUMN_DEFAULT'  	//             NULL AS SQL_DATA_TYPE'  	//             NULL AS SQL_DATETIME_SUB'  	//             IIF(size = -1' 1024' size) AS CHAR_OCTET_LENGTH'  	//             seq_no + 1 AS ORDINAL_POSITION'  	//             IIF(not_null' 'NO'' 'YES') AS IS_NULLABLE  	//      FROM INFORMATION_SCHEMA.ThisUserTableColumns  	systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  		SqlExpression.Constant (1024)'  		SqlExpression.Reference (new ObjectName ("size"))  	}' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))'  		SqlExpression.Constant (2)'  		SqlExpression.Constant (10)  	}' "NUM_PREC_RADIX").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("not_null"))'  		SqlExpression.Constant (0)'  		SqlExpression.Constant (1)'  	}' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  		SqlExpression.Constant (1024)'  		SqlExpression.Reference (new ObjectName ("size"))  	}' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("not_null"))'  		SqlExpression.Constant ("NO")'  		SqlExpression.Constant ("YES")'  	}' "IS_NULLABLE").FromTable (ThisUserTableColumnsViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Column_Privileges AS   	//     SELECT TABLE_CATALOG'  	//            TABLE_SCHEMA'  	//            TABLE_NAME'  	//            COLUMN_NAME'  	//            IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR'  	//            IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE'  	//            INFORMATION_SCHEMA.ThisUserGrant.description AS PRIVILEGE'  	//            IIF(grant_option' 'YES'' 'NO') AS IS_GRANTABLE  	//    FROM INFROMATION_SCHEMA.Columns' INFORMATION_SCHEMA.ThisUserGrant  	//    WHERE CONCAT(columns.TABLE_SCHEMA' '.'' columns.TABLE_NAME) = ThisUserGrant.name  	//        AND INFORMATION_SCHEMA.ThisUserGrant.object = 1   	//        AND INFORMATION_SCHEMA.ThisUserGrant.description IS NOT NULL  	systemQuery.CreateView (ColumnPrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Column ("COLUMN_NAME").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "granter").Equal (eq => eq.Value (User.SystemName))' b => b.Value (null)' c => c.Reference (ThisUserGrantViewName' "granter"))).As ("GRANTOR")).Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("grant_option"))'  		SqlExpression.Constant ("YES")'  		SqlExpression.Constant ("NO")  	}' "IS_GRANTABLE").From (source => source.Table (Columns)' source => source.Table (ThisUserGrantViewName)).Where (where => where.Function ("CONCAT"' a => a.Reference (Columns' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Columns' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null)))));  	// CREATE VIEW INFORMATION_SCHEMA.Table_Privileges AS  	//   SELECT TABLE_CATALOG'  	//          TABLE_SCHEMA'  	//          TABLE_NAME'  	//          IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR'  	//          IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE'  	//          INFORMATION_SCHEMA.ThisUserGrant.description AS PRIVILEGE'  	//          IIF(grant_option' 'YES'' 'NO') AS IS_GRANTABLE  	//    FROM INFORMATION_SCHEMA.Tables' INFORMATION_SCHEMA.ThisUserGrantViewName  	//    WHERE CONCAT(tables.TABLE_SCHEMA' '.'' tables.TABLE_NAME) = INFORMATION_SCHEMA.ThisUserGrant.name  	//     AND INFORMATION_SCHEMA.ThisUserGrant.object = 1  	//     AND INFORMATION_SCHEMA.ThisUserGrant.description IS NOT NULL  	systemQuery.CreateView (TablePrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))' SqlExpression.Constant (User.SystemName))'  		SqlExpression.Constant (null)'  		SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))  	}' "GRANTOR").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("grant_option"))'  		SqlExpression.Constant ("YES")'  		SqlExpression.Constant ("NO")  	}' "IS_GRANTABLE").Column (new ObjectName (ThisUserGrantViewName' "description")' "PRIVILEGE").FromTable (Tables).FromTable (ThisUserGrantViewName).Where (where => where.Function ("CONCAT"' a => a.Reference (Tables' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Tables' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null)))));  	// CREATE VIEW INFORMATION_SCHEMA.Primary_Keys AS   	//   SELECT NULL AS TABLE_CATALOG'  	//          schema AS TABLE_SCHEMA'  	//          table AS TABLE_NAME'  	//          column AS COLUMN_NAME'  	//          SYSTEM.pkey_cols.seq_no AS KEY_SEQ'  	//          name AS PK_NAME  	//   FROM SYSTEM.pkey_info' SYSTEM_pkey_cols  	//	 WHERE pkey_info.id = pkey_cols.pk_id  	//     AND schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (PrimaryKeys' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column (new ObjectName (SystemSchema.PrimaryKeyColumnsTableName' "seq_no")' "KEY_SEQ").Column ("name"' "PK_NAME").FromTable (SystemSchema.PrimaryKeyInfoTableName).FromTable (SystemSchema.PrimaryKeyColumnsTableName).Where (where => where.Reference ("pkey_info"' "id").Equal (eq => eq.Reference ("pkey_cols"' "pk_id")).And (and => and.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Imported_Keys AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (ImportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Exported_Keys AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (ExportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Cross_Reference AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (CrossReference' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	GrantToPublic (systemQuery);  }  
Magic Number,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The following statement contains a magic number: if (systemQuery.Access ().HasSecurity) {  	// This view shows the grants that the user has (no join' only priv_bit).  	systemQuery.CreateView (ThisUserSimpleGrantViewName' query => query.Column ("priv_bit").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName)))));  	// This view shows the grants that the user is allowed to see  	// CREATE VIEW ThisUserGrant AS  	//     SELECT i_privilege_string(priv_bit) AS description' object' name' grantee' grant_option' granter  	//         FROM grants  	//         WHERE (grantee = user() OR grantee = 'PUBLIC')  	systemQuery.CreateView (ThisUserGrantViewName' query => query.Function ("i_privilege_string"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("priv_bit"))  	}' "description").Column ("object").Column ("name").Column ("grantee").Column ("grant_option").Column ("granter").FromTable (SystemSchema.GrantsTableName).Where (where => where.Reference ("grantee").Equal (right => right.Function ("user")).Or (or => or.Reference ("grantee").Equal (right => right.Value (User.PublicName)))));  	// A view that represents the list of schema this user is allowed to view  	// the contents of.  	//  CREATE VIEW ThisUserSchemaInfo AS  	//      SELECT * FROM  SYSTEM.schema_info  	//          WHERE name IN (  	//              SELECT name  	//                  FROM INFORMATION_SCHEMA.ThisUserGrant  	//                  WHERE object = 1 AND description LIKE '%LIST%')  	systemQuery.CreateView (ThisUserSchemaInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.SchemaInfoTableName).Where (where => where.Reference ("name").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserGrantViewName).Where (filter => filter.Reference ("object").Equal (value => value.Value ((int)DbObjectType.Schema)).And (and => and.Reference ("description").Like (String.Format ("%{0}%"' Privileges.List.ToString ().ToUpperInvariant ()))))))));  	// A view that exposes the table_columns table but only for the tables  	// this user has read access to.  	// CREATE VIEW INFORMATION_SCHEMA.ThisUserTableColumns AS  	//     SELECT * FROM SYSTEM.table_columns  	//         WHERE schema IN (  	//             SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo)  	systemQuery.CreateView (ThisUserTableColumnsViewName' query => query.AllColumns ().FromTable (SystemSchema.TableColumnsTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))));  	// A view that exposes the 'table_info' table but only for the tables  	// this user has read access to.  	// CREATE VIEW INFORMATION_SCHEMA.ThisUserTableInfo AS  	//    SELECT * FROM SYSTEM.table_info  	//        WHERE schema IN (  	//            SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo)  	systemQuery.CreateView (ThisUserTableInfoViewName' query => query.AllColumns ().FromTable (SystemSchema.TableInfoTableName).Where (where => where.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName)))));  	// CREATE VIEW INFORMATION_SCHEMA.Tables AS  	//     SELECT NULL AS TABLE_CATALOG'  	//            schema AS TABLE_SCHEMA'  	//            name AS TABLE_NAME  	//            type AS TABLE_TYPE'  	//            other AS REMARKS  	//            NULL AS TYPE_CATALOG  	//            NULL AS TYPE_SCHEMA  	//            NULL AS TYPE_NAME  	//            NULL AS SELF_REFERENCING_COL_NAME  	//            NULL AS REF_GENERATION  	//    FROM INFORMATION_SCHEMA.ThisUserTableInfo  	systemQuery.CreateView (Tables' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("name"' "TABLE_NAME").Column ("type"' "TABLE_TYPE").Column ("other"' "REMARKS").Constant (null' "TYPE_CATALOG").Constant (null' "TYPE_SCHEMA").Constant (null' "TYPE_NAME").Constant (null' "SELF_REFERENCING_COL_NAME").Constant (null' "REF_GENERATION").FromTable (ThisUserTableInfoViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Schemata AS  	//    SELECT name AS TABLE_SCHEMA  	//           NULL AS TABLE_CATALOG  	//    FROM INFORMATION_SCHEMA.ThisUserSchemaInfo  	systemQuery.CreateView (Schemata' query => query.Column ("name"' "TABLE_SCHEMA").Constant (null' "TABLE_CATALOG").FromTable (ThisUserSchemaInfoViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Catalogs AS  	//    SELECT NULL AS TABLE_CATALOG  	//        FROM SYSTEM.schema_info  	//        WHERE FALSE  	systemQuery.CreateView (Catalogs' query => query.Constant (null' "TABLE_CATALOG").FromTable (SystemSchema.SchemaInfoTableName).Where (SqlExpression.Constant (false)));  	// Hacky' this will generate a 0 row  	//  CREATE VIEW INFORMATION_SCHEMA.Columns AS  	//      SELECT NULL AS TABLE_CATALOG'  	//             schema AS TABLE_SCHEMA'  	//             table AS TABLE_NAME'  	//             column AS COLUMN_NAME'  	//	           sql_type AS DATA_TYPE'  	//             type_desc AS TYPE_NAME'  	//             IIF(size = -1' 1024' size) AS COLUMN_SIZE'  	//             NULL AS BUFFER_LENGTH'  	//             scale AS DECIMAL_DIGITS'  	//             IIF(sql_type = -7' 2' 10) AS NUM_PREC_RADIX'  	//             IIF(not_null' 0' 1) AS NULLABLE'  	//             '' AS REMARKS'  	//             default AS COLUMN_DEFAULT'  	//             NULL AS SQL_DATA_TYPE'  	//             NULL AS SQL_DATETIME_SUB'  	//             IIF(size = -1' 1024' size) AS CHAR_OCTET_LENGTH'  	//             seq_no + 1 AS ORDINAL_POSITION'  	//             IIF(not_null' 'NO'' 'YES') AS IS_NULLABLE  	//      FROM INFORMATION_SCHEMA.ThisUserTableColumns  	systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  		SqlExpression.Constant (1024)'  		SqlExpression.Reference (new ObjectName ("size"))  	}' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))'  		SqlExpression.Constant (2)'  		SqlExpression.Constant (10)  	}' "NUM_PREC_RADIX").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("not_null"))'  		SqlExpression.Constant (0)'  		SqlExpression.Constant (1)'  	}' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  		SqlExpression.Constant (1024)'  		SqlExpression.Reference (new ObjectName ("size"))  	}' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("not_null"))'  		SqlExpression.Constant ("NO")'  		SqlExpression.Constant ("YES")'  	}' "IS_NULLABLE").FromTable (ThisUserTableColumnsViewName));  	// CREATE VIEW INFORMATION_SCHEMA.Column_Privileges AS   	//     SELECT TABLE_CATALOG'  	//            TABLE_SCHEMA'  	//            TABLE_NAME'  	//            COLUMN_NAME'  	//            IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR'  	//            IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE'  	//            INFORMATION_SCHEMA.ThisUserGrant.description AS PRIVILEGE'  	//            IIF(grant_option' 'YES'' 'NO') AS IS_GRANTABLE  	//    FROM INFROMATION_SCHEMA.Columns' INFORMATION_SCHEMA.ThisUserGrant  	//    WHERE CONCAT(columns.TABLE_SCHEMA' '.'' columns.TABLE_NAME) = ThisUserGrant.name  	//        AND INFORMATION_SCHEMA.ThisUserGrant.object = 1   	//        AND INFORMATION_SCHEMA.ThisUserGrant.description IS NOT NULL  	systemQuery.CreateView (ColumnPrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Column ("COLUMN_NAME").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "granter").Equal (eq => eq.Value (User.SystemName))' b => b.Value (null)' c => c.Reference (ThisUserGrantViewName' "granter"))).As ("GRANTOR")).Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("grant_option"))'  		SqlExpression.Constant ("YES")'  		SqlExpression.Constant ("NO")  	}' "IS_GRANTABLE").From (source => source.Table (Columns)' source => source.Table (ThisUserGrantViewName)).Where (where => where.Function ("CONCAT"' a => a.Reference (Columns' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Columns' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null)))));  	// CREATE VIEW INFORMATION_SCHEMA.Table_Privileges AS  	//   SELECT TABLE_CATALOG'  	//          TABLE_SCHEMA'  	//          TABLE_NAME'  	//          IIF(INFORMATION_SCHEMA.ThisUserGrant.granter = '@SYSTEM'' NULL' INFORMATION_SCHEMA.ThisUserGrant.granter) AS GRANTOR'  	//          IIF(INFORMATION_SCHEMA.ThisUserGrant.grantee = 'PUBLIC'' 'public'' INFORMATION_SCHEMA.ThisUserGrant.grantee) AS GRANTEE'  	//          INFORMATION_SCHEMA.ThisUserGrant.description AS PRIVILEGE'  	//          IIF(grant_option' 'YES'' 'NO') AS IS_GRANTABLE  	//    FROM INFORMATION_SCHEMA.Tables' INFORMATION_SCHEMA.ThisUserGrantViewName  	//    WHERE CONCAT(tables.TABLE_SCHEMA' '.'' tables.TABLE_NAME) = INFORMATION_SCHEMA.ThisUserGrant.name  	//     AND INFORMATION_SCHEMA.ThisUserGrant.object = 1  	//     AND INFORMATION_SCHEMA.ThisUserGrant.description IS NOT NULL  	systemQuery.CreateView (TablePrivileges' query => query.Column ("TABLE_CATALOG").Column ("TABLE_SCHEMA").Column ("TABLE_NAME").Function ("IIF"' new SqlExpression[] {  		SqlExpression.Equal (SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))' SqlExpression.Constant (User.SystemName))'  		SqlExpression.Constant (null)'  		SqlExpression.Reference (new ObjectName (ThisUserGrantViewName' "granter"))  	}' "GRANTOR").Item (item => item.Expression (exp => exp.Function ("IIF"' a => a.Reference (ThisUserGrantViewName' "grantee").Equal (eq => eq.Value (User.PublicName))' b => b.Value ("public")' c => c.Reference (ThisUserGrantViewName' "grantee"))).As ("GRANTEE")).Function ("IIF"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName ("grant_option"))'  		SqlExpression.Constant ("YES")'  		SqlExpression.Constant ("NO")  	}' "IS_GRANTABLE").Column (new ObjectName (ThisUserGrantViewName' "description")' "PRIVILEGE").FromTable (Tables).FromTable (ThisUserGrantViewName).Where (where => where.Function ("CONCAT"' a => a.Reference (Tables' "TABLE_SCHEMA")' b => b.Value (".")' c => c.Reference (Tables' "TABLE_NAME")).Equal (eq => eq.Reference (ThisUserGrantViewName' "name")).And (and => and.Reference (ThisUserGrantViewName' "object").Equal (eq => eq.Value ((int)DbObjectType.Table))).And (and => and.Reference (ThisUserGrantViewName' "description").IsNot (@is => @is.Value (null)))));  	// CREATE VIEW INFORMATION_SCHEMA.Primary_Keys AS   	//   SELECT NULL AS TABLE_CATALOG'  	//          schema AS TABLE_SCHEMA'  	//          table AS TABLE_NAME'  	//          column AS COLUMN_NAME'  	//          SYSTEM.pkey_cols.seq_no AS KEY_SEQ'  	//          name AS PK_NAME  	//   FROM SYSTEM.pkey_info' SYSTEM_pkey_cols  	//	 WHERE pkey_info.id = pkey_cols.pk_id  	//     AND schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (PrimaryKeys' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column (new ObjectName (SystemSchema.PrimaryKeyColumnsTableName' "seq_no")' "KEY_SEQ").Column ("name"' "PK_NAME").FromTable (SystemSchema.PrimaryKeyInfoTableName).FromTable (SystemSchema.PrimaryKeyColumnsTableName).Where (where => where.Reference ("pkey_info"' "id").Equal (eq => eq.Reference ("pkey_cols"' "pk_id")).And (and => and.Reference ("schema").In (@in => @in.Query (sub => sub.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Imported_Keys AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (ImportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Exported_Keys AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (ExportedKeys' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	// CREATE VIEW INFORMATION_SCHEMA.Cross_Reference AS  	//   SELECT NULL AS PKTABLE_CATALOG'  	//          fkey_info.ref_schema AS PKTABLE_SCHEMA'  	//          fkey_info.ref_table AS PKTABLE_NAME'  	//          fkey_cols.pcolumn AS PKCOLUMN_NAME'  	//          NULL AS FKTABLE_CATALOG'  	//          fkey_info.schema AS FKTABLE_SCHEMA'  	//          fkey_info.table AS FKTABLE_NAME'  	//          fkey_cols.fcolumn AS FKCOLUMN_NAME'  	//          fkey_cols.seq_no AS KEY_SEQ'  	//          I_FRULE_CONVERT(fkey_info.update_rule) AS UPDATE_RULE'  	//          I_FRULE_CONVERT(fkey_info.delete_rule) AS DELETE_RULE'  	//          fkey_info.name AS FK_NAME'  	//          NULL AS PK_NAME'  	//          fkey_info.deferred AS DEFERRABILITY  	//   FROM SYSTEM.fkey_info' SYSTEM.fkey_cols  	//   WHERE fkey_info.id = fkey_cols.fk_id  	//     AND fkey_info.schema IN ( SELECT name FROM INFORMATION_SCHEMA.ThisUserSchemaInfo )  	systemQuery.CreateView (CrossReference' query => query.Constant (null' "PKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_schema")' "PKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "ref_table")' "PKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "pcolumn")' "PKCOLUMN_NAME").Constant (null' "FKTABLE_CATALOG").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")' "FKTABLE_SCHEMA").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "table")' "FKTABLE_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fcolumn")' "FKCOLUMN_NAME").Column (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "seq_no")' "KEY_SEQ").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "update_rule"))  	}' "UPDATE_RULE").Function ("I_FRULE_CONVERT"' new SqlExpression[] {  		SqlExpression.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "delete_rule"))  	}' "DELETE_RULE").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "name")' "FK_NAME").Constant (null' "PK_NAME").Column (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "deferred")' "DEFERRABILITY").From (source => source.Table (SystemSchema.ForeignKeyInfoTableName)' source => source.Table (SystemSchema.ForeignKeyColumnsTableName)).Where (where => where.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "id")).Equal (eq => eq.Reference (new ObjectName (SystemSchema.ForeignKeyColumnsTableName' "fk_id"))).And (and => and.Reference (new ObjectName (SystemSchema.ForeignKeyInfoTableName' "schema")).In (@in => @in.Query (q => q.Column ("name").FromTable (ThisUserSchemaInfoViewName))))));  	GrantToPublic (systemQuery);  }  
Magic Number,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The following statement contains a magic number: systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  	SqlExpression.Constant (1024)'  	SqlExpression.Reference (new ObjectName ("size"))  }' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))'  	SqlExpression.Constant (2)'  	SqlExpression.Constant (10)  }' "NUM_PREC_RADIX").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Reference (new ObjectName ("not_null"))'  	SqlExpression.Constant (0)'  	SqlExpression.Constant (1)'  }' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  	SqlExpression.Constant (1024)'  	SqlExpression.Reference (new ObjectName ("size"))  }' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Reference (new ObjectName ("not_null"))'  	SqlExpression.Constant ("NO")'  	SqlExpression.Constant ("YES")'  }' "IS_NULLABLE").FromTable (ThisUserTableColumnsViewName));  
Magic Number,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The following statement contains a magic number: systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  	SqlExpression.Constant (1024)'  	SqlExpression.Reference (new ObjectName ("size"))  }' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))'  	SqlExpression.Constant (2)'  	SqlExpression.Constant (10)  }' "NUM_PREC_RADIX").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Reference (new ObjectName ("not_null"))'  	SqlExpression.Constant (0)'  	SqlExpression.Constant (1)'  }' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  	SqlExpression.Constant (1024)'  	SqlExpression.Reference (new ObjectName ("size"))  }' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Reference (new ObjectName ("not_null"))'  	SqlExpression.Constant ("NO")'  	SqlExpression.Constant ("YES")'  }' "IS_NULLABLE").FromTable (ThisUserTableColumnsViewName));  
Magic Number,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The following statement contains a magic number: systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  	SqlExpression.Constant (1024)'  	SqlExpression.Reference (new ObjectName ("size"))  }' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))'  	SqlExpression.Constant (2)'  	SqlExpression.Constant (10)  }' "NUM_PREC_RADIX").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Reference (new ObjectName ("not_null"))'  	SqlExpression.Constant (0)'  	SqlExpression.Constant (1)'  }' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  	SqlExpression.Constant (1024)'  	SqlExpression.Reference (new ObjectName ("size"))  }' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Reference (new ObjectName ("not_null"))'  	SqlExpression.Constant ("NO")'  	SqlExpression.Constant ("YES")'  }' "IS_NULLABLE").FromTable (ThisUserTableColumnsViewName));  
Magic Number,Deveel.Data.Sql.Schemas,InformationSchema,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\InformationSchema.cs,Create,The following statement contains a magic number: systemQuery.CreateView (Columns' query => query.Constant (null' "TABLE_CATALOG").Column ("schema"' "TABLE_SCHEMA").Column ("table"' "TABLE_NAME").Column ("column"' "COLUMN_NAME").Column ("sql_type"' "DATA_TYPE").Column ("type_desc"' "TYPE_NAME").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  	SqlExpression.Constant (1024)'  	SqlExpression.Reference (new ObjectName ("size"))  }' "COLUMN_SIZE").Constant (null' "BUFFER_LENGTH").Column ("scale"' "DECIMAL_DIGITS").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("sql_type"))' SqlExpression.Constant ((int)SqlTypeCode.Float))'  	SqlExpression.Constant (2)'  	SqlExpression.Constant (10)  }' "NUM_PREC_RADIX").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Reference (new ObjectName ("not_null"))'  	SqlExpression.Constant (0)'  	SqlExpression.Constant (1)'  }' "NULLABLE").Constant (String.Empty' "REMARKS").Column ("default"' "COLUMN_DEFAULT").Constant (null' "SQL_DATA_TYPE").Constant (null' "SQL_DATETIME_SUB").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Equal (SqlExpression.Reference (new ObjectName ("size"))' SqlExpression.Constant (-1))'  	SqlExpression.Constant (1024)'  	SqlExpression.Reference (new ObjectName ("size"))  }' "CHAR_OCTET_LENGTH").Expression (SqlExpression.Add (SqlExpression.Reference (new ObjectName ("seq_no"))' SqlExpression.Constant (1))' "ORDINAL_POSITION").Function ("IIF"' new SqlExpression[] {  	SqlExpression.Reference (new ObjectName ("not_null"))'  	SqlExpression.Constant ("NO")'  	SqlExpression.Constant ("YES")'  }' "IS_NULLABLE").FromTable (ThisUserTableColumnsViewName));  
Magic Number,Deveel.Data.Sql.Schemas,SchemaManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\SchemaManager.cs,CreateSchema,The following statement contains a magic number: row.SetValue (2' Field.String (schemaInfo.Type));  
Magic Number,Deveel.Data.Sql.Schemas,SchemaManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Schemas\SchemaManager.cs,CreateSchema,The following statement contains a magic number: row.SetValue (3' Field.String (schemaInfo.Culture));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,UpdateSequenceState,The following statement contains a magic number: dataRow.SetValue (2' Field.Number (sequence.SequenceInfo.Increment));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,UpdateSequenceState,The following statement contains a magic number: dataRow.SetValue (3' Field.Number (sequence.SequenceInfo.MinValue));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,UpdateSequenceState,The following statement contains a magic number: dataRow.SetValue (4' Field.Number (sequence.SequenceInfo.MaxValue));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,UpdateSequenceState,The following statement contains a magic number: dataRow.SetValue (5' Field.Number (sequence.SequenceInfo.StartValue));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,UpdateSequenceState,The following statement contains a magic number: dataRow.SetValue (6' Field.BigInt (sequence.SequenceInfo.Cache));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,UpdateSequenceState,The following statement contains a magic number: dataRow.SetValue (7' Field.Boolean (sequence.SequenceInfo.Cycle));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (2' Field.VarChar (sequenceName.Name));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (3' Field.BigInt (2));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (3' Field.BigInt (2));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (2' Field.Number (sequenceInfo.Increment));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (3' Field.Number (sequenceInfo.MinValue));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (4' Field.Number (sequenceInfo.MaxValue));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (5' Field.Number (sequenceInfo.StartValue));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (6' Field.BigInt (sequenceInfo.Cache));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateCustomSequence,The following statement contains a magic number: dataRow.SetValue (7' Field.Boolean (sequenceInfo.Cycle));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateNativeTableSequence,The following statement contains a magic number: dataRow.SetValue (2' Field.VarChar (tableName.Name));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,CreateNativeTableSequence,The following statement contains a magic number: dataRow.SetValue (3' Field.BigInt (1));  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,FindByName,The following statement contains a magic number: foreach (var row in table) {  	var seqType = row.GetValue (3);  	if (!seqType.IsEqualTo (OneValue)) {  		var obName = row.GetValue (2);  		if (obName.IsEqualTo (name)) {  			var obSchema = row.GetValue (1);  			if (obSchema.IsEqualTo (schema)) {  				// Match so return this  				return p;  			}  		}  		++p;  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,FindByName,The following statement contains a magic number: foreach (var row in table) {  	var seqType = row.GetValue (3);  	if (!seqType.IsEqualTo (OneValue)) {  		var obName = row.GetValue (2);  		if (obName.IsEqualTo (name)) {  			var obSchema = row.GetValue (1);  			if (obSchema.IsEqualTo (schema)) {  				// Match so return this  				return p;  			}  		}  		++p;  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,FindByName,The following statement contains a magic number: if (!seqType.IsEqualTo (OneValue)) {  	var obName = row.GetValue (2);  	if (obName.IsEqualTo (name)) {  		var obSchema = row.GetValue (1);  		if (obSchema.IsEqualTo (schema)) {  			// Match so return this  			return p;  		}  	}  	++p;  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetTableName,The following statement contains a magic number: if (Transaction.RealTableExists (seqInfo)) {  	var table = Transaction.GetTable (seqInfo);  	int p = 0;  	foreach (var row in table) {  		var seqType = row.GetValue (3);  		if (!seqType.IsEqualTo (OneValue)) {  			if (offset == p) {  				var obSchema = row.GetValue (1);  				var obName = row.GetValue (2);  				return new ObjectName (ObjectName.Parse (obSchema.Value.ToString ())' obName.Value.ToString ());  			}  			++p;  		}  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetTableName,The following statement contains a magic number: if (Transaction.RealTableExists (seqInfo)) {  	var table = Transaction.GetTable (seqInfo);  	int p = 0;  	foreach (var row in table) {  		var seqType = row.GetValue (3);  		if (!seqType.IsEqualTo (OneValue)) {  			if (offset == p) {  				var obSchema = row.GetValue (1);  				var obName = row.GetValue (2);  				return new ObjectName (ObjectName.Parse (obSchema.Value.ToString ())' obName.Value.ToString ());  			}  			++p;  		}  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetTableName,The following statement contains a magic number: foreach (var row in table) {  	var seqType = row.GetValue (3);  	if (!seqType.IsEqualTo (OneValue)) {  		if (offset == p) {  			var obSchema = row.GetValue (1);  			var obName = row.GetValue (2);  			return new ObjectName (ObjectName.Parse (obSchema.Value.ToString ())' obName.Value.ToString ());  		}  		++p;  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetTableName,The following statement contains a magic number: foreach (var row in table) {  	var seqType = row.GetValue (3);  	if (!seqType.IsEqualTo (OneValue)) {  		if (offset == p) {  			var obSchema = row.GetValue (1);  			var obName = row.GetValue (2);  			return new ObjectName (ObjectName.Parse (obSchema.Value.ToString ())' obName.Value.ToString ());  		}  		++p;  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetTableName,The following statement contains a magic number: if (!seqType.IsEqualTo (OneValue)) {  	if (offset == p) {  		var obSchema = row.GetValue (1);  		var obName = row.GetValue (2);  		return new ObjectName (ObjectName.Parse (obSchema.Value.ToString ())' obName.Value.ToString ());  	}  	++p;  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetTableName,The following statement contains a magic number: if (offset == p) {  	var obSchema = row.GetValue (1);  	var obName = row.GetValue (2);  	return new ObjectName (ObjectName.Parse (obSchema.Value.ToString ())' obName.Value.ToString ());  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,SequenceExists,The following statement contains a magic number: return seqi.SelectRowsEqual (1' Field.VarChar (sequenceName.ParentName)' 2' Field.VarChar (sequenceName.Name)).Any ();  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (!seqCache.TryGet (sequenceName' out sequence)) {  	// This sequence generator is not in the cache so we need to query the  	// sequence table for this.  	var seqi = Transaction.GetTable (SequenceInfoTableName);  	var schemaVal = Field.VarChar (sequenceName.Parent.FullName);  	var nameVal = Field.VarChar (sequenceName.Name);  	var list = seqi.SelectRowsEqual (2' nameVal' 1' schemaVal).ToList ();  	if (list.Count == 0) {  		throw new ArgumentException (String.Format ("Sequence '{0}' not found."' sequenceName));  	} else if (list.Count () > 1) {  		throw new Exception ("Assert failed: multiple sequence keys with same name.");  	}  	int rowIndex = list.First ();  	var sid = seqi.GetValue (rowIndex' 0);  	var sschema = seqi.GetValue (rowIndex' 1);  	var sname = seqi.GetValue (rowIndex' 2);  	var stype = seqi.GetValue (rowIndex' 3);  	// Is this a custom sequence generator?  	// (stype == 1) == true  	if (stype.IsEqualTo (OneValue)) {  		// Native generator.  		sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  	} else {  		// Query the sequence table.  		var seq = Transaction.GetTable (SequenceTableName);  		list = seq.SelectRowsEqual (0' sid).ToList ();  		if (!list.Any ())  			throw new Exception ("Sequence table does not contain sequence information.");  		if (list.Count () > 1)  			throw new Exception ("Sequence table contains multiple generators for id.");  		rowIndex = list.First ();  		var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  		var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  		var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  		var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  		var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  		var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  		bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  		var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  		sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  		// Put the generator in the cache  		seqCache.Set (sequenceName' sequence);  	}  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (stype.IsEqualTo (OneValue)) {  	// Native generator.  	sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  } else {  	// Query the sequence table.  	var seq = Transaction.GetTable (SequenceTableName);  	list = seq.SelectRowsEqual (0' sid).ToList ();  	if (!list.Any ())  		throw new Exception ("Sequence table does not contain sequence information.");  	if (list.Count () > 1)  		throw new Exception ("Sequence table contains multiple generators for id.");  	rowIndex = list.First ();  	var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  	var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  	var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  	var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  	var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  	var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  	bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  	var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  	sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  	// Put the generator in the cache  	seqCache.Set (sequenceName' sequence);  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (stype.IsEqualTo (OneValue)) {  	// Native generator.  	sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  } else {  	// Query the sequence table.  	var seq = Transaction.GetTable (SequenceTableName);  	list = seq.SelectRowsEqual (0' sid).ToList ();  	if (!list.Any ())  		throw new Exception ("Sequence table does not contain sequence information.");  	if (list.Count () > 1)  		throw new Exception ("Sequence table contains multiple generators for id.");  	rowIndex = list.First ();  	var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  	var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  	var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  	var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  	var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  	var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  	bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  	var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  	sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  	// Put the generator in the cache  	seqCache.Set (sequenceName' sequence);  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (stype.IsEqualTo (OneValue)) {  	// Native generator.  	sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  } else {  	// Query the sequence table.  	var seq = Transaction.GetTable (SequenceTableName);  	list = seq.SelectRowsEqual (0' sid).ToList ();  	if (!list.Any ())  		throw new Exception ("Sequence table does not contain sequence information.");  	if (list.Count () > 1)  		throw new Exception ("Sequence table contains multiple generators for id.");  	rowIndex = list.First ();  	var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  	var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  	var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  	var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  	var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  	var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  	bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  	var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  	sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  	// Put the generator in the cache  	seqCache.Set (sequenceName' sequence);  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (stype.IsEqualTo (OneValue)) {  	// Native generator.  	sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  } else {  	// Query the sequence table.  	var seq = Transaction.GetTable (SequenceTableName);  	list = seq.SelectRowsEqual (0' sid).ToList ();  	if (!list.Any ())  		throw new Exception ("Sequence table does not contain sequence information.");  	if (list.Count () > 1)  		throw new Exception ("Sequence table contains multiple generators for id.");  	rowIndex = list.First ();  	var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  	var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  	var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  	var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  	var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  	var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  	bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  	var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  	sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  	// Put the generator in the cache  	seqCache.Set (sequenceName' sequence);  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (stype.IsEqualTo (OneValue)) {  	// Native generator.  	sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  } else {  	// Query the sequence table.  	var seq = Transaction.GetTable (SequenceTableName);  	list = seq.SelectRowsEqual (0' sid).ToList ();  	if (!list.Any ())  		throw new Exception ("Sequence table does not contain sequence information.");  	if (list.Count () > 1)  		throw new Exception ("Sequence table contains multiple generators for id.");  	rowIndex = list.First ();  	var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  	var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  	var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  	var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  	var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  	var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  	bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  	var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  	sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  	// Put the generator in the cache  	seqCache.Set (sequenceName' sequence);  }  
Magic Number,Deveel.Data.Sql.Sequences,SequenceManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Sequences\SequenceManager.cs,GetSequence,The following statement contains a magic number: if (stype.IsEqualTo (OneValue)) {  	// Native generator.  	sequence = new Sequence (this' (SqlNumber)sid.Value' SequenceInfo.Native (sequenceName));  } else {  	// Query the sequence table.  	var seq = Transaction.GetTable (SequenceTableName);  	list = seq.SelectRowsEqual (0' sid).ToList ();  	if (!list.Any ())  		throw new Exception ("Sequence table does not contain sequence information.");  	if (list.Count () > 1)  		throw new Exception ("Sequence table contains multiple generators for id.");  	rowIndex = list.First ();  	var lastValue = (SqlNumber)seq.GetValue (rowIndex' 1).Value;  	var increment = (SqlNumber)seq.GetValue (rowIndex' 2).Value;  	var minvalue = (SqlNumber)seq.GetValue (rowIndex' 3).Value;  	var maxvalue = (SqlNumber)seq.GetValue (rowIndex' 4).Value;  	var start = (SqlNumber)seq.GetValue (rowIndex' 5).Value;  	var cache = (long)seq.GetValue (rowIndex' 6).AsBigInt ();  	bool cycle = seq.GetValue (rowIndex' 7).AsBoolean ();  	var info = new SequenceInfo (sequenceName' start' increment' minvalue' maxvalue' cache' cycle);  	sequence = new Sequence (this' (SqlNumber)sid.Value' lastValue' info);  	// Put the generator in the cache  	seqCache.Set (sequenceName' sequence);  }  
Magic Number,Deveel.Data.Sql.Tables,ColumnInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ColumnInfo.cs,Serialize,The following statement contains a magic number: writer.Write (3);  
Magic Number,Deveel.Data.Sql.Tables,ColumnInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\ColumnInfo.cs,Deserialize,The following statement contains a magic number: if (version != 3)  	throw new FormatException ("Invalid version of the Column-Info");  
Magic Number,Deveel.Data.Sql.Tables,Table,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\Table.cs,FindColumn,The following statement contains a magic number: lock (colLookupLock) {  	if (colNameLookup == null)  		colNameLookup = new Dictionary<ObjectName' int> (30);  	int index;  	if (!colNameLookup.TryGetValue (columnName' out index)) {  		index = IndexOfColumn (columnName);  		colNameLookup [columnName] = index;  	}  	return index;  }  
Magic Number,Deveel.Data.Sql.Tables,Table,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\Table.cs,FindColumn,The following statement contains a magic number: if (colNameLookup == null)  	colNameLookup = new Dictionary<ObjectName' int> (30);  
Magic Number,Deveel.Data.Sql.Tables,Table,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\Table.cs,FindColumn,The following statement contains a magic number: colNameLookup = new Dictionary<ObjectName' int> (30);  
Magic Number,Deveel.Data.Sql.Tables,TableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableInfo.cs,Serialize,The following statement contains a magic number: writer.Write (3);  
Magic Number,Deveel.Data.Sql.Tables,TableInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableInfo.cs,Deserialize,The following statement contains a magic number: if (version != 3)  	throw new FormatException ("Invalid version of the table info.");  
Magic Number,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectFromPattern,The following statement contains a magic number: if (op == SqlExpressionType.NotLike) {  	// How this works:  	//   Find the set or rows that are like the pattern.  	//   Find the complete set of rows in the column.  	//   Sort the 'like' rows  	//   For each row that is in the original set and not in the like set'  	//     add to the result list.  	//   Result is the set of not like rows ordered by the column.  	var likeSet = (List<int>)table.Search (column' ob.Value.ToString ());  	// Don't include NULL values  	var nullCell = Field.Null (ob.Type);  	IList<int> originalSet = table.SelectRows (column' SqlExpressionType.IsNot' nullCell).ToList ();  	int listSize = System.Math.Max (4' (originalSet.Count - likeSet.Count) + 4);  	List<int> resultSet = new List<int> (listSize);  	likeSet.Sort ();  	int size = originalSet.Count;  	for (int i = 0; i < size; ++i) {  		int val = originalSet [i];  		// If val not in like set' add to result  		if (likeSet.BinarySearch (val) == 0) {  			resultSet.Add (val);  		}  	}  	return resultSet;  }  
Magic Number,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,SelectFromPattern,The following statement contains a magic number: if (op == SqlExpressionType.NotLike) {  	// How this works:  	//   Find the set or rows that are like the pattern.  	//   Find the complete set of rows in the column.  	//   Sort the 'like' rows  	//   For each row that is in the original set and not in the like set'  	//     add to the result list.  	//   Result is the set of not like rows ordered by the column.  	var likeSet = (List<int>)table.Search (column' ob.Value.ToString ());  	// Don't include NULL values  	var nullCell = Field.Null (ob.Type);  	IList<int> originalSet = table.SelectRows (column' SqlExpressionType.IsNot' nullCell).ToList ();  	int listSize = System.Math.Max (4' (originalSet.Count - likeSet.Count) + 4);  	List<int> resultSet = new List<int> (listSize);  	likeSet.Sort ();  	int size = originalSet.Count;  	for (int i = 0; i < size; ++i) {  		int val = originalSet [i];  		// If val not in like set' add to result  		if (likeSet.BinarySearch (val) == 0) {  			resultSet.Add (val);  		}  	}  	return resultSet;  }  
Magic Number,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,Join,The following statement contains a magic number: if (quick) {  	// This implementation doesn't materialize the join  	outTable = new NaturallyJoinedTable (table' otherTable);  } else {  	var tabs = new[] {  		table'  		otherTable  	};  	var rowSets = new IList<int>[2];  	// Optimized trivial case' if either table has zero rows then result of  	// join will contain zero rows also.  	if (table.RowCount == 0 || otherTable.RowCount == 0) {  		rowSets [0] = new List<int> (0);  		rowSets [1] = new List<int> (0);  	} else {  		// The natural join algorithm.  		List<int> thisRowSet = new List<int> ();  		List<int> tableRowSet = new List<int> ();  		// Get the set of all rows in the given table.  		var tableSelectedSet = otherTable.Select (x => x.RowId.RowNumber).ToList ();  		int tableSelectedSetSize = tableSelectedSet.Count;  		// Join with the set of rows in this table.  		var e = table.GetEnumerator ();  		while (e.MoveNext ()) {  			int rowIndex = e.Current.RowId.RowNumber;  			for (int i = 0; i < tableSelectedSetSize; ++i) {  				thisRowSet.Add (rowIndex);  			}  			tableRowSet.AddRange (tableSelectedSet);  		}  		// The row sets we are joining from each table.  		rowSets [0] = thisRowSet;  		rowSets [1] = tableRowSet;  	}  	// Create the new VirtualTable with the joined tables.  	outTable = new VirtualTable (tabs' rowSets);  }  
Magic Number,Deveel.Data.Sql.Tables,TableQueryExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableQueryExtensions.cs,ToDictionary,The following statement contains a magic number: if (table.TableInfo.ColumnCount != 2)  	throw new NotSupportedException ("Table must have two columns.");  
Magic Number,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,DisposeAllIndices,The following statement contains a magic number: try {  	if (cleanupQueue != null) {  		for (int i = 0; i < cleanupQueue.Count; i += 2) {  			var tableSource = (TableSource)cleanupQueue [i];  			IIndexSet indexSet = (IIndexSet)cleanupQueue [i + 1];  			indexSet.Dispose ();  		}  		cleanupQueue.Clear ();  	}  } catch (Exception ex) {  	Transaction.OnError (ex);  } finally {  	cleanupQueue = null;  }  
Magic Number,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,DisposeAllIndices,The following statement contains a magic number: if (cleanupQueue != null) {  	for (int i = 0; i < cleanupQueue.Count; i += 2) {  		var tableSource = (TableSource)cleanupQueue [i];  		IIndexSet indexSet = (IIndexSet)cleanupQueue [i + 1];  		indexSet.Dispose ();  	}  	cleanupQueue.Clear ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,DisposeAllIndices,The following statement contains a magic number: for (int i = 0; i < cleanupQueue.Count; i += 2) {  	var tableSource = (TableSource)cleanupQueue [i];  	IIndexSet indexSet = (IIndexSet)cleanupQueue [i + 1];  	indexSet.Dispose ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableManager.cs,DisposeAllIndices,The following statement contains a magic number: i += 2
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ScanForLeaks,The following statement contains a magic number: lock (recordList) {  	// The list of pointers to areas (as Long).  	var usedAreas = new List<long> ();  	usedAreas.Add (headerArea.Id);  	headerArea.Position = 16;  	// Add the DataTableInfo and DataIndexSetInfo objects  	usedAreas.Add (headerArea.ReadInt8 ());  	usedAreas.Add (headerArea.ReadInt8 ());  	// Add all the used areas input the list_structure itself.  	recordList.GetAreasUsed (usedAreas);  	// Adds all the user areas input the index store.  	indexSetStore.GetAreasUsed (usedAreas);  	// Search the list structure for all areas  	long elements = recordList.NodeCount;  	for (long i = 0; i < elements; ++i) {  		var area = recordList.GetRecord (i);  		var status = (RecordState)area.ReadInt4 ();  		if (status != RecordState.Deleted) {  			usedAreas.Add (area.ReadInt8 ());  		}  	}  	// Following depends on store implementation  	if (Store is StoreBase) {  		var aStore = (StoreBase)Store;  		var leakedAreas = aStore.FindAllocatedAreasNotIn (usedAreas).ToList ();  		if (leakedAreas.Count == 0) {  		} else {  			foreach (long areaPointer in leakedAreas) {  				Store.DeleteArea (areaPointer);  			}  		}  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ScanForLeaks,The following statement contains a magic number: headerArea.Position = 16;  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,OpenTable,The following statement contains a magic number: recordList = new FixedRecordList (Store' 12);  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,MakeSourceIdentity,The following statement contains a magic number: for (int i = 0; i < str.Length || count > 64; ++i) {  	char c = str [i];  	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '_') {  		osifiedName.Append (c);  		++count;  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,CreateTable,The following statement contains a magic number: try {  	Store.Lock ();  	// Setup the list structure  	recordList = new FixedRecordList (Store' 12);  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,CreateTable,The following statement contains a magic number: recordList = new FixedRecordList (Store' 12);  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,CreateTable,The following statement contains a magic number: indexSetStore.PrepareIndexLists (TableInfo.ColumnCount + 1' 1' 1024);  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetupInitialStore,The following statement contains a magic number: try {  	Store.Lock ();  	// Allocate an 80 byte header  	using (var headerWriter = Store.CreateArea (80)) {  		long headerPointer = headerWriter.Id;  		// Allocate space to store the DataTableInfo serialization  		using (var dataTableDefWriter = Store.CreateArea (tableInfoBuf.Length)) {  			long tableInfoOffset = dataTableDefWriter.Id;  			// Allocate space to store the DataIndexSetInfo serialization  			using (var indexSetWriter = Store.CreateArea (indexSetInfoBuf.Length)) {  				long indexSetInfoPointer = indexSetWriter.Id;  				// Allocate space for the list header  				listHeaderOffset = recordList.Create ();  				recordList.WriteDeleteHead (-1);  				firstDeleteChainRecord = -1;  				// Create the index store  				indexSetStore = new IndexSetStore (Store);  				indexHeaderOffset = indexSetStore.Create ();  				// Write the main header  				headerWriter.WriteInt4 (1);  				// Version  				headerWriter.WriteInt4 (TableId);  				// table id  				headerWriter.WriteInt8 (sequenceId);  				// initial sequence id  				headerWriter.WriteInt8 (tableInfoOffset);  				// pointer to DataTableInfo  				headerWriter.WriteInt8 (indexSetInfoPointer);  				// pointer to DataIndexSetInfo  				headerWriter.WriteInt8 (indexHeaderOffset);  				// index header pointer  				headerWriter.WriteInt8 (listHeaderOffset);  				// list header pointer  				headerWriter.Flush ();  				// Write the table info  				dataTableDefWriter.Write (tableInfoBuf' 0' tableInfoBuf.Length);  				dataTableDefWriter.Flush ();  				// Write the index set info  				indexSetWriter.Write (indexSetInfoBuf' 0' indexSetInfoBuf.Length);  				indexSetWriter.Flush ();  				// Set the pointer to the header input the reserved area.  				using (var fixedArea = Store.GetArea (-1)) {  					fixedArea.WriteInt8 (headerPointer);  					fixedArea.Flush ();  				}  				// Set the header area  				headerArea = Store.GetArea (headerPointer);  			}  		}  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetupInitialStore,The following statement contains a magic number: using (var headerWriter = Store.CreateArea (80)) {  	long headerPointer = headerWriter.Id;  	// Allocate space to store the DataTableInfo serialization  	using (var dataTableDefWriter = Store.CreateArea (tableInfoBuf.Length)) {  		long tableInfoOffset = dataTableDefWriter.Id;  		// Allocate space to store the DataIndexSetInfo serialization  		using (var indexSetWriter = Store.CreateArea (indexSetInfoBuf.Length)) {  			long indexSetInfoPointer = indexSetWriter.Id;  			// Allocate space for the list header  			listHeaderOffset = recordList.Create ();  			recordList.WriteDeleteHead (-1);  			firstDeleteChainRecord = -1;  			// Create the index store  			indexSetStore = new IndexSetStore (Store);  			indexHeaderOffset = indexSetStore.Create ();  			// Write the main header  			headerWriter.WriteInt4 (1);  			// Version  			headerWriter.WriteInt4 (TableId);  			// table id  			headerWriter.WriteInt8 (sequenceId);  			// initial sequence id  			headerWriter.WriteInt8 (tableInfoOffset);  			// pointer to DataTableInfo  			headerWriter.WriteInt8 (indexSetInfoPointer);  			// pointer to DataIndexSetInfo  			headerWriter.WriteInt8 (indexHeaderOffset);  			// index header pointer  			headerWriter.WriteInt8 (listHeaderOffset);  			// list header pointer  			headerWriter.Flush ();  			// Write the table info  			dataTableDefWriter.Write (tableInfoBuf' 0' tableInfoBuf.Length);  			dataTableDefWriter.Flush ();  			// Write the index set info  			indexSetWriter.Write (indexSetInfoBuf' 0' indexSetInfoBuf.Length);  			indexSetWriter.Flush ();  			// Set the pointer to the header input the reserved area.  			using (var fixedArea = Store.GetArea (-1)) {  				fixedArea.WriteInt8 (headerPointer);  				fixedArea.Flush ();  			}  			// Set the header area  			headerArea = Store.GetArea (headerPointer);  		}  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReadStoreHeaders,The following statement contains a magic number: try {  	indexSetStore.Open (indexHeaderOffset);  } catch (IOException) {  	// If this failed try writing output a new empty index set.  	// ISSUE: Should this occur here?  This is really an attempt at repairing  	//   the index store.  	indexSetStore = new IndexSetStore (Store);  	indexHeaderOffset = indexSetStore.Create ();  	indexSetStore.PrepareIndexLists (TableInfo.ColumnCount + 1' 1' 1024);  	headerArea.Position = 32;  	headerArea.WriteInt8 (indexHeaderOffset);  	headerArea.Position = 0;  	headerArea.Flush ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReadStoreHeaders,The following statement contains a magic number: try {  	indexSetStore.Open (indexHeaderOffset);  } catch (IOException) {  	// If this failed try writing output a new empty index set.  	// ISSUE: Should this occur here?  This is really an attempt at repairing  	//   the index store.  	indexSetStore = new IndexSetStore (Store);  	indexHeaderOffset = indexSetStore.Create ();  	indexSetStore.PrepareIndexLists (TableInfo.ColumnCount + 1' 1' 1024);  	headerArea.Position = 32;  	headerArea.WriteInt8 (indexHeaderOffset);  	headerArea.Position = 0;  	headerArea.Flush ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReadStoreHeaders,The following statement contains a magic number: indexSetStore.PrepareIndexLists (TableInfo.ColumnCount + 1' 1' 1024);  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReadStoreHeaders,The following statement contains a magic number: headerArea.Position = 32;  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetNextUniqueId,The following statement contains a magic number: lock (recordList) {  	long v = sequenceId;  	++sequenceId;  	if (HasShutdown)  		throw new Exception ("IO operation while shutting down.");  	try {  		try {  			Store.Lock ();  			headerArea.Position = 4 + 4;  			headerArea.WriteInt8 (sequenceId);  			headerArea.Flush ();  		} finally {  			Store.Unlock ();  		}  	} catch (IOException e) {  		throw new InvalidOperationException ("IO Error: " + e.Message);  	}  	return v;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetNextUniqueId,The following statement contains a magic number: lock (recordList) {  	long v = sequenceId;  	++sequenceId;  	if (HasShutdown)  		throw new Exception ("IO operation while shutting down.");  	try {  		try {  			Store.Lock ();  			headerArea.Position = 4 + 4;  			headerArea.WriteInt8 (sequenceId);  			headerArea.Flush ();  		} finally {  			Store.Unlock ();  		}  	} catch (IOException e) {  		throw new InvalidOperationException ("IO Error: " + e.Message);  	}  	return v;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetNextUniqueId,The following statement contains a magic number: try {  	try {  		Store.Lock ();  		headerArea.Position = 4 + 4;  		headerArea.WriteInt8 (sequenceId);  		headerArea.Flush ();  	} finally {  		Store.Unlock ();  	}  } catch (IOException e) {  	throw new InvalidOperationException ("IO Error: " + e.Message);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetNextUniqueId,The following statement contains a magic number: try {  	try {  		Store.Lock ();  		headerArea.Position = 4 + 4;  		headerArea.WriteInt8 (sequenceId);  		headerArea.Flush ();  	} finally {  		Store.Unlock ();  	}  } catch (IOException e) {  	throw new InvalidOperationException ("IO Error: " + e.Message);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetNextUniqueId,The following statement contains a magic number: try {  	Store.Lock ();  	headerArea.Position = 4 + 4;  	headerArea.WriteInt8 (sequenceId);  	headerArea.Flush ();  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetNextUniqueId,The following statement contains a magic number: try {  	Store.Lock ();  	headerArea.Position = 4 + 4;  	headerArea.WriteInt8 (sequenceId);  	headerArea.Flush ();  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetNextUniqueId,The following statement contains a magic number: headerArea.Position = 4 + 4;  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetNextUniqueId,The following statement contains a magic number: headerArea.Position = 4 + 4;  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetUniqueId,The following statement contains a magic number: lock (recordList) {  	sequenceId = value;  	if (HasShutdown)  		throw new Exception ("IO operation while shutting down.");  	try {  		try {  			Store.Lock ();  			headerArea.Position = 4 + 4;  			headerArea.WriteInt8 (sequenceId);  			headerArea.Flush ();  		} finally {  			Store.Unlock ();  		}  	} catch (IOException e) {  		throw new InvalidOperationException ("IO Error: " + e.Message' e);  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetUniqueId,The following statement contains a magic number: lock (recordList) {  	sequenceId = value;  	if (HasShutdown)  		throw new Exception ("IO operation while shutting down.");  	try {  		try {  			Store.Lock ();  			headerArea.Position = 4 + 4;  			headerArea.WriteInt8 (sequenceId);  			headerArea.Flush ();  		} finally {  			Store.Unlock ();  		}  	} catch (IOException e) {  		throw new InvalidOperationException ("IO Error: " + e.Message' e);  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetUniqueId,The following statement contains a magic number: try {  	try {  		Store.Lock ();  		headerArea.Position = 4 + 4;  		headerArea.WriteInt8 (sequenceId);  		headerArea.Flush ();  	} finally {  		Store.Unlock ();  	}  } catch (IOException e) {  	throw new InvalidOperationException ("IO Error: " + e.Message' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetUniqueId,The following statement contains a magic number: try {  	try {  		Store.Lock ();  		headerArea.Position = 4 + 4;  		headerArea.WriteInt8 (sequenceId);  		headerArea.Flush ();  	} finally {  		Store.Unlock ();  	}  } catch (IOException e) {  	throw new InvalidOperationException ("IO Error: " + e.Message' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetUniqueId,The following statement contains a magic number: try {  	Store.Lock ();  	headerArea.Position = 4 + 4;  	headerArea.WriteInt8 (sequenceId);  	headerArea.Flush ();  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetUniqueId,The following statement contains a magic number: try {  	Store.Lock ();  	headerArea.Position = 4 + 4;  	headerArea.WriteInt8 (sequenceId);  	headerArea.Flush ();  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetUniqueId,The following statement contains a magic number: headerArea.Position = 4 + 4;  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,SetUniqueId,The following statement contains a magic number: headerArea.Position = 4 + 4;  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: for (int i = 0; i < ColumnCount; ++i) {  	int ctype = recordArea.ReadInt4 ();  	int cellOffset = recordArea.ReadInt4 ();  	if (ctype == 1) {  		// Type 1 is not a large object  	} else if (ctype == 2) {  		var curP = recordArea.Position;  		recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  		int btype = recordArea.ReadInt4 ();  		recordArea.ReadInt4 ();  		// (reserved)  		if (btype == 0) {  			long blobRefId = recordArea.ReadInt8 ();  			// Release this reference  			ObjectStore.ReleaseObject (blobRefId);  		}  		// Revert the area pointer  		recordArea.Position = curP;  	} else {  		throw new Exception ("Unrecognised type.");  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: for (int i = 0; i < ColumnCount; ++i) {  	int ctype = recordArea.ReadInt4 ();  	int cellOffset = recordArea.ReadInt4 ();  	if (ctype == 1) {  		// Type 1 is not a large object  	} else if (ctype == 2) {  		var curP = recordArea.Position;  		recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  		int btype = recordArea.ReadInt4 ();  		recordArea.ReadInt4 ();  		// (reserved)  		if (btype == 0) {  			long blobRefId = recordArea.ReadInt8 ();  			// Release this reference  			ObjectStore.ReleaseObject (blobRefId);  		}  		// Revert the area pointer  		recordArea.Position = curP;  	} else {  		throw new Exception ("Unrecognised type.");  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: for (int i = 0; i < ColumnCount; ++i) {  	int ctype = recordArea.ReadInt4 ();  	int cellOffset = recordArea.ReadInt4 ();  	if (ctype == 1) {  		// Type 1 is not a large object  	} else if (ctype == 2) {  		var curP = recordArea.Position;  		recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  		int btype = recordArea.ReadInt4 ();  		recordArea.ReadInt4 ();  		// (reserved)  		if (btype == 0) {  			long blobRefId = recordArea.ReadInt8 ();  			// Release this reference  			ObjectStore.ReleaseObject (blobRefId);  		}  		// Revert the area pointer  		recordArea.Position = curP;  	} else {  		throw new Exception ("Unrecognised type.");  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: if (ctype == 1) {  	// Type 1 is not a large object  } else if (ctype == 2) {  	var curP = recordArea.Position;  	recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  	int btype = recordArea.ReadInt4 ();  	recordArea.ReadInt4 ();  	// (reserved)  	if (btype == 0) {  		long blobRefId = recordArea.ReadInt8 ();  		// Release this reference  		ObjectStore.ReleaseObject (blobRefId);  	}  	// Revert the area pointer  	recordArea.Position = curP;  } else {  	throw new Exception ("Unrecognised type.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: if (ctype == 1) {  	// Type 1 is not a large object  } else if (ctype == 2) {  	var curP = recordArea.Position;  	recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  	int btype = recordArea.ReadInt4 ();  	recordArea.ReadInt4 ();  	// (reserved)  	if (btype == 0) {  		long blobRefId = recordArea.ReadInt8 ();  		// Release this reference  		ObjectStore.ReleaseObject (blobRefId);  	}  	// Revert the area pointer  	recordArea.Position = curP;  } else {  	throw new Exception ("Unrecognised type.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: if (ctype == 1) {  	// Type 1 is not a large object  } else if (ctype == 2) {  	var curP = recordArea.Position;  	recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  	int btype = recordArea.ReadInt4 ();  	recordArea.ReadInt4 ();  	// (reserved)  	if (btype == 0) {  		long blobRefId = recordArea.ReadInt8 ();  		// Release this reference  		ObjectStore.ReleaseObject (blobRefId);  	}  	// Revert the area pointer  	recordArea.Position = curP;  } else {  	throw new Exception ("Unrecognised type.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: if (ctype == 2) {  	var curP = recordArea.Position;  	recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  	int btype = recordArea.ReadInt4 ();  	recordArea.ReadInt4 ();  	// (reserved)  	if (btype == 0) {  		long blobRefId = recordArea.ReadInt8 ();  		// Release this reference  		ObjectStore.ReleaseObject (blobRefId);  	}  	// Revert the area pointer  	recordArea.Position = curP;  } else {  	throw new Exception ("Unrecognised type.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: if (ctype == 2) {  	var curP = recordArea.Position;  	recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  	int btype = recordArea.ReadInt4 ();  	recordArea.ReadInt4 ();  	// (reserved)  	if (btype == 0) {  		long blobRefId = recordArea.ReadInt8 ();  		// Release this reference  		ObjectStore.ReleaseObject (blobRefId);  	}  	// Revert the area pointer  	recordArea.Position = curP;  } else {  	throw new Exception ("Unrecognised type.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: if (ctype == 2) {  	var curP = recordArea.Position;  	recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  	int btype = recordArea.ReadInt4 ();  	recordArea.ReadInt4 ();  	// (reserved)  	if (btype == 0) {  		long blobRefId = recordArea.ReadInt8 ();  		// Release this reference  		ObjectStore.ReleaseObject (blobRefId);  	}  	// Revert the area pointer  	recordArea.Position = curP;  } else {  	throw new Exception ("Unrecognised type.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,ReleaseRowObjects,The following statement contains a magic number: recordArea.Position = cellOffset + 4 + (ColumnCount * 8);  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: try {  	Store.Lock ();  	// Establish a reference to any blobs input the record  	int allRecordsSize = 0;  	for (int i = 0; i < rowCells; ++i) {  		var cell = data.GetValue (i);  		int cellSize;  		int cellType;  		if (cell.Value is IObjectRef) {  			var largeObjectRef = (IObjectRef)cell.Value;  			cellSize = 16;  			cellType = 2;  			if (largeObjectRef != null) {  				// Tell the blob store interface that we've made a static reference  				// to this blob.  				ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  			}  		} else {  			cellSize = cell.Size;  			cellType = 1;  		}  		cellSizes [i] = cellSize;  		cellTypes [i] = cellType;  		allRecordsSize += cellSize;  	}  	// Allocate space for the record'  	using (var area = Store.CreateArea (allRecordsSize + (rowCells * 8) + 4)) {  		long recordPointer = area.Id;  		// The record output stream  		using (var areaStream = new AreaStream (area)) {  			var writer = new BinaryWriter (areaStream);  			// Write the record header first'  			writer.Write (0);  			// reserved for future use  			int cellSkip = 0;  			for (int i = 0; i < rowCells; ++i) {  				writer.Write (cellTypes [i]);  				writer.Write (cellSkip);  				cellSkip += cellSizes [i];  			}  			// Now Write a serialization of the cells themselves'  			for (int i = 0; i < rowCells; ++i) {  				var obj = data.GetValue (i);  				int cellType = cellTypes [i];  				if (cellType == 1) {  					// Regular object  					obj.SerializeValueTo (areaStream' SystemContext);  				} else if (cellType == 2) {  					// This is a binary large object and must be represented as a ref  					// to a blob input the BlobStore.  					var largeObjectRef = (IObjectRef)obj.Value;  					if (largeObjectRef == null) {  						// null value  						writer.Write (1);  						writer.Write (0);  						// Reserved for future use  						writer.Write (-1L);  					} else {  						writer.Write (0);  						writer.Write (0);  						// Reserved for future use  						writer.Write (largeObjectRef.ObjectId.Id);  					}  				} else {  					throw new IOException ("Unrecognised cell type.");  				}  			}  			// Flush the output  			writer.Flush ();  		}  		// Finish the record  		area.Flush ();  		// Return the record  		return recordPointer;  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: try {  	Store.Lock ();  	// Establish a reference to any blobs input the record  	int allRecordsSize = 0;  	for (int i = 0; i < rowCells; ++i) {  		var cell = data.GetValue (i);  		int cellSize;  		int cellType;  		if (cell.Value is IObjectRef) {  			var largeObjectRef = (IObjectRef)cell.Value;  			cellSize = 16;  			cellType = 2;  			if (largeObjectRef != null) {  				// Tell the blob store interface that we've made a static reference  				// to this blob.  				ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  			}  		} else {  			cellSize = cell.Size;  			cellType = 1;  		}  		cellSizes [i] = cellSize;  		cellTypes [i] = cellType;  		allRecordsSize += cellSize;  	}  	// Allocate space for the record'  	using (var area = Store.CreateArea (allRecordsSize + (rowCells * 8) + 4)) {  		long recordPointer = area.Id;  		// The record output stream  		using (var areaStream = new AreaStream (area)) {  			var writer = new BinaryWriter (areaStream);  			// Write the record header first'  			writer.Write (0);  			// reserved for future use  			int cellSkip = 0;  			for (int i = 0; i < rowCells; ++i) {  				writer.Write (cellTypes [i]);  				writer.Write (cellSkip);  				cellSkip += cellSizes [i];  			}  			// Now Write a serialization of the cells themselves'  			for (int i = 0; i < rowCells; ++i) {  				var obj = data.GetValue (i);  				int cellType = cellTypes [i];  				if (cellType == 1) {  					// Regular object  					obj.SerializeValueTo (areaStream' SystemContext);  				} else if (cellType == 2) {  					// This is a binary large object and must be represented as a ref  					// to a blob input the BlobStore.  					var largeObjectRef = (IObjectRef)obj.Value;  					if (largeObjectRef == null) {  						// null value  						writer.Write (1);  						writer.Write (0);  						// Reserved for future use  						writer.Write (-1L);  					} else {  						writer.Write (0);  						writer.Write (0);  						// Reserved for future use  						writer.Write (largeObjectRef.ObjectId.Id);  					}  				} else {  					throw new IOException ("Unrecognised cell type.");  				}  			}  			// Flush the output  			writer.Flush ();  		}  		// Finish the record  		area.Flush ();  		// Return the record  		return recordPointer;  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: try {  	Store.Lock ();  	// Establish a reference to any blobs input the record  	int allRecordsSize = 0;  	for (int i = 0; i < rowCells; ++i) {  		var cell = data.GetValue (i);  		int cellSize;  		int cellType;  		if (cell.Value is IObjectRef) {  			var largeObjectRef = (IObjectRef)cell.Value;  			cellSize = 16;  			cellType = 2;  			if (largeObjectRef != null) {  				// Tell the blob store interface that we've made a static reference  				// to this blob.  				ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  			}  		} else {  			cellSize = cell.Size;  			cellType = 1;  		}  		cellSizes [i] = cellSize;  		cellTypes [i] = cellType;  		allRecordsSize += cellSize;  	}  	// Allocate space for the record'  	using (var area = Store.CreateArea (allRecordsSize + (rowCells * 8) + 4)) {  		long recordPointer = area.Id;  		// The record output stream  		using (var areaStream = new AreaStream (area)) {  			var writer = new BinaryWriter (areaStream);  			// Write the record header first'  			writer.Write (0);  			// reserved for future use  			int cellSkip = 0;  			for (int i = 0; i < rowCells; ++i) {  				writer.Write (cellTypes [i]);  				writer.Write (cellSkip);  				cellSkip += cellSizes [i];  			}  			// Now Write a serialization of the cells themselves'  			for (int i = 0; i < rowCells; ++i) {  				var obj = data.GetValue (i);  				int cellType = cellTypes [i];  				if (cellType == 1) {  					// Regular object  					obj.SerializeValueTo (areaStream' SystemContext);  				} else if (cellType == 2) {  					// This is a binary large object and must be represented as a ref  					// to a blob input the BlobStore.  					var largeObjectRef = (IObjectRef)obj.Value;  					if (largeObjectRef == null) {  						// null value  						writer.Write (1);  						writer.Write (0);  						// Reserved for future use  						writer.Write (-1L);  					} else {  						writer.Write (0);  						writer.Write (0);  						// Reserved for future use  						writer.Write (largeObjectRef.ObjectId.Id);  					}  				} else {  					throw new IOException ("Unrecognised cell type.");  				}  			}  			// Flush the output  			writer.Flush ();  		}  		// Finish the record  		area.Flush ();  		// Return the record  		return recordPointer;  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: try {  	Store.Lock ();  	// Establish a reference to any blobs input the record  	int allRecordsSize = 0;  	for (int i = 0; i < rowCells; ++i) {  		var cell = data.GetValue (i);  		int cellSize;  		int cellType;  		if (cell.Value is IObjectRef) {  			var largeObjectRef = (IObjectRef)cell.Value;  			cellSize = 16;  			cellType = 2;  			if (largeObjectRef != null) {  				// Tell the blob store interface that we've made a static reference  				// to this blob.  				ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  			}  		} else {  			cellSize = cell.Size;  			cellType = 1;  		}  		cellSizes [i] = cellSize;  		cellTypes [i] = cellType;  		allRecordsSize += cellSize;  	}  	// Allocate space for the record'  	using (var area = Store.CreateArea (allRecordsSize + (rowCells * 8) + 4)) {  		long recordPointer = area.Id;  		// The record output stream  		using (var areaStream = new AreaStream (area)) {  			var writer = new BinaryWriter (areaStream);  			// Write the record header first'  			writer.Write (0);  			// reserved for future use  			int cellSkip = 0;  			for (int i = 0; i < rowCells; ++i) {  				writer.Write (cellTypes [i]);  				writer.Write (cellSkip);  				cellSkip += cellSizes [i];  			}  			// Now Write a serialization of the cells themselves'  			for (int i = 0; i < rowCells; ++i) {  				var obj = data.GetValue (i);  				int cellType = cellTypes [i];  				if (cellType == 1) {  					// Regular object  					obj.SerializeValueTo (areaStream' SystemContext);  				} else if (cellType == 2) {  					// This is a binary large object and must be represented as a ref  					// to a blob input the BlobStore.  					var largeObjectRef = (IObjectRef)obj.Value;  					if (largeObjectRef == null) {  						// null value  						writer.Write (1);  						writer.Write (0);  						// Reserved for future use  						writer.Write (-1L);  					} else {  						writer.Write (0);  						writer.Write (0);  						// Reserved for future use  						writer.Write (largeObjectRef.ObjectId.Id);  					}  				} else {  					throw new IOException ("Unrecognised cell type.");  				}  			}  			// Flush the output  			writer.Flush ();  		}  		// Finish the record  		area.Flush ();  		// Return the record  		return recordPointer;  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: try {  	Store.Lock ();  	// Establish a reference to any blobs input the record  	int allRecordsSize = 0;  	for (int i = 0; i < rowCells; ++i) {  		var cell = data.GetValue (i);  		int cellSize;  		int cellType;  		if (cell.Value is IObjectRef) {  			var largeObjectRef = (IObjectRef)cell.Value;  			cellSize = 16;  			cellType = 2;  			if (largeObjectRef != null) {  				// Tell the blob store interface that we've made a static reference  				// to this blob.  				ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  			}  		} else {  			cellSize = cell.Size;  			cellType = 1;  		}  		cellSizes [i] = cellSize;  		cellTypes [i] = cellType;  		allRecordsSize += cellSize;  	}  	// Allocate space for the record'  	using (var area = Store.CreateArea (allRecordsSize + (rowCells * 8) + 4)) {  		long recordPointer = area.Id;  		// The record output stream  		using (var areaStream = new AreaStream (area)) {  			var writer = new BinaryWriter (areaStream);  			// Write the record header first'  			writer.Write (0);  			// reserved for future use  			int cellSkip = 0;  			for (int i = 0; i < rowCells; ++i) {  				writer.Write (cellTypes [i]);  				writer.Write (cellSkip);  				cellSkip += cellSizes [i];  			}  			// Now Write a serialization of the cells themselves'  			for (int i = 0; i < rowCells; ++i) {  				var obj = data.GetValue (i);  				int cellType = cellTypes [i];  				if (cellType == 1) {  					// Regular object  					obj.SerializeValueTo (areaStream' SystemContext);  				} else if (cellType == 2) {  					// This is a binary large object and must be represented as a ref  					// to a blob input the BlobStore.  					var largeObjectRef = (IObjectRef)obj.Value;  					if (largeObjectRef == null) {  						// null value  						writer.Write (1);  						writer.Write (0);  						// Reserved for future use  						writer.Write (-1L);  					} else {  						writer.Write (0);  						writer.Write (0);  						// Reserved for future use  						writer.Write (largeObjectRef.ObjectId.Id);  					}  				} else {  					throw new IOException ("Unrecognised cell type.");  				}  			}  			// Flush the output  			writer.Flush ();  		}  		// Finish the record  		area.Flush ();  		// Return the record  		return recordPointer;  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: for (int i = 0; i < rowCells; ++i) {  	var cell = data.GetValue (i);  	int cellSize;  	int cellType;  	if (cell.Value is IObjectRef) {  		var largeObjectRef = (IObjectRef)cell.Value;  		cellSize = 16;  		cellType = 2;  		if (largeObjectRef != null) {  			// Tell the blob store interface that we've made a static reference  			// to this blob.  			ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  		}  	} else {  		cellSize = cell.Size;  		cellType = 1;  	}  	cellSizes [i] = cellSize;  	cellTypes [i] = cellType;  	allRecordsSize += cellSize;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: for (int i = 0; i < rowCells; ++i) {  	var cell = data.GetValue (i);  	int cellSize;  	int cellType;  	if (cell.Value is IObjectRef) {  		var largeObjectRef = (IObjectRef)cell.Value;  		cellSize = 16;  		cellType = 2;  		if (largeObjectRef != null) {  			// Tell the blob store interface that we've made a static reference  			// to this blob.  			ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  		}  	} else {  		cellSize = cell.Size;  		cellType = 1;  	}  	cellSizes [i] = cellSize;  	cellTypes [i] = cellType;  	allRecordsSize += cellSize;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: if (cell.Value is IObjectRef) {  	var largeObjectRef = (IObjectRef)cell.Value;  	cellSize = 16;  	cellType = 2;  	if (largeObjectRef != null) {  		// Tell the blob store interface that we've made a static reference  		// to this blob.  		ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  	}  } else {  	cellSize = cell.Size;  	cellType = 1;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: if (cell.Value is IObjectRef) {  	var largeObjectRef = (IObjectRef)cell.Value;  	cellSize = 16;  	cellType = 2;  	if (largeObjectRef != null) {  		// Tell the blob store interface that we've made a static reference  		// to this blob.  		ObjectStore.EstablishObject (largeObjectRef.ObjectId.Id);  	}  } else {  	cellSize = cell.Size;  	cellType = 1;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: cellSize = 16;  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: cellType = 2;  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: using (var area = Store.CreateArea (allRecordsSize + (rowCells * 8) + 4)) {  	long recordPointer = area.Id;  	// The record output stream  	using (var areaStream = new AreaStream (area)) {  		var writer = new BinaryWriter (areaStream);  		// Write the record header first'  		writer.Write (0);  		// reserved for future use  		int cellSkip = 0;  		for (int i = 0; i < rowCells; ++i) {  			writer.Write (cellTypes [i]);  			writer.Write (cellSkip);  			cellSkip += cellSizes [i];  		}  		// Now Write a serialization of the cells themselves'  		for (int i = 0; i < rowCells; ++i) {  			var obj = data.GetValue (i);  			int cellType = cellTypes [i];  			if (cellType == 1) {  				// Regular object  				obj.SerializeValueTo (areaStream' SystemContext);  			} else if (cellType == 2) {  				// This is a binary large object and must be represented as a ref  				// to a blob input the BlobStore.  				var largeObjectRef = (IObjectRef)obj.Value;  				if (largeObjectRef == null) {  					// null value  					writer.Write (1);  					writer.Write (0);  					// Reserved for future use  					writer.Write (-1L);  				} else {  					writer.Write (0);  					writer.Write (0);  					// Reserved for future use  					writer.Write (largeObjectRef.ObjectId.Id);  				}  			} else {  				throw new IOException ("Unrecognised cell type.");  			}  		}  		// Flush the output  		writer.Flush ();  	}  	// Finish the record  	area.Flush ();  	// Return the record  	return recordPointer;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: using (var area = Store.CreateArea (allRecordsSize + (rowCells * 8) + 4)) {  	long recordPointer = area.Id;  	// The record output stream  	using (var areaStream = new AreaStream (area)) {  		var writer = new BinaryWriter (areaStream);  		// Write the record header first'  		writer.Write (0);  		// reserved for future use  		int cellSkip = 0;  		for (int i = 0; i < rowCells; ++i) {  			writer.Write (cellTypes [i]);  			writer.Write (cellSkip);  			cellSkip += cellSizes [i];  		}  		// Now Write a serialization of the cells themselves'  		for (int i = 0; i < rowCells; ++i) {  			var obj = data.GetValue (i);  			int cellType = cellTypes [i];  			if (cellType == 1) {  				// Regular object  				obj.SerializeValueTo (areaStream' SystemContext);  			} else if (cellType == 2) {  				// This is a binary large object and must be represented as a ref  				// to a blob input the BlobStore.  				var largeObjectRef = (IObjectRef)obj.Value;  				if (largeObjectRef == null) {  					// null value  					writer.Write (1);  					writer.Write (0);  					// Reserved for future use  					writer.Write (-1L);  				} else {  					writer.Write (0);  					writer.Write (0);  					// Reserved for future use  					writer.Write (largeObjectRef.ObjectId.Id);  				}  			} else {  				throw new IOException ("Unrecognised cell type.");  			}  		}  		// Flush the output  		writer.Flush ();  	}  	// Finish the record  	area.Flush ();  	// Return the record  	return recordPointer;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: using (var area = Store.CreateArea (allRecordsSize + (rowCells * 8) + 4)) {  	long recordPointer = area.Id;  	// The record output stream  	using (var areaStream = new AreaStream (area)) {  		var writer = new BinaryWriter (areaStream);  		// Write the record header first'  		writer.Write (0);  		// reserved for future use  		int cellSkip = 0;  		for (int i = 0; i < rowCells; ++i) {  			writer.Write (cellTypes [i]);  			writer.Write (cellSkip);  			cellSkip += cellSizes [i];  		}  		// Now Write a serialization of the cells themselves'  		for (int i = 0; i < rowCells; ++i) {  			var obj = data.GetValue (i);  			int cellType = cellTypes [i];  			if (cellType == 1) {  				// Regular object  				obj.SerializeValueTo (areaStream' SystemContext);  			} else if (cellType == 2) {  				// This is a binary large object and must be represented as a ref  				// to a blob input the BlobStore.  				var largeObjectRef = (IObjectRef)obj.Value;  				if (largeObjectRef == null) {  					// null value  					writer.Write (1);  					writer.Write (0);  					// Reserved for future use  					writer.Write (-1L);  				} else {  					writer.Write (0);  					writer.Write (0);  					// Reserved for future use  					writer.Write (largeObjectRef.ObjectId.Id);  				}  			} else {  				throw new IOException ("Unrecognised cell type.");  			}  		}  		// Flush the output  		writer.Flush ();  	}  	// Finish the record  	area.Flush ();  	// Return the record  	return recordPointer;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: using (var areaStream = new AreaStream (area)) {  	var writer = new BinaryWriter (areaStream);  	// Write the record header first'  	writer.Write (0);  	// reserved for future use  	int cellSkip = 0;  	for (int i = 0; i < rowCells; ++i) {  		writer.Write (cellTypes [i]);  		writer.Write (cellSkip);  		cellSkip += cellSizes [i];  	}  	// Now Write a serialization of the cells themselves'  	for (int i = 0; i < rowCells; ++i) {  		var obj = data.GetValue (i);  		int cellType = cellTypes [i];  		if (cellType == 1) {  			// Regular object  			obj.SerializeValueTo (areaStream' SystemContext);  		} else if (cellType == 2) {  			// This is a binary large object and must be represented as a ref  			// to a blob input the BlobStore.  			var largeObjectRef = (IObjectRef)obj.Value;  			if (largeObjectRef == null) {  				// null value  				writer.Write (1);  				writer.Write (0);  				// Reserved for future use  				writer.Write (-1L);  			} else {  				writer.Write (0);  				writer.Write (0);  				// Reserved for future use  				writer.Write (largeObjectRef.ObjectId.Id);  			}  		} else {  			throw new IOException ("Unrecognised cell type.");  		}  	}  	// Flush the output  	writer.Flush ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: for (int i = 0; i < rowCells; ++i) {  	var obj = data.GetValue (i);  	int cellType = cellTypes [i];  	if (cellType == 1) {  		// Regular object  		obj.SerializeValueTo (areaStream' SystemContext);  	} else if (cellType == 2) {  		// This is a binary large object and must be represented as a ref  		// to a blob input the BlobStore.  		var largeObjectRef = (IObjectRef)obj.Value;  		if (largeObjectRef == null) {  			// null value  			writer.Write (1);  			writer.Write (0);  			// Reserved for future use  			writer.Write (-1L);  		} else {  			writer.Write (0);  			writer.Write (0);  			// Reserved for future use  			writer.Write (largeObjectRef.ObjectId.Id);  		}  	} else {  		throw new IOException ("Unrecognised cell type.");  	}  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: if (cellType == 1) {  	// Regular object  	obj.SerializeValueTo (areaStream' SystemContext);  } else if (cellType == 2) {  	// This is a binary large object and must be represented as a ref  	// to a blob input the BlobStore.  	var largeObjectRef = (IObjectRef)obj.Value;  	if (largeObjectRef == null) {  		// null value  		writer.Write (1);  		writer.Write (0);  		// Reserved for future use  		writer.Write (-1L);  	} else {  		writer.Write (0);  		writer.Write (0);  		// Reserved for future use  		writer.Write (largeObjectRef.ObjectId.Id);  	}  } else {  	throw new IOException ("Unrecognised cell type.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,WriteRecord,The following statement contains a magic number: if (cellType == 2) {  	// This is a binary large object and must be represented as a ref  	// to a blob input the BlobStore.  	var largeObjectRef = (IObjectRef)obj.Value;  	if (largeObjectRef == null) {  		// null value  		writer.Write (1);  		writer.Write (0);  		// Reserved for future use  		writer.Write (-1L);  	} else {  		writer.Write (0);  		writer.Write (0);  		// Reserved for future use  		writer.Write (largeObjectRef.ObjectId.Id);  	}  } else {  	throw new IOException ("Unrecognised cell type.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: try {  	lock (recordList) {  		// Increment the file hits counter  		++sRunFileHits;  		if (sRunFileHits >= 100) {  			DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  			sRunFileHits = 0;  		}  		// Get the node for the record  		var listBlock = recordList.GetRecord (rowIndex);  		var status = (RecordState)listBlock.ReadInt4 ();  		// Check it's not deleted  		if (status == RecordState.Deleted)  			throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  		// Get the pointer to the record we are reading  		recordPointer = listBlock.ReadInt8 ();  	}  	// Open a stream to the record  	using (var stream = Store.GetAreaInputStream (recordPointer)) {  		var reader = new BinaryReader (stream);  		stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  		int cellType = reader.ReadInt32 ();  		int cellOffset = reader.ReadInt32 ();  		int curAt = 8 + 4 + (columnOffset * 8);  		int beAt = 4 + (ColumnCount * 8);  		int skipAmount = (beAt - curAt) + cellOffset;  		stream.Seek (skipAmount' SeekOrigin.Current);  		// Get the TType for this column  		// NOTE: It's possible this call may need optimizing?  		var type = TableInfo [columnOffset].ColumnType;  		Objects.ISqlObject ob;  		if (cellType == 1) {  			// If standard object type  			ob = type.DeserializeObject (stream);  		} else if (cellType == 2) {  			// If reference to a blob input the BlobStore  			int fType = reader.ReadInt32 ();  			int fReserved = reader.ReadInt32 ();  			long refId = reader.ReadInt64 ();  			if (fType == 0) {  				// Resolve the reference  				var objRef = ObjectStore.GetObject (refId);  				ob = type.CreateFromLargeObject (objRef);  			} else if (fType == 1) {  				ob = null;  			} else {  				throw new Exception ("Unknown blob type.");  			}  		} else {  			throw new Exception ("Unrecognised cell type input data.");  		}  		// Wrap it around a TObject  		cell = new Field (type' ob);  		// And close the reader.  		#if PCL  							reader.Dispose(); #else  		reader.Close ();  		#endif  	}  } catch (IOException e) {  	throw new Exception (String.Format ("Error getting cell at ({0}' {1}) pointer = " + recordPointer + "."' rowIndex' columnOffset)' e);  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: lock (recordList) {  	// Increment the file hits counter  	++sRunFileHits;  	if (sRunFileHits >= 100) {  		DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  		sRunFileHits = 0;  	}  	// Get the node for the record  	var listBlock = recordList.GetRecord (rowIndex);  	var status = (RecordState)listBlock.ReadInt4 ();  	// Check it's not deleted  	if (status == RecordState.Deleted)  		throw new InvalidOperationException (String.Format ("Record {0} was deleted: unable to read."' rowIndex));  	// Get the pointer to the record we are reading  	recordPointer = listBlock.ReadInt8 ();  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: if (sRunFileHits >= 100) {  	DatabaseContext.OnEvent (new CounterEvent (FileHitsCounterKey' sRunFileHits));  	sRunFileHits = 0;  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: using (var stream = Store.GetAreaInputStream (recordPointer)) {  	var reader = new BinaryReader (stream);  	stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  	int cellType = reader.ReadInt32 ();  	int cellOffset = reader.ReadInt32 ();  	int curAt = 8 + 4 + (columnOffset * 8);  	int beAt = 4 + (ColumnCount * 8);  	int skipAmount = (beAt - curAt) + cellOffset;  	stream.Seek (skipAmount' SeekOrigin.Current);  	// Get the TType for this column  	// NOTE: It's possible this call may need optimizing?  	var type = TableInfo [columnOffset].ColumnType;  	Objects.ISqlObject ob;  	if (cellType == 1) {  		// If standard object type  		ob = type.DeserializeObject (stream);  	} else if (cellType == 2) {  		// If reference to a blob input the BlobStore  		int fType = reader.ReadInt32 ();  		int fReserved = reader.ReadInt32 ();  		long refId = reader.ReadInt64 ();  		if (fType == 0) {  			// Resolve the reference  			var objRef = ObjectStore.GetObject (refId);  			ob = type.CreateFromLargeObject (objRef);  		} else if (fType == 1) {  			ob = null;  		} else {  			throw new Exception ("Unknown blob type.");  		}  	} else {  		throw new Exception ("Unrecognised cell type input data.");  	}  	// Wrap it around a TObject  	cell = new Field (type' ob);  	// And close the reader.  	#if PCL  						reader.Dispose(); #else  	reader.Close ();  	#endif  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: using (var stream = Store.GetAreaInputStream (recordPointer)) {  	var reader = new BinaryReader (stream);  	stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  	int cellType = reader.ReadInt32 ();  	int cellOffset = reader.ReadInt32 ();  	int curAt = 8 + 4 + (columnOffset * 8);  	int beAt = 4 + (ColumnCount * 8);  	int skipAmount = (beAt - curAt) + cellOffset;  	stream.Seek (skipAmount' SeekOrigin.Current);  	// Get the TType for this column  	// NOTE: It's possible this call may need optimizing?  	var type = TableInfo [columnOffset].ColumnType;  	Objects.ISqlObject ob;  	if (cellType == 1) {  		// If standard object type  		ob = type.DeserializeObject (stream);  	} else if (cellType == 2) {  		// If reference to a blob input the BlobStore  		int fType = reader.ReadInt32 ();  		int fReserved = reader.ReadInt32 ();  		long refId = reader.ReadInt64 ();  		if (fType == 0) {  			// Resolve the reference  			var objRef = ObjectStore.GetObject (refId);  			ob = type.CreateFromLargeObject (objRef);  		} else if (fType == 1) {  			ob = null;  		} else {  			throw new Exception ("Unknown blob type.");  		}  	} else {  		throw new Exception ("Unrecognised cell type input data.");  	}  	// Wrap it around a TObject  	cell = new Field (type' ob);  	// And close the reader.  	#if PCL  						reader.Dispose(); #else  	reader.Close ();  	#endif  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: using (var stream = Store.GetAreaInputStream (recordPointer)) {  	var reader = new BinaryReader (stream);  	stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  	int cellType = reader.ReadInt32 ();  	int cellOffset = reader.ReadInt32 ();  	int curAt = 8 + 4 + (columnOffset * 8);  	int beAt = 4 + (ColumnCount * 8);  	int skipAmount = (beAt - curAt) + cellOffset;  	stream.Seek (skipAmount' SeekOrigin.Current);  	// Get the TType for this column  	// NOTE: It's possible this call may need optimizing?  	var type = TableInfo [columnOffset].ColumnType;  	Objects.ISqlObject ob;  	if (cellType == 1) {  		// If standard object type  		ob = type.DeserializeObject (stream);  	} else if (cellType == 2) {  		// If reference to a blob input the BlobStore  		int fType = reader.ReadInt32 ();  		int fReserved = reader.ReadInt32 ();  		long refId = reader.ReadInt64 ();  		if (fType == 0) {  			// Resolve the reference  			var objRef = ObjectStore.GetObject (refId);  			ob = type.CreateFromLargeObject (objRef);  		} else if (fType == 1) {  			ob = null;  		} else {  			throw new Exception ("Unknown blob type.");  		}  	} else {  		throw new Exception ("Unrecognised cell type input data.");  	}  	// Wrap it around a TObject  	cell = new Field (type' ob);  	// And close the reader.  	#if PCL  						reader.Dispose(); #else  	reader.Close ();  	#endif  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: using (var stream = Store.GetAreaInputStream (recordPointer)) {  	var reader = new BinaryReader (stream);  	stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  	int cellType = reader.ReadInt32 ();  	int cellOffset = reader.ReadInt32 ();  	int curAt = 8 + 4 + (columnOffset * 8);  	int beAt = 4 + (ColumnCount * 8);  	int skipAmount = (beAt - curAt) + cellOffset;  	stream.Seek (skipAmount' SeekOrigin.Current);  	// Get the TType for this column  	// NOTE: It's possible this call may need optimizing?  	var type = TableInfo [columnOffset].ColumnType;  	Objects.ISqlObject ob;  	if (cellType == 1) {  		// If standard object type  		ob = type.DeserializeObject (stream);  	} else if (cellType == 2) {  		// If reference to a blob input the BlobStore  		int fType = reader.ReadInt32 ();  		int fReserved = reader.ReadInt32 ();  		long refId = reader.ReadInt64 ();  		if (fType == 0) {  			// Resolve the reference  			var objRef = ObjectStore.GetObject (refId);  			ob = type.CreateFromLargeObject (objRef);  		} else if (fType == 1) {  			ob = null;  		} else {  			throw new Exception ("Unknown blob type.");  		}  	} else {  		throw new Exception ("Unrecognised cell type input data.");  	}  	// Wrap it around a TObject  	cell = new Field (type' ob);  	// And close the reader.  	#if PCL  						reader.Dispose(); #else  	reader.Close ();  	#endif  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: using (var stream = Store.GetAreaInputStream (recordPointer)) {  	var reader = new BinaryReader (stream);  	stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  	int cellType = reader.ReadInt32 ();  	int cellOffset = reader.ReadInt32 ();  	int curAt = 8 + 4 + (columnOffset * 8);  	int beAt = 4 + (ColumnCount * 8);  	int skipAmount = (beAt - curAt) + cellOffset;  	stream.Seek (skipAmount' SeekOrigin.Current);  	// Get the TType for this column  	// NOTE: It's possible this call may need optimizing?  	var type = TableInfo [columnOffset].ColumnType;  	Objects.ISqlObject ob;  	if (cellType == 1) {  		// If standard object type  		ob = type.DeserializeObject (stream);  	} else if (cellType == 2) {  		// If reference to a blob input the BlobStore  		int fType = reader.ReadInt32 ();  		int fReserved = reader.ReadInt32 ();  		long refId = reader.ReadInt64 ();  		if (fType == 0) {  			// Resolve the reference  			var objRef = ObjectStore.GetObject (refId);  			ob = type.CreateFromLargeObject (objRef);  		} else if (fType == 1) {  			ob = null;  		} else {  			throw new Exception ("Unknown blob type.");  		}  	} else {  		throw new Exception ("Unrecognised cell type input data.");  	}  	// Wrap it around a TObject  	cell = new Field (type' ob);  	// And close the reader.  	#if PCL  						reader.Dispose(); #else  	reader.Close ();  	#endif  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: using (var stream = Store.GetAreaInputStream (recordPointer)) {  	var reader = new BinaryReader (stream);  	stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  	int cellType = reader.ReadInt32 ();  	int cellOffset = reader.ReadInt32 ();  	int curAt = 8 + 4 + (columnOffset * 8);  	int beAt = 4 + (ColumnCount * 8);  	int skipAmount = (beAt - curAt) + cellOffset;  	stream.Seek (skipAmount' SeekOrigin.Current);  	// Get the TType for this column  	// NOTE: It's possible this call may need optimizing?  	var type = TableInfo [columnOffset].ColumnType;  	Objects.ISqlObject ob;  	if (cellType == 1) {  		// If standard object type  		ob = type.DeserializeObject (stream);  	} else if (cellType == 2) {  		// If reference to a blob input the BlobStore  		int fType = reader.ReadInt32 ();  		int fReserved = reader.ReadInt32 ();  		long refId = reader.ReadInt64 ();  		if (fType == 0) {  			// Resolve the reference  			var objRef = ObjectStore.GetObject (refId);  			ob = type.CreateFromLargeObject (objRef);  		} else if (fType == 1) {  			ob = null;  		} else {  			throw new Exception ("Unknown blob type.");  		}  	} else {  		throw new Exception ("Unrecognised cell type input data.");  	}  	// Wrap it around a TObject  	cell = new Field (type' ob);  	// And close the reader.  	#if PCL  						reader.Dispose(); #else  	reader.Close ();  	#endif  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: using (var stream = Store.GetAreaInputStream (recordPointer)) {  	var reader = new BinaryReader (stream);  	stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  	int cellType = reader.ReadInt32 ();  	int cellOffset = reader.ReadInt32 ();  	int curAt = 8 + 4 + (columnOffset * 8);  	int beAt = 4 + (ColumnCount * 8);  	int skipAmount = (beAt - curAt) + cellOffset;  	stream.Seek (skipAmount' SeekOrigin.Current);  	// Get the TType for this column  	// NOTE: It's possible this call may need optimizing?  	var type = TableInfo [columnOffset].ColumnType;  	Objects.ISqlObject ob;  	if (cellType == 1) {  		// If standard object type  		ob = type.DeserializeObject (stream);  	} else if (cellType == 2) {  		// If reference to a blob input the BlobStore  		int fType = reader.ReadInt32 ();  		int fReserved = reader.ReadInt32 ();  		long refId = reader.ReadInt64 ();  		if (fType == 0) {  			// Resolve the reference  			var objRef = ObjectStore.GetObject (refId);  			ob = type.CreateFromLargeObject (objRef);  		} else if (fType == 1) {  			ob = null;  		} else {  			throw new Exception ("Unknown blob type.");  		}  	} else {  		throw new Exception ("Unrecognised cell type input data.");  	}  	// Wrap it around a TObject  	cell = new Field (type' ob);  	// And close the reader.  	#if PCL  						reader.Dispose(); #else  	reader.Close ();  	#endif  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: using (var stream = Store.GetAreaInputStream (recordPointer)) {  	var reader = new BinaryReader (stream);  	stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  	int cellType = reader.ReadInt32 ();  	int cellOffset = reader.ReadInt32 ();  	int curAt = 8 + 4 + (columnOffset * 8);  	int beAt = 4 + (ColumnCount * 8);  	int skipAmount = (beAt - curAt) + cellOffset;  	stream.Seek (skipAmount' SeekOrigin.Current);  	// Get the TType for this column  	// NOTE: It's possible this call may need optimizing?  	var type = TableInfo [columnOffset].ColumnType;  	Objects.ISqlObject ob;  	if (cellType == 1) {  		// If standard object type  		ob = type.DeserializeObject (stream);  	} else if (cellType == 2) {  		// If reference to a blob input the BlobStore  		int fType = reader.ReadInt32 ();  		int fReserved = reader.ReadInt32 ();  		long refId = reader.ReadInt64 ();  		if (fType == 0) {  			// Resolve the reference  			var objRef = ObjectStore.GetObject (refId);  			ob = type.CreateFromLargeObject (objRef);  		} else if (fType == 1) {  			ob = null;  		} else {  			throw new Exception ("Unknown blob type.");  		}  	} else {  		throw new Exception ("Unrecognised cell type input data.");  	}  	// Wrap it around a TObject  	cell = new Field (type' ob);  	// And close the reader.  	#if PCL  						reader.Dispose(); #else  	reader.Close ();  	#endif  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: stream.Seek (4 + (columnOffset * 8)' SeekOrigin.Current);  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: if (cellType == 1) {  	// If standard object type  	ob = type.DeserializeObject (stream);  } else if (cellType == 2) {  	// If reference to a blob input the BlobStore  	int fType = reader.ReadInt32 ();  	int fReserved = reader.ReadInt32 ();  	long refId = reader.ReadInt64 ();  	if (fType == 0) {  		// Resolve the reference  		var objRef = ObjectStore.GetObject (refId);  		ob = type.CreateFromLargeObject (objRef);  	} else if (fType == 1) {  		ob = null;  	} else {  		throw new Exception ("Unknown blob type.");  	}  } else {  	throw new Exception ("Unrecognised cell type input data.");  }  
Magic Number,Deveel.Data.Sql.Tables,TableSource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableSource.cs,GetValue,The following statement contains a magic number: if (cellType == 2) {  	// If reference to a blob input the BlobStore  	int fType = reader.ReadInt32 ();  	int fReserved = reader.ReadInt32 ();  	long refId = reader.ReadInt64 ();  	if (fType == 0) {  		// Resolve the reference  		var objRef = ObjectStore.GetObject (refId);  		ob = type.CreateFromLargeObject (objRef);  	} else if (fType == 1) {  		ob = null;  	} else {  		throw new Exception ("Unknown blob type.");  	}  } else {  	throw new Exception ("Unrecognised cell type input data.");  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,TriggerManager,The following statement contains a magic number: triggerCache = new List<Trigger> (24);  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: row.SetValue (2' Field.Integer (type));  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: row.SetValue (3' Field.String (onTable));  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: row.SetValue (4' Field.Integer (time));  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: row.SetValue (5' Field.Integer (action));  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: if (type == ProcedureType) {  	var procInfo = (ProcedureTriggerInfo)triggerInfo;  	var args = new TriggerArgument (procInfo.Arguments);  	var binArgs = SerializeArguments (args);  	var procedureName = procInfo.ProcedureName.FullName;  	row.SetValue (6' Field.String (procedureName));  	row.SetValue (7' Field.Binary (binArgs));  } else if (type == PlSqlType) {  	var plsqlInfo = (PlSqlTriggerInfo)triggerInfo;  	var body = Field.Binary (SqlBinary.ToBinary (plsqlInfo.Body));  	row.SetValue (8' body);  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: if (type == ProcedureType) {  	var procInfo = (ProcedureTriggerInfo)triggerInfo;  	var args = new TriggerArgument (procInfo.Arguments);  	var binArgs = SerializeArguments (args);  	var procedureName = procInfo.ProcedureName.FullName;  	row.SetValue (6' Field.String (procedureName));  	row.SetValue (7' Field.Binary (binArgs));  } else if (type == PlSqlType) {  	var plsqlInfo = (PlSqlTriggerInfo)triggerInfo;  	var body = Field.Binary (SqlBinary.ToBinary (plsqlInfo.Body));  	row.SetValue (8' body);  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: if (type == ProcedureType) {  	var procInfo = (ProcedureTriggerInfo)triggerInfo;  	var args = new TriggerArgument (procInfo.Arguments);  	var binArgs = SerializeArguments (args);  	var procedureName = procInfo.ProcedureName.FullName;  	row.SetValue (6' Field.String (procedureName));  	row.SetValue (7' Field.Binary (binArgs));  } else if (type == PlSqlType) {  	var plsqlInfo = (PlSqlTriggerInfo)triggerInfo;  	var body = Field.Binary (SqlBinary.ToBinary (plsqlInfo.Body));  	row.SetValue (8' body);  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: row.SetValue (6' Field.String (procedureName));  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: row.SetValue (7' Field.Binary (binArgs));  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: if (type == PlSqlType) {  	var plsqlInfo = (PlSqlTriggerInfo)triggerInfo;  	var body = Field.Binary (SqlBinary.ToBinary (plsqlInfo.Body));  	row.SetValue (8' body);  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: row.SetValue (8' body);  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,CreateTrigger,The following statement contains a magic number: row.SetValue (9' Field.TinyInt ((byte)triggerInfo.Status));  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,FormTrigger,The following statement contains a magic number: if (triggerType == ProcedureType) {  	var procNameString = row.GetValue (6).Value.ToString ();  	var procName = ObjectName.Parse (procNameString);  	var argsBinary = (SqlBinary)row.GetValue (7).Value;  	var args = DeserializeArguments (argsBinary.ToByteArray ());  	triggerInfo = new ProcedureTriggerInfo (triggerName' tableName' eventTime' eventType' procName);  	if (args != null && args.Length > 0) {  		foreach (var expression in args) {  			((ProcedureTriggerInfo)triggerInfo).Arguments = args;  		}  	}  } else if (triggerType == PlSqlType) {  	var binary = (SqlBinary)row.GetValue (8).Value;  	var body = binary.ToObject<PlSqlBlockStatement> ();  	triggerInfo = new PlSqlTriggerInfo (triggerName' tableName' eventTime' eventType' body);  } else {  	throw new InvalidOperationException ();  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,FormTrigger,The following statement contains a magic number: if (triggerType == ProcedureType) {  	var procNameString = row.GetValue (6).Value.ToString ();  	var procName = ObjectName.Parse (procNameString);  	var argsBinary = (SqlBinary)row.GetValue (7).Value;  	var args = DeserializeArguments (argsBinary.ToByteArray ());  	triggerInfo = new ProcedureTriggerInfo (triggerName' tableName' eventTime' eventType' procName);  	if (args != null && args.Length > 0) {  		foreach (var expression in args) {  			((ProcedureTriggerInfo)triggerInfo).Arguments = args;  		}  	}  } else if (triggerType == PlSqlType) {  	var binary = (SqlBinary)row.GetValue (8).Value;  	var body = binary.ToObject<PlSqlBlockStatement> ();  	triggerInfo = new PlSqlTriggerInfo (triggerName' tableName' eventTime' eventType' body);  } else {  	throw new InvalidOperationException ();  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,FormTrigger,The following statement contains a magic number: if (triggerType == ProcedureType) {  	var procNameString = row.GetValue (6).Value.ToString ();  	var procName = ObjectName.Parse (procNameString);  	var argsBinary = (SqlBinary)row.GetValue (7).Value;  	var args = DeserializeArguments (argsBinary.ToByteArray ());  	triggerInfo = new ProcedureTriggerInfo (triggerName' tableName' eventTime' eventType' procName);  	if (args != null && args.Length > 0) {  		foreach (var expression in args) {  			((ProcedureTriggerInfo)triggerInfo).Arguments = args;  		}  	}  } else if (triggerType == PlSqlType) {  	var binary = (SqlBinary)row.GetValue (8).Value;  	var body = binary.ToObject<PlSqlBlockStatement> ();  	triggerInfo = new PlSqlTriggerInfo (triggerName' tableName' eventTime' eventType' body);  } else {  	throw new InvalidOperationException ();  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,FormTrigger,The following statement contains a magic number: if (triggerType == PlSqlType) {  	var binary = (SqlBinary)row.GetValue (8).Value;  	var body = binary.ToObject<PlSqlBlockStatement> ();  	triggerInfo = new PlSqlTriggerInfo (triggerName' tableName' eventTime' eventType' body);  } else {  	throw new InvalidOperationException ();  }  
Magic Number,Deveel.Data.Sql.Triggers,TriggerManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Triggers\TriggerManager.cs,FormTrigger,The following statement contains a magic number: triggerInfo.Status = (TriggerStatus)((SqlNumber)row.GetValue (9).Value).ToByte ();  
Magic Number,Deveel.Data.Sql.Types,NullType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NullType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlNull) {  	writer.Write ((byte)1);  } else if (obj == null || obj.IsNull) {  	writer.Write ((byte)2);  } else {  	throw new FormatException ();  }  
Magic Number,Deveel.Data.Sql.Types,NullType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NullType.cs,SerializeObject,The following statement contains a magic number: if (obj == null || obj.IsNull) {  	writer.Write ((byte)2);  } else {  	throw new FormatException ();  }  
Magic Number,Deveel.Data.Sql.Types,NullType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NullType.cs,SerializeObject,The following statement contains a magic number: writer.Write ((byte)2);  
Magic Number,Deveel.Data.Sql.Types,NullType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NullType.cs,DeserializeObject,The following statement contains a magic number: if (type == 2) {  	// TODO: check the SQL Type Code of the type and construct the  	//       NULL value specific for the type.  	throw new NotImplementedException ();  }  
Magic Number,Deveel.Data.Sql.Types,TypesTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypesTableContainer.cs,FindByName,The following statement contains a magic number: foreach (var row in table) {  	if (row.GetValue (1).IsEqualTo (typeSchema) && row.GetValue (2).IsEqualTo (typeName))  		return i;  	i++;  }  
Magic Number,Deveel.Data.Sql.Types,TypesTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypesTableContainer.cs,FindByName,The following statement contains a magic number: if (row.GetValue (1).IsEqualTo (typeSchema) && row.GetValue (2).IsEqualTo (typeName))  	return i;  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlBinary) {  	var binary = (SqlBinary)obj;  	if (binary.IsNull)  		return 1;  	return 1 + 1 + 4 + (int)binary.Length;  } else if (obj is SqlLongBinary) {  	return 1 + 8 + 8;  } else if (obj is SqlNull) {  	return 1;  }  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlBinary) {  	var binary = (SqlBinary)obj;  	if (binary.IsNull)  		return 1;  	return 1 + 1 + 4 + (int)binary.Length;  } else if (obj is SqlLongBinary) {  	return 1 + 8 + 8;  } else if (obj is SqlNull) {  	return 1;  }  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlBinary) {  	var binary = (SqlBinary)obj;  	if (binary.IsNull)  		return 1;  	return 1 + 1 + 4 + (int)binary.Length;  } else if (obj is SqlLongBinary) {  	return 1 + 8 + 8;  } else if (obj is SqlNull) {  	return 1;  }  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 1 + 4 + (int)binary.Length;  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlLongBinary) {  	return 1 + 8 + 8;  } else if (obj is SqlNull) {  	return 1;  }  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlLongBinary) {  	return 1 + 8 + 8;  } else if (obj is SqlNull) {  	return 1;  }  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 8 + 8;  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 8 + 8;  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlBinary) {  	var bin = (SqlBinary)obj;  	writer.Write ((byte)1);  	writer.Write ((int)bin.Length);  	writer.Write (bin.ToByteArray ());  } else if (obj is SqlLongBinary) {  	var lob = (SqlLongBinary)obj;  	writer.Write ((byte)2);  	// TODO:  	throw new NotImplementedException ();  } else {  	base.SerializeObject (stream' obj);  }  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlLongBinary) {  	var lob = (SqlLongBinary)obj;  	writer.Write ((byte)2);  	// TODO:  	throw new NotImplementedException ();  } else {  	base.SerializeObject (stream' obj);  }  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,SerializeObject,The following statement contains a magic number: writer.Write ((byte)2);  
Magic Number,Deveel.Data.Sql.Types,BinaryType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\BinaryType.cs,DeserializeObject,The following statement contains a magic number: if (type == 2) {  	// TODO:  }  
Magic Number,Deveel.Data.Sql.Types,DateType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\DateType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4 + 13;  
Magic Number,Deveel.Data.Sql.Types,DateType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\DateType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4 + 13;  
Magic Number,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlDayToSecond)  	return 1 + 5;  
Magic Number,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 5;  
Magic Number,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlYearToMonth)  	return 1 + 4;  
Magic Number,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4;  
Magic Number,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlDayToSecond) {  	writer.Write ((byte)1);  	var interval = (SqlDayToSecond)obj;  	if (interval.IsNull) {  		writer.Write ((byte)0);  	} else {  		writer.Write ((byte)1);  		var bytes = interval.ToByArray ();  		writer.Write (bytes.Length);  		writer.Write (bytes);  	}  } else if (obj is SqlYearToMonth) {  	writer.Write ((byte)2);  	var interval = (SqlYearToMonth)obj;  	if (interval.IsNull) {  		writer.Write ((byte)0);  	} else {  		writer.Write ((byte)1);  		var months = interval.TotalMonths;  		writer.Write (months);  	}  } else {  	throw new FormatException ();  }  
Magic Number,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlYearToMonth) {  	writer.Write ((byte)2);  	var interval = (SqlYearToMonth)obj;  	if (interval.IsNull) {  		writer.Write ((byte)0);  	} else {  		writer.Write ((byte)1);  		var months = interval.TotalMonths;  		writer.Write (months);  	}  } else {  	throw new FormatException ();  }  
Magic Number,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,SerializeObject,The following statement contains a magic number: writer.Write ((byte)2);  
Magic Number,Deveel.Data.Sql.Types,IntervalType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\IntervalType.cs,DeserializeObject,The following statement contains a magic number: if (type == 2) {  	var state = reader.ReadByte ();  	if (state == 0)  		return SqlYearToMonth.Null;  	var months = reader.ReadInt32 ();  	return new SqlYearToMonth (months);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetIntSize,The following statement contains a magic number: switch (sqlType) {  case SqlTypeCode.TinyInt:  	return 1;  case SqlTypeCode.SmallInt:  	return 2;  case SqlTypeCode.Integer:  	return 4;  case SqlTypeCode.BigInt:  	return 8;  default:  	return 0;  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetIntSize,The following statement contains a magic number: switch (sqlType) {  case SqlTypeCode.TinyInt:  	return 1;  case SqlTypeCode.SmallInt:  	return 2;  case SqlTypeCode.Integer:  	return 4;  case SqlTypeCode.BigInt:  	return 8;  default:  	return 0;  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetIntSize,The following statement contains a magic number: switch (sqlType) {  case SqlTypeCode.TinyInt:  	return 1;  case SqlTypeCode.SmallInt:  	return 2;  case SqlTypeCode.Integer:  	return 4;  case SqlTypeCode.BigInt:  	return 8;  default:  	return 0;  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetIntSize,The following statement contains a magic number: return 2;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetIntSize,The following statement contains a magic number: return 4;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetIntSize,The following statement contains a magic number: return 8;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetFloatSize,The following statement contains a magic number: switch (sqlType) {  default:  	return 0;  case SqlTypeCode.Real:  	return 4;  case SqlTypeCode.Float:  case SqlTypeCode.Double:  	return 8;  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetFloatSize,The following statement contains a magic number: switch (sqlType) {  default:  	return 0;  case SqlTypeCode.Real:  	return 4;  case SqlTypeCode.Float:  case SqlTypeCode.Double:  	return 8;  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetFloatSize,The following statement contains a magic number: return 4;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,GetFloatSize,The following statement contains a magic number: return 8;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,Wider,The following statement contains a magic number: if (t1IntSize >= t2FloatSize || t2IntSize >= t1FloatSize) {  	// Must be a long (8 bytes) and a real (4 bytes)' widen to a double  	return new NumericType (SqlTypeCode.Double' 8' 0);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,Wider,The following statement contains a magic number: return new NumericType (SqlTypeCode.Double' 8' 0);  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlNull || obj == null) {  	writer.Write ((byte)0);  } else {  	var number = (SqlNumber)obj;  	if (obj.IsNull) {  		writer.Write ((byte)0);  	} else if (number.CanBeInt32) {  		writer.Write ((byte)1);  		writer.Write (number.ToInt32 ());  	} else if (number.CanBeInt64) {  		writer.Write ((byte)2);  		writer.Write (number.ToInt64 ());  	} else {  		var bytes = number.ToByteArray ();  		writer.Write ((byte)3);  		writer.Write (number.Precision);  		writer.Write (number.Scale);  		writer.Write (bytes.Length);  		writer.Write (bytes);  	}  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlNull || obj == null) {  	writer.Write ((byte)0);  } else {  	var number = (SqlNumber)obj;  	if (obj.IsNull) {  		writer.Write ((byte)0);  	} else if (number.CanBeInt32) {  		writer.Write ((byte)1);  		writer.Write (number.ToInt32 ());  	} else if (number.CanBeInt64) {  		writer.Write ((byte)2);  		writer.Write (number.ToInt64 ());  	} else {  		var bytes = number.ToByteArray ();  		writer.Write ((byte)3);  		writer.Write (number.Precision);  		writer.Write (number.Scale);  		writer.Write (bytes.Length);  		writer.Write (bytes);  	}  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: if (obj.IsNull) {  	writer.Write ((byte)0);  } else if (number.CanBeInt32) {  	writer.Write ((byte)1);  	writer.Write (number.ToInt32 ());  } else if (number.CanBeInt64) {  	writer.Write ((byte)2);  	writer.Write (number.ToInt64 ());  } else {  	var bytes = number.ToByteArray ();  	writer.Write ((byte)3);  	writer.Write (number.Precision);  	writer.Write (number.Scale);  	writer.Write (bytes.Length);  	writer.Write (bytes);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: if (obj.IsNull) {  	writer.Write ((byte)0);  } else if (number.CanBeInt32) {  	writer.Write ((byte)1);  	writer.Write (number.ToInt32 ());  } else if (number.CanBeInt64) {  	writer.Write ((byte)2);  	writer.Write (number.ToInt64 ());  } else {  	var bytes = number.ToByteArray ();  	writer.Write ((byte)3);  	writer.Write (number.Precision);  	writer.Write (number.Scale);  	writer.Write (bytes.Length);  	writer.Write (bytes);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: if (number.CanBeInt32) {  	writer.Write ((byte)1);  	writer.Write (number.ToInt32 ());  } else if (number.CanBeInt64) {  	writer.Write ((byte)2);  	writer.Write (number.ToInt64 ());  } else {  	var bytes = number.ToByteArray ();  	writer.Write ((byte)3);  	writer.Write (number.Precision);  	writer.Write (number.Scale);  	writer.Write (bytes.Length);  	writer.Write (bytes);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: if (number.CanBeInt32) {  	writer.Write ((byte)1);  	writer.Write (number.ToInt32 ());  } else if (number.CanBeInt64) {  	writer.Write ((byte)2);  	writer.Write (number.ToInt64 ());  } else {  	var bytes = number.ToByteArray ();  	writer.Write ((byte)3);  	writer.Write (number.Precision);  	writer.Write (number.Scale);  	writer.Write (bytes.Length);  	writer.Write (bytes);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: if (number.CanBeInt64) {  	writer.Write ((byte)2);  	writer.Write (number.ToInt64 ());  } else {  	var bytes = number.ToByteArray ();  	writer.Write ((byte)3);  	writer.Write (number.Precision);  	writer.Write (number.Scale);  	writer.Write (bytes.Length);  	writer.Write (bytes);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: if (number.CanBeInt64) {  	writer.Write ((byte)2);  	writer.Write (number.ToInt64 ());  } else {  	var bytes = number.ToByteArray ();  	writer.Write ((byte)3);  	writer.Write (number.Precision);  	writer.Write (number.Scale);  	writer.Write (bytes.Length);  	writer.Write (bytes);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: writer.Write ((byte)2);  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,SerializeObject,The following statement contains a magic number: writer.Write ((byte)3);  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,DeserializeObject,The following statement contains a magic number: if (type == 2) {  	var value = reader.ReadInt64 ();  	return new SqlNumber (value);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,DeserializeObject,The following statement contains a magic number: if (type == 3) {  	var precision = reader.ReadInt32 ();  	var scale = reader.ReadInt32 ();  	var length = reader.ReadInt32 ();  	var bytes = reader.ReadBytes (length);  	return new SqlNumber (bytes' scale' precision);  }  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,ColumnSizeOf,The following statement contains a magic number: if (number.CanBeInt32)  	return 1 + 4;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,ColumnSizeOf,The following statement contains a magic number: if (number.CanBeInt64)  	return 1 + 8;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 8;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4 + 4 + 4 + length;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4 + 4 + 4 + length;  
Magic Number,Deveel.Data.Sql.Types,NumericType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\NumericType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4 + 4 + 4 + length;  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,LexicographicalOrder,The following statement contains a magic number: if (str1Size < 32 * 1024 && str2Size < 32 * 1024) {  	return String.Compare (str1.ToString ()' str2.ToString ()' StringComparison.Ordinal);  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,LexicographicalOrder,The following statement contains a magic number: if (str1Size < 32 * 1024 && str2Size < 32 * 1024) {  	return String.Compare (str1.ToString ()' str2.ToString ()' StringComparison.Ordinal);  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,LexicographicalOrder,The following statement contains a magic number: if (str1Size < 32 * 1024 && str2Size < 32 * 1024) {  	return String.Compare (str1.ToString ()' str2.ToString ()' StringComparison.Ordinal);  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,LexicographicalOrder,The following statement contains a magic number: if (str1Size < 32 * 1024 && str2Size < 32 * 1024) {  	return String.Compare (str1.ToString ()' str2.ToString ()' StringComparison.Ordinal);  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The following statement contains a magic number: if (obj.IsNull) {  	if (TypeCode == SqlTypeCode.Clob || TypeCode == SqlTypeCode.LongVarChar) {  		writer.Write ((byte)3);  	} else {  		writer.Write ((byte)1);  	}  	return;  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The following statement contains a magic number: if (TypeCode == SqlTypeCode.Clob || TypeCode == SqlTypeCode.LongVarChar) {  	writer.Write ((byte)3);  } else {  	writer.Write ((byte)1);  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The following statement contains a magic number: writer.Write ((byte)3);  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlString) {  	var bytes = ((SqlString)sqlString).ToByteArray (Encoding);  	writer.Write ((byte)2);  	writer.Write (bytes.Length);  	writer.Write (bytes);  } else if (obj is SqlLongString) {  	var longString = (SqlLongString)sqlString;  	writer.Write ((byte)4);  	writer.Write (longString.ObjectId.StoreId);  	writer.Write (longString.ObjectId.Id);  } else {  	throw new FormatException (String.Format ("The object of type '{0}' is not handled by {1}"' obj.GetType ()' ToString ()));  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlString) {  	var bytes = ((SqlString)sqlString).ToByteArray (Encoding);  	writer.Write ((byte)2);  	writer.Write (bytes.Length);  	writer.Write (bytes);  } else if (obj is SqlLongString) {  	var longString = (SqlLongString)sqlString;  	writer.Write ((byte)4);  	writer.Write (longString.ObjectId.StoreId);  	writer.Write (longString.ObjectId.Id);  } else {  	throw new FormatException (String.Format ("The object of type '{0}' is not handled by {1}"' obj.GetType ()' ToString ()));  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The following statement contains a magic number: writer.Write ((byte)2);  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The following statement contains a magic number: if (obj is SqlLongString) {  	var longString = (SqlLongString)sqlString;  	writer.Write ((byte)4);  	writer.Write (longString.ObjectId.StoreId);  	writer.Write (longString.ObjectId.Id);  } else {  	throw new FormatException (String.Format ("The object of type '{0}' is not handled by {1}"' obj.GetType ()' ToString ()));  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,SerializeObject,The following statement contains a magic number: writer.Write ((byte)4);  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,DeserializeObject,The following statement contains a magic number: if (type == 3)  	return SqlLongString.Null;  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,DeserializeObject,The following statement contains a magic number: if (type == 2) {  	var length = reader.ReadInt32 ();  	var bytes = reader.ReadBytes (length);  	var chars = Encoding.GetChars (bytes);  	return new SqlString (chars);  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,DeserializeObject,The following statement contains a magic number: if (type == 4) {  	var storeId = reader.ReadInt32 ();  	var objId = reader.ReadInt64 ();  	var refObjId = new ObjectId (storeId' objId);  	// TODO: find the store and get the object  	throw new NotImplementedException ();  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlString) {  	var s = (SqlString)obj;  	var length = s.GetByteCount (Encoding);  	// Type + Byte Length + Bytes  	return 1 + 4 + length;  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4 + length;  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlLongString) {  	// Type + Store ID + Object ID  	return 1 + 4 + 8;  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,ColumnSizeOf,The following statement contains a magic number: if (obj is SqlLongString) {  	// Type + Store ID + Object ID  	return 1 + 4 + 8;  }  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4 + 8;  
Magic Number,Deveel.Data.Sql.Types,StringType,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\StringType.cs,ColumnSizeOf,The following statement contains a magic number: return 1 + 4 + 8;  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: try {  	var id = Transaction.NextTableId (TypeTableName);  	var typeTable = Transaction.GetMutableTable (TypeTableName);  	var typeMemberTable = Transaction.GetMutableTable (TypeMemberTableName);  	var parentName = typeInfo.ParentType != null ? typeInfo.ParentType.ToString () : null;  	var row = typeTable.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' typeInfo.TypeName.ParentName);  	row.SetValue (2' typeInfo.TypeName.Name);  	row.SetValue (3' parentName);  	row.SetValue (4' typeInfo.IsSealed);  	row.SetValue (5' typeInfo.IsAbstract);  	row.SetValue (6' typeInfo.Owner);  	typeTable.AddRow (row);  	for (int i = 0; i < typeInfo.MemberCount; i++) {  		var member = typeInfo [i];  		row = typeMemberTable.NewRow ();  		row.SetValue (0' id);  		row.SetValue (1' member.MemberName);  		row.SetValue (2' member.MemberType.ToString ());  		typeMemberTable.AddRow (row);  	}  	Transaction.OnObjectCreated (DbObjectType.Type' typeInfo.TypeName);  } finally {  	typesCache.Clear ();  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: try {  	var id = Transaction.NextTableId (TypeTableName);  	var typeTable = Transaction.GetMutableTable (TypeTableName);  	var typeMemberTable = Transaction.GetMutableTable (TypeMemberTableName);  	var parentName = typeInfo.ParentType != null ? typeInfo.ParentType.ToString () : null;  	var row = typeTable.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' typeInfo.TypeName.ParentName);  	row.SetValue (2' typeInfo.TypeName.Name);  	row.SetValue (3' parentName);  	row.SetValue (4' typeInfo.IsSealed);  	row.SetValue (5' typeInfo.IsAbstract);  	row.SetValue (6' typeInfo.Owner);  	typeTable.AddRow (row);  	for (int i = 0; i < typeInfo.MemberCount; i++) {  		var member = typeInfo [i];  		row = typeMemberTable.NewRow ();  		row.SetValue (0' id);  		row.SetValue (1' member.MemberName);  		row.SetValue (2' member.MemberType.ToString ());  		typeMemberTable.AddRow (row);  	}  	Transaction.OnObjectCreated (DbObjectType.Type' typeInfo.TypeName);  } finally {  	typesCache.Clear ();  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: try {  	var id = Transaction.NextTableId (TypeTableName);  	var typeTable = Transaction.GetMutableTable (TypeTableName);  	var typeMemberTable = Transaction.GetMutableTable (TypeMemberTableName);  	var parentName = typeInfo.ParentType != null ? typeInfo.ParentType.ToString () : null;  	var row = typeTable.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' typeInfo.TypeName.ParentName);  	row.SetValue (2' typeInfo.TypeName.Name);  	row.SetValue (3' parentName);  	row.SetValue (4' typeInfo.IsSealed);  	row.SetValue (5' typeInfo.IsAbstract);  	row.SetValue (6' typeInfo.Owner);  	typeTable.AddRow (row);  	for (int i = 0; i < typeInfo.MemberCount; i++) {  		var member = typeInfo [i];  		row = typeMemberTable.NewRow ();  		row.SetValue (0' id);  		row.SetValue (1' member.MemberName);  		row.SetValue (2' member.MemberType.ToString ());  		typeMemberTable.AddRow (row);  	}  	Transaction.OnObjectCreated (DbObjectType.Type' typeInfo.TypeName);  } finally {  	typesCache.Clear ();  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: try {  	var id = Transaction.NextTableId (TypeTableName);  	var typeTable = Transaction.GetMutableTable (TypeTableName);  	var typeMemberTable = Transaction.GetMutableTable (TypeMemberTableName);  	var parentName = typeInfo.ParentType != null ? typeInfo.ParentType.ToString () : null;  	var row = typeTable.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' typeInfo.TypeName.ParentName);  	row.SetValue (2' typeInfo.TypeName.Name);  	row.SetValue (3' parentName);  	row.SetValue (4' typeInfo.IsSealed);  	row.SetValue (5' typeInfo.IsAbstract);  	row.SetValue (6' typeInfo.Owner);  	typeTable.AddRow (row);  	for (int i = 0; i < typeInfo.MemberCount; i++) {  		var member = typeInfo [i];  		row = typeMemberTable.NewRow ();  		row.SetValue (0' id);  		row.SetValue (1' member.MemberName);  		row.SetValue (2' member.MemberType.ToString ());  		typeMemberTable.AddRow (row);  	}  	Transaction.OnObjectCreated (DbObjectType.Type' typeInfo.TypeName);  } finally {  	typesCache.Clear ();  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: try {  	var id = Transaction.NextTableId (TypeTableName);  	var typeTable = Transaction.GetMutableTable (TypeTableName);  	var typeMemberTable = Transaction.GetMutableTable (TypeMemberTableName);  	var parentName = typeInfo.ParentType != null ? typeInfo.ParentType.ToString () : null;  	var row = typeTable.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' typeInfo.TypeName.ParentName);  	row.SetValue (2' typeInfo.TypeName.Name);  	row.SetValue (3' parentName);  	row.SetValue (4' typeInfo.IsSealed);  	row.SetValue (5' typeInfo.IsAbstract);  	row.SetValue (6' typeInfo.Owner);  	typeTable.AddRow (row);  	for (int i = 0; i < typeInfo.MemberCount; i++) {  		var member = typeInfo [i];  		row = typeMemberTable.NewRow ();  		row.SetValue (0' id);  		row.SetValue (1' member.MemberName);  		row.SetValue (2' member.MemberType.ToString ());  		typeMemberTable.AddRow (row);  	}  	Transaction.OnObjectCreated (DbObjectType.Type' typeInfo.TypeName);  } finally {  	typesCache.Clear ();  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: try {  	var id = Transaction.NextTableId (TypeTableName);  	var typeTable = Transaction.GetMutableTable (TypeTableName);  	var typeMemberTable = Transaction.GetMutableTable (TypeMemberTableName);  	var parentName = typeInfo.ParentType != null ? typeInfo.ParentType.ToString () : null;  	var row = typeTable.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' typeInfo.TypeName.ParentName);  	row.SetValue (2' typeInfo.TypeName.Name);  	row.SetValue (3' parentName);  	row.SetValue (4' typeInfo.IsSealed);  	row.SetValue (5' typeInfo.IsAbstract);  	row.SetValue (6' typeInfo.Owner);  	typeTable.AddRow (row);  	for (int i = 0; i < typeInfo.MemberCount; i++) {  		var member = typeInfo [i];  		row = typeMemberTable.NewRow ();  		row.SetValue (0' id);  		row.SetValue (1' member.MemberName);  		row.SetValue (2' member.MemberType.ToString ());  		typeMemberTable.AddRow (row);  	}  	Transaction.OnObjectCreated (DbObjectType.Type' typeInfo.TypeName);  } finally {  	typesCache.Clear ();  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: row.SetValue (2' typeInfo.TypeName.Name);  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: row.SetValue (3' parentName);  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: row.SetValue (4' typeInfo.IsSealed);  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: row.SetValue (5' typeInfo.IsAbstract);  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: row.SetValue (6' typeInfo.Owner);  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: for (int i = 0; i < typeInfo.MemberCount; i++) {  	var member = typeInfo [i];  	row = typeMemberTable.NewRow ();  	row.SetValue (0' id);  	row.SetValue (1' member.MemberName);  	row.SetValue (2' member.MemberType.ToString ());  	typeMemberTable.AddRow (row);  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,CreateType,The following statement contains a magic number: row.SetValue (2' member.MemberType.ToString ());  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,ResolveName,The following statement contains a magic number: foreach (var row in table) {  	var schemaValue = row.GetValue (1).Value.ToString ();  	var nameValue = row.GetValue (2).Value.ToString ();  	if (!String.Equals (name' nameValue' comparison) || !String.Equals (schemaName' schemaValue' comparison))  		continue;  	return new ObjectName (ObjectName.Parse (schemaValue)' nameValue);  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: if (!typesCache.TryGetValue (typeName' out userType)) {  	var typeTable = Transaction.GetTable (TypeTableName);  	var membersTable = Transaction.GetTable (TypeMemberTableName);  	var schemaName = typeName.ParentName;  	var name = typeName.Name;  	var schemaColumn = typeTable.GetResolvedColumnName (1);  	var nameColumn = typeTable.GetResolvedColumnName (2);  	var idColumn = membersTable.GetResolvedColumnName (0);  	UserTypeInfo typeInfo;  	using (var session = new SystemSession (Transaction)) {  		using (var query = session.CreateQuery ()) {  			var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  			t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  			if (t.RowCount == 0)  				return null;  			var id = t.GetValue (0' 0);  			var parentField = t.GetValue (0' 3);  			ObjectName parentType = null;  			if (!Field.IsNullField (parentField)) {  				parentType = ObjectName.Parse (parentField.Value.ToString ());  			}  			typeInfo = new UserTypeInfo (typeName' parentType);  			var isSealedField = t.GetValue (0' 4);  			var isAbstractField = t.GetValue (0' 5);  			if (!Field.IsNullField (isSealedField)) {  				typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  			}  			if (!Field.IsNullField (isAbstractField)) {  				typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  			}  			var owner = t.GetValue (0' 6).Value.ToString ();  			typeInfo.Owner = owner;  			var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  			foreach (var row in t2) {  				var memberName = row.GetValue (1).Value.ToString ();  				var memberTypeString = row.GetValue (2).Value.ToString ();  				var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  				if (memberType == null)  					throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  				typeInfo.AddMember (memberName' memberType);  			}  		}  	}  	userType = new UserType (typeInfo);  	typesCache [typeName] = userType;  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: if (!typesCache.TryGetValue (typeName' out userType)) {  	var typeTable = Transaction.GetTable (TypeTableName);  	var membersTable = Transaction.GetTable (TypeMemberTableName);  	var schemaName = typeName.ParentName;  	var name = typeName.Name;  	var schemaColumn = typeTable.GetResolvedColumnName (1);  	var nameColumn = typeTable.GetResolvedColumnName (2);  	var idColumn = membersTable.GetResolvedColumnName (0);  	UserTypeInfo typeInfo;  	using (var session = new SystemSession (Transaction)) {  		using (var query = session.CreateQuery ()) {  			var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  			t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  			if (t.RowCount == 0)  				return null;  			var id = t.GetValue (0' 0);  			var parentField = t.GetValue (0' 3);  			ObjectName parentType = null;  			if (!Field.IsNullField (parentField)) {  				parentType = ObjectName.Parse (parentField.Value.ToString ());  			}  			typeInfo = new UserTypeInfo (typeName' parentType);  			var isSealedField = t.GetValue (0' 4);  			var isAbstractField = t.GetValue (0' 5);  			if (!Field.IsNullField (isSealedField)) {  				typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  			}  			if (!Field.IsNullField (isAbstractField)) {  				typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  			}  			var owner = t.GetValue (0' 6).Value.ToString ();  			typeInfo.Owner = owner;  			var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  			foreach (var row in t2) {  				var memberName = row.GetValue (1).Value.ToString ();  				var memberTypeString = row.GetValue (2).Value.ToString ();  				var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  				if (memberType == null)  					throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  				typeInfo.AddMember (memberName' memberType);  			}  		}  	}  	userType = new UserType (typeInfo);  	typesCache [typeName] = userType;  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: if (!typesCache.TryGetValue (typeName' out userType)) {  	var typeTable = Transaction.GetTable (TypeTableName);  	var membersTable = Transaction.GetTable (TypeMemberTableName);  	var schemaName = typeName.ParentName;  	var name = typeName.Name;  	var schemaColumn = typeTable.GetResolvedColumnName (1);  	var nameColumn = typeTable.GetResolvedColumnName (2);  	var idColumn = membersTable.GetResolvedColumnName (0);  	UserTypeInfo typeInfo;  	using (var session = new SystemSession (Transaction)) {  		using (var query = session.CreateQuery ()) {  			var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  			t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  			if (t.RowCount == 0)  				return null;  			var id = t.GetValue (0' 0);  			var parentField = t.GetValue (0' 3);  			ObjectName parentType = null;  			if (!Field.IsNullField (parentField)) {  				parentType = ObjectName.Parse (parentField.Value.ToString ());  			}  			typeInfo = new UserTypeInfo (typeName' parentType);  			var isSealedField = t.GetValue (0' 4);  			var isAbstractField = t.GetValue (0' 5);  			if (!Field.IsNullField (isSealedField)) {  				typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  			}  			if (!Field.IsNullField (isAbstractField)) {  				typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  			}  			var owner = t.GetValue (0' 6).Value.ToString ();  			typeInfo.Owner = owner;  			var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  			foreach (var row in t2) {  				var memberName = row.GetValue (1).Value.ToString ();  				var memberTypeString = row.GetValue (2).Value.ToString ();  				var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  				if (memberType == null)  					throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  				typeInfo.AddMember (memberName' memberType);  			}  		}  	}  	userType = new UserType (typeInfo);  	typesCache [typeName] = userType;  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: if (!typesCache.TryGetValue (typeName' out userType)) {  	var typeTable = Transaction.GetTable (TypeTableName);  	var membersTable = Transaction.GetTable (TypeMemberTableName);  	var schemaName = typeName.ParentName;  	var name = typeName.Name;  	var schemaColumn = typeTable.GetResolvedColumnName (1);  	var nameColumn = typeTable.GetResolvedColumnName (2);  	var idColumn = membersTable.GetResolvedColumnName (0);  	UserTypeInfo typeInfo;  	using (var session = new SystemSession (Transaction)) {  		using (var query = session.CreateQuery ()) {  			var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  			t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  			if (t.RowCount == 0)  				return null;  			var id = t.GetValue (0' 0);  			var parentField = t.GetValue (0' 3);  			ObjectName parentType = null;  			if (!Field.IsNullField (parentField)) {  				parentType = ObjectName.Parse (parentField.Value.ToString ());  			}  			typeInfo = new UserTypeInfo (typeName' parentType);  			var isSealedField = t.GetValue (0' 4);  			var isAbstractField = t.GetValue (0' 5);  			if (!Field.IsNullField (isSealedField)) {  				typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  			}  			if (!Field.IsNullField (isAbstractField)) {  				typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  			}  			var owner = t.GetValue (0' 6).Value.ToString ();  			typeInfo.Owner = owner;  			var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  			foreach (var row in t2) {  				var memberName = row.GetValue (1).Value.ToString ();  				var memberTypeString = row.GetValue (2).Value.ToString ();  				var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  				if (memberType == null)  					throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  				typeInfo.AddMember (memberName' memberType);  			}  		}  	}  	userType = new UserType (typeInfo);  	typesCache [typeName] = userType;  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: if (!typesCache.TryGetValue (typeName' out userType)) {  	var typeTable = Transaction.GetTable (TypeTableName);  	var membersTable = Transaction.GetTable (TypeMemberTableName);  	var schemaName = typeName.ParentName;  	var name = typeName.Name;  	var schemaColumn = typeTable.GetResolvedColumnName (1);  	var nameColumn = typeTable.GetResolvedColumnName (2);  	var idColumn = membersTable.GetResolvedColumnName (0);  	UserTypeInfo typeInfo;  	using (var session = new SystemSession (Transaction)) {  		using (var query = session.CreateQuery ()) {  			var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  			t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  			if (t.RowCount == 0)  				return null;  			var id = t.GetValue (0' 0);  			var parentField = t.GetValue (0' 3);  			ObjectName parentType = null;  			if (!Field.IsNullField (parentField)) {  				parentType = ObjectName.Parse (parentField.Value.ToString ());  			}  			typeInfo = new UserTypeInfo (typeName' parentType);  			var isSealedField = t.GetValue (0' 4);  			var isAbstractField = t.GetValue (0' 5);  			if (!Field.IsNullField (isSealedField)) {  				typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  			}  			if (!Field.IsNullField (isAbstractField)) {  				typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  			}  			var owner = t.GetValue (0' 6).Value.ToString ();  			typeInfo.Owner = owner;  			var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  			foreach (var row in t2) {  				var memberName = row.GetValue (1).Value.ToString ();  				var memberTypeString = row.GetValue (2).Value.ToString ();  				var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  				if (memberType == null)  					throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  				typeInfo.AddMember (memberName' memberType);  			}  		}  	}  	userType = new UserType (typeInfo);  	typesCache [typeName] = userType;  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: if (!typesCache.TryGetValue (typeName' out userType)) {  	var typeTable = Transaction.GetTable (TypeTableName);  	var membersTable = Transaction.GetTable (TypeMemberTableName);  	var schemaName = typeName.ParentName;  	var name = typeName.Name;  	var schemaColumn = typeTable.GetResolvedColumnName (1);  	var nameColumn = typeTable.GetResolvedColumnName (2);  	var idColumn = membersTable.GetResolvedColumnName (0);  	UserTypeInfo typeInfo;  	using (var session = new SystemSession (Transaction)) {  		using (var query = session.CreateQuery ()) {  			var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  			t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  			if (t.RowCount == 0)  				return null;  			var id = t.GetValue (0' 0);  			var parentField = t.GetValue (0' 3);  			ObjectName parentType = null;  			if (!Field.IsNullField (parentField)) {  				parentType = ObjectName.Parse (parentField.Value.ToString ());  			}  			typeInfo = new UserTypeInfo (typeName' parentType);  			var isSealedField = t.GetValue (0' 4);  			var isAbstractField = t.GetValue (0' 5);  			if (!Field.IsNullField (isSealedField)) {  				typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  			}  			if (!Field.IsNullField (isAbstractField)) {  				typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  			}  			var owner = t.GetValue (0' 6).Value.ToString ();  			typeInfo.Owner = owner;  			var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  			foreach (var row in t2) {  				var memberName = row.GetValue (1).Value.ToString ();  				var memberTypeString = row.GetValue (2).Value.ToString ();  				var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  				if (memberType == null)  					throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  				typeInfo.AddMember (memberName' memberType);  			}  		}  	}  	userType = new UserType (typeInfo);  	typesCache [typeName] = userType;  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var session = new SystemSession (Transaction)) {  	using (var query = session.CreateQuery ()) {  		var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  		t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  		if (t.RowCount == 0)  			return null;  		var id = t.GetValue (0' 0);  		var parentField = t.GetValue (0' 3);  		ObjectName parentType = null;  		if (!Field.IsNullField (parentField)) {  			parentType = ObjectName.Parse (parentField.Value.ToString ());  		}  		typeInfo = new UserTypeInfo (typeName' parentType);  		var isSealedField = t.GetValue (0' 4);  		var isAbstractField = t.GetValue (0' 5);  		if (!Field.IsNullField (isSealedField)) {  			typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  		}  		if (!Field.IsNullField (isAbstractField)) {  			typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  		}  		var owner = t.GetValue (0' 6).Value.ToString ();  		typeInfo.Owner = owner;  		var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  		foreach (var row in t2) {  			var memberName = row.GetValue (1).Value.ToString ();  			var memberTypeString = row.GetValue (2).Value.ToString ();  			var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  			if (memberType == null)  				throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  			typeInfo.AddMember (memberName' memberType);  		}  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var session = new SystemSession (Transaction)) {  	using (var query = session.CreateQuery ()) {  		var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  		t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  		if (t.RowCount == 0)  			return null;  		var id = t.GetValue (0' 0);  		var parentField = t.GetValue (0' 3);  		ObjectName parentType = null;  		if (!Field.IsNullField (parentField)) {  			parentType = ObjectName.Parse (parentField.Value.ToString ());  		}  		typeInfo = new UserTypeInfo (typeName' parentType);  		var isSealedField = t.GetValue (0' 4);  		var isAbstractField = t.GetValue (0' 5);  		if (!Field.IsNullField (isSealedField)) {  			typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  		}  		if (!Field.IsNullField (isAbstractField)) {  			typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  		}  		var owner = t.GetValue (0' 6).Value.ToString ();  		typeInfo.Owner = owner;  		var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  		foreach (var row in t2) {  			var memberName = row.GetValue (1).Value.ToString ();  			var memberTypeString = row.GetValue (2).Value.ToString ();  			var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  			if (memberType == null)  				throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  			typeInfo.AddMember (memberName' memberType);  		}  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var session = new SystemSession (Transaction)) {  	using (var query = session.CreateQuery ()) {  		var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  		t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  		if (t.RowCount == 0)  			return null;  		var id = t.GetValue (0' 0);  		var parentField = t.GetValue (0' 3);  		ObjectName parentType = null;  		if (!Field.IsNullField (parentField)) {  			parentType = ObjectName.Parse (parentField.Value.ToString ());  		}  		typeInfo = new UserTypeInfo (typeName' parentType);  		var isSealedField = t.GetValue (0' 4);  		var isAbstractField = t.GetValue (0' 5);  		if (!Field.IsNullField (isSealedField)) {  			typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  		}  		if (!Field.IsNullField (isAbstractField)) {  			typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  		}  		var owner = t.GetValue (0' 6).Value.ToString ();  		typeInfo.Owner = owner;  		var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  		foreach (var row in t2) {  			var memberName = row.GetValue (1).Value.ToString ();  			var memberTypeString = row.GetValue (2).Value.ToString ();  			var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  			if (memberType == null)  				throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  			typeInfo.AddMember (memberName' memberType);  		}  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var session = new SystemSession (Transaction)) {  	using (var query = session.CreateQuery ()) {  		var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  		t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  		if (t.RowCount == 0)  			return null;  		var id = t.GetValue (0' 0);  		var parentField = t.GetValue (0' 3);  		ObjectName parentType = null;  		if (!Field.IsNullField (parentField)) {  			parentType = ObjectName.Parse (parentField.Value.ToString ());  		}  		typeInfo = new UserTypeInfo (typeName' parentType);  		var isSealedField = t.GetValue (0' 4);  		var isAbstractField = t.GetValue (0' 5);  		if (!Field.IsNullField (isSealedField)) {  			typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  		}  		if (!Field.IsNullField (isAbstractField)) {  			typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  		}  		var owner = t.GetValue (0' 6).Value.ToString ();  		typeInfo.Owner = owner;  		var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  		foreach (var row in t2) {  			var memberName = row.GetValue (1).Value.ToString ();  			var memberTypeString = row.GetValue (2).Value.ToString ();  			var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  			if (memberType == null)  				throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  			typeInfo.AddMember (memberName' memberType);  		}  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var session = new SystemSession (Transaction)) {  	using (var query = session.CreateQuery ()) {  		var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  		t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  		if (t.RowCount == 0)  			return null;  		var id = t.GetValue (0' 0);  		var parentField = t.GetValue (0' 3);  		ObjectName parentType = null;  		if (!Field.IsNullField (parentField)) {  			parentType = ObjectName.Parse (parentField.Value.ToString ());  		}  		typeInfo = new UserTypeInfo (typeName' parentType);  		var isSealedField = t.GetValue (0' 4);  		var isAbstractField = t.GetValue (0' 5);  		if (!Field.IsNullField (isSealedField)) {  			typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  		}  		if (!Field.IsNullField (isAbstractField)) {  			typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  		}  		var owner = t.GetValue (0' 6).Value.ToString ();  		typeInfo.Owner = owner;  		var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  		foreach (var row in t2) {  			var memberName = row.GetValue (1).Value.ToString ();  			var memberTypeString = row.GetValue (2).Value.ToString ();  			var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  			if (memberType == null)  				throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  			typeInfo.AddMember (memberName' memberType);  		}  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var query = session.CreateQuery ()) {  	var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  	t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  	if (t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var parentField = t.GetValue (0' 3);  	ObjectName parentType = null;  	if (!Field.IsNullField (parentField)) {  		parentType = ObjectName.Parse (parentField.Value.ToString ());  	}  	typeInfo = new UserTypeInfo (typeName' parentType);  	var isSealedField = t.GetValue (0' 4);  	var isAbstractField = t.GetValue (0' 5);  	if (!Field.IsNullField (isSealedField)) {  		typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  	}  	if (!Field.IsNullField (isAbstractField)) {  		typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  	}  	var owner = t.GetValue (0' 6).Value.ToString ();  	typeInfo.Owner = owner;  	var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  	foreach (var row in t2) {  		var memberName = row.GetValue (1).Value.ToString ();  		var memberTypeString = row.GetValue (2).Value.ToString ();  		var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  		if (memberType == null)  			throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  		typeInfo.AddMember (memberName' memberType);  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var query = session.CreateQuery ()) {  	var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  	t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  	if (t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var parentField = t.GetValue (0' 3);  	ObjectName parentType = null;  	if (!Field.IsNullField (parentField)) {  		parentType = ObjectName.Parse (parentField.Value.ToString ());  	}  	typeInfo = new UserTypeInfo (typeName' parentType);  	var isSealedField = t.GetValue (0' 4);  	var isAbstractField = t.GetValue (0' 5);  	if (!Field.IsNullField (isSealedField)) {  		typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  	}  	if (!Field.IsNullField (isAbstractField)) {  		typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  	}  	var owner = t.GetValue (0' 6).Value.ToString ();  	typeInfo.Owner = owner;  	var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  	foreach (var row in t2) {  		var memberName = row.GetValue (1).Value.ToString ();  		var memberTypeString = row.GetValue (2).Value.ToString ();  		var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  		if (memberType == null)  			throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  		typeInfo.AddMember (memberName' memberType);  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var query = session.CreateQuery ()) {  	var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  	t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  	if (t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var parentField = t.GetValue (0' 3);  	ObjectName parentType = null;  	if (!Field.IsNullField (parentField)) {  		parentType = ObjectName.Parse (parentField.Value.ToString ());  	}  	typeInfo = new UserTypeInfo (typeName' parentType);  	var isSealedField = t.GetValue (0' 4);  	var isAbstractField = t.GetValue (0' 5);  	if (!Field.IsNullField (isSealedField)) {  		typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  	}  	if (!Field.IsNullField (isAbstractField)) {  		typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  	}  	var owner = t.GetValue (0' 6).Value.ToString ();  	typeInfo.Owner = owner;  	var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  	foreach (var row in t2) {  		var memberName = row.GetValue (1).Value.ToString ();  		var memberTypeString = row.GetValue (2).Value.ToString ();  		var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  		if (memberType == null)  			throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  		typeInfo.AddMember (memberName' memberType);  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var query = session.CreateQuery ()) {  	var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  	t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  	if (t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var parentField = t.GetValue (0' 3);  	ObjectName parentType = null;  	if (!Field.IsNullField (parentField)) {  		parentType = ObjectName.Parse (parentField.Value.ToString ());  	}  	typeInfo = new UserTypeInfo (typeName' parentType);  	var isSealedField = t.GetValue (0' 4);  	var isAbstractField = t.GetValue (0' 5);  	if (!Field.IsNullField (isSealedField)) {  		typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  	}  	if (!Field.IsNullField (isAbstractField)) {  		typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  	}  	var owner = t.GetValue (0' 6).Value.ToString ();  	typeInfo.Owner = owner;  	var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  	foreach (var row in t2) {  		var memberName = row.GetValue (1).Value.ToString ();  		var memberTypeString = row.GetValue (2).Value.ToString ();  		var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  		if (memberType == null)  			throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  		typeInfo.AddMember (memberName' memberType);  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: using (var query = session.CreateQuery ()) {  	var t = typeTable.SimpleSelect (query' schemaColumn' SqlExpressionType.Equal' SqlExpression.Constant (schemaName));  	t = t.ExhaustiveSelect (query' SqlExpression.Equal (SqlExpression.Reference (nameColumn)' SqlExpression.Constant (name)));  	if (t.RowCount == 0)  		return null;  	var id = t.GetValue (0' 0);  	var parentField = t.GetValue (0' 3);  	ObjectName parentType = null;  	if (!Field.IsNullField (parentField)) {  		parentType = ObjectName.Parse (parentField.Value.ToString ());  	}  	typeInfo = new UserTypeInfo (typeName' parentType);  	var isSealedField = t.GetValue (0' 4);  	var isAbstractField = t.GetValue (0' 5);  	if (!Field.IsNullField (isSealedField)) {  		typeInfo.IsSealed = (SqlBoolean)isSealedField.AsBoolean ().Value;  	}  	if (!Field.IsNullField (isAbstractField)) {  		typeInfo.IsAbstract = (SqlBoolean)isAbstractField.AsBoolean ().Value;  	}  	var owner = t.GetValue (0' 6).Value.ToString ();  	typeInfo.Owner = owner;  	var t2 = membersTable.SimpleSelect (query' idColumn' SqlExpressionType.Equal' SqlExpression.Constant (id));  	foreach (var row in t2) {  		var memberName = row.GetValue (1).Value.ToString ();  		var memberTypeString = row.GetValue (2).Value.ToString ();  		var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  		if (memberType == null)  			throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  		typeInfo.AddMember (memberName' memberType);  	}  }  
Magic Number,Deveel.Data.Sql.Types,TypeManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Types\TypeManager.cs,GetUserType,The following statement contains a magic number: foreach (var row in t2) {  	var memberName = row.GetValue (1).Value.ToString ();  	var memberTypeString = row.GetValue (2).Value.ToString ();  	var memberType = SqlType.Parse (Transaction.Context' memberTypeString);  	if (memberType == null)  		throw new InvalidOperationException (String.Format ("Cannot find the type '{0}' for member '{1}' of type '{2}'."' memberTypeString' memberName' typeName));  	typeInfo.AddMember (memberName' memberType);  }  
Magic Number,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,DefineView,The following statement contains a magic number: rdat.SetValue (2' query.ToString ());  
Magic Number,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,DefineView,The following statement contains a magic number: rdat.SetValue (3' Field.Binary (viewInfoData));  
Magic Number,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,GetView,The following statement contains a magic number: while (e.MoveNext ()) {  	int row = e.Current.RowId.RowNumber;  	var cSchema = viewTable.GetValue (row' 0).Value.ToString ();  	var cName = viewTable.GetValue (row' 1).Value.ToString ();  	if (viewName.ParentName.Equals (cSchema) && viewName.Name.Equals (cName)) {  		ViewInfo viewInfo;  		if (!viewCache.TryGetValue (row' out viewInfo)) {  			var blob = (SqlBinary)viewTable.GetValue (row' 3).Value;  			viewInfo = ViewInfo.FromBinary (blob);  			viewCache [row] = viewInfo;  		}  		return new View (viewInfo);  	}  }  
Magic Number,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,GetView,The following statement contains a magic number: if (viewName.ParentName.Equals (cSchema) && viewName.Name.Equals (cName)) {  	ViewInfo viewInfo;  	if (!viewCache.TryGetValue (row' out viewInfo)) {  		var blob = (SqlBinary)viewTable.GetValue (row' 3).Value;  		viewInfo = ViewInfo.FromBinary (blob);  		viewCache [row] = viewInfo;  	}  	return new View (viewInfo);  }  
Magic Number,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,GetView,The following statement contains a magic number: if (!viewCache.TryGetValue (row' out viewInfo)) {  	var blob = (SqlBinary)viewTable.GetValue (row' 3).Value;  	viewInfo = ViewInfo.FromBinary (blob);  	viewCache [row] = viewInfo;  }  
Magic Number,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,GetViewAt,The following statement contains a magic number: while (e.MoveNext ()) {  	var row = e.Current.RowId.RowNumber;  	if (i == offset) {  		ViewInfo viewInfo;  		if (!viewCache.TryGetValue (row' out viewInfo)) {  			var binary = (ISqlBinary)table.GetValue (row' 3).Value;  			viewInfo = ViewInfo.FromBinary (binary);  			viewCache [row] = viewInfo;  		}  		return new View (viewInfo);  	}  	++i;  }  
Magic Number,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,GetViewAt,The following statement contains a magic number: if (i == offset) {  	ViewInfo viewInfo;  	if (!viewCache.TryGetValue (row' out viewInfo)) {  		var binary = (ISqlBinary)table.GetValue (row' 3).Value;  		viewInfo = ViewInfo.FromBinary (binary);  		viewCache [row] = viewInfo;  	}  	return new View (viewInfo);  }  
Magic Number,Deveel.Data.Sql.Views,ViewManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Views\ViewManager.cs,GetViewAt,The following statement contains a magic number: if (!viewCache.TryGetValue (row' out viewInfo)) {  	var binary = (ISqlBinary)table.GetValue (row' 3).Value;  	viewInfo = ViewInfo.FromBinary (binary);  	viewCache [row] = viewInfo;  }  
Magic Number,Deveel.Data.Sql,IndexInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\IndexInfo.cs,SerializeTo,The following statement contains a magic number: writer.Write (2);  
Magic Number,Deveel.Data.Sql,IndexInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\IndexInfo.cs,DeserializeFrom,The following statement contains a magic number: if (version != 2)  	throw new FormatException ("Invalid version number for Index-Info");  
Magic Number,Deveel.Data.Sql,IndexSetInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\IndexSetInfo.cs,SerialiazeTo,The following statement contains a magic number: writer.Write (2);  
Magic Number,Deveel.Data.Sql,IndexSetInfo,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\IndexSetInfo.cs,DeserializeFrom,The following statement contains a magic number: if (version != 2)  	throw new FormatException ("Invalid version number of the Index-Set Info");  
Magic Number,Deveel.Data.Sql,Field,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql\Field.cs,GetHashCode,The following statement contains a magic number: unchecked {  	var code = Type.GetHashCode () * 23;  	if (Value != null)  		code = code ^ Value.GetHashCode ();  	return code;  }  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,OpenOrCreateFile,The following statement contains a magic number: try {  	if (!created) {  		LoadStores (dataFile);  	} else {  		using (var stream = new FileStream (dataFile)) {  			WriteHeaders (stream' 24);  			stream.Flush ();  		}  	}  } finally {  	if (dataFile != null)  		dataFile.Dispose ();  }  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,OpenOrCreateFile,The following statement contains a magic number: if (!created) {  	LoadStores (dataFile);  } else {  	using (var stream = new FileStream (dataFile)) {  		WriteHeaders (stream' 24);  		stream.Flush ();  	}  }  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,OpenOrCreateFile,The following statement contains a magic number: using (var stream = new FileStream (dataFile)) {  	WriteHeaders (stream' 24);  	stream.Flush ();  }  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,OpenOrCreateFile,The following statement contains a magic number: WriteHeaders (stream' 24);  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,GetDataStartOffset,The following statement contains a magic number: foreach (var store in stores.Values) {  	var nameLength = Encoding.Unicode.GetByteCount (store.Name);  	offset += 4 + nameLength + 4 + 8 + 8;  }  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,GetDataStartOffset,The following statement contains a magic number: foreach (var store in stores.Values) {  	var nameLength = Encoding.Unicode.GetByteCount (store.Name);  	offset += 4 + nameLength + 4 + 8 + 8;  }  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,GetDataStartOffset,The following statement contains a magic number: foreach (var store in stores.Values) {  	var nameLength = Encoding.Unicode.GetByteCount (store.Name);  	offset += 4 + nameLength + 4 + 8 + 8;  }  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,GetDataStartOffset,The following statement contains a magic number: foreach (var store in stores.Values) {  	var nameLength = Encoding.Unicode.GetByteCount (store.Name);  	offset += 4 + nameLength + 4 + 8 + 8;  }  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,GetDataStartOffset,The following statement contains a magic number: offset += 4 + nameLength + 4 + 8 + 8;  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,GetDataStartOffset,The following statement contains a magic number: offset += 4 + nameLength + 4 + 8 + 8;  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,GetDataStartOffset,The following statement contains a magic number: offset += 4 + nameLength + 4 + 8 + 8;  
Magic Number,Deveel.Data.Store,SingleFileStoreSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\SingleFileStoreSystem.cs,GetDataStartOffset,The following statement contains a magic number: offset += 4 + nameLength + 4 + 8 + 8;  
Magic Number,Deveel.Data.Store,AreaExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\AreaExtensions.cs,ReadInt2,The following statement contains a magic number: area.Read (bytes' 0' 2);  
Magic Number,Deveel.Data.Store,AreaExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\AreaExtensions.cs,ReadInt4,The following statement contains a magic number: area.Read (bytes' 0' 4);  
Magic Number,Deveel.Data.Store,AreaExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\AreaExtensions.cs,ReadInt8,The following statement contains a magic number: area.Read (bytes' 0' 8);  
Magic Number,Deveel.Data.Store,AreaExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\AreaExtensions.cs,WriteInt2,The following statement contains a magic number: area.Write (bytes' 0' 2);  
Magic Number,Deveel.Data.Store,AreaExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\AreaExtensions.cs,WriteInt4,The following statement contains a magic number: area.Write (bytes' 0' 4);  
Magic Number,Deveel.Data.Store,AreaExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\AreaExtensions.cs,WriteInt8,The following statement contains a magic number: area.Write (bytes' 0' 8);  
Magic Number,Deveel.Data.Store,FixedRecordList,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FixedRecordList.cs,FixedRecordList,The following statement contains a magic number: blockElements = new long[64];  
Magic Number,Deveel.Data.Store,FixedRecordList,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FixedRecordList.cs,FixedRecordList,The following statement contains a magic number: blockAreas = new IArea[64];  
Magic Number,Deveel.Data.Store,FixedRecordList,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FixedRecordList.cs,UpdateListHeaderArea,The following statement contains a magic number: headerArea.Position = 4;  
Magic Number,Deveel.Data.Store,FixedRecordList,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FixedRecordList.cs,UpdateListHeaderArea,The following statement contains a magic number: headerArea.Position = 16;  
Magic Number,Deveel.Data.Store,FixedRecordList,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FixedRecordList.cs,ReadDeleteHead,The following statement contains a magic number: headerArea.Position = 8;  
Magic Number,Deveel.Data.Store,FixedRecordList,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\FixedRecordList.cs,WriteDeleteHead,The following statement contains a magic number: headerArea.Position = 8;  
Magic Number,Deveel.Data.Store,ObjectId,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectId.cs,GetHashCode,The following statement contains a magic number: return unchecked((int)(StoreId * 47 ^ Id));  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ObjectStore,The following statement contains a magic number: fixedList = new FixedRecordList (store' 30);  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,CreateNewObject,The following statement contains a magic number: try {  	store.Lock ();  	// Allocate the area (plus header area) for storing the blob pages  	long pageCount = ((maxSize - 1) / (PageSize * 1024)) + 1;  	IArea objArea = store.CreateArea ((pageCount * 8) + 32);  	long objAreaId = objArea.Id;  	var type = 2;  	// Binary Type  	if (compressed)  		type |= CompressedFlag;  	// Set up the area header  	objArea.WriteInt4 (0);  	// Reserved for future  	objArea.WriteInt4 (type);  	objArea.WriteInt8 (maxSize);  	objArea.WriteInt8 (0);  	objArea.WriteInt8 (pageCount);  	// Initialize the empty blob area  	for (long i = 0; i < pageCount; ++i) {  		objArea.WriteInt8 (-1);  	}  	// And finish  	objArea.Flush ();  	// Update the fixed_list and return the record number for this blob  	long refId = AddToRecordList (objAreaId);  	return new LargeObject (this' refId' maxSize' 0' compressed' false);  } finally {  	store.Unlock ();  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,CreateNewObject,The following statement contains a magic number: try {  	store.Lock ();  	// Allocate the area (plus header area) for storing the blob pages  	long pageCount = ((maxSize - 1) / (PageSize * 1024)) + 1;  	IArea objArea = store.CreateArea ((pageCount * 8) + 32);  	long objAreaId = objArea.Id;  	var type = 2;  	// Binary Type  	if (compressed)  		type |= CompressedFlag;  	// Set up the area header  	objArea.WriteInt4 (0);  	// Reserved for future  	objArea.WriteInt4 (type);  	objArea.WriteInt8 (maxSize);  	objArea.WriteInt8 (0);  	objArea.WriteInt8 (pageCount);  	// Initialize the empty blob area  	for (long i = 0; i < pageCount; ++i) {  		objArea.WriteInt8 (-1);  	}  	// And finish  	objArea.Flush ();  	// Update the fixed_list and return the record number for this blob  	long refId = AddToRecordList (objAreaId);  	return new LargeObject (this' refId' maxSize' 0' compressed' false);  } finally {  	store.Unlock ();  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,CreateNewObject,The following statement contains a magic number: try {  	store.Lock ();  	// Allocate the area (plus header area) for storing the blob pages  	long pageCount = ((maxSize - 1) / (PageSize * 1024)) + 1;  	IArea objArea = store.CreateArea ((pageCount * 8) + 32);  	long objAreaId = objArea.Id;  	var type = 2;  	// Binary Type  	if (compressed)  		type |= CompressedFlag;  	// Set up the area header  	objArea.WriteInt4 (0);  	// Reserved for future  	objArea.WriteInt4 (type);  	objArea.WriteInt8 (maxSize);  	objArea.WriteInt8 (0);  	objArea.WriteInt8 (pageCount);  	// Initialize the empty blob area  	for (long i = 0; i < pageCount; ++i) {  		objArea.WriteInt8 (-1);  	}  	// And finish  	objArea.Flush ();  	// Update the fixed_list and return the record number for this blob  	long refId = AddToRecordList (objAreaId);  	return new LargeObject (this' refId' maxSize' 0' compressed' false);  } finally {  	store.Unlock ();  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,CreateNewObject,The following statement contains a magic number: try {  	store.Lock ();  	// Allocate the area (plus header area) for storing the blob pages  	long pageCount = ((maxSize - 1) / (PageSize * 1024)) + 1;  	IArea objArea = store.CreateArea ((pageCount * 8) + 32);  	long objAreaId = objArea.Id;  	var type = 2;  	// Binary Type  	if (compressed)  		type |= CompressedFlag;  	// Set up the area header  	objArea.WriteInt4 (0);  	// Reserved for future  	objArea.WriteInt4 (type);  	objArea.WriteInt8 (maxSize);  	objArea.WriteInt8 (0);  	objArea.WriteInt8 (pageCount);  	// Initialize the empty blob area  	for (long i = 0; i < pageCount; ++i) {  		objArea.WriteInt8 (-1);  	}  	// And finish  	objArea.Flush ();  	// Update the fixed_list and return the record number for this blob  	long refId = AddToRecordList (objAreaId);  	return new LargeObject (this' refId' maxSize' 0' compressed' false);  } finally {  	store.Unlock ();  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: if (objOffset % (PageSize * 1024) != 0)  	throw new Exception ("Assert failed: offset is not 64k aligned.");  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: if (length > (PageSize * 1024)) {  	throw new Exception ("Assert failed: length is greater than 64K.");  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: area.Position = (int)((pageNumber * 8) + 32);  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: area.Position = (int)((pageNumber * 8) + 32);  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: if ((type & CompressedFlag) != 0) {  	// Yes' compression  	#if !PCL  	using (var input = new MemoryStream (buffer' off' length)) {  		using (var output = new MemoryStream (PageSize * 1024)) {  			using (var deflateStream = new DeflateStream (output' CompressionMode.Compress' false)) {  				input.CopyTo (deflateStream);  				deflateStream.Flush ();  				deflateStream.Close ();  				toWrite = output.ToArray ();  				writeLength = toWrite.Length;  			}  		}  	}  	#else  					throw new NotSupportedException("Compression not supported in PCL."); #endif  } else {  	// No compression  	toWrite = buffer;  	writeLength = length;  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: using (var input = new MemoryStream (buffer' off' length)) {  	using (var output = new MemoryStream (PageSize * 1024)) {  		using (var deflateStream = new DeflateStream (output' CompressionMode.Compress' false)) {  			input.CopyTo (deflateStream);  			deflateStream.Flush ();  			deflateStream.Close ();  			toWrite = output.ToArray ();  			writeLength = toWrite.Length;  		}  	}  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: using (var output = new MemoryStream (PageSize * 1024)) {  	using (var deflateStream = new DeflateStream (output' CompressionMode.Compress' false)) {  		input.CopyTo (deflateStream);  		deflateStream.Flush ();  		deflateStream.Close ();  		toWrite = output.ToArray ();  		writeLength = toWrite.Length;  	}  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: try {  	store.Lock ();  	// Allocate and Write the page.  	IArea pageArea = store.CreateArea (writeLength + 8);  	pagePos = pageArea.Id;  	pageArea.WriteInt4 (1);  	pageArea.WriteInt4 (writeLength);  	pageArea.Write (toWrite' 0' writeLength);  	// Finish this page  	pageArea.Flush ();  	// Update the page in the header.  	area.Position = (int)((pageNumber * 8) + 24);  	area.WriteInt8 (currentSize + writeLength);  	area.WriteInt8 (pagePos);  	// Check out this change.  	area.Flush ();  } finally {  	store.Unlock ();  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: try {  	store.Lock ();  	// Allocate and Write the page.  	IArea pageArea = store.CreateArea (writeLength + 8);  	pagePos = pageArea.Id;  	pageArea.WriteInt4 (1);  	pageArea.WriteInt4 (writeLength);  	pageArea.Write (toWrite' 0' writeLength);  	// Finish this page  	pageArea.Flush ();  	// Update the page in the header.  	area.Position = (int)((pageNumber * 8) + 24);  	area.WriteInt8 (currentSize + writeLength);  	area.WriteInt8 (pagePos);  	// Check out this change.  	area.Flush ();  } finally {  	store.Unlock ();  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: try {  	store.Lock ();  	// Allocate and Write the page.  	IArea pageArea = store.CreateArea (writeLength + 8);  	pagePos = pageArea.Id;  	pageArea.WriteInt4 (1);  	pageArea.WriteInt4 (writeLength);  	pageArea.Write (toWrite' 0' writeLength);  	// Finish this page  	pageArea.Flush ();  	// Update the page in the header.  	area.Position = (int)((pageNumber * 8) + 24);  	area.WriteInt8 (currentSize + writeLength);  	area.WriteInt8 (pagePos);  	// Check out this change.  	area.Flush ();  } finally {  	store.Unlock ();  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: area.Position = (int)((pageNumber * 8) + 24);  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,WriteObjectPart,The following statement contains a magic number: area.Position = (int)((pageNumber * 8) + 24);  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,The following statement contains a magic number: if (off % (64 * 1024) != 0) {  	throw new Exception ("Assert failed: offset is not 64k aligned.");  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,The following statement contains a magic number: if (off % (64 * 1024) != 0) {  	throw new Exception ("Assert failed: offset is not 64k aligned.");  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,The following statement contains a magic number: if (length > (64 * 1024)) {  	throw new Exception ("Assert failed: length is greater than 64K.");  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,The following statement contains a magic number: if (length > (64 * 1024)) {  	throw new Exception ("Assert failed: length is greater than 64K.");  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,The following statement contains a magic number: area.Position = (int)((pageNumber * 8) + 32);  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReadObjectPart,The following statement contains a magic number: area.Position = (int)((pageNumber * 8) + 32);  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,EstablishReference,The following statement contains a magic number: try {  	lock (fixedList) {  		// Update the record in the fixed list.  		IArea block = fixedList.GetRecord (id);  		var recordPos = block.Position;  		int status = block.ReadInt4 ();  		if (status != 1)  			throw new Exception ("Assertion failed: record is not static.");  		int refCount = block.ReadInt4 ();  		// Set the fixed blob record as complete.  		block.Position = recordPos + 4;  		block.WriteInt4 (refCount + 1);  		block.Flush ();  	}  } catch (IOException e) {  	throw new Exception ("IO Error: " + e.Message);  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,EstablishReference,The following statement contains a magic number: lock (fixedList) {  	// Update the record in the fixed list.  	IArea block = fixedList.GetRecord (id);  	var recordPos = block.Position;  	int status = block.ReadInt4 ();  	if (status != 1)  		throw new Exception ("Assertion failed: record is not static.");  	int refCount = block.ReadInt4 ();  	// Set the fixed blob record as complete.  	block.Position = recordPos + 4;  	block.WriteInt4 (refCount + 1);  	block.Flush ();  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,EstablishReference,The following statement contains a magic number: block.Position = recordPos + 4;  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReleaseReference,The following statement contains a magic number: try {  	lock (fixedList) {  		// Update the record in the fixed list.  		IArea block = fixedList.GetRecord (id);  		var recordPos = block.Position;  		int status = block.ReadInt4 ();  		if (status != 1)  			throw new Exception ("Assertion failed: Record is not static (status = " + status + ")");  		int refCount = block.ReadInt4 ();  		if (refCount == 0)  			throw new Exception ("Releasing when IBlob reference counter is at 0.");  		var objSize = block.ReadInt8 ();  		var objFinalSize = block.ReadInt8 ();  		var objPos = block.ReadInt8 ();  		// If reference count == 0 then we need to free all the resources  		// associated with this object in the store.  		if ((refCount - 1) == 0) {  			// Free the resources associated with this object.  			IArea area = store.GetArea (objPos);  			area.ReadInt4 ();  			var type = (byte)area.ReadInt4 ();  			var totalSize = area.ReadInt8 ();  			var pageCount = area.ReadInt8 ();  			// Free all of the pages in this blob.  			for (long i = 0; i < pageCount; ++i) {  				long pageOffset = area.ReadInt8 ();  				if (pageOffset > 0)  					store.DeleteArea (pageOffset);  			}  			// Free the blob area object itself.  			store.DeleteArea (objPos);  			// Write out the blank record.  			block.Position = recordPos;  			block.WriteInt4 (DeletedFlag);  			block.WriteInt4 (0);  			block.WriteInt8 (-1);  			block.WriteInt8 (firstDeleteChainRecord);  			// CHeck out these changes  			block.Flush ();  			firstDeleteChainRecord = id;  			// Update the first_delete_chain_record field in the header  			fixedList.WriteDeleteHead (firstDeleteChainRecord);  			return true;  		}  		// Simply decrement the reference counter for this record.  		block.Position = recordPos + 4;  		// Write the reference count - 1  		block.WriteInt4 (refCount - 1);  		// Check out this change  		block.Flush ();  		return false;  	}  } catch (IOException e) {  	throw new Exception ("IO Error: " + e.Message);  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReleaseReference,The following statement contains a magic number: lock (fixedList) {  	// Update the record in the fixed list.  	IArea block = fixedList.GetRecord (id);  	var recordPos = block.Position;  	int status = block.ReadInt4 ();  	if (status != 1)  		throw new Exception ("Assertion failed: Record is not static (status = " + status + ")");  	int refCount = block.ReadInt4 ();  	if (refCount == 0)  		throw new Exception ("Releasing when IBlob reference counter is at 0.");  	var objSize = block.ReadInt8 ();  	var objFinalSize = block.ReadInt8 ();  	var objPos = block.ReadInt8 ();  	// If reference count == 0 then we need to free all the resources  	// associated with this object in the store.  	if ((refCount - 1) == 0) {  		// Free the resources associated with this object.  		IArea area = store.GetArea (objPos);  		area.ReadInt4 ();  		var type = (byte)area.ReadInt4 ();  		var totalSize = area.ReadInt8 ();  		var pageCount = area.ReadInt8 ();  		// Free all of the pages in this blob.  		for (long i = 0; i < pageCount; ++i) {  			long pageOffset = area.ReadInt8 ();  			if (pageOffset > 0)  				store.DeleteArea (pageOffset);  		}  		// Free the blob area object itself.  		store.DeleteArea (objPos);  		// Write out the blank record.  		block.Position = recordPos;  		block.WriteInt4 (DeletedFlag);  		block.WriteInt4 (0);  		block.WriteInt8 (-1);  		block.WriteInt8 (firstDeleteChainRecord);  		// CHeck out these changes  		block.Flush ();  		firstDeleteChainRecord = id;  		// Update the first_delete_chain_record field in the header  		fixedList.WriteDeleteHead (firstDeleteChainRecord);  		return true;  	}  	// Simply decrement the reference counter for this record.  	block.Position = recordPos + 4;  	// Write the reference count - 1  	block.WriteInt4 (refCount - 1);  	// Check out this change  	block.Flush ();  	return false;  }  
Magic Number,Deveel.Data.Store,ObjectStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStore.cs,ReleaseReference,The following statement contains a magic number: block.Position = recordPos + 4;  
Magic Number,Deveel.Data.Store,ObjectStream,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStream.cs,ObjectStream,The following statement contains a magic number: outTempStream = new MemoryStream (64 * 1024);  
Magic Number,Deveel.Data.Store,ObjectStream,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ObjectStream.cs,ObjectStream,The following statement contains a magic number: outTempStream = new MemoryStream (64 * 1024);  
Magic Number,Deveel.Data.Store,ScatteringFileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ScatteringFileStoreData.cs,SliceFileName,The following statement contains a magic number: if (i < 10) {  	fn.Append ("00");  } else if (i < 100) {  	fn.Append ("0");  }  
Magic Number,Deveel.Data.Store,ScatteringFileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ScatteringFileStoreData.cs,SliceFileName,The following statement contains a magic number: if (i < 10) {  	fn.Append ("00");  } else if (i < 100) {  	fn.Append ("0");  }  
Magic Number,Deveel.Data.Store,ScatteringFileStoreData,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\ScatteringFileStoreData.cs,SliceFileName,The following statement contains a magic number: if (i < 100) {  	fn.Append ("0");  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReadBins,The following statement contains a magic number: Read (BinAreaOffset' binArea' 0' 128 * 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReadBins,The following statement contains a magic number: Read (BinAreaOffset' binArea' 0' 128 * 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReadBins,The following statement contains a magic number: using (var bin = new MemoryStream (binArea)) {  	using (BinaryReader input = new BinaryReader (bin)) {  		for (int i = 0; i < 128; ++i) {  			freeBinList [i] = input.ReadInt64 ();  		}  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReadBins,The following statement contains a magic number: using (BinaryReader input = new BinaryReader (bin)) {  	for (int i = 0; i < 128; ++i) {  		freeBinList [i] = input.ReadInt64 ();  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReadBins,The following statement contains a magic number: for (int i = 0; i < 128; ++i) {  	freeBinList [i] = input.ReadInt64 ();  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,WriteBinIndex,The following statement contains a magic number: Write (BinAreaOffset + p' binArea' p' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,AddToBinChain,The following statement contains a magic number: if (curOffset == -1) {  	// If the bin chain has no elements'  	headerInfo [0] = (size | DeletedFlag);  	headerInfo [1] = -1;  	ReboundArea (pointer' headerInfo' true);  	freeBinList [binChainIndex] = pointer;  	WriteBinIndex (binChainIndex);  } else {  	bool inserted = false;  	long lastOffset = -1;  	int searches = 0;  	while (curOffset != -1 && inserted == false) {  		// Get the current offset  		ReadAreaHeader (curOffset' headerInfo);  		long header = headerInfo [0];  		long next = headerInfo [1];  		// Assert - the header must have deleted flag  		if ((header & DeletedFlag) == 0)  			throw new IOException ("Area not marked as deleted.");  		long areaSize = header ^ DeletedFlag;  		if (areaSize >= size || searches >= 12) {  			// Insert if the area size is >= than the size we are adding.  			// Set the previous header to point to this  			long previous = lastOffset;  			// Set up the deleted area  			headerInfo [0] = (size | DeletedFlag);  			headerInfo [1] = curOffset;  			ReboundArea (pointer' headerInfo' true);  			if (lastOffset != -1) {  				// Set the previous input the chain to point to the deleted area  				ReadAreaHeader (previous' headerInfo);  				headerInfo [1] = pointer;  				ReboundArea (previous' headerInfo' false);  			} else {  				// Otherwise set the head bin item  				freeBinList [binChainIndex] = pointer;  				WriteBinIndex (binChainIndex);  			}  			inserted = true;  		}  		lastOffset = curOffset;  		curOffset = next;  		++searches;  	}  	// If we reach the end and we haven't inserted'  	if (!inserted) {  		// Set the new deleted area.  		headerInfo [0] = (size | DeletedFlag);  		headerInfo [1] = -1;  		ReboundArea (pointer' headerInfo' true);  		// Set the previous entry to this  		ReadAreaHeader (lastOffset' headerInfo);  		headerInfo [1] = pointer;  		ReboundArea (lastOffset' headerInfo' false);  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,AddToBinChain,The following statement contains a magic number: while (curOffset != -1 && inserted == false) {  	// Get the current offset  	ReadAreaHeader (curOffset' headerInfo);  	long header = headerInfo [0];  	long next = headerInfo [1];  	// Assert - the header must have deleted flag  	if ((header & DeletedFlag) == 0)  		throw new IOException ("Area not marked as deleted.");  	long areaSize = header ^ DeletedFlag;  	if (areaSize >= size || searches >= 12) {  		// Insert if the area size is >= than the size we are adding.  		// Set the previous header to point to this  		long previous = lastOffset;  		// Set up the deleted area  		headerInfo [0] = (size | DeletedFlag);  		headerInfo [1] = curOffset;  		ReboundArea (pointer' headerInfo' true);  		if (lastOffset != -1) {  			// Set the previous input the chain to point to the deleted area  			ReadAreaHeader (previous' headerInfo);  			headerInfo [1] = pointer;  			ReboundArea (previous' headerInfo' false);  		} else {  			// Otherwise set the head bin item  			freeBinList [binChainIndex] = pointer;  			WriteBinIndex (binChainIndex);  		}  		inserted = true;  	}  	lastOffset = curOffset;  	curOffset = next;  	++searches;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,AddToBinChain,The following statement contains a magic number: if (areaSize >= size || searches >= 12) {  	// Insert if the area size is >= than the size we are adding.  	// Set the previous header to point to this  	long previous = lastOffset;  	// Set up the deleted area  	headerInfo [0] = (size | DeletedFlag);  	headerInfo [1] = curOffset;  	ReboundArea (pointer' headerInfo' true);  	if (lastOffset != -1) {  		// Set the previous input the chain to point to the deleted area  		ReadAreaHeader (previous' headerInfo);  		headerInfo [1] = pointer;  		ReboundArea (previous' headerInfo' false);  	} else {  		// Otherwise set the head bin item  		freeBinList [binChainIndex] = pointer;  		WriteBinIndex (binChainIndex);  	}  	inserted = true;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,RemoveFromBinChain,The following statement contains a magic number: while (offset != curOffset) {  	if (curOffset == -1)  		throw new IOException ("Area not found input bin chain.");  	// Move to the next input the chain  	var headerInfo = new long[2];  	ReadAreaHeader (curOffset' headerInfo);  	prevOffset = curOffset;  	curOffset = headerInfo [1];  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,RemoveFromBinChain,The following statement contains a magic number: if (prevOffset == -1) {  	var headerInfo = new long[2];  	ReadAreaHeader (offset' headerInfo);  	freeBinList [binChainIndex] = headerInfo [1];  	WriteBinIndex (binChainIndex);  } else {  	var headerInfo = new long[2];  	var headerInfo2 = new long[2];  	ReadAreaHeader (prevOffset' headerInfo2);  	ReadAreaHeader (offset' headerInfo);  	headerInfo2 [1] = headerInfo [1];  	ReboundArea (prevOffset' headerInfo2' false);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,RemoveFromBinChain,The following statement contains a magic number: if (prevOffset == -1) {  	var headerInfo = new long[2];  	ReadAreaHeader (offset' headerInfo);  	freeBinList [binChainIndex] = headerInfo [1];  	WriteBinIndex (binChainIndex);  } else {  	var headerInfo = new long[2];  	var headerInfo2 = new long[2];  	ReadAreaHeader (prevOffset' headerInfo2);  	ReadAreaHeader (offset' headerInfo);  	headerInfo2 [1] = headerInfo [1];  	ReboundArea (prevOffset' headerInfo2' false);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,RemoveFromBinChain,The following statement contains a magic number: if (prevOffset == -1) {  	var headerInfo = new long[2];  	ReadAreaHeader (offset' headerInfo);  	freeBinList [binChainIndex] = headerInfo [1];  	WriteBinIndex (binChainIndex);  } else {  	var headerInfo = new long[2];  	var headerInfo2 = new long[2];  	ReadAreaHeader (prevOffset' headerInfo2);  	ReadAreaHeader (offset' headerInfo);  	headerInfo2 [1] = headerInfo [1];  	ReboundArea (prevOffset' headerInfo2' false);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,GetPreviousAreaHeader,The following statement contains a magic number: Read (offset - 8' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,GetPreviousAreaHeader,The following statement contains a magic number: Read (offset - 8' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,GetPreviousAreaHeader,The following statement contains a magic number: Read (previousPointer' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,GetNextAreaHeader,The following statement contains a magic number: Read (offset' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,GetNextAreaHeader,The following statement contains a magic number: Read (nextOffset' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReadAreaHeader,The following statement contains a magic number: Read (offset' headerBuf' 0' 16);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReadAreaHeader,The following statement contains a magic number: header [1] = BytesUtil.ReadInt8 (headerBuf' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: if (writeHeaders) {  	BytesUtil.WriteInt8 (header [0]' headerBuf' 0);  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset' headerBuf' 0' 16);  } else {  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset + 8' headerBuf' 8' 8);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: if (writeHeaders) {  	BytesUtil.WriteInt8 (header [0]' headerBuf' 0);  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset' headerBuf' 0' 16);  } else {  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset + 8' headerBuf' 8' 8);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: if (writeHeaders) {  	BytesUtil.WriteInt8 (header [0]' headerBuf' 0);  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset' headerBuf' 0' 16);  } else {  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset + 8' headerBuf' 8' 8);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: if (writeHeaders) {  	BytesUtil.WriteInt8 (header [0]' headerBuf' 0);  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset' headerBuf' 0' 16);  } else {  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset + 8' headerBuf' 8' 8);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: if (writeHeaders) {  	BytesUtil.WriteInt8 (header [0]' headerBuf' 0);  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset' headerBuf' 0' 16);  } else {  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset + 8' headerBuf' 8' 8);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: if (writeHeaders) {  	BytesUtil.WriteInt8 (header [0]' headerBuf' 0);  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset' headerBuf' 0' 16);  } else {  	BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  	Write (offset + 8' headerBuf' 8' 8);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: Write (offset' headerBuf' 0' 16);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: BytesUtil.WriteInt8 (header [1]' headerBuf' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: Write (offset + 8' headerBuf' 8' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: Write (offset + 8' headerBuf' 8' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ReboundArea,The following statement contains a magic number: Write (offset + 8' headerBuf' 8' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,CoalesceArea,The following statement contains a magic number: Write (offset' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,CoalesceArea,The following statement contains a magic number: Write ((offset + size) - 8' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,CoalesceArea,The following statement contains a magic number: Write ((offset + size) - 8' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,CropArea,The following statement contains a magic number: if ((isWilderness && sizeDifference >= 32) || sizeDifference >= 512) {  	// Split the area into two areas.  	SplitArea (offset' allocatedSize);  	long leftOverPointer = offset + allocatedSize;  	// Add this area to the bin chain  	AddToBinChain (leftOverPointer' sizeDifference);  	// If offset is the wilderness area' set this as the new wilderness  	if (isWilderness || (leftOverPointer + sizeDifference) >= DataAreaEndOffset) {  		WildernessOffset = leftOverPointer;  	}  } else {  	// If offset is the wilderness area' set wilderness to -1  	if (isWilderness) {  		WildernessOffset = -1;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,CropArea,The following statement contains a magic number: if ((isWilderness && sizeDifference >= 32) || sizeDifference >= 512) {  	// Split the area into two areas.  	SplitArea (offset' allocatedSize);  	long leftOverPointer = offset + allocatedSize;  	// Add this area to the bin chain  	AddToBinChain (leftOverPointer' sizeDifference);  	// If offset is the wilderness area' set this as the new wilderness  	if (isWilderness || (leftOverPointer + sizeDifference) >= DataAreaEndOffset) {  		WildernessOffset = leftOverPointer;  	}  } else {  	// If offset is the wilderness area' set wilderness to -1  	if (isWilderness) {  		WildernessOffset = -1;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: size = size + 16;  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (size < 32)  	size = 32;  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (size < 32)  	size = 32;  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: size = 32;  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (d != 0)  	size = size + (8 - d);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: size = size + (8 - d);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: for (int i = binChainIndex; i < BinSizeEntries + 1 && foundBinIndex == -1; ++i) {  	long curOffset = freeBinList [i];  	if (curOffset != -1) {  		if (!first) {  			// Pick this..  			foundBinIndex = i;  			prevOffset = -1;  		} else {  			// Search this bin for the first that's big enough.  			// We only search the first 12 entries input the bin before giving up.  			long lastOffset = -1;  			int searches = 0;  			while (curOffset != -1 && foundBinIndex == -1 && searches < 12) {  				var headerInfo = new long[2];  				ReadAreaHeader (curOffset' headerInfo);  				long areaSize = (headerInfo [0] & ActiveFlag);  				// Is this area is greater or equal than the required size  				// and is not the wilderness area' pick it.  				if (curOffset != WildernessOffset && areaSize >= size) {  					foundBinIndex = i;  					prevOffset = lastOffset;  				}  				// Go to next input chain.  				lastOffset = curOffset;  				curOffset = headerInfo [1];  				++searches;  			}  		}  	}  	first = false;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: for (int i = binChainIndex; i < BinSizeEntries + 1 && foundBinIndex == -1; ++i) {  	long curOffset = freeBinList [i];  	if (curOffset != -1) {  		if (!first) {  			// Pick this..  			foundBinIndex = i;  			prevOffset = -1;  		} else {  			// Search this bin for the first that's big enough.  			// We only search the first 12 entries input the bin before giving up.  			long lastOffset = -1;  			int searches = 0;  			while (curOffset != -1 && foundBinIndex == -1 && searches < 12) {  				var headerInfo = new long[2];  				ReadAreaHeader (curOffset' headerInfo);  				long areaSize = (headerInfo [0] & ActiveFlag);  				// Is this area is greater or equal than the required size  				// and is not the wilderness area' pick it.  				if (curOffset != WildernessOffset && areaSize >= size) {  					foundBinIndex = i;  					prevOffset = lastOffset;  				}  				// Go to next input chain.  				lastOffset = curOffset;  				curOffset = headerInfo [1];  				++searches;  			}  		}  	}  	first = false;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (curOffset != -1) {  	if (!first) {  		// Pick this..  		foundBinIndex = i;  		prevOffset = -1;  	} else {  		// Search this bin for the first that's big enough.  		// We only search the first 12 entries input the bin before giving up.  		long lastOffset = -1;  		int searches = 0;  		while (curOffset != -1 && foundBinIndex == -1 && searches < 12) {  			var headerInfo = new long[2];  			ReadAreaHeader (curOffset' headerInfo);  			long areaSize = (headerInfo [0] & ActiveFlag);  			// Is this area is greater or equal than the required size  			// and is not the wilderness area' pick it.  			if (curOffset != WildernessOffset && areaSize >= size) {  				foundBinIndex = i;  				prevOffset = lastOffset;  			}  			// Go to next input chain.  			lastOffset = curOffset;  			curOffset = headerInfo [1];  			++searches;  		}  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (curOffset != -1) {  	if (!first) {  		// Pick this..  		foundBinIndex = i;  		prevOffset = -1;  	} else {  		// Search this bin for the first that's big enough.  		// We only search the first 12 entries input the bin before giving up.  		long lastOffset = -1;  		int searches = 0;  		while (curOffset != -1 && foundBinIndex == -1 && searches < 12) {  			var headerInfo = new long[2];  			ReadAreaHeader (curOffset' headerInfo);  			long areaSize = (headerInfo [0] & ActiveFlag);  			// Is this area is greater or equal than the required size  			// and is not the wilderness area' pick it.  			if (curOffset != WildernessOffset && areaSize >= size) {  				foundBinIndex = i;  				prevOffset = lastOffset;  			}  			// Go to next input chain.  			lastOffset = curOffset;  			curOffset = headerInfo [1];  			++searches;  		}  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (!first) {  	// Pick this..  	foundBinIndex = i;  	prevOffset = -1;  } else {  	// Search this bin for the first that's big enough.  	// We only search the first 12 entries input the bin before giving up.  	long lastOffset = -1;  	int searches = 0;  	while (curOffset != -1 && foundBinIndex == -1 && searches < 12) {  		var headerInfo = new long[2];  		ReadAreaHeader (curOffset' headerInfo);  		long areaSize = (headerInfo [0] & ActiveFlag);  		// Is this area is greater or equal than the required size  		// and is not the wilderness area' pick it.  		if (curOffset != WildernessOffset && areaSize >= size) {  			foundBinIndex = i;  			prevOffset = lastOffset;  		}  		// Go to next input chain.  		lastOffset = curOffset;  		curOffset = headerInfo [1];  		++searches;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (!first) {  	// Pick this..  	foundBinIndex = i;  	prevOffset = -1;  } else {  	// Search this bin for the first that's big enough.  	// We only search the first 12 entries input the bin before giving up.  	long lastOffset = -1;  	int searches = 0;  	while (curOffset != -1 && foundBinIndex == -1 && searches < 12) {  		var headerInfo = new long[2];  		ReadAreaHeader (curOffset' headerInfo);  		long areaSize = (headerInfo [0] & ActiveFlag);  		// Is this area is greater or equal than the required size  		// and is not the wilderness area' pick it.  		if (curOffset != WildernessOffset && areaSize >= size) {  			foundBinIndex = i;  			prevOffset = lastOffset;  		}  		// Go to next input chain.  		lastOffset = curOffset;  		curOffset = headerInfo [1];  		++searches;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: while (curOffset != -1 && foundBinIndex == -1 && searches < 12) {  	var headerInfo = new long[2];  	ReadAreaHeader (curOffset' headerInfo);  	long areaSize = (headerInfo [0] & ActiveFlag);  	// Is this area is greater or equal than the required size  	// and is not the wilderness area' pick it.  	if (curOffset != WildernessOffset && areaSize >= size) {  		foundBinIndex = i;  		prevOffset = lastOffset;  	}  	// Go to next input chain.  	lastOffset = curOffset;  	curOffset = headerInfo [1];  	++searches;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: while (curOffset != -1 && foundBinIndex == -1 && searches < 12) {  	var headerInfo = new long[2];  	ReadAreaHeader (curOffset' headerInfo);  	long areaSize = (headerInfo [0] & ActiveFlag);  	// Is this area is greater or equal than the required size  	// and is not the wilderness area' pick it.  	if (curOffset != WildernessOffset && areaSize >= size) {  		foundBinIndex = i;  		prevOffset = lastOffset;  	}  	// Go to next input chain.  	lastOffset = curOffset;  	curOffset = headerInfo [1];  	++searches;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (foundBinIndex == -1) {  	// Allocate a new area of the given size.  	// If there is a wilderness' grow the wilderness area to the new size'  	long workingOffset;  	long sizeToGrow;  	long currentAreaSize;  	if (WildernessOffset != -1) {  		workingOffset = WildernessOffset;  		var headerInfo = new long[2];  		ReadAreaHeader (WildernessOffset' headerInfo);  		long wildernessSize = (headerInfo [0] & ActiveFlag);  		// Remove this from the bins  		RemoveFromBinChain (workingOffset' wildernessSize);  		// For safety' we set wilderness_pointer to -1  		WildernessOffset = -1;  		sizeToGrow = size - wildernessSize;  		currentAreaSize = wildernessSize;  	} else {  		// wilderness_pointer == -1 so add to the end of the data area.  		workingOffset = DataAreaEndOffset;  		sizeToGrow = size;  		currentAreaSize = 0;  	}  	long expandedSize = 0;  	if (sizeToGrow > 0) {  		// Expand the data area to the new size.  		expandedSize = ExpandDataArea (sizeToGrow);  	}  	// Coalesce the new area to the given size  	CoalesceArea (workingOffset' currentAreaSize + expandedSize);  	// crop the area  	CropArea (workingOffset' size);  	// Add to the total allocated space  	totalAllocatedSpace += realAllocSize;  	return workingOffset;  } else {  	// An area is taken from the bins'  	long freeAreaOffset;  	var headerInfo = new long[2];  	// Remove this area from the bin chain and possibly add any excess space  	// left over to a new bin.  	if (prevOffset == -1) {  		freeAreaOffset = freeBinList [foundBinIndex];  		ReadAreaHeader (freeAreaOffset' headerInfo);  		freeBinList [foundBinIndex] = headerInfo [1];  		WriteBinIndex (foundBinIndex);  	} else {  		var headerInfo2 = new long[2];  		ReadAreaHeader (prevOffset' headerInfo2);  		freeAreaOffset = headerInfo2 [1];  		ReadAreaHeader (freeAreaOffset' headerInfo);  		headerInfo2 [1] = headerInfo [1];  		ReboundArea (prevOffset' headerInfo2' false);  	}  	// Reset the header of the recycled area.  	headerInfo [0] = (headerInfo [0] & ActiveFlag);  	ReboundArea (freeAreaOffset' headerInfo' true);  	// Crop the area to the given size.  	CropArea (freeAreaOffset' size);  	// Add to the total allocated space  	totalAllocatedSpace += realAllocSize;  	return freeAreaOffset;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (foundBinIndex == -1) {  	// Allocate a new area of the given size.  	// If there is a wilderness' grow the wilderness area to the new size'  	long workingOffset;  	long sizeToGrow;  	long currentAreaSize;  	if (WildernessOffset != -1) {  		workingOffset = WildernessOffset;  		var headerInfo = new long[2];  		ReadAreaHeader (WildernessOffset' headerInfo);  		long wildernessSize = (headerInfo [0] & ActiveFlag);  		// Remove this from the bins  		RemoveFromBinChain (workingOffset' wildernessSize);  		// For safety' we set wilderness_pointer to -1  		WildernessOffset = -1;  		sizeToGrow = size - wildernessSize;  		currentAreaSize = wildernessSize;  	} else {  		// wilderness_pointer == -1 so add to the end of the data area.  		workingOffset = DataAreaEndOffset;  		sizeToGrow = size;  		currentAreaSize = 0;  	}  	long expandedSize = 0;  	if (sizeToGrow > 0) {  		// Expand the data area to the new size.  		expandedSize = ExpandDataArea (sizeToGrow);  	}  	// Coalesce the new area to the given size  	CoalesceArea (workingOffset' currentAreaSize + expandedSize);  	// crop the area  	CropArea (workingOffset' size);  	// Add to the total allocated space  	totalAllocatedSpace += realAllocSize;  	return workingOffset;  } else {  	// An area is taken from the bins'  	long freeAreaOffset;  	var headerInfo = new long[2];  	// Remove this area from the bin chain and possibly add any excess space  	// left over to a new bin.  	if (prevOffset == -1) {  		freeAreaOffset = freeBinList [foundBinIndex];  		ReadAreaHeader (freeAreaOffset' headerInfo);  		freeBinList [foundBinIndex] = headerInfo [1];  		WriteBinIndex (foundBinIndex);  	} else {  		var headerInfo2 = new long[2];  		ReadAreaHeader (prevOffset' headerInfo2);  		freeAreaOffset = headerInfo2 [1];  		ReadAreaHeader (freeAreaOffset' headerInfo);  		headerInfo2 [1] = headerInfo [1];  		ReboundArea (prevOffset' headerInfo2' false);  	}  	// Reset the header of the recycled area.  	headerInfo [0] = (headerInfo [0] & ActiveFlag);  	ReboundArea (freeAreaOffset' headerInfo' true);  	// Crop the area to the given size.  	CropArea (freeAreaOffset' size);  	// Add to the total allocated space  	totalAllocatedSpace += realAllocSize;  	return freeAreaOffset;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (foundBinIndex == -1) {  	// Allocate a new area of the given size.  	// If there is a wilderness' grow the wilderness area to the new size'  	long workingOffset;  	long sizeToGrow;  	long currentAreaSize;  	if (WildernessOffset != -1) {  		workingOffset = WildernessOffset;  		var headerInfo = new long[2];  		ReadAreaHeader (WildernessOffset' headerInfo);  		long wildernessSize = (headerInfo [0] & ActiveFlag);  		// Remove this from the bins  		RemoveFromBinChain (workingOffset' wildernessSize);  		// For safety' we set wilderness_pointer to -1  		WildernessOffset = -1;  		sizeToGrow = size - wildernessSize;  		currentAreaSize = wildernessSize;  	} else {  		// wilderness_pointer == -1 so add to the end of the data area.  		workingOffset = DataAreaEndOffset;  		sizeToGrow = size;  		currentAreaSize = 0;  	}  	long expandedSize = 0;  	if (sizeToGrow > 0) {  		// Expand the data area to the new size.  		expandedSize = ExpandDataArea (sizeToGrow);  	}  	// Coalesce the new area to the given size  	CoalesceArea (workingOffset' currentAreaSize + expandedSize);  	// crop the area  	CropArea (workingOffset' size);  	// Add to the total allocated space  	totalAllocatedSpace += realAllocSize;  	return workingOffset;  } else {  	// An area is taken from the bins'  	long freeAreaOffset;  	var headerInfo = new long[2];  	// Remove this area from the bin chain and possibly add any excess space  	// left over to a new bin.  	if (prevOffset == -1) {  		freeAreaOffset = freeBinList [foundBinIndex];  		ReadAreaHeader (freeAreaOffset' headerInfo);  		freeBinList [foundBinIndex] = headerInfo [1];  		WriteBinIndex (foundBinIndex);  	} else {  		var headerInfo2 = new long[2];  		ReadAreaHeader (prevOffset' headerInfo2);  		freeAreaOffset = headerInfo2 [1];  		ReadAreaHeader (freeAreaOffset' headerInfo);  		headerInfo2 [1] = headerInfo [1];  		ReboundArea (prevOffset' headerInfo2' false);  	}  	// Reset the header of the recycled area.  	headerInfo [0] = (headerInfo [0] & ActiveFlag);  	ReboundArea (freeAreaOffset' headerInfo' true);  	// Crop the area to the given size.  	CropArea (freeAreaOffset' size);  	// Add to the total allocated space  	totalAllocatedSpace += realAllocSize;  	return freeAreaOffset;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (WildernessOffset != -1) {  	workingOffset = WildernessOffset;  	var headerInfo = new long[2];  	ReadAreaHeader (WildernessOffset' headerInfo);  	long wildernessSize = (headerInfo [0] & ActiveFlag);  	// Remove this from the bins  	RemoveFromBinChain (workingOffset' wildernessSize);  	// For safety' we set wilderness_pointer to -1  	WildernessOffset = -1;  	sizeToGrow = size - wildernessSize;  	currentAreaSize = wildernessSize;  } else {  	// wilderness_pointer == -1 so add to the end of the data area.  	workingOffset = DataAreaEndOffset;  	sizeToGrow = size;  	currentAreaSize = 0;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Alloc,The following statement contains a magic number: if (prevOffset == -1) {  	freeAreaOffset = freeBinList [foundBinIndex];  	ReadAreaHeader (freeAreaOffset' headerInfo);  	freeBinList [foundBinIndex] = headerInfo [1];  	WriteBinIndex (foundBinIndex);  } else {  	var headerInfo2 = new long[2];  	ReadAreaHeader (prevOffset' headerInfo2);  	freeAreaOffset = headerInfo2 [1];  	ReadAreaHeader (freeAreaOffset' headerInfo);  	headerInfo2 [1] = headerInfo [1];  	ReboundArea (prevOffset' headerInfo2' false);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ExpandDataArea,The following statement contains a magic number: if (d != 0)  	overGrow = overGrow + (8 - d);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ExpandDataArea,The following statement contains a magic number: overGrow = overGrow + (8 - d);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ExpandDataArea,The following statement contains a magic number: if (overGrow < 1024)  	overGrow = 1024;  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ExpandDataArea,The following statement contains a magic number: if (overGrow < 1024)  	overGrow = 1024;  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,ExpandDataArea,The following statement contains a magic number: overGrow = 1024;  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,SplitArea,The following statement contains a magic number: Read (offset' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,SplitArea,The following statement contains a magic number: BytesUtil.WriteInt8 (rightSize' headerBuf' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,SplitArea,The following statement contains a magic number: Write ((offset + newBoundary) - 8' headerBuf' 0' 16);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,SplitArea,The following statement contains a magic number: Write ((offset + newBoundary) - 8' headerBuf' 0' 16);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,SplitArea,The following statement contains a magic number: Write (offset' headerBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,SplitArea,The following statement contains a magic number: Write ((offset + curSize) - 8' headerBuf' 8' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,SplitArea,The following statement contains a magic number: Write ((offset + curSize) - 8' headerBuf' 8' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,SplitArea,The following statement contains a magic number: Write ((offset + curSize) - 8' headerBuf' 8' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,IsValidBoundarySize,The following statement contains a magic number: return ((size < maxAreaSize) && (size >= 24) && ((size & 0x07) == 0));  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Init,The following statement contains a magic number: lock (this) {  	SetDataAreaSize (DataAreaOffset);  	using (var stream = new MemoryStream ((int)BinAreaOffset)) {  		using (BinaryWriter writer = new BinaryWriter (stream' Encoding.Unicode)) {  			// The file MAGIC  			writer.Write (Magic);  			// 0  			// The file version  			writer.Write (1);  			// 4  			// The number of areas (chunks) input the file (currently unused)  			writer.Write (-1L);  			// 8  			// File open/close status byte  			writer.Write ((byte)0);  			// 16  			writer.Flush ();  			byte[] buffer = new byte[(int)DataAreaOffset];  			byte[] temp = stream.ToArray ();  			Array.Copy (temp' 0' buffer' 0' temp.Length);  			for (int i = (int)BinAreaOffset; i < (int)DataAreaOffset; ++i) {  				buffer [i] = 255;  			}  			Write (0' buffer' 0' buffer.Length);  		}  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Init,The following statement contains a magic number: using (var stream = new MemoryStream ((int)BinAreaOffset)) {  	using (BinaryWriter writer = new BinaryWriter (stream' Encoding.Unicode)) {  		// The file MAGIC  		writer.Write (Magic);  		// 0  		// The file version  		writer.Write (1);  		// 4  		// The number of areas (chunks) input the file (currently unused)  		writer.Write (-1L);  		// 8  		// File open/close status byte  		writer.Write ((byte)0);  		// 16  		writer.Flush ();  		byte[] buffer = new byte[(int)DataAreaOffset];  		byte[] temp = stream.ToArray ();  		Array.Copy (temp' 0' buffer' 0' temp.Length);  		for (int i = (int)BinAreaOffset; i < (int)DataAreaOffset; ++i) {  			buffer [i] = 255;  		}  		Write (0' buffer' 0' buffer.Length);  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Init,The following statement contains a magic number: using (BinaryWriter writer = new BinaryWriter (stream' Encoding.Unicode)) {  	// The file MAGIC  	writer.Write (Magic);  	// 0  	// The file version  	writer.Write (1);  	// 4  	// The number of areas (chunks) input the file (currently unused)  	writer.Write (-1L);  	// 8  	// File open/close status byte  	writer.Write ((byte)0);  	// 16  	writer.Flush ();  	byte[] buffer = new byte[(int)DataAreaOffset];  	byte[] temp = stream.ToArray ();  	Array.Copy (temp' 0' buffer' 0' temp.Length);  	for (int i = (int)BinAreaOffset; i < (int)DataAreaOffset; ++i) {  		buffer [i] = 255;  	}  	Write (0' buffer' 0' buffer.Length);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Init,The following statement contains a magic number: for (int i = (int)BinAreaOffset; i < (int)DataAreaOffset; ++i) {  	buffer [i] = 255;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Init,The following statement contains a magic number: buffer [i] = 255;  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: lock (this) {  	OpenStore (IsReadOnly);  	// If it's small' initialize to empty  	if (DataAreaEndOffset < DataAreaOffset)  		Init ();  	byte[] readBuf = new byte[(int)BinAreaOffset];  	Read (0' readBuf' 0' readBuf.Length);  	using (var stream = new MemoryStream (readBuf)) {  		using (var reader = new BinaryReader (stream)) {  			int magic = reader.ReadInt32 ();  			if (magic != Magic)  				throw new IOException ("Format invalid: Magic value is not as expected.");  			int version = reader.ReadInt32 ();  			if (version != 1)  				throw new IOException ("Format invalid: unrecognized version.");  			reader.ReadInt64 ();  			// ignore  			byte status = reader.ReadByte ();  			ClosedClean = true;  			if (status == 1) {  				// This means the store wasn't closed cleanly.  				ClosedClean = false;  			}  		}  	}  	// Read the bins  	ReadBins ();  	// Mark the file as open  	if (!IsReadOnly)  		Write (16' 1);  	long fileLength = DataAreaEndOffset;  	if (fileLength <= 8) {  		throw new IOException ("Format invalid: File size is too small.");  	}  	// Set the wilderness offset.  	if (fileLength == DataAreaOffset) {  		WildernessOffset = -1;  	} else {  		Read (fileLength - 8' readBuf' 0' 8);  		long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  		long lastAreaPointer = fileLength - lastBoundary;  		if (lastAreaPointer < DataAreaOffset)  			throw new IOException ("File corrupt: last area offset is before data part of file.");  		if (lastAreaPointer > fileLength - 8)  			throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  		Read (lastAreaPointer' readBuf' 0' 8);  		long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  		// If this is a freed block' then set this are the wilderness offset.  		if ((lastAreaHeader & DeletedFlag) != 0) {  			WildernessOffset = lastAreaPointer;  		} else {  			WildernessOffset = -1;  		}  	}  	IsClosed = false;  	return ClosedClean;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: lock (this) {  	OpenStore (IsReadOnly);  	// If it's small' initialize to empty  	if (DataAreaEndOffset < DataAreaOffset)  		Init ();  	byte[] readBuf = new byte[(int)BinAreaOffset];  	Read (0' readBuf' 0' readBuf.Length);  	using (var stream = new MemoryStream (readBuf)) {  		using (var reader = new BinaryReader (stream)) {  			int magic = reader.ReadInt32 ();  			if (magic != Magic)  				throw new IOException ("Format invalid: Magic value is not as expected.");  			int version = reader.ReadInt32 ();  			if (version != 1)  				throw new IOException ("Format invalid: unrecognized version.");  			reader.ReadInt64 ();  			// ignore  			byte status = reader.ReadByte ();  			ClosedClean = true;  			if (status == 1) {  				// This means the store wasn't closed cleanly.  				ClosedClean = false;  			}  		}  	}  	// Read the bins  	ReadBins ();  	// Mark the file as open  	if (!IsReadOnly)  		Write (16' 1);  	long fileLength = DataAreaEndOffset;  	if (fileLength <= 8) {  		throw new IOException ("Format invalid: File size is too small.");  	}  	// Set the wilderness offset.  	if (fileLength == DataAreaOffset) {  		WildernessOffset = -1;  	} else {  		Read (fileLength - 8' readBuf' 0' 8);  		long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  		long lastAreaPointer = fileLength - lastBoundary;  		if (lastAreaPointer < DataAreaOffset)  			throw new IOException ("File corrupt: last area offset is before data part of file.");  		if (lastAreaPointer > fileLength - 8)  			throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  		Read (lastAreaPointer' readBuf' 0' 8);  		long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  		// If this is a freed block' then set this are the wilderness offset.  		if ((lastAreaHeader & DeletedFlag) != 0) {  			WildernessOffset = lastAreaPointer;  		} else {  			WildernessOffset = -1;  		}  	}  	IsClosed = false;  	return ClosedClean;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: lock (this) {  	OpenStore (IsReadOnly);  	// If it's small' initialize to empty  	if (DataAreaEndOffset < DataAreaOffset)  		Init ();  	byte[] readBuf = new byte[(int)BinAreaOffset];  	Read (0' readBuf' 0' readBuf.Length);  	using (var stream = new MemoryStream (readBuf)) {  		using (var reader = new BinaryReader (stream)) {  			int magic = reader.ReadInt32 ();  			if (magic != Magic)  				throw new IOException ("Format invalid: Magic value is not as expected.");  			int version = reader.ReadInt32 ();  			if (version != 1)  				throw new IOException ("Format invalid: unrecognized version.");  			reader.ReadInt64 ();  			// ignore  			byte status = reader.ReadByte ();  			ClosedClean = true;  			if (status == 1) {  				// This means the store wasn't closed cleanly.  				ClosedClean = false;  			}  		}  	}  	// Read the bins  	ReadBins ();  	// Mark the file as open  	if (!IsReadOnly)  		Write (16' 1);  	long fileLength = DataAreaEndOffset;  	if (fileLength <= 8) {  		throw new IOException ("Format invalid: File size is too small.");  	}  	// Set the wilderness offset.  	if (fileLength == DataAreaOffset) {  		WildernessOffset = -1;  	} else {  		Read (fileLength - 8' readBuf' 0' 8);  		long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  		long lastAreaPointer = fileLength - lastBoundary;  		if (lastAreaPointer < DataAreaOffset)  			throw new IOException ("File corrupt: last area offset is before data part of file.");  		if (lastAreaPointer > fileLength - 8)  			throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  		Read (lastAreaPointer' readBuf' 0' 8);  		long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  		// If this is a freed block' then set this are the wilderness offset.  		if ((lastAreaHeader & DeletedFlag) != 0) {  			WildernessOffset = lastAreaPointer;  		} else {  			WildernessOffset = -1;  		}  	}  	IsClosed = false;  	return ClosedClean;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: lock (this) {  	OpenStore (IsReadOnly);  	// If it's small' initialize to empty  	if (DataAreaEndOffset < DataAreaOffset)  		Init ();  	byte[] readBuf = new byte[(int)BinAreaOffset];  	Read (0' readBuf' 0' readBuf.Length);  	using (var stream = new MemoryStream (readBuf)) {  		using (var reader = new BinaryReader (stream)) {  			int magic = reader.ReadInt32 ();  			if (magic != Magic)  				throw new IOException ("Format invalid: Magic value is not as expected.");  			int version = reader.ReadInt32 ();  			if (version != 1)  				throw new IOException ("Format invalid: unrecognized version.");  			reader.ReadInt64 ();  			// ignore  			byte status = reader.ReadByte ();  			ClosedClean = true;  			if (status == 1) {  				// This means the store wasn't closed cleanly.  				ClosedClean = false;  			}  		}  	}  	// Read the bins  	ReadBins ();  	// Mark the file as open  	if (!IsReadOnly)  		Write (16' 1);  	long fileLength = DataAreaEndOffset;  	if (fileLength <= 8) {  		throw new IOException ("Format invalid: File size is too small.");  	}  	// Set the wilderness offset.  	if (fileLength == DataAreaOffset) {  		WildernessOffset = -1;  	} else {  		Read (fileLength - 8' readBuf' 0' 8);  		long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  		long lastAreaPointer = fileLength - lastBoundary;  		if (lastAreaPointer < DataAreaOffset)  			throw new IOException ("File corrupt: last area offset is before data part of file.");  		if (lastAreaPointer > fileLength - 8)  			throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  		Read (lastAreaPointer' readBuf' 0' 8);  		long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  		// If this is a freed block' then set this are the wilderness offset.  		if ((lastAreaHeader & DeletedFlag) != 0) {  			WildernessOffset = lastAreaPointer;  		} else {  			WildernessOffset = -1;  		}  	}  	IsClosed = false;  	return ClosedClean;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: lock (this) {  	OpenStore (IsReadOnly);  	// If it's small' initialize to empty  	if (DataAreaEndOffset < DataAreaOffset)  		Init ();  	byte[] readBuf = new byte[(int)BinAreaOffset];  	Read (0' readBuf' 0' readBuf.Length);  	using (var stream = new MemoryStream (readBuf)) {  		using (var reader = new BinaryReader (stream)) {  			int magic = reader.ReadInt32 ();  			if (magic != Magic)  				throw new IOException ("Format invalid: Magic value is not as expected.");  			int version = reader.ReadInt32 ();  			if (version != 1)  				throw new IOException ("Format invalid: unrecognized version.");  			reader.ReadInt64 ();  			// ignore  			byte status = reader.ReadByte ();  			ClosedClean = true;  			if (status == 1) {  				// This means the store wasn't closed cleanly.  				ClosedClean = false;  			}  		}  	}  	// Read the bins  	ReadBins ();  	// Mark the file as open  	if (!IsReadOnly)  		Write (16' 1);  	long fileLength = DataAreaEndOffset;  	if (fileLength <= 8) {  		throw new IOException ("Format invalid: File size is too small.");  	}  	// Set the wilderness offset.  	if (fileLength == DataAreaOffset) {  		WildernessOffset = -1;  	} else {  		Read (fileLength - 8' readBuf' 0' 8);  		long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  		long lastAreaPointer = fileLength - lastBoundary;  		if (lastAreaPointer < DataAreaOffset)  			throw new IOException ("File corrupt: last area offset is before data part of file.");  		if (lastAreaPointer > fileLength - 8)  			throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  		Read (lastAreaPointer' readBuf' 0' 8);  		long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  		// If this is a freed block' then set this are the wilderness offset.  		if ((lastAreaHeader & DeletedFlag) != 0) {  			WildernessOffset = lastAreaPointer;  		} else {  			WildernessOffset = -1;  		}  	}  	IsClosed = false;  	return ClosedClean;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: lock (this) {  	OpenStore (IsReadOnly);  	// If it's small' initialize to empty  	if (DataAreaEndOffset < DataAreaOffset)  		Init ();  	byte[] readBuf = new byte[(int)BinAreaOffset];  	Read (0' readBuf' 0' readBuf.Length);  	using (var stream = new MemoryStream (readBuf)) {  		using (var reader = new BinaryReader (stream)) {  			int magic = reader.ReadInt32 ();  			if (magic != Magic)  				throw new IOException ("Format invalid: Magic value is not as expected.");  			int version = reader.ReadInt32 ();  			if (version != 1)  				throw new IOException ("Format invalid: unrecognized version.");  			reader.ReadInt64 ();  			// ignore  			byte status = reader.ReadByte ();  			ClosedClean = true;  			if (status == 1) {  				// This means the store wasn't closed cleanly.  				ClosedClean = false;  			}  		}  	}  	// Read the bins  	ReadBins ();  	// Mark the file as open  	if (!IsReadOnly)  		Write (16' 1);  	long fileLength = DataAreaEndOffset;  	if (fileLength <= 8) {  		throw new IOException ("Format invalid: File size is too small.");  	}  	// Set the wilderness offset.  	if (fileLength == DataAreaOffset) {  		WildernessOffset = -1;  	} else {  		Read (fileLength - 8' readBuf' 0' 8);  		long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  		long lastAreaPointer = fileLength - lastBoundary;  		if (lastAreaPointer < DataAreaOffset)  			throw new IOException ("File corrupt: last area offset is before data part of file.");  		if (lastAreaPointer > fileLength - 8)  			throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  		Read (lastAreaPointer' readBuf' 0' 8);  		long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  		// If this is a freed block' then set this are the wilderness offset.  		if ((lastAreaHeader & DeletedFlag) != 0) {  			WildernessOffset = lastAreaPointer;  		} else {  			WildernessOffset = -1;  		}  	}  	IsClosed = false;  	return ClosedClean;  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: if (!IsReadOnly)  	Write (16' 1);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: Write (16' 1);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: if (fileLength <= 8) {  	throw new IOException ("Format invalid: File size is too small.");  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: if (fileLength == DataAreaOffset) {  	WildernessOffset = -1;  } else {  	Read (fileLength - 8' readBuf' 0' 8);  	long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  	long lastAreaPointer = fileLength - lastBoundary;  	if (lastAreaPointer < DataAreaOffset)  		throw new IOException ("File corrupt: last area offset is before data part of file.");  	if (lastAreaPointer > fileLength - 8)  		throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  	Read (lastAreaPointer' readBuf' 0' 8);  	long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  	// If this is a freed block' then set this are the wilderness offset.  	if ((lastAreaHeader & DeletedFlag) != 0) {  		WildernessOffset = lastAreaPointer;  	} else {  		WildernessOffset = -1;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: if (fileLength == DataAreaOffset) {  	WildernessOffset = -1;  } else {  	Read (fileLength - 8' readBuf' 0' 8);  	long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  	long lastAreaPointer = fileLength - lastBoundary;  	if (lastAreaPointer < DataAreaOffset)  		throw new IOException ("File corrupt: last area offset is before data part of file.");  	if (lastAreaPointer > fileLength - 8)  		throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  	Read (lastAreaPointer' readBuf' 0' 8);  	long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  	// If this is a freed block' then set this are the wilderness offset.  	if ((lastAreaHeader & DeletedFlag) != 0) {  		WildernessOffset = lastAreaPointer;  	} else {  		WildernessOffset = -1;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: if (fileLength == DataAreaOffset) {  	WildernessOffset = -1;  } else {  	Read (fileLength - 8' readBuf' 0' 8);  	long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  	long lastAreaPointer = fileLength - lastBoundary;  	if (lastAreaPointer < DataAreaOffset)  		throw new IOException ("File corrupt: last area offset is before data part of file.");  	if (lastAreaPointer > fileLength - 8)  		throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  	Read (lastAreaPointer' readBuf' 0' 8);  	long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  	// If this is a freed block' then set this are the wilderness offset.  	if ((lastAreaHeader & DeletedFlag) != 0) {  		WildernessOffset = lastAreaPointer;  	} else {  		WildernessOffset = -1;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: if (fileLength == DataAreaOffset) {  	WildernessOffset = -1;  } else {  	Read (fileLength - 8' readBuf' 0' 8);  	long lastBoundary = BytesUtil.ReadInt8 (readBuf' 0);  	long lastAreaPointer = fileLength - lastBoundary;  	if (lastAreaPointer < DataAreaOffset)  		throw new IOException ("File corrupt: last area offset is before data part of file.");  	if (lastAreaPointer > fileLength - 8)  		throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  	Read (lastAreaPointer' readBuf' 0' 8);  	long lastAreaHeader = BytesUtil.ReadInt8 (readBuf' 0);  	// If this is a freed block' then set this are the wilderness offset.  	if ((lastAreaHeader & DeletedFlag) != 0) {  		WildernessOffset = lastAreaPointer;  	} else {  		WildernessOffset = -1;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: Read (fileLength - 8' readBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: Read (fileLength - 8' readBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: if (lastAreaPointer > fileLength - 8)  	throw new IOException ("File corrupt: last_area_pointer at the end of the file.");  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Open,The following statement contains a magic number: Read (lastAreaPointer' readBuf' 0' 8);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Close,The following statement contains a magic number: lock (this) {  	// Mark the file as closed  	if (!IsReadOnly)  		Write (16' 0);  	try {  		CloseStore ();  	} finally {  		IsClosed = true;  	}  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Close,The following statement contains a magic number: if (!IsReadOnly)  	Write (16' 0);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,Close,The following statement contains a magic number: Write (16' 0);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,CreateArea,The following statement contains a magic number: lock (this) {  	long pointer = Alloc (size);  	return new StoreArea (this' pointer' pointer + 8' false' size);  }  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,CreateArea,The following statement contains a magic number: return new StoreArea (this' pointer' pointer + 8' false' size);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,GetArea,The following statement contains a magic number: if (id == -1)  	return new StoreArea (this' id' FixedAreaOffset' readOnly' 64);  
Magic Number,Deveel.Data.Store,StoreBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store\StoreBase.cs,GetArea,The following statement contains a magic number: return new StoreArea (this' id' FixedAreaOffset' readOnly' 64);  
Magic Number,Deveel.Data,SessionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SessionTableContainer.cs,SessionTableContainer,The following statement contains a magic number: IntTableInfo = new TableInfo[3];  
Magic Number,Deveel.Data,SessionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SessionTableContainer.cs,SessionTableContainer,The following statement contains a magic number: IntTableInfo [2] = OpenSessionsTableInfo;  
Magic Number,Deveel.Data,SessionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data\SessionTableContainer.cs,GetTable,The following statement contains a magic number: switch (offset) {  case 0:  	return new StatisticsTable (session);  case 1:  	return new SessionInfoTable (session);  case 2:  	return new OpenSessionsTable (session);  default:  	throw new ArgumentOutOfRangeException ("offset");  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: lock (this) {  	// Allocate empty visible and deleted tables area  	using (var visTablesArea = Store.CreateArea (12)) {  		using (var delTablesArea = Store.CreateArea (12)) {  			visAreaPointer = visTablesArea.Id;  			delAreaPointer = delTablesArea.Id;  			// Write empty entries for both of these  			visTablesArea.WriteInt4 (1);  			visTablesArea.WriteInt8 (0);  			visTablesArea.Flush ();  			delTablesArea.WriteInt4 (1);  			delTablesArea.WriteInt8 (0);  			delTablesArea.Flush ();  			// Now allocate an empty state header  			using (var headerWriter = Store.CreateArea (32)) {  				long headerP = headerWriter.Id;  				headerWriter.WriteInt4 (Magic);  				headerWriter.WriteInt4 (0);  				headerWriter.WriteInt8 (0);  				headerWriter.WriteInt8 (visAreaPointer);  				headerWriter.WriteInt8 (delAreaPointer);  				headerWriter.Flush ();  				headerArea = Store.GetArea (headerP' false);  				// Reset currentTableId  				currentTableId = 0;  				visibleList = new List<TableState> ();  				deleteList = new List<TableState> ();  				// Return pointer to the header area  				return headerP;  			}  		}  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: lock (this) {  	// Allocate empty visible and deleted tables area  	using (var visTablesArea = Store.CreateArea (12)) {  		using (var delTablesArea = Store.CreateArea (12)) {  			visAreaPointer = visTablesArea.Id;  			delAreaPointer = delTablesArea.Id;  			// Write empty entries for both of these  			visTablesArea.WriteInt4 (1);  			visTablesArea.WriteInt8 (0);  			visTablesArea.Flush ();  			delTablesArea.WriteInt4 (1);  			delTablesArea.WriteInt8 (0);  			delTablesArea.Flush ();  			// Now allocate an empty state header  			using (var headerWriter = Store.CreateArea (32)) {  				long headerP = headerWriter.Id;  				headerWriter.WriteInt4 (Magic);  				headerWriter.WriteInt4 (0);  				headerWriter.WriteInt8 (0);  				headerWriter.WriteInt8 (visAreaPointer);  				headerWriter.WriteInt8 (delAreaPointer);  				headerWriter.Flush ();  				headerArea = Store.GetArea (headerP' false);  				// Reset currentTableId  				currentTableId = 0;  				visibleList = new List<TableState> ();  				deleteList = new List<TableState> ();  				// Return pointer to the header area  				return headerP;  			}  		}  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: lock (this) {  	// Allocate empty visible and deleted tables area  	using (var visTablesArea = Store.CreateArea (12)) {  		using (var delTablesArea = Store.CreateArea (12)) {  			visAreaPointer = visTablesArea.Id;  			delAreaPointer = delTablesArea.Id;  			// Write empty entries for both of these  			visTablesArea.WriteInt4 (1);  			visTablesArea.WriteInt8 (0);  			visTablesArea.Flush ();  			delTablesArea.WriteInt4 (1);  			delTablesArea.WriteInt8 (0);  			delTablesArea.Flush ();  			// Now allocate an empty state header  			using (var headerWriter = Store.CreateArea (32)) {  				long headerP = headerWriter.Id;  				headerWriter.WriteInt4 (Magic);  				headerWriter.WriteInt4 (0);  				headerWriter.WriteInt8 (0);  				headerWriter.WriteInt8 (visAreaPointer);  				headerWriter.WriteInt8 (delAreaPointer);  				headerWriter.Flush ();  				headerArea = Store.GetArea (headerP' false);  				// Reset currentTableId  				currentTableId = 0;  				visibleList = new List<TableState> ();  				deleteList = new List<TableState> ();  				// Return pointer to the header area  				return headerP;  			}  		}  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: using (var visTablesArea = Store.CreateArea (12)) {  	using (var delTablesArea = Store.CreateArea (12)) {  		visAreaPointer = visTablesArea.Id;  		delAreaPointer = delTablesArea.Id;  		// Write empty entries for both of these  		visTablesArea.WriteInt4 (1);  		visTablesArea.WriteInt8 (0);  		visTablesArea.Flush ();  		delTablesArea.WriteInt4 (1);  		delTablesArea.WriteInt8 (0);  		delTablesArea.Flush ();  		// Now allocate an empty state header  		using (var headerWriter = Store.CreateArea (32)) {  			long headerP = headerWriter.Id;  			headerWriter.WriteInt4 (Magic);  			headerWriter.WriteInt4 (0);  			headerWriter.WriteInt8 (0);  			headerWriter.WriteInt8 (visAreaPointer);  			headerWriter.WriteInt8 (delAreaPointer);  			headerWriter.Flush ();  			headerArea = Store.GetArea (headerP' false);  			// Reset currentTableId  			currentTableId = 0;  			visibleList = new List<TableState> ();  			deleteList = new List<TableState> ();  			// Return pointer to the header area  			return headerP;  		}  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: using (var visTablesArea = Store.CreateArea (12)) {  	using (var delTablesArea = Store.CreateArea (12)) {  		visAreaPointer = visTablesArea.Id;  		delAreaPointer = delTablesArea.Id;  		// Write empty entries for both of these  		visTablesArea.WriteInt4 (1);  		visTablesArea.WriteInt8 (0);  		visTablesArea.Flush ();  		delTablesArea.WriteInt4 (1);  		delTablesArea.WriteInt8 (0);  		delTablesArea.Flush ();  		// Now allocate an empty state header  		using (var headerWriter = Store.CreateArea (32)) {  			long headerP = headerWriter.Id;  			headerWriter.WriteInt4 (Magic);  			headerWriter.WriteInt4 (0);  			headerWriter.WriteInt8 (0);  			headerWriter.WriteInt8 (visAreaPointer);  			headerWriter.WriteInt8 (delAreaPointer);  			headerWriter.Flush ();  			headerArea = Store.GetArea (headerP' false);  			// Reset currentTableId  			currentTableId = 0;  			visibleList = new List<TableState> ();  			deleteList = new List<TableState> ();  			// Return pointer to the header area  			return headerP;  		}  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: using (var visTablesArea = Store.CreateArea (12)) {  	using (var delTablesArea = Store.CreateArea (12)) {  		visAreaPointer = visTablesArea.Id;  		delAreaPointer = delTablesArea.Id;  		// Write empty entries for both of these  		visTablesArea.WriteInt4 (1);  		visTablesArea.WriteInt8 (0);  		visTablesArea.Flush ();  		delTablesArea.WriteInt4 (1);  		delTablesArea.WriteInt8 (0);  		delTablesArea.Flush ();  		// Now allocate an empty state header  		using (var headerWriter = Store.CreateArea (32)) {  			long headerP = headerWriter.Id;  			headerWriter.WriteInt4 (Magic);  			headerWriter.WriteInt4 (0);  			headerWriter.WriteInt8 (0);  			headerWriter.WriteInt8 (visAreaPointer);  			headerWriter.WriteInt8 (delAreaPointer);  			headerWriter.Flush ();  			headerArea = Store.GetArea (headerP' false);  			// Reset currentTableId  			currentTableId = 0;  			visibleList = new List<TableState> ();  			deleteList = new List<TableState> ();  			// Return pointer to the header area  			return headerP;  		}  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: using (var delTablesArea = Store.CreateArea (12)) {  	visAreaPointer = visTablesArea.Id;  	delAreaPointer = delTablesArea.Id;  	// Write empty entries for both of these  	visTablesArea.WriteInt4 (1);  	visTablesArea.WriteInt8 (0);  	visTablesArea.Flush ();  	delTablesArea.WriteInt4 (1);  	delTablesArea.WriteInt8 (0);  	delTablesArea.Flush ();  	// Now allocate an empty state header  	using (var headerWriter = Store.CreateArea (32)) {  		long headerP = headerWriter.Id;  		headerWriter.WriteInt4 (Magic);  		headerWriter.WriteInt4 (0);  		headerWriter.WriteInt8 (0);  		headerWriter.WriteInt8 (visAreaPointer);  		headerWriter.WriteInt8 (delAreaPointer);  		headerWriter.Flush ();  		headerArea = Store.GetArea (headerP' false);  		// Reset currentTableId  		currentTableId = 0;  		visibleList = new List<TableState> ();  		deleteList = new List<TableState> ();  		// Return pointer to the header area  		return headerP;  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: using (var delTablesArea = Store.CreateArea (12)) {  	visAreaPointer = visTablesArea.Id;  	delAreaPointer = delTablesArea.Id;  	// Write empty entries for both of these  	visTablesArea.WriteInt4 (1);  	visTablesArea.WriteInt8 (0);  	visTablesArea.Flush ();  	delTablesArea.WriteInt4 (1);  	delTablesArea.WriteInt8 (0);  	delTablesArea.Flush ();  	// Now allocate an empty state header  	using (var headerWriter = Store.CreateArea (32)) {  		long headerP = headerWriter.Id;  		headerWriter.WriteInt4 (Magic);  		headerWriter.WriteInt4 (0);  		headerWriter.WriteInt8 (0);  		headerWriter.WriteInt8 (visAreaPointer);  		headerWriter.WriteInt8 (delAreaPointer);  		headerWriter.Flush ();  		headerArea = Store.GetArea (headerP' false);  		// Reset currentTableId  		currentTableId = 0;  		visibleList = new List<TableState> ();  		deleteList = new List<TableState> ();  		// Return pointer to the header area  		return headerP;  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Create,The following statement contains a magic number: using (var headerWriter = Store.CreateArea (32)) {  	long headerP = headerWriter.Id;  	headerWriter.WriteInt4 (Magic);  	headerWriter.WriteInt4 (0);  	headerWriter.WriteInt8 (0);  	headerWriter.WriteInt8 (visAreaPointer);  	headerWriter.WriteInt8 (delAreaPointer);  	headerWriter.Flush ();  	headerArea = Store.GetArea (headerP' false);  	// Reset currentTableId  	currentTableId = 0;  	visibleList = new List<TableState> ();  	deleteList = new List<TableState> ();  	// Return pointer to the header area  	return headerP;  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,NextTableId,The following statement contains a magic number: lock (this) {  	int curCounter = currentTableId;  	++currentTableId;  	try {  		Store.Lock ();  		// Update the state in the file  		headerArea.Position = 8;  		headerArea.WriteInt8 (currentTableId);  		// Check out the change  		headerArea.Flush ();  	} finally {  		Store.Unlock ();  	}  	return curCounter;  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,NextTableId,The following statement contains a magic number: try {  	Store.Lock ();  	// Update the state in the file  	headerArea.Position = 8;  	headerArea.WriteInt8 (currentTableId);  	// Check out the change  	headerArea.Flush ();  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,NextTableId,The following statement contains a magic number: headerArea.Position = 8;  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Flush,The following statement contains a magic number: lock (this) {  	bool changes = false;  	long newVisP = visAreaPointer;  	long newDelP = delAreaPointer;  	try {  		Store.Lock ();  		// If the lists changed' then Write new state areas to the store.  		if (visListChange) {  			newVisP = WriteListToStore (visibleList);  			visListChange = false;  			changes = true;  		}  		if (delListChange) {  			newDelP = WriteListToStore (deleteList);  			delListChange = false;  			changes = true;  		}  		// Commit the changes'  		if (changes) {  			headerArea.Position = 16;  			headerArea.WriteInt8 (newVisP);  			headerArea.WriteInt8 (newDelP);  			headerArea.Flush ();  			if (visAreaPointer != newVisP) {  				Store.DeleteArea (visAreaPointer);  				visAreaPointer = newVisP;  			}  			if (delAreaPointer != newDelP) {  				Store.DeleteArea (delAreaPointer);  				delAreaPointer = newDelP;  			}  		}  	} finally {  		Store.Unlock ();  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Flush,The following statement contains a magic number: try {  	Store.Lock ();  	// If the lists changed' then Write new state areas to the store.  	if (visListChange) {  		newVisP = WriteListToStore (visibleList);  		visListChange = false;  		changes = true;  	}  	if (delListChange) {  		newDelP = WriteListToStore (deleteList);  		delListChange = false;  		changes = true;  	}  	// Commit the changes'  	if (changes) {  		headerArea.Position = 16;  		headerArea.WriteInt8 (newVisP);  		headerArea.WriteInt8 (newDelP);  		headerArea.Flush ();  		if (visAreaPointer != newVisP) {  			Store.DeleteArea (visAreaPointer);  			visAreaPointer = newVisP;  		}  		if (delAreaPointer != newDelP) {  			Store.DeleteArea (delAreaPointer);  			delAreaPointer = newDelP;  		}  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Flush,The following statement contains a magic number: if (changes) {  	headerArea.Position = 16;  	headerArea.WriteInt8 (newVisP);  	headerArea.WriteInt8 (newDelP);  	headerArea.Flush ();  	if (visAreaPointer != newVisP) {  		Store.DeleteArea (visAreaPointer);  		visAreaPointer = newVisP;  	}  	if (delAreaPointer != newDelP) {  		Store.DeleteArea (delAreaPointer);  		delAreaPointer = newDelP;  	}  }  
Magic Number,Deveel.Data,TableStateStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Tables\TableStateStore.cs,Flush,The following statement contains a magic number: headerArea.Position = 16;  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (year <= 0 || year > 9999)  	throw new ArgumentOutOfRangeException ("year");  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (month <= 0 || month > 12)  	throw new ArgumentOutOfRangeException ("month");  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (day <= 0 || day > 31)  	throw new ArgumentOutOfRangeException ("day");  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (hour < 0 || hour > 23)  	throw new ArgumentOutOfRangeException ("hour");  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (minute < 0 || minute > 59)  	throw new ArgumentOutOfRangeException ("minute");  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (second < 0 || second > 59)  	throw new ArgumentOutOfRangeException ("second");  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (millisecond < 0 || millisecond > 999)  	throw new ArgumentOutOfRangeException ("millisecond");  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == DateSize) {  	millis = 0;  } else {  	millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  	if (bytes.Length == TimeStampSize) {  		tzh = tzm = 0;  	} else {  		tzh = bytes [11] - 20;  		tzm = bytes [12] - 60;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: millis = bytes [7] << 24 | bytes [8] << 16 | bytes [9] << 8 | bytes [10];  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == TimeStampSize) {  	tzh = tzm = 0;  } else {  	tzh = bytes [11] - 20;  	tzm = bytes [12] - 60;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == TimeStampSize) {  	tzh = tzm = 0;  } else {  	tzh = bytes [11] - 20;  	tzm = bytes [12] - 60;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == TimeStampSize) {  	tzh = tzm = 0;  } else {  	tzh = bytes [11] - 20;  	tzm = bytes [12] - 60;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: if (bytes.Length == TimeStampSize) {  	tzh = tzm = 0;  } else {  	tzh = bytes [11] - 20;  	tzm = bytes [12] - 60;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: tzh = bytes [11] - 20;  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: tzh = bytes [11] - 20;  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: tzm = bytes [12] - 60;  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,SqlDateTime,The following statement contains a magic number: tzm = bytes [12] - 60;  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [0] = (byte)((Year / 100) + 100);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [0] = (byte)((Year / 100) + 100);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [1] = (byte)((Year % 100) + 100);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [1] = (byte)((Year % 100) + 100);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [2] = (byte)(Month);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [3] = (byte)(Day);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [4] = (byte)(Hour + 1);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [5] = (byte)(Minute + 1);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [6] = (byte)(Second + 1);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [7] = (byte)((Millisecond >> 24));  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [7] = (byte)((Millisecond >> 24));  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [8] = (byte)((Millisecond >> 16) & 0xff);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [8] = (byte)((Millisecond >> 16) & 0xff);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [9] = (byte)((Millisecond >> 8) & 0xff);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [9] = (byte)((Millisecond >> 8) & 0xff);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [10] = (byte)(Millisecond & 0xff);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: if (timeZone) {  	var tsOffset = Offset;  	bytes [11] = (byte)(tsOffset.Hours + 20);  	bytes [12] = (byte)(tsOffset.Minutes + 60);  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: if (timeZone) {  	var tsOffset = Offset;  	bytes [11] = (byte)(tsOffset.Hours + 20);  	bytes [12] = (byte)(tsOffset.Minutes + 60);  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: if (timeZone) {  	var tsOffset = Offset;  	bytes [11] = (byte)(tsOffset.Hours + 20);  	bytes [12] = (byte)(tsOffset.Minutes + 60);  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: if (timeZone) {  	var tsOffset = Offset;  	bytes [11] = (byte)(tsOffset.Hours + 20);  	bytes [12] = (byte)(tsOffset.Minutes + 60);  }  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [11] = (byte)(tsOffset.Hours + 20);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [11] = (byte)(tsOffset.Hours + 20);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [12] = (byte)(tsOffset.Minutes + 60);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,ToByteArray,The following statement contains a magic number: bytes [12] = (byte)(tsOffset.Minutes + 60);  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,DaysToAdd,The following statement contains a magic number: return (n > 7) ? n % 7 : n;  
Magic Number,Deveel.Data.Sql.Objects,SqlDateTime,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDateTime.cs,DaysToAdd,The following statement contains a magic number: return (n > 7) ? n % 7 : n;  
Magic Number,Deveel.Data.Sql.Objects,SqlDayToSecond,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDayToSecond.cs,SqlDayToSecond,The following statement contains a magic number: if (bytes.Length != 5)  	throw new ArgumentException ("Invalid byte representation of DAY TO SECOND");  
Magic Number,Deveel.Data.Sql.Objects,SqlDayToSecond,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDayToSecond.cs,ToByArray,The following statement contains a magic number: bytes [2] = (byte)value.Value.Minutes;  
Magic Number,Deveel.Data.Sql.Objects,SqlDayToSecond,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDayToSecond.cs,ToByArray,The following statement contains a magic number: bytes [3] = (byte)value.Value.Seconds;  
Magic Number,Deveel.Data.Sql.Objects,SqlDayToSecond,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlDayToSecond.cs,ToByArray,The following statement contains a magic number: bytes [4] = (byte)value.Value.Milliseconds;  
Magic Number,Deveel.Data.Sql.Objects,SqlLongString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlLongString.cs,Create,The following statement contains a magic number: using (var stream = new ObjectStream (lob)) {  	inputStream.CopyTo (stream' 1024);  	stream.Flush ();  }  
Magic Number,Deveel.Data.Sql.Objects,SqlLongString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlLongString.cs,Create,The following statement contains a magic number: inputStream.CopyTo (stream' 1024);  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: byteCount = 120;  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (value != null && value.Scale == 0) {  	BigInteger bint = value.ToBigInteger ();  	int bitCount = bint.BitLength;  	if (bitCount < 30) {  		valueAsLong = bint.ToInt64 ();  		byteCount = 4;  	} else if (bitCount < 60) {  		valueAsLong = bint.ToInt64 ();  		byteCount = 8;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (value != null && value.Scale == 0) {  	BigInteger bint = value.ToBigInteger ();  	int bitCount = bint.BitLength;  	if (bitCount < 30) {  		valueAsLong = bint.ToInt64 ();  		byteCount = 4;  	} else if (bitCount < 60) {  		valueAsLong = bint.ToInt64 ();  		byteCount = 8;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (value != null && value.Scale == 0) {  	BigInteger bint = value.ToBigInteger ();  	int bitCount = bint.BitLength;  	if (bitCount < 30) {  		valueAsLong = bint.ToInt64 ();  		byteCount = 4;  	} else if (bitCount < 60) {  		valueAsLong = bint.ToInt64 ();  		byteCount = 8;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (value != null && value.Scale == 0) {  	BigInteger bint = value.ToBigInteger ();  	int bitCount = bint.BitLength;  	if (bitCount < 30) {  		valueAsLong = bint.ToInt64 ();  		byteCount = 4;  	} else if (bitCount < 60) {  		valueAsLong = bint.ToInt64 ();  		byteCount = 8;  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (bitCount < 30) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 4;  } else if (bitCount < 60) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 8;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (bitCount < 30) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 4;  } else if (bitCount < 60) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 8;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (bitCount < 30) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 4;  } else if (bitCount < 60) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 8;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (bitCount < 30) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 4;  } else if (bitCount < 60) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 8;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: byteCount = 4;  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (bitCount < 60) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 8;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: if (bitCount < 60) {  	valueAsLong = bint.ToInt64 ();  	byteCount = 8;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,SqlNumber,The following statement contains a magic number: byteCount = 8;  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,Divide,The following statement contains a magic number: if (State == NumericState.None) {  	if (value.State == NumericState.None) {  		if (IsNull || value.IsNull)  			return Null;  		BigDecimal divBy = value.innerValue;  		if (divBy.CompareTo (BigDecimal.Zero) != 0) {  			return new SqlNumber (NumericState.None' innerValue.Divide (divBy' 10' RoundingMode.HalfUp));  		}  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,Divide,The following statement contains a magic number: if (value.State == NumericState.None) {  	if (IsNull || value.IsNull)  		return Null;  	BigDecimal divBy = value.innerValue;  	if (divBy.CompareTo (BigDecimal.Zero) != 0) {  		return new SqlNumber (NumericState.None' innerValue.Divide (divBy' 10' RoundingMode.HalfUp));  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,Divide,The following statement contains a magic number: if (divBy.CompareTo (BigDecimal.Zero) != 0) {  	return new SqlNumber (NumericState.None' innerValue.Divide (divBy' 10' RoundingMode.HalfUp));  }  
Magic Number,Deveel.Data.Sql.Objects,SqlNumber,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlNumber.cs,Divide,The following statement contains a magic number: return new SqlNumber (NumericState.None' innerValue.Divide (divBy' 10' RoundingMode.HalfUp));  
Magic Number,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 17;  	// get hash code for all items in array  	foreach (var item in source) {  		hash = hash * 23 + item.GetHashCode ();  	}  	return hash;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hash = 17;  	// get hash code for all items in array  	foreach (var item in source) {  		hash = hash * 23 + item.GetHashCode ();  	}  	return hash;  }  
Magic Number,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,GetHashCode,The following statement contains a magic number: foreach (var item in source) {  	hash = hash * 23 + item.GetHashCode ();  }  
Magic Number,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + item.GetHashCode ();  
Magic Number,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,Concat,The following statement contains a magic number: using (var output = new StringWriter (sb)) {  	// First read the current stream  	using (var reader = GetInput (Encoding.Unicode)) {  		var buffer = new char[2048];  		int count;  		while ((count = reader.Read (buffer' 0' buffer.Length)) != 0) {  			output.Write (buffer' 0' count);  		}  	}  	// Then read the second stream  	using (var reader = other.GetInput (Encoding.Unicode)) {  		var buffer = new char[2048];  		int count;  		while ((count = reader.Read (buffer' 0' buffer.Length)) != 0) {  			output.Write (buffer' 0' count);  		}  	}  	output.Flush ();  }  
Magic Number,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,Concat,The following statement contains a magic number: using (var output = new StringWriter (sb)) {  	// First read the current stream  	using (var reader = GetInput (Encoding.Unicode)) {  		var buffer = new char[2048];  		int count;  		while ((count = reader.Read (buffer' 0' buffer.Length)) != 0) {  			output.Write (buffer' 0' count);  		}  	}  	// Then read the second stream  	using (var reader = other.GetInput (Encoding.Unicode)) {  		var buffer = new char[2048];  		int count;  		while ((count = reader.Read (buffer' 0' buffer.Length)) != 0) {  			output.Write (buffer' 0' count);  		}  	}  	output.Flush ();  }  
Magic Number,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,Concat,The following statement contains a magic number: using (var reader = GetInput (Encoding.Unicode)) {  	var buffer = new char[2048];  	int count;  	while ((count = reader.Read (buffer' 0' buffer.Length)) != 0) {  		output.Write (buffer' 0' count);  	}  }  
Magic Number,Deveel.Data.Sql.Objects,SqlString,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Sql.Objects\SqlString.cs,Concat,The following statement contains a magic number: using (var reader = other.GetInput (Encoding.Unicode)) {  	var buffer = new char[2048];  	int count;  	while ((count = reader.Read (buffer' 0' buffer.Length)) != 0) {  		output.Write (buffer' 0' count);  	}  }  
Magic Number,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,GetSpecialConstructor,The following statement contains a magic number: foreach (var ctor in ctors) {  	var paramTypes = ctor.GetParameters ().Select (x => x.ParameterType).ToArray ();  	if (paramTypes.Length == 2 && paramTypes [0] == typeof(SerializationInfo) && paramTypes [1] == typeof(StreamingContext))  		return ctor;  }  
Magic Number,Deveel.Data.Serialization,BinarySerializer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Serialization\BinarySerializer.cs,GetSpecialConstructor,The following statement contains a magic number: if (paramTypes.Length == 2 && paramTypes [0] == typeof(SerializationInfo) && paramTypes [1] == typeof(StreamingContext))  	return ctor;  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,GetJournalFileName,The following statement contains a magic number: if (number < 10 || number > 73) {  	throw new Exception ("Journal file name output of range.");  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,GetJournalFileName,The following statement contains a magic number: if (number < 10 || number > 73) {  	throw new Exception ("Journal file name output of range.");  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,RollForwardRecover,The following statement contains a magic number: for (int i = 10; i < 74; ++i) {  	string journalFn = GetJournalFileName (i);  	string f = FileSystem.CombinePath (JournalPath' journalFn);  	// If the journal exists' create a summary of the journal  	if (FileSystem.FileExists (f)) {  		if (ReadOnly) {  			throw new IOException ("Journal file " + f + " exists for a read-only session.  " + "There may not be any pending journals for a Read-only session.");  		}  		var jf = new JournalFile (this' FileSystem' f' ReadOnly);  		// Open the journal file for recovery.  This will set various  		// information about the journal such as the last check point and the  		// id of the journal file.  		JournalSummary summary = jf.OpenForRecovery ();  		// If the journal can be recovered from.  		if (summary.CanBeRecovered) {  			Context.OnInformation (String.Format ("Journal '{0}' found: can be recovered"' jf));  			journalFilesList.Add (summary);  		} else {  			Context.OnInformation (String.Format ("Deleting journal '{0}': nothing to recover"' jf));  			// Otherwise close and delete it  			jf.CloseAndDelete ();  		}  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,RollForwardRecover,The following statement contains a magic number: for (int i = 10; i < 74; ++i) {  	string journalFn = GetJournalFileName (i);  	string f = FileSystem.CombinePath (JournalPath' journalFn);  	// If the journal exists' create a summary of the journal  	if (FileSystem.FileExists (f)) {  		if (ReadOnly) {  			throw new IOException ("Journal file " + f + " exists for a read-only session.  " + "There may not be any pending journals for a Read-only session.");  		}  		var jf = new JournalFile (this' FileSystem' f' ReadOnly);  		// Open the journal file for recovery.  This will set various  		// information about the journal such as the last check point and the  		// id of the journal file.  		JournalSummary summary = jf.OpenForRecovery ();  		// If the journal can be recovered from.  		if (summary.CanBeRecovered) {  			Context.OnInformation (String.Format ("Journal '{0}' found: can be recovered"' jf));  			journalFilesList.Add (summary);  		} else {  			Context.OnInformation (String.Format ("Deleting journal '{0}': nothing to recover"' jf));  			// Otherwise close and delete it  			jf.CloseAndDelete ();  		}  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,RollForwardRecover,The following statement contains a magic number: for (int i = 0; i < journalFilesList.Count; ++i) {  	var summary = journalFilesList [i];  	// Check the resources for this summary  	var resList = summary.Resources;  	foreach (string resourceName in resList) {  		// This puts the resource into the hash map.  		CreateResource (resourceName);  	}  	// Assert that we are recovering the journals input the correct order  	JournalFile jf = summary.JournalFile;  	if (jf.JournalNumber < lastJournalNumber) {  		throw new InvalidOperationException ("Assertion failed' sort failed.");  	}  	lastJournalNumber = jf.JournalNumber;  	Context.OnInformation (String.Format ("Recovering '{0}' (8 .. {1})"' jf' summary.LastCheckPoint));  	jf.Persist (8' summary.LastCheckPoint);  	// Then close and delete.  	jf.CloseAndDelete ();  	// Check the resources for this summary and close them  	foreach (var resourceName in resList) {  		var resource = (ResourceBase)CreateResource (resourceName);  		// When we finished' make sure the resource is closed again  		// Close the resource  		resource.PersistClose ();  		// Post recover notification  		resource.OnPostRecover ();  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,RollForwardRecover,The following statement contains a magic number: jf.Persist (8' summary.LastCheckPoint);  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,SetCheckPoint,The following statement contains a magic number: lock (topJournalLock) {  	JournalFile topJ = TopJournal;  	// When the journal exceeds a threshold then we cycle the top journal  	if (flushJournals || topJ.Length > (256 * 1024)) {  		// Cycle to the next journal file  		NewTopJournalFile ();  		// Add this to the archives  		journalArchives.Add (topJ);  	}  	persisting = journalArchives.Count > 0;  	topJ.SetCheckPoint ();  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,SetCheckPoint,The following statement contains a magic number: lock (topJournalLock) {  	JournalFile topJ = TopJournal;  	// When the journal exceeds a threshold then we cycle the top journal  	if (flushJournals || topJ.Length > (256 * 1024)) {  		// Cycle to the next journal file  		NewTopJournalFile ();  		// Add this to the archives  		journalArchives.Add (topJ);  	}  	persisting = journalArchives.Count > 0;  	topJ.SetCheckPoint ();  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,SetCheckPoint,The following statement contains a magic number: if (flushJournals || topJ.Length > (256 * 1024)) {  	// Cycle to the next journal file  	NewTopJournalFile ();  	// Add this to the archives  	journalArchives.Add (topJ);  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,SetCheckPoint,The following statement contains a magic number: if (flushJournals || topJ.Length > (256 * 1024)) {  	// Cycle to the next journal file  	NewTopJournalFile ();  	// Add this to the archives  	journalArchives.Add (topJ);  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,SetCheckPoint,The following statement contains a magic number: if (persisting) {  	// Notifies the background thread that there is something to persist.  	// This will block until there are at most 10 journal files open.  	journalingThread.PersistArchives (10);  }  
Magic Number,Deveel.Data.Store.Journaled,JournaledSystem,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournaledSystem.cs,SetCheckPoint,The following statement contains a magic number: journalingThread.PersistArchives (10);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,JournalFile,The following statement contains a magic number: buffer = new byte[36];  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: if (endPointer < 8) {  	return summary;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: using (var reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// Set the journal number for this  	JournalNumber = reader.ReadInt64 ();  	long position = 8;  	var checkpointResList = new List<string> ();  	// Start scan  	while (true) {  		// If we can't Read 12 bytes ahead' return the summary  		if (position + 12 > endPointer) {  			return summary;  		}  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		bool skipBody = true;  		// If checkpoint reached then we are recoverable  		if (type == 100) {  			summary.LastCheckPoint = position;  			summary.CanBeRecovered = true;  			// Add the resources input this check point  			foreach (var checkpoint in checkpointResList) {  				summary.Resources.Add (checkpoint);  			}  			// And clear the temporary list.  			checkpointResList.Clear ();  		} // If end reached' or type is not understood then return  		else if (position >= endPointer || type < 1 || type > 7) {  			return summary;  		}  		// If we are resource type' then load the resource  		if (type == 2) {  			// We don't skip body for this type' we Read the content  			skipBody = false;  			long id = reader.ReadInt64 ();  			int strLen = reader.ReadInt32 ();  			StringBuilder str = new StringBuilder (strLen);  			for (int i = 0; i < strLen; ++i) {  				str.Append (reader.ReadChar ());  			}  			var resourceName = str.ToString ();  			checkpointResList.Add (resourceName);  		}  		if (skipBody)  			reader.BaseStream.Seek (size' SeekOrigin.Current);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: using (var reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// Set the journal number for this  	JournalNumber = reader.ReadInt64 ();  	long position = 8;  	var checkpointResList = new List<string> ();  	// Start scan  	while (true) {  		// If we can't Read 12 bytes ahead' return the summary  		if (position + 12 > endPointer) {  			return summary;  		}  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		bool skipBody = true;  		// If checkpoint reached then we are recoverable  		if (type == 100) {  			summary.LastCheckPoint = position;  			summary.CanBeRecovered = true;  			// Add the resources input this check point  			foreach (var checkpoint in checkpointResList) {  				summary.Resources.Add (checkpoint);  			}  			// And clear the temporary list.  			checkpointResList.Clear ();  		} // If end reached' or type is not understood then return  		else if (position >= endPointer || type < 1 || type > 7) {  			return summary;  		}  		// If we are resource type' then load the resource  		if (type == 2) {  			// We don't skip body for this type' we Read the content  			skipBody = false;  			long id = reader.ReadInt64 ();  			int strLen = reader.ReadInt32 ();  			StringBuilder str = new StringBuilder (strLen);  			for (int i = 0; i < strLen; ++i) {  				str.Append (reader.ReadChar ());  			}  			var resourceName = str.ToString ();  			checkpointResList.Add (resourceName);  		}  		if (skipBody)  			reader.BaseStream.Seek (size' SeekOrigin.Current);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: using (var reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// Set the journal number for this  	JournalNumber = reader.ReadInt64 ();  	long position = 8;  	var checkpointResList = new List<string> ();  	// Start scan  	while (true) {  		// If we can't Read 12 bytes ahead' return the summary  		if (position + 12 > endPointer) {  			return summary;  		}  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		bool skipBody = true;  		// If checkpoint reached then we are recoverable  		if (type == 100) {  			summary.LastCheckPoint = position;  			summary.CanBeRecovered = true;  			// Add the resources input this check point  			foreach (var checkpoint in checkpointResList) {  				summary.Resources.Add (checkpoint);  			}  			// And clear the temporary list.  			checkpointResList.Clear ();  		} // If end reached' or type is not understood then return  		else if (position >= endPointer || type < 1 || type > 7) {  			return summary;  		}  		// If we are resource type' then load the resource  		if (type == 2) {  			// We don't skip body for this type' we Read the content  			skipBody = false;  			long id = reader.ReadInt64 ();  			int strLen = reader.ReadInt32 ();  			StringBuilder str = new StringBuilder (strLen);  			for (int i = 0; i < strLen; ++i) {  				str.Append (reader.ReadChar ());  			}  			var resourceName = str.ToString ();  			checkpointResList.Add (resourceName);  		}  		if (skipBody)  			reader.BaseStream.Seek (size' SeekOrigin.Current);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: using (var reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// Set the journal number for this  	JournalNumber = reader.ReadInt64 ();  	long position = 8;  	var checkpointResList = new List<string> ();  	// Start scan  	while (true) {  		// If we can't Read 12 bytes ahead' return the summary  		if (position + 12 > endPointer) {  			return summary;  		}  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		bool skipBody = true;  		// If checkpoint reached then we are recoverable  		if (type == 100) {  			summary.LastCheckPoint = position;  			summary.CanBeRecovered = true;  			// Add the resources input this check point  			foreach (var checkpoint in checkpointResList) {  				summary.Resources.Add (checkpoint);  			}  			// And clear the temporary list.  			checkpointResList.Clear ();  		} // If end reached' or type is not understood then return  		else if (position >= endPointer || type < 1 || type > 7) {  			return summary;  		}  		// If we are resource type' then load the resource  		if (type == 2) {  			// We don't skip body for this type' we Read the content  			skipBody = false;  			long id = reader.ReadInt64 ();  			int strLen = reader.ReadInt32 ();  			StringBuilder str = new StringBuilder (strLen);  			for (int i = 0; i < strLen; ++i) {  				str.Append (reader.ReadChar ());  			}  			var resourceName = str.ToString ();  			checkpointResList.Add (resourceName);  		}  		if (skipBody)  			reader.BaseStream.Seek (size' SeekOrigin.Current);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: using (var reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// Set the journal number for this  	JournalNumber = reader.ReadInt64 ();  	long position = 8;  	var checkpointResList = new List<string> ();  	// Start scan  	while (true) {  		// If we can't Read 12 bytes ahead' return the summary  		if (position + 12 > endPointer) {  			return summary;  		}  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		bool skipBody = true;  		// If checkpoint reached then we are recoverable  		if (type == 100) {  			summary.LastCheckPoint = position;  			summary.CanBeRecovered = true;  			// Add the resources input this check point  			foreach (var checkpoint in checkpointResList) {  				summary.Resources.Add (checkpoint);  			}  			// And clear the temporary list.  			checkpointResList.Clear ();  		} // If end reached' or type is not understood then return  		else if (position >= endPointer || type < 1 || type > 7) {  			return summary;  		}  		// If we are resource type' then load the resource  		if (type == 2) {  			// We don't skip body for this type' we Read the content  			skipBody = false;  			long id = reader.ReadInt64 ();  			int strLen = reader.ReadInt32 ();  			StringBuilder str = new StringBuilder (strLen);  			for (int i = 0; i < strLen; ++i) {  				str.Append (reader.ReadChar ());  			}  			var resourceName = str.ToString ();  			checkpointResList.Add (resourceName);  		}  		if (skipBody)  			reader.BaseStream.Seek (size' SeekOrigin.Current);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: using (var reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// Set the journal number for this  	JournalNumber = reader.ReadInt64 ();  	long position = 8;  	var checkpointResList = new List<string> ();  	// Start scan  	while (true) {  		// If we can't Read 12 bytes ahead' return the summary  		if (position + 12 > endPointer) {  			return summary;  		}  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		bool skipBody = true;  		// If checkpoint reached then we are recoverable  		if (type == 100) {  			summary.LastCheckPoint = position;  			summary.CanBeRecovered = true;  			// Add the resources input this check point  			foreach (var checkpoint in checkpointResList) {  				summary.Resources.Add (checkpoint);  			}  			// And clear the temporary list.  			checkpointResList.Clear ();  		} // If end reached' or type is not understood then return  		else if (position >= endPointer || type < 1 || type > 7) {  			return summary;  		}  		// If we are resource type' then load the resource  		if (type == 2) {  			// We don't skip body for this type' we Read the content  			skipBody = false;  			long id = reader.ReadInt64 ();  			int strLen = reader.ReadInt32 ();  			StringBuilder str = new StringBuilder (strLen);  			for (int i = 0; i < strLen; ++i) {  				str.Append (reader.ReadChar ());  			}  			var resourceName = str.ToString ();  			checkpointResList.Add (resourceName);  		}  		if (skipBody)  			reader.BaseStream.Seek (size' SeekOrigin.Current);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: while (true) {  	// If we can't Read 12 bytes ahead' return the summary  	if (position + 12 > endPointer) {  		return summary;  	}  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	bool skipBody = true;  	// If checkpoint reached then we are recoverable  	if (type == 100) {  		summary.LastCheckPoint = position;  		summary.CanBeRecovered = true;  		// Add the resources input this check point  		foreach (var checkpoint in checkpointResList) {  			summary.Resources.Add (checkpoint);  		}  		// And clear the temporary list.  		checkpointResList.Clear ();  	} // If end reached' or type is not understood then return  	else if (position >= endPointer || type < 1 || type > 7) {  		return summary;  	}  	// If we are resource type' then load the resource  	if (type == 2) {  		// We don't skip body for this type' we Read the content  		skipBody = false;  		long id = reader.ReadInt64 ();  		int strLen = reader.ReadInt32 ();  		StringBuilder str = new StringBuilder (strLen);  		for (int i = 0; i < strLen; ++i) {  			str.Append (reader.ReadChar ());  		}  		var resourceName = str.ToString ();  		checkpointResList.Add (resourceName);  	}  	if (skipBody)  		reader.BaseStream.Seek (size' SeekOrigin.Current);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: while (true) {  	// If we can't Read 12 bytes ahead' return the summary  	if (position + 12 > endPointer) {  		return summary;  	}  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	bool skipBody = true;  	// If checkpoint reached then we are recoverable  	if (type == 100) {  		summary.LastCheckPoint = position;  		summary.CanBeRecovered = true;  		// Add the resources input this check point  		foreach (var checkpoint in checkpointResList) {  			summary.Resources.Add (checkpoint);  		}  		// And clear the temporary list.  		checkpointResList.Clear ();  	} // If end reached' or type is not understood then return  	else if (position >= endPointer || type < 1 || type > 7) {  		return summary;  	}  	// If we are resource type' then load the resource  	if (type == 2) {  		// We don't skip body for this type' we Read the content  		skipBody = false;  		long id = reader.ReadInt64 ();  		int strLen = reader.ReadInt32 ();  		StringBuilder str = new StringBuilder (strLen);  		for (int i = 0; i < strLen; ++i) {  			str.Append (reader.ReadChar ());  		}  		var resourceName = str.ToString ();  		checkpointResList.Add (resourceName);  	}  	if (skipBody)  		reader.BaseStream.Seek (size' SeekOrigin.Current);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: while (true) {  	// If we can't Read 12 bytes ahead' return the summary  	if (position + 12 > endPointer) {  		return summary;  	}  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	bool skipBody = true;  	// If checkpoint reached then we are recoverable  	if (type == 100) {  		summary.LastCheckPoint = position;  		summary.CanBeRecovered = true;  		// Add the resources input this check point  		foreach (var checkpoint in checkpointResList) {  			summary.Resources.Add (checkpoint);  		}  		// And clear the temporary list.  		checkpointResList.Clear ();  	} // If end reached' or type is not understood then return  	else if (position >= endPointer || type < 1 || type > 7) {  		return summary;  	}  	// If we are resource type' then load the resource  	if (type == 2) {  		// We don't skip body for this type' we Read the content  		skipBody = false;  		long id = reader.ReadInt64 ();  		int strLen = reader.ReadInt32 ();  		StringBuilder str = new StringBuilder (strLen);  		for (int i = 0; i < strLen; ++i) {  			str.Append (reader.ReadChar ());  		}  		var resourceName = str.ToString ();  		checkpointResList.Add (resourceName);  	}  	if (skipBody)  		reader.BaseStream.Seek (size' SeekOrigin.Current);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: while (true) {  	// If we can't Read 12 bytes ahead' return the summary  	if (position + 12 > endPointer) {  		return summary;  	}  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	bool skipBody = true;  	// If checkpoint reached then we are recoverable  	if (type == 100) {  		summary.LastCheckPoint = position;  		summary.CanBeRecovered = true;  		// Add the resources input this check point  		foreach (var checkpoint in checkpointResList) {  			summary.Resources.Add (checkpoint);  		}  		// And clear the temporary list.  		checkpointResList.Clear ();  	} // If end reached' or type is not understood then return  	else if (position >= endPointer || type < 1 || type > 7) {  		return summary;  	}  	// If we are resource type' then load the resource  	if (type == 2) {  		// We don't skip body for this type' we Read the content  		skipBody = false;  		long id = reader.ReadInt64 ();  		int strLen = reader.ReadInt32 ();  		StringBuilder str = new StringBuilder (strLen);  		for (int i = 0; i < strLen; ++i) {  			str.Append (reader.ReadChar ());  		}  		var resourceName = str.ToString ();  		checkpointResList.Add (resourceName);  	}  	if (skipBody)  		reader.BaseStream.Seek (size' SeekOrigin.Current);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: while (true) {  	// If we can't Read 12 bytes ahead' return the summary  	if (position + 12 > endPointer) {  		return summary;  	}  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	bool skipBody = true;  	// If checkpoint reached then we are recoverable  	if (type == 100) {  		summary.LastCheckPoint = position;  		summary.CanBeRecovered = true;  		// Add the resources input this check point  		foreach (var checkpoint in checkpointResList) {  			summary.Resources.Add (checkpoint);  		}  		// And clear the temporary list.  		checkpointResList.Clear ();  	} // If end reached' or type is not understood then return  	else if (position >= endPointer || type < 1 || type > 7) {  		return summary;  	}  	// If we are resource type' then load the resource  	if (type == 2) {  		// We don't skip body for this type' we Read the content  		skipBody = false;  		long id = reader.ReadInt64 ();  		int strLen = reader.ReadInt32 ();  		StringBuilder str = new StringBuilder (strLen);  		for (int i = 0; i < strLen; ++i) {  			str.Append (reader.ReadChar ());  		}  		var resourceName = str.ToString ();  		checkpointResList.Add (resourceName);  	}  	if (skipBody)  		reader.BaseStream.Seek (size' SeekOrigin.Current);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: if (position + 12 > endPointer) {  	return summary;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: position = position + size + 12;  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: if (type == 100) {  	summary.LastCheckPoint = position;  	summary.CanBeRecovered = true;  	// Add the resources input this check point  	foreach (var checkpoint in checkpointResList) {  		summary.Resources.Add (checkpoint);  	}  	// And clear the temporary list.  	checkpointResList.Clear ();  } // If end reached' or type is not understood then return  else if (position >= endPointer || type < 1 || type > 7) {  	return summary;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: if (type == 100) {  	summary.LastCheckPoint = position;  	summary.CanBeRecovered = true;  	// Add the resources input this check point  	foreach (var checkpoint in checkpointResList) {  		summary.Resources.Add (checkpoint);  	}  	// And clear the temporary list.  	checkpointResList.Clear ();  } // If end reached' or type is not understood then return  else if (position >= endPointer || type < 1 || type > 7) {  	return summary;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: if (position >= endPointer || type < 1 || type > 7) {  	return summary;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,OpenForRecovery,The following statement contains a magic number: if (type == 2) {  	// We don't skip body for this type' we Read the content  	skipBody = false;  	long id = reader.ReadInt64 ();  	int strLen = reader.ReadInt32 ();  	StringBuilder str = new StringBuilder (strLen);  	for (int i = 0; i < strLen; ++i) {  		str.Append (reader.ReadChar ());  	}  	var resourceName = str.ToString ();  	checkpointResList.Add (resourceName);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: lock (resourceIdMap) {  	if (!resourceIdMap.TryGetValue (resourceName' out v)) {  		++cur_seq_id;  		int len = resourceName.Length;  		// byte[] buf = Encoding.Unicode.GetBytes(resource_name);  		// Write the header for this resource  		output.Write (2L);  		output.Write (8 + 4 + (len * 2));  		output.Write (cur_seq_id);  		output.Write (len);  		for (int i = 0; i < len; i++) {  			output.Write (resourceName [i]);  		}  		// Put this id input the cache  		v = cur_seq_id;  		resourceIdMap [resourceName] = v;  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: lock (resourceIdMap) {  	if (!resourceIdMap.TryGetValue (resourceName' out v)) {  		++cur_seq_id;  		int len = resourceName.Length;  		// byte[] buf = Encoding.Unicode.GetBytes(resource_name);  		// Write the header for this resource  		output.Write (2L);  		output.Write (8 + 4 + (len * 2));  		output.Write (cur_seq_id);  		output.Write (len);  		for (int i = 0; i < len; i++) {  			output.Write (resourceName [i]);  		}  		// Put this id input the cache  		v = cur_seq_id;  		resourceIdMap [resourceName] = v;  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: lock (resourceIdMap) {  	if (!resourceIdMap.TryGetValue (resourceName' out v)) {  		++cur_seq_id;  		int len = resourceName.Length;  		// byte[] buf = Encoding.Unicode.GetBytes(resource_name);  		// Write the header for this resource  		output.Write (2L);  		output.Write (8 + 4 + (len * 2));  		output.Write (cur_seq_id);  		output.Write (len);  		for (int i = 0; i < len; i++) {  			output.Write (resourceName [i]);  		}  		// Put this id input the cache  		v = cur_seq_id;  		resourceIdMap [resourceName] = v;  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: if (!resourceIdMap.TryGetValue (resourceName' out v)) {  	++cur_seq_id;  	int len = resourceName.Length;  	// byte[] buf = Encoding.Unicode.GetBytes(resource_name);  	// Write the header for this resource  	output.Write (2L);  	output.Write (8 + 4 + (len * 2));  	output.Write (cur_seq_id);  	output.Write (len);  	for (int i = 0; i < len; i++) {  		output.Write (resourceName [i]);  	}  	// Put this id input the cache  	v = cur_seq_id;  	resourceIdMap [resourceName] = v;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: if (!resourceIdMap.TryGetValue (resourceName' out v)) {  	++cur_seq_id;  	int len = resourceName.Length;  	// byte[] buf = Encoding.Unicode.GetBytes(resource_name);  	// Write the header for this resource  	output.Write (2L);  	output.Write (8 + 4 + (len * 2));  	output.Write (cur_seq_id);  	output.Write (len);  	for (int i = 0; i < len; i++) {  		output.Write (resourceName [i]);  	}  	// Put this id input the cache  	v = cur_seq_id;  	resourceIdMap [resourceName] = v;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: if (!resourceIdMap.TryGetValue (resourceName' out v)) {  	++cur_seq_id;  	int len = resourceName.Length;  	// byte[] buf = Encoding.Unicode.GetBytes(resource_name);  	// Write the header for this resource  	output.Write (2L);  	output.Write (8 + 4 + (len * 2));  	output.Write (cur_seq_id);  	output.Write (len);  	for (int i = 0; i < len; i++) {  		output.Write (resourceName [i]);  	}  	// Put this id input the cache  	v = cur_seq_id;  	resourceIdMap [resourceName] = v;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: output.Write (8 + 4 + (len * 2));  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: output.Write (8 + 4 + (len * 2));  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,WriteResourceName,The following statement contains a magic number: output.Write (8 + 4 + (len * 2));  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogResourceDelete,The following statement contains a magic number: lock (this) {  	// Build the header'  	long v = WriteResourceName (resourceName' dataOut);  	// Write the header  	long resourceId = v;  	dataOut.Write (6L);  	dataOut.Write (8);  	dataOut.Write (resourceId);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogResourceDelete,The following statement contains a magic number: dataOut.Write (8);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogResourceSizeChange,The following statement contains a magic number: lock (this) {  	// Build the header'  	long v = WriteResourceName (resourceName' dataOut);  	// Write the header  	long resourceId = v;  	dataOut.Write (3L);  	dataOut.Write (8 + 8);  	dataOut.Write (resourceId);  	dataOut.Write (newSize);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogResourceSizeChange,The following statement contains a magic number: lock (this) {  	// Build the header'  	long v = WriteResourceName (resourceName' dataOut);  	// Write the header  	long resourceId = v;  	dataOut.Write (3L);  	dataOut.Write (8 + 8);  	dataOut.Write (resourceId);  	dataOut.Write (newSize);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogResourceSizeChange,The following statement contains a magic number: dataOut.Write (8 + 8);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogResourceSizeChange,The following statement contains a magic number: dataOut.Write (8 + 8);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: lock (this) {  	// Build the header'  	long v = WriteResourceName (resourceName' dataOut);  	//// The absolute position of the page'  	//long absolute_position = pageNumber * JournaledSystem.PageSize;  	// Write the header  	long resourceId = v;  	dataOut.Write (1L);  	dataOut.Write ((int)8 + 8 + 4 + 4 + len);  	dataOut.Write (resourceId);  	dataOut.Write (pageNumber);  	dataOut.Write (off);  	//data_out.Write((long)(absolute_position / 8192));  	//data_out.Write((int)(off + (int)(absolute_position & 8191)));  	dataOut.Write (len);  	dataOut.Write (pageBuffer' off' len);  	// Flush the changes so we can work output the pointer.  	dataOut.Flush ();  	reference = File.Length - len - 36;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: lock (this) {  	// Build the header'  	long v = WriteResourceName (resourceName' dataOut);  	//// The absolute position of the page'  	//long absolute_position = pageNumber * JournaledSystem.PageSize;  	// Write the header  	long resourceId = v;  	dataOut.Write (1L);  	dataOut.Write ((int)8 + 8 + 4 + 4 + len);  	dataOut.Write (resourceId);  	dataOut.Write (pageNumber);  	dataOut.Write (off);  	//data_out.Write((long)(absolute_position / 8192));  	//data_out.Write((int)(off + (int)(absolute_position & 8191)));  	dataOut.Write (len);  	dataOut.Write (pageBuffer' off' len);  	// Flush the changes so we can work output the pointer.  	dataOut.Flush ();  	reference = File.Length - len - 36;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: lock (this) {  	// Build the header'  	long v = WriteResourceName (resourceName' dataOut);  	//// The absolute position of the page'  	//long absolute_position = pageNumber * JournaledSystem.PageSize;  	// Write the header  	long resourceId = v;  	dataOut.Write (1L);  	dataOut.Write ((int)8 + 8 + 4 + 4 + len);  	dataOut.Write (resourceId);  	dataOut.Write (pageNumber);  	dataOut.Write (off);  	//data_out.Write((long)(absolute_position / 8192));  	//data_out.Write((int)(off + (int)(absolute_position & 8191)));  	dataOut.Write (len);  	dataOut.Write (pageBuffer' off' len);  	// Flush the changes so we can work output the pointer.  	dataOut.Flush ();  	reference = File.Length - len - 36;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: lock (this) {  	// Build the header'  	long v = WriteResourceName (resourceName' dataOut);  	//// The absolute position of the page'  	//long absolute_position = pageNumber * JournaledSystem.PageSize;  	// Write the header  	long resourceId = v;  	dataOut.Write (1L);  	dataOut.Write ((int)8 + 8 + 4 + 4 + len);  	dataOut.Write (resourceId);  	dataOut.Write (pageNumber);  	dataOut.Write (off);  	//data_out.Write((long)(absolute_position / 8192));  	//data_out.Write((int)(off + (int)(absolute_position & 8191)));  	dataOut.Write (len);  	dataOut.Write (pageBuffer' off' len);  	// Flush the changes so we can work output the pointer.  	dataOut.Flush ();  	reference = File.Length - len - 36;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: lock (this) {  	// Build the header'  	long v = WriteResourceName (resourceName' dataOut);  	//// The absolute position of the page'  	//long absolute_position = pageNumber * JournaledSystem.PageSize;  	// Write the header  	long resourceId = v;  	dataOut.Write (1L);  	dataOut.Write ((int)8 + 8 + 4 + 4 + len);  	dataOut.Write (resourceId);  	dataOut.Write (pageNumber);  	dataOut.Write (off);  	//data_out.Write((long)(absolute_position / 8192));  	//data_out.Write((int)(off + (int)(absolute_position & 8191)));  	dataOut.Write (len);  	dataOut.Write (pageBuffer' off' len);  	// Flush the changes so we can work output the pointer.  	dataOut.Flush ();  	reference = File.Length - len - 36;  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: dataOut.Write ((int)8 + 8 + 4 + 4 + len);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: dataOut.Write ((int)8 + 8 + 4 + 4 + len);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: dataOut.Write ((int)8 + 8 + 4 + 4 + len);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: dataOut.Write ((int)8 + 8 + 4 + 4 + len);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,LogPageModification,The following statement contains a magic number: reference = File.Length - len - 36;  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// The list of resources we updated  	var resourcesUpdated = new List<ResourceBase> ();  	// A map from resource id to resource name for this journal.  	var idNameMap = new Dictionary<long' string> ();  	bool finished = false;  	long position = start;  	while (!finished) {  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		if (type == 2) {  			PersistTag (reader' idNameMap' resourcesUpdated);  		} else if (type == 6) {  			PersistDelete (reader' idNameMap);  		} else if (type == 3) {  			PersistSizeChange (reader' idNameMap);  		} else if (type == 1) {  			PersistPageModification (reader' idNameMap);  		} else if (type == 100) {  			// Checkpoint (end)  			JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  			if (position == end) {  				finished = true;  			}  		} else {  			throw new Exception ("Unknown tag type: " + type + " position = " + position);  		}  	}  	// while (!finished)  	// Synch all the resources that we have updated.  	foreach (var resource in resourcesUpdated) {  		JournaledSystem.Context.OnDebug (String.Format ("Synch: {0}"' resource.Name));  		resource.Synch ();  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// The list of resources we updated  	var resourcesUpdated = new List<ResourceBase> ();  	// A map from resource id to resource name for this journal.  	var idNameMap = new Dictionary<long' string> ();  	bool finished = false;  	long position = start;  	while (!finished) {  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		if (type == 2) {  			PersistTag (reader' idNameMap' resourcesUpdated);  		} else if (type == 6) {  			PersistDelete (reader' idNameMap);  		} else if (type == 3) {  			PersistSizeChange (reader' idNameMap);  		} else if (type == 1) {  			PersistPageModification (reader' idNameMap);  		} else if (type == 100) {  			// Checkpoint (end)  			JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  			if (position == end) {  				finished = true;  			}  		} else {  			throw new Exception ("Unknown tag type: " + type + " position = " + position);  		}  	}  	// while (!finished)  	// Synch all the resources that we have updated.  	foreach (var resource in resourcesUpdated) {  		JournaledSystem.Context.OnDebug (String.Format ("Synch: {0}"' resource.Name));  		resource.Synch ();  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// The list of resources we updated  	var resourcesUpdated = new List<ResourceBase> ();  	// A map from resource id to resource name for this journal.  	var idNameMap = new Dictionary<long' string> ();  	bool finished = false;  	long position = start;  	while (!finished) {  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		if (type == 2) {  			PersistTag (reader' idNameMap' resourcesUpdated);  		} else if (type == 6) {  			PersistDelete (reader' idNameMap);  		} else if (type == 3) {  			PersistSizeChange (reader' idNameMap);  		} else if (type == 1) {  			PersistPageModification (reader' idNameMap);  		} else if (type == 100) {  			// Checkpoint (end)  			JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  			if (position == end) {  				finished = true;  			}  		} else {  			throw new Exception ("Unknown tag type: " + type + " position = " + position);  		}  	}  	// while (!finished)  	// Synch all the resources that we have updated.  	foreach (var resource in resourcesUpdated) {  		JournaledSystem.Context.OnDebug (String.Format ("Synch: {0}"' resource.Name));  		resource.Synch ();  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// The list of resources we updated  	var resourcesUpdated = new List<ResourceBase> ();  	// A map from resource id to resource name for this journal.  	var idNameMap = new Dictionary<long' string> ();  	bool finished = false;  	long position = start;  	while (!finished) {  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		if (type == 2) {  			PersistTag (reader' idNameMap' resourcesUpdated);  		} else if (type == 6) {  			PersistDelete (reader' idNameMap);  		} else if (type == 3) {  			PersistSizeChange (reader' idNameMap);  		} else if (type == 1) {  			PersistPageModification (reader' idNameMap);  		} else if (type == 100) {  			// Checkpoint (end)  			JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  			if (position == end) {  				finished = true;  			}  		} else {  			throw new Exception ("Unknown tag type: " + type + " position = " + position);  		}  	}  	// while (!finished)  	// Synch all the resources that we have updated.  	foreach (var resource in resourcesUpdated) {  		JournaledSystem.Context.OnDebug (String.Format ("Synch: {0}"' resource.Name));  		resource.Synch ();  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: using (BinaryReader reader = new BinaryReader (File.FileStream' Encoding.Unicode)) {  	// The list of resources we updated  	var resourcesUpdated = new List<ResourceBase> ();  	// A map from resource id to resource name for this journal.  	var idNameMap = new Dictionary<long' string> ();  	bool finished = false;  	long position = start;  	while (!finished) {  		long type = reader.ReadInt64 ();  		int size = reader.ReadInt32 ();  		position = position + size + 12;  		if (type == 2) {  			PersistTag (reader' idNameMap' resourcesUpdated);  		} else if (type == 6) {  			PersistDelete (reader' idNameMap);  		} else if (type == 3) {  			PersistSizeChange (reader' idNameMap);  		} else if (type == 1) {  			PersistPageModification (reader' idNameMap);  		} else if (type == 100) {  			// Checkpoint (end)  			JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  			if (position == end) {  				finished = true;  			}  		} else {  			throw new Exception ("Unknown tag type: " + type + " position = " + position);  		}  	}  	// while (!finished)  	// Synch all the resources that we have updated.  	foreach (var resource in resourcesUpdated) {  		JournaledSystem.Context.OnDebug (String.Format ("Synch: {0}"' resource.Name));  		resource.Synch ();  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: while (!finished) {  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	if (type == 2) {  		PersistTag (reader' idNameMap' resourcesUpdated);  	} else if (type == 6) {  		PersistDelete (reader' idNameMap);  	} else if (type == 3) {  		PersistSizeChange (reader' idNameMap);  	} else if (type == 1) {  		PersistPageModification (reader' idNameMap);  	} else if (type == 100) {  		// Checkpoint (end)  		JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  		if (position == end) {  			finished = true;  		}  	} else {  		throw new Exception ("Unknown tag type: " + type + " position = " + position);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: while (!finished) {  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	if (type == 2) {  		PersistTag (reader' idNameMap' resourcesUpdated);  	} else if (type == 6) {  		PersistDelete (reader' idNameMap);  	} else if (type == 3) {  		PersistSizeChange (reader' idNameMap);  	} else if (type == 1) {  		PersistPageModification (reader' idNameMap);  	} else if (type == 100) {  		// Checkpoint (end)  		JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  		if (position == end) {  			finished = true;  		}  	} else {  		throw new Exception ("Unknown tag type: " + type + " position = " + position);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: while (!finished) {  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	if (type == 2) {  		PersistTag (reader' idNameMap' resourcesUpdated);  	} else if (type == 6) {  		PersistDelete (reader' idNameMap);  	} else if (type == 3) {  		PersistSizeChange (reader' idNameMap);  	} else if (type == 1) {  		PersistPageModification (reader' idNameMap);  	} else if (type == 100) {  		// Checkpoint (end)  		JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  		if (position == end) {  			finished = true;  		}  	} else {  		throw new Exception ("Unknown tag type: " + type + " position = " + position);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: while (!finished) {  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	if (type == 2) {  		PersistTag (reader' idNameMap' resourcesUpdated);  	} else if (type == 6) {  		PersistDelete (reader' idNameMap);  	} else if (type == 3) {  		PersistSizeChange (reader' idNameMap);  	} else if (type == 1) {  		PersistPageModification (reader' idNameMap);  	} else if (type == 100) {  		// Checkpoint (end)  		JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  		if (position == end) {  			finished = true;  		}  	} else {  		throw new Exception ("Unknown tag type: " + type + " position = " + position);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: while (!finished) {  	long type = reader.ReadInt64 ();  	int size = reader.ReadInt32 ();  	position = position + size + 12;  	if (type == 2) {  		PersistTag (reader' idNameMap' resourcesUpdated);  	} else if (type == 6) {  		PersistDelete (reader' idNameMap);  	} else if (type == 3) {  		PersistSizeChange (reader' idNameMap);  	} else if (type == 1) {  		PersistPageModification (reader' idNameMap);  	} else if (type == 100) {  		// Checkpoint (end)  		JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  		if (position == end) {  			finished = true;  		}  	} else {  		throw new Exception ("Unknown tag type: " + type + " position = " + position);  	}  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: position = position + size + 12;  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 2) {  	PersistTag (reader' idNameMap' resourcesUpdated);  } else if (type == 6) {  	PersistDelete (reader' idNameMap);  } else if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 2) {  	PersistTag (reader' idNameMap' resourcesUpdated);  } else if (type == 6) {  	PersistDelete (reader' idNameMap);  } else if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 2) {  	PersistTag (reader' idNameMap' resourcesUpdated);  } else if (type == 6) {  	PersistDelete (reader' idNameMap);  } else if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 2) {  	PersistTag (reader' idNameMap' resourcesUpdated);  } else if (type == 6) {  	PersistDelete (reader' idNameMap);  } else if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 6) {  	PersistDelete (reader' idNameMap);  } else if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 6) {  	PersistDelete (reader' idNameMap);  } else if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 6) {  	PersistDelete (reader' idNameMap);  } else if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 3) {  	PersistSizeChange (reader' idNameMap);  } else if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 1) {  	PersistPageModification (reader' idNameMap);  } else if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,Persist,The following statement contains a magic number: if (type == 100) {  	// Checkpoint (end)  	JournaledSystem.Context.OnDebug ("Jounral Command: Check Point");  	if (position == end) {  		finished = true;  	}  } else {  	throw new Exception ("Unknown tag type: " + type + " position = " + position);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The following statement contains a magic number: lock (this) {  	File.Read (position' buffer' 0' 36);  	var type = BytesUtil.ReadInt8 (buffer' 0);  	var resourceId = BytesUtil.ReadInt8 (buffer' 12);  	var pageNumber = BytesUtil.ReadInt8 (buffer' 20);  	var pageOffset = BytesUtil.ReadInt4 (buffer' 28);  	var pageLength = BytesUtil.ReadInt4 (buffer' 32);  	// Some asserts'  	if (type != 1)  		throw new IOException (String.Format ("Invalid page type '{0}' at position '{1}'"' type' position));  	if (pageNumber != buildPageNumber)  		throw new IOException (String.Format ("The page number '{0}' does not match the number of the page to build ('{1}')"' pageNumber' buildPageNumber));  	// Read the content.  	File.Read (position + 36' pageBuffer' offset + pageOffset' pageLength);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The following statement contains a magic number: lock (this) {  	File.Read (position' buffer' 0' 36);  	var type = BytesUtil.ReadInt8 (buffer' 0);  	var resourceId = BytesUtil.ReadInt8 (buffer' 12);  	var pageNumber = BytesUtil.ReadInt8 (buffer' 20);  	var pageOffset = BytesUtil.ReadInt4 (buffer' 28);  	var pageLength = BytesUtil.ReadInt4 (buffer' 32);  	// Some asserts'  	if (type != 1)  		throw new IOException (String.Format ("Invalid page type '{0}' at position '{1}'"' type' position));  	if (pageNumber != buildPageNumber)  		throw new IOException (String.Format ("The page number '{0}' does not match the number of the page to build ('{1}')"' pageNumber' buildPageNumber));  	// Read the content.  	File.Read (position + 36' pageBuffer' offset + pageOffset' pageLength);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The following statement contains a magic number: lock (this) {  	File.Read (position' buffer' 0' 36);  	var type = BytesUtil.ReadInt8 (buffer' 0);  	var resourceId = BytesUtil.ReadInt8 (buffer' 12);  	var pageNumber = BytesUtil.ReadInt8 (buffer' 20);  	var pageOffset = BytesUtil.ReadInt4 (buffer' 28);  	var pageLength = BytesUtil.ReadInt4 (buffer' 32);  	// Some asserts'  	if (type != 1)  		throw new IOException (String.Format ("Invalid page type '{0}' at position '{1}'"' type' position));  	if (pageNumber != buildPageNumber)  		throw new IOException (String.Format ("The page number '{0}' does not match the number of the page to build ('{1}')"' pageNumber' buildPageNumber));  	// Read the content.  	File.Read (position + 36' pageBuffer' offset + pageOffset' pageLength);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The following statement contains a magic number: lock (this) {  	File.Read (position' buffer' 0' 36);  	var type = BytesUtil.ReadInt8 (buffer' 0);  	var resourceId = BytesUtil.ReadInt8 (buffer' 12);  	var pageNumber = BytesUtil.ReadInt8 (buffer' 20);  	var pageOffset = BytesUtil.ReadInt4 (buffer' 28);  	var pageLength = BytesUtil.ReadInt4 (buffer' 32);  	// Some asserts'  	if (type != 1)  		throw new IOException (String.Format ("Invalid page type '{0}' at position '{1}'"' type' position));  	if (pageNumber != buildPageNumber)  		throw new IOException (String.Format ("The page number '{0}' does not match the number of the page to build ('{1}')"' pageNumber' buildPageNumber));  	// Read the content.  	File.Read (position + 36' pageBuffer' offset + pageOffset' pageLength);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The following statement contains a magic number: lock (this) {  	File.Read (position' buffer' 0' 36);  	var type = BytesUtil.ReadInt8 (buffer' 0);  	var resourceId = BytesUtil.ReadInt8 (buffer' 12);  	var pageNumber = BytesUtil.ReadInt8 (buffer' 20);  	var pageOffset = BytesUtil.ReadInt4 (buffer' 28);  	var pageLength = BytesUtil.ReadInt4 (buffer' 32);  	// Some asserts'  	if (type != 1)  		throw new IOException (String.Format ("Invalid page type '{0}' at position '{1}'"' type' position));  	if (pageNumber != buildPageNumber)  		throw new IOException (String.Format ("The page number '{0}' does not match the number of the page to build ('{1}')"' pageNumber' buildPageNumber));  	// Read the content.  	File.Read (position + 36' pageBuffer' offset + pageOffset' pageLength);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The following statement contains a magic number: lock (this) {  	File.Read (position' buffer' 0' 36);  	var type = BytesUtil.ReadInt8 (buffer' 0);  	var resourceId = BytesUtil.ReadInt8 (buffer' 12);  	var pageNumber = BytesUtil.ReadInt8 (buffer' 20);  	var pageOffset = BytesUtil.ReadInt4 (buffer' 28);  	var pageLength = BytesUtil.ReadInt4 (buffer' 32);  	// Some asserts'  	if (type != 1)  		throw new IOException (String.Format ("Invalid page type '{0}' at position '{1}'"' type' position));  	if (pageNumber != buildPageNumber)  		throw new IOException (String.Format ("The page number '{0}' does not match the number of the page to build ('{1}')"' pageNumber' buildPageNumber));  	// Read the content.  	File.Read (position + 36' pageBuffer' offset + pageOffset' pageLength);  }  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The following statement contains a magic number: File.Read (position' buffer' 0' 36);  
Magic Number,Deveel.Data.Store.Journaled,JournalFile,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\JournalFile.cs,BuildPage,The following statement contains a magic number: File.Read (position + 36' pageBuffer' offset + pageOffset' pageLength);  
Magic Number,Deveel.Data.Store.Journaled,LoggingBufferManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingBufferManager.cs,OnPageCreated,The following statement contains a magic number: lock (timeLock) {  	page.Time = currentTime;  	++currentTime;  	++currentPageCount;  	pages.Add (page);  	// Below is the page purge algorithm.  If the maximum number of pages  	// has been created we sort the page list weighting each page by time  	// since last accessed and total number of accesses and clear the bottom  	// 20% of this list.  	// Check if we should purge old pages and purge some if we do...  	if (currentPageCount > MaxPages) {  		// Purge 20% of the cache  		// Sort the pages by the current formula'  		//  ( 1 / page_access_count ) * (current_t - page_t)  		// Further' if the page has written data then we multiply by 0.75.  		// This scales down page writes so they have a better chance of  		// surviving in the cache than page writes.  		var pageArray = pages.ToArray ();  		Array.Sort (pageArray' pageComparer);  		int purgeSize = System.Math.Max ((int)(pageArray.Length * 0.20f)' 2);  		for (int i = 0; i < purgeSize; ++i) {  			var dpage = pageArray [pageArray.Length - (i + 1)];  			lock (dpage) {  				dpage.Dispose ();  			}  		}  		// Remove all the elements from page_list and set it with the sorted  		// list (minus the elements we removed).  		pages.Clear ();  		for (int i = 0; i < pageArray.Length - purgeSize; ++i) {  			pages.Add (pageArray [i]);  		}  		currentPageCount -= purgeSize;  	}  }  
Magic Number,Deveel.Data.Store.Journaled,LoggingBufferManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingBufferManager.cs,OnPageCreated,The following statement contains a magic number: if (currentPageCount > MaxPages) {  	// Purge 20% of the cache  	// Sort the pages by the current formula'  	//  ( 1 / page_access_count ) * (current_t - page_t)  	// Further' if the page has written data then we multiply by 0.75.  	// This scales down page writes so they have a better chance of  	// surviving in the cache than page writes.  	var pageArray = pages.ToArray ();  	Array.Sort (pageArray' pageComparer);  	int purgeSize = System.Math.Max ((int)(pageArray.Length * 0.20f)' 2);  	for (int i = 0; i < purgeSize; ++i) {  		var dpage = pageArray [pageArray.Length - (i + 1)];  		lock (dpage) {  			dpage.Dispose ();  		}  	}  	// Remove all the elements from page_list and set it with the sorted  	// list (minus the elements we removed).  	pages.Clear ();  	for (int i = 0; i < pageArray.Length - purgeSize; ++i) {  		pages.Add (pageArray [i]);  	}  	currentPageCount -= purgeSize;  }  
Magic Number,Deveel.Data.Store.Journaled,LoggingBufferManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingBufferManager.cs,CalcHashCode,The following statement contains a magic number: return (int)((id << 6) + (pageNumber * ((id + 25) << 2)));  
Magic Number,Deveel.Data.Store.Journaled,LoggingBufferManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingBufferManager.cs,CalcHashCode,The following statement contains a magic number: return (int)((id << 6) + (pageNumber * ((id + 25) << 2)));  
Magic Number,Deveel.Data.Store.Journaled,LoggingBufferManager,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingBufferManager.cs,CalcHashCode,The following statement contains a magic number: return (int)((id << 6) + (pageNumber * ((id + 25) << 2)));  
Magic Number,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,LoggingResource,The following statement contains a magic number: journalMap = new JournalEntry[257];  
Magic Number,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,Write,The following statement contains a magic number: lock (journalMap) {  	if (!dataOpen) {  		throw new IOException ("Assertion failed: Data file is not open.");  	}  	// Make this modification input the log  	var journal = JournaledSystem.LogPageModification (Name' pageNumber' buffer' offset' count);  	// This adds the modification to the END of the hash list.  This means  	// when we reconstruct the page the journals will always be input the  	// correct order - from oldest to newest.  	// The map index.  	int i = ((int)(pageNumber & 0x0FFFFFFF) % journalMap.Length);  	var entry = journalMap [i];  	// Make sure this entry is added to the END  	if (entry == null) {  		// Add at the head if no first entry  		journalMap [i] = journal;  		journal.Next = null;  	} else {  		// Otherwise search to the end  		// The number of journal entries input the linked list  		int journalEntryCount = 0;  		while (entry.Next != null) {  			entry = entry.Next;  			++journalEntryCount;  		}  		// and add to the end  		entry.Next = journal;  		journal.Next = null;  		// If there are over 35 journal entries' scan and remove all entries  		// on journals that have persisted  		if (journalEntryCount > 35) {  			entry = journalMap [i];  			JournalEntry prev = null;  			while (entry != null) {  				bool deletedHash = false;  				JournalFile file = entry.File;  				// Note that once we have a reference the journal file can not be  				// deleted.  				file.Reference ();  				// If the file is closed (or deleted)  				if (file.IsDeleted) {  					deletedHash = true;  					// Deleted so remove the reference to the journal  					file.Dereference ();  					// Remove the journal entry from the chain.  					if (prev == null) {  						journalMap [i] = entry.Next;  					} else {  						prev.Next = entry.Next;  					}  				}  				// Remove the reference  				file.Dereference ();  				// Only move prev is we have NOT deleted a hash entry  				if (!deletedHash) {  					prev = entry;  				}  				entry = entry.Next;  			}  		}  	}  }  
Magic Number,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,Write,The following statement contains a magic number: if (entry == null) {  	// Add at the head if no first entry  	journalMap [i] = journal;  	journal.Next = null;  } else {  	// Otherwise search to the end  	// The number of journal entries input the linked list  	int journalEntryCount = 0;  	while (entry.Next != null) {  		entry = entry.Next;  		++journalEntryCount;  	}  	// and add to the end  	entry.Next = journal;  	journal.Next = null;  	// If there are over 35 journal entries' scan and remove all entries  	// on journals that have persisted  	if (journalEntryCount > 35) {  		entry = journalMap [i];  		JournalEntry prev = null;  		while (entry != null) {  			bool deletedHash = false;  			JournalFile file = entry.File;  			// Note that once we have a reference the journal file can not be  			// deleted.  			file.Reference ();  			// If the file is closed (or deleted)  			if (file.IsDeleted) {  				deletedHash = true;  				// Deleted so remove the reference to the journal  				file.Dereference ();  				// Remove the journal entry from the chain.  				if (prev == null) {  					journalMap [i] = entry.Next;  				} else {  					prev.Next = entry.Next;  				}  			}  			// Remove the reference  			file.Dereference ();  			// Only move prev is we have NOT deleted a hash entry  			if (!deletedHash) {  				prev = entry;  			}  			entry = entry.Next;  		}  	}  }  
Magic Number,Deveel.Data.Store.Journaled,LoggingResource,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Store.Journaled\LoggingResource.cs,Write,The following statement contains a magic number: if (journalEntryCount > 35) {  	entry = journalMap [i];  	JournalEntry prev = null;  	while (entry != null) {  		bool deletedHash = false;  		JournalFile file = entry.File;  		// Note that once we have a reference the journal file can not be  		// deleted.  		file.Reference ();  		// If the file is closed (or deleted)  		if (file.IsDeleted) {  			deletedHash = true;  			// Deleted so remove the reference to the journal  			file.Dereference ();  			// Remove the journal entry from the chain.  			if (prev == null) {  				journalMap [i] = entry.Next;  			} else {  				prev.Next = entry.Next;  			}  		}  		// Remove the reference  		file.Dereference ();  		// Only move prev is we have NOT deleted a hash entry  		if (!deletedHash) {  			prev = entry;  		}  		entry = entry.Next;  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,TransactionTableContainer,The following statement contains a magic number: IntTableInfo = new TableInfo[6];  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,TransactionTableContainer,The following statement contains a magic number: IntTableInfo [2] = ProductInfoTableInfo;  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,TransactionTableContainer,The following statement contains a magic number: IntTableInfo [3] = VariablesTableInfo;  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,TransactionTableContainer,The following statement contains a magic number: IntTableInfo [4] = SqlTypesTableInfo;  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,TransactionTableContainer,The following statement contains a magic number: IntTableInfo [5] = PrivilegesTableInfo;  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,GetTable,The following statement contains a magic number: if (offset == 2)  	return new ProductInfoTable (transaction);  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,GetTable,The following statement contains a magic number: if (offset == 3)  	return new VariablesTable (transaction);  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,GetTable,The following statement contains a magic number: if (offset == 4)  	return new SqlTypesTable (transaction);  
Magic Number,Deveel.Data.Transactions,TransactionTableContainer,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionTableContainer.cs,GetTable,The following statement contains a magic number: if (offset == 5)  	return new PrivilegesTable (transaction);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: try {  	// Insert a value into PrimaryInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.PrimaryKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' tableName.Parent.Name);  	row.SetValue (3' tableName.Name);  	row.SetValue (4' (short)deferred);  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' i);  		// Sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Primary key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: try {  	// Insert a value into PrimaryInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.PrimaryKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' tableName.Parent.Name);  	row.SetValue (3' tableName.Name);  	row.SetValue (4' (short)deferred);  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' i);  		// Sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Primary key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: try {  	// Insert a value into PrimaryInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.PrimaryKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' tableName.Parent.Name);  	row.SetValue (3' tableName.Name);  	row.SetValue (4' (short)deferred);  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' i);  		// Sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Primary key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: try {  	// Insert a value into PrimaryInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.PrimaryKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' tableName.Parent.Name);  	row.SetValue (3' tableName.Name);  	row.SetValue (4' (short)deferred);  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' i);  		// Sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Primary key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: row.SetValue (2' tableName.Parent.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: row.SetValue (3' tableName.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: row.SetValue (4' (short)deferred);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: for (int i = 0; i < columns.Length; ++i) {  	row = tcols.NewRow ();  	row.SetValue (0' uniqueId);  	// unique id  	row.SetValue (1' columns [i]);  	// column name  	row.SetValue (2' i);  	// Sequence number  	tcols.AddRow (row);  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddPrimaryKey,The following statement contains a magic number: row.SetValue (2' i);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: try {  	// If 'ref_columns' empty then set to primary key for referenced table'  	// ISSUE: What if primary key changes after the fact?  	if (refColumns.Length == 0) {  		var set = transaction.QueryTablePrimaryKey (refTable);  		if (set == null)  			throw new Exception (String.Format ("No primary key defined for referenced table '{0}'"' refTable));  		refColumns = set.ColumnNames;  	}  	if (columns.Length != refColumns.Length) {  		throw new Exception (String.Format ("Foreign key reference '{0}' -> '{1}' does not have an equal number of " + "column terms."' table' refTable));  	}  	// If delete or update rule is 'SET NULL' then check the foreign key  	// columns are not constrained as 'NOT NULL'  	if (deleteRule == ForeignKeyAction.SetNull || updateRule == ForeignKeyAction.SetNull) {  		var tableInfo = transaction.GetTableInfo (table);  		for (int i = 0; i < columns.Length; ++i) {  			var columnInfo = tableInfo [tableInfo.IndexOfColumn (columns [i])];  			if (columnInfo.IsNotNull) {  				throw new NotNullColumnViolationException (tableInfo.TableName' columnInfo.ColumnName);  			}  		}  	}  	// Insert a value into ForeignInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.ForeignKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' table.Parent.Name);  	row.SetValue (3' table.Name);  	row.SetValue (4' refTable.Parent.Name);  	row.SetValue (5' refTable.Name);  	row.SetValue (6' ((int)updateRule));  	row.SetValue (7' ((int)deleteRule));  	row.SetValue (8' ((short)deferred));  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' refColumns [i]);  		// ref column name  		row.SetValue (3' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Foreign key constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (2' table.Parent.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (3' table.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (4' refTable.Parent.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (5' refTable.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (6' ((int)updateRule));  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (7' ((int)deleteRule));  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (8' ((short)deferred));  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: for (int i = 0; i < columns.Length; ++i) {  	row = tcols.NewRow ();  	row.SetValue (0' uniqueId);  	// unique id  	row.SetValue (1' columns [i]);  	// column name  	row.SetValue (2' refColumns [i]);  	// ref column name  	row.SetValue (3' i);  	// sequence number  	tcols.AddRow (row);  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: for (int i = 0; i < columns.Length; ++i) {  	row = tcols.NewRow ();  	row.SetValue (0' uniqueId);  	// unique id  	row.SetValue (1' columns [i]);  	// column name  	row.SetValue (2' refColumns [i]);  	// ref column name  	row.SetValue (3' i);  	// sequence number  	tcols.AddRow (row);  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (2' refColumns [i]);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddForeignKey,The following statement contains a magic number: row.SetValue (3' i);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: try {  	// Insert a value into UniqueInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.UniqueKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' tableName.Parent.Name);  	row.SetValue (3' tableName.Name);  	row.SetValue (4' (short)deferred);  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Unique constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: try {  	// Insert a value into UniqueInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.UniqueKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' tableName.Parent.Name);  	row.SetValue (3' tableName.Name);  	row.SetValue (4' (short)deferred);  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Unique constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: try {  	// Insert a value into UniqueInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.UniqueKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' tableName.Parent.Name);  	row.SetValue (3' tableName.Name);  	row.SetValue (4' (short)deferred);  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Unique constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: try {  	// Insert a value into UniqueInfoTable  	var row = t.NewRow ();  	var uniqueId = transaction.NextTableId (SystemSchema.UniqueKeyInfoTableName);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	row.SetValue (0' uniqueId);  	row.SetValue (1' constraintName);  	row.SetValue (2' tableName.Parent.Name);  	row.SetValue (3' tableName.Name);  	row.SetValue (4' (short)deferred);  	t.AddRow (row);  	// Insert the columns  	for (int i = 0; i < columns.Length; ++i) {  		row = tcols.NewRow ();  		row.SetValue (0' uniqueId);  		// unique id  		row.SetValue (1' columns [i]);  		// column name  		row.SetValue (2' i);  		// sequence number  		tcols.AddRow (row);  	}  } catch (UniqueKeyViolationException) {  	// This means we gave a constraint name that's already being used  	// for a primary key.  	throw new Exception (String.Format ("Unique constraint name '{0}' is already being used."' constraintName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: row.SetValue (2' tableName.Parent.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: row.SetValue (3' tableName.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: row.SetValue (4' (short)deferred);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: for (int i = 0; i < columns.Length; ++i) {  	row = tcols.NewRow ();  	row.SetValue (0' uniqueId);  	// unique id  	row.SetValue (1' columns [i]);  	// column name  	row.SetValue (2' i);  	// sequence number  	tcols.AddRow (row);  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddUniqueKey,The following statement contains a magic number: row.SetValue (2' i);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: try {  	byte[] binExp;  	using (var stream = new MemoryStream ()) {  		using (var writer = new BinaryWriter (stream' Encoding.Unicode)) {  			SqlExpression.Serialize (expression' writer);  			writer.Flush ();  			binExp = stream.ToArray ();  		}  	}  	// Insert check constraint data.  	var uniqueId = transaction.NextTableId (tn);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	var rd = t.NewRow ();  	rd.SetValue (0' uniqueId);  	rd.SetValue (1' constraintName);  	rd.SetValue (2' tableName.ParentName);  	rd.SetValue (3' tableName.Name);  	rd.SetValue (4' expression.ToString ());  	rd.SetValue (5' (short)deferrability);  	if (colCount > 6) {  		rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  	}  	t.AddRow (rd);  } catch (UniqueKeyViolationException) {  	throw new InvalidOperationException ("Check constraint name '" + constraintName + "' is already being used.");  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: try {  	byte[] binExp;  	using (var stream = new MemoryStream ()) {  		using (var writer = new BinaryWriter (stream' Encoding.Unicode)) {  			SqlExpression.Serialize (expression' writer);  			writer.Flush ();  			binExp = stream.ToArray ();  		}  	}  	// Insert check constraint data.  	var uniqueId = transaction.NextTableId (tn);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	var rd = t.NewRow ();  	rd.SetValue (0' uniqueId);  	rd.SetValue (1' constraintName);  	rd.SetValue (2' tableName.ParentName);  	rd.SetValue (3' tableName.Name);  	rd.SetValue (4' expression.ToString ());  	rd.SetValue (5' (short)deferrability);  	if (colCount > 6) {  		rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  	}  	t.AddRow (rd);  } catch (UniqueKeyViolationException) {  	throw new InvalidOperationException ("Check constraint name '" + constraintName + "' is already being used.");  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: try {  	byte[] binExp;  	using (var stream = new MemoryStream ()) {  		using (var writer = new BinaryWriter (stream' Encoding.Unicode)) {  			SqlExpression.Serialize (expression' writer);  			writer.Flush ();  			binExp = stream.ToArray ();  		}  	}  	// Insert check constraint data.  	var uniqueId = transaction.NextTableId (tn);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	var rd = t.NewRow ();  	rd.SetValue (0' uniqueId);  	rd.SetValue (1' constraintName);  	rd.SetValue (2' tableName.ParentName);  	rd.SetValue (3' tableName.Name);  	rd.SetValue (4' expression.ToString ());  	rd.SetValue (5' (short)deferrability);  	if (colCount > 6) {  		rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  	}  	t.AddRow (rd);  } catch (UniqueKeyViolationException) {  	throw new InvalidOperationException ("Check constraint name '" + constraintName + "' is already being used.");  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: try {  	byte[] binExp;  	using (var stream = new MemoryStream ()) {  		using (var writer = new BinaryWriter (stream' Encoding.Unicode)) {  			SqlExpression.Serialize (expression' writer);  			writer.Flush ();  			binExp = stream.ToArray ();  		}  	}  	// Insert check constraint data.  	var uniqueId = transaction.NextTableId (tn);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	var rd = t.NewRow ();  	rd.SetValue (0' uniqueId);  	rd.SetValue (1' constraintName);  	rd.SetValue (2' tableName.ParentName);  	rd.SetValue (3' tableName.Name);  	rd.SetValue (4' expression.ToString ());  	rd.SetValue (5' (short)deferrability);  	if (colCount > 6) {  		rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  	}  	t.AddRow (rd);  } catch (UniqueKeyViolationException) {  	throw new InvalidOperationException ("Check constraint name '" + constraintName + "' is already being used.");  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: try {  	byte[] binExp;  	using (var stream = new MemoryStream ()) {  		using (var writer = new BinaryWriter (stream' Encoding.Unicode)) {  			SqlExpression.Serialize (expression' writer);  			writer.Flush ();  			binExp = stream.ToArray ();  		}  	}  	// Insert check constraint data.  	var uniqueId = transaction.NextTableId (tn);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	var rd = t.NewRow ();  	rd.SetValue (0' uniqueId);  	rd.SetValue (1' constraintName);  	rd.SetValue (2' tableName.ParentName);  	rd.SetValue (3' tableName.Name);  	rd.SetValue (4' expression.ToString ());  	rd.SetValue (5' (short)deferrability);  	if (colCount > 6) {  		rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  	}  	t.AddRow (rd);  } catch (UniqueKeyViolationException) {  	throw new InvalidOperationException ("Check constraint name '" + constraintName + "' is already being used.");  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: try {  	byte[] binExp;  	using (var stream = new MemoryStream ()) {  		using (var writer = new BinaryWriter (stream' Encoding.Unicode)) {  			SqlExpression.Serialize (expression' writer);  			writer.Flush ();  			binExp = stream.ToArray ();  		}  	}  	// Insert check constraint data.  	var uniqueId = transaction.NextTableId (tn);  	constraintName = MakeUniqueConstraintName (constraintName' uniqueId);  	var rd = t.NewRow ();  	rd.SetValue (0' uniqueId);  	rd.SetValue (1' constraintName);  	rd.SetValue (2' tableName.ParentName);  	rd.SetValue (3' tableName.Name);  	rd.SetValue (4' expression.ToString ());  	rd.SetValue (5' (short)deferrability);  	if (colCount > 6) {  		rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  	}  	t.AddRow (rd);  } catch (UniqueKeyViolationException) {  	throw new InvalidOperationException ("Check constraint name '" + constraintName + "' is already being used.");  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: rd.SetValue (2' tableName.ParentName);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: rd.SetValue (3' tableName.Name);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: rd.SetValue (4' expression.ToString ());  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: rd.SetValue (5' (short)deferrability);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: if (colCount > 6) {  	rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: if (colCount > 6) {  	rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,AddCheck,The following statement contains a magic number: rd.SetValue (6' Field.Binary (new SqlBinary (binExp)));  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,ToColumns,The following statement contains a magic number: for (int n = 0; n < size; ++n) {  	// for each i of the input list  	for (int i = 0; i < size; ++i) {  		int rowIndex = colList [i];  		int seqNo = ((SqlNumber)table.GetValue (rowIndex' 2).Value).ToInt32 ();  		if (seqNo == n) {  			list [n] = table.GetValue (rowIndex' 1).Value.ToString ();  			break;  		}  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,ToColumns,The following statement contains a magic number: for (int i = 0; i < size; ++i) {  	int rowIndex = colList [i];  	int seqNo = ((SqlNumber)table.GetValue (rowIndex' 2).Value).ToInt32 ();  	if (seqNo == n) {  		list [n] = table.GetValue (rowIndex' 1).Value.ToString ();  		break;  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Count; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referenced table  	var refTableName = new ObjectName (new ObjectName (t.GetValue (rowIndex' 4).Value.ToString ())' t.GetValue (rowIndex' 5).Value.ToString ());  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToList ();  	var name = t.GetValue (rowIndex' 1).Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).Value).ToInt16 ();  	;  	int colsSize = cols.Count;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  				refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Count; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referenced table  	var refTableName = new ObjectName (new ObjectName (t.GetValue (rowIndex' 4).Value.ToString ())' t.GetValue (rowIndex' 5).Value.ToString ());  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToList ();  	var name = t.GetValue (rowIndex' 1).Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).Value).ToInt16 ();  	;  	int colsSize = cols.Count;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  				refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Count; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referenced table  	var refTableName = new ObjectName (new ObjectName (t.GetValue (rowIndex' 4).Value.ToString ())' t.GetValue (rowIndex' 5).Value.ToString ());  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToList ();  	var name = t.GetValue (rowIndex' 1).Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).Value).ToInt16 ();  	;  	int colsSize = cols.Count;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  				refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Count; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referenced table  	var refTableName = new ObjectName (new ObjectName (t.GetValue (rowIndex' 4).Value.ToString ())' t.GetValue (rowIndex' 5).Value.ToString ());  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToList ();  	var name = t.GetValue (rowIndex' 1).Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).Value).ToInt16 ();  	;  	int colsSize = cols.Count;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  				refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Count; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referenced table  	var refTableName = new ObjectName (new ObjectName (t.GetValue (rowIndex' 4).Value.ToString ())' t.GetValue (rowIndex' 5).Value.ToString ());  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToList ();  	var name = t.GetValue (rowIndex' 1).Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).Value).ToInt16 ();  	;  	int colsSize = cols.Count;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  				refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Count; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referenced table  	var refTableName = new ObjectName (new ObjectName (t.GetValue (rowIndex' 4).Value.ToString ())' t.GetValue (rowIndex' 5).Value.ToString ());  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToList ();  	var name = t.GetValue (rowIndex' 1).Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).Value).ToInt16 ();  	;  	int colsSize = cols.Count;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  				refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Count; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referenced table  	var refTableName = new ObjectName (new ObjectName (t.GetValue (rowIndex' 4).Value.ToString ())' t.GetValue (rowIndex' 5).Value.ToString ());  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToList ();  	var name = t.GetValue (rowIndex' 1).Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).Value).ToInt16 ();  	;  	int colsSize = cols.Count;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  				refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int n = 0; n < colsSize; ++n) {  	for (int p = 0; p < colsSize; ++p) {  		int colsIndex = cols [p];  		if (t2.GetValue (colsIndex' 3) == n) {  			keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  			refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  			break;  		}  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int n = 0; n < colsSize; ++n) {  	for (int p = 0; p < colsSize; ++p) {  		int colsIndex = cols [p];  		if (t2.GetValue (colsIndex' 3) == n) {  			keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  			refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  			break;  		}  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int p = 0; p < colsSize; ++p) {  	int colsIndex = cols [p];  	if (t2.GetValue (colsIndex' 3) == n) {  		keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  		refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  		break;  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: for (int p = 0; p < colsSize; ++p) {  	int colsIndex = cols [p];  	if (t2.GetValue (colsIndex' 3) == n) {  		keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  		refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  		break;  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: if (t2.GetValue (colsIndex' 3) == n) {  	keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  	refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  	break;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: if (t2.GetValue (colsIndex' 3) == n) {  	keyCols [n] = t2.GetValue (colsIndex' 1).Value.ToString ();  	refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  	break;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableForeignKeys,The following statement contains a magic number: refCols [n] = t2.GetValue (colsIndex' 2).Value.ToString ();  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referencee table  	var schemaNamePart = t.GetValue (rowIndex' 2).AsVarChar ().Value.ToString ();  	var tableNamePart = t.GetValue (rowIndex' 3).AsVarChar ().Value.ToString ();  	var tableName = new ObjectName (new ObjectName (schemaNamePart)' tableNamePart);  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToArray ();  	var name = t.GetValue (rowIndex' 1).AsVarChar ().Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).AsBigInt ().Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).AsBigInt ().Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).AsBigInt ().Value).ToInt16 ();  	int colsSize = cols.Length;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1);  				refCols [n] = t2.GetValue (colsIndex' 2);  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referencee table  	var schemaNamePart = t.GetValue (rowIndex' 2).AsVarChar ().Value.ToString ();  	var tableNamePart = t.GetValue (rowIndex' 3).AsVarChar ().Value.ToString ();  	var tableName = new ObjectName (new ObjectName (schemaNamePart)' tableNamePart);  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToArray ();  	var name = t.GetValue (rowIndex' 1).AsVarChar ().Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).AsBigInt ().Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).AsBigInt ().Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).AsBigInt ().Value).ToInt16 ();  	int colsSize = cols.Length;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1);  				refCols [n] = t2.GetValue (colsIndex' 2);  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referencee table  	var schemaNamePart = t.GetValue (rowIndex' 2).AsVarChar ().Value.ToString ();  	var tableNamePart = t.GetValue (rowIndex' 3).AsVarChar ().Value.ToString ();  	var tableName = new ObjectName (new ObjectName (schemaNamePart)' tableNamePart);  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToArray ();  	var name = t.GetValue (rowIndex' 1).AsVarChar ().Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).AsBigInt ().Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).AsBigInt ().Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).AsBigInt ().Value).ToInt16 ();  	int colsSize = cols.Length;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1);  				refCols [n] = t2.GetValue (colsIndex' 2);  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referencee table  	var schemaNamePart = t.GetValue (rowIndex' 2).AsVarChar ().Value.ToString ();  	var tableNamePart = t.GetValue (rowIndex' 3).AsVarChar ().Value.ToString ();  	var tableName = new ObjectName (new ObjectName (schemaNamePart)' tableNamePart);  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToArray ();  	var name = t.GetValue (rowIndex' 1).AsVarChar ().Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).AsBigInt ().Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).AsBigInt ().Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).AsBigInt ().Value).ToInt16 ();  	int colsSize = cols.Length;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1);  				refCols [n] = t2.GetValue (colsIndex' 2);  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referencee table  	var schemaNamePart = t.GetValue (rowIndex' 2).AsVarChar ().Value.ToString ();  	var tableNamePart = t.GetValue (rowIndex' 3).AsVarChar ().Value.ToString ();  	var tableName = new ObjectName (new ObjectName (schemaNamePart)' tableNamePart);  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToArray ();  	var name = t.GetValue (rowIndex' 1).AsVarChar ().Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).AsBigInt ().Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).AsBigInt ().Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).AsBigInt ().Value).ToInt16 ();  	int colsSize = cols.Length;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1);  				refCols [n] = t2.GetValue (colsIndex' 2);  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referencee table  	var schemaNamePart = t.GetValue (rowIndex' 2).AsVarChar ().Value.ToString ();  	var tableNamePart = t.GetValue (rowIndex' 3).AsVarChar ().Value.ToString ();  	var tableName = new ObjectName (new ObjectName (schemaNamePart)' tableNamePart);  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToArray ();  	var name = t.GetValue (rowIndex' 1).AsVarChar ().Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).AsBigInt ().Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).AsBigInt ().Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).AsBigInt ().Value).ToInt16 ();  	int colsSize = cols.Length;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1);  				refCols [n] = t2.GetValue (colsIndex' 2);  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i) {  	int rowIndex = data [i];  	// The foreign key id  	var id = t.GetValue (rowIndex' 0);  	// The referencee table  	var schemaNamePart = t.GetValue (rowIndex' 2).AsVarChar ().Value.ToString ();  	var tableNamePart = t.GetValue (rowIndex' 3).AsVarChar ().Value.ToString ();  	var tableName = new ObjectName (new ObjectName (schemaNamePart)' tableNamePart);  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id).ToArray ();  	var name = t.GetValue (rowIndex' 1).AsVarChar ().Value.ToString ();  	var updateRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 6).AsBigInt ().Value).ToInt32 ();  	var deleteRule = (ForeignKeyAction)((SqlNumber)t.GetValue (rowIndex' 7).AsBigInt ().Value).ToInt32 ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 8).AsBigInt ().Value).ToInt16 ();  	int colsSize = cols.Length;  	string[] keyCols = new string[colsSize];  	string[] refCols = new string[colsSize];  	for (int n = 0; n < colsSize; ++n) {  		for (int p = 0; p < colsSize; ++p) {  			int colsIndex = cols [p];  			if (t2.GetValue (colsIndex' 3) == n) {  				keyCols [n] = t2.GetValue (colsIndex' 1);  				refCols [n] = t2.GetValue (colsIndex' 2);  				break;  			}  		}  	}  	var constraint = ConstraintInfo.ForeignKey (name' tableName' keyCols' refTableName' refCols);  	constraint.OnDelete = deleteRule;  	constraint.OnUpdate = updateRule;  	constraint.Deferred = deferred;  	groups [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int n = 0; n < colsSize; ++n) {  	for (int p = 0; p < colsSize; ++p) {  		int colsIndex = cols [p];  		if (t2.GetValue (colsIndex' 3) == n) {  			keyCols [n] = t2.GetValue (colsIndex' 1);  			refCols [n] = t2.GetValue (colsIndex' 2);  			break;  		}  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int n = 0; n < colsSize; ++n) {  	for (int p = 0; p < colsSize; ++p) {  		int colsIndex = cols [p];  		if (t2.GetValue (colsIndex' 3) == n) {  			keyCols [n] = t2.GetValue (colsIndex' 1);  			refCols [n] = t2.GetValue (colsIndex' 2);  			break;  		}  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int p = 0; p < colsSize; ++p) {  	int colsIndex = cols [p];  	if (t2.GetValue (colsIndex' 3) == n) {  		keyCols [n] = t2.GetValue (colsIndex' 1);  		refCols [n] = t2.GetValue (colsIndex' 2);  		break;  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: for (int p = 0; p < colsSize; ++p) {  	int colsIndex = cols [p];  	if (t2.GetValue (colsIndex' 3) == n) {  		keyCols [n] = t2.GetValue (colsIndex' 1);  		refCols [n] = t2.GetValue (colsIndex' 2);  		break;  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: if (t2.GetValue (colsIndex' 3) == n) {  	keyCols [n] = t2.GetValue (colsIndex' 1);  	refCols [n] = t2.GetValue (colsIndex' 2);  	break;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: if (t2.GetValue (colsIndex' 3) == n) {  	keyCols [n] = t2.GetValue (colsIndex' 1);  	refCols [n] = t2.GetValue (colsIndex' 2);  	break;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableImportedForeignKeys,The following statement contains a magic number: refCols [n] = t2.GetValue (colsIndex' 2);  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableUniqueKeys,The following statement contains a magic number: for (int i = 0; i < data.Count; ++i) {  	var id = t.GetValue (data [i]' 0);  	// Select all records with equal id  	var cols = t2.SelectRowsEqual (0' id);  	var name = t.GetValue (data [i]' 1).Value.ToString ();  	var columns = ToColumns (t2' cols);  	// the list of columns  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (data [i]' 4).Value).ToInt16 ();  	var constraint = ConstraintInfo.Unique (name' tableName' columns);  	constraint.Deferred = deferred;  	constraints [i] = constraint;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The following statement contains a magic number: for (int i = 0; i < checks.Length; ++i) {  	int rowIndex = data [i];  	string name = t.GetValue (rowIndex' 1).Value.ToString ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 5).Value).ToInt16 ();  	SqlExpression expression = null;  	// Is the deserialized version available?  	if (t.TableInfo.ColumnCount > 6) {  		var sexp = (SqlBinary)t.GetValue (rowIndex' 6).Value;  		if (!sexp.IsNull) {  			try {  				// Deserialize the expression  				// TODO: expression = (SqlExpression)ObjectTranslator.Deserialize(sexp);  				throw new NotImplementedException ();  			} catch (Exception) {  				// We weren't able to deserialize the expression so report the  				// error to the log  				// TODO:  			}  		}  	}  	// Otherwise we need to parse it from the string  	if (expression == null) {  		expression = SqlExpression.Parse (t.GetValue (rowIndex' 4).Value.ToString ());  	}  	var check = ConstraintInfo.Check (name' tableName' expression);  	check.Deferred = deferred;  	checks [i] = check;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The following statement contains a magic number: for (int i = 0; i < checks.Length; ++i) {  	int rowIndex = data [i];  	string name = t.GetValue (rowIndex' 1).Value.ToString ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 5).Value).ToInt16 ();  	SqlExpression expression = null;  	// Is the deserialized version available?  	if (t.TableInfo.ColumnCount > 6) {  		var sexp = (SqlBinary)t.GetValue (rowIndex' 6).Value;  		if (!sexp.IsNull) {  			try {  				// Deserialize the expression  				// TODO: expression = (SqlExpression)ObjectTranslator.Deserialize(sexp);  				throw new NotImplementedException ();  			} catch (Exception) {  				// We weren't able to deserialize the expression so report the  				// error to the log  				// TODO:  			}  		}  	}  	// Otherwise we need to parse it from the string  	if (expression == null) {  		expression = SqlExpression.Parse (t.GetValue (rowIndex' 4).Value.ToString ());  	}  	var check = ConstraintInfo.Check (name' tableName' expression);  	check.Deferred = deferred;  	checks [i] = check;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The following statement contains a magic number: for (int i = 0; i < checks.Length; ++i) {  	int rowIndex = data [i];  	string name = t.GetValue (rowIndex' 1).Value.ToString ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 5).Value).ToInt16 ();  	SqlExpression expression = null;  	// Is the deserialized version available?  	if (t.TableInfo.ColumnCount > 6) {  		var sexp = (SqlBinary)t.GetValue (rowIndex' 6).Value;  		if (!sexp.IsNull) {  			try {  				// Deserialize the expression  				// TODO: expression = (SqlExpression)ObjectTranslator.Deserialize(sexp);  				throw new NotImplementedException ();  			} catch (Exception) {  				// We weren't able to deserialize the expression so report the  				// error to the log  				// TODO:  			}  		}  	}  	// Otherwise we need to parse it from the string  	if (expression == null) {  		expression = SqlExpression.Parse (t.GetValue (rowIndex' 4).Value.ToString ());  	}  	var check = ConstraintInfo.Check (name' tableName' expression);  	check.Deferred = deferred;  	checks [i] = check;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The following statement contains a magic number: for (int i = 0; i < checks.Length; ++i) {  	int rowIndex = data [i];  	string name = t.GetValue (rowIndex' 1).Value.ToString ();  	var deferred = (ConstraintDeferrability)((SqlNumber)t.GetValue (rowIndex' 5).Value).ToInt16 ();  	SqlExpression expression = null;  	// Is the deserialized version available?  	if (t.TableInfo.ColumnCount > 6) {  		var sexp = (SqlBinary)t.GetValue (rowIndex' 6).Value;  		if (!sexp.IsNull) {  			try {  				// Deserialize the expression  				// TODO: expression = (SqlExpression)ObjectTranslator.Deserialize(sexp);  				throw new NotImplementedException ();  			} catch (Exception) {  				// We weren't able to deserialize the expression so report the  				// error to the log  				// TODO:  			}  		}  	}  	// Otherwise we need to parse it from the string  	if (expression == null) {  		expression = SqlExpression.Parse (t.GetValue (rowIndex' 4).Value.ToString ());  	}  	var check = ConstraintInfo.Check (name' tableName' expression);  	check.Deferred = deferred;  	checks [i] = check;  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The following statement contains a magic number: if (t.TableInfo.ColumnCount > 6) {  	var sexp = (SqlBinary)t.GetValue (rowIndex' 6).Value;  	if (!sexp.IsNull) {  		try {  			// Deserialize the expression  			// TODO: expression = (SqlExpression)ObjectTranslator.Deserialize(sexp);  			throw new NotImplementedException ();  		} catch (Exception) {  			// We weren't able to deserialize the expression so report the  			// error to the log  			// TODO:  		}  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The following statement contains a magic number: if (t.TableInfo.ColumnCount > 6) {  	var sexp = (SqlBinary)t.GetValue (rowIndex' 6).Value;  	if (!sexp.IsNull) {  		try {  			// Deserialize the expression  			// TODO: expression = (SqlExpression)ObjectTranslator.Deserialize(sexp);  			throw new NotImplementedException ();  		} catch (Exception) {  			// We weren't able to deserialize the expression so report the  			// error to the log  			// TODO:  		}  	}  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The following statement contains a magic number: if (expression == null) {  	expression = SqlExpression.Parse (t.GetValue (rowIndex' 4).Value.ToString ());  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,QueryTableCheckExpressions,The following statement contains a magic number: expression = SqlExpression.Parse (t.GetValue (rowIndex' 4).Value.ToString ());  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,DropTablePrimaryKey,The following statement contains a magic number: if (constraintName != null) {  	// Returns the list of indexes where column 1 = constraint name  	//                               and column 2 = schema name  	data = t.SelectRowsEqual (1' Field.String (constraintName)' 2' Field.String (tableName.ParentName));  } else {  	// Returns the list of indexes where column 3 = table name  	//                               and column 2 = schema name  	data = t.SelectRowsEqual (3' Field.String (tableName.Name)' 2' Field.String (tableName.ParentName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,DropTablePrimaryKey,The following statement contains a magic number: if (constraintName != null) {  	// Returns the list of indexes where column 1 = constraint name  	//                               and column 2 = schema name  	data = t.SelectRowsEqual (1' Field.String (constraintName)' 2' Field.String (tableName.ParentName));  } else {  	// Returns the list of indexes where column 3 = table name  	//                               and column 2 = schema name  	data = t.SelectRowsEqual (3' Field.String (tableName.Name)' 2' Field.String (tableName.ParentName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,DropTablePrimaryKey,The following statement contains a magic number: if (constraintName != null) {  	// Returns the list of indexes where column 1 = constraint name  	//                               and column 2 = schema name  	data = t.SelectRowsEqual (1' Field.String (constraintName)' 2' Field.String (tableName.ParentName));  } else {  	// Returns the list of indexes where column 3 = table name  	//                               and column 2 = schema name  	data = t.SelectRowsEqual (3' Field.String (tableName.Name)' 2' Field.String (tableName.ParentName));  }  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,DropTablePrimaryKey,The following statement contains a magic number: data = t.SelectRowsEqual (1' Field.String (constraintName)' 2' Field.String (tableName.ParentName));  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,DropTablePrimaryKey,The following statement contains a magic number: data = t.SelectRowsEqual (3' Field.String (tableName.Name)' 2' Field.String (tableName.ParentName));  
Magic Number,Deveel.Data.Transactions,TransactionConstraintExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Transactions\TransactionConstraintExtensions.cs,DropTablePrimaryKey,The following statement contains a magic number: data = t.SelectRowsEqual (3' Field.String (tableName.Name)' 2' Field.String (tableName.ParentName));  
Magic Number,Deveel.Data.Util,BytesUtil,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\BytesUtil.cs,URShift,The following statement contains a magic number: return (number >> bits) + (2 << ~bits);  
Magic Number,Deveel.Data.Util,StreamExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\StreamExtensions.cs,CopyTo,The following statement contains a magic number: CopyTo (source' destination' 2048);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	char c = '\0';  	int pos = 0;  	// Leading whitespaces must be deleted first.  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	// If empty line or begins with a comment character' skip this line.  	if ((line.Length - pos) == 0 || line [pos] == '#' || line [pos] == '!')  		continue;  	// The characters up to the next Whitespace' ':'' or '='  	// describe the key.  But look for escape sequences.  	// Try to short-circuit when there is no escape char.  	int start = pos;  	bool needsEscape = line.IndexOf ('\\'' pos) != -1;  	StringBuilder key = needsEscape ? new StringBuilder () : null;  	while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  		if (needsEscape && c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  If there  				// is no next line' just treat it as a key with an  				// empty value.  				line = reader.ReadLine ();  				if (line == null)  					line = "";  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					key.Append ('\n');  					break;  				case 't':  					key.Append ('\t');  					break;  				case 'r':  					key.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						key.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					key.Append (c);  					break;  				}  			}  		} else if (needsEscape)  			key.Append (c);  	}  	bool isDelim = (c == ':' || c == '=');  	String keyString;  	if (needsEscape)  		keyString = key.ToString ();  	else if (isDelim || Char.IsWhiteSpace (c))  		keyString = line.Substring (start' (pos - 1) - start);  	else  		keyString = line.Substring (start' pos - start);  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	if (!isDelim && (c == ':' || c == '=')) {  		pos++;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	}  	// Short-circuit if no escape chars found.  	if (!needsEscape) {  		this [keyString] = line.Substring (pos);  		continue;  	}  	// Escape char found so iterate through the rest of the line.  	StringBuilder element = new StringBuilder (line.Length - pos);  	while (pos < line.Length) {  		c = line [pos++];  		if (c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  				line = reader.ReadLine ();  				// We might have seen a backslash at the end of  				// the file.  The JDK ignores the backslash in  				// this case' so we follow for compatibility.  				if (line == null)  					break;  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  				element.EnsureCapacity (line.Length - pos + element.Length);  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					element.Append ('\n');  					break;  				case 't':  					element.Append ('\t');  					break;  				case 'r':  					element.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						element.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					element.Append (c);  					break;  				}  			}  		} else  			element.Append (c);  	}  	this [keyString] = element.ToString ();  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	char c = '\0';  	int pos = 0;  	// Leading whitespaces must be deleted first.  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	// If empty line or begins with a comment character' skip this line.  	if ((line.Length - pos) == 0 || line [pos] == '#' || line [pos] == '!')  		continue;  	// The characters up to the next Whitespace' ':'' or '='  	// describe the key.  But look for escape sequences.  	// Try to short-circuit when there is no escape char.  	int start = pos;  	bool needsEscape = line.IndexOf ('\\'' pos) != -1;  	StringBuilder key = needsEscape ? new StringBuilder () : null;  	while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  		if (needsEscape && c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  If there  				// is no next line' just treat it as a key with an  				// empty value.  				line = reader.ReadLine ();  				if (line == null)  					line = "";  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					key.Append ('\n');  					break;  				case 't':  					key.Append ('\t');  					break;  				case 'r':  					key.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						key.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					key.Append (c);  					break;  				}  			}  		} else if (needsEscape)  			key.Append (c);  	}  	bool isDelim = (c == ':' || c == '=');  	String keyString;  	if (needsEscape)  		keyString = key.ToString ();  	else if (isDelim || Char.IsWhiteSpace (c))  		keyString = line.Substring (start' (pos - 1) - start);  	else  		keyString = line.Substring (start' pos - start);  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	if (!isDelim && (c == ':' || c == '=')) {  		pos++;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	}  	// Short-circuit if no escape chars found.  	if (!needsEscape) {  		this [keyString] = line.Substring (pos);  		continue;  	}  	// Escape char found so iterate through the rest of the line.  	StringBuilder element = new StringBuilder (line.Length - pos);  	while (pos < line.Length) {  		c = line [pos++];  		if (c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  				line = reader.ReadLine ();  				// We might have seen a backslash at the end of  				// the file.  The JDK ignores the backslash in  				// this case' so we follow for compatibility.  				if (line == null)  					break;  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  				element.EnsureCapacity (line.Length - pos + element.Length);  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					element.Append ('\n');  					break;  				case 't':  					element.Append ('\t');  					break;  				case 'r':  					element.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						element.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					element.Append (c);  					break;  				}  			}  		} else  			element.Append (c);  	}  	this [keyString] = element.ToString ();  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	char c = '\0';  	int pos = 0;  	// Leading whitespaces must be deleted first.  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	// If empty line or begins with a comment character' skip this line.  	if ((line.Length - pos) == 0 || line [pos] == '#' || line [pos] == '!')  		continue;  	// The characters up to the next Whitespace' ':'' or '='  	// describe the key.  But look for escape sequences.  	// Try to short-circuit when there is no escape char.  	int start = pos;  	bool needsEscape = line.IndexOf ('\\'' pos) != -1;  	StringBuilder key = needsEscape ? new StringBuilder () : null;  	while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  		if (needsEscape && c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  If there  				// is no next line' just treat it as a key with an  				// empty value.  				line = reader.ReadLine ();  				if (line == null)  					line = "";  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					key.Append ('\n');  					break;  				case 't':  					key.Append ('\t');  					break;  				case 'r':  					key.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						key.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					key.Append (c);  					break;  				}  			}  		} else if (needsEscape)  			key.Append (c);  	}  	bool isDelim = (c == ':' || c == '=');  	String keyString;  	if (needsEscape)  		keyString = key.ToString ();  	else if (isDelim || Char.IsWhiteSpace (c))  		keyString = line.Substring (start' (pos - 1) - start);  	else  		keyString = line.Substring (start' pos - start);  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	if (!isDelim && (c == ':' || c == '=')) {  		pos++;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	}  	// Short-circuit if no escape chars found.  	if (!needsEscape) {  		this [keyString] = line.Substring (pos);  		continue;  	}  	// Escape char found so iterate through the rest of the line.  	StringBuilder element = new StringBuilder (line.Length - pos);  	while (pos < line.Length) {  		c = line [pos++];  		if (c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  				line = reader.ReadLine ();  				// We might have seen a backslash at the end of  				// the file.  The JDK ignores the backslash in  				// this case' so we follow for compatibility.  				if (line == null)  					break;  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  				element.EnsureCapacity (line.Length - pos + element.Length);  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					element.Append ('\n');  					break;  				case 't':  					element.Append ('\t');  					break;  				case 'r':  					element.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						element.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					element.Append (c);  					break;  				}  			}  		} else  			element.Append (c);  	}  	this [keyString] = element.ToString ();  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	char c = '\0';  	int pos = 0;  	// Leading whitespaces must be deleted first.  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	// If empty line or begins with a comment character' skip this line.  	if ((line.Length - pos) == 0 || line [pos] == '#' || line [pos] == '!')  		continue;  	// The characters up to the next Whitespace' ':'' or '='  	// describe the key.  But look for escape sequences.  	// Try to short-circuit when there is no escape char.  	int start = pos;  	bool needsEscape = line.IndexOf ('\\'' pos) != -1;  	StringBuilder key = needsEscape ? new StringBuilder () : null;  	while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  		if (needsEscape && c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  If there  				// is no next line' just treat it as a key with an  				// empty value.  				line = reader.ReadLine ();  				if (line == null)  					line = "";  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					key.Append ('\n');  					break;  				case 't':  					key.Append ('\t');  					break;  				case 'r':  					key.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						key.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					key.Append (c);  					break;  				}  			}  		} else if (needsEscape)  			key.Append (c);  	}  	bool isDelim = (c == ':' || c == '=');  	String keyString;  	if (needsEscape)  		keyString = key.ToString ();  	else if (isDelim || Char.IsWhiteSpace (c))  		keyString = line.Substring (start' (pos - 1) - start);  	else  		keyString = line.Substring (start' pos - start);  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	if (!isDelim && (c == ':' || c == '=')) {  		pos++;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	}  	// Short-circuit if no escape chars found.  	if (!needsEscape) {  		this [keyString] = line.Substring (pos);  		continue;  	}  	// Escape char found so iterate through the rest of the line.  	StringBuilder element = new StringBuilder (line.Length - pos);  	while (pos < line.Length) {  		c = line [pos++];  		if (c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  				line = reader.ReadLine ();  				// We might have seen a backslash at the end of  				// the file.  The JDK ignores the backslash in  				// this case' so we follow for compatibility.  				if (line == null)  					break;  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  				element.EnsureCapacity (line.Length - pos + element.Length);  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					element.Append ('\n');  					break;  				case 't':  					element.Append ('\t');  					break;  				case 'r':  					element.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						element.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					element.Append (c);  					break;  				}  			}  		} else  			element.Append (c);  	}  	this [keyString] = element.ToString ();  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	char c = '\0';  	int pos = 0;  	// Leading whitespaces must be deleted first.  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	// If empty line or begins with a comment character' skip this line.  	if ((line.Length - pos) == 0 || line [pos] == '#' || line [pos] == '!')  		continue;  	// The characters up to the next Whitespace' ':'' or '='  	// describe the key.  But look for escape sequences.  	// Try to short-circuit when there is no escape char.  	int start = pos;  	bool needsEscape = line.IndexOf ('\\'' pos) != -1;  	StringBuilder key = needsEscape ? new StringBuilder () : null;  	while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  		if (needsEscape && c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  If there  				// is no next line' just treat it as a key with an  				// empty value.  				line = reader.ReadLine ();  				if (line == null)  					line = "";  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					key.Append ('\n');  					break;  				case 't':  					key.Append ('\t');  					break;  				case 'r':  					key.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						key.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					key.Append (c);  					break;  				}  			}  		} else if (needsEscape)  			key.Append (c);  	}  	bool isDelim = (c == ':' || c == '=');  	String keyString;  	if (needsEscape)  		keyString = key.ToString ();  	else if (isDelim || Char.IsWhiteSpace (c))  		keyString = line.Substring (start' (pos - 1) - start);  	else  		keyString = line.Substring (start' pos - start);  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	if (!isDelim && (c == ':' || c == '=')) {  		pos++;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	}  	// Short-circuit if no escape chars found.  	if (!needsEscape) {  		this [keyString] = line.Substring (pos);  		continue;  	}  	// Escape char found so iterate through the rest of the line.  	StringBuilder element = new StringBuilder (line.Length - pos);  	while (pos < line.Length) {  		c = line [pos++];  		if (c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  				line = reader.ReadLine ();  				// We might have seen a backslash at the end of  				// the file.  The JDK ignores the backslash in  				// this case' so we follow for compatibility.  				if (line == null)  					break;  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  				element.EnsureCapacity (line.Length - pos + element.Length);  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					element.Append ('\n');  					break;  				case 't':  					element.Append ('\t');  					break;  				case 'r':  					element.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						element.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					element.Append (c);  					break;  				}  			}  		} else  			element.Append (c);  	}  	this [keyString] = element.ToString ();  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	char c = '\0';  	int pos = 0;  	// Leading whitespaces must be deleted first.  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	// If empty line or begins with a comment character' skip this line.  	if ((line.Length - pos) == 0 || line [pos] == '#' || line [pos] == '!')  		continue;  	// The characters up to the next Whitespace' ':'' or '='  	// describe the key.  But look for escape sequences.  	// Try to short-circuit when there is no escape char.  	int start = pos;  	bool needsEscape = line.IndexOf ('\\'' pos) != -1;  	StringBuilder key = needsEscape ? new StringBuilder () : null;  	while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  		if (needsEscape && c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  If there  				// is no next line' just treat it as a key with an  				// empty value.  				line = reader.ReadLine ();  				if (line == null)  					line = "";  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					key.Append ('\n');  					break;  				case 't':  					key.Append ('\t');  					break;  				case 'r':  					key.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						key.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					key.Append (c);  					break;  				}  			}  		} else if (needsEscape)  			key.Append (c);  	}  	bool isDelim = (c == ':' || c == '=');  	String keyString;  	if (needsEscape)  		keyString = key.ToString ();  	else if (isDelim || Char.IsWhiteSpace (c))  		keyString = line.Substring (start' (pos - 1) - start);  	else  		keyString = line.Substring (start' pos - start);  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	if (!isDelim && (c == ':' || c == '=')) {  		pos++;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	}  	// Short-circuit if no escape chars found.  	if (!needsEscape) {  		this [keyString] = line.Substring (pos);  		continue;  	}  	// Escape char found so iterate through the rest of the line.  	StringBuilder element = new StringBuilder (line.Length - pos);  	while (pos < line.Length) {  		c = line [pos++];  		if (c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  				line = reader.ReadLine ();  				// We might have seen a backslash at the end of  				// the file.  The JDK ignores the backslash in  				// this case' so we follow for compatibility.  				if (line == null)  					break;  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  				element.EnsureCapacity (line.Length - pos + element.Length);  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					element.Append ('\n');  					break;  				case 't':  					element.Append ('\t');  					break;  				case 'r':  					element.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						element.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					element.Append (c);  					break;  				}  			}  		} else  			element.Append (c);  	}  	this [keyString] = element.ToString ();  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	char c = '\0';  	int pos = 0;  	// Leading whitespaces must be deleted first.  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	// If empty line or begins with a comment character' skip this line.  	if ((line.Length - pos) == 0 || line [pos] == '#' || line [pos] == '!')  		continue;  	// The characters up to the next Whitespace' ':'' or '='  	// describe the key.  But look for escape sequences.  	// Try to short-circuit when there is no escape char.  	int start = pos;  	bool needsEscape = line.IndexOf ('\\'' pos) != -1;  	StringBuilder key = needsEscape ? new StringBuilder () : null;  	while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  		if (needsEscape && c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  If there  				// is no next line' just treat it as a key with an  				// empty value.  				line = reader.ReadLine ();  				if (line == null)  					line = "";  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					key.Append ('\n');  					break;  				case 't':  					key.Append ('\t');  					break;  				case 'r':  					key.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						key.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					key.Append (c);  					break;  				}  			}  		} else if (needsEscape)  			key.Append (c);  	}  	bool isDelim = (c == ':' || c == '=');  	String keyString;  	if (needsEscape)  		keyString = key.ToString ();  	else if (isDelim || Char.IsWhiteSpace (c))  		keyString = line.Substring (start' (pos - 1) - start);  	else  		keyString = line.Substring (start' pos - start);  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	if (!isDelim && (c == ':' || c == '=')) {  		pos++;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	}  	// Short-circuit if no escape chars found.  	if (!needsEscape) {  		this [keyString] = line.Substring (pos);  		continue;  	}  	// Escape char found so iterate through the rest of the line.  	StringBuilder element = new StringBuilder (line.Length - pos);  	while (pos < line.Length) {  		c = line [pos++];  		if (c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  				line = reader.ReadLine ();  				// We might have seen a backslash at the end of  				// the file.  The JDK ignores the backslash in  				// this case' so we follow for compatibility.  				if (line == null)  					break;  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  				element.EnsureCapacity (line.Length - pos + element.Length);  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					element.Append ('\n');  					break;  				case 't':  					element.Append ('\t');  					break;  				case 'r':  					element.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						element.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					element.Append (c);  					break;  				}  			}  		} else  			element.Append (c);  	}  	this [keyString] = element.ToString ();  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	char c = '\0';  	int pos = 0;  	// Leading whitespaces must be deleted first.  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	// If empty line or begins with a comment character' skip this line.  	if ((line.Length - pos) == 0 || line [pos] == '#' || line [pos] == '!')  		continue;  	// The characters up to the next Whitespace' ':'' or '='  	// describe the key.  But look for escape sequences.  	// Try to short-circuit when there is no escape char.  	int start = pos;  	bool needsEscape = line.IndexOf ('\\'' pos) != -1;  	StringBuilder key = needsEscape ? new StringBuilder () : null;  	while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  		if (needsEscape && c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  If there  				// is no next line' just treat it as a key with an  				// empty value.  				line = reader.ReadLine ();  				if (line == null)  					line = "";  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					key.Append ('\n');  					break;  				case 't':  					key.Append ('\t');  					break;  				case 'r':  					key.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						key.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					key.Append (c);  					break;  				}  			}  		} else if (needsEscape)  			key.Append (c);  	}  	bool isDelim = (c == ':' || c == '=');  	String keyString;  	if (needsEscape)  		keyString = key.ToString ();  	else if (isDelim || Char.IsWhiteSpace (c))  		keyString = line.Substring (start' (pos - 1) - start);  	else  		keyString = line.Substring (start' pos - start);  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	if (!isDelim && (c == ':' || c == '=')) {  		pos++;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	}  	// Short-circuit if no escape chars found.  	if (!needsEscape) {  		this [keyString] = line.Substring (pos);  		continue;  	}  	// Escape char found so iterate through the rest of the line.  	StringBuilder element = new StringBuilder (line.Length - pos);  	while (pos < line.Length) {  		c = line [pos++];  		if (c == '\\') {  			if (pos == line.Length) {  				// The line continues on the next line.  				line = reader.ReadLine ();  				// We might have seen a backslash at the end of  				// the file.  The JDK ignores the backslash in  				// this case' so we follow for compatibility.  				if (line == null)  					break;  				pos = 0;  				while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  					pos++;  				element.EnsureCapacity (line.Length - pos + element.Length);  			} else {  				c = line [pos++];  				switch (c) {  				case 'n':  					element.Append ('\n');  					break;  				case 't':  					element.Append ('\t');  					break;  				case 'r':  					element.Append ('\r');  					break;  				case 'u':  					if (pos + 4 <= line.Length) {  						char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  						element.Append (uni);  						pos += 4;  					}  					// else throw exception?  					break;  				default:  					element.Append (c);  					break;  				}  			}  		} else  			element.Append (c);  	}  	this [keyString] = element.ToString ();  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  	if (needsEscape && c == '\\') {  		if (pos == line.Length) {  			// The line continues on the next line.  If there  			// is no next line' just treat it as a key with an  			// empty value.  			line = reader.ReadLine ();  			if (line == null)  				line = "";  			pos = 0;  			while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  				pos++;  		} else {  			c = line [pos++];  			switch (c) {  			case 'n':  				key.Append ('\n');  				break;  			case 't':  				key.Append ('\t');  				break;  			case 'r':  				key.Append ('\r');  				break;  			case 'u':  				if (pos + 4 <= line.Length) {  					char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  					key.Append (uni);  					pos += 4;  				}  				// else throw exception?  				break;  			default:  				key.Append (c);  				break;  			}  		}  	} else if (needsEscape)  		key.Append (c);  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  	if (needsEscape && c == '\\') {  		if (pos == line.Length) {  			// The line continues on the next line.  If there  			// is no next line' just treat it as a key with an  			// empty value.  			line = reader.ReadLine ();  			if (line == null)  				line = "";  			pos = 0;  			while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  				pos++;  		} else {  			c = line [pos++];  			switch (c) {  			case 'n':  				key.Append ('\n');  				break;  			case 't':  				key.Append ('\t');  				break;  			case 'r':  				key.Append ('\r');  				break;  			case 'u':  				if (pos + 4 <= line.Length) {  					char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  					key.Append (uni);  					pos += 4;  				}  				// else throw exception?  				break;  			default:  				key.Append (c);  				break;  			}  		}  	} else if (needsEscape)  		key.Append (c);  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  	if (needsEscape && c == '\\') {  		if (pos == line.Length) {  			// The line continues on the next line.  If there  			// is no next line' just treat it as a key with an  			// empty value.  			line = reader.ReadLine ();  			if (line == null)  				line = "";  			pos = 0;  			while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  				pos++;  		} else {  			c = line [pos++];  			switch (c) {  			case 'n':  				key.Append ('\n');  				break;  			case 't':  				key.Append ('\t');  				break;  			case 'r':  				key.Append ('\r');  				break;  			case 'u':  				if (pos + 4 <= line.Length) {  					char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  					key.Append (uni);  					pos += 4;  				}  				// else throw exception?  				break;  			default:  				key.Append (c);  				break;  			}  		}  	} else if (needsEscape)  		key.Append (c);  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while (pos < line.Length && !Char.IsWhiteSpace (c = line [pos++]) && c != '=' && c != ':') {  	if (needsEscape && c == '\\') {  		if (pos == line.Length) {  			// The line continues on the next line.  If there  			// is no next line' just treat it as a key with an  			// empty value.  			line = reader.ReadLine ();  			if (line == null)  				line = "";  			pos = 0;  			while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  				pos++;  		} else {  			c = line [pos++];  			switch (c) {  			case 'n':  				key.Append ('\n');  				break;  			case 't':  				key.Append ('\t');  				break;  			case 'r':  				key.Append ('\r');  				break;  			case 'u':  				if (pos + 4 <= line.Length) {  					char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  					key.Append (uni);  					pos += 4;  				}  				// else throw exception?  				break;  			default:  				key.Append (c);  				break;  			}  		}  	} else if (needsEscape)  		key.Append (c);  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (needsEscape && c == '\\') {  	if (pos == line.Length) {  		// The line continues on the next line.  If there  		// is no next line' just treat it as a key with an  		// empty value.  		line = reader.ReadLine ();  		if (line == null)  			line = "";  		pos = 0;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	} else {  		c = line [pos++];  		switch (c) {  		case 'n':  			key.Append ('\n');  			break;  		case 't':  			key.Append ('\t');  			break;  		case 'r':  			key.Append ('\r');  			break;  		case 'u':  			if (pos + 4 <= line.Length) {  				char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  				key.Append (uni);  				pos += 4;  			}  			// else throw exception?  			break;  		default:  			key.Append (c);  			break;  		}  	}  } else if (needsEscape)  	key.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (needsEscape && c == '\\') {  	if (pos == line.Length) {  		// The line continues on the next line.  If there  		// is no next line' just treat it as a key with an  		// empty value.  		line = reader.ReadLine ();  		if (line == null)  			line = "";  		pos = 0;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	} else {  		c = line [pos++];  		switch (c) {  		case 'n':  			key.Append ('\n');  			break;  		case 't':  			key.Append ('\t');  			break;  		case 'r':  			key.Append ('\r');  			break;  		case 'u':  			if (pos + 4 <= line.Length) {  				char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  				key.Append (uni);  				pos += 4;  			}  			// else throw exception?  			break;  		default:  			key.Append (c);  			break;  		}  	}  } else if (needsEscape)  	key.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (needsEscape && c == '\\') {  	if (pos == line.Length) {  		// The line continues on the next line.  If there  		// is no next line' just treat it as a key with an  		// empty value.  		line = reader.ReadLine ();  		if (line == null)  			line = "";  		pos = 0;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	} else {  		c = line [pos++];  		switch (c) {  		case 'n':  			key.Append ('\n');  			break;  		case 't':  			key.Append ('\t');  			break;  		case 'r':  			key.Append ('\r');  			break;  		case 'u':  			if (pos + 4 <= line.Length) {  				char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  				key.Append (uni);  				pos += 4;  			}  			// else throw exception?  			break;  		default:  			key.Append (c);  			break;  		}  	}  } else if (needsEscape)  	key.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (needsEscape && c == '\\') {  	if (pos == line.Length) {  		// The line continues on the next line.  If there  		// is no next line' just treat it as a key with an  		// empty value.  		line = reader.ReadLine ();  		if (line == null)  			line = "";  		pos = 0;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  	} else {  		c = line [pos++];  		switch (c) {  		case 'n':  			key.Append ('\n');  			break;  		case 't':  			key.Append ('\t');  			break;  		case 'r':  			key.Append ('\r');  			break;  		case 'u':  			if (pos + 4 <= line.Length) {  				char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  				key.Append (uni);  				pos += 4;  			}  			// else throw exception?  			break;  		default:  			key.Append (c);  			break;  		}  	}  } else if (needsEscape)  	key.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos == line.Length) {  	// The line continues on the next line.  If there  	// is no next line' just treat it as a key with an  	// empty value.  	line = reader.ReadLine ();  	if (line == null)  		line = "";  	pos = 0;  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  } else {  	c = line [pos++];  	switch (c) {  	case 'n':  		key.Append ('\n');  		break;  	case 't':  		key.Append ('\t');  		break;  	case 'r':  		key.Append ('\r');  		break;  	case 'u':  		if (pos + 4 <= line.Length) {  			char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  			key.Append (uni);  			pos += 4;  		}  		// else throw exception?  		break;  	default:  		key.Append (c);  		break;  	}  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos == line.Length) {  	// The line continues on the next line.  If there  	// is no next line' just treat it as a key with an  	// empty value.  	line = reader.ReadLine ();  	if (line == null)  		line = "";  	pos = 0;  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  } else {  	c = line [pos++];  	switch (c) {  	case 'n':  		key.Append ('\n');  		break;  	case 't':  		key.Append ('\t');  		break;  	case 'r':  		key.Append ('\r');  		break;  	case 'u':  		if (pos + 4 <= line.Length) {  			char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  			key.Append (uni);  			pos += 4;  		}  		// else throw exception?  		break;  	default:  		key.Append (c);  		break;  	}  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos == line.Length) {  	// The line continues on the next line.  If there  	// is no next line' just treat it as a key with an  	// empty value.  	line = reader.ReadLine ();  	if (line == null)  		line = "";  	pos = 0;  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  } else {  	c = line [pos++];  	switch (c) {  	case 'n':  		key.Append ('\n');  		break;  	case 't':  		key.Append ('\t');  		break;  	case 'r':  		key.Append ('\r');  		break;  	case 'u':  		if (pos + 4 <= line.Length) {  			char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  			key.Append (uni);  			pos += 4;  		}  		// else throw exception?  		break;  	default:  		key.Append (c);  		break;  	}  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos == line.Length) {  	// The line continues on the next line.  If there  	// is no next line' just treat it as a key with an  	// empty value.  	line = reader.ReadLine ();  	if (line == null)  		line = "";  	pos = 0;  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  } else {  	c = line [pos++];  	switch (c) {  	case 'n':  		key.Append ('\n');  		break;  	case 't':  		key.Append ('\t');  		break;  	case 'r':  		key.Append ('\r');  		break;  	case 'u':  		if (pos + 4 <= line.Length) {  			char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  			key.Append (uni);  			pos += 4;  		}  		// else throw exception?  		break;  	default:  		key.Append (c);  		break;  	}  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: switch (c) {  case 'n':  	key.Append ('\n');  	break;  case 't':  	key.Append ('\t');  	break;  case 'r':  	key.Append ('\r');  	break;  case 'u':  	if (pos + 4 <= line.Length) {  		char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  		key.Append (uni);  		pos += 4;  	}  	// else throw exception?  	break;  default:  	key.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: switch (c) {  case 'n':  	key.Append ('\n');  	break;  case 't':  	key.Append ('\t');  	break;  case 'r':  	key.Append ('\r');  	break;  case 'u':  	if (pos + 4 <= line.Length) {  		char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  		key.Append (uni);  		pos += 4;  	}  	// else throw exception?  	break;  default:  	key.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: switch (c) {  case 'n':  	key.Append ('\n');  	break;  case 't':  	key.Append ('\t');  	break;  case 'r':  	key.Append ('\r');  	break;  case 'u':  	if (pos + 4 <= line.Length) {  		char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  		key.Append (uni);  		pos += 4;  	}  	// else throw exception?  	break;  default:  	key.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: switch (c) {  case 'n':  	key.Append ('\n');  	break;  case 't':  	key.Append ('\t');  	break;  case 'r':  	key.Append ('\r');  	break;  case 'u':  	if (pos + 4 <= line.Length) {  		char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  		key.Append (uni);  		pos += 4;  	}  	// else throw exception?  	break;  default:  	key.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos + 4 <= line.Length) {  	char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  	key.Append (uni);  	pos += 4;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos + 4 <= line.Length) {  	char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  	key.Append (uni);  	pos += 4;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos + 4 <= line.Length) {  	char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  	key.Append (uni);  	pos += 4;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos + 4 <= line.Length) {  	char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  	key.Append (uni);  	pos += 4;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: pos += 4;  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while (pos < line.Length) {  	c = line [pos++];  	if (c == '\\') {  		if (pos == line.Length) {  			// The line continues on the next line.  			line = reader.ReadLine ();  			// We might have seen a backslash at the end of  			// the file.  The JDK ignores the backslash in  			// this case' so we follow for compatibility.  			if (line == null)  				break;  			pos = 0;  			while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  				pos++;  			element.EnsureCapacity (line.Length - pos + element.Length);  		} else {  			c = line [pos++];  			switch (c) {  			case 'n':  				element.Append ('\n');  				break;  			case 't':  				element.Append ('\t');  				break;  			case 'r':  				element.Append ('\r');  				break;  			case 'u':  				if (pos + 4 <= line.Length) {  					char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  					element.Append (uni);  					pos += 4;  				}  				// else throw exception?  				break;  			default:  				element.Append (c);  				break;  			}  		}  	} else  		element.Append (c);  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while (pos < line.Length) {  	c = line [pos++];  	if (c == '\\') {  		if (pos == line.Length) {  			// The line continues on the next line.  			line = reader.ReadLine ();  			// We might have seen a backslash at the end of  			// the file.  The JDK ignores the backslash in  			// this case' so we follow for compatibility.  			if (line == null)  				break;  			pos = 0;  			while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  				pos++;  			element.EnsureCapacity (line.Length - pos + element.Length);  		} else {  			c = line [pos++];  			switch (c) {  			case 'n':  				element.Append ('\n');  				break;  			case 't':  				element.Append ('\t');  				break;  			case 'r':  				element.Append ('\r');  				break;  			case 'u':  				if (pos + 4 <= line.Length) {  					char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  					element.Append (uni);  					pos += 4;  				}  				// else throw exception?  				break;  			default:  				element.Append (c);  				break;  			}  		}  	} else  		element.Append (c);  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while (pos < line.Length) {  	c = line [pos++];  	if (c == '\\') {  		if (pos == line.Length) {  			// The line continues on the next line.  			line = reader.ReadLine ();  			// We might have seen a backslash at the end of  			// the file.  The JDK ignores the backslash in  			// this case' so we follow for compatibility.  			if (line == null)  				break;  			pos = 0;  			while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  				pos++;  			element.EnsureCapacity (line.Length - pos + element.Length);  		} else {  			c = line [pos++];  			switch (c) {  			case 'n':  				element.Append ('\n');  				break;  			case 't':  				element.Append ('\t');  				break;  			case 'r':  				element.Append ('\r');  				break;  			case 'u':  				if (pos + 4 <= line.Length) {  					char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  					element.Append (uni);  					pos += 4;  				}  				// else throw exception?  				break;  			default:  				element.Append (c);  				break;  			}  		}  	} else  		element.Append (c);  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: while (pos < line.Length) {  	c = line [pos++];  	if (c == '\\') {  		if (pos == line.Length) {  			// The line continues on the next line.  			line = reader.ReadLine ();  			// We might have seen a backslash at the end of  			// the file.  The JDK ignores the backslash in  			// this case' so we follow for compatibility.  			if (line == null)  				break;  			pos = 0;  			while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  				pos++;  			element.EnsureCapacity (line.Length - pos + element.Length);  		} else {  			c = line [pos++];  			switch (c) {  			case 'n':  				element.Append ('\n');  				break;  			case 't':  				element.Append ('\t');  				break;  			case 'r':  				element.Append ('\r');  				break;  			case 'u':  				if (pos + 4 <= line.Length) {  					char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  					element.Append (uni);  					pos += 4;  				}  				// else throw exception?  				break;  			default:  				element.Append (c);  				break;  			}  		}  	} else  		element.Append (c);  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (c == '\\') {  	if (pos == line.Length) {  		// The line continues on the next line.  		line = reader.ReadLine ();  		// We might have seen a backslash at the end of  		// the file.  The JDK ignores the backslash in  		// this case' so we follow for compatibility.  		if (line == null)  			break;  		pos = 0;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  		element.EnsureCapacity (line.Length - pos + element.Length);  	} else {  		c = line [pos++];  		switch (c) {  		case 'n':  			element.Append ('\n');  			break;  		case 't':  			element.Append ('\t');  			break;  		case 'r':  			element.Append ('\r');  			break;  		case 'u':  			if (pos + 4 <= line.Length) {  				char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  				element.Append (uni);  				pos += 4;  			}  			// else throw exception?  			break;  		default:  			element.Append (c);  			break;  		}  	}  } else  	element.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (c == '\\') {  	if (pos == line.Length) {  		// The line continues on the next line.  		line = reader.ReadLine ();  		// We might have seen a backslash at the end of  		// the file.  The JDK ignores the backslash in  		// this case' so we follow for compatibility.  		if (line == null)  			break;  		pos = 0;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  		element.EnsureCapacity (line.Length - pos + element.Length);  	} else {  		c = line [pos++];  		switch (c) {  		case 'n':  			element.Append ('\n');  			break;  		case 't':  			element.Append ('\t');  			break;  		case 'r':  			element.Append ('\r');  			break;  		case 'u':  			if (pos + 4 <= line.Length) {  				char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  				element.Append (uni);  				pos += 4;  			}  			// else throw exception?  			break;  		default:  			element.Append (c);  			break;  		}  	}  } else  	element.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (c == '\\') {  	if (pos == line.Length) {  		// The line continues on the next line.  		line = reader.ReadLine ();  		// We might have seen a backslash at the end of  		// the file.  The JDK ignores the backslash in  		// this case' so we follow for compatibility.  		if (line == null)  			break;  		pos = 0;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  		element.EnsureCapacity (line.Length - pos + element.Length);  	} else {  		c = line [pos++];  		switch (c) {  		case 'n':  			element.Append ('\n');  			break;  		case 't':  			element.Append ('\t');  			break;  		case 'r':  			element.Append ('\r');  			break;  		case 'u':  			if (pos + 4 <= line.Length) {  				char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  				element.Append (uni);  				pos += 4;  			}  			// else throw exception?  			break;  		default:  			element.Append (c);  			break;  		}  	}  } else  	element.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (c == '\\') {  	if (pos == line.Length) {  		// The line continues on the next line.  		line = reader.ReadLine ();  		// We might have seen a backslash at the end of  		// the file.  The JDK ignores the backslash in  		// this case' so we follow for compatibility.  		if (line == null)  			break;  		pos = 0;  		while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  			pos++;  		element.EnsureCapacity (line.Length - pos + element.Length);  	} else {  		c = line [pos++];  		switch (c) {  		case 'n':  			element.Append ('\n');  			break;  		case 't':  			element.Append ('\t');  			break;  		case 'r':  			element.Append ('\r');  			break;  		case 'u':  			if (pos + 4 <= line.Length) {  				char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  				element.Append (uni);  				pos += 4;  			}  			// else throw exception?  			break;  		default:  			element.Append (c);  			break;  		}  	}  } else  	element.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos == line.Length) {  	// The line continues on the next line.  	line = reader.ReadLine ();  	// We might have seen a backslash at the end of  	// the file.  The JDK ignores the backslash in  	// this case' so we follow for compatibility.  	if (line == null)  		break;  	pos = 0;  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	element.EnsureCapacity (line.Length - pos + element.Length);  } else {  	c = line [pos++];  	switch (c) {  	case 'n':  		element.Append ('\n');  		break;  	case 't':  		element.Append ('\t');  		break;  	case 'r':  		element.Append ('\r');  		break;  	case 'u':  		if (pos + 4 <= line.Length) {  			char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  			element.Append (uni);  			pos += 4;  		}  		// else throw exception?  		break;  	default:  		element.Append (c);  		break;  	}  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos == line.Length) {  	// The line continues on the next line.  	line = reader.ReadLine ();  	// We might have seen a backslash at the end of  	// the file.  The JDK ignores the backslash in  	// this case' so we follow for compatibility.  	if (line == null)  		break;  	pos = 0;  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	element.EnsureCapacity (line.Length - pos + element.Length);  } else {  	c = line [pos++];  	switch (c) {  	case 'n':  		element.Append ('\n');  		break;  	case 't':  		element.Append ('\t');  		break;  	case 'r':  		element.Append ('\r');  		break;  	case 'u':  		if (pos + 4 <= line.Length) {  			char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  			element.Append (uni);  			pos += 4;  		}  		// else throw exception?  		break;  	default:  		element.Append (c);  		break;  	}  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos == line.Length) {  	// The line continues on the next line.  	line = reader.ReadLine ();  	// We might have seen a backslash at the end of  	// the file.  The JDK ignores the backslash in  	// this case' so we follow for compatibility.  	if (line == null)  		break;  	pos = 0;  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	element.EnsureCapacity (line.Length - pos + element.Length);  } else {  	c = line [pos++];  	switch (c) {  	case 'n':  		element.Append ('\n');  		break;  	case 't':  		element.Append ('\t');  		break;  	case 'r':  		element.Append ('\r');  		break;  	case 'u':  		if (pos + 4 <= line.Length) {  			char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  			element.Append (uni);  			pos += 4;  		}  		// else throw exception?  		break;  	default:  		element.Append (c);  		break;  	}  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos == line.Length) {  	// The line continues on the next line.  	line = reader.ReadLine ();  	// We might have seen a backslash at the end of  	// the file.  The JDK ignores the backslash in  	// this case' so we follow for compatibility.  	if (line == null)  		break;  	pos = 0;  	while (pos < line.Length && Char.IsWhiteSpace (c = line [pos]))  		pos++;  	element.EnsureCapacity (line.Length - pos + element.Length);  } else {  	c = line [pos++];  	switch (c) {  	case 'n':  		element.Append ('\n');  		break;  	case 't':  		element.Append ('\t');  		break;  	case 'r':  		element.Append ('\r');  		break;  	case 'u':  		if (pos + 4 <= line.Length) {  			char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  			element.Append (uni);  			pos += 4;  		}  		// else throw exception?  		break;  	default:  		element.Append (c);  		break;  	}  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: switch (c) {  case 'n':  	element.Append ('\n');  	break;  case 't':  	element.Append ('\t');  	break;  case 'r':  	element.Append ('\r');  	break;  case 'u':  	if (pos + 4 <= line.Length) {  		char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  		element.Append (uni);  		pos += 4;  	}  	// else throw exception?  	break;  default:  	element.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: switch (c) {  case 'n':  	element.Append ('\n');  	break;  case 't':  	element.Append ('\t');  	break;  case 'r':  	element.Append ('\r');  	break;  case 'u':  	if (pos + 4 <= line.Length) {  		char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  		element.Append (uni);  		pos += 4;  	}  	// else throw exception?  	break;  default:  	element.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: switch (c) {  case 'n':  	element.Append ('\n');  	break;  case 't':  	element.Append ('\t');  	break;  case 'r':  	element.Append ('\r');  	break;  case 'u':  	if (pos + 4 <= line.Length) {  		char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  		element.Append (uni);  		pos += 4;  	}  	// else throw exception?  	break;  default:  	element.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: switch (c) {  case 'n':  	element.Append ('\n');  	break;  case 't':  	element.Append ('\t');  	break;  case 'r':  	element.Append ('\r');  	break;  case 'u':  	if (pos + 4 <= line.Length) {  		char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  		element.Append (uni);  		pos += 4;  	}  	// else throw exception?  	break;  default:  	element.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos + 4 <= line.Length) {  	char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  	element.Append (uni);  	pos += 4;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos + 4 <= line.Length) {  	char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  	element.Append (uni);  	pos += 4;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos + 4 <= line.Length) {  	char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  	element.Append (uni);  	pos += 4;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: if (pos + 4 <= line.Length) {  	char uni = (char)Convert.ToInt32 (line.Substring (pos' 4)' 16);  	element.Append (uni);  	pos += 4;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,Load,The following statement contains a magic number: pos += 4;  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,FormatForOutput,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	char c = str [i];  	switch (c) {  	case '\n':  		buffer.Append ("\\n");  		break;  	case '\r':  		buffer.Append ("\\r");  		break;  	case '\t':  		buffer.Append ("\\t");  		break;  	case ' ':  		buffer.Append (head ? "\\ " : " ");  		break;  	case '\\':  	case '!':  	case '#':  	case '=':  	case ':':  		buffer.Append ('\\').Append (c);  		break;  	default:  		if (c < ' ' || c > '~') {  			String hex = ((int)c).ToString ("{0:x4}");  			buffer.Append ("\\u0000".Substring (0' 6 - hex.Length));  			buffer.Append (hex);  		} else  			buffer.Append (c);  		break;  	}  	if (c != ' ')  		head = key;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,FormatForOutput,The following statement contains a magic number: switch (c) {  case '\n':  	buffer.Append ("\\n");  	break;  case '\r':  	buffer.Append ("\\r");  	break;  case '\t':  	buffer.Append ("\\t");  	break;  case ' ':  	buffer.Append (head ? "\\ " : " ");  	break;  case '\\':  case '!':  case '#':  case '=':  case ':':  	buffer.Append ('\\').Append (c);  	break;  default:  	if (c < ' ' || c > '~') {  		String hex = ((int)c).ToString ("{0:x4}");  		buffer.Append ("\\u0000".Substring (0' 6 - hex.Length));  		buffer.Append (hex);  	} else  		buffer.Append (c);  	break;  }  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,FormatForOutput,The following statement contains a magic number: if (c < ' ' || c > '~') {  	String hex = ((int)c).ToString ("{0:x4}");  	buffer.Append ("\\u0000".Substring (0' 6 - hex.Length));  	buffer.Append (hex);  } else  	buffer.Append (c);  
Magic Number,Deveel.Data.Util,Properties,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Util\Properties.cs,FormatForOutput,The following statement contains a magic number: buffer.Append ("\\u0000".Substring (0' 6 - hex.Length));  
Magic Number,Deveel.Data.Index,BlockIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndex_T.cs,NewBlock,The following statement contains a magic number: return new Block (512);  
Magic Number,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,IndexBlock,The following statement contains a magic number: indexBlockArea.Position = 8;  
Magic Number,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,GetBlockPointers,The following statement contains a magic number: if (blockEntries != 0) {  	indexBlockArea.Position = 16;  	for (int i = 0; i < blockEntries; ++i) {  		// NOTE: We cast to 'int' here because of internal limitations.  		indexBlockArea.ReadInt8 ();  		indexBlockArea.ReadInt8 ();  		long elementP = indexBlockArea.ReadInt8 ();  		indexBlockArea.ReadInt4 ();  		blocks [i] = elementP;  	}  }  
Magic Number,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,GetBlockPointers,The following statement contains a magic number: indexBlockArea.Position = 16;  
Magic Number,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,CreateMappedBlocks,The following statement contains a magic number: if (blockEntries != 0) {  	indexBlockArea.Position = 16;  	for (int i = 0; i < blockEntries; ++i) {  		// NOTE: We cast to 'int' here because of internal limitations.  		var firstEntry = indexBlockArea.ReadInt8 ();  		var lastEntry = indexBlockArea.ReadInt8 ();  		var blockPointer = indexBlockArea.ReadInt8 ();  		var typeSize = indexBlockArea.ReadInt4 ();  		//TODO: check this...  		// size is the first 24 bits (max size = 16MB)  		int elementCount = typeSize & 0x0FFF;  		byte type = (byte)(BytesUtil.URShift (typeSize' 24) & 0x0F);  		blocks [i] = StoreIndex.NewMappedBlock (indexSetStore' firstEntry' lastEntry' blockPointer' elementCount' type' BlockSize);  	}  }  
Magic Number,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,CreateMappedBlocks,The following statement contains a magic number: if (blockEntries != 0) {  	indexBlockArea.Position = 16;  	for (int i = 0; i < blockEntries; ++i) {  		// NOTE: We cast to 'int' here because of internal limitations.  		var firstEntry = indexBlockArea.ReadInt8 ();  		var lastEntry = indexBlockArea.ReadInt8 ();  		var blockPointer = indexBlockArea.ReadInt8 ();  		var typeSize = indexBlockArea.ReadInt4 ();  		//TODO: check this...  		// size is the first 24 bits (max size = 16MB)  		int elementCount = typeSize & 0x0FFF;  		byte type = (byte)(BytesUtil.URShift (typeSize' 24) & 0x0F);  		blocks [i] = StoreIndex.NewMappedBlock (indexSetStore' firstEntry' lastEntry' blockPointer' elementCount' type' BlockSize);  	}  }  
Magic Number,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,CreateMappedBlocks,The following statement contains a magic number: indexBlockArea.Position = 16;  
Magic Number,Deveel.Data.Index,IndexBlock,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexBlock.cs,CreateMappedBlocks,The following statement contains a magic number: for (int i = 0; i < blockEntries; ++i) {  	// NOTE: We cast to 'int' here because of internal limitations.  	var firstEntry = indexBlockArea.ReadInt8 ();  	var lastEntry = indexBlockArea.ReadInt8 ();  	var blockPointer = indexBlockArea.ReadInt8 ();  	var typeSize = indexBlockArea.ReadInt4 ();  	//TODO: check this...  	// size is the first 24 bits (max size = 16MB)  	int elementCount = typeSize & 0x0FFF;  	byte type = (byte)(BytesUtil.URShift (typeSize' 24) & 0x0F);  	blocks [i] = StoreIndex.NewMappedBlock (indexSetStore' firstEntry' lastEntry' blockPointer' elementCount' type' BlockSize);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CreateNewBlock,The following statement contains a magic number: using (var a = Store.CreateArea (16)) {  	long indexBlockP = a.Id;  	// Setup the header  	a.WriteInt4 (1);  	// version  	a.WriteInt4 (0);  	// reserved  	a.WriteInt8 (0);  	// block entries  	a.Flush ();  	return indexBlockP;  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,Create,The following statement contains a magic number: lock (this) {  	// Create an empty index header area  	using (var a = Store.CreateArea (16)) {  		indexHeaderPointer = a.Id;  		a.WriteInt4 (1);  		// version  		a.WriteInt4 (0);  		// reserved  		a.WriteInt8 (0);  		// number of indexes in the set  		a.Flush ();  	}  	// Set up the local IArea object for the index header  	indexHeaderArea = Store.GetArea (indexHeaderPointer);  	indexBlocks = new IndexBlock[0];  	// Allocate the starting header  	using (var sa = Store.CreateArea (32)) {  		long startPointer = sa.Id;  		// The magic  		sa.WriteInt4 (Magic);  		// The version  		sa.WriteInt4 (1);  		// Pointer to the index header  		sa.WriteInt8 (indexHeaderPointer);  		sa.Flush ();  		// Set the 'start_area' value.  		startArea = Store.GetArea (startPointer);  		return startPointer;  	}  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,Create,The following statement contains a magic number: lock (this) {  	// Create an empty index header area  	using (var a = Store.CreateArea (16)) {  		indexHeaderPointer = a.Id;  		a.WriteInt4 (1);  		// version  		a.WriteInt4 (0);  		// reserved  		a.WriteInt8 (0);  		// number of indexes in the set  		a.Flush ();  	}  	// Set up the local IArea object for the index header  	indexHeaderArea = Store.GetArea (indexHeaderPointer);  	indexBlocks = new IndexBlock[0];  	// Allocate the starting header  	using (var sa = Store.CreateArea (32)) {  		long startPointer = sa.Id;  		// The magic  		sa.WriteInt4 (Magic);  		// The version  		sa.WriteInt4 (1);  		// Pointer to the index header  		sa.WriteInt8 (indexHeaderPointer);  		sa.Flush ();  		// Set the 'start_area' value.  		startArea = Store.GetArea (startPointer);  		return startPointer;  	}  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,Create,The following statement contains a magic number: using (var a = Store.CreateArea (16)) {  	indexHeaderPointer = a.Id;  	a.WriteInt4 (1);  	// version  	a.WriteInt4 (0);  	// reserved  	a.WriteInt8 (0);  	// number of indexes in the set  	a.Flush ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,Create,The following statement contains a magic number: using (var sa = Store.CreateArea (32)) {  	long startPointer = sa.Id;  	// The magic  	sa.WriteInt4 (Magic);  	// The version  	sa.WriteInt4 (1);  	// Pointer to the index header  	sa.WriteInt8 (indexHeaderPointer);  	sa.Flush ();  	// Set the 'start_area' value.  	startArea = Store.GetArea (startPointer);  	return startPointer;  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,PrepareIndexLists,The following statement contains a magic number: lock (this) {  	try {  		Store.Lock ();  		// Allocate a new area for the list  		int newSize = 16 + ((indexBlocks.Length + count) * 16);  		using (var newIndexArea = Store.CreateArea (newSize)) {  			long newIndexPointer = newIndexArea.Id;  			var newIndexBlocks = new IndexBlock[(indexBlocks.Length + count)];  			// Copy the existing area  			indexHeaderArea.Position = 0;  			int version = indexHeaderArea.ReadInt4 ();  			int reserved = indexHeaderArea.ReadInt4 ();  			long icount = indexHeaderArea.ReadInt8 ();  			newIndexArea.WriteInt4 (version);  			newIndexArea.WriteInt4 (reserved);  			newIndexArea.WriteInt8 (icount + count);  			for (int i = 0; i < indexBlocks.Length; ++i) {  				int itype = indexHeaderArea.ReadInt4 ();  				int iblockSize = indexHeaderArea.ReadInt4 ();  				long indexBlockP = indexHeaderArea.ReadInt8 ();  				newIndexArea.WriteInt4 (itype);  				newIndexArea.WriteInt4 (iblockSize);  				newIndexArea.WriteInt8 (indexBlockP);  				newIndexBlocks [i] = indexBlocks [i];  			}  			// Add the new entries  			for (int i = 0; i < count; ++i) {  				long newBlankBlockP = CreateNewBlock ();  				newIndexArea.WriteInt4 (type);  				newIndexArea.WriteInt4 (blockSize);  				newIndexArea.WriteInt8 (newBlankBlockP);  				var newBlock = new IndexBlock (this' indexBlocks.Length + i' blockSize' newBlankBlockP);  				newBlock.AddReference ();  				newIndexBlocks [indexBlocks.Length + i] = newBlock;  			}  			// Finished initializing the index.  			newIndexArea.Flush ();  			// The old index header pointer  			long oldIndexHeaderP = indexHeaderPointer;  			// Update the state of this object'  			indexHeaderPointer = newIndexPointer;  			indexHeaderArea = Store.GetArea (newIndexPointer);  			indexBlocks = newIndexBlocks;  			// Update the start pointer  			startArea.Position = 8;  			startArea.WriteInt8 (newIndexPointer);  			startArea.Flush ();  			// Free the old header  			Store.DeleteArea (oldIndexHeaderP);  		}  	} finally {  		Store.Unlock ();  	}  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,PrepareIndexLists,The following statement contains a magic number: lock (this) {  	try {  		Store.Lock ();  		// Allocate a new area for the list  		int newSize = 16 + ((indexBlocks.Length + count) * 16);  		using (var newIndexArea = Store.CreateArea (newSize)) {  			long newIndexPointer = newIndexArea.Id;  			var newIndexBlocks = new IndexBlock[(indexBlocks.Length + count)];  			// Copy the existing area  			indexHeaderArea.Position = 0;  			int version = indexHeaderArea.ReadInt4 ();  			int reserved = indexHeaderArea.ReadInt4 ();  			long icount = indexHeaderArea.ReadInt8 ();  			newIndexArea.WriteInt4 (version);  			newIndexArea.WriteInt4 (reserved);  			newIndexArea.WriteInt8 (icount + count);  			for (int i = 0; i < indexBlocks.Length; ++i) {  				int itype = indexHeaderArea.ReadInt4 ();  				int iblockSize = indexHeaderArea.ReadInt4 ();  				long indexBlockP = indexHeaderArea.ReadInt8 ();  				newIndexArea.WriteInt4 (itype);  				newIndexArea.WriteInt4 (iblockSize);  				newIndexArea.WriteInt8 (indexBlockP);  				newIndexBlocks [i] = indexBlocks [i];  			}  			// Add the new entries  			for (int i = 0; i < count; ++i) {  				long newBlankBlockP = CreateNewBlock ();  				newIndexArea.WriteInt4 (type);  				newIndexArea.WriteInt4 (blockSize);  				newIndexArea.WriteInt8 (newBlankBlockP);  				var newBlock = new IndexBlock (this' indexBlocks.Length + i' blockSize' newBlankBlockP);  				newBlock.AddReference ();  				newIndexBlocks [indexBlocks.Length + i] = newBlock;  			}  			// Finished initializing the index.  			newIndexArea.Flush ();  			// The old index header pointer  			long oldIndexHeaderP = indexHeaderPointer;  			// Update the state of this object'  			indexHeaderPointer = newIndexPointer;  			indexHeaderArea = Store.GetArea (newIndexPointer);  			indexBlocks = newIndexBlocks;  			// Update the start pointer  			startArea.Position = 8;  			startArea.WriteInt8 (newIndexPointer);  			startArea.Flush ();  			// Free the old header  			Store.DeleteArea (oldIndexHeaderP);  		}  	} finally {  		Store.Unlock ();  	}  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,PrepareIndexLists,The following statement contains a magic number: lock (this) {  	try {  		Store.Lock ();  		// Allocate a new area for the list  		int newSize = 16 + ((indexBlocks.Length + count) * 16);  		using (var newIndexArea = Store.CreateArea (newSize)) {  			long newIndexPointer = newIndexArea.Id;  			var newIndexBlocks = new IndexBlock[(indexBlocks.Length + count)];  			// Copy the existing area  			indexHeaderArea.Position = 0;  			int version = indexHeaderArea.ReadInt4 ();  			int reserved = indexHeaderArea.ReadInt4 ();  			long icount = indexHeaderArea.ReadInt8 ();  			newIndexArea.WriteInt4 (version);  			newIndexArea.WriteInt4 (reserved);  			newIndexArea.WriteInt8 (icount + count);  			for (int i = 0; i < indexBlocks.Length; ++i) {  				int itype = indexHeaderArea.ReadInt4 ();  				int iblockSize = indexHeaderArea.ReadInt4 ();  				long indexBlockP = indexHeaderArea.ReadInt8 ();  				newIndexArea.WriteInt4 (itype);  				newIndexArea.WriteInt4 (iblockSize);  				newIndexArea.WriteInt8 (indexBlockP);  				newIndexBlocks [i] = indexBlocks [i];  			}  			// Add the new entries  			for (int i = 0; i < count; ++i) {  				long newBlankBlockP = CreateNewBlock ();  				newIndexArea.WriteInt4 (type);  				newIndexArea.WriteInt4 (blockSize);  				newIndexArea.WriteInt8 (newBlankBlockP);  				var newBlock = new IndexBlock (this' indexBlocks.Length + i' blockSize' newBlankBlockP);  				newBlock.AddReference ();  				newIndexBlocks [indexBlocks.Length + i] = newBlock;  			}  			// Finished initializing the index.  			newIndexArea.Flush ();  			// The old index header pointer  			long oldIndexHeaderP = indexHeaderPointer;  			// Update the state of this object'  			indexHeaderPointer = newIndexPointer;  			indexHeaderArea = Store.GetArea (newIndexPointer);  			indexBlocks = newIndexBlocks;  			// Update the start pointer  			startArea.Position = 8;  			startArea.WriteInt8 (newIndexPointer);  			startArea.Flush ();  			// Free the old header  			Store.DeleteArea (oldIndexHeaderP);  		}  	} finally {  		Store.Unlock ();  	}  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,PrepareIndexLists,The following statement contains a magic number: try {  	Store.Lock ();  	// Allocate a new area for the list  	int newSize = 16 + ((indexBlocks.Length + count) * 16);  	using (var newIndexArea = Store.CreateArea (newSize)) {  		long newIndexPointer = newIndexArea.Id;  		var newIndexBlocks = new IndexBlock[(indexBlocks.Length + count)];  		// Copy the existing area  		indexHeaderArea.Position = 0;  		int version = indexHeaderArea.ReadInt4 ();  		int reserved = indexHeaderArea.ReadInt4 ();  		long icount = indexHeaderArea.ReadInt8 ();  		newIndexArea.WriteInt4 (version);  		newIndexArea.WriteInt4 (reserved);  		newIndexArea.WriteInt8 (icount + count);  		for (int i = 0; i < indexBlocks.Length; ++i) {  			int itype = indexHeaderArea.ReadInt4 ();  			int iblockSize = indexHeaderArea.ReadInt4 ();  			long indexBlockP = indexHeaderArea.ReadInt8 ();  			newIndexArea.WriteInt4 (itype);  			newIndexArea.WriteInt4 (iblockSize);  			newIndexArea.WriteInt8 (indexBlockP);  			newIndexBlocks [i] = indexBlocks [i];  		}  		// Add the new entries  		for (int i = 0; i < count; ++i) {  			long newBlankBlockP = CreateNewBlock ();  			newIndexArea.WriteInt4 (type);  			newIndexArea.WriteInt4 (blockSize);  			newIndexArea.WriteInt8 (newBlankBlockP);  			var newBlock = new IndexBlock (this' indexBlocks.Length + i' blockSize' newBlankBlockP);  			newBlock.AddReference ();  			newIndexBlocks [indexBlocks.Length + i] = newBlock;  		}  		// Finished initializing the index.  		newIndexArea.Flush ();  		// The old index header pointer  		long oldIndexHeaderP = indexHeaderPointer;  		// Update the state of this object'  		indexHeaderPointer = newIndexPointer;  		indexHeaderArea = Store.GetArea (newIndexPointer);  		indexBlocks = newIndexBlocks;  		// Update the start pointer  		startArea.Position = 8;  		startArea.WriteInt8 (newIndexPointer);  		startArea.Flush ();  		// Free the old header  		Store.DeleteArea (oldIndexHeaderP);  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,PrepareIndexLists,The following statement contains a magic number: try {  	Store.Lock ();  	// Allocate a new area for the list  	int newSize = 16 + ((indexBlocks.Length + count) * 16);  	using (var newIndexArea = Store.CreateArea (newSize)) {  		long newIndexPointer = newIndexArea.Id;  		var newIndexBlocks = new IndexBlock[(indexBlocks.Length + count)];  		// Copy the existing area  		indexHeaderArea.Position = 0;  		int version = indexHeaderArea.ReadInt4 ();  		int reserved = indexHeaderArea.ReadInt4 ();  		long icount = indexHeaderArea.ReadInt8 ();  		newIndexArea.WriteInt4 (version);  		newIndexArea.WriteInt4 (reserved);  		newIndexArea.WriteInt8 (icount + count);  		for (int i = 0; i < indexBlocks.Length; ++i) {  			int itype = indexHeaderArea.ReadInt4 ();  			int iblockSize = indexHeaderArea.ReadInt4 ();  			long indexBlockP = indexHeaderArea.ReadInt8 ();  			newIndexArea.WriteInt4 (itype);  			newIndexArea.WriteInt4 (iblockSize);  			newIndexArea.WriteInt8 (indexBlockP);  			newIndexBlocks [i] = indexBlocks [i];  		}  		// Add the new entries  		for (int i = 0; i < count; ++i) {  			long newBlankBlockP = CreateNewBlock ();  			newIndexArea.WriteInt4 (type);  			newIndexArea.WriteInt4 (blockSize);  			newIndexArea.WriteInt8 (newBlankBlockP);  			var newBlock = new IndexBlock (this' indexBlocks.Length + i' blockSize' newBlankBlockP);  			newBlock.AddReference ();  			newIndexBlocks [indexBlocks.Length + i] = newBlock;  		}  		// Finished initializing the index.  		newIndexArea.Flush ();  		// The old index header pointer  		long oldIndexHeaderP = indexHeaderPointer;  		// Update the state of this object'  		indexHeaderPointer = newIndexPointer;  		indexHeaderArea = Store.GetArea (newIndexPointer);  		indexBlocks = newIndexBlocks;  		// Update the start pointer  		startArea.Position = 8;  		startArea.WriteInt8 (newIndexPointer);  		startArea.Flush ();  		// Free the old header  		Store.DeleteArea (oldIndexHeaderP);  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,PrepareIndexLists,The following statement contains a magic number: try {  	Store.Lock ();  	// Allocate a new area for the list  	int newSize = 16 + ((indexBlocks.Length + count) * 16);  	using (var newIndexArea = Store.CreateArea (newSize)) {  		long newIndexPointer = newIndexArea.Id;  		var newIndexBlocks = new IndexBlock[(indexBlocks.Length + count)];  		// Copy the existing area  		indexHeaderArea.Position = 0;  		int version = indexHeaderArea.ReadInt4 ();  		int reserved = indexHeaderArea.ReadInt4 ();  		long icount = indexHeaderArea.ReadInt8 ();  		newIndexArea.WriteInt4 (version);  		newIndexArea.WriteInt4 (reserved);  		newIndexArea.WriteInt8 (icount + count);  		for (int i = 0; i < indexBlocks.Length; ++i) {  			int itype = indexHeaderArea.ReadInt4 ();  			int iblockSize = indexHeaderArea.ReadInt4 ();  			long indexBlockP = indexHeaderArea.ReadInt8 ();  			newIndexArea.WriteInt4 (itype);  			newIndexArea.WriteInt4 (iblockSize);  			newIndexArea.WriteInt8 (indexBlockP);  			newIndexBlocks [i] = indexBlocks [i];  		}  		// Add the new entries  		for (int i = 0; i < count; ++i) {  			long newBlankBlockP = CreateNewBlock ();  			newIndexArea.WriteInt4 (type);  			newIndexArea.WriteInt4 (blockSize);  			newIndexArea.WriteInt8 (newBlankBlockP);  			var newBlock = new IndexBlock (this' indexBlocks.Length + i' blockSize' newBlankBlockP);  			newBlock.AddReference ();  			newIndexBlocks [indexBlocks.Length + i] = newBlock;  		}  		// Finished initializing the index.  		newIndexArea.Flush ();  		// The old index header pointer  		long oldIndexHeaderP = indexHeaderPointer;  		// Update the state of this object'  		indexHeaderPointer = newIndexPointer;  		indexHeaderArea = Store.GetArea (newIndexPointer);  		indexBlocks = newIndexBlocks;  		// Update the start pointer  		startArea.Position = 8;  		startArea.WriteInt8 (newIndexPointer);  		startArea.Flush ();  		// Free the old header  		Store.DeleteArea (oldIndexHeaderP);  	}  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,PrepareIndexLists,The following statement contains a magic number: using (var newIndexArea = Store.CreateArea (newSize)) {  	long newIndexPointer = newIndexArea.Id;  	var newIndexBlocks = new IndexBlock[(indexBlocks.Length + count)];  	// Copy the existing area  	indexHeaderArea.Position = 0;  	int version = indexHeaderArea.ReadInt4 ();  	int reserved = indexHeaderArea.ReadInt4 ();  	long icount = indexHeaderArea.ReadInt8 ();  	newIndexArea.WriteInt4 (version);  	newIndexArea.WriteInt4 (reserved);  	newIndexArea.WriteInt8 (icount + count);  	for (int i = 0; i < indexBlocks.Length; ++i) {  		int itype = indexHeaderArea.ReadInt4 ();  		int iblockSize = indexHeaderArea.ReadInt4 ();  		long indexBlockP = indexHeaderArea.ReadInt8 ();  		newIndexArea.WriteInt4 (itype);  		newIndexArea.WriteInt4 (iblockSize);  		newIndexArea.WriteInt8 (indexBlockP);  		newIndexBlocks [i] = indexBlocks [i];  	}  	// Add the new entries  	for (int i = 0; i < count; ++i) {  		long newBlankBlockP = CreateNewBlock ();  		newIndexArea.WriteInt4 (type);  		newIndexArea.WriteInt4 (blockSize);  		newIndexArea.WriteInt8 (newBlankBlockP);  		var newBlock = new IndexBlock (this' indexBlocks.Length + i' blockSize' newBlankBlockP);  		newBlock.AddReference ();  		newIndexBlocks [indexBlocks.Length + i] = newBlock;  	}  	// Finished initializing the index.  	newIndexArea.Flush ();  	// The old index header pointer  	long oldIndexHeaderP = indexHeaderPointer;  	// Update the state of this object'  	indexHeaderPointer = newIndexPointer;  	indexHeaderArea = Store.GetArea (newIndexPointer);  	indexBlocks = newIndexBlocks;  	// Update the start pointer  	startArea.Position = 8;  	startArea.WriteInt8 (newIndexPointer);  	startArea.Flush ();  	// Free the old header  	Store.DeleteArea (oldIndexHeaderP);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,PrepareIndexLists,The following statement contains a magic number: startArea.Position = 8;  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexHeader,The following statement contains a magic number: lock (this) {  	// Make a new index header area for the changed set.  	long aOffset;  	using (var a = Store.CreateArea (16 + (indexBlocks.Length * 16))) {  		aOffset = a.Id;  		a.WriteInt4 (1);  		// version  		a.WriteInt4 (0);  		// reserved  		a.WriteInt8 (indexBlocks.Length);  		// count  		foreach (var indBlock in indexBlocks) {  			a.WriteInt4 (1);  			a.WriteInt4 (indBlock.BlockSize);  			a.WriteInt8 (indBlock.StartOffset);  		}  		// Finish creating the updated header  		a.Flush ();  	}  	// The old index header pointer  	long oldIndexHeaderP = indexHeaderPointer;  	// Set the new index header  	indexHeaderPointer = aOffset;  	indexHeaderArea = Store.GetArea (indexHeaderPointer);  	// Write the change to 'startPointer'  	startArea.Position = 8;  	startArea.WriteInt8 (indexHeaderPointer);  	startArea.Flush ();  	// Free the old header index  	Store.DeleteArea (oldIndexHeaderP);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexHeader,The following statement contains a magic number: lock (this) {  	// Make a new index header area for the changed set.  	long aOffset;  	using (var a = Store.CreateArea (16 + (indexBlocks.Length * 16))) {  		aOffset = a.Id;  		a.WriteInt4 (1);  		// version  		a.WriteInt4 (0);  		// reserved  		a.WriteInt8 (indexBlocks.Length);  		// count  		foreach (var indBlock in indexBlocks) {  			a.WriteInt4 (1);  			a.WriteInt4 (indBlock.BlockSize);  			a.WriteInt8 (indBlock.StartOffset);  		}  		// Finish creating the updated header  		a.Flush ();  	}  	// The old index header pointer  	long oldIndexHeaderP = indexHeaderPointer;  	// Set the new index header  	indexHeaderPointer = aOffset;  	indexHeaderArea = Store.GetArea (indexHeaderPointer);  	// Write the change to 'startPointer'  	startArea.Position = 8;  	startArea.WriteInt8 (indexHeaderPointer);  	startArea.Flush ();  	// Free the old header index  	Store.DeleteArea (oldIndexHeaderP);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexHeader,The following statement contains a magic number: lock (this) {  	// Make a new index header area for the changed set.  	long aOffset;  	using (var a = Store.CreateArea (16 + (indexBlocks.Length * 16))) {  		aOffset = a.Id;  		a.WriteInt4 (1);  		// version  		a.WriteInt4 (0);  		// reserved  		a.WriteInt8 (indexBlocks.Length);  		// count  		foreach (var indBlock in indexBlocks) {  			a.WriteInt4 (1);  			a.WriteInt4 (indBlock.BlockSize);  			a.WriteInt8 (indBlock.StartOffset);  		}  		// Finish creating the updated header  		a.Flush ();  	}  	// The old index header pointer  	long oldIndexHeaderP = indexHeaderPointer;  	// Set the new index header  	indexHeaderPointer = aOffset;  	indexHeaderArea = Store.GetArea (indexHeaderPointer);  	// Write the change to 'startPointer'  	startArea.Position = 8;  	startArea.WriteInt8 (indexHeaderPointer);  	startArea.Flush ();  	// Free the old header index  	Store.DeleteArea (oldIndexHeaderP);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexHeader,The following statement contains a magic number: using (var a = Store.CreateArea (16 + (indexBlocks.Length * 16))) {  	aOffset = a.Id;  	a.WriteInt4 (1);  	// version  	a.WriteInt4 (0);  	// reserved  	a.WriteInt8 (indexBlocks.Length);  	// count  	foreach (var indBlock in indexBlocks) {  		a.WriteInt4 (1);  		a.WriteInt4 (indBlock.BlockSize);  		a.WriteInt8 (indBlock.StartOffset);  	}  	// Finish creating the updated header  	a.Flush ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexHeader,The following statement contains a magic number: using (var a = Store.CreateArea (16 + (indexBlocks.Length * 16))) {  	aOffset = a.Id;  	a.WriteInt4 (1);  	// version  	a.WriteInt4 (0);  	// reserved  	a.WriteInt8 (indexBlocks.Length);  	// count  	foreach (var indBlock in indexBlocks) {  		a.WriteInt4 (1);  		a.WriteInt4 (indBlock.BlockSize);  		a.WriteInt8 (indBlock.StartOffset);  	}  	// Finish creating the updated header  	a.Flush ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexHeader,The following statement contains a magic number: startArea.Position = 8;  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: lock (this) {  	var sIndexSet = (SnapshotIndexSet)indexSet;  	var indices = sIndexSet.AllIndices.ToList ();  	try {  		try {  			Store.Lock ();  			// For each Index in the index set'  			foreach (var index in indices) {  				int indexNum = index.IndexNumber;  				// The IndexBlock we are changing  				var curIndexBlock = indexBlocks [indexNum];  				// Get all the blocks in the list  				var blocks = index.AllBlocks.ToList ();  				// Make up a new block list for this index set.  				long blockP;  				using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  					blockP = area.Id;  					area.WriteInt4 (1);  					// version  					area.WriteInt4 (0);  					// reserved  					area.WriteInt8 (blocks.Count);  					// block count  					foreach (var block in blocks) {  						var mappedBlock = (IMappedBlock)block;  						long bottomInt = 0;  						long topInt = 0;  						int blockSize = mappedBlock.Count;  						if (blockSize > 0) {  							bottomInt = mappedBlock.Bottom;  							topInt = mappedBlock.Top;  						}  						long blockPointer = mappedBlock.BlockPointer;  						// Is the block new or was it changed?  						if (blockPointer == -1 || mappedBlock.HasChanged) {  							// If this isn't -1 then write this sector on the list of  							// sectors to delete during GC.  							if (blockPointer != -1)  								curIndexBlock.AddDeletedArea (blockPointer);  							// This is a new block or a block that's been changed  							// Write the block to the file system  							blockPointer = mappedBlock.Flush ();  						}  						area.WriteInt8 (bottomInt);  						area.WriteInt8 (topInt);  						area.WriteInt8 (blockPointer);  						area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  					}  					// Finish initializing the area  					area.Flush ();  				}  				// Add the deleted blocks  				var deletedBlocks = index.DeletedBlocks.ToArray ();  				for (int i = 0; i < deletedBlocks.Length; ++i) {  					long delBlockP = deletedBlocks [i].BlockPointer;  					if (delBlockP != -1)  						curIndexBlock.AddDeletedArea (delBlockP);  				}  				// Mark the current block as deleted  				curIndexBlock.MarkAsDeleted ();  				// Now create a new IndexBlock object  				var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  				newIndexBlock.Parent = curIndexBlock;  				// Add reference to the new one  				newIndexBlock.AddReference ();  				// Update the index_blocks list  				indexBlocks [indexNum] = newIndexBlock;  				// We remove this later.  				removedBlocks.Add (curIndexBlock);  			}  			// Commit the new index header (index_blocks)  			CommitIndexHeader ();  		} finally {  			Store.Unlock ();  		}  		// Commit finished.  	} catch (IOException e) {  		throw new InvalidOperationException ("Error while committing index changed"' e);  	}  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: lock (this) {  	var sIndexSet = (SnapshotIndexSet)indexSet;  	var indices = sIndexSet.AllIndices.ToList ();  	try {  		try {  			Store.Lock ();  			// For each Index in the index set'  			foreach (var index in indices) {  				int indexNum = index.IndexNumber;  				// The IndexBlock we are changing  				var curIndexBlock = indexBlocks [indexNum];  				// Get all the blocks in the list  				var blocks = index.AllBlocks.ToList ();  				// Make up a new block list for this index set.  				long blockP;  				using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  					blockP = area.Id;  					area.WriteInt4 (1);  					// version  					area.WriteInt4 (0);  					// reserved  					area.WriteInt8 (blocks.Count);  					// block count  					foreach (var block in blocks) {  						var mappedBlock = (IMappedBlock)block;  						long bottomInt = 0;  						long topInt = 0;  						int blockSize = mappedBlock.Count;  						if (blockSize > 0) {  							bottomInt = mappedBlock.Bottom;  							topInt = mappedBlock.Top;  						}  						long blockPointer = mappedBlock.BlockPointer;  						// Is the block new or was it changed?  						if (blockPointer == -1 || mappedBlock.HasChanged) {  							// If this isn't -1 then write this sector on the list of  							// sectors to delete during GC.  							if (blockPointer != -1)  								curIndexBlock.AddDeletedArea (blockPointer);  							// This is a new block or a block that's been changed  							// Write the block to the file system  							blockPointer = mappedBlock.Flush ();  						}  						area.WriteInt8 (bottomInt);  						area.WriteInt8 (topInt);  						area.WriteInt8 (blockPointer);  						area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  					}  					// Finish initializing the area  					area.Flush ();  				}  				// Add the deleted blocks  				var deletedBlocks = index.DeletedBlocks.ToArray ();  				for (int i = 0; i < deletedBlocks.Length; ++i) {  					long delBlockP = deletedBlocks [i].BlockPointer;  					if (delBlockP != -1)  						curIndexBlock.AddDeletedArea (delBlockP);  				}  				// Mark the current block as deleted  				curIndexBlock.MarkAsDeleted ();  				// Now create a new IndexBlock object  				var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  				newIndexBlock.Parent = curIndexBlock;  				// Add reference to the new one  				newIndexBlock.AddReference ();  				// Update the index_blocks list  				indexBlocks [indexNum] = newIndexBlock;  				// We remove this later.  				removedBlocks.Add (curIndexBlock);  			}  			// Commit the new index header (index_blocks)  			CommitIndexHeader ();  		} finally {  			Store.Unlock ();  		}  		// Commit finished.  	} catch (IOException e) {  		throw new InvalidOperationException ("Error while committing index changed"' e);  	}  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: lock (this) {  	var sIndexSet = (SnapshotIndexSet)indexSet;  	var indices = sIndexSet.AllIndices.ToList ();  	try {  		try {  			Store.Lock ();  			// For each Index in the index set'  			foreach (var index in indices) {  				int indexNum = index.IndexNumber;  				// The IndexBlock we are changing  				var curIndexBlock = indexBlocks [indexNum];  				// Get all the blocks in the list  				var blocks = index.AllBlocks.ToList ();  				// Make up a new block list for this index set.  				long blockP;  				using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  					blockP = area.Id;  					area.WriteInt4 (1);  					// version  					area.WriteInt4 (0);  					// reserved  					area.WriteInt8 (blocks.Count);  					// block count  					foreach (var block in blocks) {  						var mappedBlock = (IMappedBlock)block;  						long bottomInt = 0;  						long topInt = 0;  						int blockSize = mappedBlock.Count;  						if (blockSize > 0) {  							bottomInt = mappedBlock.Bottom;  							topInt = mappedBlock.Top;  						}  						long blockPointer = mappedBlock.BlockPointer;  						// Is the block new or was it changed?  						if (blockPointer == -1 || mappedBlock.HasChanged) {  							// If this isn't -1 then write this sector on the list of  							// sectors to delete during GC.  							if (blockPointer != -1)  								curIndexBlock.AddDeletedArea (blockPointer);  							// This is a new block or a block that's been changed  							// Write the block to the file system  							blockPointer = mappedBlock.Flush ();  						}  						area.WriteInt8 (bottomInt);  						area.WriteInt8 (topInt);  						area.WriteInt8 (blockPointer);  						area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  					}  					// Finish initializing the area  					area.Flush ();  				}  				// Add the deleted blocks  				var deletedBlocks = index.DeletedBlocks.ToArray ();  				for (int i = 0; i < deletedBlocks.Length; ++i) {  					long delBlockP = deletedBlocks [i].BlockPointer;  					if (delBlockP != -1)  						curIndexBlock.AddDeletedArea (delBlockP);  				}  				// Mark the current block as deleted  				curIndexBlock.MarkAsDeleted ();  				// Now create a new IndexBlock object  				var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  				newIndexBlock.Parent = curIndexBlock;  				// Add reference to the new one  				newIndexBlock.AddReference ();  				// Update the index_blocks list  				indexBlocks [indexNum] = newIndexBlock;  				// We remove this later.  				removedBlocks.Add (curIndexBlock);  			}  			// Commit the new index header (index_blocks)  			CommitIndexHeader ();  		} finally {  			Store.Unlock ();  		}  		// Commit finished.  	} catch (IOException e) {  		throw new InvalidOperationException ("Error while committing index changed"' e);  	}  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: try {  	try {  		Store.Lock ();  		// For each Index in the index set'  		foreach (var index in indices) {  			int indexNum = index.IndexNumber;  			// The IndexBlock we are changing  			var curIndexBlock = indexBlocks [indexNum];  			// Get all the blocks in the list  			var blocks = index.AllBlocks.ToList ();  			// Make up a new block list for this index set.  			long blockP;  			using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  				blockP = area.Id;  				area.WriteInt4 (1);  				// version  				area.WriteInt4 (0);  				// reserved  				area.WriteInt8 (blocks.Count);  				// block count  				foreach (var block in blocks) {  					var mappedBlock = (IMappedBlock)block;  					long bottomInt = 0;  					long topInt = 0;  					int blockSize = mappedBlock.Count;  					if (blockSize > 0) {  						bottomInt = mappedBlock.Bottom;  						topInt = mappedBlock.Top;  					}  					long blockPointer = mappedBlock.BlockPointer;  					// Is the block new or was it changed?  					if (blockPointer == -1 || mappedBlock.HasChanged) {  						// If this isn't -1 then write this sector on the list of  						// sectors to delete during GC.  						if (blockPointer != -1)  							curIndexBlock.AddDeletedArea (blockPointer);  						// This is a new block or a block that's been changed  						// Write the block to the file system  						blockPointer = mappedBlock.Flush ();  					}  					area.WriteInt8 (bottomInt);  					area.WriteInt8 (topInt);  					area.WriteInt8 (blockPointer);  					area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  				}  				// Finish initializing the area  				area.Flush ();  			}  			// Add the deleted blocks  			var deletedBlocks = index.DeletedBlocks.ToArray ();  			for (int i = 0; i < deletedBlocks.Length; ++i) {  				long delBlockP = deletedBlocks [i].BlockPointer;  				if (delBlockP != -1)  					curIndexBlock.AddDeletedArea (delBlockP);  			}  			// Mark the current block as deleted  			curIndexBlock.MarkAsDeleted ();  			// Now create a new IndexBlock object  			var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  			newIndexBlock.Parent = curIndexBlock;  			// Add reference to the new one  			newIndexBlock.AddReference ();  			// Update the index_blocks list  			indexBlocks [indexNum] = newIndexBlock;  			// We remove this later.  			removedBlocks.Add (curIndexBlock);  		}  		// Commit the new index header (index_blocks)  		CommitIndexHeader ();  	} finally {  		Store.Unlock ();  	}  	// Commit finished.  } catch (IOException e) {  	throw new InvalidOperationException ("Error while committing index changed"' e);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: try {  	try {  		Store.Lock ();  		// For each Index in the index set'  		foreach (var index in indices) {  			int indexNum = index.IndexNumber;  			// The IndexBlock we are changing  			var curIndexBlock = indexBlocks [indexNum];  			// Get all the blocks in the list  			var blocks = index.AllBlocks.ToList ();  			// Make up a new block list for this index set.  			long blockP;  			using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  				blockP = area.Id;  				area.WriteInt4 (1);  				// version  				area.WriteInt4 (0);  				// reserved  				area.WriteInt8 (blocks.Count);  				// block count  				foreach (var block in blocks) {  					var mappedBlock = (IMappedBlock)block;  					long bottomInt = 0;  					long topInt = 0;  					int blockSize = mappedBlock.Count;  					if (blockSize > 0) {  						bottomInt = mappedBlock.Bottom;  						topInt = mappedBlock.Top;  					}  					long blockPointer = mappedBlock.BlockPointer;  					// Is the block new or was it changed?  					if (blockPointer == -1 || mappedBlock.HasChanged) {  						// If this isn't -1 then write this sector on the list of  						// sectors to delete during GC.  						if (blockPointer != -1)  							curIndexBlock.AddDeletedArea (blockPointer);  						// This is a new block or a block that's been changed  						// Write the block to the file system  						blockPointer = mappedBlock.Flush ();  					}  					area.WriteInt8 (bottomInt);  					area.WriteInt8 (topInt);  					area.WriteInt8 (blockPointer);  					area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  				}  				// Finish initializing the area  				area.Flush ();  			}  			// Add the deleted blocks  			var deletedBlocks = index.DeletedBlocks.ToArray ();  			for (int i = 0; i < deletedBlocks.Length; ++i) {  				long delBlockP = deletedBlocks [i].BlockPointer;  				if (delBlockP != -1)  					curIndexBlock.AddDeletedArea (delBlockP);  			}  			// Mark the current block as deleted  			curIndexBlock.MarkAsDeleted ();  			// Now create a new IndexBlock object  			var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  			newIndexBlock.Parent = curIndexBlock;  			// Add reference to the new one  			newIndexBlock.AddReference ();  			// Update the index_blocks list  			indexBlocks [indexNum] = newIndexBlock;  			// We remove this later.  			removedBlocks.Add (curIndexBlock);  		}  		// Commit the new index header (index_blocks)  		CommitIndexHeader ();  	} finally {  		Store.Unlock ();  	}  	// Commit finished.  } catch (IOException e) {  	throw new InvalidOperationException ("Error while committing index changed"' e);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: try {  	try {  		Store.Lock ();  		// For each Index in the index set'  		foreach (var index in indices) {  			int indexNum = index.IndexNumber;  			// The IndexBlock we are changing  			var curIndexBlock = indexBlocks [indexNum];  			// Get all the blocks in the list  			var blocks = index.AllBlocks.ToList ();  			// Make up a new block list for this index set.  			long blockP;  			using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  				blockP = area.Id;  				area.WriteInt4 (1);  				// version  				area.WriteInt4 (0);  				// reserved  				area.WriteInt8 (blocks.Count);  				// block count  				foreach (var block in blocks) {  					var mappedBlock = (IMappedBlock)block;  					long bottomInt = 0;  					long topInt = 0;  					int blockSize = mappedBlock.Count;  					if (blockSize > 0) {  						bottomInt = mappedBlock.Bottom;  						topInt = mappedBlock.Top;  					}  					long blockPointer = mappedBlock.BlockPointer;  					// Is the block new or was it changed?  					if (blockPointer == -1 || mappedBlock.HasChanged) {  						// If this isn't -1 then write this sector on the list of  						// sectors to delete during GC.  						if (blockPointer != -1)  							curIndexBlock.AddDeletedArea (blockPointer);  						// This is a new block or a block that's been changed  						// Write the block to the file system  						blockPointer = mappedBlock.Flush ();  					}  					area.WriteInt8 (bottomInt);  					area.WriteInt8 (topInt);  					area.WriteInt8 (blockPointer);  					area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  				}  				// Finish initializing the area  				area.Flush ();  			}  			// Add the deleted blocks  			var deletedBlocks = index.DeletedBlocks.ToArray ();  			for (int i = 0; i < deletedBlocks.Length; ++i) {  				long delBlockP = deletedBlocks [i].BlockPointer;  				if (delBlockP != -1)  					curIndexBlock.AddDeletedArea (delBlockP);  			}  			// Mark the current block as deleted  			curIndexBlock.MarkAsDeleted ();  			// Now create a new IndexBlock object  			var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  			newIndexBlock.Parent = curIndexBlock;  			// Add reference to the new one  			newIndexBlock.AddReference ();  			// Update the index_blocks list  			indexBlocks [indexNum] = newIndexBlock;  			// We remove this later.  			removedBlocks.Add (curIndexBlock);  		}  		// Commit the new index header (index_blocks)  		CommitIndexHeader ();  	} finally {  		Store.Unlock ();  	}  	// Commit finished.  } catch (IOException e) {  	throw new InvalidOperationException ("Error while committing index changed"' e);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: try {  	Store.Lock ();  	// For each Index in the index set'  	foreach (var index in indices) {  		int indexNum = index.IndexNumber;  		// The IndexBlock we are changing  		var curIndexBlock = indexBlocks [indexNum];  		// Get all the blocks in the list  		var blocks = index.AllBlocks.ToList ();  		// Make up a new block list for this index set.  		long blockP;  		using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  			blockP = area.Id;  			area.WriteInt4 (1);  			// version  			area.WriteInt4 (0);  			// reserved  			area.WriteInt8 (blocks.Count);  			// block count  			foreach (var block in blocks) {  				var mappedBlock = (IMappedBlock)block;  				long bottomInt = 0;  				long topInt = 0;  				int blockSize = mappedBlock.Count;  				if (blockSize > 0) {  					bottomInt = mappedBlock.Bottom;  					topInt = mappedBlock.Top;  				}  				long blockPointer = mappedBlock.BlockPointer;  				// Is the block new or was it changed?  				if (blockPointer == -1 || mappedBlock.HasChanged) {  					// If this isn't -1 then write this sector on the list of  					// sectors to delete during GC.  					if (blockPointer != -1)  						curIndexBlock.AddDeletedArea (blockPointer);  					// This is a new block or a block that's been changed  					// Write the block to the file system  					blockPointer = mappedBlock.Flush ();  				}  				area.WriteInt8 (bottomInt);  				area.WriteInt8 (topInt);  				area.WriteInt8 (blockPointer);  				area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  			}  			// Finish initializing the area  			area.Flush ();  		}  		// Add the deleted blocks  		var deletedBlocks = index.DeletedBlocks.ToArray ();  		for (int i = 0; i < deletedBlocks.Length; ++i) {  			long delBlockP = deletedBlocks [i].BlockPointer;  			if (delBlockP != -1)  				curIndexBlock.AddDeletedArea (delBlockP);  		}  		// Mark the current block as deleted  		curIndexBlock.MarkAsDeleted ();  		// Now create a new IndexBlock object  		var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  		newIndexBlock.Parent = curIndexBlock;  		// Add reference to the new one  		newIndexBlock.AddReference ();  		// Update the index_blocks list  		indexBlocks [indexNum] = newIndexBlock;  		// We remove this later.  		removedBlocks.Add (curIndexBlock);  	}  	// Commit the new index header (index_blocks)  	CommitIndexHeader ();  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: try {  	Store.Lock ();  	// For each Index in the index set'  	foreach (var index in indices) {  		int indexNum = index.IndexNumber;  		// The IndexBlock we are changing  		var curIndexBlock = indexBlocks [indexNum];  		// Get all the blocks in the list  		var blocks = index.AllBlocks.ToList ();  		// Make up a new block list for this index set.  		long blockP;  		using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  			blockP = area.Id;  			area.WriteInt4 (1);  			// version  			area.WriteInt4 (0);  			// reserved  			area.WriteInt8 (blocks.Count);  			// block count  			foreach (var block in blocks) {  				var mappedBlock = (IMappedBlock)block;  				long bottomInt = 0;  				long topInt = 0;  				int blockSize = mappedBlock.Count;  				if (blockSize > 0) {  					bottomInt = mappedBlock.Bottom;  					topInt = mappedBlock.Top;  				}  				long blockPointer = mappedBlock.BlockPointer;  				// Is the block new or was it changed?  				if (blockPointer == -1 || mappedBlock.HasChanged) {  					// If this isn't -1 then write this sector on the list of  					// sectors to delete during GC.  					if (blockPointer != -1)  						curIndexBlock.AddDeletedArea (blockPointer);  					// This is a new block or a block that's been changed  					// Write the block to the file system  					blockPointer = mappedBlock.Flush ();  				}  				area.WriteInt8 (bottomInt);  				area.WriteInt8 (topInt);  				area.WriteInt8 (blockPointer);  				area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  			}  			// Finish initializing the area  			area.Flush ();  		}  		// Add the deleted blocks  		var deletedBlocks = index.DeletedBlocks.ToArray ();  		for (int i = 0; i < deletedBlocks.Length; ++i) {  			long delBlockP = deletedBlocks [i].BlockPointer;  			if (delBlockP != -1)  				curIndexBlock.AddDeletedArea (delBlockP);  		}  		// Mark the current block as deleted  		curIndexBlock.MarkAsDeleted ();  		// Now create a new IndexBlock object  		var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  		newIndexBlock.Parent = curIndexBlock;  		// Add reference to the new one  		newIndexBlock.AddReference ();  		// Update the index_blocks list  		indexBlocks [indexNum] = newIndexBlock;  		// We remove this later.  		removedBlocks.Add (curIndexBlock);  	}  	// Commit the new index header (index_blocks)  	CommitIndexHeader ();  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: try {  	Store.Lock ();  	// For each Index in the index set'  	foreach (var index in indices) {  		int indexNum = index.IndexNumber;  		// The IndexBlock we are changing  		var curIndexBlock = indexBlocks [indexNum];  		// Get all the blocks in the list  		var blocks = index.AllBlocks.ToList ();  		// Make up a new block list for this index set.  		long blockP;  		using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  			blockP = area.Id;  			area.WriteInt4 (1);  			// version  			area.WriteInt4 (0);  			// reserved  			area.WriteInt8 (blocks.Count);  			// block count  			foreach (var block in blocks) {  				var mappedBlock = (IMappedBlock)block;  				long bottomInt = 0;  				long topInt = 0;  				int blockSize = mappedBlock.Count;  				if (blockSize > 0) {  					bottomInt = mappedBlock.Bottom;  					topInt = mappedBlock.Top;  				}  				long blockPointer = mappedBlock.BlockPointer;  				// Is the block new or was it changed?  				if (blockPointer == -1 || mappedBlock.HasChanged) {  					// If this isn't -1 then write this sector on the list of  					// sectors to delete during GC.  					if (blockPointer != -1)  						curIndexBlock.AddDeletedArea (blockPointer);  					// This is a new block or a block that's been changed  					// Write the block to the file system  					blockPointer = mappedBlock.Flush ();  				}  				area.WriteInt8 (bottomInt);  				area.WriteInt8 (topInt);  				area.WriteInt8 (blockPointer);  				area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  			}  			// Finish initializing the area  			area.Flush ();  		}  		// Add the deleted blocks  		var deletedBlocks = index.DeletedBlocks.ToArray ();  		for (int i = 0; i < deletedBlocks.Length; ++i) {  			long delBlockP = deletedBlocks [i].BlockPointer;  			if (delBlockP != -1)  				curIndexBlock.AddDeletedArea (delBlockP);  		}  		// Mark the current block as deleted  		curIndexBlock.MarkAsDeleted ();  		// Now create a new IndexBlock object  		var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  		newIndexBlock.Parent = curIndexBlock;  		// Add reference to the new one  		newIndexBlock.AddReference ();  		// Update the index_blocks list  		indexBlocks [indexNum] = newIndexBlock;  		// We remove this later.  		removedBlocks.Add (curIndexBlock);  	}  	// Commit the new index header (index_blocks)  	CommitIndexHeader ();  } finally {  	Store.Unlock ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: foreach (var index in indices) {  	int indexNum = index.IndexNumber;  	// The IndexBlock we are changing  	var curIndexBlock = indexBlocks [indexNum];  	// Get all the blocks in the list  	var blocks = index.AllBlocks.ToList ();  	// Make up a new block list for this index set.  	long blockP;  	using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  		blockP = area.Id;  		area.WriteInt4 (1);  		// version  		area.WriteInt4 (0);  		// reserved  		area.WriteInt8 (blocks.Count);  		// block count  		foreach (var block in blocks) {  			var mappedBlock = (IMappedBlock)block;  			long bottomInt = 0;  			long topInt = 0;  			int blockSize = mappedBlock.Count;  			if (blockSize > 0) {  				bottomInt = mappedBlock.Bottom;  				topInt = mappedBlock.Top;  			}  			long blockPointer = mappedBlock.BlockPointer;  			// Is the block new or was it changed?  			if (blockPointer == -1 || mappedBlock.HasChanged) {  				// If this isn't -1 then write this sector on the list of  				// sectors to delete during GC.  				if (blockPointer != -1)  					curIndexBlock.AddDeletedArea (blockPointer);  				// This is a new block or a block that's been changed  				// Write the block to the file system  				blockPointer = mappedBlock.Flush ();  			}  			area.WriteInt8 (bottomInt);  			area.WriteInt8 (topInt);  			area.WriteInt8 (blockPointer);  			area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  		}  		// Finish initializing the area  		area.Flush ();  	}  	// Add the deleted blocks  	var deletedBlocks = index.DeletedBlocks.ToArray ();  	for (int i = 0; i < deletedBlocks.Length; ++i) {  		long delBlockP = deletedBlocks [i].BlockPointer;  		if (delBlockP != -1)  			curIndexBlock.AddDeletedArea (delBlockP);  	}  	// Mark the current block as deleted  	curIndexBlock.MarkAsDeleted ();  	// Now create a new IndexBlock object  	var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  	newIndexBlock.Parent = curIndexBlock;  	// Add reference to the new one  	newIndexBlock.AddReference ();  	// Update the index_blocks list  	indexBlocks [indexNum] = newIndexBlock;  	// We remove this later.  	removedBlocks.Add (curIndexBlock);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: foreach (var index in indices) {  	int indexNum = index.IndexNumber;  	// The IndexBlock we are changing  	var curIndexBlock = indexBlocks [indexNum];  	// Get all the blocks in the list  	var blocks = index.AllBlocks.ToList ();  	// Make up a new block list for this index set.  	long blockP;  	using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  		blockP = area.Id;  		area.WriteInt4 (1);  		// version  		area.WriteInt4 (0);  		// reserved  		area.WriteInt8 (blocks.Count);  		// block count  		foreach (var block in blocks) {  			var mappedBlock = (IMappedBlock)block;  			long bottomInt = 0;  			long topInt = 0;  			int blockSize = mappedBlock.Count;  			if (blockSize > 0) {  				bottomInt = mappedBlock.Bottom;  				topInt = mappedBlock.Top;  			}  			long blockPointer = mappedBlock.BlockPointer;  			// Is the block new or was it changed?  			if (blockPointer == -1 || mappedBlock.HasChanged) {  				// If this isn't -1 then write this sector on the list of  				// sectors to delete during GC.  				if (blockPointer != -1)  					curIndexBlock.AddDeletedArea (blockPointer);  				// This is a new block or a block that's been changed  				// Write the block to the file system  				blockPointer = mappedBlock.Flush ();  			}  			area.WriteInt8 (bottomInt);  			area.WriteInt8 (topInt);  			area.WriteInt8 (blockPointer);  			area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  		}  		// Finish initializing the area  		area.Flush ();  	}  	// Add the deleted blocks  	var deletedBlocks = index.DeletedBlocks.ToArray ();  	for (int i = 0; i < deletedBlocks.Length; ++i) {  		long delBlockP = deletedBlocks [i].BlockPointer;  		if (delBlockP != -1)  			curIndexBlock.AddDeletedArea (delBlockP);  	}  	// Mark the current block as deleted  	curIndexBlock.MarkAsDeleted ();  	// Now create a new IndexBlock object  	var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  	newIndexBlock.Parent = curIndexBlock;  	// Add reference to the new one  	newIndexBlock.AddReference ();  	// Update the index_blocks list  	indexBlocks [indexNum] = newIndexBlock;  	// We remove this later.  	removedBlocks.Add (curIndexBlock);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: foreach (var index in indices) {  	int indexNum = index.IndexNumber;  	// The IndexBlock we are changing  	var curIndexBlock = indexBlocks [indexNum];  	// Get all the blocks in the list  	var blocks = index.AllBlocks.ToList ();  	// Make up a new block list for this index set.  	long blockP;  	using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  		blockP = area.Id;  		area.WriteInt4 (1);  		// version  		area.WriteInt4 (0);  		// reserved  		area.WriteInt8 (blocks.Count);  		// block count  		foreach (var block in blocks) {  			var mappedBlock = (IMappedBlock)block;  			long bottomInt = 0;  			long topInt = 0;  			int blockSize = mappedBlock.Count;  			if (blockSize > 0) {  				bottomInt = mappedBlock.Bottom;  				topInt = mappedBlock.Top;  			}  			long blockPointer = mappedBlock.BlockPointer;  			// Is the block new or was it changed?  			if (blockPointer == -1 || mappedBlock.HasChanged) {  				// If this isn't -1 then write this sector on the list of  				// sectors to delete during GC.  				if (blockPointer != -1)  					curIndexBlock.AddDeletedArea (blockPointer);  				// This is a new block or a block that's been changed  				// Write the block to the file system  				blockPointer = mappedBlock.Flush ();  			}  			area.WriteInt8 (bottomInt);  			area.WriteInt8 (topInt);  			area.WriteInt8 (blockPointer);  			area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  		}  		// Finish initializing the area  		area.Flush ();  	}  	// Add the deleted blocks  	var deletedBlocks = index.DeletedBlocks.ToArray ();  	for (int i = 0; i < deletedBlocks.Length; ++i) {  		long delBlockP = deletedBlocks [i].BlockPointer;  		if (delBlockP != -1)  			curIndexBlock.AddDeletedArea (delBlockP);  	}  	// Mark the current block as deleted  	curIndexBlock.MarkAsDeleted ();  	// Now create a new IndexBlock object  	var newIndexBlock = new IndexBlock (this' indexNum' curIndexBlock.BlockSize' blockP);  	newIndexBlock.Parent = curIndexBlock;  	// Add reference to the new one  	newIndexBlock.AddReference ();  	// Update the index_blocks list  	indexBlocks [indexNum] = newIndexBlock;  	// We remove this later.  	removedBlocks.Add (curIndexBlock);  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  	blockP = area.Id;  	area.WriteInt4 (1);  	// version  	area.WriteInt4 (0);  	// reserved  	area.WriteInt8 (blocks.Count);  	// block count  	foreach (var block in blocks) {  		var mappedBlock = (IMappedBlock)block;  		long bottomInt = 0;  		long topInt = 0;  		int blockSize = mappedBlock.Count;  		if (blockSize > 0) {  			bottomInt = mappedBlock.Bottom;  			topInt = mappedBlock.Top;  		}  		long blockPointer = mappedBlock.BlockPointer;  		// Is the block new or was it changed?  		if (blockPointer == -1 || mappedBlock.HasChanged) {  			// If this isn't -1 then write this sector on the list of  			// sectors to delete during GC.  			if (blockPointer != -1)  				curIndexBlock.AddDeletedArea (blockPointer);  			// This is a new block or a block that's been changed  			// Write the block to the file system  			blockPointer = mappedBlock.Flush ();  		}  		area.WriteInt8 (bottomInt);  		area.WriteInt8 (topInt);  		area.WriteInt8 (blockPointer);  		area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  	}  	// Finish initializing the area  	area.Flush ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  	blockP = area.Id;  	area.WriteInt4 (1);  	// version  	area.WriteInt4 (0);  	// reserved  	area.WriteInt8 (blocks.Count);  	// block count  	foreach (var block in blocks) {  		var mappedBlock = (IMappedBlock)block;  		long bottomInt = 0;  		long topInt = 0;  		int blockSize = mappedBlock.Count;  		if (blockSize > 0) {  			bottomInt = mappedBlock.Bottom;  			topInt = mappedBlock.Top;  		}  		long blockPointer = mappedBlock.BlockPointer;  		// Is the block new or was it changed?  		if (blockPointer == -1 || mappedBlock.HasChanged) {  			// If this isn't -1 then write this sector on the list of  			// sectors to delete during GC.  			if (blockPointer != -1)  				curIndexBlock.AddDeletedArea (blockPointer);  			// This is a new block or a block that's been changed  			// Write the block to the file system  			blockPointer = mappedBlock.Flush ();  		}  		area.WriteInt8 (bottomInt);  		area.WriteInt8 (topInt);  		area.WriteInt8 (blockPointer);  		area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  	}  	// Finish initializing the area  	area.Flush ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: using (var area = Store.CreateArea (16 + (blocks.Count * 28))) {  	blockP = area.Id;  	area.WriteInt4 (1);  	// version  	area.WriteInt4 (0);  	// reserved  	area.WriteInt8 (blocks.Count);  	// block count  	foreach (var block in blocks) {  		var mappedBlock = (IMappedBlock)block;  		long bottomInt = 0;  		long topInt = 0;  		int blockSize = mappedBlock.Count;  		if (blockSize > 0) {  			bottomInt = mappedBlock.Bottom;  			topInt = mappedBlock.Top;  		}  		long blockPointer = mappedBlock.BlockPointer;  		// Is the block new or was it changed?  		if (blockPointer == -1 || mappedBlock.HasChanged) {  			// If this isn't -1 then write this sector on the list of  			// sectors to delete during GC.  			if (blockPointer != -1)  				curIndexBlock.AddDeletedArea (blockPointer);  			// This is a new block or a block that's been changed  			// Write the block to the file system  			blockPointer = mappedBlock.Flush ();  		}  		area.WriteInt8 (bottomInt);  		area.WriteInt8 (topInt);  		area.WriteInt8 (blockPointer);  		area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  	}  	// Finish initializing the area  	area.Flush ();  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: foreach (var block in blocks) {  	var mappedBlock = (IMappedBlock)block;  	long bottomInt = 0;  	long topInt = 0;  	int blockSize = mappedBlock.Count;  	if (blockSize > 0) {  		bottomInt = mappedBlock.Bottom;  		topInt = mappedBlock.Top;  	}  	long blockPointer = mappedBlock.BlockPointer;  	// Is the block new or was it changed?  	if (blockPointer == -1 || mappedBlock.HasChanged) {  		// If this isn't -1 then write this sector on the list of  		// sectors to delete during GC.  		if (blockPointer != -1)  			curIndexBlock.AddDeletedArea (blockPointer);  		// This is a new block or a block that's been changed  		// Write the block to the file system  		blockPointer = mappedBlock.Flush ();  	}  	area.WriteInt8 (bottomInt);  	area.WriteInt8 (topInt);  	area.WriteInt8 (blockPointer);  	area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  }  
Magic Number,Deveel.Data.Index,IndexSetStore,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\IndexSetStore.cs,CommitIndexSet,The following statement contains a magic number: area.WriteInt4 (blockSize | (((int)mappedBlock.CompactType) << 24));  
Magic Number,Deveel.Data.Index,BlindSearchIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlindSearchIndex.cs,HighestSearch,The following statement contains a magic number: if ((higher - lower) <= 5) {  	// Start from the bottom up until we find the highest val  	for (var i = higher; i >= lower; --i) {  		int res = ob.CompareTo (GetValue (list [i]));  		if (res >= 0)  			return i + 1;  	}  	// Didn't find return lowest  	return lower;  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,BlockIndexBase,The following statement contains a magic number: Blocks = new List<IIndexBlock<T>> (10);  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,InsertIntoBlock,The following statement contains a magic number: if (block.IsFull) {  	// We need to move half of the data out of this block into either the  	// next block or create a new block to store it.  	// The size that we going to zap out of this block.  	int moveSize = (block.Count / 7) - 1;  	// The block to move half the data from this block.  	IIndexBlock<T> moveTo;  	// Is there a next block?  	if (blockIndex < Blocks.Count - 1) {  		var nextBlock = Blocks [blockIndex + 1];  		// Yes' can this block contain half the values from this block?  		if (nextBlock.CanContain (moveSize)) {  			moveTo = nextBlock;  		} else {  			// Can't contain so insert a new block.  			moveTo = InsertBlock (blockIndex + 1' NewBlock ());  		}  	} else {  		// No next block so create a new block  		moveTo = InsertBlock (blockIndex + 1' NewBlock ());  	}  	// 'moveTo' should be set to the block we are to use to move half the  	// data from this block.  	block.MoveTo (moveTo' 0' moveSize);  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindBlockContaining,The following statement contains a magic number: while (low <= high) {  	int mid = (low + high) / 2;  	var block = Blocks [mid];  	// Is what we are searching for lower than the bottom value?  	if (comparer.CompareValue (block.Bottom' (Field)key) > 0) {  		high = mid - 1;  	} // No' then is it greater than the highest value?  	else if (comparer.CompareValue (block.Top' (Field)key) < 0) {  		low = mid + 1;  	} // Must be inside this block then!  	else {  		return mid;  	}  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindLastBlock,The following statement contains a magic number: while (low <= high) {  	if (high - low <= 2) {  		for (int i = high; i >= low; --i) {  			var block1 = Blocks [i];  			if (comparer.CompareValue (block1.Bottom' (Field)key) <= 0) {  				if (comparer.CompareValue (block1.Top' (Field)key) >= 0)  					return i;  				return -(i + 1) - 1;  			}  		}  		return -(low + 1);  	}  	int mid = (low + high) / 2;  	var block = Blocks [mid];  	// Is what we are searching for lower than the bottom value?  	if (comparer.CompareValue (block.Bottom' (Field)key) > 0) {  		high = mid - 1;  	} // No' then is it greater than the highest value?  	else if (comparer.CompareValue (block.Top' (Field)key) < 0) {  		low = mid + 1;  	} // Equal' so highest must be someplace between mid and high.  	else {  		low = mid;  		if (low == high) {  			return low;  		}  	}  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindLastBlock,The following statement contains a magic number: while (low <= high) {  	if (high - low <= 2) {  		for (int i = high; i >= low; --i) {  			var block1 = Blocks [i];  			if (comparer.CompareValue (block1.Bottom' (Field)key) <= 0) {  				if (comparer.CompareValue (block1.Top' (Field)key) >= 0)  					return i;  				return -(i + 1) - 1;  			}  		}  		return -(low + 1);  	}  	int mid = (low + high) / 2;  	var block = Blocks [mid];  	// Is what we are searching for lower than the bottom value?  	if (comparer.CompareValue (block.Bottom' (Field)key) > 0) {  		high = mid - 1;  	} // No' then is it greater than the highest value?  	else if (comparer.CompareValue (block.Top' (Field)key) < 0) {  		low = mid + 1;  	} // Equal' so highest must be someplace between mid and high.  	else {  		low = mid;  		if (low == high) {  			return low;  		}  	}  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindLastBlock,The following statement contains a magic number: if (high - low <= 2) {  	for (int i = high; i >= low; --i) {  		var block1 = Blocks [i];  		if (comparer.CompareValue (block1.Bottom' (Field)key) <= 0) {  			if (comparer.CompareValue (block1.Top' (Field)key) >= 0)  				return i;  			return -(i + 1) - 1;  		}  	}  	return -(low + 1);  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindFirstBlock,The following statement contains a magic number: while (low <= high) {  	if (high - low <= 2) {  		for (int i = low; i <= high; ++i) {  			var block1 = Blocks [i];  			if (c.CompareValue (block1.Top' (Field)key) >= 0) {  				if (c.CompareValue (block1.Bottom' (Field)key) <= 0)  					return i;  				return -(i + 1);  			}  		}  		return -(high + 1) - 1;  	}  	int mid = (low + high) / 2;  	var block = Blocks [mid];  	// Is what we are searching for lower than the bottom value?  	if (c.CompareValue (block.Bottom' (Field)key) > 0) {  		high = mid - 1;  	} // No' then is it greater than the highest value?  	else if (c.CompareValue (block.Top' (Field)key) < 0) {  		low = mid + 1;  	} // Equal' so highest must be someplace between mid and high.  	else {  		high = mid;  	}  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindFirstBlock,The following statement contains a magic number: while (low <= high) {  	if (high - low <= 2) {  		for (int i = low; i <= high; ++i) {  			var block1 = Blocks [i];  			if (c.CompareValue (block1.Top' (Field)key) >= 0) {  				if (c.CompareValue (block1.Bottom' (Field)key) <= 0)  					return i;  				return -(i + 1);  			}  		}  		return -(high + 1) - 1;  	}  	int mid = (low + high) / 2;  	var block = Blocks [mid];  	// Is what we are searching for lower than the bottom value?  	if (c.CompareValue (block.Bottom' (Field)key) > 0) {  		high = mid - 1;  	} // No' then is it greater than the highest value?  	else if (c.CompareValue (block.Top' (Field)key) < 0) {  		low = mid + 1;  	} // Equal' so highest must be someplace between mid and high.  	else {  		high = mid;  	}  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindFirstBlock,The following statement contains a magic number: if (high - low <= 2) {  	for (int i = low; i <= high; ++i) {  		var block1 = Blocks [i];  		if (c.CompareValue (block1.Top' (Field)key) >= 0) {  			if (c.CompareValue (block1.Bottom' (Field)key) <= 0)  				return i;  			return -(i + 1);  		}  	}  	return -(high + 1) - 1;  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindLastBlock,The following statement contains a magic number: while (low <= high) {  	if (high - low <= 2) {  		for (int i = high; i >= low; --i) {  			var block1 = Blocks [i];  			if (IsSmallerOrEqual (block1.Bottom' val)) {  				if (IsGreaterOrEqual (block1.Top' val))  					return i;  				return -(i + 1) - 1;  			}  		}  		return -(low + 1);  	}  	int mid = (low + high) / 2;  	var block = Blocks [mid];  	// Is what we are searching for lower than the bottom value?  	if (IsGreater (block.Bottom' val)) {  		high = mid - 1;  	} // No' then is it greater than the highest value?  	else if (IsSmaller (block.Top' val)) {  		low = mid + 1;  	} // Equal' so highest must be someplace between mid and high.  	else {  		low = mid;  		if (low == high) {  			return low;  		}  	}  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindLastBlock,The following statement contains a magic number: while (low <= high) {  	if (high - low <= 2) {  		for (int i = high; i >= low; --i) {  			var block1 = Blocks [i];  			if (IsSmallerOrEqual (block1.Bottom' val)) {  				if (IsGreaterOrEqual (block1.Top' val))  					return i;  				return -(i + 1) - 1;  			}  		}  		return -(low + 1);  	}  	int mid = (low + high) / 2;  	var block = Blocks [mid];  	// Is what we are searching for lower than the bottom value?  	if (IsGreater (block.Bottom' val)) {  		high = mid - 1;  	} // No' then is it greater than the highest value?  	else if (IsSmaller (block.Top' val)) {  		low = mid + 1;  	} // Equal' so highest must be someplace between mid and high.  	else {  		low = mid;  		if (low == high) {  			return low;  		}  	}  }  
Magic Number,Deveel.Data.Index,BlockIndexBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\BlockIndexBase_T.cs,FindLastBlock,The following statement contains a magic number: if (high - low <= 2) {  	for (int i = high; i >= low; --i) {  		var block1 = Blocks [i];  		if (IsSmallerOrEqual (block1.Bottom' val)) {  			if (IsGreaterOrEqual (block1.Top' val))  				return i;  			return -(i + 1) - 1;  		}  	}  	return -(low + 1);  }  
Magic Number,Deveel.Data.Index,ColumnIndex,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Index\ColumnIndex.cs,Order,The following statement contains a magic number: if (rowSetLength <= 250000) {  	// If the subset is less than or equal to 250'000 elements' we generate  	// an array in memory that contains all values in the set and we sort  	// it.  This requires use of memory from the heap but is faster than  	// the no heap use method.  	var subsetList = new List<Field> (rowSetLength);  	foreach (var row in rowSet) {  		subsetList.Add (GetValue (row));  	}  	// The comparator we use to sort  	var comparer = new SubsetIndexComparer (subsetList.ToArray ());  	// Fill new_set with the set { 0' 1' 2' .... ' row_set_length }  	for (int i = 0; i < rowSetLength; ++i) {  		var cell = subsetList [i];  		newSet.InsertSort (cell' i' comparer);  	}  } else {  	// This is the no additional heap use method to sorting the sub-set.  	// The comparator we use to sort  	var comparer = new IndexComparer (this' rowSet);  	// Fill new_set with the set { 0' 1' 2' .... ' row_set_length }  	for (int i = 0; i < rowSetLength; ++i) {  		var cell = GetValue (rowSet [i]);  		newSet.InsertSort (cell' i' comparer);  	}  }  
Missing Default,Deveel.Data.Client,DatabaseExtensions,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Client\DatabaseExtensions.cs,BuildConnectionString,The following switch statement is missing a default case: switch (pair.Key.ToUpperInvariant ()) {  case "DATABASE.NAME":  case "DBNAME":  	settings.Database = configuration.GetString (pair.Key);  	break;  case "USERNAME":  case "USERID":  case "USER.NAME":  case "USER.ID":  case "CONNECTION.USERNAME":  case "CONNECTION.USER":  case "CONNECTION.USERID":  	settings.UserName = configuration.GetString (pair.Key);  	break;  case "PASSWORD":  case "PASS":  case "USER.PASSWORD":  case "SECRET":  case "CONNECTION.PASSWORD":  case "CONNECTION.PASS":  	settings.Password = configuration.GetString (pair.Key);  	break;  case "PARAMETERSTYLE":  case "PARAMSTYLE":  case "CONNECTION.PARAMETERSTYLE":  	settings.ParameterStyle = configuration.GetValue<QueryParameterStyle> (pair.Key);  	break;  case "IGNORECASE":  case "CONNECTION.IGNORECASE":  case "IGNOREIDENTIFIERSCASE":  case "CONNECTION.IGNOREIDENTIFIERSCASE":  	settings.IgnoreIdentifiersCase = configuration.GetBoolean (pair.Key);  	break;  }  
Missing Default,Deveel.Data.Diagnostics,LoggerBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\LoggerBase.cs,CanRoute,The following switch statement is missing a default case: switch (errorEvent.Level) {  case ErrorLevel.Error:  	return IsErrorEnabled;  case ErrorLevel.Warning:  	return IsWarningEnabled;  case ErrorLevel.Critical:  	return IsCriticalEnabled;  }  
Missing Default,Deveel.Data.Diagnostics,LoggerBase,D:\newReposJune17\deveel_deveeldb\src\deveeldb\Deveel.Data.Diagnostics\LoggerBase.cs,CanRoute,The following switch statement is missing a default case: switch (infoEvent.Level) {  case InformationLevel.Debug:  	return IsDebugEnabled;  case InformationLevel.Information:  	return IsInfoEnabled;  case InformationLevel.Verbose:  	return IsVerboseEnabled;  }  
