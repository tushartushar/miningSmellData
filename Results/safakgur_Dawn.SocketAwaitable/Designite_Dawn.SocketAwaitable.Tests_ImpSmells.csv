Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitableTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitableTests.cs,TestBuffer,The following statement contains a magic number: var data = new byte[32];
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitableTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitableTests.cs,TestBuffer,The following statement contains a magic number: var buffer = new ArraySegment<byte>(data' 8' 16);
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitableTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitableTests.cs,TestBuffer,The following statement contains a magic number: var buffer = new ArraySegment<byte>(data' 8' 16);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: var acceptReceiveTask = Task.Run(async () =>                  {                      // Accept.                      Socket accepted;                      using (var acceptAwaitable = new SocketAwaitable())                      {                          Assert.IsNull(acceptAwaitable.AcceptSocket);                            var acceptResult = await listener.AcceptAsync(acceptAwaitable);                          Assert.AreEqual(acceptResult' SocketError.Success);                          Assert.IsNotNull(acceptAwaitable.AcceptSocket);                          accepted = acceptAwaitable.AcceptSocket;                      }                        // Receive.                      using (var receiveAwaitable = new SocketAwaitable())                      {                          receiveAwaitable.Buffer = new ArraySegment<byte>(new byte[16]' 2' 14);                            var receiveResult = await accepted.ReceiveAsync(receiveAwaitable);                          Assert.AreEqual(receiveResult' SocketError.Success);                          Assert.AreEqual(receiveAwaitable.Transferred.Count' 1);                          Assert.AreEqual(                              receiveAwaitable.Buffer.Array[receiveAwaitable.Buffer.Offset]'                              7);                      }                  });
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: var acceptReceiveTask = Task.Run(async () =>                  {                      // Accept.                      Socket accepted;                      using (var acceptAwaitable = new SocketAwaitable())                      {                          Assert.IsNull(acceptAwaitable.AcceptSocket);                            var acceptResult = await listener.AcceptAsync(acceptAwaitable);                          Assert.AreEqual(acceptResult' SocketError.Success);                          Assert.IsNotNull(acceptAwaitable.AcceptSocket);                          accepted = acceptAwaitable.AcceptSocket;                      }                        // Receive.                      using (var receiveAwaitable = new SocketAwaitable())                      {                          receiveAwaitable.Buffer = new ArraySegment<byte>(new byte[16]' 2' 14);                            var receiveResult = await accepted.ReceiveAsync(receiveAwaitable);                          Assert.AreEqual(receiveResult' SocketError.Success);                          Assert.AreEqual(receiveAwaitable.Transferred.Count' 1);                          Assert.AreEqual(                              receiveAwaitable.Buffer.Array[receiveAwaitable.Buffer.Offset]'                              7);                      }                  });
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: var acceptReceiveTask = Task.Run(async () =>                  {                      // Accept.                      Socket accepted;                      using (var acceptAwaitable = new SocketAwaitable())                      {                          Assert.IsNull(acceptAwaitable.AcceptSocket);                            var acceptResult = await listener.AcceptAsync(acceptAwaitable);                          Assert.AreEqual(acceptResult' SocketError.Success);                          Assert.IsNotNull(acceptAwaitable.AcceptSocket);                          accepted = acceptAwaitable.AcceptSocket;                      }                        // Receive.                      using (var receiveAwaitable = new SocketAwaitable())                      {                          receiveAwaitable.Buffer = new ArraySegment<byte>(new byte[16]' 2' 14);                            var receiveResult = await accepted.ReceiveAsync(receiveAwaitable);                          Assert.AreEqual(receiveResult' SocketError.Success);                          Assert.AreEqual(receiveAwaitable.Transferred.Count' 1);                          Assert.AreEqual(                              receiveAwaitable.Buffer.Array[receiveAwaitable.Buffer.Offset]'                              7);                      }                  });
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: var acceptReceiveTask = Task.Run(async () =>                  {                      // Accept.                      Socket accepted;                      using (var acceptAwaitable = new SocketAwaitable())                      {                          Assert.IsNull(acceptAwaitable.AcceptSocket);                            var acceptResult = await listener.AcceptAsync(acceptAwaitable);                          Assert.AreEqual(acceptResult' SocketError.Success);                          Assert.IsNotNull(acceptAwaitable.AcceptSocket);                          accepted = acceptAwaitable.AcceptSocket;                      }                        // Receive.                      using (var receiveAwaitable = new SocketAwaitable())                      {                          receiveAwaitable.Buffer = new ArraySegment<byte>(new byte[16]' 2' 14);                            var receiveResult = await accepted.ReceiveAsync(receiveAwaitable);                          Assert.AreEqual(receiveResult' SocketError.Success);                          Assert.AreEqual(receiveAwaitable.Transferred.Count' 1);                          Assert.AreEqual(                              receiveAwaitable.Buffer.Array[receiveAwaitable.Buffer.Offset]'                              7);                      }                  });
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: sendAwaitable.Buffer = new ArraySegment<byte>(                              new byte[] { 0' 1' 2' 3' 4' 5' 6' 7 }' 7' 1);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: sendAwaitable.Buffer = new ArraySegment<byte>(                              new byte[] { 0' 1' 2' 3' 4' 5' 6' 7 }' 7' 1);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: sendAwaitable.Buffer = new ArraySegment<byte>(                              new byte[] { 0' 1' 2' 3' 4' 5' 6' 7 }' 7' 1);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: sendAwaitable.Buffer = new ArraySegment<byte>(                              new byte[] { 0' 1' 2' 3' 4' 5' 6' 7 }' 7' 1);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: sendAwaitable.Buffer = new ArraySegment<byte>(                              new byte[] { 0' 1' 2' 3' 4' 5' 6' 7 }' 7' 1);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: sendAwaitable.Buffer = new ArraySegment<byte>(                              new byte[] { 0' 1' 2' 3' 4' 5' 6' 7 }' 7' 1);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestCommonOperations,The following statement contains a magic number: sendAwaitable.Buffer = new ArraySegment<byte>(                              new byte[] { 0' 1' 2' 3' 4' 5' 6' 7 }' 7' 1);
Magic Number,Dawn.Net.Sockets.Tests,SocketExTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketExTests.cs,TestAwaiterStatus,The following statement contains a magic number: await Task.Delay(500);
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitablePoolTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitablePoolTests.cs,TestInitialization,The following statement contains a magic number: int count = 20;
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitablePoolTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitablePoolTests.cs,TestConcurrentAccess,The following statement contains a magic number: int count = 20;
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitablePoolTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitablePoolTests.cs,TestConcurrentAccess,The following statement contains a magic number: var addTask = Task.Run(                  () => Parallel.For(0' 1000000' i => pool.Add(new SocketAwaitable())));
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitablePoolTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitablePoolTests.cs,TestConcurrentAccess,The following statement contains a magic number: var takeTask = Task.Run(                  () => Parallel.For(0' 1000000 + count' i => Assert.IsNotNull(pool.Take())));
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitablePoolTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitablePoolTests.cs,TestLockingSyncRoot,The following statement contains a magic number: var p = new SocketAwaitablePool(r.Next(1000000)) as ICollection;
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitablePoolTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitablePoolTests.cs,TestCopyingToSmallArray,The following statement contains a magic number: var p = new SocketAwaitablePool(2) as ICollection;
Magic Number,Dawn.Net.Sockets.Tests,SocketAwaitablePoolTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\SocketAwaitablePoolTests.cs,TestAddingAfterDispose,The following statement contains a magic number: var count = 20;
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestInitialization,The following statement contains a magic number: int size = 300;
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestInitialization,The following statement contains a magic number: int count = 4000;
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestInitializationUsingSizeZero,The following statement contains a magic number: int count = 4000;
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestInitializationUsingCountZero,The following statement contains a magic number: int size = 300;
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestTakingAndReleasing,The following statement contains a magic number: var count = 4000;
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestTakingAndReleasing,The following statement contains a magic number: var manager = new BlockingBufferManager(300' count);
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestTakingAndReleasing,The following statement contains a magic number: Task.Delay(1000).ContinueWith(t =>                  Parallel.For(0' count' i => manager.ReleaseBuffer(buffers[i])));
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestDisposingBeforeGettingBuffer,The following statement contains a magic number: var count = 4000;
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestDisposingBeforeGettingBuffer,The following statement contains a magic number: var manager = new BlockingBufferManager(300' count);
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestDisposingBeforeReleasingBuffer,The following statement contains a magic number: var count = 4000;
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestDisposingBeforeReleasingBuffer,The following statement contains a magic number: var manager = new BlockingBufferManager(300' count);
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestDisposingWhileGettingBuffer,The following statement contains a magic number: var manager = new BlockingBufferManager(300' 1);
Magic Number,Dawn.Net.Sockets.Tests,BlockingBufferManagerTests,D:\research\architectureSmells\repos1\safakgur_Dawn.SocketAwaitable\src\Dawn.SocketAwaitable.Tests\BlockingBufferManagerTests.cs,TestDisposingWhileGettingBuffer,The following statement contains a magic number: Task.Delay(1000).ContinueWith(t => manager.Dispose());
