Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tibia960,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin960\plugin.cs,loadDat,The method has 283 lines of code.
Long Statement,Tibia960,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin960\plugin.cs,loadDat,The length of the statement  "                        Trace.WriteLine(String.Format("Plugin: Bad signature' dat signature is {0} and signature is {0}"' datSignature' signature));" is 124.
Magic Number,Tibia960,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin960\plugin.cs,loadDat,The following statement contains a magic number: UInt16 minclientID = 100;
Magic Number,Tibia960,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin960\plugin.cs,loadDat,The following statement contains a magic number: switch (optbyte)                             {                                 case 0x00: //groundtile                                     {                                         item.groundSpeed = reader.ReadUInt16();                                         item.type = ItemType.Ground;                                     } break;                                  case 0x01: //all OnTop                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 1;                                     } break;                                  case 0x02: //can walk trough (open doors' arces' bug pen fence)                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 2;                                     } break;                                  case 0x03: //can walk trough (arces)                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 3;                                     } break;                                  case 0x04: //container                                     {                                         item.type = ItemType.Container;                                     } break;                                  case 0x05: //stackable                                     {                                         item.isStackable = true;                                         break;                                     }                                  case 0x06: //unknown                                     {                                     } break;                                  case 0x07: //useable                                     {                                         item.hasUseWith = true;                                     } break;                                  case 0x08: //read/write-able                                     {                                         item.isReadable = true;                                         //item.isWriteable = true;                                         item.maxReadWriteChars = reader.ReadUInt16();                                     } break;                                  case 0x09: //readable                                     {                                         item.isReadable = true;                                         item.maxReadChars = reader.ReadUInt16();                                     } break;                                  case 0x0A: //fluid containers                                     {                                         item.type = ItemType.Fluid;                                     } break;                                  case 0x0B: //splashes                                     {                                         item.type = ItemType.Splash;                                     } break;                                  case 0x0C: //blocks solid objects (creatures' walls etc)                                     {                                         item.blockObject = true;                                     } break;                                  case 0x0D: //not moveable                                     {                                         item.isMoveable = false;                                     } break;                                  case 0x0E: //blocks missiles (walls' magic wall etc)                                     {                                         item.blockProjectile = true;                                     } break;                                  case 0x0F: //blocks pathfind algorithms (monsters)                                     {                                         item.blockPathFind = true;                                     } break;                                  case 0x10: //blocks monster movement (flowers' parcels etc)                                     {                                         item.isPickupable = true;                                     } break;                                  case 0x11: //hangable objects (wallpaper etc)                                     {                                         item.isHangable = true;                                     } break;                                  case 0x12: //horizontal wall                                     {                                         item.isHorizontal = true;                                     } break;                                  case 0x13: //vertical wall                                     {                                         item.isVertical = true;                                     } break;                                  case 0x14: //rotatable                                     {                                         item.isRotatable = true;                                     } break;                                  case 0x15: //light info                                     {                                         item.lightLevel = reader.ReadUInt16();                                         item.lightColor = reader.ReadUInt16();                                     } break;                                  case 0x16: //unknown                                     {                                     } break;                                  case 0x17: //changes floor                                     {                                     } break;                                  case 0x18: //unknown                                     {                                         reader.BaseStream.Seek(4' SeekOrigin.Current);                                     } break;                                  case 0x19:                                     {                                         item.hasHeight = true;                                         UInt16 height = reader.ReadUInt16();                                     } break;                                  case 0x1A: //unknown                                     {                                     } break;                                   case 0x1B: //unknown                                     {                                     } break;                                  case 0x1C: //minimap color                                     {                                         item.minimapColor = reader.ReadUInt16();                                         break;                                     }                                  case 0x1D: //in-game help info                                     {                                         UInt16 opt = reader.ReadUInt16();                                         if (opt == 1112)                                         {                                             item.isReadable = true;                                         }                                     } break;                                  case 0x1E: //full tile                                     {                                         item.walkStack = true;                                     } break;                                  case 0x1F: //look through (borders)                                     {                                         item.lookThrough = true;                                     } break;                                  case 0x20: //unknown                                     {                                         reader.ReadUInt16();                                     } break;                                  case 0x21: //market                                     {                                         reader.ReadUInt16(); // category                                         item.wareId = reader.ReadUInt16(); // trade as                                         reader.ReadUInt16(); // show as                                         var size = reader.ReadUInt16();                                         item.name = new string(reader.ReadChars(size));                                          reader.ReadUInt16(); // profession                                         reader.ReadUInt16(); // level                                     }                                     break;                                  case 0xFF: //end of attributes                                     {                                     } break;                                  default:                                     {                                         Trace.WriteLine(String.Format("Plugin: Error while parsing' unknown optbyte 0x{0:X} at id {1}"' optbyte' id));                                         return false;                                     }                             }
Magic Number,Tibia960,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin960\plugin.cs,loadDat,The following statement contains a magic number: switch (optbyte)                             {                                 case 0x00: //groundtile                                     {                                         item.groundSpeed = reader.ReadUInt16();                                         item.type = ItemType.Ground;                                     } break;                                  case 0x01: //all OnTop                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 1;                                     } break;                                  case 0x02: //can walk trough (open doors' arces' bug pen fence)                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 2;                                     } break;                                  case 0x03: //can walk trough (arces)                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 3;                                     } break;                                  case 0x04: //container                                     {                                         item.type = ItemType.Container;                                     } break;                                  case 0x05: //stackable                                     {                                         item.isStackable = true;                                         break;                                     }                                  case 0x06: //unknown                                     {                                     } break;                                  case 0x07: //useable                                     {                                         item.hasUseWith = true;                                     } break;                                  case 0x08: //read/write-able                                     {                                         item.isReadable = true;                                         //item.isWriteable = true;                                         item.maxReadWriteChars = reader.ReadUInt16();                                     } break;                                  case 0x09: //readable                                     {                                         item.isReadable = true;                                         item.maxReadChars = reader.ReadUInt16();                                     } break;                                  case 0x0A: //fluid containers                                     {                                         item.type = ItemType.Fluid;                                     } break;                                  case 0x0B: //splashes                                     {                                         item.type = ItemType.Splash;                                     } break;                                  case 0x0C: //blocks solid objects (creatures' walls etc)                                     {                                         item.blockObject = true;                                     } break;                                  case 0x0D: //not moveable                                     {                                         item.isMoveable = false;                                     } break;                                  case 0x0E: //blocks missiles (walls' magic wall etc)                                     {                                         item.blockProjectile = true;                                     } break;                                  case 0x0F: //blocks pathfind algorithms (monsters)                                     {                                         item.blockPathFind = true;                                     } break;                                  case 0x10: //blocks monster movement (flowers' parcels etc)                                     {                                         item.isPickupable = true;                                     } break;                                  case 0x11: //hangable objects (wallpaper etc)                                     {                                         item.isHangable = true;                                     } break;                                  case 0x12: //horizontal wall                                     {                                         item.isHorizontal = true;                                     } break;                                  case 0x13: //vertical wall                                     {                                         item.isVertical = true;                                     } break;                                  case 0x14: //rotatable                                     {                                         item.isRotatable = true;                                     } break;                                  case 0x15: //light info                                     {                                         item.lightLevel = reader.ReadUInt16();                                         item.lightColor = reader.ReadUInt16();                                     } break;                                  case 0x16: //unknown                                     {                                     } break;                                  case 0x17: //changes floor                                     {                                     } break;                                  case 0x18: //unknown                                     {                                         reader.BaseStream.Seek(4' SeekOrigin.Current);                                     } break;                                  case 0x19:                                     {                                         item.hasHeight = true;                                         UInt16 height = reader.ReadUInt16();                                     } break;                                  case 0x1A: //unknown                                     {                                     } break;                                   case 0x1B: //unknown                                     {                                     } break;                                  case 0x1C: //minimap color                                     {                                         item.minimapColor = reader.ReadUInt16();                                         break;                                     }                                  case 0x1D: //in-game help info                                     {                                         UInt16 opt = reader.ReadUInt16();                                         if (opt == 1112)                                         {                                             item.isReadable = true;                                         }                                     } break;                                  case 0x1E: //full tile                                     {                                         item.walkStack = true;                                     } break;                                  case 0x1F: //look through (borders)                                     {                                         item.lookThrough = true;                                     } break;                                  case 0x20: //unknown                                     {                                         reader.ReadUInt16();                                     } break;                                  case 0x21: //market                                     {                                         reader.ReadUInt16(); // category                                         item.wareId = reader.ReadUInt16(); // trade as                                         reader.ReadUInt16(); // show as                                         var size = reader.ReadUInt16();                                         item.name = new string(reader.ReadChars(size));                                          reader.ReadUInt16(); // profession                                         reader.ReadUInt16(); // level                                     }                                     break;                                  case 0xFF: //end of attributes                                     {                                     } break;                                  default:                                     {                                         Trace.WriteLine(String.Format("Plugin: Error while parsing' unknown optbyte 0x{0:X} at id {1}"' optbyte' id));                                         return false;                                     }                             }
Magic Number,Tibia960,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin960\plugin.cs,loadDat,The following statement contains a magic number: switch (optbyte)                             {                                 case 0x00: //groundtile                                     {                                         item.groundSpeed = reader.ReadUInt16();                                         item.type = ItemType.Ground;                                     } break;                                  case 0x01: //all OnTop                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 1;                                     } break;                                  case 0x02: //can walk trough (open doors' arces' bug pen fence)                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 2;                                     } break;                                  case 0x03: //can walk trough (arces)                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 3;                                     } break;                                  case 0x04: //container                                     {                                         item.type = ItemType.Container;                                     } break;                                  case 0x05: //stackable                                     {                                         item.isStackable = true;                                         break;                                     }                                  case 0x06: //unknown                                     {                                     } break;                                  case 0x07: //useable                                     {                                         item.hasUseWith = true;                                     } break;                                  case 0x08: //read/write-able                                     {                                         item.isReadable = true;                                         //item.isWriteable = true;                                         item.maxReadWriteChars = reader.ReadUInt16();                                     } break;                                  case 0x09: //readable                                     {                                         item.isReadable = true;                                         item.maxReadChars = reader.ReadUInt16();                                     } break;                                  case 0x0A: //fluid containers                                     {                                         item.type = ItemType.Fluid;                                     } break;                                  case 0x0B: //splashes                                     {                                         item.type = ItemType.Splash;                                     } break;                                  case 0x0C: //blocks solid objects (creatures' walls etc)                                     {                                         item.blockObject = true;                                     } break;                                  case 0x0D: //not moveable                                     {                                         item.isMoveable = false;                                     } break;                                  case 0x0E: //blocks missiles (walls' magic wall etc)                                     {                                         item.blockProjectile = true;                                     } break;                                  case 0x0F: //blocks pathfind algorithms (monsters)                                     {                                         item.blockPathFind = true;                                     } break;                                  case 0x10: //blocks monster movement (flowers' parcels etc)                                     {                                         item.isPickupable = true;                                     } break;                                  case 0x11: //hangable objects (wallpaper etc)                                     {                                         item.isHangable = true;                                     } break;                                  case 0x12: //horizontal wall                                     {                                         item.isHorizontal = true;                                     } break;                                  case 0x13: //vertical wall                                     {                                         item.isVertical = true;                                     } break;                                  case 0x14: //rotatable                                     {                                         item.isRotatable = true;                                     } break;                                  case 0x15: //light info                                     {                                         item.lightLevel = reader.ReadUInt16();                                         item.lightColor = reader.ReadUInt16();                                     } break;                                  case 0x16: //unknown                                     {                                     } break;                                  case 0x17: //changes floor                                     {                                     } break;                                  case 0x18: //unknown                                     {                                         reader.BaseStream.Seek(4' SeekOrigin.Current);                                     } break;                                  case 0x19:                                     {                                         item.hasHeight = true;                                         UInt16 height = reader.ReadUInt16();                                     } break;                                  case 0x1A: //unknown                                     {                                     } break;                                   case 0x1B: //unknown                                     {                                     } break;                                  case 0x1C: //minimap color                                     {                                         item.minimapColor = reader.ReadUInt16();                                         break;                                     }                                  case 0x1D: //in-game help info                                     {                                         UInt16 opt = reader.ReadUInt16();                                         if (opt == 1112)                                         {                                             item.isReadable = true;                                         }                                     } break;                                  case 0x1E: //full tile                                     {                                         item.walkStack = true;                                     } break;                                  case 0x1F: //look through (borders)                                     {                                         item.lookThrough = true;                                     } break;                                  case 0x20: //unknown                                     {                                         reader.ReadUInt16();                                     } break;                                  case 0x21: //market                                     {                                         reader.ReadUInt16(); // category                                         item.wareId = reader.ReadUInt16(); // trade as                                         reader.ReadUInt16(); // show as                                         var size = reader.ReadUInt16();                                         item.name = new string(reader.ReadChars(size));                                          reader.ReadUInt16(); // profession                                         reader.ReadUInt16(); // level                                     }                                     break;                                  case 0xFF: //end of attributes                                     {                                     } break;                                  default:                                     {                                         Trace.WriteLine(String.Format("Plugin: Error while parsing' unknown optbyte 0x{0:X} at id {1}"' optbyte' id));                                         return false;                                     }                             }
Magic Number,Tibia960,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin960\plugin.cs,loadDat,The following statement contains a magic number: switch (optbyte)                             {                                 case 0x00: //groundtile                                     {                                         item.groundSpeed = reader.ReadUInt16();                                         item.type = ItemType.Ground;                                     } break;                                  case 0x01: //all OnTop                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 1;                                     } break;                                  case 0x02: //can walk trough (open doors' arces' bug pen fence)                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 2;                                     } break;                                  case 0x03: //can walk trough (arces)                                     {                                         item.alwaysOnTop = true;                                         item.alwaysOnTopOrder = 3;                                     } break;                                  case 0x04: //container                                     {                                         item.type = ItemType.Container;                                     } break;                                  case 0x05: //stackable                                     {                                         item.isStackable = true;                                         break;                                     }                                  case 0x06: //unknown                                     {                                     } break;                                  case 0x07: //useable                                     {                                         item.hasUseWith = true;                                     } break;                                  case 0x08: //read/write-able                                     {                                         item.isReadable = true;                                         //item.isWriteable = true;                                         item.maxReadWriteChars = reader.ReadUInt16();                                     } break;                                  case 0x09: //readable                                     {                                         item.isReadable = true;                                         item.maxReadChars = reader.ReadUInt16();                                     } break;                                  case 0x0A: //fluid containers                                     {                                         item.type = ItemType.Fluid;                                     } break;                                  case 0x0B: //splashes                                     {                                         item.type = ItemType.Splash;                                     } break;                                  case 0x0C: //blocks solid objects (creatures' walls etc)                                     {                                         item.blockObject = true;                                     } break;                                  case 0x0D: //not moveable                                     {                                         item.isMoveable = false;                                     } break;                                  case 0x0E: //blocks missiles (walls' magic wall etc)                                     {                                         item.blockProjectile = true;                                     } break;                                  case 0x0F: //blocks pathfind algorithms (monsters)                                     {                                         item.blockPathFind = true;                                     } break;                                  case 0x10: //blocks monster movement (flowers' parcels etc)                                     {                                         item.isPickupable = true;                                     } break;                                  case 0x11: //hangable objects (wallpaper etc)                                     {                                         item.isHangable = true;                                     } break;                                  case 0x12: //horizontal wall                                     {                                         item.isHorizontal = true;                                     } break;                                  case 0x13: //vertical wall                                     {                                         item.isVertical = true;                                     } break;                                  case 0x14: //rotatable                                     {                                         item.isRotatable = true;                                     } break;                                  case 0x15: //light info                                     {                                         item.lightLevel = reader.ReadUInt16();                                         item.lightColor = reader.ReadUInt16();                                     } break;                                  case 0x16: //unknown                                     {                                     } break;                                  case 0x17: //changes floor                                     {                                     } break;                                  case 0x18: //unknown                                     {                                         reader.BaseStream.Seek(4' SeekOrigin.Current);                                     } break;                                  case 0x19:                                     {                                         item.hasHeight = true;                                         UInt16 height = reader.ReadUInt16();                                     } break;                                  case 0x1A: //unknown                                     {                                     } break;                                   case 0x1B: //unknown                                     {                                     } break;                                  case 0x1C: //minimap color                                     {                                         item.minimapColor = reader.ReadUInt16();                                         break;                                     }                                  case 0x1D: //in-game help info                                     {                                         UInt16 opt = reader.ReadUInt16();                                         if (opt == 1112)                                         {                                             item.isReadable = true;                                         }                                     } break;                                  case 0x1E: //full tile                                     {                                         item.walkStack = true;                                     } break;                                  case 0x1F: //look through (borders)                                     {                                         item.lookThrough = true;                                     } break;                                  case 0x20: //unknown                                     {                                         reader.ReadUInt16();                                     } break;                                  case 0x21: //market                                     {                                         reader.ReadUInt16(); // category                                         item.wareId = reader.ReadUInt16(); // trade as                                         reader.ReadUInt16(); // show as                                         var size = reader.ReadUInt16();                                         item.name = new string(reader.ReadChars(size));                                          reader.ReadUInt16(); // profession                                         reader.ReadUInt16(); // level                                     }                                     break;                                  case 0xFF: //end of attributes                                     {                                     } break;                                  default:                                     {                                         Trace.WriteLine(String.Format("Plugin: Error while parsing' unknown optbyte 0x{0:X} at id {1}"' optbyte' id));                                         return false;                                     }                             }
