Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,Cyclomatic complexity of the method is 7
Complex Method,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2d,Cyclomatic complexity of the method is 7
Complex Method,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2d,Cyclomatic complexity of the method is 9
Complex Method,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,Cyclomatic complexity of the method is 9
Complex Method,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,Cyclomatic complexity of the method is 7
Long Parameter List,ImageSimilarity,ImageSimilarity,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageSimilarity.cs,CompareImage,The method has 4 parameters.
Long Parameter List,ImageSimilarity,ImageSimilarity,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageSimilarity.cs,CompareImageRGB,The method has 4 parameters.
Long Parameter List,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The method has 4 parameters.
Long Statement,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The length of the statement  "	BitmapData bmpData = input.LockBits (new Rectangle (0' 0' input.Width' input.Height)' ImageLockMode.WriteOnly' input.PixelFormat); " is 130.
Long Statement,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The length of the statement  "	BitmapData bmpData = input.LockBits (new Rectangle (0' 0' input.Width' input.Height)' ImageLockMode.ReadWrite' input.PixelFormat); " is 130.
Long Statement,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,SplitColorChannels,The length of the statement  "	BitmapData bmpData = input.LockBits (new Rectangle (0' 0' input.Width' input.Height)' ImageLockMode.ReadWrite' input.PixelFormat); " is 130.
Long Statement,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The length of the statement  "	BitmapData bmpData = bmp.LockBits (new Rectangle (0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadWrite' bmp.PixelFormat); " is 122.
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: if (length % 2 != 0)  	throw new Exception ("N is not a power of 2");  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: for (int k = 0; k < length / 2; k++) {  	even [k] = x [2 * k];  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: for (int k = 0; k < length / 2; k++) {  	even [k] = x [2 * k];  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: even [k] = x [2 * k];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: for (int k = 0; k < length / 2; k++) {  	odd [k] = x [2 * k + 1];  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: for (int k = 0; k < length / 2; k++) {  	odd [k] = x [2 * k + 1];  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: odd [k] = x [2 * k + 1];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: for (int k = 0; k < length / 2; k++) {  	double value = -2 * k * Math.PI / length;  	Complex wk = new Complex (Math.Cos (value)' Math.Sin (value));  	y [k] = q [k] + (wk * (r [k]));  	y [k + length / 2] = q [k] - (wk * (r [k]));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: for (int k = 0; k < length / 2; k++) {  	double value = -2 * k * Math.PI / length;  	Complex wk = new Complex (Math.Cos (value)' Math.Sin (value));  	y [k] = q [k] + (wk * (r [k]));  	y [k + length / 2] = q [k] - (wk * (r [k]));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: for (int k = 0; k < length / 2; k++) {  	double value = -2 * k * Math.PI / length;  	Complex wk = new Complex (Math.Cos (value)' Math.Sin (value));  	y [k] = q [k] + (wk * (r [k]));  	y [k + length / 2] = q [k] - (wk * (r [k]));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft,The following statement contains a magic number: y [k + length / 2] = q [k] - (wk * (r [k]));  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft,The following statement contains a magic number: if (length % 2 != 0)  	throw new Exception ("N is not a power of 2");  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	cmplx [i / width' i % width] = new Complex (data [i] / 256.0);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: cmplx [i / width' i % width] = new Complex (data [i] / 256.0);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i] = (byte)Math.Min (255' (int)(cmplx [i / width' i % width].GetModulus () * 256.0) * scale);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i] = (byte)Math.Min (255' (int)(cmplx [i / width' i % width].GetModulus () * 256.0) * scale);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [i] = (byte)Math.Min (255' (int)(cmplx [i / width' i % width].GetModulus () * 256.0) * scale);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [i] = (byte)Math.Min (255' (int)(cmplx [i / width' i % width].GetModulus () * 256.0) * scale);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			byte val1 = data [i * width + k];  			byte val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		byte val1 = data [i * width + k];  		byte val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	byte val1 = data [i * width + k];  	byte val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [(i + width / 2) * width + k + width / 2] = val1;  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [(i + width / 2) * width + k + width / 2] = val1;  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2d,The following statement contains a magic number: data [(i + width / 2) * width + k] = val2;  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2d,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	cmplx [i / width' i % width] = new Complex (data [i] / 256.0);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2d,The following statement contains a magic number: cmplx [i / width' i % width] = new Complex (data [i] / 256.0);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2d,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i] = (byte)Math.Min (255' (int)(cmplx [i / width' i % width].GetModulus () * 256.0 * scale));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2d,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i] = (byte)Math.Min (255' (int)(cmplx [i / width' i % width].GetModulus () * 256.0 * scale));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2d,The following statement contains a magic number: data [i] = (byte)Math.Min (255' (int)(cmplx [i / width' i % width].GetModulus () * 256.0 * scale));  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2d,The following statement contains a magic number: data [i] = (byte)Math.Min (255' (int)(cmplx [i / width' i % width].GetModulus () * 256.0 * scale));  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	cmplxR [i / width' i % width] = new Complex (data [i].r / 256.0);  	cmplxG [i / width' i % width] = new Complex (data [i].g / 256.0);  	cmplxB [i / width' i % width] = new Complex (data [i].b / 256.0);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	cmplxR [i / width' i % width] = new Complex (data [i].r / 256.0);  	cmplxG [i / width' i % width] = new Complex (data [i].g / 256.0);  	cmplxB [i / width' i % width] = new Complex (data [i].b / 256.0);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	cmplxR [i / width' i % width] = new Complex (data [i].r / 256.0);  	cmplxG [i / width' i % width] = new Complex (data [i].g / 256.0);  	cmplxB [i / width' i % width] = new Complex (data [i].b / 256.0);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: cmplxR [i / width' i % width] = new Complex (data [i].r / 256.0);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: cmplxG [i / width' i % width] = new Complex (data [i].g / 256.0);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: cmplxB [i / width' i % width] = new Complex (data [i].b / 256.0);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0) * scale);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0) * scale);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0) * scale);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0) * scale);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0) * scale);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0) * scale);  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0) * scale);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0) * scale);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0) * scale);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0) * scale);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0) * scale);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0) * scale);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0) * scale);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: if (reorder) {  	for (int i = 0; i < height / 2; i++) {  		for (int k = 0; k < width / 2; k++) {  			ImageUtils.RGB val1 = data [i * width + k];  			ImageUtils.RGB val2 = data [i * width + k + width / 2];  			data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  			data [(i + width / 2) * width + k + width / 2] = val1;  			data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  			data [(i + width / 2) * width + k] = val2;  		}  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int i = 0; i < height / 2; i++) {  	for (int k = 0; k < width / 2; k++) {  		ImageUtils.RGB val1 = data [i * width + k];  		ImageUtils.RGB val2 = data [i * width + k + width / 2];  		data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  		data [(i + width / 2) * width + k + width / 2] = val1;  		data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  		data [(i + width / 2) * width + k] = val2;  	}  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: for (int k = 0; k < width / 2; k++) {  	ImageUtils.RGB val1 = data [i * width + k];  	ImageUtils.RGB val2 = data [i * width + k + width / 2];  	data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  	data [(i + width / 2) * width + k + width / 2] = val1;  	data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  	data [(i + width / 2) * width + k] = val2;  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i * width + k] = data [(i + width / 2) * width + k + width / 2];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [(i + width / 2) * width + k + width / 2] = val1;  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [(i + width / 2) * width + k + width / 2] = val1;  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [i * width + k + width / 2] = data [(i + width / 2) * width + k];  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,fft2dRGB,The following statement contains a magic number: data [(i + width / 2) * width + k] = val2;  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	cmplxR [i / width' i % width] = new Complex (data [i].r / 256.0);  	cmplxG [i / width' i % width] = new Complex (data [i].g / 256.0);  	cmplxB [i / width' i % width] = new Complex (data [i].b / 256.0);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	cmplxR [i / width' i % width] = new Complex (data [i].r / 256.0);  	cmplxG [i / width' i % width] = new Complex (data [i].g / 256.0);  	cmplxB [i / width' i % width] = new Complex (data [i].b / 256.0);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	cmplxR [i / width' i % width] = new Complex (data [i].r / 256.0);  	cmplxG [i / width' i % width] = new Complex (data [i].g / 256.0);  	cmplxB [i / width' i % width] = new Complex (data [i].b / 256.0);  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: cmplxR [i / width' i % width] = new Complex (data [i].r / 256.0);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: cmplxG [i / width' i % width] = new Complex (data [i].g / 256.0);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: cmplxB [i / width' i % width] = new Complex (data [i].b / 256.0);  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0 * scale));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0 * scale));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0 * scale));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0 * scale));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0 * scale));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  	data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0 * scale));  	data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0 * scale));  }  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0 * scale));  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: data [i].r = (byte)Math.Min (255' (int)(cmplxR [i / width' i % width].GetModulus () * 256.0 * scale));  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0 * scale));  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: data [i].g = (byte)Math.Min (255' (int)(cmplxG [i / width' i % width].GetModulus () * 256.0 * scale));  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0 * scale));  
Magic Number,ImageSimilarity,Fourier,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\Fourier.cs,ifft2dRGB,The following statement contains a magic number: data [i].b = (byte)Math.Min (255' (int)(cmplxB [i / width' i % width].GetModulus () * 256.0 * scale));  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CompareSignature,The following statement contains a magic number: for (int i = 0; i < signature2.GetLength (1); i++) {  	rSum += (signature1 [0' i] - signature2 [0' i]) * (signature1 [0' i] - signature2 [0' i]);  	gSum += (signature1 [1' i] - signature2 [1' i]) * (signature1 [1' i] - signature2 [1' i]);  	bSum += (signature1 [2' i] - signature2 [2' i]) * (signature1 [2' i] - signature2 [2' i]);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CompareSignature,The following statement contains a magic number: for (int i = 0; i < signature2.GetLength (1); i++) {  	rSum += (signature1 [0' i] - signature2 [0' i]) * (signature1 [0' i] - signature2 [0' i]);  	gSum += (signature1 [1' i] - signature2 [1' i]) * (signature1 [1' i] - signature2 [1' i]);  	bSum += (signature1 [2' i] - signature2 [2' i]) * (signature1 [2' i] - signature2 [2' i]);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CompareSignature,The following statement contains a magic number: for (int i = 0; i < signature2.GetLength (1); i++) {  	rSum += (signature1 [0' i] - signature2 [0' i]) * (signature1 [0' i] - signature2 [0' i]);  	gSum += (signature1 [1' i] - signature2 [1' i]) * (signature1 [1' i] - signature2 [1' i]);  	bSum += (signature1 [2' i] - signature2 [2' i]) * (signature1 [2' i] - signature2 [2' i]);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CompareSignature,The following statement contains a magic number: for (int i = 0; i < signature2.GetLength (1); i++) {  	rSum += (signature1 [0' i] - signature2 [0' i]) * (signature1 [0' i] - signature2 [0' i]);  	gSum += (signature1 [1' i] - signature2 [1' i]) * (signature1 [1' i] - signature2 [1' i]);  	bSum += (signature1 [2' i] - signature2 [2' i]) * (signature1 [2' i] - signature2 [2' i]);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CompareSignature,The following statement contains a magic number: bSum += (signature1 [2' i] - signature2 [2' i]) * (signature1 [2' i] - signature2 [2' i]);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CompareSignature,The following statement contains a magic number: bSum += (signature1 [2' i] - signature2 [2' i]) * (signature1 [2' i] - signature2 [2' i]);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CompareSignature,The following statement contains a magic number: bSum += (signature1 [2' i] - signature2 [2' i]) * (signature1 [2' i] - signature2 [2' i]);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CompareSignature,The following statement contains a magic number: bSum += (signature1 [2' i] - signature2 [2' i]) * (signature1 [2' i] - signature2 [2' i]);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int y = 0; y < input.Height; y += blockSize) {  	for (int x = 0; x < input.Width; x += blockSize) {  		lSignature [0' blockNum] = 0.0;  		lSignature [1' blockNum] = 0.0;  		lSignature [2' blockNum] = 0.0;  		for (int blocky = 0; blocky < blockSize; ++blocky) {  			for (int blockx = 0; blockx < blockSize; ++blockx) {  				byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  				byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  				byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  				rSum += (double)r;  				gSum += (double)g;  				bSum += (double)b;  			}  		}  		lSignature [0' blockNum] = Math.Sqrt (rSum);  		lSignature [1' blockNum] = Math.Sqrt (gSum);  		lSignature [2' blockNum] = Math.Sqrt (bSum);  		++blockNum;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int x = 0; x < input.Width; x += blockSize) {  	lSignature [0' blockNum] = 0.0;  	lSignature [1' blockNum] = 0.0;  	lSignature [2' blockNum] = 0.0;  	for (int blocky = 0; blocky < blockSize; ++blocky) {  		for (int blockx = 0; blockx < blockSize; ++blockx) {  			byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  			byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  			byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  			rSum += (double)r;  			gSum += (double)g;  			bSum += (double)b;  		}  	}  	lSignature [0' blockNum] = Math.Sqrt (rSum);  	lSignature [1' blockNum] = Math.Sqrt (gSum);  	lSignature [2' blockNum] = Math.Sqrt (bSum);  	++blockNum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: lSignature [2' blockNum] = 0.0;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blocky = 0; blocky < blockSize; ++blocky) {  	for (int blockx = 0; blockx < blockSize; ++blockx) {  		byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  		byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  		byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  		rSum += (double)r;  		gSum += (double)g;  		bSum += (double)b;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blocky = 0; blocky < blockSize; ++blocky) {  	for (int blockx = 0; blockx < blockSize; ++blockx) {  		byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  		byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  		byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  		rSum += (double)r;  		gSum += (double)g;  		bSum += (double)b;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blocky = 0; blocky < blockSize; ++blocky) {  	for (int blockx = 0; blockx < blockSize; ++blockx) {  		byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  		byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  		byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  		rSum += (double)r;  		gSum += (double)g;  		bSum += (double)b;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blocky = 0; blocky < blockSize; ++blocky) {  	for (int blockx = 0; blockx < blockSize; ++blockx) {  		byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  		byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  		byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  		rSum += (double)r;  		gSum += (double)g;  		bSum += (double)b;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blocky = 0; blocky < blockSize; ++blocky) {  	for (int blockx = 0; blockx < blockSize; ++blockx) {  		byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  		byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  		byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  		rSum += (double)r;  		gSum += (double)g;  		bSum += (double)b;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blocky = 0; blocky < blockSize; ++blocky) {  	for (int blockx = 0; blockx < blockSize; ++blockx) {  		byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  		byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  		byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  		rSum += (double)r;  		gSum += (double)g;  		bSum += (double)b;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blocky = 0; blocky < blockSize; ++blocky) {  	for (int blockx = 0; blockx < blockSize; ++blockx) {  		byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  		byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  		byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  		rSum += (double)r;  		gSum += (double)g;  		bSum += (double)b;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blockx = 0; blockx < blockSize; ++blockx) {  	byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  	byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  	byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  	rSum += (double)r;  	gSum += (double)g;  	bSum += (double)b;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blockx = 0; blockx < blockSize; ++blockx) {  	byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  	byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  	byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  	rSum += (double)r;  	gSum += (double)g;  	bSum += (double)b;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blockx = 0; blockx < blockSize; ++blockx) {  	byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  	byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  	byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  	rSum += (double)r;  	gSum += (double)g;  	bSum += (double)b;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blockx = 0; blockx < blockSize; ++blockx) {  	byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  	byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  	byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  	rSum += (double)r;  	gSum += (double)g;  	bSum += (double)b;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blockx = 0; blockx < blockSize; ++blockx) {  	byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  	byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  	byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  	rSum += (double)r;  	gSum += (double)g;  	bSum += (double)b;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blockx = 0; blockx < blockSize; ++blockx) {  	byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  	byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  	byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  	rSum += (double)r;  	gSum += (double)g;  	bSum += (double)b;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int blockx = 0; blockx < blockSize; ++blockx) {  	byte r = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 0];  	byte g = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 1];  	byte b = rgbValues [((y + blocky) * 3 * input.Height) + ((x + blockx) * 3) + 2];  	rSum += (double)r;  	gSum += (double)g;  	bSum += (double)b;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: lSignature [2' blockNum] = Math.Sqrt (bSum);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int i = 0; i < lSignature.GetLength (1); i++) {  	rSum += lSignature [0' i];  	gSum += lSignature [1' i];  	bSum += lSignature [2' i];  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: bSum += lSignature [2' i];  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: for (int i = 0; i < lSignature.GetLength (1); i++) {  	lSignature [0' i] /= rSum;  	lSignature [1' i] /= gSum;  	lSignature [2' i] /= bSum;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CalculateEuclideanDistance,The following statement contains a magic number: lSignature [2' i] /= bSum;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: i += 3
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,greyScale,The following statement contains a magic number: greyscale [counter++] = (byte)(((66 * data [i + 2] + 129 * data [i] + 25 * data [i + 1] + 128) >> 8) + 16);  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CombineColorChannels,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	data [i] = rgb [counter].r;  	data [i + 1] = rgb [counter].g;  	data [i + 2] = rgb [counter].b;  	++counter;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CombineColorChannels,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	data [i] = rgb [counter].r;  	data [i + 1] = rgb [counter].g;  	data [i + 2] = rgb [counter].b;  	++counter;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CombineColorChannels,The following statement contains a magic number: i += 3
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,CombineColorChannels,The following statement contains a magic number: data [i + 2] = rgb [counter].b;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,SplitColorChannels,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	rgb [counter].r = data [i + 0];  	rgb [counter].b = data [i + 1];  	rgb [counter].g = data [i + 2];  	++counter;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,SplitColorChannels,The following statement contains a magic number: for (int i = 0; i < data.Length; i += 3) {  	rgb [counter].r = data [i + 0];  	rgb [counter].b = data [i + 1];  	rgb [counter].g = data [i + 2];  	++counter;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,SplitColorChannels,The following statement contains a magic number: i += 3
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,SplitColorChannels,The following statement contains a magic number: rgb [counter].g = data [i + 2];  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: if (pixelFormat == PixelFormat.Format24bppRgb) {  	//reverse rgb  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  			byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  			byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  			rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  		}  	}  	System.Runtime.InteropServices.Marshal.Copy (rgbData' 0' bmpData.Scan0' rgbData.Length);  } else {  	byte[] grayscale = new byte[Width * Height * 3];  	int n = 0;  	for (int y = 0; y < Height; ++y) {  		for (int x = 0; x < Width; ++x) {  			grayscale [n * 3 + 0] = rgbData [n];  			grayscale [n * 3 + 1] = rgbData [n];  			grayscale [n * 3 + 2] = rgbData [n];  			++n;  		}  	}  	//bmpData.Stride = -bmpData.Stride;  	System.Runtime.InteropServices.Marshal.Copy (grayscale' 0' bmpData.Scan0' grayscale.Length);  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  		byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  		byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  		rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	byte r = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0];  	byte g = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1];  	byte b = rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2];  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  	rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 0] = b;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 1] = g;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: rgbData [Width * (bitPerPixel / 8) * y + x * (bitPerPixel / 8) + 2] = r;  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		grayscale [n * 3 + 0] = rgbData [n];  		grayscale [n * 3 + 1] = rgbData [n];  		grayscale [n * 3 + 2] = rgbData [n];  		++n;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		grayscale [n * 3 + 0] = rgbData [n];  		grayscale [n * 3 + 1] = rgbData [n];  		grayscale [n * 3 + 2] = rgbData [n];  		++n;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		grayscale [n * 3 + 0] = rgbData [n];  		grayscale [n * 3 + 1] = rgbData [n];  		grayscale [n * 3 + 2] = rgbData [n];  		++n;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int y = 0; y < Height; ++y) {  	for (int x = 0; x < Width; ++x) {  		grayscale [n * 3 + 0] = rgbData [n];  		grayscale [n * 3 + 1] = rgbData [n];  		grayscale [n * 3 + 2] = rgbData [n];  		++n;  	}  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	grayscale [n * 3 + 0] = rgbData [n];  	grayscale [n * 3 + 1] = rgbData [n];  	grayscale [n * 3 + 2] = rgbData [n];  	++n;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	grayscale [n * 3 + 0] = rgbData [n];  	grayscale [n * 3 + 1] = rgbData [n];  	grayscale [n * 3 + 2] = rgbData [n];  	++n;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	grayscale [n * 3 + 0] = rgbData [n];  	grayscale [n * 3 + 1] = rgbData [n];  	grayscale [n * 3 + 2] = rgbData [n];  	++n;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: for (int x = 0; x < Width; ++x) {  	grayscale [n * 3 + 0] = rgbData [n];  	grayscale [n * 3 + 1] = rgbData [n];  	grayscale [n * 3 + 2] = rgbData [n];  	++n;  }  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: grayscale [n * 3 + 0] = rgbData [n];  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: grayscale [n * 3 + 1] = rgbData [n];  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: grayscale [n * 3 + 2] = rgbData [n];  
Magic Number,ImageSimilarity,ImageUtils,D:\newReposJune17\opentibia_item-editor\Source\ImageSimilarity\ImageUtils.cs,getBitmap,The following statement contains a magic number: grayscale [n * 3 + 2] = rgbData [n];  
