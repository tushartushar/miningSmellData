Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tibia940,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin940\plugin.cs,loadDat,The method has 249 lines of code.
Magic Number,Tibia940,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin940\plugin.cs,loadDat,The following statement contains a magic number: UInt16 minclientID = 100;
Magic Number,Tibia940,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin940\plugin.cs,loadDat,The following statement contains a magic number: switch (optbyte)                              {                                  case 0x00: //groundtile                                      {                                          item.groundSpeed = reader.ReadUInt16();                                          item.type = ItemType.Ground;                                      } break;                                    case 0x01: //all OnTop - CLIP item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 1;                                      } break;                                    case 0x02: //can walk trough (open doors' arces' bug pen fence) | BOTTOM item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 2;                                      } break;                                    case 0x03: //can walk trough | TOP item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 3;                                      } break;                                    case 0x04: //container                                      {                                          item.type = ItemType.Container;                                      } break;                                    case 0x05: //stackable                                      {                                          item.isStackable = true;                                          break;                                      }                                    case 0x06: //force use                                      {  										//item.forceUse = true;                                      } break;                                    case 0x07: //useable                                      {                                          item.hasUseWith = true;                                      } break;                                    case 0x08: //read/write-able                                      {                                          item.isReadable = true;                                          //item.isWriteable = true;                                          item.maxReadWriteChars = reader.ReadUInt16();                                      } break;                                    case 0x09: //readable                                      {                                          item.isReadable = true;                                          item.maxReadChars = reader.ReadUInt16();                                      } break;                                    case 0x0A: //fluid containers                                      {                                          item.type = ItemType.Fluid;                                      } break;                                    case 0x0B: //splashes                                      {                                          item.type = ItemType.Splash;                                      } break;                                    case 0x0C: //blocks solid objects (creatures' walls etc)                                      {                                          item.blockObject = true;                                      } break;                                    case 0x0D: //not moveable                                      {                                          item.isMoveable = false;                                      } break;                                    case 0x0E: //blocks missiles (walls' magic wall etc)                                      {                                          item.blockProjectile = true;                                      } break;                                    case 0x0F: //blocks pathfind algorithms (monsters)                                      {                                          item.blockPathFind = true;                                      } break;                                    case 0x10: //blocks monster movement (flowers' parcels etc)                                      {                                          item.isPickupable = true;                                      } break;                                    case 0x11: //hangable objects (wallpaper etc)                                      {                                          item.isHangable = true;                                      } break;                                    case 0x12: //horizontal wall                                      {                                          item.isHorizontal = true;                                      } break;                                    case 0x13: //vertical wall                                      {                                          item.isVertical = true;                                      } break;                                    case 0x14: //rotatable                                      {                                          item.isRotatable = true;                                      } break;                                    case 0x15: //light info                                      {                                          item.lightLevel = reader.ReadUInt16();                                          item.lightColor = reader.ReadUInt16();                                      } break;                                    case 0x16: //dont hide                                      {  										//item.dontHide = true;                                      } break;                                    case 0x17: //translucent                                      {  										//item.translucent = true;                                      } break;                                    case 0x18: //shift                                      {  										//item.displaced = true;  										UInt16 displacementX = reader.ReadUInt16();  										//item.displacementX = displacementX;  										UInt16 displacementY = reader.ReadUInt16();  										//item.displacementY = displacementY;                                      } break;                                    case 0x19:                                      {                                          item.hasHeight = true;                                          UInt16 height = reader.ReadUInt16();  										//item.height = height;                                      } break;                                    case 0x1A: //lying object                                      {  										//item.lyingObject = true;                                      } break;                                      case 0x1B: //animate                                      {  										//item.animateWhenIdle = true;                                      } break;                                    case 0x1C: //minimap color                                      {                                          item.minimapColor = reader.ReadUInt16();                                          break;                                      }                                    case 0x1D: //in-game help info                                      {                                          UInt16 opt = reader.ReadUInt16();                                          if(opt == 1112)                                          {                                              item.isReadable = true;                                          }                                      } break;                                    case 0x1E: //full tile                                      {  										item.walkStack = true;                                      } break;                                    case 0x1F: //look through (borders)                                      {                                          item.lookThrough = true;                                      } break;                                    case 0x20: //cloth                                      {  										UInt16 slot = reader.ReadUInt16();                                          //item.slotPosition = slot;                                      } break;    								case 0x21:  									{  										UInt16 marketCategory = reader.ReadUInt16();  										UInt16 marketTradeAs = reader.ReadUInt16();  										UInt16 marketShowAs = reader.ReadUInt16();    										UInt16 size = reader.ReadUInt16();  										string marketName = new string(reader.ReadChars(size));    										UInt16 marketProfession = reader.ReadUInt16();  										UInt16 marketLevel = reader.ReadUInt16();    										item.name = marketName;  										item.wareId = marketTradeAs;  									} break;                                    case 0xFF: //end of attributes                                      {                                      } break;                                    default:                                      {                                          Trace.WriteLine(String.Format("Plugin: Error while parsing' unknown optbyte {0:X}"' optbyte));                                          return false;                                      }                              }
Magic Number,Tibia940,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin940\plugin.cs,loadDat,The following statement contains a magic number: switch (optbyte)                              {                                  case 0x00: //groundtile                                      {                                          item.groundSpeed = reader.ReadUInt16();                                          item.type = ItemType.Ground;                                      } break;                                    case 0x01: //all OnTop - CLIP item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 1;                                      } break;                                    case 0x02: //can walk trough (open doors' arces' bug pen fence) | BOTTOM item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 2;                                      } break;                                    case 0x03: //can walk trough | TOP item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 3;                                      } break;                                    case 0x04: //container                                      {                                          item.type = ItemType.Container;                                      } break;                                    case 0x05: //stackable                                      {                                          item.isStackable = true;                                          break;                                      }                                    case 0x06: //force use                                      {  										//item.forceUse = true;                                      } break;                                    case 0x07: //useable                                      {                                          item.hasUseWith = true;                                      } break;                                    case 0x08: //read/write-able                                      {                                          item.isReadable = true;                                          //item.isWriteable = true;                                          item.maxReadWriteChars = reader.ReadUInt16();                                      } break;                                    case 0x09: //readable                                      {                                          item.isReadable = true;                                          item.maxReadChars = reader.ReadUInt16();                                      } break;                                    case 0x0A: //fluid containers                                      {                                          item.type = ItemType.Fluid;                                      } break;                                    case 0x0B: //splashes                                      {                                          item.type = ItemType.Splash;                                      } break;                                    case 0x0C: //blocks solid objects (creatures' walls etc)                                      {                                          item.blockObject = true;                                      } break;                                    case 0x0D: //not moveable                                      {                                          item.isMoveable = false;                                      } break;                                    case 0x0E: //blocks missiles (walls' magic wall etc)                                      {                                          item.blockProjectile = true;                                      } break;                                    case 0x0F: //blocks pathfind algorithms (monsters)                                      {                                          item.blockPathFind = true;                                      } break;                                    case 0x10: //blocks monster movement (flowers' parcels etc)                                      {                                          item.isPickupable = true;                                      } break;                                    case 0x11: //hangable objects (wallpaper etc)                                      {                                          item.isHangable = true;                                      } break;                                    case 0x12: //horizontal wall                                      {                                          item.isHorizontal = true;                                      } break;                                    case 0x13: //vertical wall                                      {                                          item.isVertical = true;                                      } break;                                    case 0x14: //rotatable                                      {                                          item.isRotatable = true;                                      } break;                                    case 0x15: //light info                                      {                                          item.lightLevel = reader.ReadUInt16();                                          item.lightColor = reader.ReadUInt16();                                      } break;                                    case 0x16: //dont hide                                      {  										//item.dontHide = true;                                      } break;                                    case 0x17: //translucent                                      {  										//item.translucent = true;                                      } break;                                    case 0x18: //shift                                      {  										//item.displaced = true;  										UInt16 displacementX = reader.ReadUInt16();  										//item.displacementX = displacementX;  										UInt16 displacementY = reader.ReadUInt16();  										//item.displacementY = displacementY;                                      } break;                                    case 0x19:                                      {                                          item.hasHeight = true;                                          UInt16 height = reader.ReadUInt16();  										//item.height = height;                                      } break;                                    case 0x1A: //lying object                                      {  										//item.lyingObject = true;                                      } break;                                      case 0x1B: //animate                                      {  										//item.animateWhenIdle = true;                                      } break;                                    case 0x1C: //minimap color                                      {                                          item.minimapColor = reader.ReadUInt16();                                          break;                                      }                                    case 0x1D: //in-game help info                                      {                                          UInt16 opt = reader.ReadUInt16();                                          if(opt == 1112)                                          {                                              item.isReadable = true;                                          }                                      } break;                                    case 0x1E: //full tile                                      {  										item.walkStack = true;                                      } break;                                    case 0x1F: //look through (borders)                                      {                                          item.lookThrough = true;                                      } break;                                    case 0x20: //cloth                                      {  										UInt16 slot = reader.ReadUInt16();                                          //item.slotPosition = slot;                                      } break;    								case 0x21:  									{  										UInt16 marketCategory = reader.ReadUInt16();  										UInt16 marketTradeAs = reader.ReadUInt16();  										UInt16 marketShowAs = reader.ReadUInt16();    										UInt16 size = reader.ReadUInt16();  										string marketName = new string(reader.ReadChars(size));    										UInt16 marketProfession = reader.ReadUInt16();  										UInt16 marketLevel = reader.ReadUInt16();    										item.name = marketName;  										item.wareId = marketTradeAs;  									} break;                                    case 0xFF: //end of attributes                                      {                                      } break;                                    default:                                      {                                          Trace.WriteLine(String.Format("Plugin: Error while parsing' unknown optbyte {0:X}"' optbyte));                                          return false;                                      }                              }
Magic Number,Tibia940,Plugin,C:\research\architectureSmells\repos\opentibia_item-editor\Source\Plugin940\plugin.cs,loadDat,The following statement contains a magic number: switch (optbyte)                              {                                  case 0x00: //groundtile                                      {                                          item.groundSpeed = reader.ReadUInt16();                                          item.type = ItemType.Ground;                                      } break;                                    case 0x01: //all OnTop - CLIP item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 1;                                      } break;                                    case 0x02: //can walk trough (open doors' arces' bug pen fence) | BOTTOM item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 2;                                      } break;                                    case 0x03: //can walk trough | TOP item                                      {                                          item.alwaysOnTop = true;                                          item.alwaysOnTopOrder = 3;                                      } break;                                    case 0x04: //container                                      {                                          item.type = ItemType.Container;                                      } break;                                    case 0x05: //stackable                                      {                                          item.isStackable = true;                                          break;                                      }                                    case 0x06: //force use                                      {  										//item.forceUse = true;                                      } break;                                    case 0x07: //useable                                      {                                          item.hasUseWith = true;                                      } break;                                    case 0x08: //read/write-able                                      {                                          item.isReadable = true;                                          //item.isWriteable = true;                                          item.maxReadWriteChars = reader.ReadUInt16();                                      } break;                                    case 0x09: //readable                                      {                                          item.isReadable = true;                                          item.maxReadChars = reader.ReadUInt16();                                      } break;                                    case 0x0A: //fluid containers                                      {                                          item.type = ItemType.Fluid;                                      } break;                                    case 0x0B: //splashes                                      {                                          item.type = ItemType.Splash;                                      } break;                                    case 0x0C: //blocks solid objects (creatures' walls etc)                                      {                                          item.blockObject = true;                                      } break;                                    case 0x0D: //not moveable                                      {                                          item.isMoveable = false;                                      } break;                                    case 0x0E: //blocks missiles (walls' magic wall etc)                                      {                                          item.blockProjectile = true;                                      } break;                                    case 0x0F: //blocks pathfind algorithms (monsters)                                      {                                          item.blockPathFind = true;                                      } break;                                    case 0x10: //blocks monster movement (flowers' parcels etc)                                      {                                          item.isPickupable = true;                                      } break;                                    case 0x11: //hangable objects (wallpaper etc)                                      {                                          item.isHangable = true;                                      } break;                                    case 0x12: //horizontal wall                                      {                                          item.isHorizontal = true;                                      } break;                                    case 0x13: //vertical wall                                      {                                          item.isVertical = true;                                      } break;                                    case 0x14: //rotatable                                      {                                          item.isRotatable = true;                                      } break;                                    case 0x15: //light info                                      {                                          item.lightLevel = reader.ReadUInt16();                                          item.lightColor = reader.ReadUInt16();                                      } break;                                    case 0x16: //dont hide                                      {  										//item.dontHide = true;                                      } break;                                    case 0x17: //translucent                                      {  										//item.translucent = true;                                      } break;                                    case 0x18: //shift                                      {  										//item.displaced = true;  										UInt16 displacementX = reader.ReadUInt16();  										//item.displacementX = displacementX;  										UInt16 displacementY = reader.ReadUInt16();  										//item.displacementY = displacementY;                                      } break;                                    case 0x19:                                      {                                          item.hasHeight = true;                                          UInt16 height = reader.ReadUInt16();  										//item.height = height;                                      } break;                                    case 0x1A: //lying object                                      {  										//item.lyingObject = true;                                      } break;                                      case 0x1B: //animate                                      {  										//item.animateWhenIdle = true;                                      } break;                                    case 0x1C: //minimap color                                      {                                          item.minimapColor = reader.ReadUInt16();                                          break;                                      }                                    case 0x1D: //in-game help info                                      {                                          UInt16 opt = reader.ReadUInt16();                                          if(opt == 1112)                                          {                                              item.isReadable = true;                                          }                                      } break;                                    case 0x1E: //full tile                                      {  										item.walkStack = true;                                      } break;                                    case 0x1F: //look through (borders)                                      {                                          item.lookThrough = true;                                      } break;                                    case 0x20: //cloth                                      {  										UInt16 slot = reader.ReadUInt16();                                          //item.slotPosition = slot;                                      } break;    								case 0x21:  									{  										UInt16 marketCategory = reader.ReadUInt16();  										UInt16 marketTradeAs = reader.ReadUInt16();  										UInt16 marketShowAs = reader.ReadUInt16();    										UInt16 size = reader.ReadUInt16();  										string marketName = new string(reader.ReadChars(size));    										UInt16 marketProfession = reader.ReadUInt16();  										UInt16 marketLevel = reader.ReadUInt16();    										item.name = marketName;  										item.wareId = marketTradeAs;  									} break;                                    case 0xFF: //end of attributes                                      {                                      } break;                                    default:                                      {                                          Trace.WriteLine(String.Format("Plugin: Error while parsing' unknown optbyte {0:X}"' optbyte));                                          return false;                                      }                              }
