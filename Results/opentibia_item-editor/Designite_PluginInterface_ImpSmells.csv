Implementation smell,Namespace,Class,File,Method,Description
Long Method,otitemeditor,Item,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Item.cs,isEqual,The method has 145 lines of code.
Long Method,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The method has 259 lines of code.
Long Method,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,save,The method has 202 lines of code.
Complex Method,otitemeditor,Item,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Item.cs,isEqual,Cyclomatic complexity of the method is 28
Complex Method,otitemeditor,OtbLoader,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,getNextNode,Cyclomatic complexity of the method is 9
Complex Method,otitemeditor,OtbLoader,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,advance,Cyclomatic complexity of the method is 8
Complex Method,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,save,Cyclomatic complexity of the method is 46
Complex Method,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,Cyclomatic complexity of the method is 9
Long Parameter List,PluginInterface,SupportedClient,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\PluginInterface.cs,SupportedClient,The method has 5 parameters. Parameters: version' description' otbVersion' datSignature' sprSignature
Long Statement,otitemeditor,OtbLoader,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,writeBytes,The length of the statement  "				if(unescape && (b == (byte)SpecialChars.NODE_START || b == (byte)SpecialChars.NODE_END || b == (byte)SpecialChars.ESCAPE_CHAR)) " is 127.
Long Statement,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,save,The length of the statement  "					vi.CSDVersion = String.Format("OTB {0}.{1}.{2}-{3}.{4}"' vi.dwMajorVersion' vi.dwMinorVersion' vi.dwBuildNumber' items.clientVersion / 100' items.clientVersion % 100); " is 167.
Long Statement,PluginInterface,Settings,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Settings.cs,GetSupportedClientList,The length of the statement  "						UInt32 datSignature = (UInt32)System.Int32.Parse(node.Attributes["datsignature"].Value' System.Globalization.NumberStyles.HexNumber); " is 133.
Long Statement,PluginInterface,Settings,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Settings.cs,GetSupportedClientList,The length of the statement  "						UInt32 sprSignature = (UInt32)System.Int32.Parse(node.Attributes["sprsignature"].Value' System.Globalization.NumberStyles.HexNumber); " is 133.
Complex Conditional,otitemeditor,OtbLoader,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,writeBytes,The conditional expression  "unescape && (b == (byte)SpecialChars.NODE_START || b == (byte)SpecialChars.NODE_END || b == (byte)SpecialChars.ESCAPE_CHAR)"  is complex.
Magic Number,otitemeditor,OtbLoader,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,getNodeData,The following statement contains a magic number: MemoryStream ms = new MemoryStream(200);
Magic Number,otitemeditor,OtbLoader,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,advance,The following statement contains a magic number: seekPos = 4;
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: datalen != 4 + 4 + 4 + 1 * 128
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: datalen != 4 + 4 + 4 + 1 * 128
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: datalen != 4 + 4 + 4 + 1 * 128
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: datalen != 4 + 4 + 4 + 1 * 128
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: nodeReader.BaseStream.Seek(128' SeekOrigin.Current);
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: switch ((itemattrib_t)attribute)  							{  								case itemattrib_t.ITEM_ATTR_SERVERID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of server id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.id = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										System.Diagnostics.Debug.WriteLine(String.Format("Node:attribute:data {0}"' item.id));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_CLIENTID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of client id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.spriteId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.spriteId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_WAREID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of ware id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.wareId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.wareId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPEED:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of speed block (Should be 2 bytes)"));  										}  										return false;  									}    									item.groundSpeed = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.groundSpeed));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_NAME:  								{  									item.name = new string(nodeReader.ReadChars(datalen));  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.name));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPRITEHASH:  								{  									if (datalen != 16)  									{  										return false;  									}    									item.spriteHash = nodeReader.ReadBytes(16);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  									}  								} break;  								  								case itemattrib_t.ITEM_ATTR_MINIMAPCOLOR:  								{  									if (datalen != 2)  									{  										return false;  									}    									item.minimapColor = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.minimapColor));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_07:  									{  										//read/write-able  										if (datalen != 2)  										{  											return false;  										}    										item.maxReadWriteChars = nodeReader.ReadUInt16();  									} break;    								case itemattrib_t.ITEM_ATTR_08:  								{  									//readable  									if (datalen != 2)  									{  										return false;  									}    									item.maxReadChars = nodeReader.ReadUInt16();  								} break;    								case itemattrib_t.ITEM_ATTR_LIGHT2:  									{  										if (datalen != sizeof(UInt16) * 2)  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item light (2) block"));  											}  											return false;  										}    										item.lightLevel = nodeReader.ReadUInt16();  										item.lightColor = nodeReader.ReadUInt16();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}' {1}"' item.lightLevel' item.lightColor));  										}  									} break;    								case itemattrib_t.ITEM_ATTR_TOPORDER:  									{  										if (datalen != sizeof(byte))  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item toporder block (Should be 1 byte)"));  											}  											return false;  										}    										item.alwaysOnTopOrder = nodeReader.ReadByte();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  										}  									} break;    								default:  								{  									//skip unknown attributes  									nodeReader.BaseStream.Seek(datalen' SeekOrigin.Current);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Skipped unknown attribute"));  									}  								} break;  							}
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: switch ((itemattrib_t)attribute)  							{  								case itemattrib_t.ITEM_ATTR_SERVERID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of server id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.id = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										System.Diagnostics.Debug.WriteLine(String.Format("Node:attribute:data {0}"' item.id));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_CLIENTID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of client id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.spriteId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.spriteId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_WAREID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of ware id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.wareId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.wareId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPEED:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of speed block (Should be 2 bytes)"));  										}  										return false;  									}    									item.groundSpeed = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.groundSpeed));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_NAME:  								{  									item.name = new string(nodeReader.ReadChars(datalen));  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.name));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPRITEHASH:  								{  									if (datalen != 16)  									{  										return false;  									}    									item.spriteHash = nodeReader.ReadBytes(16);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  									}  								} break;  								  								case itemattrib_t.ITEM_ATTR_MINIMAPCOLOR:  								{  									if (datalen != 2)  									{  										return false;  									}    									item.minimapColor = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.minimapColor));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_07:  									{  										//read/write-able  										if (datalen != 2)  										{  											return false;  										}    										item.maxReadWriteChars = nodeReader.ReadUInt16();  									} break;    								case itemattrib_t.ITEM_ATTR_08:  								{  									//readable  									if (datalen != 2)  									{  										return false;  									}    									item.maxReadChars = nodeReader.ReadUInt16();  								} break;    								case itemattrib_t.ITEM_ATTR_LIGHT2:  									{  										if (datalen != sizeof(UInt16) * 2)  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item light (2) block"));  											}  											return false;  										}    										item.lightLevel = nodeReader.ReadUInt16();  										item.lightColor = nodeReader.ReadUInt16();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}' {1}"' item.lightLevel' item.lightColor));  										}  									} break;    								case itemattrib_t.ITEM_ATTR_TOPORDER:  									{  										if (datalen != sizeof(byte))  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item toporder block (Should be 1 byte)"));  											}  											return false;  										}    										item.alwaysOnTopOrder = nodeReader.ReadByte();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  										}  									} break;    								default:  								{  									//skip unknown attributes  									nodeReader.BaseStream.Seek(datalen' SeekOrigin.Current);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Skipped unknown attribute"));  									}  								} break;  							}
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: switch ((itemattrib_t)attribute)  							{  								case itemattrib_t.ITEM_ATTR_SERVERID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of server id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.id = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										System.Diagnostics.Debug.WriteLine(String.Format("Node:attribute:data {0}"' item.id));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_CLIENTID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of client id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.spriteId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.spriteId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_WAREID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of ware id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.wareId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.wareId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPEED:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of speed block (Should be 2 bytes)"));  										}  										return false;  									}    									item.groundSpeed = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.groundSpeed));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_NAME:  								{  									item.name = new string(nodeReader.ReadChars(datalen));  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.name));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPRITEHASH:  								{  									if (datalen != 16)  									{  										return false;  									}    									item.spriteHash = nodeReader.ReadBytes(16);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  									}  								} break;  								  								case itemattrib_t.ITEM_ATTR_MINIMAPCOLOR:  								{  									if (datalen != 2)  									{  										return false;  									}    									item.minimapColor = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.minimapColor));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_07:  									{  										//read/write-able  										if (datalen != 2)  										{  											return false;  										}    										item.maxReadWriteChars = nodeReader.ReadUInt16();  									} break;    								case itemattrib_t.ITEM_ATTR_08:  								{  									//readable  									if (datalen != 2)  									{  										return false;  									}    									item.maxReadChars = nodeReader.ReadUInt16();  								} break;    								case itemattrib_t.ITEM_ATTR_LIGHT2:  									{  										if (datalen != sizeof(UInt16) * 2)  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item light (2) block"));  											}  											return false;  										}    										item.lightLevel = nodeReader.ReadUInt16();  										item.lightColor = nodeReader.ReadUInt16();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}' {1}"' item.lightLevel' item.lightColor));  										}  									} break;    								case itemattrib_t.ITEM_ATTR_TOPORDER:  									{  										if (datalen != sizeof(byte))  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item toporder block (Should be 1 byte)"));  											}  											return false;  										}    										item.alwaysOnTopOrder = nodeReader.ReadByte();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  										}  									} break;    								default:  								{  									//skip unknown attributes  									nodeReader.BaseStream.Seek(datalen' SeekOrigin.Current);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Skipped unknown attribute"));  									}  								} break;  							}
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: switch ((itemattrib_t)attribute)  							{  								case itemattrib_t.ITEM_ATTR_SERVERID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of server id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.id = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										System.Diagnostics.Debug.WriteLine(String.Format("Node:attribute:data {0}"' item.id));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_CLIENTID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of client id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.spriteId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.spriteId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_WAREID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of ware id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.wareId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.wareId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPEED:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of speed block (Should be 2 bytes)"));  										}  										return false;  									}    									item.groundSpeed = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.groundSpeed));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_NAME:  								{  									item.name = new string(nodeReader.ReadChars(datalen));  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.name));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPRITEHASH:  								{  									if (datalen != 16)  									{  										return false;  									}    									item.spriteHash = nodeReader.ReadBytes(16);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  									}  								} break;  								  								case itemattrib_t.ITEM_ATTR_MINIMAPCOLOR:  								{  									if (datalen != 2)  									{  										return false;  									}    									item.minimapColor = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.minimapColor));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_07:  									{  										//read/write-able  										if (datalen != 2)  										{  											return false;  										}    										item.maxReadWriteChars = nodeReader.ReadUInt16();  									} break;    								case itemattrib_t.ITEM_ATTR_08:  								{  									//readable  									if (datalen != 2)  									{  										return false;  									}    									item.maxReadChars = nodeReader.ReadUInt16();  								} break;    								case itemattrib_t.ITEM_ATTR_LIGHT2:  									{  										if (datalen != sizeof(UInt16) * 2)  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item light (2) block"));  											}  											return false;  										}    										item.lightLevel = nodeReader.ReadUInt16();  										item.lightColor = nodeReader.ReadUInt16();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}' {1}"' item.lightLevel' item.lightColor));  										}  									} break;    								case itemattrib_t.ITEM_ATTR_TOPORDER:  									{  										if (datalen != sizeof(byte))  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item toporder block (Should be 1 byte)"));  											}  											return false;  										}    										item.alwaysOnTopOrder = nodeReader.ReadByte();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  										}  									} break;    								default:  								{  									//skip unknown attributes  									nodeReader.BaseStream.Seek(datalen' SeekOrigin.Current);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Skipped unknown attribute"));  									}  								} break;  							}
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: switch ((itemattrib_t)attribute)  							{  								case itemattrib_t.ITEM_ATTR_SERVERID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of server id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.id = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										System.Diagnostics.Debug.WriteLine(String.Format("Node:attribute:data {0}"' item.id));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_CLIENTID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of client id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.spriteId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.spriteId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_WAREID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of ware id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.wareId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.wareId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPEED:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of speed block (Should be 2 bytes)"));  										}  										return false;  									}    									item.groundSpeed = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.groundSpeed));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_NAME:  								{  									item.name = new string(nodeReader.ReadChars(datalen));  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.name));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPRITEHASH:  								{  									if (datalen != 16)  									{  										return false;  									}    									item.spriteHash = nodeReader.ReadBytes(16);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  									}  								} break;  								  								case itemattrib_t.ITEM_ATTR_MINIMAPCOLOR:  								{  									if (datalen != 2)  									{  										return false;  									}    									item.minimapColor = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.minimapColor));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_07:  									{  										//read/write-able  										if (datalen != 2)  										{  											return false;  										}    										item.maxReadWriteChars = nodeReader.ReadUInt16();  									} break;    								case itemattrib_t.ITEM_ATTR_08:  								{  									//readable  									if (datalen != 2)  									{  										return false;  									}    									item.maxReadChars = nodeReader.ReadUInt16();  								} break;    								case itemattrib_t.ITEM_ATTR_LIGHT2:  									{  										if (datalen != sizeof(UInt16) * 2)  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item light (2) block"));  											}  											return false;  										}    										item.lightLevel = nodeReader.ReadUInt16();  										item.lightColor = nodeReader.ReadUInt16();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}' {1}"' item.lightLevel' item.lightColor));  										}  									} break;    								case itemattrib_t.ITEM_ATTR_TOPORDER:  									{  										if (datalen != sizeof(byte))  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item toporder block (Should be 1 byte)"));  											}  											return false;  										}    										item.alwaysOnTopOrder = nodeReader.ReadByte();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  										}  									} break;    								default:  								{  									//skip unknown attributes  									nodeReader.BaseStream.Seek(datalen' SeekOrigin.Current);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Skipped unknown attribute"));  									}  								} break;  							}
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,open,The following statement contains a magic number: switch ((itemattrib_t)attribute)  							{  								case itemattrib_t.ITEM_ATTR_SERVERID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of server id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.id = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										System.Diagnostics.Debug.WriteLine(String.Format("Node:attribute:data {0}"' item.id));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_CLIENTID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of client id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.spriteId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.spriteId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_WAREID:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of ware id block (Should be 2 bytes)"));  										}  										return false;  									}    									item.wareId = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.wareId));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPEED:  								{  									if (datalen != sizeof(UInt16))  									{  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Unexpected data length of speed block (Should be 2 bytes)"));  										}  										return false;  									}    									item.groundSpeed = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.groundSpeed));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_NAME:  								{  									item.name = new string(nodeReader.ReadChars(datalen));  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.name));  									}  								} break;    								case itemattrib_t.ITEM_ATTR_SPRITEHASH:  								{  									if (datalen != 16)  									{  										return false;  									}    									item.spriteHash = nodeReader.ReadBytes(16);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  									}  								} break;  								  								case itemattrib_t.ITEM_ATTR_MINIMAPCOLOR:  								{  									if (datalen != 2)  									{  										return false;  									}    									item.minimapColor = nodeReader.ReadUInt16();  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.minimapColor));  									}    								} break;    								case itemattrib_t.ITEM_ATTR_07:  									{  										//read/write-able  										if (datalen != 2)  										{  											return false;  										}    										item.maxReadWriteChars = nodeReader.ReadUInt16();  									} break;    								case itemattrib_t.ITEM_ATTR_08:  								{  									//readable  									if (datalen != 2)  									{  										return false;  									}    									item.maxReadChars = nodeReader.ReadUInt16();  								} break;    								case itemattrib_t.ITEM_ATTR_LIGHT2:  									{  										if (datalen != sizeof(UInt16) * 2)  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item light (2) block"));  											}  											return false;  										}    										item.lightLevel = nodeReader.ReadUInt16();  										item.lightColor = nodeReader.ReadUInt16();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}' {1}"' item.lightLevel' item.lightColor));  										}  									} break;    								case itemattrib_t.ITEM_ATTR_TOPORDER:  									{  										if (datalen != sizeof(byte))  										{  											if (outputDebug)  											{  												Trace.WriteLine(String.Format("Unexpected data length of item toporder block (Should be 1 byte)"));  											}  											return false;  										}    										item.alwaysOnTopOrder = nodeReader.ReadByte();  										if (outputDebug)  										{  											Trace.WriteLine(String.Format("Node:attribute:data {0}"' item.alwaysOnTopOrder));  										}  									} break;    								default:  								{  									//skip unknown attributes  									nodeReader.BaseStream.Seek(datalen' SeekOrigin.Current);  									if (outputDebug)  									{  										Trace.WriteLine(String.Format("Skipped unknown attribute"));  									}  								} break;  							}
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,save,The following statement contains a magic number: vi.CSDVersion = String.Format("OTB {0}.{1}.{2}-{3}.{4}"' vi.dwMajorVersion' vi.dwMinorVersion' vi.dwBuildNumber' items.clientVersion / 100' items.clientVersion % 100);
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,save,The following statement contains a magic number: vi.CSDVersion = String.Format("OTB {0}.{1}.{2}-{3}.{4}"' vi.dwMajorVersion' vi.dwMinorVersion' vi.dwBuildNumber' items.clientVersion / 100' items.clientVersion % 100);
Magic Number,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,save,The following statement contains a magic number: Array.Resize(ref CSDVersion' 128);
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,loadSprites,The following statement contains a magic number: UInt32 index = element + 3;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,loadSprites,The following statement contains a magic number: UInt32 index = element + 3;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: byte[] rgb32x32x3 = new byte[32 * 32 * 3];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: byte[] rgb32x32x3 = new byte[32 * 32 * 3];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: byte[] rgb32x32x3 = new byte[32 * 32 * 3];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: chunkSize = dump[bytes] | dump[bytes + 1] << 8;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: bytes += 2;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 0] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 0] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 1] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 1] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: x >= 32
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: chunkSize = dump[bytes] | dump[bytes + 1] << 8;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: bytes += 2;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: byte blue = dump[bytes + 2];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 0] = red;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 0] = red;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 1] = green;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 1] = green;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = blue;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = blue;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = blue;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: bytes += 3;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: x >= 32
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 0] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 0] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 1] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 1] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: rgb32x32x3[96 * y + x * 3 + 2] = transparentColor;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: x >= 32
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: y < 32 && x < 32
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBData,The following statement contains a magic number: y < 32 && x < 32
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: byte[] rgbx32x32x4 = new byte[32 * 32 * 4];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: byte[] rgbx32x32x4 = new byte[32 * 32 * 4];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: byte[] rgbx32x32x4 = new byte[32 * 32 * 4];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 0] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 2];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 0] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 2];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 0] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 2];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 0] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 2];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 0] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 2];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 0] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 2];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 1] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 1];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 1] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 1];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 1] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 1];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 1] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 1];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 1] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 1];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 2] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 0];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 2] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 0];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 2] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 0];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 2] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 0];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 2] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 0];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 2] = rgb32x32x3[(32 - y - 1) * 96 + x * 3 + 0];
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 3] = 0;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 3] = 0;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: rgbx32x32x4[128 * y + x * 4 + 3] = 0;
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: x < 32
Magic Number,otitemeditor,Sprite,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\Sprite.cs,getRGBAData,The following statement contains a magic number: y < 32
Missing Default,otitemeditor,otb,C:\research\architectureSmells\repos\opentibia_item-editor\Source\PluginInterface\otbloader.cs,save,The following switch statement is missing a default case: switch (attribute)  							{  								case itemattrib_t.ITEM_ATTR_SERVERID:  									{  										property.Write((UInt16)item.id);  										writer.writeProp(itemattrib_t.ITEM_ATTR_SERVERID' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_WAREID:  									{  										property.Write((UInt16)item.wareId);  										writer.writeProp(itemattrib_t.ITEM_ATTR_WAREID' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_CLIENTID:  									{  										property.Write((UInt16)item.spriteId);  										writer.writeProp(itemattrib_t.ITEM_ATTR_CLIENTID' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_SPEED:  									{  										property.Write((UInt16)item.groundSpeed);  										writer.writeProp(itemattrib_t.ITEM_ATTR_SPEED' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_NAME:  									{  										for (UInt16 i = 0; i < item.name.Length; ++i)  										{  											property.Write((char)item.name[i]);  										}    										writer.writeProp(itemattrib_t.ITEM_ATTR_NAME' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_SPRITEHASH:  									{  										property.Write(item.spriteHash);  										writer.writeProp(itemattrib_t.ITEM_ATTR_SPRITEHASH' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_MINIMAPCOLOR:  									{  										property.Write((UInt16)item.minimapColor);  										writer.writeProp(itemattrib_t.ITEM_ATTR_MINIMAPCOLOR' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_07:  									{  										property.Write((UInt16)item.maxReadWriteChars);  										writer.writeProp(itemattrib_t.ITEM_ATTR_07' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_08:  									{  										property.Write((UInt16)item.maxReadChars);  										writer.writeProp(itemattrib_t.ITEM_ATTR_08' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_LIGHT2:  									{  										property.Write((UInt16)item.lightLevel);  										property.Write((UInt16)item.lightColor);  										writer.writeProp(itemattrib_t.ITEM_ATTR_LIGHT2' property);  										break;  									}    								case itemattrib_t.ITEM_ATTR_TOPORDER:  									{  										property.Write((byte)item.alwaysOnTopOrder);  										writer.writeProp(itemattrib_t.ITEM_ATTR_TOPORDER' property);  										break;  									}  							}
