Implementation smell,Namespace,Class,File,Method,Description
Long Method,SQLite,TableQuery<T>,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,CompileExpr,The method has 157 lines of code.
Complex Method,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,CreateTable,Cyclomatic complexity of the method is 9
Complex Method,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,Insert,Cyclomatic complexity of the method is 8
Complex Method,SQLite,Orm,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,SqlType,Cyclomatic complexity of the method is 9
Complex Method,SQLite,SQLiteCommand,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,BindParameter,Cyclomatic complexity of the method is 13
Complex Method,SQLite,SQLiteCommand,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,ReadCol,Cyclomatic complexity of the method is 19
Complex Method,SQLite,TableQuery<T>,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,CompileExpr,Cyclomatic complexity of the method is 26
Complex Method,SQLite,TableQuery<T>,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,GetSqlName,Cyclomatic complexity of the method is 11
Long Parameter List,SQLite,SQLite3,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,Prepare2,The method has 5 parameters. Parameters: db' sql' numBytes' stmt' pzTail
Long Parameter List,SQLite,SQLite3,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,BindText,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLite,SQLite3,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,BindBlob,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,SQLite.Tests,UniqueIndexTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\UniqueTest.cs,CheckIndex,The method has 5 parameters. Parameters: db' indexes' iname' unique' columns
Long Statement,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,Execute,The length of the statement  "				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,ExecuteScalar,The length of the statement  "				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,DoSavePointExecute,The length of the statement  "			throw new ArgumentException ("savePoint is not valid' and should be the result of a call to SaveTransactionPoint."' "savePoint"); " is 129.
Long Statement,SQLite,Orm,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,SqlType,The length of the statement  "			if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) { " is 173.
Long Statement,SQLite,TableQuery<T>,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,GenerateCommand,The length of the statement  "					var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ()); " is 121.
Long Statement,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,WhereNotNull,The length of the statement  "			NullableIntClass[] results = db.Table<NullableIntClass>().Where(x => x.NullableInt != null).OrderBy(x => x.ID).ToArray(); " is 121.
Long Statement,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,WhereNull,The length of the statement  "			NullableIntClass[] results = db.Table<NullableIntClass>().Where(x => x.NullableInt == null).OrderBy(x => x.ID).ToArray(); " is 121.
Long Statement,SQLite.Tests,UniqueIndexTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\UniqueTest.cs,CheckIndex,The length of the statement  "			Assert.AreEqual (idx.unique' unique' String.Format ("Index {0} unique expected {1} but got {2}"' iname' unique' idx.unique)); " is 125.
Long Statement,SQLite.Tests,UniqueIndexTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\UniqueTest.cs,CheckIndex,The length of the statement  "			Assert.AreEqual (columns.Length' idx_columns.Count' String.Format ("# of columns: expected {0}' got {1}"' columns.Length' idx_columns.Count)); " is 142.
Long Statement,SQLite.Tests,UniqueIndexTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\UniqueTest.cs,CheckIndex,The length of the statement  "				Assert.IsNotNull (idx_columns.SingleOrDefault (c => c.name == col)' String.Format ("Column {0} not in index {1}"' col' idx.name)); " is 130.
Complex Conditional,SQLite,Column,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,Column,The conditional expression  "!Indices.Any()                      && !IsPK                      && ((createFlags & CreateFlags.ImplicitIndex) == CreateFlags.ImplicitIndex)                      && Name.EndsWith (Orm.ImplicitIndexSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,SQLite,Orm,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLite,SQLiteCommand,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Empty Catch Block,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,SetUp,The method has an empty catch block.
Empty Catch Block,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertWithExtra,The method has an empty catch block.
Empty Catch Block,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertWithExtra,The method has an empty catch block.
Magic Number,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,SQLiteConnection,The following statement contains a magic number: SQLite3.SetDirectory(/*temp directory type*/2' Windows.Storage.ApplicationData.Current.TemporaryFolder.Path);
Magic Number,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);
Magic Number,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,Execute,The following statement contains a magic number: Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));
Magic Number,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,ExecuteScalar,The following statement contains a magic number: Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));
Magic Number,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,DoSavePointExecute,The following statement contains a magic number: firstLen >= 2 && savepoint.Length > firstLen + 1
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,StressAsync,The following statement contains a magic number: var n = 500;
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestQueryAsync,The following statement contains a magic number: index < 5
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestQueryAsync,The following statement contains a magic number: var task = conn.QueryAsync<Customer> ("select * from customer where id=?"' customers[2].Id);
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestQueryAsync,The following statement contains a magic number: Assert.AreEqual (customers[2].Email' loaded[0].Email);
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestTableAsync,The following statement contains a magic number: index < 5
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestTableAsync,The following statement contains a magic number: Assert.AreEqual (5' loaded.Count);
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestTableAsync,The following statement contains a magic number: Assert.IsNotNull (loaded.Where (v => v.Id == customers[2].Id));
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestTableAsync,The following statement contains a magic number: Assert.IsNotNull (loaded.Where (v => v.Id == customers[3].Id));
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestTableAsync,The following statement contains a magic number: Assert.IsNotNull (loaded.Where (v => v.Id == customers[4].Id));
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestInsertAllAsync,The following statement contains a magic number: index < 100
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestRunInTransactionAsync,The following statement contains a magic number: conn.RunInTransactionAsync ((c) => {  				// insert...  				customer.FirstName = "foo";  				customer.LastName = "bar";  				customer.Email = Guid.NewGuid ().ToString ();  				c.Insert (customer);    				// delete it again...  				c.Execute ("delete from customer where id=?"' customer.Id);    				// set completion flag  				transactionCompleted = true;  			}).Wait (10000);
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableQueryCountAsync,The following statement contains a magic number: index < 10
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableQueryCountAsync,The following statement contains a magic number: Assert.AreEqual (10' task.Result);
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableOrderBy,The following statement contains a magic number: index < 10
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableOrderBy,The following statement contains a magic number: Assert.AreEqual (-1' string.Compare (items[0].Email' items[9].Email));
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableOrderByDescending,The following statement contains a magic number: index < 10
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableOrderByDescending,The following statement contains a magic number: Assert.AreEqual (1' string.Compare (items[0].Email' items[9].Email));
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableQueryTake,The following statement contains a magic number: index < 10
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableQuerySkip,The following statement contains a magic number: index < 10
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableQuerySkip,The following statement contains a magic number: var query = conn.Table<Customer> ().OrderBy (v => v.FirstName).Skip (5);
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableQuerySkip,The following statement contains a magic number: Assert.AreEqual (5' items.Count);
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableElementAtAsync,The following statement contains a magic number: index < 10
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncTableElementAtAsync,The following statement contains a magic number: var task = query.ElementAtAsync (7);
Magic Number,SQLite.Tests,AsyncTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\AsyncTests.cs,TestAsyncGetWithExpression,The following statement contains a magic number: index < 10
Magic Number,SQLite.Tests,BooleanTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\BooleanTest.cs,TestBoolean,The following statement contains a magic number: db.Insert(new VO() { Flag = (i % 3 == 0)' Text = String.Format("VO{0}"' i) });
Magic Number,SQLite.Tests,BooleanTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\BooleanTest.cs,TestBoolean,The following statement contains a magic number: i < 10
Magic Number,SQLite.Tests,BooleanTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\BooleanTest.cs,TestBoolean,The following statement contains a magic number: Assert.AreEqual(4' db.CountWithFlag(true));
Magic Number,SQLite.Tests,BooleanTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\BooleanTest.cs,TestBoolean,The following statement contains a magic number: Assert.AreEqual(6' db.CountWithFlag(false));
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,ByteArrays,The following statement contains a magic number: ByteArrayClass[] byteArrays = new ByteArrayClass[] {  				new ByteArrayClass() { bytes = new byte[] { 1' 2' 3' 4' 250' 252' 253' 254' 255 } }' //Range check  				new ByteArrayClass() { bytes = new byte[] { 0 } }' //null bytes need to be handled correctly  				new ByteArrayClass() { bytes = new byte[] { 0' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 0' 1' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 1' 0' 1 } }'  				new ByteArrayClass() { bytes = new byte[] { } }' //Empty byte array should stay empty (and not become null)  				new ByteArrayClass() { bytes = null } //Null should be supported  			};
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,ByteArrays,The following statement contains a magic number: ByteArrayClass[] byteArrays = new ByteArrayClass[] {  				new ByteArrayClass() { bytes = new byte[] { 1' 2' 3' 4' 250' 252' 253' 254' 255 } }' //Range check  				new ByteArrayClass() { bytes = new byte[] { 0 } }' //null bytes need to be handled correctly  				new ByteArrayClass() { bytes = new byte[] { 0' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 0' 1' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 1' 0' 1 } }'  				new ByteArrayClass() { bytes = new byte[] { } }' //Empty byte array should stay empty (and not become null)  				new ByteArrayClass() { bytes = null } //Null should be supported  			};
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,ByteArrays,The following statement contains a magic number: ByteArrayClass[] byteArrays = new ByteArrayClass[] {  				new ByteArrayClass() { bytes = new byte[] { 1' 2' 3' 4' 250' 252' 253' 254' 255 } }' //Range check  				new ByteArrayClass() { bytes = new byte[] { 0 } }' //null bytes need to be handled correctly  				new ByteArrayClass() { bytes = new byte[] { 0' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 0' 1' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 1' 0' 1 } }'  				new ByteArrayClass() { bytes = new byte[] { } }' //Empty byte array should stay empty (and not become null)  				new ByteArrayClass() { bytes = null } //Null should be supported  			};
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,ByteArrays,The following statement contains a magic number: ByteArrayClass[] byteArrays = new ByteArrayClass[] {  				new ByteArrayClass() { bytes = new byte[] { 1' 2' 3' 4' 250' 252' 253' 254' 255 } }' //Range check  				new ByteArrayClass() { bytes = new byte[] { 0 } }' //null bytes need to be handled correctly  				new ByteArrayClass() { bytes = new byte[] { 0' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 0' 1' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 1' 0' 1 } }'  				new ByteArrayClass() { bytes = new byte[] { } }' //Empty byte array should stay empty (and not become null)  				new ByteArrayClass() { bytes = null } //Null should be supported  			};
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,ByteArrays,The following statement contains a magic number: ByteArrayClass[] byteArrays = new ByteArrayClass[] {  				new ByteArrayClass() { bytes = new byte[] { 1' 2' 3' 4' 250' 252' 253' 254' 255 } }' //Range check  				new ByteArrayClass() { bytes = new byte[] { 0 } }' //null bytes need to be handled correctly  				new ByteArrayClass() { bytes = new byte[] { 0' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 0' 1' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 1' 0' 1 } }'  				new ByteArrayClass() { bytes = new byte[] { } }' //Empty byte array should stay empty (and not become null)  				new ByteArrayClass() { bytes = null } //Null should be supported  			};
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,ByteArrays,The following statement contains a magic number: ByteArrayClass[] byteArrays = new ByteArrayClass[] {  				new ByteArrayClass() { bytes = new byte[] { 1' 2' 3' 4' 250' 252' 253' 254' 255 } }' //Range check  				new ByteArrayClass() { bytes = new byte[] { 0 } }' //null bytes need to be handled correctly  				new ByteArrayClass() { bytes = new byte[] { 0' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 0' 1' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 1' 0' 1 } }'  				new ByteArrayClass() { bytes = new byte[] { } }' //Empty byte array should stay empty (and not become null)  				new ByteArrayClass() { bytes = null } //Null should be supported  			};
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,ByteArrays,The following statement contains a magic number: ByteArrayClass[] byteArrays = new ByteArrayClass[] {  				new ByteArrayClass() { bytes = new byte[] { 1' 2' 3' 4' 250' 252' 253' 254' 255 } }' //Range check  				new ByteArrayClass() { bytes = new byte[] { 0 } }' //null bytes need to be handled correctly  				new ByteArrayClass() { bytes = new byte[] { 0' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 0' 1' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 1' 0' 1 } }'  				new ByteArrayClass() { bytes = new byte[] { } }' //Empty byte array should stay empty (and not become null)  				new ByteArrayClass() { bytes = null } //Null should be supported  			};
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,ByteArrays,The following statement contains a magic number: ByteArrayClass[] byteArrays = new ByteArrayClass[] {  				new ByteArrayClass() { bytes = new byte[] { 1' 2' 3' 4' 250' 252' 253' 254' 255 } }' //Range check  				new ByteArrayClass() { bytes = new byte[] { 0 } }' //null bytes need to be handled correctly  				new ByteArrayClass() { bytes = new byte[] { 0' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 0' 1' 0 } }'  				new ByteArrayClass() { bytes = new byte[] { 1' 0' 1 } }'  				new ByteArrayClass() { bytes = new byte[] { } }' //Empty byte array should stay empty (and not become null)  				new ByteArrayClass() { bytes = null } //Null should be supported  			};
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,LargeByteArray,The following statement contains a magic number: const int byteArraySize = 1024 * 1024;
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,LargeByteArray,The following statement contains a magic number: const int byteArraySize = 1024 * 1024;
Magic Number,SQLite.Tests,ByteArrayTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ByteArrayTest.cs,LargeByteArray,The following statement contains a magic number: bytes[i] = (byte)(i % 256);
Magic Number,SQLite.Tests,ContainsTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ContainsTest.cs,ContainsConstantData,The following statement contains a magic number: int n = 20;
Magic Number,SQLite.Tests,ContainsTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ContainsTest.cs,ContainsConstantData,The following statement contains a magic number: Assert.AreEqual(2' tens.Count);
Magic Number,SQLite.Tests,ContainsTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ContainsTest.cs,ContainsConstantData,The following statement contains a magic number: Assert.AreEqual(2' more.Count);
Magic Number,SQLite.Tests,ContainsTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ContainsTest.cs,ContainsQueriedData,The following statement contains a magic number: int n = 20;
Magic Number,SQLite.Tests,ContainsTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ContainsTest.cs,ContainsQueriedData,The following statement contains a magic number: Assert.AreEqual(2' tens.Count);
Magic Number,SQLite.Tests,ContainsTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ContainsTest.cs,ContainsQueriedData,The following statement contains a magic number: Assert.AreEqual(2' more.Count);
Magic Number,SQLite.Tests,ContainsTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\ContainsTest.cs,ContainsQueriedData,The following statement contains a magic number: Assert.AreEqual(2' more2.Count);
Magic Number,SQLite.Tests,CreateTableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\CreateTableTest.cs,VerifyCreations,The following statement contains a magic number: Assert.AreEqual(6' orderLine.Columns.Length);
Magic Number,SQLite.Tests,CreateTableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\CreateTableTest.cs,Issue115_MissingPrimaryKey,The following statement contains a magic number: conn.InsertAll (from i in Enumerable.Range (0' 10) select new Issue115_MyObject {  					UniqueId = i.ToString ()'  					OtherValue = (byte)(i * 10)'  				});
Magic Number,SQLite.Tests,CreateTableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\CreateTableTest.cs,Issue115_MissingPrimaryKey,The following statement contains a magic number: conn.InsertAll (from i in Enumerable.Range (0' 10) select new Issue115_MyObject {  					UniqueId = i.ToString ()'  					OtherValue = (byte)(i * 10)'  				});
Magic Number,SQLite.Tests,DropTableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\DropTableTest.cs,CreateInsertDrop,The following statement contains a magic number: db.Insert (new Product {  				Name = "Hello"'  				Price = 16'  			});
Magic Number,SQLite.Tests,GuidTests,D:\research\architectureSmells\repos\koush_sqlite-net\tests\GuidTests.cs,ShouldPersistAndReadGuid,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,SQLite.Tests,InheritanceTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InheritanceTest.cs,InheritanceWorks,The following statement contains a magic number: Assert.AreEqual (3' mapping.Columns.Length);
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertALot,The following statement contains a magic number: int n = 10000;
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertTwoTimes,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertAllSuccessOutsideTransaction,The following statement contains a magic number: var testObjects = Enumerable.Range(1' 20).Select(i => new UniqueObj { Id = i }).ToList();
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertAllFailureOutsideTransaction,The following statement contains a magic number: var testObjects = Enumerable.Range(1' 20).Select(i => new UniqueObj { Id = i }).ToList();
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertAllSuccessInsideTransaction,The following statement contains a magic number: var testObjects = Enumerable.Range(1' 20).Select(i => new UniqueObj { Id = i }).ToList();
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertAllFailureInsideTransaction,The following statement contains a magic number: var testObjects = Enumerable.Range(1' 20).Select(i => new UniqueObj { Id = i }).ToList();
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertOrReplace,The following statement contains a magic number: _db.InsertAll (from i in Enumerable.Range(1' 20) select new TestObj { Text = "#" + i });
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertOrReplace,The following statement contains a magic number: Assert.AreEqual (20' _db.Table<TestObj> ().Count ());
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertOrReplace,The following statement contains a magic number: var t = new TestObj { Id = 5' Text = "Foo"' };
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertOrReplace,The following statement contains a magic number: Assert.AreEqual (20' r.Count);
Magic Number,SQLite.Tests,InsertTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\InsertTest.cs,InsertOrReplace,The following statement contains a magic number: Assert.AreEqual ("Foo"' r[4].Text);
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,FunctionParameter,The following statement contains a magic number: db.Insert (new Product {  				Name = "A"'  				Price = 20'  			});
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,FunctionParameter,The following statement contains a magic number: db.Insert (new Product {  				Name = "B"'  				Price = 10'  			});
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,FunctionParameter,The following statement contains a magic number: var r = GetProductsWithPriceAtLeast (15);
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,WhereGreaterThan,The following statement contains a magic number: db.Insert (new Product {  				Name = "A"'  				Price = 20'  			});
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,WhereGreaterThan,The following statement contains a magic number: db.Insert (new Product {  				Name = "B"'  				Price = 10'  			});
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,WhereGreaterThan,The following statement contains a magic number: Assert.AreEqual (2' db.Table<Product> ().Count ());
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,WhereGreaterThan,The following statement contains a magic number: var r = (from p in db.Table<Product> () where p.Price > 15 select p).ToList ();
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,GetWithExpression,The following statement contains a magic number: db.Insert (new Product {  				Name = "A"'  				Price = 20'  			});
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,GetWithExpression,The following statement contains a magic number: db.Insert (new Product {  				Name = "B"'  				Price = 10'  			});
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,GetWithExpression,The following statement contains a magic number: db.Insert(new Product              {                  Name = "C"'                  Price = 5'              });
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,GetWithExpression,The following statement contains a magic number: Assert.AreEqual (3' db.Table<Product> ().Count ());
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,GetWithExpression,The following statement contains a magic number: var r = db.Get<Product>(x => x.Price == 10);
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,FindWithExpression,The following statement contains a magic number: var r = db.Find<Product> (x => x.Price == 10);
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,OrderByCast,The following statement contains a magic number: db.Insert (new Product {  				Name = "B"'  				TotalSales = 100'  			});
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,OrderByCast,The following statement contains a magic number: Assert.AreEqual (2' nocast.Count);
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,OrderByCast,The following statement contains a magic number: Assert.AreEqual (2' cast.Count);
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,Issue96_NullabelIntsInQueries,The following statement contains a magic number: var id = 42;
Magic Number,SQLite.Tests,LinqTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\LinqTest.cs,Issue96_NullabelIntsInQueries,The following statement contains a magic number: Assert.AreEqual (3' db.Table<Issue96_A>().Where(p => p.ClassB == null).Count ());
Magic Number,SQLite.Tests,MappingTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\MappingTest.cs,Issue86,The following statement contains a magic number: db.Insert (new Foo { Bar = 42 } );
Magic Number,SQLite.Tests,MappingTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\MappingTest.cs,Issue86,The following statement contains a magic number: db.Insert (new Foo { Bar = 69 } );
Magic Number,SQLite.Tests,MappingTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\MappingTest.cs,Issue86,The following statement contains a magic number: var found42 = db.Table<Foo> ().Where (f => f.Bar == 42).FirstOrDefault();
Magic Number,SQLite.Tests,MappingTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\MappingTest.cs,Issue86,The following statement contains a magic number: Assert.AreEqual(2' ordered.Count);
Magic Number,SQLite.Tests,MappingTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\MappingTest.cs,Issue86,The following statement contains a magic number: Assert.AreEqual(69' ordered[0].Bar);
Magic Number,SQLite.Tests,MappingTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\MappingTest.cs,Issue86,The following statement contains a magic number: Assert.AreEqual(42' ordered[1].Bar);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,NullableInt,The following statement contains a magic number: Assert.AreEqual(4' results.Length);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,NullableInt,The following statement contains a magic number: Assert.AreEqual(with1' results[2]);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,NullableInt,The following statement contains a magic number: Assert.AreEqual(withMinus1' results[3]);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,NullableFloat,The following statement contains a magic number: Assert.AreEqual(4' results.Length);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,NullableFloat,The following statement contains a magic number: Assert.AreEqual(with1' results[2]);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,NullableFloat,The following statement contains a magic number: Assert.AreEqual(withMinus1' results[3]);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,NullableString,The following statement contains a magic number: Assert.AreEqual(3' results.Length);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,NullableString,The following statement contains a magic number: Assert.AreEqual(withData' results[2]);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,WhereNotNull,The following statement contains a magic number: Assert.AreEqual(3' results.Length);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,WhereNotNull,The following statement contains a magic number: Assert.AreEqual(withMinus1' results[2]);
Magic Number,SQLite.Tests,NullableTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\NullableTest.cs,StringWhereNotNull,The following statement contains a magic number: Assert.AreEqual(2' results.Length);
Magic Number,SQLite.Tests,SkipTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\SkipTest.cs,Skip,The following statement contains a magic number: var n = 100;
Magic Number,SQLite.Tests,SkipTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\SkipTest.cs,Skip,The following statement contains a magic number: Assert.AreEqual(2' s1[0].Order);
Magic Number,SQLite.Tests,SkipTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\SkipTest.cs,Skip,The following statement contains a magic number: var qs5 = q.Skip(5);
Magic Number,SQLite.Tests,SkipTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\SkipTest.cs,Skip,The following statement contains a magic number: Assert.AreEqual(n - 5' s5.Count);
Magic Number,SQLite.Tests,SkipTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\SkipTest.cs,Skip,The following statement contains a magic number: Assert.AreEqual(6' s5[0].Order);
Magic Number,SQLite.Tests,StringQueryTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\StringQueryTest.cs,StartsWith,The following statement contains a magic number: Assert.AreEqual (2' fs.Count);
Magic Number,SQLite.Tests,StringQueryTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\StringQueryTest.cs,EndsWith,The following statement contains a magic number: Assert.AreEqual (2' fs.Count);
Magic Number,SQLite.Tests,StringQueryTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\StringQueryTest.cs,Contains,The following statement contains a magic number: Assert.AreEqual (2' fs.Count);
Magic Number,SQLite.Tests,StringQueryTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\StringQueryTest.cs,Contains,The following statement contains a magic number: Assert.AreEqual (2' bs.Count);
Magic Number,SQLite.Tests,UniqueIndexTest,D:\research\architectureSmells\repos\koush_sqlite-net\tests\UniqueTest.cs,CreateUniqueIndexes,The following statement contains a magic number: Assert.AreEqual (4' indexes.Count' "# of indexes");
Missing Default,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result) {  						case SQLite3.Result.IOError:  						case SQLite3.Result.Full:  						case SQLite3.Result.Busy:  						case SQLite3.Result.NoMem:  						case SQLite3.Result.Interrupt:  							RollbackTo (null' true);  							break;  						}
Missing Default,SQLite,SQLiteConnection,D:\research\architectureSmells\repos\koush_sqlite-net\src\SQLite.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result) {  					case SQLite3.Result.IOError:  					case SQLite3.Result.Full:  					case SQLite3.Result.Busy:  					case SQLite3.Result.NoMem:  					case SQLite3.Result.Interrupt:  						RollbackTo (null' true);  						break;  					}
