Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,Cyclomatic complexity of the method is 10
Complex Method,MyTimeDatabaseLib,House2HouseRecordsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\House2HouseRecordsInterfaces.cs,GetHouse2HouseRecords,Cyclomatic complexity of the method is 9
Complex Method,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,GetReturnVisits,Cyclomatic complexity of the method is 8
Complex Method,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,NoLongerInUse,Cyclomatic complexity of the method is 10
Complex Method,MyTimeDatabaseLib,ReturnVisitData,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,GetCountryCode,Cyclomatic complexity of the method is 32
Long Parameter List,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,NoLongerInUse,The method has 8 parameters.
Long Statement,MyTimeDatabaseLib,House2HouseRecordsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\House2HouseRecordsInterfaces.cs,AddH2HRecord,The length of the statement  "		where x.HouseAptNumber.Equals (r.HouseAptNumber) && x.StreetItemId.Equals (r.StreetItemId) && x.TerritoryItemId.Equals (r.TerritoryItemId) " is 138.
Long Statement,MyTimeDatabaseLib,StreetBuildingInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\House2HouseRecordsInterfaces.cs,AddNewStreetBuilding,The length of the statement  "		where x.TerritoyrCardId.Equals (s.TerritoyrCardId) && x.Street.Equals (s.Street) && x.BuildingNumber.Equals (s.BuildingNumber) " is 126.
Long Statement,MyTimeDatabaseLib,Main,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\Main.cs,GetVersion,The length of the statement  "	return Regex.Match (Assembly.GetExecutingAssembly ().FullName' @"Version=(?<version>[\d\.]*)").Groups ["version"].Value; " is 120.
Long Statement,MyTimeDatabaseLib,RvPreviousVisitsDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\RvPreviousVisitsDataInterface.cs,GetPreviousVisits,The length of the statement  "			IEnumerable<RvPreviousVisitItem> visits = so == SortOrder.DateNewestToOldest ? qry.ToArray ().Reverse () : qry.ToArray (); " is 122.
Long Statement,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,AddNewReturnVisit,The length of the statement  "		where x.AddressOne.Equals (r.AddressOne) && x.AddressTwo.Equals (r.AddressTwo) && x.City.Equals (r.City) && x.Country.Equals (r.Country) && x.StateProvince.Equals (r.StateProvince) && x.PostalCode.Equals (r.PostalCode) && x.FullName.Equals (r.FullName) " is 252.
Long Statement,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,GetReturnVisitsByLastVisitDate,The length of the statement  "			return qry.Take (maxReturnCount == -1 ? qry.Count () : maxReturnCount).Select (rv => ReturnVisitData.Copy (rv)).ToList (); " is 122.
Empty Catch Block,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,GetLastVisitDate,The method has an empty catch block.
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	wb.SaveJpeg (ms' 100' 100' 0' 100);  	bmp.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	wb.SaveJpeg (ms' 100' 100' 0' 100);  	bmp.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	wb.SaveJpeg (ms' 100' 100' 0' 100);  	bmp.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: wb.SaveJpeg (ms' 100' 100' 0' 100);  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: wb.SaveJpeg (ms' 100' 100' 0' 100);  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: wb.SaveJpeg (ms' 100' 100' 0' 100);  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: if (ImageSrc != null && ImageSrc.Length >= 0) {  	var ris = new WriteableBitmap (450' 250);  	//get image from database  	for (int i = 0; i < ImageSrc.Length; i++) {  		ris.Pixels [i] = ImageSrc [i];  	}  	//put the image in a WritableBitmap  	using (var ms = new MemoryStream ()) {  		ris.SaveJpeg (ms' 450' 250' 0' 100);  		bi.SetSource (ms);  	}  	//crop the image to 100x100 and centered  	var img = new Image {  		Source = bi'  		Width = 450'  		Height = 250  	};  	var wb2 = new WriteableBitmap (100' 100);  	var t = new CompositeTransform {  		ScaleX = 0.5'  		ScaleY = 0.5'  		TranslateX = -((450 / 2) / 2 - 50)'  		TranslateY = -((250 / 2) / 2 - 50)  	};  	wb2.Render (img' t);  	wb2.Invalidate ();  	bi = new BitmapImage ();  	using (var ms = new MemoryStream ()) {  		wb2.SaveJpeg (ms' 100' 100' 0' 100);  		bi.SetSource (ms);  	}  	//BitmapImage bi is now cropped  }  else {  	bi = bmp;  	//Default image.  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	ris.SaveJpeg (ms' 450' 250' 0' 100);  	bi.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	ris.SaveJpeg (ms' 450' 250' 0' 100);  	bi.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	ris.SaveJpeg (ms' 450' 250' 0' 100);  	bi.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: ris.SaveJpeg (ms' 450' 250' 0' 100);  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: ris.SaveJpeg (ms' 450' 250' 0' 100);  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: ris.SaveJpeg (ms' 450' 250' 0' 100);  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	wb2.SaveJpeg (ms' 100' 100' 0' 100);  	bi.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	wb2.SaveJpeg (ms' 100' 100' 0' 100);  	bi.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	wb2.SaveJpeg (ms' 100' 100' 0' 100);  	bi.SetSource (ms);  }  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: wb2.SaveJpeg (ms' 100' 100' 0' 100);  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: wb2.SaveJpeg (ms' 100' 100' 0' 100);  
Magic Number,MyTimeDatabaseLib,BitmapConverter,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\BitmapConverter.cs,GetBitmapImage,The following statement contains a magic number: wb2.SaveJpeg (ms' 100' 100' 0' 100);  
Magic Number,MyTimeDatabaseLib,RvPreviousVisitsDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\RvPreviousVisitsDataInterface.cs,CheckDatabase,The following statement contains a magic number: using (var db = new RvPreviousVisitsContext (RvPreviousVisitsContext.DBConnectionString)) {  	if (db.DatabaseExists () == false) {  		db.CreateDatabase ();  		DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  	else {  		var dbUpdater = db.CreateDatabaseSchemaUpdater ();  		var updated = false;  		if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version  		 {  			updated = true;  			dbUpdater.AddColumn<RvPreviousVisitItem> ("Tracts");  		}  		if (dbUpdater.DatabaseSchemaVersion < 3) {  			updated = true;  			dbUpdater.AddColumn<RvPreviousVisitItem> ("Videos");  		}  		if (updated) {  			dbUpdater.DatabaseSchemaVersion = APP_VERSION;  			dbUpdater.Execute ();  		}  	}  }  
Magic Number,MyTimeDatabaseLib,RvPreviousVisitsDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\RvPreviousVisitsDataInterface.cs,CheckDatabase,The following statement contains a magic number: using (var db = new RvPreviousVisitsContext (RvPreviousVisitsContext.DBConnectionString)) {  	if (db.DatabaseExists () == false) {  		db.CreateDatabase ();  		DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  	else {  		var dbUpdater = db.CreateDatabaseSchemaUpdater ();  		var updated = false;  		if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version  		 {  			updated = true;  			dbUpdater.AddColumn<RvPreviousVisitItem> ("Tracts");  		}  		if (dbUpdater.DatabaseSchemaVersion < 3) {  			updated = true;  			dbUpdater.AddColumn<RvPreviousVisitItem> ("Videos");  		}  		if (updated) {  			dbUpdater.DatabaseSchemaVersion = APP_VERSION;  			dbUpdater.Execute ();  		}  	}  }  
Magic Number,MyTimeDatabaseLib,RvPreviousVisitsDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\RvPreviousVisitsDataInterface.cs,CheckDatabase,The following statement contains a magic number: if (db.DatabaseExists () == false) {  	db.CreateDatabase ();  	DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  	dbUpdater.DatabaseSchemaVersion = APP_VERSION;  	dbUpdater.Execute ();  }  else {  	var dbUpdater = db.CreateDatabaseSchemaUpdater ();  	var updated = false;  	if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version  	 {  		updated = true;  		dbUpdater.AddColumn<RvPreviousVisitItem> ("Tracts");  	}  	if (dbUpdater.DatabaseSchemaVersion < 3) {  		updated = true;  		dbUpdater.AddColumn<RvPreviousVisitItem> ("Videos");  	}  	if (updated) {  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  }  
Magic Number,MyTimeDatabaseLib,RvPreviousVisitsDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\RvPreviousVisitsDataInterface.cs,CheckDatabase,The following statement contains a magic number: if (db.DatabaseExists () == false) {  	db.CreateDatabase ();  	DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  	dbUpdater.DatabaseSchemaVersion = APP_VERSION;  	dbUpdater.Execute ();  }  else {  	var dbUpdater = db.CreateDatabaseSchemaUpdater ();  	var updated = false;  	if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version  	 {  		updated = true;  		dbUpdater.AddColumn<RvPreviousVisitItem> ("Tracts");  	}  	if (dbUpdater.DatabaseSchemaVersion < 3) {  		updated = true;  		dbUpdater.AddColumn<RvPreviousVisitItem> ("Videos");  	}  	if (updated) {  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  }  
Magic Number,MyTimeDatabaseLib,RvPreviousVisitsDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\RvPreviousVisitsDataInterface.cs,CheckDatabase,The following statement contains a magic number: if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version   {  	updated = true;  	dbUpdater.AddColumn<RvPreviousVisitItem> ("Tracts");  }  
Magic Number,MyTimeDatabaseLib,RvPreviousVisitsDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\RvPreviousVisitsDataInterface.cs,CheckDatabase,The following statement contains a magic number: if (dbUpdater.DatabaseSchemaVersion < 3) {  	updated = true;  	dbUpdater.AddColumn<RvPreviousVisitItem> ("Videos");  }  
Magic Number,MyTimeDatabaseLib,TimeDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\TimeDataInterface.cs,CheckDatabase,The following statement contains a magic number: using (var db = new TimeDataContext (TimeDataContext.DBConnectionString)) {  	if (db.DatabaseExists () == false) {  		db.CreateDatabase ();  		DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  	else {  		var dbUpdater = db.CreateDatabaseSchemaUpdater ();  		var updated = false;  		if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version  		 {  			dbUpdater.AddColumn<TimeDataItem> ("Tracts");  			updated = true;  		}  		if (dbUpdater.DatabaseSchemaVersion < 3) {  			dbUpdater.AddColumn<TimeDataItem> ("Videos");  			updated = true;  		}  		if (updated) {  			dbUpdater.DatabaseSchemaVersion = APP_VERSION;  			dbUpdater.Execute ();  		}  	}  }  
Magic Number,MyTimeDatabaseLib,TimeDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\TimeDataInterface.cs,CheckDatabase,The following statement contains a magic number: using (var db = new TimeDataContext (TimeDataContext.DBConnectionString)) {  	if (db.DatabaseExists () == false) {  		db.CreateDatabase ();  		DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  	else {  		var dbUpdater = db.CreateDatabaseSchemaUpdater ();  		var updated = false;  		if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version  		 {  			dbUpdater.AddColumn<TimeDataItem> ("Tracts");  			updated = true;  		}  		if (dbUpdater.DatabaseSchemaVersion < 3) {  			dbUpdater.AddColumn<TimeDataItem> ("Videos");  			updated = true;  		}  		if (updated) {  			dbUpdater.DatabaseSchemaVersion = APP_VERSION;  			dbUpdater.Execute ();  		}  	}  }  
Magic Number,MyTimeDatabaseLib,TimeDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\TimeDataInterface.cs,CheckDatabase,The following statement contains a magic number: if (db.DatabaseExists () == false) {  	db.CreateDatabase ();  	DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  	dbUpdater.DatabaseSchemaVersion = APP_VERSION;  	dbUpdater.Execute ();  }  else {  	var dbUpdater = db.CreateDatabaseSchemaUpdater ();  	var updated = false;  	if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version  	 {  		dbUpdater.AddColumn<TimeDataItem> ("Tracts");  		updated = true;  	}  	if (dbUpdater.DatabaseSchemaVersion < 3) {  		dbUpdater.AddColumn<TimeDataItem> ("Videos");  		updated = true;  	}  	if (updated) {  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  }  
Magic Number,MyTimeDatabaseLib,TimeDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\TimeDataInterface.cs,CheckDatabase,The following statement contains a magic number: if (db.DatabaseExists () == false) {  	db.CreateDatabase ();  	DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  	dbUpdater.DatabaseSchemaVersion = APP_VERSION;  	dbUpdater.Execute ();  }  else {  	var dbUpdater = db.CreateDatabaseSchemaUpdater ();  	var updated = false;  	if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version  	 {  		dbUpdater.AddColumn<TimeDataItem> ("Tracts");  		updated = true;  	}  	if (dbUpdater.DatabaseSchemaVersion < 3) {  		dbUpdater.AddColumn<TimeDataItem> ("Videos");  		updated = true;  	}  	if (updated) {  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  }  
Magic Number,MyTimeDatabaseLib,TimeDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\TimeDataInterface.cs,CheckDatabase,The following statement contains a magic number: if (dbUpdater.DatabaseSchemaVersion < 2)//update from 1.0 to 2.0 db version   {  	dbUpdater.AddColumn<TimeDataItem> ("Tracts");  	updated = true;  }  
Magic Number,MyTimeDatabaseLib,TimeDataInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\TimeDataInterface.cs,CheckDatabase,The following statement contains a magic number: if (dbUpdater.DatabaseSchemaVersion < 3) {  	dbUpdater.AddColumn<TimeDataItem> ("Videos");  	updated = true;  }  
Magic Number,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,CheckDatabase,The following statement contains a magic number: using (var db = new ReturnVisitDataContext (ReturnVisitDataContext.DBConnectionString)) {  	if (db.DatabaseExists () == false) {  		db.CreateDatabase ();  		DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  	}  	else {  		var dbUpdater = db.CreateDatabaseSchemaUpdater ();  		if (dbUpdater.DatabaseSchemaVersion < 2) {  			//update from 1.0 to 2.0 db version  			dbUpdater.AddColumn<ReturnVisitDataItem> ("Longitude");  			dbUpdater.AddColumn<ReturnVisitDataItem> ("Latitude");  			dbUpdater.AddColumn<ReturnVisitDataItem> ("LastVisitDate");  			dbUpdater.DatabaseSchemaVersion = APP_VERSION;  			dbUpdater.Execute ();  			var rvList = GetReturnVisits (SortOrder.DateNewestToOldest' -1);  			foreach (var r in rvList) {  				var x = r;  				if (r.LastVisitDate > SqlCeConstants.DateTimeMinValue) {  					r.LastVisitDate = GetLastVisitDate (ReturnVisitData.Copy (x));  				}  				UpdateReturnVisit (ref x);  			}  		}  	}  }  
Magic Number,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,CheckDatabase,The following statement contains a magic number: if (db.DatabaseExists () == false) {  	db.CreateDatabase ();  	DatabaseSchemaUpdater dbUpdater = db.CreateDatabaseSchemaUpdater ();  	dbUpdater.DatabaseSchemaVersion = APP_VERSION;  	dbUpdater.Execute ();  }  else {  	var dbUpdater = db.CreateDatabaseSchemaUpdater ();  	if (dbUpdater.DatabaseSchemaVersion < 2) {  		//update from 1.0 to 2.0 db version  		dbUpdater.AddColumn<ReturnVisitDataItem> ("Longitude");  		dbUpdater.AddColumn<ReturnVisitDataItem> ("Latitude");  		dbUpdater.AddColumn<ReturnVisitDataItem> ("LastVisitDate");  		dbUpdater.DatabaseSchemaVersion = APP_VERSION;  		dbUpdater.Execute ();  		var rvList = GetReturnVisits (SortOrder.DateNewestToOldest' -1);  		foreach (var r in rvList) {  			var x = r;  			if (r.LastVisitDate > SqlCeConstants.DateTimeMinValue) {  				r.LastVisitDate = GetLastVisitDate (ReturnVisitData.Copy (x));  			}  			UpdateReturnVisit (ref x);  		}  	}  }  
Magic Number,MyTimeDatabaseLib,ReturnVisitsInterface,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,CheckDatabase,The following statement contains a magic number: if (dbUpdater.DatabaseSchemaVersion < 2) {  	//update from 1.0 to 2.0 db version  	dbUpdater.AddColumn<ReturnVisitDataItem> ("Longitude");  	dbUpdater.AddColumn<ReturnVisitDataItem> ("Latitude");  	dbUpdater.AddColumn<ReturnVisitDataItem> ("LastVisitDate");  	dbUpdater.DatabaseSchemaVersion = APP_VERSION;  	dbUpdater.Execute ();  	var rvList = GetReturnVisits (SortOrder.DateNewestToOldest' -1);  	foreach (var r in rvList) {  		var x = r;  		if (r.LastVisitDate > SqlCeConstants.DateTimeMinValue) {  			r.LastVisitDate = GetLastVisitDate (ReturnVisitData.Copy (x));  		}  		UpdateReturnVisit (ref x);  	}  }  
Magic Number,MyTimeDatabaseLib,ReturnVisitData,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,GetCountryCode,The following statement contains a magic number: switch (country.ToLower ()) {  case "":  	country = CultureInfo.CurrentCulture.Name.Remove (0' 3).ToLower ();  	break;  case "thailand":  	country = "th";  	break;  case "italy":  case "italia":  case "it":  	country = "it";  	break;  case "england":  case "great britian":  case "britian":  case "gb":  case "uk":  case "u.k.":  case "united kingdom":  	country = "gb";  	break;  case "usa":  case "us":  case "u.s.a.":  case "united states":  case "united states of america":  case "america":  	country = "us";  	break;  default:  	country = CultureInfo.CurrentCulture.Name.Remove (0' 3).ToLower ();  	break;  }  
Magic Number,MyTimeDatabaseLib,ReturnVisitData,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,GetCountryCode,The following statement contains a magic number: switch (country.ToLower ()) {  case "":  	country = CultureInfo.CurrentCulture.Name.Remove (0' 3).ToLower ();  	break;  case "thailand":  	country = "th";  	break;  case "italy":  case "italia":  case "it":  	country = "it";  	break;  case "england":  case "great britian":  case "britian":  case "gb":  case "uk":  case "u.k.":  case "united kingdom":  	country = "gb";  	break;  case "usa":  case "us":  case "u.s.a.":  case "united states":  case "united states of america":  case "america":  	country = "us";  	break;  default:  	country = CultureInfo.CurrentCulture.Name.Remove (0' 3).ToLower ();  	break;  }  
Magic Number,MyTimeDatabaseLib,ReturnVisitData,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,GetCountryCode,The following statement contains a magic number: country = CultureInfo.CurrentCulture.Name.Remove (0' 3).ToLower ();  
Magic Number,MyTimeDatabaseLib,ReturnVisitData,C:\repos\Square-dot-HipToBe_FieldService\MyTime\MyTimeDatabaseLib\ReturnVisitsInterface.cs,GetCountryCode,The following statement contains a magic number: country = CultureInfo.CurrentCulture.Name.Remove (0' 3).ToLower ();  
