Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Innovatian.Configuration,CommandLineConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\CommandLineConfigurationSource.cs,AddSwitch,Cyclomatic complexity of the method is 8
Complex Method,Innovatian.Configuration,RegistryConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,GetSection,Cyclomatic complexity of the method is 10
Virtual Method Call from Constructor,Innovatian.Configuration,SettingsBase,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\SettingsBase.cs,SettingsBase,The constructor "SettingsBase" calls a virtual method "Initialize".
Virtual Method Call from Constructor,Innovatian.Configuration,XmlConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\XmlConfigurationSource.cs,XmlConfigurationSource,The constructor "XmlConfigurationSource" calls a virtual method "Parse".
Magic Number,Innovatian.Configuration,CommandLineConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\CommandLineConfigurationSource.cs,AddSwitch,The following statement contains a magic number: shortName.Length > 2
Magic Number,Innovatian.Configuration,ConfigurationSection,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\ConfigurationSection.cs,GetHashCode,The following statement contains a magic number: return ( ( _settings != null                                 ? _settings.GetHashCode()                                 : 0 ) * 397 ) ^ ( Name != null                                                       ? Name.GetHashCode()                                                       : 0 );
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: int endIndex = result.IndexOf( "}"' startIndex + 2' StringComparison.OrdinalIgnoreCase );
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: string search = result.Substring( startIndex + 2' endIndex - ( startIndex + 2 ) );
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: string search = result.Substring( startIndex + 2' endIndex - ( startIndex + 2 ) );
Magic Number,Innovatian.Configuration,IniConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetSection,The following statement contains a magic number: string sectionName = workingLine.Substring( 1' workingLine.Length - 2 ).Trim();
Magic Number,Innovatian.Configuration,IniConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetSection,The following statement contains a magic number: string value = (pair.Length == 2                                  ? pair[1].Trim()                                  : String.Join(Delimiter' pair.Skip(1).ToArray()));
Missing Default,Innovatian.Configuration,RegistryConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,GetSection,The following switch statement is missing a default case: switch ( key.GetValueKind( valueName ) )                      {                          case RegistryValueKind.Binary:                              section.Set( name' (byte[]) value );                              break;                          case RegistryValueKind.DWord:                              section.Set( name' (int) value );                              break;                          case RegistryValueKind.ExpandString:                              section.Set( name' (string) value );                              break;                          case RegistryValueKind.MultiString:                              section.Set( name' (string[]) value );                              break;                          case RegistryValueKind.QWord:                              section.Set( name' (long) value );                              break;                          case RegistryValueKind.String:                              section.Set( name' (string) value );                              break;                          case RegistryValueKind.Unknown:                              section.Set( name' value );                              break;                      }
Missing Default,Innovatian.Configuration,RegistryConfigurationSource,D:\research\architectureSmells\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,OpenRoot,The following switch statement is missing a default case: switch ( pathParts[0].ToUpper() )              {                  case "HKEY_CLASSES_ROOT":                      currentKey = Registry.ClassesRoot;                      break;                  case "HKEY_CURRENT_CONFIG":                      currentKey = Registry.CurrentConfig;                      break;                  case "HKEY_CURRENT_USER":                      currentKey = Registry.CurrentUser;                      break;                  case "HKEY_DYN_DATA":                      currentKey = Registry.DynData;                      break;                  case "HKEY_LOCAL_MACHINE":                      currentKey = Registry.LocalMachine;                      break;                  case "HKEY_PERFORMANCE_DATA":                      currentKey = Registry.PerformanceData;                      break;                  case "HKEY_USERS":                      currentKey = Registry.Users;                      break;              }
