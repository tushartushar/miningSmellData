Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Innovatian.Configuration,AbstractFileConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractFileConfigurationSource.cs,Save,Cyclomatic complexity of the method is 9
Complex Method,Innovatian.Configuration,CommandLineConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\CommandLineConfigurationSource.cs,AddSwitch,Cyclomatic complexity of the method is 8
Complex Method,Innovatian.Configuration,RegistryConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,GetSection,Cyclomatic complexity of the method is 26
Complex Method,Innovatian.Configuration,RegistryConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,OpenRoot,Cyclomatic complexity of the method is 21
Complex Method,Innovatian.Configuration,RegistryConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,SaveValue,Cyclomatic complexity of the method is 12
Long Parameter List,Innovatian.Configuration,DotNetConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\DotNetConfigurationSource.cs,GetSettings,The method has 5 parameters.
Long Parameter List,Innovatian.Configuration,XmlConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\XmlConfigurationSource.cs,Process,The method has 5 parameters.
Long Statement,Innovatian.Configuration,AbstractConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,ExpandValue,The length of the statement  "	string result = (lookup.Length > 1) ? GetResultFromExternalSection (lookup [0]' lookup [1]) : GetResultFromCurrentSection (search' section); " is 140.
Long Statement,Innovatian.Configuration,AbstractConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,GetResultFromCurrentSection,The length of the statement  "		throw new ArgumentException (string.Format (Text.Culture' Text.Key0NotFoundInSection1DuringExpansion' keyName' section.Name)' keyName); " is 135.
Long Statement,Innovatian.Configuration,DotNetConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\DotNetConfigurationSource.cs,GetSectionsImpl,The length of the statement  "	return document.Root.Descendants ("configSections").Descendants ("section").Select (section => (section.Attribute ("name") ?? new XAttribute ("name"' string.Empty)).Value); " is 172.
Long Statement,Innovatian.Configuration,DotNetConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\DotNetConfigurationSource.cs,ToXml,The length of the statement  "	select new XElement ("section"' new XAttribute ("name"' section.Name)' new XAttribute ("type"' "System.Configuration.NameValueSectionHandler")))' from section in sections " is 170.
Long Statement,Innovatian.Configuration,IniConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetFileSections,The length of the statement  "	List<string> sectionHeaders = lines.Where (line => line.StartsWith ("["' StringComparison.OrdinalIgnoreCase) && line.EndsWith ("]"' StringComparison.OrdinalIgnoreCase)).ToList (); " is 179.
Long Statement,Innovatian.Configuration,IniConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetSection,The length of the statement  "		if (workingLine.StartsWith ("["' StringComparison.OrdinalIgnoreCase) && workingLine.EndsWith ("]"' StringComparison.OrdinalIgnoreCase)) { " is 137.
Long Statement,Innovatian.Configuration,IsoStorageConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IsoStorageConfigurationSource.cs,Save,The length of the statement  "		using (var isoStream = new IsolatedStorageFileStream (_fileName' FileMode.Truncate' FileAccess.Write' FileShare.Read' isolatedStorageFile)) { " is 141.
Long Statement,Innovatian.Configuration,IsoStorageConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IsoStorageConfigurationSource.cs,Load,The length of the statement  "		using (var isoStream = new IsolatedStorageFileStream (_fileName' FileMode.OpenOrCreate' FileAccess.ReadWrite' FileShare.Read' isolatedStorageFile)) { " is 149.
Long Statement,Innovatian.Configuration,RegistryConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,SaveValue,The length of the statement  "		string keyName = string.Equals (pair.Key' DefaultKeyName' StringComparison.OrdinalIgnoreCase) ? string.Empty : pair.Key; " is 120.
Long Statement,Innovatian.Configuration,XmlConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\XmlConfigurationSource.cs,Process,The length of the statement  "	var settings = document.Descendants ("Section").SelectMany (section => section.Descendants ("Key")' (section' setting) =>  { " is 124.
Virtual Method Call from Constructor,Innovatian.Configuration,SettingsBase,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\SettingsBase.cs,SettingsBase,The constructor "SettingsBase" calls a virtual method "Initialize".
Virtual Method Call from Constructor,Innovatian.Configuration,XmlConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\XmlConfigurationSource.cs,XmlConfigurationSource,The constructor "XmlConfigurationSource" calls a virtual method "Parse".
Magic Number,Innovatian.Configuration,CommandLineConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\CommandLineConfigurationSource.cs,AddSwitch,The following statement contains a magic number: if (shortName.Length > 2) {  	throw new ArgumentException (Text.InvalidShortNameLength);  }  
Magic Number,Innovatian.Configuration,ConfigurationSection,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\ConfigurationSection.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((_settings != null ? _settings.GetHashCode () : 0) * 397) ^ (Name != null ? Name.GetHashCode () : 0);  }  
Magic Number,Innovatian.Configuration,ConfigurationSection,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\ConfigurationSection.cs,GetHashCode,The following statement contains a magic number: return ((_settings != null ? _settings.GetHashCode () : 0) * 397) ^ (Name != null ? Name.GetHashCode () : 0);  
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: while (true) {  	int startIndex = result.IndexOf ("${"' 0' StringComparison.OrdinalIgnoreCase);  	if (startIndex == -1) {  		break;  	}  	int endIndex = result.IndexOf ("}"' startIndex + 2' StringComparison.OrdinalIgnoreCase);  	if (endIndex == -1) {  		break;  	}  	string search = result.Substring (startIndex + 2' endIndex - (startIndex + 2));  	if (string.Equals (search' key' StringComparison.OrdinalIgnoreCase)) {  		// Prevent infinite recursion  		throw new ArgumentException (string.Format (Text.Culture' Text.KeyCannotExpandOnSelf0' key));  	}  	string replace = ExpandValue (section' search);  	result = result.Replace ("${" + search + "}"' replace);  }  
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: while (true) {  	int startIndex = result.IndexOf ("${"' 0' StringComparison.OrdinalIgnoreCase);  	if (startIndex == -1) {  		break;  	}  	int endIndex = result.IndexOf ("}"' startIndex + 2' StringComparison.OrdinalIgnoreCase);  	if (endIndex == -1) {  		break;  	}  	string search = result.Substring (startIndex + 2' endIndex - (startIndex + 2));  	if (string.Equals (search' key' StringComparison.OrdinalIgnoreCase)) {  		// Prevent infinite recursion  		throw new ArgumentException (string.Format (Text.Culture' Text.KeyCannotExpandOnSelf0' key));  	}  	string replace = ExpandValue (section' search);  	result = result.Replace ("${" + search + "}"' replace);  }  
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: while (true) {  	int startIndex = result.IndexOf ("${"' 0' StringComparison.OrdinalIgnoreCase);  	if (startIndex == -1) {  		break;  	}  	int endIndex = result.IndexOf ("}"' startIndex + 2' StringComparison.OrdinalIgnoreCase);  	if (endIndex == -1) {  		break;  	}  	string search = result.Substring (startIndex + 2' endIndex - (startIndex + 2));  	if (string.Equals (search' key' StringComparison.OrdinalIgnoreCase)) {  		// Prevent infinite recursion  		throw new ArgumentException (string.Format (Text.Culture' Text.KeyCannotExpandOnSelf0' key));  	}  	string replace = ExpandValue (section' search);  	result = result.Replace ("${" + search + "}"' replace);  }  
Magic Number,Innovatian.Configuration,IniConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetSection,The following statement contains a magic number: foreach (string line in lines) {  	string workingLine = line;  	if (line.TrimStart ().StartsWith (Comment))  		continue;  	if (!SingleLineComments && line.Contains (Comment)) {  		workingLine = line.Substring (0' line.IndexOf (Comment' StringComparison.OrdinalIgnoreCase));  	}  	if (workingLine.StartsWith ("["' StringComparison.OrdinalIgnoreCase) && workingLine.EndsWith ("]"' StringComparison.OrdinalIgnoreCase)) {  		string sectionName = workingLine.Substring (1' workingLine.Length - 2).Trim ();  		if (string.IsNullOrEmpty (sectionName)) {  			throw new InvalidOperationException (Text.NoEmptySectionNames);  		}  		section.Name = sectionName;  		continue;  	}  	string[] pair = workingLine.Split (new[] {  		Delimiter  	}' StringSplitOptions.None);  	string key = pair [0].Trim ();  	string value = (pair.Length == 2 ? pair [1].Trim () : String.Join (Delimiter' pair.Skip (1).ToArray ()));  	if (string.IsNullOrEmpty (key)) {  		continue;  	}  	section.Set (key' value);  }  
Magic Number,Innovatian.Configuration,IniConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetSection,The following statement contains a magic number: foreach (string line in lines) {  	string workingLine = line;  	if (line.TrimStart ().StartsWith (Comment))  		continue;  	if (!SingleLineComments && line.Contains (Comment)) {  		workingLine = line.Substring (0' line.IndexOf (Comment' StringComparison.OrdinalIgnoreCase));  	}  	if (workingLine.StartsWith ("["' StringComparison.OrdinalIgnoreCase) && workingLine.EndsWith ("]"' StringComparison.OrdinalIgnoreCase)) {  		string sectionName = workingLine.Substring (1' workingLine.Length - 2).Trim ();  		if (string.IsNullOrEmpty (sectionName)) {  			throw new InvalidOperationException (Text.NoEmptySectionNames);  		}  		section.Name = sectionName;  		continue;  	}  	string[] pair = workingLine.Split (new[] {  		Delimiter  	}' StringSplitOptions.None);  	string key = pair [0].Trim ();  	string value = (pair.Length == 2 ? pair [1].Trim () : String.Join (Delimiter' pair.Skip (1).ToArray ()));  	if (string.IsNullOrEmpty (key)) {  		continue;  	}  	section.Set (key' value);  }  
Magic Number,Innovatian.Configuration,IniConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetSection,The following statement contains a magic number: if (workingLine.StartsWith ("["' StringComparison.OrdinalIgnoreCase) && workingLine.EndsWith ("]"' StringComparison.OrdinalIgnoreCase)) {  	string sectionName = workingLine.Substring (1' workingLine.Length - 2).Trim ();  	if (string.IsNullOrEmpty (sectionName)) {  		throw new InvalidOperationException (Text.NoEmptySectionNames);  	}  	section.Name = sectionName;  	continue;  }  
Missing Default,Innovatian.Configuration,RegistryConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,GetSection,The following switch statement is missing a default case: switch (key.GetValueKind (valueName)) {  case RegistryValueKind.Binary:  	section.Set (name' (byte[])value);  	break;  case RegistryValueKind.DWord:  	section.Set (name' (int)value);  	break;  case RegistryValueKind.ExpandString:  	section.Set (name' (string)value);  	break;  case RegistryValueKind.MultiString:  	section.Set (name' (string[])value);  	break;  case RegistryValueKind.QWord:  	section.Set (name' (long)value);  	break;  case RegistryValueKind.String:  	section.Set (name' (string)value);  	break;  case RegistryValueKind.Unknown:  	section.Set (name' value);  	break;  }  
Missing Default,Innovatian.Configuration,RegistryConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,OpenRoot,The following switch statement is missing a default case: switch (pathParts [0].ToUpper ()) {  case "HKEY_CLASSES_ROOT":  	currentKey = Registry.ClassesRoot;  	break;  case "HKEY_CURRENT_CONFIG":  	currentKey = Registry.CurrentConfig;  	break;  case "HKEY_CURRENT_USER":  	currentKey = Registry.CurrentUser;  	break;  case "HKEY_DYN_DATA":  	currentKey = Registry.DynData;  	break;  case "HKEY_LOCAL_MACHINE":  	currentKey = Registry.LocalMachine;  	break;  case "HKEY_PERFORMANCE_DATA":  	currentKey = Registry.PerformanceData;  	break;  case "HKEY_USERS":  	currentKey = Registry.Users;  	break;  }  
