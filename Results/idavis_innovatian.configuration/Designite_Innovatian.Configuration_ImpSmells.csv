Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Innovatian.Configuration,CommandLineConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\CommandLineConfigurationSource.cs,AddSwitch,Cyclomatic complexity of the method is 8
Virtual Method Call from Constructor,Innovatian.Configuration,SettingsBase,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\SettingsBase.cs,SettingsBase,The constructor "SettingsBase" calls a virtual method "Initialize".
Virtual Method Call from Constructor,Innovatian.Configuration,XmlConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\XmlConfigurationSource.cs,XmlConfigurationSource,The constructor "XmlConfigurationSource" calls a virtual method "Parse".
Magic Number,Innovatian.Configuration,CommandLineConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\CommandLineConfigurationSource.cs,AddSwitch,The following statement contains a magic number: if ( shortName.Length > 2 )              {                  throw new ArgumentException( Text.InvalidShortNameLength );              }
Magic Number,Innovatian.Configuration,ConfigurationSection,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\ConfigurationSection.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ( ( _settings != null                                 ? _settings.GetHashCode()                                 : 0 ) * 397 ) ^ ( Name != null                                                       ? Name.GetHashCode()                                                       : 0 );              }
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: while ( true )              {                  int startIndex = result.IndexOf( "${"' 0' StringComparison.OrdinalIgnoreCase );                  if ( startIndex == -1 )                  {                      break;                  }                    int endIndex = result.IndexOf( "}"' startIndex + 2' StringComparison.OrdinalIgnoreCase );                  if ( endIndex == -1 )                  {                      break;                  }                    string search = result.Substring( startIndex + 2' endIndex - ( startIndex + 2 ) );                    if ( string.Equals( search' key' StringComparison.OrdinalIgnoreCase ) )                  {                      // Prevent infinite recursion                      throw new ArgumentException( string.Format( Text.Culture' Text.KeyCannotExpandOnSelf0' key ) );                  }                    string replace = ExpandValue( section' search );                    result = result.Replace( "${" + search + "}"' replace );              }
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: while ( true )              {                  int startIndex = result.IndexOf( "${"' 0' StringComparison.OrdinalIgnoreCase );                  if ( startIndex == -1 )                  {                      break;                  }                    int endIndex = result.IndexOf( "}"' startIndex + 2' StringComparison.OrdinalIgnoreCase );                  if ( endIndex == -1 )                  {                      break;                  }                    string search = result.Substring( startIndex + 2' endIndex - ( startIndex + 2 ) );                    if ( string.Equals( search' key' StringComparison.OrdinalIgnoreCase ) )                  {                      // Prevent infinite recursion                      throw new ArgumentException( string.Format( Text.Culture' Text.KeyCannotExpandOnSelf0' key ) );                  }                    string replace = ExpandValue( section' search );                    result = result.Replace( "${" + search + "}"' replace );              }
Magic Number,Innovatian.Configuration,AbstractConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\AbstractConfigurationSource.cs,Expand,The following statement contains a magic number: while ( true )              {                  int startIndex = result.IndexOf( "${"' 0' StringComparison.OrdinalIgnoreCase );                  if ( startIndex == -1 )                  {                      break;                  }                    int endIndex = result.IndexOf( "}"' startIndex + 2' StringComparison.OrdinalIgnoreCase );                  if ( endIndex == -1 )                  {                      break;                  }                    string search = result.Substring( startIndex + 2' endIndex - ( startIndex + 2 ) );                    if ( string.Equals( search' key' StringComparison.OrdinalIgnoreCase ) )                  {                      // Prevent infinite recursion                      throw new ArgumentException( string.Format( Text.Culture' Text.KeyCannotExpandOnSelf0' key ) );                  }                    string replace = ExpandValue( section' search );                    result = result.Replace( "${" + search + "}"' replace );              }
Magic Number,Innovatian.Configuration,IniConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetSection,The following statement contains a magic number: foreach ( string line in lines )              {                  string workingLine = line;                    if ( line.TrimStart().StartsWith( Comment ) ) continue;                    if (!SingleLineComments && line.Contains( Comment ) )                  {                      workingLine = line.Substring( 0' line.IndexOf( Comment' StringComparison.OrdinalIgnoreCase ) );                  }                  if ( workingLine.StartsWith( "["' StringComparison.OrdinalIgnoreCase ) &&                       workingLine.EndsWith( "]"' StringComparison.OrdinalIgnoreCase ) )                  {                      string sectionName = workingLine.Substring( 1' workingLine.Length - 2 ).Trim();                      if ( string.IsNullOrEmpty( sectionName ) )                      {                          throw new InvalidOperationException( Text.NoEmptySectionNames );                      }                      section.Name = sectionName;                      continue;                  }                    string[] pair = workingLine.Split( new[] {Delimiter}' StringSplitOptions.None );                  string key = pair[0].Trim();                  string value = (pair.Length == 2                                  ? pair[1].Trim()                                  : String.Join(Delimiter' pair.Skip(1).ToArray()));                  if ( string.IsNullOrEmpty( key ) )                  {                      continue;                  }                  section.Set( key' value );              }
Magic Number,Innovatian.Configuration,IniConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\IniConfigurationSource.cs,GetSection,The following statement contains a magic number: foreach ( string line in lines )              {                  string workingLine = line;                    if ( line.TrimStart().StartsWith( Comment ) ) continue;                    if (!SingleLineComments && line.Contains( Comment ) )                  {                      workingLine = line.Substring( 0' line.IndexOf( Comment' StringComparison.OrdinalIgnoreCase ) );                  }                  if ( workingLine.StartsWith( "["' StringComparison.OrdinalIgnoreCase ) &&                       workingLine.EndsWith( "]"' StringComparison.OrdinalIgnoreCase ) )                  {                      string sectionName = workingLine.Substring( 1' workingLine.Length - 2 ).Trim();                      if ( string.IsNullOrEmpty( sectionName ) )                      {                          throw new InvalidOperationException( Text.NoEmptySectionNames );                      }                      section.Name = sectionName;                      continue;                  }                    string[] pair = workingLine.Split( new[] {Delimiter}' StringSplitOptions.None );                  string key = pair[0].Trim();                  string value = (pair.Length == 2                                  ? pair[1].Trim()                                  : String.Join(Delimiter' pair.Skip(1).ToArray()));                  if ( string.IsNullOrEmpty( key ) )                  {                      continue;                  }                  section.Set( key' value );              }
Missing Default,Innovatian.Configuration,RegistryConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,GetSection,The following switch statement is missing a default case: switch ( key.GetValueKind( valueName ) )                      {                          case RegistryValueKind.Binary:                              section.Set( name' (byte[]) value );                              break;                          case RegistryValueKind.DWord:                              section.Set( name' (int) value );                              break;                          case RegistryValueKind.ExpandString:                              section.Set( name' (string) value );                              break;                          case RegistryValueKind.MultiString:                              section.Set( name' (string[]) value );                              break;                          case RegistryValueKind.QWord:                              section.Set( name' (long) value );                              break;                          case RegistryValueKind.String:                              section.Set( name' (string) value );                              break;                          case RegistryValueKind.Unknown:                              section.Set( name' value );                              break;                      }
Missing Default,Innovatian.Configuration,RegistryConfigurationSource,C:\repos\idavis_innovatian.configuration\source\Innovatian.Configuration\RegistryConfigurationSource.cs,OpenRoot,The following switch statement is missing a default case: switch ( pathParts[0].ToUpper() )              {                  case "HKEY_CLASSES_ROOT":                      currentKey = Registry.ClassesRoot;                      break;                  case "HKEY_CURRENT_CONFIG":                      currentKey = Registry.CurrentConfig;                      break;                  case "HKEY_CURRENT_USER":                      currentKey = Registry.CurrentUser;                      break;                  case "HKEY_DYN_DATA":                      currentKey = Registry.DynData;                      break;                  case "HKEY_LOCAL_MACHINE":                      currentKey = Registry.LocalMachine;                      break;                  case "HKEY_PERFORMANCE_DATA":                      currentKey = Registry.PerformanceData;                      break;                  case "HKEY_USERS":                      currentKey = Registry.Users;                      break;              }
