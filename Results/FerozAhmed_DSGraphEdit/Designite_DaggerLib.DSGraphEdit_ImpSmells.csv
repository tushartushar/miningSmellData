Implementation smell,Namespace,Class,File,Method,Description
Long Method,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The method has 168 lines of code.
Long Method,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,DSFilterNodeUI_DaggerNodeAttached,The method has 102 lines of code.
Complex Method,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,Cyclomatic complexity of the method is 29
Complex Method,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,Cyclomatic complexity of the method is 25
Complex Method,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,Cyclomatic complexity of the method is 27
Complex Method,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,Cyclomatic complexity of the method is 27
Complex Method,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,Cyclomatic complexity of the method is 22
Complex Method,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,Cyclomatic complexity of the method is 26
Complex Method,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,Cyclomatic complexity of the method is 25
Complex Method,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,SyncGraphs,Cyclomatic complexity of the method is 8
Complex Method,DaggerLib.DSGraphEdit,DSFilterNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNode.cs,DSFilterNode,Cyclomatic complexity of the method is 10
Complex Method,DaggerLib.DSGraphEdit,DSFilterNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNode.cs,SyncPins,Cyclomatic complexity of the method is 15
Complex Method,DaggerLib.DSGraphEdit,DSFilterNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNode.cs,GetPins,Cyclomatic complexity of the method is 9
Complex Method,DaggerLib.DSGraphEdit,DSFilterNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNode.cs,CloseInterfaces,Cyclomatic complexity of the method is 9
Complex Method,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,DSFilterNodeUI_DaggerNodeAttached,Cyclomatic complexity of the method is 13
Complex Method,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,SyncPinPropertyPages,Cyclomatic complexity of the method is 9
Complex Method,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,SetDMOParams,Cyclomatic complexity of the method is 20
Complex Method,DaggerLib.DSGraphEdit,BaseFilterCategory,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\BaseFilterCategory.cs,SyncTreeNodes,Cyclomatic complexity of the method is 8
Complex Method,DaggerLib.DSGraphEdit,DSFilterTreeViewNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\DSFilterTreeViewNode.cs,DSFilterTreeViewNode,Cyclomatic complexity of the method is 25
Complex Method,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,DSGraphEditPanel,Cyclomatic complexity of the method is 12
Complex Method,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,Graph_BeforePinsDisconnected,Cyclomatic complexity of the method is 8
Complex Method,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,Cyclomatic complexity of the method is 18
Complex Method,DaggerLib.DSGraphEdit,InterfaceScanner,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\InterfaceScanner.cs,Scan,Cyclomatic complexity of the method is 14
Complex Method,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,Cyclomatic complexity of the method is 24
Complex Method,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,Cyclomatic complexity of the method is 17
Complex Method,DaggerLib.DSGraphEdit,VideoInternalWindow,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\VideoInternalWindow.cs,InitVideoWindow,Cyclomatic complexity of the method is 8
Complex Method,DaggerLib.DSGraphEdit,VideoInternalWindow,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\VideoInternalWindow.cs,WndProc,Cyclomatic complexity of the method is 8
Long Parameter List,DaggerLib.DSGraphEdit,DSFiltersPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFiltersPanel.cs,FindFilterRange,The method has 5 parameters.
Long Parameter List,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,DrawPinName,The method has 5 parameters.
Long Parameter List,DaggerLib.DSGraphEdit,DaggerDSUtils,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\Utils.cs,OleCreatePropertyFrame,The method has 11 parameters.
Long Parameter List,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,ConnectFilters,The method has 6 parameters.
Long Parameter List,DirectShowLib.Utils,IStorage,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,CreateStream,The method has 5 parameters.
Long Parameter List,DirectShowLib.Utils,IStorage,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,OpenStream,The method has 5 parameters.
Long Parameter List,DirectShowLib.Utils,IStorage,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,CreateStorage,The method has 5 parameters.
Long Parameter List,DirectShowLib.Utils,IStorage,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,OpenStorage,The method has 6 parameters.
Long Parameter List,DirectShowLib.Utils,NativeMethods,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,OleCreatePropertyFrame,The method has 11 parameters.
Long Parameter List,DirectShowLib.Utils,NativeMethods,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,StgOpenStorage,The method has 6 parameters.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The length of the statement  "		brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor); " is 174.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The length of the statement  "		brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor)); " is 182.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The length of the statement  "		brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor); " is 176.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The length of the statement  "		brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor)); " is 184.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The length of the statement  "		brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor); " is 174.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The length of the statement  "		brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor)); " is 182.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The length of the statement  "		brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor); " is 176.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The length of the statement  "		brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor)); " is 184.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The length of the statement  "			gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1); " is 130.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The length of the statement  "			gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom); " is 122.
Long Statement,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The length of the statement  "			gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2); " is 123.
Long Statement,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,colorTrackBar1_ValueChanged,The length of the statement  "	float val = (((float)colorTrackBar1.Value / 1000F) * ((float)numericUpDown1.Maximum - (float)numericUpDown1.Minimum)) + (float)numericUpDown1.Minimum; " is 150.
Long Statement,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,numericUpDown1_ValueChanged,The length of the statement  "		colorTrackBar1.Value = (int)((((0 - numericUpDown1.Minimum) + numericUpDown1.Value) / ((0 - numericUpDown1.Minimum) + numericUpDown1.Maximum)) * 1000); " is 151.
Long Statement,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(DMONumericalParam)); " is 138.
Long Statement,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The length of the statement  "	this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Long Statement,DaggerLib.DSGraphEdit,DSFiltersPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFiltersPanel.cs,FindFilter,The length of the statement  "	DSFilterTreeViewNode found = FindFilterRange (searchText' startparent' startchild + 1' dsFilterTreeView1.Nodes.Count - 1' dsFilterTreeView1.Nodes [dsFilterTreeView1.Nodes.Count - 1].Nodes.Count - 1); " is 199.
Long Statement,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(DSDaggerUIGraph)); " is 136.
Long Statement,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,InitializeComponent,The length of the statement  "	this._pinImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject ("_pinImages.ImageStream"))); " is 121.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(DSFilterNodeUI)); " is 135.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this._expandPropertiesButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 151.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this._expandPropertiesButton.StateChanged += new DaggerLib.UI.Windows.SimpleImageButton.StateChangedEventHandler (this._expandPropertiesButton_StateChanged); " is 157.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this._clockButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64))))); " is 137.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this._detachVideoWindowButton.ButtonImage = ((System.Drawing.Image)(resources.GetObject ("_detachVideoWindowButton.ButtonImage"))); " is 131.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this._detachVideoWindowButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))); " is 176.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this._closeButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 140.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this._propertiesImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject ("_propertiesImageList.ImageStream"))); " is 141.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this.dvdControlbutton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))); " is 168.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this.dvdControlContextMenuStrip.Opening += new System.ComponentModel.CancelEventHandler (this.dvdControlContextMenuStrip_Opening); " is 130.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The length of the statement  "	this.CaptionColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(192))))' ((int)(((byte)(192))))); " is 121.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,chaptermenuitem_Click,The length of the statement  "			int hr = _videoWindow.DVDControl.PlayChapterInTitle (pair.Title' pair.Chapter' DvdCmdFlags.Block | DvdCmdFlags.Flush' out icmd); " is 128.
Long Statement,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,OnPaintBackground,The length of the statement  "	using (Brush br = new LinearGradientBrush (ClientRectangle' IsFocused ? CaptionColor : this.CaptionColorUnfocused' BackColor' LinearGradientMode.Vertical)) { " is 157.
Long Statement,DaggerLib.DSGraphEdit,DSFilterTreeView,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\DSFilterTreeView.cs,SyncFilters,The length of the statement  "	List<DsDevice> categories = new List<DsDevice> (DirectShowLib.DsDevice.GetDevicesOfCat (FilterCategory.ActiveMovieCategories)); " is 127.
Long Statement,DaggerLib.DSGraphEdit,PinPropertiesTextBox,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PinPropertiesTextBox.cs,ConnectionMediaTypeString,The length of the statement  "	string retval = "Major type:\t" + DsToString.MediaTypeToString (mtype.majorType) + "\r\n" + "Subtype type:\t" + this.MediaSubTypeToString (mtype.subType) + "\r\n" + "Format type:\t" + DsToString.MediaFormatTypeToString (mtype.formatType) + "\r\n"; " is 247.
Long Statement,DaggerLib.DSGraphEdit,PinPropertiesTextBox,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PinPropertiesTextBox.cs,VideoInfoFormatString,The length of the statement  "	return "\t\trcSrc " + vih.SrcRect.ToRectangle ().ToString () + "\r\n" + "\t\trcDest " + vih.TargetRect.ToRectangle ().ToString () + "\r\n"; " is 139.
Long Statement,DaggerLib.DSGraphEdit,PinPropertiesTextBox,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PinPropertiesTextBox.cs,VideoInfo2FormatString,The length of the statement  "	return "\t\tAspect Ratio: " + vih.PictAspectRatioX.ToString () + "x" + vih.PictAspectRatioY.ToString () + "\r\n" + "\t\tInterlace Format: " + vih.InterlaceFlags.ToString () + "\r\n" + "\t\trcSrc " + vih.SrcRect.ToRectangle ().ToString () + "\r\n" + "\t\trcDest " + vih.TargetRect.ToRectangle ().ToString () + "\r\n" + "\t\tCtrlFlags " + vih.ControlFlags.ToString () + "\r\n"; " is 375.
Long Statement,DaggerLib.DSGraphEdit,PinPropertiesTextBox,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PinPropertiesTextBox.cs,WaveFormatExString,The length of the statement  "	return "\t\t" + wfex.nSamplesPerSec.ToString () + " KHz \r\n" + "\t\t" + wfex.wBitsPerSample.ToString () + " bit \r\n" + "\t\t" + wfex.nChannels.ToString () + " channels \r\n"; " is 176.
Long Statement,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,dsDaggerUIGraph1_ControlAdded,The length of the statement  "	DSFilterNodeUI node = (sender as DSDaggerUIGraph).Controls [(sender as DSDaggerUIGraph).Controls.Count - 1] as DSFilterNodeUI; " is 126.
Long Statement,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,Graph_BeforePinsDisconnected,The length of the statement  "	if ((output.ParentNode as DSFilterNode).GetPins ().Contains ((output as DSOutputPin)._pin) && (input.ParentNode as DSFilterNode).GetPins ().Contains ((input as DSInputPin)._pin)) { " is 180.
Long Statement,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,HandleGraphEvent,The length of the statement  "			hr = _mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' null' AMSeekingSeekingFlags.NoPositioning); " is 157.
Long Statement,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The length of the statement  "				_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning); " is 149.
Long Statement,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The length of the statement  "				_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning); " is 190.
Long Statement,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The length of the statement  "				_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning); " is 149.
Long Statement,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The length of the statement  "			_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning); " is 149.
Long Statement,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The length of the statement  "				g.FillRectangle (brush' x + (max * ((float)width / extent)) + 1' y' (extent * ((float)width / extent)) - (max * ((float)width / extent))' height); " is 146.
Long Statement,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The length of the statement  "			g.FillRectangle (brush' x + (min * ((float)width / extent))' y' (max * ((float)width / extent)) - (min * ((float)width / extent)) + 1' height); " is 143.
Long Statement,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The length of the statement  "		g.FillRectangle (brush' x + (min * ((float)width / extent))' y' (max * ((float)width / extent)) - (min * ((float)width / extent)) + 1' height); " is 143.
Long Statement,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The length of the statement  "	g.DrawLine (TimePen' x + (position * ((float)width / extent))' y' x + (position * ((float)width / extent))' y + height); " is 120.
Long Statement,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The length of the statement  "		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) { " is 126.
Long Statement,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The length of the statement  "		//if(this.doubleArrow && (e.X >= 2 - x + ( position * ((float)width / extent))) && (e.X < x + ( position * ((float)width / extent)) + 8) ) " is 138.
Long Statement,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The length of the statement  "			if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) { " is 126.
Long Statement,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The length of the statement  "			if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) { " is 136.
Long Statement,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,SaveGraphFile,The length of the statement  "		hr = NativeMethods.StgCreateDocfile (fileName' STGM.Create | STGM.Transacted | STGM.ReadWrite | STGM.ShareExclusive' 0' out storage); " is 133.
Long Statement,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,LoadGraphFile,The length of the statement  "		hr = NativeMethods.StgOpenStorage (fileName' null' STGM.Transacted | STGM.Read | STGM.ShareDenyWrite' IntPtr.Zero' 0' out storage); " is 131.
Long Statement,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,ShowPinFilterPropertyPage,The length of the statement  "		NativeMethods.OleCreatePropertyFrame (parent' 0' 0' pinname' objs.Length' objs' caGuid.cElems' caGuid.pElems' 0' 0' IntPtr.Zero); " is 129.
Long Statement,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,ShowFilterPropertyPage,The length of the statement  "			NativeMethods.OleCreatePropertyFrame (parent' 0' 0' filterInfo.achName' objs.Length' objs' caGuid.cElems' caGuid.pElems' 0' 0' IntPtr.Zero); " is 140.
Empty Catch Block,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,SearchItemsSingleton,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFiltersPanel.cs,SearchItemsSingleton,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,DSFilterNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNode.cs,GetPins,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,BaseFilterCategory,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\BaseFilterCategory.cs,SyncTreeNodes,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,DSFilterTreeViewNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\DSFilterTreeViewNode.cs,DSFilterTreeViewNode,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,URLItemsSingleton,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\URLDialog.cs,URLItemsSingleton,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,DSGraphEditPanel_Disposed,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,CloseInterfaces,The method has an empty catch block.
Empty Catch Block,DaggerLib.DSGraphEdit,VideoInternalWindow,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\VideoInternalWindow.cs,VideoInternalWindow_Paint,The method has an empty catch block.
Empty Catch Block,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,AddFilterByDevicePath,The method has an empty catch block.
Empty Catch Block,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,DisconnectAllPins,The method has an empty catch block.
Empty Catch Block,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,IsThisComObjectInstalled,The method has an empty catch block.
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,HighWord,The following statement contains a magic number: return (short)(value >> 16);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	Point CurPoint = new Point (e.X' e.Y);  	//Point CurPoint = new Point(LowWord((uint)m.LParam)' HighWord((uint)m.LParam));  	if (trackRect.Contains (CurPoint)) {  		if (!leftbuttonDown) {  			leftbuttonDown = true;  			switch (this.barOrientation) {  			case Orientations.Horizontal:  				mousestartPos = CurPoint.X - trackRect.X;  				break;  			case Orientations.Vertical:  				mousestartPos = CurPoint.Y - trackRect.Y;  				break;  			}  		}  	}  	else {  		int OffSet = 0;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		default:  			break;  		}  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			leftbuttonDown = true;  			OnScroll ();  			OnValueChanged ();  			leftbuttonDown = false;  		}  	}  	this.Focus ();  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	Point CurPoint = new Point (e.X' e.Y);  	//Point CurPoint = new Point(LowWord((uint)m.LParam)' HighWord((uint)m.LParam));  	if (trackRect.Contains (CurPoint)) {  		if (!leftbuttonDown) {  			leftbuttonDown = true;  			switch (this.barOrientation) {  			case Orientations.Horizontal:  				mousestartPos = CurPoint.X - trackRect.X;  				break;  			case Orientations.Vertical:  				mousestartPos = CurPoint.Y - trackRect.Y;  				break;  			}  		}  	}  	else {  		int OffSet = 0;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		default:  			break;  		}  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			leftbuttonDown = true;  			OnScroll ();  			OnValueChanged ();  			leftbuttonDown = false;  		}  	}  	this.Focus ();  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	Point CurPoint = new Point (e.X' e.Y);  	//Point CurPoint = new Point(LowWord((uint)m.LParam)' HighWord((uint)m.LParam));  	if (trackRect.Contains (CurPoint)) {  		if (!leftbuttonDown) {  			leftbuttonDown = true;  			switch (this.barOrientation) {  			case Orientations.Horizontal:  				mousestartPos = CurPoint.X - trackRect.X;  				break;  			case Orientations.Vertical:  				mousestartPos = CurPoint.Y - trackRect.Y;  				break;  			}  		}  	}  	else {  		int OffSet = 0;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		default:  			break;  		}  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			leftbuttonDown = true;  			OnScroll ();  			OnValueChanged ();  			leftbuttonDown = false;  		}  	}  	this.Focus ();  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	Point CurPoint = new Point (e.X' e.Y);  	//Point CurPoint = new Point(LowWord((uint)m.LParam)' HighWord((uint)m.LParam));  	if (trackRect.Contains (CurPoint)) {  		if (!leftbuttonDown) {  			leftbuttonDown = true;  			switch (this.barOrientation) {  			case Orientations.Horizontal:  				mousestartPos = CurPoint.X - trackRect.X;  				break;  			case Orientations.Vertical:  				mousestartPos = CurPoint.Y - trackRect.Y;  				break;  			}  		}  	}  	else {  		int OffSet = 0;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		default:  			break;  		}  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			leftbuttonDown = true;  			OnScroll ();  			OnValueChanged ();  			leftbuttonDown = false;  		}  	}  	this.Focus ();  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	Point CurPoint = new Point (e.X' e.Y);  	//Point CurPoint = new Point(LowWord((uint)m.LParam)' HighWord((uint)m.LParam));  	if (trackRect.Contains (CurPoint)) {  		if (!leftbuttonDown) {  			leftbuttonDown = true;  			switch (this.barOrientation) {  			case Orientations.Horizontal:  				mousestartPos = CurPoint.X - trackRect.X;  				break;  			case Orientations.Vertical:  				mousestartPos = CurPoint.Y - trackRect.Y;  				break;  			}  		}  	}  	else {  		int OffSet = 0;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		default:  			break;  		}  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			leftbuttonDown = true;  			OnScroll ();  			OnValueChanged ();  			leftbuttonDown = false;  		}  	}  	this.Focus ();  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	Point CurPoint = new Point (e.X' e.Y);  	//Point CurPoint = new Point(LowWord((uint)m.LParam)' HighWord((uint)m.LParam));  	if (trackRect.Contains (CurPoint)) {  		if (!leftbuttonDown) {  			leftbuttonDown = true;  			switch (this.barOrientation) {  			case Orientations.Horizontal:  				mousestartPos = CurPoint.X - trackRect.X;  				break;  			case Orientations.Vertical:  				mousestartPos = CurPoint.Y - trackRect.Y;  				break;  			}  		}  	}  	else {  		int OffSet = 0;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		default:  			break;  		}  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			leftbuttonDown = true;  			OnScroll ();  			OnValueChanged ();  			leftbuttonDown = false;  		}  	}  	this.Focus ();  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	Point CurPoint = new Point (e.X' e.Y);  	//Point CurPoint = new Point(LowWord((uint)m.LParam)' HighWord((uint)m.LParam));  	if (trackRect.Contains (CurPoint)) {  		if (!leftbuttonDown) {  			leftbuttonDown = true;  			switch (this.barOrientation) {  			case Orientations.Horizontal:  				mousestartPos = CurPoint.X - trackRect.X;  				break;  			case Orientations.Vertical:  				mousestartPos = CurPoint.Y - trackRect.Y;  				break;  			}  		}  	}  	else {  		int OffSet = 0;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		default:  			break;  		}  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			leftbuttonDown = true;  			OnScroll ();  			OnValueChanged ();  			leftbuttonDown = false;  		}  	}  	this.Focus ();  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	Point CurPoint = new Point (e.X' e.Y);  	//Point CurPoint = new Point(LowWord((uint)m.LParam)' HighWord((uint)m.LParam));  	if (trackRect.Contains (CurPoint)) {  		if (!leftbuttonDown) {  			leftbuttonDown = true;  			switch (this.barOrientation) {  			case Orientations.Horizontal:  				mousestartPos = CurPoint.X - trackRect.X;  				break;  			case Orientations.Vertical:  				mousestartPos = CurPoint.Y - trackRect.Y;  				break;  			}  		}  	}  	else {  		int OffSet = 0;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		default:  			break;  		}  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			leftbuttonDown = true;  			OnScroll ();  			OnValueChanged ();  			leftbuttonDown = false;  		}  	}  	this.Focus ();  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Contains (CurPoint)) {  	if (!leftbuttonDown) {  		leftbuttonDown = true;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			mousestartPos = CurPoint.X - trackRect.X;  			break;  		case Orientations.Vertical:  			mousestartPos = CurPoint.Y - trackRect.Y;  			break;  		}  	}  }  else {  	int OffSet = 0;  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	default:  		break;  	}  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		leftbuttonDown = true;  		OnScroll ();  		OnValueChanged ();  		leftbuttonDown = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Contains (CurPoint)) {  	if (!leftbuttonDown) {  		leftbuttonDown = true;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			mousestartPos = CurPoint.X - trackRect.X;  			break;  		case Orientations.Vertical:  			mousestartPos = CurPoint.Y - trackRect.Y;  			break;  		}  	}  }  else {  	int OffSet = 0;  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	default:  		break;  	}  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		leftbuttonDown = true;  		OnScroll ();  		OnValueChanged ();  		leftbuttonDown = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Contains (CurPoint)) {  	if (!leftbuttonDown) {  		leftbuttonDown = true;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			mousestartPos = CurPoint.X - trackRect.X;  			break;  		case Orientations.Vertical:  			mousestartPos = CurPoint.Y - trackRect.Y;  			break;  		}  	}  }  else {  	int OffSet = 0;  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	default:  		break;  	}  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		leftbuttonDown = true;  		OnScroll ();  		OnValueChanged ();  		leftbuttonDown = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Contains (CurPoint)) {  	if (!leftbuttonDown) {  		leftbuttonDown = true;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			mousestartPos = CurPoint.X - trackRect.X;  			break;  		case Orientations.Vertical:  			mousestartPos = CurPoint.Y - trackRect.Y;  			break;  		}  	}  }  else {  	int OffSet = 0;  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	default:  		break;  	}  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		leftbuttonDown = true;  		OnScroll ();  		OnValueChanged ();  		leftbuttonDown = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Contains (CurPoint)) {  	if (!leftbuttonDown) {  		leftbuttonDown = true;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			mousestartPos = CurPoint.X - trackRect.X;  			break;  		case Orientations.Vertical:  			mousestartPos = CurPoint.Y - trackRect.Y;  			break;  		}  	}  }  else {  	int OffSet = 0;  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	default:  		break;  	}  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		leftbuttonDown = true;  		OnScroll ();  		OnValueChanged ();  		leftbuttonDown = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Contains (CurPoint)) {  	if (!leftbuttonDown) {  		leftbuttonDown = true;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			mousestartPos = CurPoint.X - trackRect.X;  			break;  		case Orientations.Vertical:  			mousestartPos = CurPoint.Y - trackRect.Y;  			break;  		}  	}  }  else {  	int OffSet = 0;  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	default:  		break;  	}  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		leftbuttonDown = true;  		OnScroll ();  		OnValueChanged ();  		leftbuttonDown = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Contains (CurPoint)) {  	if (!leftbuttonDown) {  		leftbuttonDown = true;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			mousestartPos = CurPoint.X - trackRect.X;  			break;  		case Orientations.Vertical:  			mousestartPos = CurPoint.Y - trackRect.Y;  			break;  		}  	}  }  else {  	int OffSet = 0;  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	default:  		break;  	}  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		leftbuttonDown = true;  		OnScroll ();  		OnValueChanged ();  		leftbuttonDown = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Contains (CurPoint)) {  	if (!leftbuttonDown) {  		leftbuttonDown = true;  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			mousestartPos = CurPoint.X - trackRect.X;  			break;  		case Orientations.Vertical:  			mousestartPos = CurPoint.Y - trackRect.Y;  			break;  		}  	}  }  else {  	int OffSet = 0;  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	default:  		break;  	}  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		leftbuttonDown = true;  		OnScroll ();  		OnValueChanged ();  		leftbuttonDown = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  	OffSet = this.Width - trackRect.Right - 1;  else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  	OffSet = (trackRect.Left - 1) * -1;  else  	OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  	OffSet = this.Width - trackRect.Right - 1;  else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  	OffSet = (trackRect.Left - 1) * -1;  else  	OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Right + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) >= this.Width)  	OffSet = this.Width - trackRect.Right - 1;  else if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  	OffSet = (trackRect.Left - 1) * -1;  else  	OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  	OffSet = (trackRect.Left - 1) * -1;  else  	OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Left + (CurPoint.X - trackRect.X - (trackRect.Width / 2)) <= 0)  	OffSet = (trackRect.Left - 1) * -1;  else  	OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: OffSet = CurPoint.X - trackRect.X - (trackRect.Width / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  	OffSet = this.Height - trackRect.Bottom - 1;  else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  	OffSet = (trackRect.Top - 1) * -1;  else  	OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  	OffSet = this.Height - trackRect.Bottom - 1;  else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  	OffSet = (trackRect.Top - 1) * -1;  else  	OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) >= this.Height)  	OffSet = this.Height - trackRect.Bottom - 1;  else if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  	OffSet = (trackRect.Top - 1) * -1;  else  	OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  	OffSet = (trackRect.Top - 1) * -1;  else  	OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: if (trackRect.Top + (CurPoint.Y - trackRect.Y - (trackRect.Height / 2)) <= 0)  	OffSet = (trackRect.Top - 1) * -1;  else  	OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: OffSet = CurPoint.Y - trackRect.Y - (trackRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following statement contains a magic number: trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following statement contains a magic number: if (leftbuttonDown) {  	if (!ClientRectangle.Contains (CurPoint)) {  		if (CurPoint.X < ClientRectangle.X)  			CurPoint.X = ClientRectangle.X;  		if (CurPoint.Y < ClientRectangle.Y)  			CurPoint.Y = ClientRectangle.Y;  		if (CurPoint.X > ClientRectangle.Width)  			CurPoint.X = ClientRectangle.Width;  		if (CurPoint.Y > ClientRectangle.Height)  			CurPoint.Y = ClientRectangle.Height;  	}  	int OffSet = 0;  	try {  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - mousestartPos) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - mousestartPos) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - mousestartPos;  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - mousestartPos) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - mousestartPos) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - mousestartPos;  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		//force redraw  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			OnScroll ();  			OnValueChanged ();  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following statement contains a magic number: if (leftbuttonDown) {  	if (!ClientRectangle.Contains (CurPoint)) {  		if (CurPoint.X < ClientRectangle.X)  			CurPoint.X = ClientRectangle.X;  		if (CurPoint.Y < ClientRectangle.Y)  			CurPoint.Y = ClientRectangle.Y;  		if (CurPoint.X > ClientRectangle.Width)  			CurPoint.X = ClientRectangle.Width;  		if (CurPoint.Y > ClientRectangle.Height)  			CurPoint.Y = ClientRectangle.Height;  	}  	int OffSet = 0;  	try {  		switch (this.barOrientation) {  		case Orientations.Horizontal:  			if (trackRect.Right + (CurPoint.X - trackRect.X - mousestartPos) >= this.Width)  				OffSet = this.Width - trackRect.Right - 1;  			else if (trackRect.Left + (CurPoint.X - trackRect.X - mousestartPos) <= 0)  				OffSet = (trackRect.Left - 1) * -1;  			else  				OffSet = CurPoint.X - trackRect.X - mousestartPos;  			trackRect.Offset (OffSet' 0);  			trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  			if (maxSide == Poles.Left)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		case Orientations.Vertical:  			if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - mousestartPos) >= this.Height)  				OffSet = this.Height - trackRect.Bottom - 1;  			else if (trackRect.Top + (CurPoint.Y - trackRect.Y - mousestartPos) <= 0)  				OffSet = (trackRect.Top - 1) * -1;  			else  				OffSet = CurPoint.Y - trackRect.Y - mousestartPos;  			trackRect.Offset (0' OffSet);  			trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  			if (maxSide == Poles.Top)  				trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		//force redraw  		trackerValue += barMinimum;  		this.Invalidate ();  		if (OffSet != 0) {  			OnScroll ();  			OnValueChanged ();  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following statement contains a magic number: try {  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - mousestartPos) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - mousestartPos) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - mousestartPos;  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - mousestartPos) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - mousestartPos) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - mousestartPos;  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	}  }  catch (Exception) {  }  finally {  	//force redraw  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		OnScroll ();  		OnValueChanged ();  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following statement contains a magic number: try {  	switch (this.barOrientation) {  	case Orientations.Horizontal:  		if (trackRect.Right + (CurPoint.X - trackRect.X - mousestartPos) >= this.Width)  			OffSet = this.Width - trackRect.Right - 1;  		else if (trackRect.Left + (CurPoint.X - trackRect.X - mousestartPos) <= 0)  			OffSet = (trackRect.Left - 1) * -1;  		else  			OffSet = CurPoint.X - trackRect.X - mousestartPos;  		trackRect.Offset (OffSet' 0);  		trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  		if (maxSide == Poles.Left)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	case Orientations.Vertical:  		if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - mousestartPos) >= this.Height)  			OffSet = this.Height - trackRect.Bottom - 1;  		else if (trackRect.Top + (CurPoint.Y - trackRect.Y - mousestartPos) <= 0)  			OffSet = (trackRect.Top - 1) * -1;  		else  			OffSet = CurPoint.Y - trackRect.Y - mousestartPos;  		trackRect.Offset (0' OffSet);  		trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  		if (maxSide == Poles.Top)  			trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  		break;  	}  }  catch (Exception) {  }  finally {  	//force redraw  	trackerValue += barMinimum;  	this.Invalidate ();  	if (OffSet != 0) {  		OnScroll ();  		OnValueChanged ();  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - mousestartPos) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - mousestartPos) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - mousestartPos;  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - mousestartPos) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - mousestartPos) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - mousestartPos;  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following statement contains a magic number: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - mousestartPos) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - mousestartPos) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - mousestartPos;  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - mousestartPos) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - mousestartPos) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - mousestartPos;  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following statement contains a magic number: trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following statement contains a magic number: trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,ColorTrackBar,The following statement contains a magic number: base.Size = new Size (150' 25);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,ColorTrackBar,The following statement contains a magic number: base.Size = new Size (150' 25);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	if (trackRect == Rectangle.Empty) {  		int TrackX = (int)(((trackerValue - barMinimum) * (ClientRectangle.Width - trackSize)) / (barMaximum - barMinimum));  		//don't go past the borders  		if (TrackX == 0)  			TrackX++;  		if (TrackX + trackSize == ClientRectangle.Width)  			TrackX--;  		if (maxSide != Poles.Right)  			TrackX = (TrackX - ClientRectangle.Width + trackSize) * -1;  		trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  	}  	break;  case Orientations.Vertical:  	if (trackRect == Rectangle.Empty) {  		int TrackY = (int)(((trackerValue - barMinimum) * (ClientRectangle.Height - trackSize)) / (barMaximum - barMinimum));  		//don't go past the borders  		if (TrackY == 0)  			TrackY++;  		if (TrackY + ClientRectangle.Width == ClientRectangle.Height)  			TrackY--;  		if (maxSide != Poles.Bottom)  			TrackY = (TrackY - ClientRectangle.Height + trackSize) * -1;  		trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	if (trackRect == Rectangle.Empty) {  		int TrackX = (int)(((trackerValue - barMinimum) * (ClientRectangle.Width - trackSize)) / (barMaximum - barMinimum));  		//don't go past the borders  		if (TrackX == 0)  			TrackX++;  		if (TrackX + trackSize == ClientRectangle.Width)  			TrackX--;  		if (maxSide != Poles.Right)  			TrackX = (TrackX - ClientRectangle.Width + trackSize) * -1;  		trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  	}  	break;  case Orientations.Vertical:  	if (trackRect == Rectangle.Empty) {  		int TrackY = (int)(((trackerValue - barMinimum) * (ClientRectangle.Height - trackSize)) / (barMaximum - barMinimum));  		//don't go past the borders  		if (TrackY == 0)  			TrackY++;  		if (TrackY + ClientRectangle.Width == ClientRectangle.Height)  			TrackY--;  		if (maxSide != Poles.Bottom)  			TrackY = (TrackY - ClientRectangle.Height + trackSize) * -1;  		trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: if (trackRect == Rectangle.Empty) {  	int TrackX = (int)(((trackerValue - barMinimum) * (ClientRectangle.Width - trackSize)) / (barMaximum - barMinimum));  	//don't go past the borders  	if (TrackX == 0)  		TrackX++;  	if (TrackX + trackSize == ClientRectangle.Width)  		TrackX--;  	if (maxSide != Poles.Right)  		TrackX = (TrackX - ClientRectangle.Width + trackSize) * -1;  	trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: if (trackRect == Rectangle.Empty) {  	int TrackY = (int)(((trackerValue - barMinimum) * (ClientRectangle.Height - trackSize)) / (barMaximum - barMinimum));  	//don't go past the borders  	if (TrackY == 0)  		TrackY++;  	if (TrackY + ClientRectangle.Width == ClientRectangle.Height)  		TrackY--;  	if (maxSide != Poles.Bottom)  		TrackY = (TrackY - ClientRectangle.Height + trackSize) * -1;  	trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: switch (cornerStyle) {  case CornerStyles.Square:  	PaintRectangle (ClientRectangle' barColor' barborderColor' g);  	break;  case CornerStyles.Rounded:  	//first draw bar  	GraphicsPath BarPath = DrawRoundedCorners (ClientRectangle' barborderColor' g);  	PaintPath (BarPath' barColor' g);  	//check if tracker size is correct  	if (trackRect.Width != trackRect.Height) {  		if (barOrientation == Orientations.Horizontal) {  			trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Height' ClientRectangle.Height - 2));  		}  		else {  			trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Width - 2' ClientRectangle.Width));  		}  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: switch (cornerStyle) {  case CornerStyles.Square:  	PaintRectangle (ClientRectangle' barColor' barborderColor' g);  	break;  case CornerStyles.Rounded:  	//first draw bar  	GraphicsPath BarPath = DrawRoundedCorners (ClientRectangle' barborderColor' g);  	PaintPath (BarPath' barColor' g);  	//check if tracker size is correct  	if (trackRect.Width != trackRect.Height) {  		if (barOrientation == Orientations.Horizontal) {  			trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Height' ClientRectangle.Height - 2));  		}  		else {  			trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Width - 2' ClientRectangle.Width));  		}  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: if (trackRect.Width != trackRect.Height) {  	if (barOrientation == Orientations.Horizontal) {  		trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Height' ClientRectangle.Height - 2));  	}  	else {  		trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Width - 2' ClientRectangle.Width));  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: if (trackRect.Width != trackRect.Height) {  	if (barOrientation == Orientations.Horizontal) {  		trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Height' ClientRectangle.Height - 2));  	}  	else {  		trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Width - 2' ClientRectangle.Width));  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: if (barOrientation == Orientations.Horizontal) {  	trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Height' ClientRectangle.Height - 2));  }  else {  	trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Width - 2' ClientRectangle.Width));  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: if (barOrientation == Orientations.Horizontal) {  	trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Height' ClientRectangle.Height - 2));  }  else {  	trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Width - 2' ClientRectangle.Width));  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Height' ClientRectangle.Height - 2));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawBar,The following statement contains a magic number: trackRect = new Rectangle (trackRect.Location' new Size (ClientRectangle.Width - 2' ClientRectangle.Width));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,The following statement contains a magic number: try {  	//get parent color  	Color ParentColor = Color.FromName ("Control");  	ParentColor = Color.Transparent;  	switch (barOrientation) {  	case Orientations.Horizontal:  		if (trackRect == Rectangle.Empty) {  			int TrackX = (int)(((trackerValue - barMinimum) * (ClientRectangle.Width - trackSize)) / (barMaximum - barMinimum));  			//don't go past the borders  			if (TrackX == 0)  				TrackX++;  			if (TrackX + trackSize == ClientRectangle.Width)  				TrackX--;  			if (maxSide != Poles.Right)  				TrackX = (TrackX - ClientRectangle.Width + trackSize) * -1;  			trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  		}  		break;  	case Orientations.Vertical:  		if (trackRect == Rectangle.Empty) {  			int TrackY = (int)(((trackerValue - barMinimum) * (ClientRectangle.Height - trackSize)) / (barMaximum - barMinimum));  			//don't go past the borders  			if (TrackY == 0)  				TrackY++;  			if (TrackY + ClientRectangle.Width == ClientRectangle.Height)  				TrackY--;  			if (maxSide != Poles.Bottom)  				TrackY = (TrackY - ClientRectangle.Height + trackSize) * -1;  			trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  		}  		break;  	default:  		break;  	}  	//Region TrackRegion=null;  	//Region BarRegion=null;  	switch (cornerStyle) {  	case CornerStyles.Square:  		PaintRectangle (trackRect' trackColor' trackborderColor' g);  		break;  	case CornerStyles.Rounded:  		//now draw Tracker  		GraphicsPath TrackPath = DrawRoundedCorners (trackRect' trackborderColor' g);  		//TrackRegion = new Region(TrackPath);  		PaintPath (TrackPath' trackColor' g);  		break;  	default:  		break;  	}  	//draw caption if Horizontal  	if (barOrientation == Orientations.Horizontal && caption != "") {  		Brush fb = new SolidBrush (Color.FromArgb (captionAlpha' captionColor));  		g.DrawString (caption' this.Font' fb' this.ClientRectangle' sf);  		fb.Dispose ();  	}  }  catch (Exception Err) {  	throw new Exception ("DrawBackGround Error: " + Err.Message);  }  finally {  	if (NewRect) {  		OnValueChanged ();  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,The following statement contains a magic number: try {  	//get parent color  	Color ParentColor = Color.FromName ("Control");  	ParentColor = Color.Transparent;  	switch (barOrientation) {  	case Orientations.Horizontal:  		if (trackRect == Rectangle.Empty) {  			int TrackX = (int)(((trackerValue - barMinimum) * (ClientRectangle.Width - trackSize)) / (barMaximum - barMinimum));  			//don't go past the borders  			if (TrackX == 0)  				TrackX++;  			if (TrackX + trackSize == ClientRectangle.Width)  				TrackX--;  			if (maxSide != Poles.Right)  				TrackX = (TrackX - ClientRectangle.Width + trackSize) * -1;  			trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  		}  		break;  	case Orientations.Vertical:  		if (trackRect == Rectangle.Empty) {  			int TrackY = (int)(((trackerValue - barMinimum) * (ClientRectangle.Height - trackSize)) / (barMaximum - barMinimum));  			//don't go past the borders  			if (TrackY == 0)  				TrackY++;  			if (TrackY + ClientRectangle.Width == ClientRectangle.Height)  				TrackY--;  			if (maxSide != Poles.Bottom)  				TrackY = (TrackY - ClientRectangle.Height + trackSize) * -1;  			trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  		}  		break;  	default:  		break;  	}  	//Region TrackRegion=null;  	//Region BarRegion=null;  	switch (cornerStyle) {  	case CornerStyles.Square:  		PaintRectangle (trackRect' trackColor' trackborderColor' g);  		break;  	case CornerStyles.Rounded:  		//now draw Tracker  		GraphicsPath TrackPath = DrawRoundedCorners (trackRect' trackborderColor' g);  		//TrackRegion = new Region(TrackPath);  		PaintPath (TrackPath' trackColor' g);  		break;  	default:  		break;  	}  	//draw caption if Horizontal  	if (barOrientation == Orientations.Horizontal && caption != "") {  		Brush fb = new SolidBrush (Color.FromArgb (captionAlpha' captionColor));  		g.DrawString (caption' this.Font' fb' this.ClientRectangle' sf);  		fb.Dispose ();  	}  }  catch (Exception Err) {  	throw new Exception ("DrawBackGround Error: " + Err.Message);  }  finally {  	if (NewRect) {  		OnValueChanged ();  	}  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	if (trackRect == Rectangle.Empty) {  		int TrackX = (int)(((trackerValue - barMinimum) * (ClientRectangle.Width - trackSize)) / (barMaximum - barMinimum));  		//don't go past the borders  		if (TrackX == 0)  			TrackX++;  		if (TrackX + trackSize == ClientRectangle.Width)  			TrackX--;  		if (maxSide != Poles.Right)  			TrackX = (TrackX - ClientRectangle.Width + trackSize) * -1;  		trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  	}  	break;  case Orientations.Vertical:  	if (trackRect == Rectangle.Empty) {  		int TrackY = (int)(((trackerValue - barMinimum) * (ClientRectangle.Height - trackSize)) / (barMaximum - barMinimum));  		//don't go past the borders  		if (TrackY == 0)  			TrackY++;  		if (TrackY + ClientRectangle.Width == ClientRectangle.Height)  			TrackY--;  		if (maxSide != Poles.Bottom)  			TrackY = (TrackY - ClientRectangle.Height + trackSize) * -1;  		trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	if (trackRect == Rectangle.Empty) {  		int TrackX = (int)(((trackerValue - barMinimum) * (ClientRectangle.Width - trackSize)) / (barMaximum - barMinimum));  		//don't go past the borders  		if (TrackX == 0)  			TrackX++;  		if (TrackX + trackSize == ClientRectangle.Width)  			TrackX--;  		if (maxSide != Poles.Right)  			TrackX = (TrackX - ClientRectangle.Width + trackSize) * -1;  		trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  	}  	break;  case Orientations.Vertical:  	if (trackRect == Rectangle.Empty) {  		int TrackY = (int)(((trackerValue - barMinimum) * (ClientRectangle.Height - trackSize)) / (barMaximum - barMinimum));  		//don't go past the borders  		if (TrackY == 0)  			TrackY++;  		if (TrackY + ClientRectangle.Width == ClientRectangle.Height)  			TrackY--;  		if (maxSide != Poles.Bottom)  			TrackY = (TrackY - ClientRectangle.Height + trackSize) * -1;  		trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,The following statement contains a magic number: if (trackRect == Rectangle.Empty) {  	int TrackX = (int)(((trackerValue - barMinimum) * (ClientRectangle.Width - trackSize)) / (barMaximum - barMinimum));  	//don't go past the borders  	if (TrackX == 0)  		TrackX++;  	if (TrackX + trackSize == ClientRectangle.Width)  		TrackX--;  	if (maxSide != Poles.Right)  		TrackX = (TrackX - ClientRectangle.Width + trackSize) * -1;  	trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,The following statement contains a magic number: trackRect = new Rectangle (TrackX' 1' trackSize' ClientRectangle.Height - 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,The following statement contains a magic number: if (trackRect == Rectangle.Empty) {  	int TrackY = (int)(((trackerValue - barMinimum) * (ClientRectangle.Height - trackSize)) / (barMaximum - barMinimum));  	//don't go past the borders  	if (TrackY == 0)  		TrackY++;  	if (TrackY + ClientRectangle.Width == ClientRectangle.Height)  		TrackY--;  	if (maxSide != Poles.Bottom)  		TrackY = (TrackY - ClientRectangle.Height + trackSize) * -1;  	trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawControl,The following statement contains a magic number: trackRect = new Rectangle (1' TrackY' ClientRectangle.Width - 2' trackSize);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: Rect = new Rectangle (Rect.X + 1' Rect.Y + 1' Rect.Width - 2' Rect.Height - 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: Rect = new Rectangle (Rect.X + 1' Rect.Y + 1' Rect.Width - 2' Rect.Height - 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  	SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  	SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  	g.FillRectangle (brush' FirstRect);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  	g.FillRectangle (brush' SecondRect);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width' Rect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: SecondRect = new Rectangle (Rect.X' Rect.Height / 2' Rect.Width' Rect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (RectColor)' RectColor);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' RectColor' ControlPaint.Dark (RectColor));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: FirstRect = new Rectangle (Rect.X' Rect.Y' Rect.Width / 2' Rect.Height);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: SecondRect = new Rectangle (Rect.Width / 2' Rect.Y' Rect.Width / 2' Rect.Height);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (RectColor)' RectColor);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintRectangle,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' RectColor' ControlPaint.Dark (RectColor));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  	SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint upper half  	brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint lower half  	// (SecondRect.Y - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  case Orientations.Vertical:  	FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  	//only get the bar region  	FirstRegion.Intersect (FirstRect);  	SecondRegion.Intersect (SecondRect);  	// Paint left half  	brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  	g.FillRegion (brush' FirstRegion);  	brush.Dispose ();  	// Paint right half  	// (SecondRect.X - 1 because there would be a dark line in the middle of the bar)  	brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  	g.FillRegion (brush' SecondRegion);  	brush.Dispose ();  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width' RegionRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: SecondRect = new Rectangle (RegionRect.X' RegionRect.Height / 2' RegionRect.Width' RegionRect.Height / 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (FirstRect.Width / 2' FirstRect.Top)' new Point (FirstRect.Width / 2' FirstRect.Bottom)' ControlPaint.Dark (PathColor)' PathColor);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (SecondRect.Width / 2' SecondRect.Top - 1)' new Point (SecondRect.Width / 2' SecondRect.Bottom)' PathColor' ControlPaint.Dark (PathColor));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: FirstRect = new Rectangle (RegionRect.X' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: SecondRect = new Rectangle (RegionRect.Width / 2' RegionRect.Y' RegionRect.Width / 2' RegionRect.Height);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (FirstRect.Left' FirstRect.Height / 2)' new Point (FirstRect.Right' FirstRect.Height / 2)' ControlPaint.Dark (PathColor)' PathColor);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,PaintPath,The following statement contains a magic number: brush = new LinearGradientBrush (new Point (SecondRect.Left - 1' SecondRect.Height / 2)' new Point (SecondRect.Right' SecondRect.Height / 2)' PathColor' ControlPaint.Dark (PathColor));  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: try {  	Pen LinePen = new Pen (BorderColor' borderWidth + 1);  	switch (barOrientation) {  	case Orientations.Horizontal:  		Rectangle LeftRect' RightRect;  		LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  		//build shape  		gPath.AddArc (LeftRect' 90' 180);  		gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  		gPath.AddArc (RightRect' 270' 180);  		gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	case Orientations.Vertical:  		Rectangle TopRect' BotRect;  		TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  		BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  		//build shape  		gPath.AddArc (TopRect' 180' 180);  		gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  		gPath.AddArc (BotRect' 0' 180);  		gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  		gPath.CloseFigure ();  		g.DrawPath (LinePen' gPath);  		break;  	default:  		break;  	}  }  catch (Exception Err) {  	throw new Exception ("DrawRoundedCornersException: " + Err.Message);  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: switch (barOrientation) {  case Orientations.Horizontal:  	Rectangle LeftRect' RightRect;  	LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  	//build shape  	gPath.AddArc (LeftRect' 90' 180);  	gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  	gPath.AddArc (RightRect' 270' 180);  	gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  case Orientations.Vertical:  	Rectangle TopRect' BotRect;  	TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  	BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  	//build shape  	gPath.AddArc (TopRect' 180' 180);  	gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  	gPath.AddArc (BotRect' 0' 180);  	gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  	gPath.CloseFigure ();  	g.DrawPath (LinePen' gPath);  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: LeftRect = new Rectangle (Rect.X' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: RightRect = new Rectangle (Rect.X + (Rect.Width - Rect.Height)' Rect.Y + 1' Rect.Height - 1' Rect.Height - 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddArc (LeftRect' 90' 180);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddArc (LeftRect' 90' 180);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (LeftRect.X + LeftRect.Width / 2 + 2' LeftRect.Top + 1' RightRect.X + (RightRect.Width / 2) - 1' RightRect.Top + 1);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddArc (RightRect' 270' 180);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddArc (RightRect' 270' 180);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (RightRect.X + (RightRect.Width / 2)' RightRect.Bottom' LeftRect.X + (LeftRect.Width / 2)' LeftRect.Bottom);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: TopRect = new Rectangle (Rect.X + 1' Rect.Y' Rect.Width - 2' Rect.Width - 1);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: BotRect = new Rectangle (Rect.X + 1' Rect.Y + (Rect.Height - Rect.Width)' Rect.Width - 2' Rect.Width - 1);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddArc (TopRect' 180' 180);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddArc (TopRect' 180' 180);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (TopRect.Right' TopRect.Y + TopRect.Height / 2' BotRect.Right' BotRect.Y + BotRect.Height / 2 + 1);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddArc (BotRect' 0' 180);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  
Magic Number,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,DrawRoundedCorners,The following statement contains a magic number: gPath.AddLine (BotRect.Left + 1' BotRect.Y + BotRect.Height / 2 - 1' TopRect.Left + 1' TopRect.Y + TopRect.Height / 2 + 2);  
Magic Number,DaggerLib.DSGraphEdit,DMOBoolParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMOBoolParam.cs,DMOBoolParam,The following statement contains a magic number: Size = new System.Drawing.Size (15' 19);  
Magic Number,DaggerLib.DSGraphEdit,DMOBoolParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMOBoolParam.cs,DMOBoolParam,The following statement contains a magic number: Size = new System.Drawing.Size (15' 19);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,DMONumericalParam,The following statement contains a magic number: if (pInfo.mpType == MPType.FLOAT) {  	numericUpDown1.DecimalPlaces = 3;  	numericUpDown1.Increment = 0.001M;  }  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,DMONumericalParam,The following statement contains a magic number: numericUpDown1.DecimalPlaces = 3;  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: if (!colorTrackBar1.Tracking) {  	colorTrackBar1.Value = (int)((((0 - numericUpDown1.Minimum) + numericUpDown1.Value) / ((0 - numericUpDown1.Minimum) + numericUpDown1.Maximum)) * 1000);  }  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,numericUpDown1_ValueChanged,The following statement contains a magic number: colorTrackBar1.Value = (int)((((0 - numericUpDown1.Minimum) + numericUpDown1.Value) / ((0 - numericUpDown1.Minimum) + numericUpDown1.Maximum)) * 1000);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,OnResize,The following statement contains a magic number: colorTrackBar1.Size = new Size (Width - Height' 16);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,OnResize,The following statement contains a magic number: colorTrackBar1.Location = new Point (0' (Height - 16) / 2);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,OnResize,The following statement contains a magic number: colorTrackBar1.Location = new Point (0' (Height - 16) / 2);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (126' 3);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (126' 3);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (24' 23);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (24' 23);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Location = new System.Drawing.Point (3' 3);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Location = new System.Drawing.Point (3' 3);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Size = new System.Drawing.Size (120' 20);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.Size = new System.Drawing.Size (120' 20);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDown1.TabIndex = 2;  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.colorTrackBar1.CaptionAlpha = ((byte)(255));  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.colorTrackBar1.Location = new System.Drawing.Point (0' 6);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.colorTrackBar1.Maximum = 1000;  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.colorTrackBar1.Size = new System.Drawing.Size (126' 16);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.colorTrackBar1.Size = new System.Drawing.Size (126' 16);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.colorTrackBar1.TrackerSize = 16;  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.colorTrackBar1.Value = 25;  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (150' 25);  
Magic Number,DaggerLib.DSGraphEdit,DMONumericalParam,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\DMONumericalParam.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (150' 25);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: if (filterData != null) {  	// get the FilterData version and Merit  	Version = IntFromBytes (filterData' 0);  	Merit = IntFromBytes (filterData' 4);  	// Parse the pins  	NumPins = IntFromBytes (filterData' 8);  	int iPos = 16;  	for (int z = 0; z < NumPins; z++) {  		int iMT = IntFromBytes (filterData' iPos + 12);  		int iMedium = IntFromBytes (filterData' iPos + 16);  		int flag = IntFromBytes (filterData' iPos + 4);  		int inst = IntFromBytes (filterData' iPos + 8);  		Guid cat = GuidFromOffset (filterData' iPos + 20);  		FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  		iPos += 24;  		// Parse the media types for the pin  		for (int x = 0; x < iMT; x++) {  			fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  			iPos += 16;  		}  		// Parse the mediums for the pin  		for (int y = 0; y < iMedium; y++) {  			fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  			iPos += 4;  		}  		Pins.Add (fdp);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: Merit = IntFromBytes (filterData' 4);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: NumPins = IntFromBytes (filterData' 8);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int z = 0; z < NumPins; z++) {  	int iMT = IntFromBytes (filterData' iPos + 12);  	int iMedium = IntFromBytes (filterData' iPos + 16);  	int flag = IntFromBytes (filterData' iPos + 4);  	int inst = IntFromBytes (filterData' iPos + 8);  	Guid cat = GuidFromOffset (filterData' iPos + 20);  	FilterDataPin fdp = new FilterDataPin (z' flag' inst' cat);  	iPos += 24;  	// Parse the media types for the pin  	for (int x = 0; x < iMT; x++) {  		fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  		iPos += 16;  	}  	// Parse the mediums for the pin  	for (int y = 0; y < iMedium; y++) {  		fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  		iPos += 4;  	}  	Pins.Add (fdp);  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: iPos += 24;  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int x = 0; x < iMT; x++) {  	fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  	iPos += 16;  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int x = 0; x < iMT; x++) {  	fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  	iPos += 16;  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int x = 0; x < iMT; x++) {  	fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  	iPos += 16;  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: fdp.Types.Add (new FilterDataPinType (x' GuidFromOffset (filterData' iPos + 8)' GuidFromOffset (filterData' iPos + 12)));  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: iPos += 16;  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: for (int y = 0; y < iMedium; y++) {  	fdp.Mediums.Add (new FilterDataPinType (y' GuidFromOffset (filterData' iPos)' Guid.Empty));  	iPos += 4;  }  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,FilterData,The following statement contains a magic number: iPos += 4;  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,IntFromBytes,The following statement contains a magic number: return (b [iOffset] + b [iOffset + 1] * 256 + b [iOffset + 2] * 256 * 256 + b [iOffset + 3] * 256 * 256 * 256);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,IntFromBytes,The following statement contains a magic number: return (b [iOffset] + b [iOffset + 1] * 256 + b [iOffset + 2] * 256 * 256 + b [iOffset + 3] * 256 * 256 * 256);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,IntFromBytes,The following statement contains a magic number: return (b [iOffset] + b [iOffset + 1] * 256 + b [iOffset + 2] * 256 * 256 + b [iOffset + 3] * 256 * 256 * 256);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,IntFromBytes,The following statement contains a magic number: return (b [iOffset] + b [iOffset + 1] * 256 + b [iOffset + 2] * 256 * 256 + b [iOffset + 3] * 256 * 256 * 256);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,IntFromBytes,The following statement contains a magic number: return (b [iOffset] + b [iOffset + 1] * 256 + b [iOffset + 2] * 256 * 256 + b [iOffset + 3] * 256 * 256 * 256);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,IntFromBytes,The following statement contains a magic number: return (b [iOffset] + b [iOffset + 1] * 256 + b [iOffset + 2] * 256 * 256 + b [iOffset + 3] * 256 * 256 * 256);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,IntFromBytes,The following statement contains a magic number: return (b [iOffset] + b [iOffset + 1] * 256 + b [iOffset + 2] * 256 * 256 + b [iOffset + 3] * 256 * 256 * 256);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,IntFromBytes,The following statement contains a magic number: return (b [iOffset] + b [iOffset + 1] * 256 + b [iOffset + 2] * 256 * 256 + b [iOffset + 3] * 256 * 256 * 256);  
Magic Number,DaggerLib.DSGraphEdit,FilterData,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterData.cs,GuidFromBytes,The following statement contains a magic number: Array.Copy (b' iOffset' b2' 0' 16);  
Magic Number,DaggerLib.DSGraphEdit,AutoSizeTextBox,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\FilterPropertiesPanel.cs,AutoSizeTextbox_TextChanged,The following statement contains a magic number: this.Width = (int)s.Width + 4;  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,DSDaggerUIGraph,The following statement contains a magic number: PinLegend = new DaggerLib.UI.Windows.DaggerPinLegend (13);  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,DSDaggerUIGraph,The following statement contains a magic number: PinLegend.AddPinType (typeof(object)' (Bitmap)_pinImages.Images [0]' (Bitmap)_pinImages.Images [1]' (Bitmap)_pinImages.Images [2]' (Bitmap)_pinImages.Images [3]' Color.White' Color.Red);  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,DSDaggerUIGraph,The following statement contains a magic number: PinLegend.AddPinType (typeof(object)' (Bitmap)_pinImages.Images [0]' (Bitmap)_pinImages.Images [1]' (Bitmap)_pinImages.Images [2]' (Bitmap)_pinImages.Images [3]' Color.White' Color.Red);  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,InitializeComponent,The following statement contains a magic number: this._pinImages.Images.SetKeyName (2' "ponc.png");  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,InitializeComponent,The following statement contains a magic number: this._pinImages.Images.SetKeyName (3' "poc.png");  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,SyncGraphs,The following statement contains a magic number: for (int i = filters.Count - 1; i > -1; i--) {  	IBaseFilter filter = filters [i];  	// see if we haven't made a DaggerNode for this filter yet  	if (FindFilter (filter) == null) {  		DSFilterNode node = new DSFilterNode (filter' manuallyAddedFilter == filter);  		nodesAdded.Add (node);  		// Setting _droppedNode to a value will make the node NOT visible when it's created.  		// This way' we can reposition and resize the UINode before we display it.  		_droppedNode = node;  		Graph.AddNode (node);  		_droppedNode = null;  		// set the node's position and increment the drop location to the left  		(node.UINode as DaggerUINode).Location = _dropLocation;  		_dropLocation = new Point ((node.UINode as DaggerUINode).Right + 24' _dropLocation.Y);  		if (_dropLocation.X >= ActualCanvasSize.Width) {  			_dropLocation.X = 0;  			_dropLocation.Y = _dropLocation.Y + (node.UINode as DaggerUINode).Height;  		}  		// mark the node visible  		(node.UINode as DaggerUINode).Visible = true;  	}  	else {  		// we already have a node for this one' release the ref enum.next added  		if (filter.GetType ().IsCOMObject) {  			int refc = Marshal.ReleaseComObject (filter);  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,SyncGraphs,The following statement contains a magic number: if (FindFilter (filter) == null) {  	DSFilterNode node = new DSFilterNode (filter' manuallyAddedFilter == filter);  	nodesAdded.Add (node);  	// Setting _droppedNode to a value will make the node NOT visible when it's created.  	// This way' we can reposition and resize the UINode before we display it.  	_droppedNode = node;  	Graph.AddNode (node);  	_droppedNode = null;  	// set the node's position and increment the drop location to the left  	(node.UINode as DaggerUINode).Location = _dropLocation;  	_dropLocation = new Point ((node.UINode as DaggerUINode).Right + 24' _dropLocation.Y);  	if (_dropLocation.X >= ActualCanvasSize.Width) {  		_dropLocation.X = 0;  		_dropLocation.Y = _dropLocation.Y + (node.UINode as DaggerUINode).Height;  	}  	// mark the node visible  	(node.UINode as DaggerUINode).Visible = true;  }  else {  	// we already have a node for this one' release the ref enum.next added  	if (filter.GetType ().IsCOMObject) {  		int refc = Marshal.ReleaseComObject (filter);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,SyncGraphs,The following statement contains a magic number: _dropLocation = new Point ((node.UINode as DaggerUINode).Right + 24' _dropLocation.Y);  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,OnPaint,The following statement contains a magic number: if (_showPinNames) {  	foreach (DSFilterNodeUI node in AllNodes) {  		// see if we need to draw the pin names outside the node  		if (node._expandPropertiesButton.State || node._videoWindow != null) {  			// measure and draw the names of it's pins  			foreach (DSInputPin pin in node.Node.InputPins) {  				SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  				Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  				RectangleF rect = new RectangleF (new PointF (actualLocation.X - fs.Width - 2' actualLocation.Y)' fs);  				DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  			}  			foreach (DSOutputPin pin in node.Node.OutputPins) {  				SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  				Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  				RectangleF rect = new RectangleF (new PointF (actualLocation.X + this.PinSize + 2' actualLocation.Y)' fs);  				DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  			}  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,OnPaint,The following statement contains a magic number: if (_showPinNames) {  	foreach (DSFilterNodeUI node in AllNodes) {  		// see if we need to draw the pin names outside the node  		if (node._expandPropertiesButton.State || node._videoWindow != null) {  			// measure and draw the names of it's pins  			foreach (DSInputPin pin in node.Node.InputPins) {  				SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  				Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  				RectangleF rect = new RectangleF (new PointF (actualLocation.X - fs.Width - 2' actualLocation.Y)' fs);  				DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  			}  			foreach (DSOutputPin pin in node.Node.OutputPins) {  				SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  				Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  				RectangleF rect = new RectangleF (new PointF (actualLocation.X + this.PinSize + 2' actualLocation.Y)' fs);  				DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  			}  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,OnPaint,The following statement contains a magic number: foreach (DSFilterNodeUI node in AllNodes) {  	// see if we need to draw the pin names outside the node  	if (node._expandPropertiesButton.State || node._videoWindow != null) {  		// measure and draw the names of it's pins  		foreach (DSInputPin pin in node.Node.InputPins) {  			SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  			Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  			RectangleF rect = new RectangleF (new PointF (actualLocation.X - fs.Width - 2' actualLocation.Y)' fs);  			DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  		}  		foreach (DSOutputPin pin in node.Node.OutputPins) {  			SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  			Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  			RectangleF rect = new RectangleF (new PointF (actualLocation.X + this.PinSize + 2' actualLocation.Y)' fs);  			DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,OnPaint,The following statement contains a magic number: foreach (DSFilterNodeUI node in AllNodes) {  	// see if we need to draw the pin names outside the node  	if (node._expandPropertiesButton.State || node._videoWindow != null) {  		// measure and draw the names of it's pins  		foreach (DSInputPin pin in node.Node.InputPins) {  			SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  			Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  			RectangleF rect = new RectangleF (new PointF (actualLocation.X - fs.Width - 2' actualLocation.Y)' fs);  			DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  		}  		foreach (DSOutputPin pin in node.Node.OutputPins) {  			SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  			Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  			RectangleF rect = new RectangleF (new PointF (actualLocation.X + this.PinSize + 2' actualLocation.Y)' fs);  			DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,OnPaint,The following statement contains a magic number: if (node._expandPropertiesButton.State || node._videoWindow != null) {  	// measure and draw the names of it's pins  	foreach (DSInputPin pin in node.Node.InputPins) {  		SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  		Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  		RectangleF rect = new RectangleF (new PointF (actualLocation.X - fs.Width - 2' actualLocation.Y)' fs);  		DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  	}  	foreach (DSOutputPin pin in node.Node.OutputPins) {  		SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  		Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  		RectangleF rect = new RectangleF (new PointF (actualLocation.X + this.PinSize + 2' actualLocation.Y)' fs);  		DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,OnPaint,The following statement contains a magic number: if (node._expandPropertiesButton.State || node._videoWindow != null) {  	// measure and draw the names of it's pins  	foreach (DSInputPin pin in node.Node.InputPins) {  		SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  		Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  		RectangleF rect = new RectangleF (new PointF (actualLocation.X - fs.Width - 2' actualLocation.Y)' fs);  		DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  	}  	foreach (DSOutputPin pin in node.Node.OutputPins) {  		SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  		Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  		RectangleF rect = new RectangleF (new PointF (actualLocation.X + this.PinSize + 2' actualLocation.Y)' fs);  		DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,OnPaint,The following statement contains a magic number: foreach (DSInputPin pin in node.Node.InputPins) {  	SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  	Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  	RectangleF rect = new RectangleF (new PointF (actualLocation.X - fs.Width - 2' actualLocation.Y)' fs);  	DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,OnPaint,The following statement contains a magic number: foreach (DSOutputPin pin in node.Node.OutputPins) {  	SizeF fs = e.Graphics.MeasureString (pin.Name' Font);  	Point actualLocation = this.PointToClient (node.PointToScreen ((pin.PinUIElements as PinUI).PinLocation));  	RectangleF rect = new RectangleF (new PointF (actualLocation.X + this.PinSize + 2' actualLocation.Y)' fs);  	DrawPinName (Font' e.Graphics' (pin.PinUIElements as PinUI).NoodleColor' pin.Name' rect);  }  
Magic Number,DaggerLib.DSGraphEdit,DSDaggerUIGraph,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSDaggerUIGraph.cs,DrawPinName,The following statement contains a magic number: using (Brush b = new SolidBrush (Color.FromArgb (150' ControlPaint.Dark (c)))) {  	g.FillRectangle (b' rr);  }  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNode.cs,GetPinMajorMediaType,The following statement contains a magic number: if (hr == 0) {  	t = PinDataTypes.GetMajorPinType (contype.majorType);  	DsUtils.FreeAMMediaType (contype);  	return t;  }  else {  	// wasn't connected' enumerate the prefered media types and get the major type of the first one  	IEnumMediaTypes penum = null;  	hr = pin.EnumMediaTypes (out penum);  	if (hr == 0 && penum != null) {  		AMMediaType[] mtypes = new AMMediaType[1];  		IntPtr fetched = Marshal.AllocCoTaskMem (4);  		try {  			if (penum.Next (1' mtypes' fetched) == 0) {  				t = PinDataTypes.GetMajorPinType (mtypes [0].majorType);  				DsUtils.FreeAMMediaType (mtypes [0]);  				Marshal.ReleaseComObject (penum);  				return t;  			}  		}  		finally {  			Marshal.FreeCoTaskMem (fetched);  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNode,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNode.cs,GetPinMajorMediaType,The following statement contains a magic number: if (hr == 0 && penum != null) {  	AMMediaType[] mtypes = new AMMediaType[1];  	IntPtr fetched = Marshal.AllocCoTaskMem (4);  	try {  		if (penum.Next (1' mtypes' fetched) == 0) {  			t = PinDataTypes.GetMajorPinType (mtypes [0].majorType);  			DsUtils.FreeAMMediaType (mtypes [0]);  			Marshal.ReleaseComObject (penum);  			return t;  		}  	}  	finally {  		Marshal.FreeCoTaskMem (fetched);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._internalControl.Location = new System.Drawing.Point (16' 21);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._internalControl.Location = new System.Drawing.Point (16' 21);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._internalControl.Size = new System.Drawing.Size (173' 14);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._internalControl.Size = new System.Drawing.Size (173' 14);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._expandPropertiesButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._expandPropertiesButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._expandPropertiesButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._clockButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._clockButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._clockButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(64))))' ((int)(((byte)(64))))' ((int)(((byte)(64)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._clockButton.TabIndex = 2;  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._detachVideoWindowButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._detachVideoWindowButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._detachVideoWindowButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._detachVideoWindowButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._detachVideoWindowButton.TabIndex = 3;  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._closeButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._closeButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._closeButton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._closeButton.TabIndex = 4;  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this._propertiesImageList.Images.SetKeyName (2' "cog.png");  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.dvdControlbutton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.dvdControlbutton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.dvdControlbutton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.dvdControlbutton.MouseOutsideTint = System.Drawing.Color.FromArgb (((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191))))' ((int)(((byte)(191)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.dvdControlbutton.TabIndex = 5;  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.dvdControlContextMenuStrip.Size = new System.Drawing.Size (134' 92);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.dvdControlContextMenuStrip.Size = new System.Drawing.Size (134' 92);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.titleMenuToolStripMenuItem.Size = new System.Drawing.Size (133' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.titleMenuToolStripMenuItem.Size = new System.Drawing.Size (133' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.resumeToolStripMenuItem.Size = new System.Drawing.Size (133' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.resumeToolStripMenuItem.Size = new System.Drawing.Size (133' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.rootMenuToolStripMenuItem.Size = new System.Drawing.Size (133' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.rootMenuToolStripMenuItem.Size = new System.Drawing.Size (133' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.chaptersToolStripMenuItem.Size = new System.Drawing.Size (133' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.chaptersToolStripMenuItem.Size = new System.Drawing.Size (133' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.CaptionColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(192))))' ((int)(((byte)(192)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.CaptionColor = System.Drawing.Color.FromArgb (((int)(((byte)(0))))' ((int)(((byte)(192))))' ((int)(((byte)(192)))));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.CaptionSize = 16;  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (205' 40);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (205' 40);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,renderPinMenuItem_Click,The following statement contains a magic number: parentui._dropLocation = new Point (dropstart.X + 25' dropstart.Y);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,SetModalProperties,The following statement contains a magic number: if ((this.Parent as DSDaggerUIGraph).ModalProperties && ((_dsfilternode._filter as IDMOWrapperFilter) == null)) {  	if (_properties != null) {  		// Kill the internal PropertyPagePanel.  Technically our internal PropertyPages  		// and PropertyPages created with OleCreatePropertyFrame can coexist' but  		// it's unpredicatable at best.  		InternalControl.Controls.Remove (_properties);  		_properties.Dispose ();  		_properties = null;  		GC.Collect ();  	}  	this._expandPropertiesButton.State = false;  	this._expandPropertiesButton.ToolTipText = "Properties";  	this._expandPropertiesButton.MultiState = false;  	this._expandPropertiesButton.ButtonImage = _propertiesImageList.Images [2];  	// if it doesn't have a video window embedded in it' there's not reason  	// it should be resizable  	if (_videoWindow == null) {  		this.Resizable = false;  	}  }  else {  	if (_properties == null) {  		// Create the PropertyPagePanel for the filter  		_properties = new PropertyPagePanel (false' _dsfilternode._filter);  		InternalControl.Controls.Add (_properties);  		InternalControl.AutoScroll = true;  		_properties.Visible = false;  		// if it's a DMO create the dmo properties for it  		// DMOs always have non-modal properties because OleCreatePropertyFrame doesn't  		// work on them  		if ((_dsfilternode._filter as IDMOWrapperFilter) != null) {  			TabPage dmopage = SetDMOParams ();  			_properties.TabControl.TabPages.Add (dmopage);  		}  		SyncPinPropertyPages (null);  	}  	this._expandPropertiesButton.ToolTipText = "Show/Hide Properties";  	this._expandPropertiesButton.MultiState = true;  	this._expandPropertiesButton.ButtonImage = _propertiesImageList.Images [0];  	this._expandPropertiesButton.ButtonImage2 = _propertiesImageList.Images [1];  	// make sure the button is visible  	this._expandPropertiesButton.Visible = true;  	// we want it to be resizable  	this.Resizable = true;  }  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,SetModalProperties,The following statement contains a magic number: this._expandPropertiesButton.ButtonImage = _propertiesImageList.Images [2];  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,SetDMOParams,The following statement contains a magic number: tl.ColumnCount = 2;  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,ParseParamText,The following statement contains a magic number: ip = (IntPtr)(ip.ToInt32 () + ((ParamName.Length + 1) * 2));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,ParseParamText,The following statement contains a magic number: ip = (IntPtr)(ip.ToInt32 () + ((ParamUnits.Length + 1) * 2));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,ParseParamText,The following statement contains a magic number: while (Marshal.ReadInt16 (ip2) != 0)// Terminate on a zero length string   {  	s = Marshal.PtrToStringUni (ip2);  	ip2 = (IntPtr)(ip2.ToInt32 () + ((s.Length + 1) * 2));  	iCount++;  }  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,ParseParamText,The following statement contains a magic number: ip2 = (IntPtr)(ip2.ToInt32 () + ((s.Length + 1) * 2));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,ParseParamText,The following statement contains a magic number: for (int x = 0; x < iCount; x++) {  	ParamEnum [x] = Marshal.PtrToStringUni (ip);  	ip = (IntPtr)(ip.ToInt32 () + ((ParamEnum [x].Length + 1) * 2));  }  
Magic Number,DaggerLib.DSGraphEdit,DSFilterNodeUI,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\DSFilterNodeUI.cs,ParseParamText,The following statement contains a magic number: ip = (IntPtr)(ip.ToInt32 () + ((ParamEnum [x].Length + 1) * 2));  
Magic Number,DaggerLib.DSGraphEdit,DSFilterTreeView,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\DSFilterTreeView.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size (145' 26);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterTreeView,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\DSFilterTreeView.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size (145' 26);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterTreeView,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\DSFilterTreeView.cs,InitializeComponent,The following statement contains a magic number: this._refreshFiltersContextMenuItem.Size = new System.Drawing.Size (144' 22);  
Magic Number,DaggerLib.DSGraphEdit,DSFilterTreeView,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSFilterTreeView\DSFilterTreeView.cs,InitializeComponent,The following statement contains a magic number: this._refreshFiltersContextMenuItem.Size = new System.Drawing.Size (144' 22);  
Magic Number,DaggerLib.DSGraphEdit,PropertiesDialog,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertiesDialog.cs,PropertiesDialog,The following statement contains a magic number: this.ClientSize = new Size (newwidth + 10' newheight + 23);  
Magic Number,DaggerLib.DSGraphEdit,PropertiesDialog,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertiesDialog.cs,PropertiesDialog,The following statement contains a magic number: this.ClientSize = new Size (newwidth + 10' newheight + 23);  
Magic Number,DaggerLib.DSGraphEdit,PinPropertiesTextBox,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PinPropertiesTextBox.cs,RefreshProperties,The following statement contains a magic number: if (hr == 0 && penum != null) {  	AMMediaType[] mtypes = new AMMediaType[1];  	IntPtr fetched = Marshal.AllocCoTaskMem (4);  	try {  		while (penum.Next (1' mtypes' fetched) == 0) {  			AppendText (ConnectionMediaTypeString (mtypes [0]));  			DsUtils.FreeAMMediaType (mtypes [0]);  			added = true;  		}  	}  	catch (Exception ex) {  		#if DEBUG  		MessageBox.Show (ex.Message' "Error getting pin prefered type");  		#endif  	}  	finally {  		Marshal.FreeCoTaskMem (fetched);  	}  	// if we added no prefered media types to the textbox' set it to "None"  	if (added == false) {  		AppendText ("None\r\n");  	}  	Marshal.ReleaseComObject (penum);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,DSGraphEditPanel,The following statement contains a magic number: _mediaControl.GetState (100' out _mediaState);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,DSGraphEditPanel,The following statement contains a magic number: _mediaControl.GetState (100' out _mediaState);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,DSGraphEditPanel,The following statement contains a magic number: _mediaControl.GetState (100' out _mediaState);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,Graph_OnTopologyChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	long duration = 0;  	_mediaSeeking.GetDuration (out duration);  	// only set the extents if something has changed  	if (_timeSliderControl.Extent != (int)(duration / 10000)) {  		_timeSliderControl.Extent = (int)(duration / 10000);  		_timeSliderControl.Min = 0;  		_timeSliderControl.Max = _timeSliderControl.Extent;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,Graph_OnTopologyChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	long duration = 0;  	_mediaSeeking.GetDuration (out duration);  	// only set the extents if something has changed  	if (_timeSliderControl.Extent != (int)(duration / 10000)) {  		_timeSliderControl.Extent = (int)(duration / 10000);  		_timeSliderControl.Min = 0;  		_timeSliderControl.Max = _timeSliderControl.Extent;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,Graph_OnTopologyChanged,The following statement contains a magic number: if (_timeSliderControl.Extent != (int)(duration / 10000)) {  	_timeSliderControl.Extent = (int)(duration / 10000);  	_timeSliderControl.Min = 0;  	_timeSliderControl.Max = _timeSliderControl.Extent;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,Graph_OnTopologyChanged,The following statement contains a magic number: if (_timeSliderControl.Extent != (int)(duration / 10000)) {  	_timeSliderControl.Extent = (int)(duration / 10000);  	_timeSliderControl.Min = 0;  	_timeSliderControl.Max = _timeSliderControl.Extent;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,Graph_OnTopologyChanged,The following statement contains a magic number: _timeSliderControl.Extent = (int)(duration / 10000);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,HandleGraphEvent,The following statement contains a magic number: while (_mediaEventEx.GetEvent (out evCode' out evParam1' out evParam2' 0) == 0) {  	// Free memory associated with callback' since we're not using it  	hr = _mediaEventEx.FreeEventParams (evCode' evParam1' evParam2);  	// If this is the end of the clip' reset to beginning  	if (evCode == EventCode.Complete) {  		Stop ();  		// Rewind to first frame of movie  		hr = _mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' null' AMSeekingSeekingFlags.NoPositioning);  		_timeSliderControl.Pos = _timeSliderControl.Min;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,HandleGraphEvent,The following statement contains a magic number: if (evCode == EventCode.Complete) {  	Stop ();  	// Rewind to first frame of movie  	hr = _mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' null' AMSeekingSeekingFlags.NoPositioning);  	_timeSliderControl.Pos = _timeSliderControl.Min;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,HandleGraphEvent,The following statement contains a magic number: hr = _mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' null' AMSeekingSeekingFlags.NoPositioning);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,timeSliderTimer_Tick,The following statement contains a magic number: if (_mediaSeeking != null) {  	try {  		long pos = 0;  		_mediaSeeking.GetCurrentPosition (out pos);  		_timeSliderControl.Pos = (int)(pos / 10000);  	}  	catch {  		timeSliderTimer.Enabled = false;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,timeSliderTimer_Tick,The following statement contains a magic number: try {  	long pos = 0;  	_mediaSeeking.GetCurrentPosition (out pos);  	_timeSliderControl.Pos = (int)(pos / 10000);  }  catch {  	timeSliderTimer.Enabled = false;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,timeSliderTimer_Tick,The following statement contains a magic number: _timeSliderControl.Pos = (int)(pos / 10000);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: switch (_timeSliderControl.TrackMode) {  case TimeSliderTrackMode.None:  	break;  case TimeSliderTrackMode.StartTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the start position is moved past current position' update time  		if (_timeSliderControl.Min > (int)(cur / 10000)) {  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  		}  	}  	break;  case TimeSliderTrackMode.StopTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the end position is moved before current position' update time  		if (_timeSliderControl.Max < (int)(cur / 10000)) {  			// rewind to start and set new end time  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  		else {  			// just set the end time  			_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  	}  	break;  case TimeSliderTrackMode.CurrentTime:  	if (_mediaSeeking != null) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: switch (_timeSliderControl.TrackMode) {  case TimeSliderTrackMode.None:  	break;  case TimeSliderTrackMode.StartTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the start position is moved past current position' update time  		if (_timeSliderControl.Min > (int)(cur / 10000)) {  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  		}  	}  	break;  case TimeSliderTrackMode.StopTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the end position is moved before current position' update time  		if (_timeSliderControl.Max < (int)(cur / 10000)) {  			// rewind to start and set new end time  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  		else {  			// just set the end time  			_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  	}  	break;  case TimeSliderTrackMode.CurrentTime:  	if (_mediaSeeking != null) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: switch (_timeSliderControl.TrackMode) {  case TimeSliderTrackMode.None:  	break;  case TimeSliderTrackMode.StartTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the start position is moved past current position' update time  		if (_timeSliderControl.Min > (int)(cur / 10000)) {  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  		}  	}  	break;  case TimeSliderTrackMode.StopTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the end position is moved before current position' update time  		if (_timeSliderControl.Max < (int)(cur / 10000)) {  			// rewind to start and set new end time  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  		else {  			// just set the end time  			_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  	}  	break;  case TimeSliderTrackMode.CurrentTime:  	if (_mediaSeeking != null) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: switch (_timeSliderControl.TrackMode) {  case TimeSliderTrackMode.None:  	break;  case TimeSliderTrackMode.StartTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the start position is moved past current position' update time  		if (_timeSliderControl.Min > (int)(cur / 10000)) {  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  		}  	}  	break;  case TimeSliderTrackMode.StopTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the end position is moved before current position' update time  		if (_timeSliderControl.Max < (int)(cur / 10000)) {  			// rewind to start and set new end time  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  		else {  			// just set the end time  			_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  	}  	break;  case TimeSliderTrackMode.CurrentTime:  	if (_mediaSeeking != null) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: switch (_timeSliderControl.TrackMode) {  case TimeSliderTrackMode.None:  	break;  case TimeSliderTrackMode.StartTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the start position is moved past current position' update time  		if (_timeSliderControl.Min > (int)(cur / 10000)) {  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  		}  	}  	break;  case TimeSliderTrackMode.StopTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the end position is moved before current position' update time  		if (_timeSliderControl.Max < (int)(cur / 10000)) {  			// rewind to start and set new end time  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  		else {  			// just set the end time  			_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  	}  	break;  case TimeSliderTrackMode.CurrentTime:  	if (_mediaSeeking != null) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: switch (_timeSliderControl.TrackMode) {  case TimeSliderTrackMode.None:  	break;  case TimeSliderTrackMode.StartTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the start position is moved past current position' update time  		if (_timeSliderControl.Min > (int)(cur / 10000)) {  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  		}  	}  	break;  case TimeSliderTrackMode.StopTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the end position is moved before current position' update time  		if (_timeSliderControl.Max < (int)(cur / 10000)) {  			// rewind to start and set new end time  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  		else {  			// just set the end time  			_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  	}  	break;  case TimeSliderTrackMode.CurrentTime:  	if (_mediaSeeking != null) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: switch (_timeSliderControl.TrackMode) {  case TimeSliderTrackMode.None:  	break;  case TimeSliderTrackMode.StartTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the start position is moved past current position' update time  		if (_timeSliderControl.Min > (int)(cur / 10000)) {  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  		}  	}  	break;  case TimeSliderTrackMode.StopTime:  	if (_mediaSeeking != null) {  		long cur' stop;  		_mediaSeeking.GetPositions (out cur' out stop);  		// if the end position is moved before current position' update time  		if (_timeSliderControl.Max < (int)(cur / 10000)) {  			// rewind to start and set new end time  			_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  		else {  			// just set the end time  			_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  		}  	}  	break;  case TimeSliderTrackMode.CurrentTime:  	if (_mediaSeeking != null) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  	break;  default:  	break;  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	long cur' stop;  	_mediaSeeking.GetPositions (out cur' out stop);  	// if the start position is moved past current position' update time  	if (_timeSliderControl.Min > (int)(cur / 10000)) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	long cur' stop;  	_mediaSeeking.GetPositions (out cur' out stop);  	// if the start position is moved past current position' update time  	if (_timeSliderControl.Min > (int)(cur / 10000)) {  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_timeSliderControl.Min > (int)(cur / 10000)) {  	_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_timeSliderControl.Min > (int)(cur / 10000)) {  	_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: _mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	long cur' stop;  	_mediaSeeking.GetPositions (out cur' out stop);  	// if the end position is moved before current position' update time  	if (_timeSliderControl.Max < (int)(cur / 10000)) {  		// rewind to start and set new end time  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  	}  	else {  		// just set the end time  		_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	long cur' stop;  	_mediaSeeking.GetPositions (out cur' out stop);  	// if the end position is moved before current position' update time  	if (_timeSliderControl.Max < (int)(cur / 10000)) {  		// rewind to start and set new end time  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  	}  	else {  		// just set the end time  		_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	long cur' stop;  	_mediaSeeking.GetPositions (out cur' out stop);  	// if the end position is moved before current position' update time  	if (_timeSliderControl.Max < (int)(cur / 10000)) {  		// rewind to start and set new end time  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  	}  	else {  		// just set the end time  		_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	long cur' stop;  	_mediaSeeking.GetPositions (out cur' out stop);  	// if the end position is moved before current position' update time  	if (_timeSliderControl.Max < (int)(cur / 10000)) {  		// rewind to start and set new end time  		_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  	}  	else {  		// just set the end time  		_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  	}  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_timeSliderControl.Max < (int)(cur / 10000)) {  	// rewind to start and set new end time  	_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  }  else {  	// just set the end time  	_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_timeSliderControl.Max < (int)(cur / 10000)) {  	// rewind to start and set new end time  	_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  }  else {  	// just set the end time  	_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_timeSliderControl.Max < (int)(cur / 10000)) {  	// rewind to start and set new end time  	_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  }  else {  	// just set the end time  	_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_timeSliderControl.Max < (int)(cur / 10000)) {  	// rewind to start and set new end time  	_mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  }  else {  	// just set the end time  	_mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: _mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: _mediaSeeking.SetPositions ((long)_timeSliderControl.Min * 10000' AMSeekingSeekingFlags.AbsolutePositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: _mediaSeeking.SetPositions (0' AMSeekingSeekingFlags.NoPositioning' (long)_timeSliderControl.Max * 10000' AMSeekingSeekingFlags.AbsolutePositioning);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: if (_mediaSeeking != null) {  	_mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_timeSliderControl_ValuesChanged,The following statement contains a magic number: _mediaSeeking.SetPositions ((long)_timeSliderControl.Pos * 10000' AMSeekingSeekingFlags.AbsolutePositioning' 0' AMSeekingSeekingFlags.NoPositioning);  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_optionsDropDownButton_DropDownOpening,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	ToolStripMenuItem pinPlacementMenuItem = new ToolStripMenuItem (((DaggerNodePinPlacement)i).ToString ());  	pinPlacementMenuItem.Tag = i;  	pinPlacementMenuItem.Click += new EventHandler (pinPlacementMenuItem_Click);  	if (i == (int)_pinPlacement)  		pinPlacementMenuItem.Checked = true;  	pinPlacementToolStripMenuItem.DropDown.Items.Add (pinPlacementMenuItem);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,_noodleStyleButton_DropDownOpening,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	ToolStripMenuItem nsMenuItem = new ToolStripMenuItem (((NoodleStyle)i).ToString ());  	nsMenuItem.Tag = i;  	nsMenuItem.Click += new EventHandler (nsMenuItem_Click);  	if (i == (int)dsDaggerUIGraph1.NoodleStyle)  		nsMenuItem.Checked = true;  	_noodleStyleButton.DropDown.Items.Add (nsMenuItem);  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: _interfacesButton.Width = 100;  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: _buttonsPanel.Height = 23;  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: if (pProp != null) {  	// Get the propertypages from the property bag  	DsCAUUID caGUID;  	hr = pProp.GetPages (out caGUID);  	if (hr != 0 || caGUID.cElems == 0) {  		// could not get property sheets or got 0 property sheets  		return;  	}  	// convert caGUID to a managed array of Guids  	Guid[] propertyPages = caGUID.ToGuidArray ();  	for (int i = 0; i < propertyPages.Length; i++) {  		try {  			Type type = Type.GetTypeFromCLSID (propertyPages [i]);  			object o = Activator.CreateInstance (type);  			IPropertyPage pp = o as IPropertyPage;  			PROPPAGEINFO pi = new PROPPAGEINFO ();  			pp.GetPageInfo (ref pi);  			// get the page size' adjusting for button panel and padding  			_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  			_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  			// we want to inc the refcount so the property page won't vanish on us  			_iunk.Add (Marshal.GetIUnknownForObject (o));  			object[] obs =  {  				filter  			};  			pp.SetObjects (1' obs);  			pp.SetPageSite (this);  			Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  			TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  			_tabs.Controls.Add (tp);  			_pages.Add (pp);  			pp.Activate (tp.Handle' ref rect' false);  			// some PropertyPages aren't visible by default  			IntPtr childwindow = GetWindow (tp.Handle' 5);  			if (childwindow != IntPtr.Zero) {  				ShowWindow (childwindow' 5);  			}  		}  		catch {  			// some property pages don't abide by the rules of COM  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: if (pProp != null) {  	// Get the propertypages from the property bag  	DsCAUUID caGUID;  	hr = pProp.GetPages (out caGUID);  	if (hr != 0 || caGUID.cElems == 0) {  		// could not get property sheets or got 0 property sheets  		return;  	}  	// convert caGUID to a managed array of Guids  	Guid[] propertyPages = caGUID.ToGuidArray ();  	for (int i = 0; i < propertyPages.Length; i++) {  		try {  			Type type = Type.GetTypeFromCLSID (propertyPages [i]);  			object o = Activator.CreateInstance (type);  			IPropertyPage pp = o as IPropertyPage;  			PROPPAGEINFO pi = new PROPPAGEINFO ();  			pp.GetPageInfo (ref pi);  			// get the page size' adjusting for button panel and padding  			_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  			_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  			// we want to inc the refcount so the property page won't vanish on us  			_iunk.Add (Marshal.GetIUnknownForObject (o));  			object[] obs =  {  				filter  			};  			pp.SetObjects (1' obs);  			pp.SetPageSite (this);  			Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  			TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  			_tabs.Controls.Add (tp);  			_pages.Add (pp);  			pp.Activate (tp.Handle' ref rect' false);  			// some PropertyPages aren't visible by default  			IntPtr childwindow = GetWindow (tp.Handle' 5);  			if (childwindow != IntPtr.Zero) {  				ShowWindow (childwindow' 5);  			}  		}  		catch {  			// some property pages don't abide by the rules of COM  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: if (pProp != null) {  	// Get the propertypages from the property bag  	DsCAUUID caGUID;  	hr = pProp.GetPages (out caGUID);  	if (hr != 0 || caGUID.cElems == 0) {  		// could not get property sheets or got 0 property sheets  		return;  	}  	// convert caGUID to a managed array of Guids  	Guid[] propertyPages = caGUID.ToGuidArray ();  	for (int i = 0; i < propertyPages.Length; i++) {  		try {  			Type type = Type.GetTypeFromCLSID (propertyPages [i]);  			object o = Activator.CreateInstance (type);  			IPropertyPage pp = o as IPropertyPage;  			PROPPAGEINFO pi = new PROPPAGEINFO ();  			pp.GetPageInfo (ref pi);  			// get the page size' adjusting for button panel and padding  			_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  			_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  			// we want to inc the refcount so the property page won't vanish on us  			_iunk.Add (Marshal.GetIUnknownForObject (o));  			object[] obs =  {  				filter  			};  			pp.SetObjects (1' obs);  			pp.SetPageSite (this);  			Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  			TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  			_tabs.Controls.Add (tp);  			_pages.Add (pp);  			pp.Activate (tp.Handle' ref rect' false);  			// some PropertyPages aren't visible by default  			IntPtr childwindow = GetWindow (tp.Handle' 5);  			if (childwindow != IntPtr.Zero) {  				ShowWindow (childwindow' 5);  			}  		}  		catch {  			// some property pages don't abide by the rules of COM  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: if (pProp != null) {  	// Get the propertypages from the property bag  	DsCAUUID caGUID;  	hr = pProp.GetPages (out caGUID);  	if (hr != 0 || caGUID.cElems == 0) {  		// could not get property sheets or got 0 property sheets  		return;  	}  	// convert caGUID to a managed array of Guids  	Guid[] propertyPages = caGUID.ToGuidArray ();  	for (int i = 0; i < propertyPages.Length; i++) {  		try {  			Type type = Type.GetTypeFromCLSID (propertyPages [i]);  			object o = Activator.CreateInstance (type);  			IPropertyPage pp = o as IPropertyPage;  			PROPPAGEINFO pi = new PROPPAGEINFO ();  			pp.GetPageInfo (ref pi);  			// get the page size' adjusting for button panel and padding  			_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  			_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  			// we want to inc the refcount so the property page won't vanish on us  			_iunk.Add (Marshal.GetIUnknownForObject (o));  			object[] obs =  {  				filter  			};  			pp.SetObjects (1' obs);  			pp.SetPageSite (this);  			Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  			TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  			_tabs.Controls.Add (tp);  			_pages.Add (pp);  			pp.Activate (tp.Handle' ref rect' false);  			// some PropertyPages aren't visible by default  			IntPtr childwindow = GetWindow (tp.Handle' 5);  			if (childwindow != IntPtr.Zero) {  				ShowWindow (childwindow' 5);  			}  		}  		catch {  			// some property pages don't abide by the rules of COM  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: for (int i = 0; i < propertyPages.Length; i++) {  	try {  		Type type = Type.GetTypeFromCLSID (propertyPages [i]);  		object o = Activator.CreateInstance (type);  		IPropertyPage pp = o as IPropertyPage;  		PROPPAGEINFO pi = new PROPPAGEINFO ();  		pp.GetPageInfo (ref pi);  		// get the page size' adjusting for button panel and padding  		_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  		_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  		// we want to inc the refcount so the property page won't vanish on us  		_iunk.Add (Marshal.GetIUnknownForObject (o));  		object[] obs =  {  			filter  		};  		pp.SetObjects (1' obs);  		pp.SetPageSite (this);  		Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  		TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  		_tabs.Controls.Add (tp);  		_pages.Add (pp);  		pp.Activate (tp.Handle' ref rect' false);  		// some PropertyPages aren't visible by default  		IntPtr childwindow = GetWindow (tp.Handle' 5);  		if (childwindow != IntPtr.Zero) {  			ShowWindow (childwindow' 5);  		}  	}  	catch {  		// some property pages don't abide by the rules of COM  	}  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: for (int i = 0; i < propertyPages.Length; i++) {  	try {  		Type type = Type.GetTypeFromCLSID (propertyPages [i]);  		object o = Activator.CreateInstance (type);  		IPropertyPage pp = o as IPropertyPage;  		PROPPAGEINFO pi = new PROPPAGEINFO ();  		pp.GetPageInfo (ref pi);  		// get the page size' adjusting for button panel and padding  		_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  		_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  		// we want to inc the refcount so the property page won't vanish on us  		_iunk.Add (Marshal.GetIUnknownForObject (o));  		object[] obs =  {  			filter  		};  		pp.SetObjects (1' obs);  		pp.SetPageSite (this);  		Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  		TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  		_tabs.Controls.Add (tp);  		_pages.Add (pp);  		pp.Activate (tp.Handle' ref rect' false);  		// some PropertyPages aren't visible by default  		IntPtr childwindow = GetWindow (tp.Handle' 5);  		if (childwindow != IntPtr.Zero) {  			ShowWindow (childwindow' 5);  		}  	}  	catch {  		// some property pages don't abide by the rules of COM  	}  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: for (int i = 0; i < propertyPages.Length; i++) {  	try {  		Type type = Type.GetTypeFromCLSID (propertyPages [i]);  		object o = Activator.CreateInstance (type);  		IPropertyPage pp = o as IPropertyPage;  		PROPPAGEINFO pi = new PROPPAGEINFO ();  		pp.GetPageInfo (ref pi);  		// get the page size' adjusting for button panel and padding  		_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  		_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  		// we want to inc the refcount so the property page won't vanish on us  		_iunk.Add (Marshal.GetIUnknownForObject (o));  		object[] obs =  {  			filter  		};  		pp.SetObjects (1' obs);  		pp.SetPageSite (this);  		Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  		TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  		_tabs.Controls.Add (tp);  		_pages.Add (pp);  		pp.Activate (tp.Handle' ref rect' false);  		// some PropertyPages aren't visible by default  		IntPtr childwindow = GetWindow (tp.Handle' 5);  		if (childwindow != IntPtr.Zero) {  			ShowWindow (childwindow' 5);  		}  	}  	catch {  		// some property pages don't abide by the rules of COM  	}  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: for (int i = 0; i < propertyPages.Length; i++) {  	try {  		Type type = Type.GetTypeFromCLSID (propertyPages [i]);  		object o = Activator.CreateInstance (type);  		IPropertyPage pp = o as IPropertyPage;  		PROPPAGEINFO pi = new PROPPAGEINFO ();  		pp.GetPageInfo (ref pi);  		// get the page size' adjusting for button panel and padding  		_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  		_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  		// we want to inc the refcount so the property page won't vanish on us  		_iunk.Add (Marshal.GetIUnknownForObject (o));  		object[] obs =  {  			filter  		};  		pp.SetObjects (1' obs);  		pp.SetPageSite (this);  		Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  		TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  		_tabs.Controls.Add (tp);  		_pages.Add (pp);  		pp.Activate (tp.Handle' ref rect' false);  		// some PropertyPages aren't visible by default  		IntPtr childwindow = GetWindow (tp.Handle' 5);  		if (childwindow != IntPtr.Zero) {  			ShowWindow (childwindow' 5);  		}  	}  	catch {  		// some property pages don't abide by the rules of COM  	}  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: try {  	Type type = Type.GetTypeFromCLSID (propertyPages [i]);  	object o = Activator.CreateInstance (type);  	IPropertyPage pp = o as IPropertyPage;  	PROPPAGEINFO pi = new PROPPAGEINFO ();  	pp.GetPageInfo (ref pi);  	// get the page size' adjusting for button panel and padding  	_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  	_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  	// we want to inc the refcount so the property page won't vanish on us  	_iunk.Add (Marshal.GetIUnknownForObject (o));  	object[] obs =  {  		filter  	};  	pp.SetObjects (1' obs);  	pp.SetPageSite (this);  	Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  	TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  	_tabs.Controls.Add (tp);  	_pages.Add (pp);  	pp.Activate (tp.Handle' ref rect' false);  	// some PropertyPages aren't visible by default  	IntPtr childwindow = GetWindow (tp.Handle' 5);  	if (childwindow != IntPtr.Zero) {  		ShowWindow (childwindow' 5);  	}  }  catch {  	// some property pages don't abide by the rules of COM  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: try {  	Type type = Type.GetTypeFromCLSID (propertyPages [i]);  	object o = Activator.CreateInstance (type);  	IPropertyPage pp = o as IPropertyPage;  	PROPPAGEINFO pi = new PROPPAGEINFO ();  	pp.GetPageInfo (ref pi);  	// get the page size' adjusting for button panel and padding  	_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  	_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  	// we want to inc the refcount so the property page won't vanish on us  	_iunk.Add (Marshal.GetIUnknownForObject (o));  	object[] obs =  {  		filter  	};  	pp.SetObjects (1' obs);  	pp.SetPageSite (this);  	Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  	TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  	_tabs.Controls.Add (tp);  	_pages.Add (pp);  	pp.Activate (tp.Handle' ref rect' false);  	// some PropertyPages aren't visible by default  	IntPtr childwindow = GetWindow (tp.Handle' 5);  	if (childwindow != IntPtr.Zero) {  		ShowWindow (childwindow' 5);  	}  }  catch {  	// some property pages don't abide by the rules of COM  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: try {  	Type type = Type.GetTypeFromCLSID (propertyPages [i]);  	object o = Activator.CreateInstance (type);  	IPropertyPage pp = o as IPropertyPage;  	PROPPAGEINFO pi = new PROPPAGEINFO ();  	pp.GetPageInfo (ref pi);  	// get the page size' adjusting for button panel and padding  	_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  	_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  	// we want to inc the refcount so the property page won't vanish on us  	_iunk.Add (Marshal.GetIUnknownForObject (o));  	object[] obs =  {  		filter  	};  	pp.SetObjects (1' obs);  	pp.SetPageSite (this);  	Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  	TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  	_tabs.Controls.Add (tp);  	_pages.Add (pp);  	pp.Activate (tp.Handle' ref rect' false);  	// some PropertyPages aren't visible by default  	IntPtr childwindow = GetWindow (tp.Handle' 5);  	if (childwindow != IntPtr.Zero) {  		ShowWindow (childwindow' 5);  	}  }  catch {  	// some property pages don't abide by the rules of COM  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: try {  	Type type = Type.GetTypeFromCLSID (propertyPages [i]);  	object o = Activator.CreateInstance (type);  	IPropertyPage pp = o as IPropertyPage;  	PROPPAGEINFO pi = new PROPPAGEINFO ();  	pp.GetPageInfo (ref pi);  	// get the page size' adjusting for button panel and padding  	_pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  	_pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  	// we want to inc the refcount so the property page won't vanish on us  	_iunk.Add (Marshal.GetIUnknownForObject (o));  	object[] obs =  {  		filter  	};  	pp.SetObjects (1' obs);  	pp.SetPageSite (this);  	Rectangle rect = new Rectangle (0' 0' pi.size.Width' pi.size.Height);  	TabPage tp = new TabPage (Marshal.PtrToStringAuto (pi.szTitle));  	_tabs.Controls.Add (tp);  	_pages.Add (pp);  	pp.Activate (tp.Handle' ref rect' false);  	// some PropertyPages aren't visible by default  	IntPtr childwindow = GetWindow (tp.Handle' 5);  	if (childwindow != IntPtr.Zero) {  		ShowWindow (childwindow' 5);  	}  }  catch {  	// some property pages don't abide by the rules of COM  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: _pageSize.Width = Math.Max (_pageSize.Width' pi.size.Width + 10);  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: _pageSize.Height = Math.Max (_pageSize.Height' pi.size.Height + 33);  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: if (childwindow != IntPtr.Zero) {  	ShowWindow (childwindow' 5);  }  
Magic Number,DaggerLib.DSGraphEdit,PropertyPagePanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\PropertyPagePanel.cs,PropertyPagePanel,The following statement contains a magic number: ShowWindow (childwindow' 5);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: arrow = new Bitmap (9' 6);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: arrow = new Bitmap (9' 6);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.FillRectangle (b' 0' 0' 8' 5);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.FillRectangle (b' 0' 0' 8' 5);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.DrawLine (p' 4' 1' 7' 4);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.DrawLine (p' 4' 1' 7' 4);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.DrawLine (p' 4' 1' 7' 4);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.DrawLine (p' 7' 4' 1' 4);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.DrawLine (p' 7' 4' 1' 4);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.DrawLine (p' 7' 4' 1' 4);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.DrawLine (p' 1' 4' 4' 1);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: g.DrawLine (p' 1' 4' 4' 1);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: arrow.MakeTransparent (Color.FromArgb (255' 255' 255));  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: arrow.MakeTransparent (Color.FromArgb (255' 255' 255));  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: arrow.MakeTransparent (Color.FromArgb (255' 255' 255));  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeSliderControl,The following statement contains a magic number: width = this.Width - 6;  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: x -= 4;  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: if (this.doubleArrow) {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  	g.DrawImage (arrow' x + (max * ((float)width / extent))' y' 9' 6);  }  else {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: if (this.doubleArrow) {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  	g.DrawImage (arrow' x + (max * ((float)width / extent))' y' 9' 6);  }  else {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: if (this.doubleArrow) {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  	g.DrawImage (arrow' x + (max * ((float)width / extent))' y' 9' 6);  }  else {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: if (this.doubleArrow) {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  	g.DrawImage (arrow' x + (max * ((float)width / extent))' y' 9' 6);  }  else {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: if (this.doubleArrow) {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  	g.DrawImage (arrow' x + (max * ((float)width / extent))' y' 9' 6);  }  else {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: if (this.doubleArrow) {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  	g.DrawImage (arrow' x + (max * ((float)width / extent))' y' 9' 6);  }  else {  	g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: g.DrawImage (arrow' x + (max * ((float)width / extent))' y' 9' 6);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: g.DrawImage (arrow' x + (max * ((float)width / extent))' y' 9' 6);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: g.DrawImage (arrow' x + (min * ((float)width / extent))' y' 9' 6);  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following statement contains a magic number: stampLoc.Y = 26;  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Resize,The following statement contains a magic number: width = this.Width - 6;  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		// right arrow  		trackMode = 2;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		// left arrow  		trackMode = 1;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		// right arrow  		trackMode = 2;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		// left arrow  		trackMode = 1;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		// right arrow  		trackMode = 2;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		// left arrow  		trackMode = 1;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		// right arrow  		trackMode = 2;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		// left arrow  		trackMode = 1;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		// right arrow  		trackMode = 2;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		// left arrow  		trackMode = 1;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		// right arrow  		trackMode = 2;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		// left arrow  		trackMode = 1;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	// right arrow  	trackMode = 2;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	// left arrow  	trackMode = 1;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	// right arrow  	trackMode = 2;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	// left arrow  	trackMode = 1;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	// right arrow  	trackMode = 2;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	// left arrow  	trackMode = 1;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	// right arrow  	trackMode = 2;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	// left arrow  	trackMode = 1;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	// right arrow  	trackMode = 2;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	// left arrow  	trackMode = 1;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: trackMode = 2;  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	// left arrow  	trackMode = 1;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	// left arrow  	trackMode = 1;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: if (e.Y < y) {  	// check X coordinate  	//if(this.doubleArrow && (e.X >= 2 - x + ( position * ((float)width / extent))) && (e.X < x + ( position * ((float)width / extent)) + 8) )  	//{  	// right arrow  	trackMode = 3;  	//}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseDown,The following statement contains a magic number: trackMode = 3;  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode != 0) {  	if (trackMode == 1) {  		// left arrow tracking  		min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		min = Math.Max (min' 0);  		min = Math.Min (min' extent);  		if (min > max)  			max = min;  		if (position < min)  			position = min;  	}  	if (trackMode == 2) {  		// right arrow tracking  		max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		max = Math.Max (max' 0);  		max = Math.Min (max' extent);  		if (max < min)  			min = max;  		if (position > max)  			position = max;  	}  	if (trackMode == 3) {  		//time marker tracking  		position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  		position = Math.Max (position' 0);  		position = Math.Min (position' extent);  		if (position > max)  			position = max;  		if (position < min)  			position = min;  	}  	// notify client  	if (ValuesChanged != null)  		ValuesChanged (this' new EventArgs ());  	// repaint control  	Invalidate ();  }  else {  	//change the cursor if needed  	int x = 3;  	int y = 12 + height;  	Cursor = Cursors.Default;  	// check Y coordinate  	if ((e.Y >= y) && (e.Y < y + 6)) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  		else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  			Cursor = Cursors.SizeWE;  		}  	}  	// check Y coordinate  	if (e.Y < y) {  		// check X coordinate  		if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  			Cursor = Cursors.VSplit;  		}  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode == 1) {  	// left arrow tracking  	min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  	min = Math.Max (min' 0);  	min = Math.Min (min' extent);  	if (min > max)  		max = min;  	if (position < min)  		position = min;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: min = (int)((float)(e.X - 3) / ((float)width / (float)extent));  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode == 2) {  	// right arrow tracking  	max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  	max = Math.Max (max' 0);  	max = Math.Min (max' extent);  	if (max < min)  		min = max;  	if (position > max)  		position = max;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode == 2) {  	// right arrow tracking  	max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  	max = Math.Max (max' 0);  	max = Math.Min (max' extent);  	if (max < min)  		min = max;  	if (position > max)  		position = max;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: max = (int)((float)(e.X - 3) / ((float)width / (float)extent));  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode == 3) {  	//time marker tracking  	position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  	position = Math.Max (position' 0);  	position = Math.Min (position' extent);  	if (position > max)  		position = max;  	if (position < min)  		position = min;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (trackMode == 3) {  	//time marker tracking  	position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  	position = Math.Max (position' 0);  	position = Math.Min (position' extent);  	if (position > max)  		position = max;  	if (position < min)  		position = min;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: position = (int)((float)(e.X - 3) / ((float)width / (float)extent));  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if ((e.Y >= y) && (e.Y < y + 6)) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  	else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  		Cursor = Cursors.SizeWE;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (max * ((float)width / extent))) && (e.X < x + (max * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  else if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if ((e.X >= 2 - x + (min * ((float)width / extent))) && (e.X < x + (min * ((float)width / extent)) + 8)) {  	Cursor = Cursors.SizeWE;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (e.Y < y) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  		Cursor = Cursors.VSplit;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (e.Y < y) {  	// check X coordinate  	if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  		Cursor = Cursors.VSplit;  	}  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  	Cursor = Cursors.VSplit;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_MouseMove,The following statement contains a magic number: if (this.doubleArrow && (e.X >= 2 - x + (position * ((float)width / extent))) && (e.X < x + (position * ((float)width / extent)) + 8)) {  	Cursor = Cursors.VSplit;  }  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeCodeString,The following statement contains a magic number: timebase = msecs % 60000;  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeCodeString,The following statement contains a magic number: timebase = msecs % 3600000;  
Magic Number,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,TimeCodeString,The following statement contains a magic number: return (msecs / 3600000).ToString () + ":" + mins + ":" + secs + ";" + frames;  
Magic Number,DaggerLib.DSGraphEdit,DSGrapheditROTEntry,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\Utils.cs,DSGrapheditROTEntry,The following statement contains a magic number: if (tokens.Length == 4) {  	_filterPtr = new IntPtr (Convert.ToInt64 (tokens [1]' 16));  	_pid = Convert.ToInt32 (tokens [3]' 16);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGrapheditROTEntry,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\Utils.cs,DSGrapheditROTEntry,The following statement contains a magic number: if (tokens.Length == 4) {  	_filterPtr = new IntPtr (Convert.ToInt64 (tokens [1]' 16));  	_pid = Convert.ToInt32 (tokens [3]' 16);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGrapheditROTEntry,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\Utils.cs,DSGrapheditROTEntry,The following statement contains a magic number: if (tokens.Length == 4) {  	_filterPtr = new IntPtr (Convert.ToInt64 (tokens [1]' 16));  	_pid = Convert.ToInt32 (tokens [3]' 16);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGrapheditROTEntry,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\Utils.cs,DSGrapheditROTEntry,The following statement contains a magic number: if (tokens.Length == 4) {  	_filterPtr = new IntPtr (Convert.ToInt64 (tokens [1]' 16));  	_pid = Convert.ToInt32 (tokens [3]' 16);  }  
Magic Number,DaggerLib.DSGraphEdit,DSGrapheditROTEntry,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\Utils.cs,DSGrapheditROTEntry,The following statement contains a magic number: _filterPtr = new IntPtr (Convert.ToInt64 (tokens [1]' 16));  
Magic Number,DaggerLib.DSGraphEdit,DSGrapheditROTEntry,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\Utils.cs,DSGrapheditROTEntry,The following statement contains a magic number: _pid = Convert.ToInt32 (tokens [3]' 16);  
Magic Number,DaggerLib.DSGraphEdit,DSGrapheditROTEntry,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\Utils.cs,DSGrapheditROTEntry,The following statement contains a magic number: _pid = Convert.ToInt32 (tokens [3]' 16);  
Magic Number,DaggerLib.DSGraphEdit,VideoInternalWindow,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\VideoInternalWindow.cs,DetachVideoWindow,The following statement contains a magic number: _detachedWindow.Size = new Size (320' 240);  
Magic Number,DaggerLib.DSGraphEdit,VideoInternalWindow,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\VideoInternalWindow.cs,DetachVideoWindow,The following statement contains a magic number: _detachedWindow.Size = new Size (320' 240);  
Magic Number,DaggerLib.DSGraphEdit,VideoInternalWindow,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\VideoInternalWindow.cs,WndProc,The following statement contains a magic number: if (m.Msg == 2)// Catch WM_Destroy to reassign the VideoWindow owner   {  	if (_detachedWindow == null && _vw != null) {  		// The EVR easily handles this' but VMR7 and VMR9 parent windows have to be reset  		// when they lose the Handle.  		_vw.put_Visible (OABool.False);  		_vw.put_Owner (IntPtr.Zero);  	}  	_handleLost = true;  }  
Magic Number,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,FindFilterByName,The following statement contains a magic number: if (hr == 0) {  	IBaseFilter[] filters = new IBaseFilter[1];  	IntPtr fetched = Marshal.AllocCoTaskMem (4);  	try {  		while (enumFilters.Next (filters.Length' filters' fetched) == 0) {  			FilterInfo filterInfo;  			hr = filters [0].QueryFilterInfo (out filterInfo);  			if (hr == 0) {  				if (filterInfo.pGraph != null)  					Marshal.ReleaseComObject (filterInfo.pGraph);  				if (filterInfo.achName.Equals (filterName)) {  					filter = filters [0];  					break;  				}  			}  			Marshal.ReleaseComObject (filters [0]);  		}  	}  	finally {  		Marshal.ReleaseComObject (enumFilters);  		Marshal.FreeCoTaskMem (fetched);  	}  }  
Magic Number,DirectShowLib.Utils,FilterGraphTools,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\FilterGraphTools.cs,FindFilterByClsid,The following statement contains a magic number: if (hr == 0) {  	IBaseFilter[] filters = new IBaseFilter[1];  	IntPtr fetched = Marshal.AllocCoTaskMem (4);  	try {  		while (enumFilters.Next (filters.Length' filters' fetched) == 0) {  			Guid clsid;  			hr = filters [0].GetClassID (out clsid);  			if ((hr == 0) && (clsid == filterClsid)) {  				filter = filters [0];  				break;  			}  			Marshal.ReleaseComObject (filters [0]);  		}  	}  	finally {  		Marshal.FreeCoTaskMem (fetched);  		Marshal.ReleaseComObject (enumFilters);  	}  }  
Missing Default,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseDown,The following switch statement is missing a default case: switch (this.barOrientation) {  case Orientations.Horizontal:  	mousestartPos = CurPoint.X - trackRect.X;  	break;  case Orientations.Vertical:  	mousestartPos = CurPoint.Y - trackRect.Y;  	break;  }  
Missing Default,DaggerLib.DSGraphEdit,ColorTrackBar,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DMOParameterControls\ColorTrackbar.cs,OnMouseMove,The following switch statement is missing a default case: switch (this.barOrientation) {  case Orientations.Horizontal:  	if (trackRect.Right + (CurPoint.X - trackRect.X - mousestartPos) >= this.Width)  		OffSet = this.Width - trackRect.Right - 1;  	else if (trackRect.Left + (CurPoint.X - trackRect.X - mousestartPos) <= 0)  		OffSet = (trackRect.Left - 1) * -1;  	else  		OffSet = CurPoint.X - trackRect.X - mousestartPos;  	trackRect.Offset (OffSet' 0);  	trackerValue = (int)(((trackRect.X - 1) * (barMaximum - barMinimum)) / (this.Width - trackSize - 2));  	if (maxSide == Poles.Left)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  case Orientations.Vertical:  	if (trackRect.Bottom + (CurPoint.Y - trackRect.Y - mousestartPos) >= this.Height)  		OffSet = this.Height - trackRect.Bottom - 1;  	else if (trackRect.Top + (CurPoint.Y - trackRect.Y - mousestartPos) <= 0)  		OffSet = (trackRect.Top - 1) * -1;  	else  		OffSet = CurPoint.Y - trackRect.Y - mousestartPos;  	trackRect.Offset (0' OffSet);  	trackerValue = (int)(((trackRect.Y - 1) * (barMaximum - barMinimum)) / (this.Height - trackSize - 2));  	if (maxSide == Poles.Top)  		trackerValue = (trackerValue - (barMaximum - barMinimum)) * -1;  	break;  }  
Missing Default,DaggerLib.DSGraphEdit,DSGraphEditPanel,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditPanel.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case WMGraphNotify: {  	HandleGraphEvent ();  	break;  }  }  
Missing Default,DaggerLib.DSGraphEdit,TimeSliderControl,C:\repos\FerozAhmed_DSGraphEdit\DaggerLib.DSGraphEdit\DSGraphEditControls\TimeSliderControl.cs,GradientRange_Paint,The following switch statement is missing a default case: switch (type) {  case ColorSliderType.Gradient:  case ColorSliderType.InnerGradient:  case ColorSliderType.OuterGradient:  	// create gradient brush  	brush = new LinearGradientBrush (new Point (x' 0)' new Point (x + this.Width' 0)' color1' color2);  	g.FillRectangle (brush' x' y' width' height);  	brush.Dispose ();  	// check type  	if (type == ColorSliderType.InnerGradient) {  		// inner gradient  		brush = new SolidBrush (color3);  		if (min != 0) {  			g.FillRectangle (brush' x' y' (min * ((float)width / extent))' height);  		}  		if (max != extent) {  			g.FillRectangle (brush' x + (max * ((float)width / extent)) + 1' y' (extent * ((float)width / extent)) - (max * ((float)width / extent))' height);  		}  		brush.Dispose ();  	}  	else if (type == ColorSliderType.OuterGradient) {  		// outer gradient  		brush = new SolidBrush (color3);  		// fill space between min & max with color 3  		g.FillRectangle (brush' x + (min * ((float)width / extent))' y' (max * ((float)width / extent)) - (min * ((float)width / extent)) + 1' height);  		brush.Dispose ();  	}  	break;  case ColorSliderType.Threshold:  	// 1 - fill with color 1  	brush = new SolidBrush (color1);  	g.FillRectangle (brush' x' y' width' height);  	brush.Dispose ();  	// 2 - fill space between min & max with color 2  	brush = new SolidBrush (color2);  	if (extent == 0)  		extent = 1;  	g.FillRectangle (brush' x + (min * ((float)width / extent))' y' (max * ((float)width / extent)) - (min * ((float)width / extent)) + 1' height);  	brush.Dispose ();  	break;  }  
