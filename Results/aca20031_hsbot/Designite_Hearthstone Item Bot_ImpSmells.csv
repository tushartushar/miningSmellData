Implementation smell,Namespace,Class,File,Method,Description
Long Method,HSBot.Cards,Card,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\Card.cs,GetFullText,The method has 117 lines of code.
Long Method,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,The method has 173 lines of code.
Complex Method,HSBot.Cards,Card,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\Card.cs,GetFullText,Cyclomatic complexity of the method is 12
Complex Method,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,Cyclomatic complexity of the method is 14
Long Parameter List,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnKick,The method has 5 parameters. Parameters: sender' source' target' channel' reason
Long Parameter List,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnNumericReceived,The method has 5 parameters. Parameters: sender' source' numeric' target' other
Long Parameter List,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ConnectAsync,The method has 6 parameters. Parameters: nick' user' realname' host' port' password
Long Statement,HSBot.Cards,Card,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\Card.cs,ReplaceDollarWithStar,The length of the statement  "            // Create a SB to store results. Same as the original with room for 1 more *. If more are needed (rare case) it will be resized. " is 128.
Long Statement,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,Extract,The length of the statement  "            Queue<KeyValuePair<String' KeyValuePair<long' long>>> xmlOffsets = new Queue<KeyValuePair<String' KeyValuePair<long' long>>>(); " is 127.
Long Statement,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,The length of the statement  "                        if (card.Type == (int)Card.CardType.HERO || card.Type == (int)Card.CardType.EFFECT) // Heros? 3 included the Hero "Hogger" 0/10 -- 4 may be creatures -- 7 may be weapons (warrior) " is 179.
Long Statement,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,The length of the statement  "            hearthbot.Description = @"<b>Battlecry:</b> Destroy all secrets and deal 100 damage to the enemy hero. To get it' go here: https://github.com/aca20031/hsbot/"; " is 159.
Long Statement,HSBot,Config,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Config.cs,Reload,The length of the statement  "            AutoTriggerMatchRequirement = int.Parse(doc.DocumentElement.SelectSingleNode("/config/autotrigger/matchrequirement").InnerText); " is 128.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,StartConnect,The length of the statement  "                            sender.ConnectAsync(Config.IRCNick' Config.IRCUser' Config.IRCName' Config.IRCHost' Config.IRCPort' Config.IRCPass).Wait(); " is 123.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,StartConnect,The length of the statement  "            // The point of this is to prevent flooding. This is done by indexing into  to m_flowRateMap with the nickname and incrementing the number value when they talk " is 159.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,StartConnect,The length of the statement  "            // Everry 1 second' we check to see if FlowRateSeconds has past since the last time they used a command and if so' decrement it " is 127.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,OnPrivmsg,The length of the statement  "            if (lowerMessage.StartsWith("!card ") && message.Length > "!card ".Length && message.Length <= (Config.MaxCardNameLength + "!card ".Length)) " is 140.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The length of the statement  "                    var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString()); " is 137.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,GetYoutubeVideoIDFromUriAsync,The length of the statement  "            m_httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("text/html"' 1.0)); " is 125.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,GetYoutubeDataFromIDAsync,The length of the statement  "            String url = String.Format("https://www.googleapis.com/youtube/v3/videos?id={0}&key=AIzaSyDWaA2OoArAjQTHqmN6r9XrpHYNkpKGyGw&part=snippet'contentDetails'statistics'status"' id); " is 176.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                    // 2.) If the card name given is a substring of this card name' boost the percentage to allow for lazy matching of long names " is 125.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                            double match = 1 - (LevenshteinDistance(searchWordsKvp.Key' testCardNameWord) / (double)Math.Max(searchWordsKvp.Key.Length' testCardNameWord.Length)); " is 150.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                            if (searchWordsKvp.Value.Reverse().First((t) => t.IsValid).MatchPercentage > highest.Value.Reverse().First((t) => t.IsValid).MatchPercentage) " is 141.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                        // Remove one instance of this test word from the match sets of all the search words so we dont consider it in the next iterations " is 130.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                            searchWordsKvp.Value.Reverse().First<MatchResult<string>> ((test) => test.IsValid && test.Item.Equals(maxValue.Item)).IsValid = false; " is 134.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                            Console.WriteLine("\tTest string percent: {0}% has weight {1}%"' percentOfTestStringMatched * 100' weightOfSearchString * 100); " is 127.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                            Console.WriteLine("\tSearch string percent: {0}% has weight {1}%"' percentOfSearchStringMatched * 100' weightOfTestString * 100); " is 129.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                            Console.WriteLine("\tTotal added contribution: {0}%"' percentOfSearchStringMatched * maxValue.MatchPercentage * weightOfSearchString + percentOfTestStringMatched * maxValue.MatchPercentage * weightOfTestString); " is 211.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                    // This allows lazy searches like "rag" to match "ragnarous" even though it is really a small percentage of the whole card " is 122.
Long Statement,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The length of the statement  "                        MatchResult<CardSet> result = new MatchResult<CardSet>(cardMapKvp.Value'percentMatch == 1 ? 1 : Math.Min(0.99' percentMatch)); " is 126.
Long Statement,HSBot,Program,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Program.cs,Main,The length of the statement  "                Console.Error.WriteLine("Config file corrupt. Please makes sure all the values in config.xml make sense. If you just updated' the structure may have changed - please reconfigure."); " is 181.
Long Statement,HSBot,Program,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Program.cs,GetCardDataFile,The length of the statement  "            Object hsInstall = Microsoft.Win32.Registry.GetValue(@"HKEY_LOCAL_MACHINE\Software" + (IntPtr.Size == 8 ? @"\Wow6432Node" : "") + @"\Microsoft\Windows\CurrentVersion\Uninstall\Hearthstone"' "InstallLocation"' null); " is 215.
Long Statement,HSBot,Program,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Program.cs,GetCardDataFile,The length of the statement  "                Console.WriteLine("Hearthstone installation not found. Enter the absolute path to cardxml0.unity3d or nothing to use the same directory as HSBot.exe"); " is 151.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The length of the statement  "            // Keeps this at the end of the method so that the more specific event' as well as internal events' are all handled first " is 121.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnNick,The length of the statement  "            Debug.Assert(fFoundUser' "A user changed his nickname but doesn't appear to be in our nick list. Nick change: {0} -> {1}"' oldNick' newNick); " is 141.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnKick,The length of the statement  "                Debug.Assert(channelObject != null' "Any channel on which we receive a KICK should be in our channel list"' "Channel: {0}"' channel); " is 133.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMode,The length of the statement  "                    // This loop walks through the mode list and keeps track for each one 1.) The mode' 2.) If it is set 3.) If it has a parameter and 4.) The index of the parameter " is 161.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMode,The length of the statement  "                                continue; // This mode only has a parameter when being set' so it does not have a parameter in the list if it is not being set " is 126.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMode,The length of the statement  "                                        // This can happen if users are hidden or servers get a little loose with the rules' so let's pretend like he's in there. " is 121.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMode,The length of the statement  "                                    Debug.Assert(modeIndexIntoPrefixList >= 0' "Mode set on user that was not in PREFIX list. This could be because we fell back to a default list."); " is 146.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnNames,The length of the statement  "                    for (nameStart = 0; sender.ServerInfo.PREFIX_symbols != null && sender.ServerInfo.PREFIX_symbols.Contains(name[nameStart]); ++nameStart) ; " is 138.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnNames,The length of the statement  "                    /// If we are in the NAMES reply for a channel' that means we are in that channel and should make sure it is in our list " is 120.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnJoin,The length of the statement  "                    Debug.Assert(!c.Users.ContainsKey(u.Nick.ToLower())' "Received a JOIN for a user that was already in the ChannelUser list"' "User: {0}"' u.Nick); " is 145.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ConnectAsync,The length of the statement  "                            m_pingTimer.Change(TimeSpan.FromMilliseconds(Timeout.TotalMilliseconds / 2)' TimeSpan.FromMilliseconds(Timeout.TotalMilliseconds / 2)); " is 135.
Long Statement,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,NumericHandler,The length of the statement  "                    ieOnNumericReceived(this' words[0]' numeric' words[2]' words.Length > 3 ? message.Substring(message.IndexOf(words[2]) + words[2].Length + 1) : null); " is 149.
Long Statement,benbuzbee.LRTIRC,ChannelUser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,InsertPrefix,The length of the statement  "            Debug.Assert(svrInfo.PREFIX_symbols != null' "svrInfo.PREFIX_symbols is null - it should have been set when we received ISUPPORT from the server.  It is not possible to maintain a prefix list without this information"); " is 219.
Long Statement,benbuzbee.LRTIRC,ChannelUser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,InsertPrefix,The length of the statement  "            Debug.Assert(svrInfo.PREFIX_symbols.Contains(prefix)' "svrInfo.PREFIX_symbols is non-null but does not contain the prefix that was inserted"' "Prefix: {0}"' prefix); " is 165.
Long Statement,benbuzbee.LRTIRC,ChannelUser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,InsertPrefix,The length of the statement  "                    /// Find the first prefix in the current list (newList) whose value is less than this new prefix' and insert at that position " is 125.
Long Statement,benbuzbee.LRTIRC,ChannelUser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,InsertPrefix,The length of the statement  "                        else if (i + 1 == m_prefixes.Length) // If we've reached the end and still haven't found one of lower value' then this one belongs at the end " is 141.
Long Statement,benbuzbee.LRTIRC,IrcReader,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ThreadStart,The length of the statement  "                    catch (ThreadInterruptedException) { Log.Info("Reader thread was interrupted."); /* Allow interrupts to break us out of the read-wait loop but not the entire thread */ } " is 169.
Long Statement,benbuzbee.LRTIRC,IrcReader,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ThreadStart,The length of the statement  "                catch (ThreadInterruptedException) { Log.Info("Reader thread was interrupted while blocked. m_alive={0}"'m_alive); /* If interrupted' it's either ReleaseStream (go back and wait) or its Kill (go back and find m_alive to be false) */ } " is 234.
Empty Catch Block,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,HandleUrlAndReply,The method has an empty catch block.
Empty Catch Block,HSBot,Program,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Program.cs,Main,The method has an empty catch block.
Empty Catch Block,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,DisconnectInternal,The method has an empty catch block.
Empty Catch Block,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,DisconnectInternal,The method has an empty catch block.
Magic Number,HSBot.Cards,Card,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\Card.cs,GetFullText,The following statement contains a magic number: StringBuilder sb = new StringBuilder(2048);
Magic Number,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,Extract,The following statement contains a magic number: using (FileStream input = File.OpenRead(fromFile))              {                   while (input.Position < input.Length)                  {                      // Find loc string                      input.SeekForAscii("\0\0\0\0\x04\0\0\0");                      // Read loc string                      byte[] locBuf = new byte[4];                      input.Read(locBuf' 0' locBuf.Length);                      String loc = Encoding.ASCII.GetString(locBuf' 0' locBuf.Length);                        // Seek past 4 unknown bytes to start of <CardDefs>                      input.Seek(4' SeekOrigin.Current);                      long start = input.Position;                                            // Find end                      input.SeekForAscii("</CardDefs>");                      long end = input.Position;                        var positionPair = new KeyValuePair<long' long>(start' end);                      xmlOffsets.Enqueue(new KeyValuePair<String' KeyValuePair<long' long>>(loc' positionPair));                    }                  input.Close();              }
Magic Number,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,Extract,The following statement contains a magic number: using (FileStream input = File.OpenRead(fromFile))              {                   while (input.Position < input.Length)                  {                      // Find loc string                      input.SeekForAscii("\0\0\0\0\x04\0\0\0");                      // Read loc string                      byte[] locBuf = new byte[4];                      input.Read(locBuf' 0' locBuf.Length);                      String loc = Encoding.ASCII.GetString(locBuf' 0' locBuf.Length);                        // Seek past 4 unknown bytes to start of <CardDefs>                      input.Seek(4' SeekOrigin.Current);                      long start = input.Position;                                            // Find end                      input.SeekForAscii("</CardDefs>");                      long end = input.Position;                        var positionPair = new KeyValuePair<long' long>(start' end);                      xmlOffsets.Enqueue(new KeyValuePair<String' KeyValuePair<long' long>>(loc' positionPair));                    }                  input.Close();              }
Magic Number,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,The following statement contains a magic number: foreach (XmlNode entity in entityNodes)              {                  try                  {                      XmlAttribute entityCardID = entity.Attributes["CardID"];                        if (entityCardID == null)                      {                          Console.Error.WriteLine("Card had no CardID");                          continue;                      }                        String cardName = GetTagInnerText(entity' CardTag.NAME);                      if (cardName == null)                      {                          Console.Error.WriteLine("Card had no card name tag");                          continue;                      }                        Card card = new Card(entityCardID.Value);                      card.XmlData = entity.ToString();                        card.Name = cardName;                        card.Description = GetTagInnerText(entity' CardTag.DESCRIPTION);                        int iValue;                        if (TryGetTagIntValue(entity' CardTag.ATTACK' out iValue))                      {                          card.Attack = iValue;                      }                        if (TryGetTagIntValue(entity' CardTag.HEALTH' out iValue))                      {                          card.Health = iValue;                      }                        if (TryGetTagIntValue(entity' CardTag.COST' out iValue))                      {                          card.Cost = iValue;                      }                        int iDurability;                      if (TryGetTagIntValue(entity' CardTag.DURABILITY' out iDurability))                      {                          card.Health = iDurability;                      }                        int iClassId;                      if (TryGetTagIntValue(entity' CardTag.CLASS_ID' out iClassId))                      {                          switch (iClassId)                          {                              case (int)Card.ClassValues.MAGE:                                  card.Class = Card.ClassValues.MAGE;                                  break;                              case (int)Card.ClassValues.SHAMAN:                                  card.Class = Card.ClassValues.SHAMAN;                                  break;                              case (int)Card.ClassValues.ROGUE:                                  card.Class = Card.ClassValues.ROGUE;                                  break;                              case (int)Card.ClassValues.PALADIN:                                  card.Class = Card.ClassValues.PALADIN;                                  break;                              case (int)Card.ClassValues.PRIEST:                                  card.Class = Card.ClassValues.PRIEST;                                  break;                              case (int)Card.ClassValues.WARRIOR:                                  card.Class = Card.ClassValues.WARRIOR;                                  break;                              case (int)Card.ClassValues.WARLOCK:                                  card.Class = Card.ClassValues.WARLOCK;                                  break;                              case (int)Card.ClassValues.DRUID:                                  card.Class = Card.ClassValues.DRUID;                                  break;                              case (int)Card.ClassValues.HUNTER:                                  card.Class = Card.ClassValues.HUNTER;                                  break;                              default:                                  card.Class = Card.ClassValues.ALL;                                  Console.Error.WriteLine("Unknown class: {0} Class {1}"' card.Name' iClassId);                                  break;                          }                      }                      else                          card.Class = Card.ClassValues.ALL;                        string rarity = GetTagValue(entity' CardTag.RARITY);                      int iRarity;                        if (TryGetTagIntValue(entity' CardTag.RARITY' out iRarity))                      {                          switch (iRarity)                          {                              case 1:                                  card.Rarity = Card.RarityValues.COMMON;                                  break;                              case 2:                                  card.Rarity = Card.RarityValues.FREE;                                  break;                              case 3:                                  card.Rarity = Card.RarityValues.RARE;                                  break;                              case 4:                                  card.Rarity = Card.RarityValues.EPIC;                                  break;                              case 5:                                  card.Rarity = Card.RarityValues.LEGENDARY;                                  break;                              default:                                  card.Rarity = Card.RarityValues.UNKNOWN;                                  break;                          }                      }                      else                          card.Rarity = Card.RarityValues.UNKNOWN;                        int iFamily;                      if (TryGetTagIntValue(entity' CardTag.FAMILY' out iFamily))                      {                          switch (iFamily)                          {                              case (int)Card.CardFamily.MURLOC:                                  card.Family = Card.CardFamily.MURLOC;                                  break;                              case (int)Card.CardFamily.BEAST:                                  card.Family = Card.CardFamily.BEAST;                                  break;                              case (int)Card.CardFamily.DEMON:                                  card.Family = Card.CardFamily.DEMON;                                  break;                              case (int)Card.CardFamily.MECH:                                  card.Family = Card.CardFamily.MECH;                                  break;                              case (int)Card.CardFamily.TOTEM:                                  card.Family = Card.CardFamily.TOTEM;                                  break;                              case (int)Card.CardFamily.PIRATE:                                  card.Family = Card.CardFamily.PIRATE;                                  break;                              case (int)Card.CardFamily.DRAGON:                                  card.Family = Card.CardFamily.DRAGON;                                  break;                              default:                                  System.Diagnostics.Debug.Assert(false' "Unknown card family :" + iFamily);                                  Console.Error.WriteLine("Unknown card family {0}"' iFamily);                                  card.Family = Card.CardFamily.UNKNOWN;                                  break;                          }                      }                      else                          card.Family = Card.CardFamily.UNKNOWN;                        /*                      XmlNode type = entity.SelectSingleNode("Tag[@name=\"CardType\"]");                      if (type != null)                      {                          card.Type = int.Parse(type.Attributes["value"].Value);                          if (card.Type == (int)Card.CardType.HERO || card.Type == (int)Card.CardType.EFFECT) // Heros? 3 included the Hero "Hogger" 0/10 -- 4 may be creatures -- 7 may be weapons (warrior)                              continue;                      }                      */                        card.FlavorText = GetTagInnerText(entity' CardTag.FLAVOR_TEXT);                                            cards.Add(card);                  }                  catch (XmlException exception)                  {                      Console.Error.WriteLine("There was an XML error while parsing a card.");                      Console.Error.WriteLine(exception);                  }                  }
Magic Number,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,The following statement contains a magic number: foreach (XmlNode entity in entityNodes)              {                  try                  {                      XmlAttribute entityCardID = entity.Attributes["CardID"];                        if (entityCardID == null)                      {                          Console.Error.WriteLine("Card had no CardID");                          continue;                      }                        String cardName = GetTagInnerText(entity' CardTag.NAME);                      if (cardName == null)                      {                          Console.Error.WriteLine("Card had no card name tag");                          continue;                      }                        Card card = new Card(entityCardID.Value);                      card.XmlData = entity.ToString();                        card.Name = cardName;                        card.Description = GetTagInnerText(entity' CardTag.DESCRIPTION);                        int iValue;                        if (TryGetTagIntValue(entity' CardTag.ATTACK' out iValue))                      {                          card.Attack = iValue;                      }                        if (TryGetTagIntValue(entity' CardTag.HEALTH' out iValue))                      {                          card.Health = iValue;                      }                        if (TryGetTagIntValue(entity' CardTag.COST' out iValue))                      {                          card.Cost = iValue;                      }                        int iDurability;                      if (TryGetTagIntValue(entity' CardTag.DURABILITY' out iDurability))                      {                          card.Health = iDurability;                      }                        int iClassId;                      if (TryGetTagIntValue(entity' CardTag.CLASS_ID' out iClassId))                      {                          switch (iClassId)                          {                              case (int)Card.ClassValues.MAGE:                                  card.Class = Card.ClassValues.MAGE;                                  break;                              case (int)Card.ClassValues.SHAMAN:                                  card.Class = Card.ClassValues.SHAMAN;                                  break;                              case (int)Card.ClassValues.ROGUE:                                  card.Class = Card.ClassValues.ROGUE;                                  break;                              case (int)Card.ClassValues.PALADIN:                                  card.Class = Card.ClassValues.PALADIN;                                  break;                              case (int)Card.ClassValues.PRIEST:                                  card.Class = Card.ClassValues.PRIEST;                                  break;                              case (int)Card.ClassValues.WARRIOR:                                  card.Class = Card.ClassValues.WARRIOR;                                  break;                              case (int)Card.ClassValues.WARLOCK:                                  card.Class = Card.ClassValues.WARLOCK;                                  break;                              case (int)Card.ClassValues.DRUID:                                  card.Class = Card.ClassValues.DRUID;                                  break;                              case (int)Card.ClassValues.HUNTER:                                  card.Class = Card.ClassValues.HUNTER;                                  break;                              default:                                  card.Class = Card.ClassValues.ALL;                                  Console.Error.WriteLine("Unknown class: {0} Class {1}"' card.Name' iClassId);                                  break;                          }                      }                      else                          card.Class = Card.ClassValues.ALL;                        string rarity = GetTagValue(entity' CardTag.RARITY);                      int iRarity;                        if (TryGetTagIntValue(entity' CardTag.RARITY' out iRarity))                      {                          switch (iRarity)                          {                              case 1:                                  card.Rarity = Card.RarityValues.COMMON;                                  break;                              case 2:                                  card.Rarity = Card.RarityValues.FREE;                                  break;                              case 3:                                  card.Rarity = Card.RarityValues.RARE;                                  break;                              case 4:                                  card.Rarity = Card.RarityValues.EPIC;                                  break;                              case 5:                                  card.Rarity = Card.RarityValues.LEGENDARY;                                  break;                              default:                                  card.Rarity = Card.RarityValues.UNKNOWN;                                  break;                          }                      }                      else                          card.Rarity = Card.RarityValues.UNKNOWN;                        int iFamily;                      if (TryGetTagIntValue(entity' CardTag.FAMILY' out iFamily))                      {                          switch (iFamily)                          {                              case (int)Card.CardFamily.MURLOC:                                  card.Family = Card.CardFamily.MURLOC;                                  break;                              case (int)Card.CardFamily.BEAST:                                  card.Family = Card.CardFamily.BEAST;                                  break;                              case (int)Card.CardFamily.DEMON:                                  card.Family = Card.CardFamily.DEMON;                                  break;                              case (int)Card.CardFamily.MECH:                                  card.Family = Card.CardFamily.MECH;                                  break;                              case (int)Card.CardFamily.TOTEM:                                  card.Family = Card.CardFamily.TOTEM;                                  break;                              case (int)Card.CardFamily.PIRATE:                                  card.Family = Card.CardFamily.PIRATE;                                  break;                              case (int)Card.CardFamily.DRAGON:                                  card.Family = Card.CardFamily.DRAGON;                                  break;                              default:                                  System.Diagnostics.Debug.Assert(false' "Unknown card family :" + iFamily);                                  Console.Error.WriteLine("Unknown card family {0}"' iFamily);                                  card.Family = Card.CardFamily.UNKNOWN;                                  break;                          }                      }                      else                          card.Family = Card.CardFamily.UNKNOWN;                        /*                      XmlNode type = entity.SelectSingleNode("Tag[@name=\"CardType\"]");                      if (type != null)                      {                          card.Type = int.Parse(type.Attributes["value"].Value);                          if (card.Type == (int)Card.CardType.HERO || card.Type == (int)Card.CardType.EFFECT) // Heros? 3 included the Hero "Hogger" 0/10 -- 4 may be creatures -- 7 may be weapons (warrior)                              continue;                      }                      */                        card.FlavorText = GetTagInnerText(entity' CardTag.FLAVOR_TEXT);                                            cards.Add(card);                  }                  catch (XmlException exception)                  {                      Console.Error.WriteLine("There was an XML error while parsing a card.");                      Console.Error.WriteLine(exception);                  }                  }
Magic Number,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,The following statement contains a magic number: foreach (XmlNode entity in entityNodes)              {                  try                  {                      XmlAttribute entityCardID = entity.Attributes["CardID"];                        if (entityCardID == null)                      {                          Console.Error.WriteLine("Card had no CardID");                          continue;                      }                        String cardName = GetTagInnerText(entity' CardTag.NAME);                      if (cardName == null)                      {                          Console.Error.WriteLine("Card had no card name tag");                          continue;                      }                        Card card = new Card(entityCardID.Value);                      card.XmlData = entity.ToString();                        card.Name = cardName;                        card.Description = GetTagInnerText(entity' CardTag.DESCRIPTION);                        int iValue;                        if (TryGetTagIntValue(entity' CardTag.ATTACK' out iValue))                      {                          card.Attack = iValue;                      }                        if (TryGetTagIntValue(entity' CardTag.HEALTH' out iValue))                      {                          card.Health = iValue;                      }                        if (TryGetTagIntValue(entity' CardTag.COST' out iValue))                      {                          card.Cost = iValue;                      }                        int iDurability;                      if (TryGetTagIntValue(entity' CardTag.DURABILITY' out iDurability))                      {                          card.Health = iDurability;                      }                        int iClassId;                      if (TryGetTagIntValue(entity' CardTag.CLASS_ID' out iClassId))                      {                          switch (iClassId)                          {                              case (int)Card.ClassValues.MAGE:                                  card.Class = Card.ClassValues.MAGE;                                  break;                              case (int)Card.ClassValues.SHAMAN:                                  card.Class = Card.ClassValues.SHAMAN;                                  break;                              case (int)Card.ClassValues.ROGUE:                                  card.Class = Card.ClassValues.ROGUE;                                  break;                              case (int)Card.ClassValues.PALADIN:                                  card.Class = Card.ClassValues.PALADIN;                                  break;                              case (int)Card.ClassValues.PRIEST:                                  card.Class = Card.ClassValues.PRIEST;                                  break;                              case (int)Card.ClassValues.WARRIOR:                                  card.Class = Card.ClassValues.WARRIOR;                                  break;                              case (int)Card.ClassValues.WARLOCK:                                  card.Class = Card.ClassValues.WARLOCK;                                  break;                              case (int)Card.ClassValues.DRUID:                                  card.Class = Card.ClassValues.DRUID;                                  break;                              case (int)Card.ClassValues.HUNTER:                                  card.Class = Card.ClassValues.HUNTER;                                  break;                              default:                                  card.Class = Card.ClassValues.ALL;                                  Console.Error.WriteLine("Unknown class: {0} Class {1}"' card.Name' iClassId);                                  break;                          }                      }                      else                          card.Class = Card.ClassValues.ALL;                        string rarity = GetTagValue(entity' CardTag.RARITY);                      int iRarity;                        if (TryGetTagIntValue(entity' CardTag.RARITY' out iRarity))                      {                          switch (iRarity)                          {                              case 1:                                  card.Rarity = Card.RarityValues.COMMON;                                  break;                              case 2:                                  card.Rarity = Card.RarityValues.FREE;                                  break;                              case 3:                                  card.Rarity = Card.RarityValues.RARE;                                  break;                              case 4:                                  card.Rarity = Card.RarityValues.EPIC;                                  break;                              case 5:                                  card.Rarity = Card.RarityValues.LEGENDARY;                                  break;                              default:                                  card.Rarity = Card.RarityValues.UNKNOWN;                                  break;                          }                      }                      else                          card.Rarity = Card.RarityValues.UNKNOWN;                        int iFamily;                      if (TryGetTagIntValue(entity' CardTag.FAMILY' out iFamily))                      {                          switch (iFamily)                          {                              case (int)Card.CardFamily.MURLOC:                                  card.Family = Card.CardFamily.MURLOC;                                  break;                              case (int)Card.CardFamily.BEAST:                                  card.Family = Card.CardFamily.BEAST;                                  break;                              case (int)Card.CardFamily.DEMON:                                  card.Family = Card.CardFamily.DEMON;                                  break;                              case (int)Card.CardFamily.MECH:                                  card.Family = Card.CardFamily.MECH;                                  break;                              case (int)Card.CardFamily.TOTEM:                                  card.Family = Card.CardFamily.TOTEM;                                  break;                              case (int)Card.CardFamily.PIRATE:                                  card.Family = Card.CardFamily.PIRATE;                                  break;                              case (int)Card.CardFamily.DRAGON:                                  card.Family = Card.CardFamily.DRAGON;                                  break;                              default:                                  System.Diagnostics.Debug.Assert(false' "Unknown card family :" + iFamily);                                  Console.Error.WriteLine("Unknown card family {0}"' iFamily);                                  card.Family = Card.CardFamily.UNKNOWN;                                  break;                          }                      }                      else                          card.Family = Card.CardFamily.UNKNOWN;                        /*                      XmlNode type = entity.SelectSingleNode("Tag[@name=\"CardType\"]");                      if (type != null)                      {                          card.Type = int.Parse(type.Attributes["value"].Value);                          if (card.Type == (int)Card.CardType.HERO || card.Type == (int)Card.CardType.EFFECT) // Heros? 3 included the Hero "Hogger" 0/10 -- 4 may be creatures -- 7 may be weapons (warrior)                              continue;                      }                      */                        card.FlavorText = GetTagInnerText(entity' CardTag.FLAVOR_TEXT);                                            cards.Add(card);                  }                  catch (XmlException exception)                  {                      Console.Error.WriteLine("There was an XML error while parsing a card.");                      Console.Error.WriteLine(exception);                  }                  }
Magic Number,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,The following statement contains a magic number: foreach (XmlNode entity in entityNodes)              {                  try                  {                      XmlAttribute entityCardID = entity.Attributes["CardID"];                        if (entityCardID == null)                      {                          Console.Error.WriteLine("Card had no CardID");                          continue;                      }                        String cardName = GetTagInnerText(entity' CardTag.NAME);                      if (cardName == null)                      {                          Console.Error.WriteLine("Card had no card name tag");                          continue;                      }                        Card card = new Card(entityCardID.Value);                      card.XmlData = entity.ToString();                        card.Name = cardName;                        card.Description = GetTagInnerText(entity' CardTag.DESCRIPTION);                        int iValue;                        if (TryGetTagIntValue(entity' CardTag.ATTACK' out iValue))                      {                          card.Attack = iValue;                      }                        if (TryGetTagIntValue(entity' CardTag.HEALTH' out iValue))                      {                          card.Health = iValue;                      }                        if (TryGetTagIntValue(entity' CardTag.COST' out iValue))                      {                          card.Cost = iValue;                      }                        int iDurability;                      if (TryGetTagIntValue(entity' CardTag.DURABILITY' out iDurability))                      {                          card.Health = iDurability;                      }                        int iClassId;                      if (TryGetTagIntValue(entity' CardTag.CLASS_ID' out iClassId))                      {                          switch (iClassId)                          {                              case (int)Card.ClassValues.MAGE:                                  card.Class = Card.ClassValues.MAGE;                                  break;                              case (int)Card.ClassValues.SHAMAN:                                  card.Class = Card.ClassValues.SHAMAN;                                  break;                              case (int)Card.ClassValues.ROGUE:                                  card.Class = Card.ClassValues.ROGUE;                                  break;                              case (int)Card.ClassValues.PALADIN:                                  card.Class = Card.ClassValues.PALADIN;                                  break;                              case (int)Card.ClassValues.PRIEST:                                  card.Class = Card.ClassValues.PRIEST;                                  break;                              case (int)Card.ClassValues.WARRIOR:                                  card.Class = Card.ClassValues.WARRIOR;                                  break;                              case (int)Card.ClassValues.WARLOCK:                                  card.Class = Card.ClassValues.WARLOCK;                                  break;                              case (int)Card.ClassValues.DRUID:                                  card.Class = Card.ClassValues.DRUID;                                  break;                              case (int)Card.ClassValues.HUNTER:                                  card.Class = Card.ClassValues.HUNTER;                                  break;                              default:                                  card.Class = Card.ClassValues.ALL;                                  Console.Error.WriteLine("Unknown class: {0} Class {1}"' card.Name' iClassId);                                  break;                          }                      }                      else                          card.Class = Card.ClassValues.ALL;                        string rarity = GetTagValue(entity' CardTag.RARITY);                      int iRarity;                        if (TryGetTagIntValue(entity' CardTag.RARITY' out iRarity))                      {                          switch (iRarity)                          {                              case 1:                                  card.Rarity = Card.RarityValues.COMMON;                                  break;                              case 2:                                  card.Rarity = Card.RarityValues.FREE;                                  break;                              case 3:                                  card.Rarity = Card.RarityValues.RARE;                                  break;                              case 4:                                  card.Rarity = Card.RarityValues.EPIC;                                  break;                              case 5:                                  card.Rarity = Card.RarityValues.LEGENDARY;                                  break;                              default:                                  card.Rarity = Card.RarityValues.UNKNOWN;                                  break;                          }                      }                      else                          card.Rarity = Card.RarityValues.UNKNOWN;                        int iFamily;                      if (TryGetTagIntValue(entity' CardTag.FAMILY' out iFamily))                      {                          switch (iFamily)                          {                              case (int)Card.CardFamily.MURLOC:                                  card.Family = Card.CardFamily.MURLOC;                                  break;                              case (int)Card.CardFamily.BEAST:                                  card.Family = Card.CardFamily.BEAST;                                  break;                              case (int)Card.CardFamily.DEMON:                                  card.Family = Card.CardFamily.DEMON;                                  break;                              case (int)Card.CardFamily.MECH:                                  card.Family = Card.CardFamily.MECH;                                  break;                              case (int)Card.CardFamily.TOTEM:                                  card.Family = Card.CardFamily.TOTEM;                                  break;                              case (int)Card.CardFamily.PIRATE:                                  card.Family = Card.CardFamily.PIRATE;                                  break;                              case (int)Card.CardFamily.DRAGON:                                  card.Family = Card.CardFamily.DRAGON;                                  break;                              default:                                  System.Diagnostics.Debug.Assert(false' "Unknown card family :" + iFamily);                                  Console.Error.WriteLine("Unknown card family {0}"' iFamily);                                  card.Family = Card.CardFamily.UNKNOWN;                                  break;                          }                      }                      else                          card.Family = Card.CardFamily.UNKNOWN;                        /*                      XmlNode type = entity.SelectSingleNode("Tag[@name=\"CardType\"]");                      if (type != null)                      {                          card.Type = int.Parse(type.Attributes["value"].Value);                          if (card.Type == (int)Card.CardType.HERO || card.Type == (int)Card.CardType.EFFECT) // Heros? 3 included the Hero "Hogger" 0/10 -- 4 may be creatures -- 7 may be weapons (warrior)                              continue;                      }                      */                        card.FlavorText = GetTagInnerText(entity' CardTag.FLAVOR_TEXT);                                            cards.Add(card);                  }                  catch (XmlException exception)                  {                      Console.Error.WriteLine("There was an XML error while parsing a card.");                      Console.Error.WriteLine(exception);                  }                  }
Magic Number,HSBot.Cards,CardParser,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\CardParser.cs,GetCards,The following statement contains a magic number: hearthbot.Health = hearthbot.Attack = 50;
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,IRC,The following statement contains a magic number: dataFileChangeWatcher.Changed += (sender' fileSystemEventArgs) =>                  {                      Console.WriteLine("Detected a change to card data file - refreshing card list.");                      refresh:                      lock (m_cardMap)                      {                          try                          {                              using (var fs = File.OpenRead(fileSystemEventArgs.FullPath)) { }                              RefreshList();                          } catch (IOException)                          {                              Console.WriteLine("File cannot be read: {0}"' fileSystemEventArgs.FullPath);                              Thread.Sleep(1000);                              goto refresh;                          }                                                }                  };
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,StartConnect,The following statement contains a magic number: Action<IrcClient> connectAction = (sender) =>              {                  lock (mutexConnect)                  {                      if (sender.Connected) return;                      while (true)                      {                          try                          {                              Console.WriteLine("Trying to connect to IRC...");                              sender.ConnectAsync(Config.IRCNick' Config.IRCUser' Config.IRCName' Config.IRCHost' Config.IRCPort' Config.IRCPass).Wait();                              Console.WriteLine("Connection established");                              break;                          }                          catch (Exception)                          {                              Console.WriteLine("Exception while connecting. Trying again in 30 seconds (check your network connection)");                              System.Threading.Thread.Sleep(30000);                          }                      }                  }              };
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,StartConnect,The following statement contains a magic number: Client.OnTimeout += (c) =>              {                  lock (mutexConnect) { if (m_isConnecting) return; m_isConnecting = true; }                                  Console.WriteLine("Server timed out' reconnecting in 30 seconds...");                  Client.Disconnect();                  System.Threading.Thread.Sleep(30000);                    connectAction(c);                  m_isConnecting = false;                                };
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,StartConnect,The following statement contains a magic number: Client.OnDisconnect += (c) =>              {                                  lock (mutexConnect) { if (m_isConnecting) return; m_isConnecting = true; }                    Console.WriteLine("Disconnected from server' reconnecting in 60 seconds...");                  Client.Disconnect();                  System.Threading.Thread.Sleep(60000);                                        connectAction(c);                  m_isConnecting = false;                                };
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,StartConnect,The following statement contains a magic number: m_flowRateTimer = new Timer((state) => {                  lock (m_FlowRateMap)                  {                      // Decrement the message count of everyone who hasn't spoken in FlowRateSeconds                      // If we get to 0' remove them from the map                      List<String> keysToRemove = new List<string>();                      foreach (var kvp in m_FlowRateMap)                      {                          var line = kvp.Value;                          lock (line)                          {                              if ((DateTime.Now - line.LastUpdated) >= TimeSpan.FromSeconds(Config.FlowRateSeconds))                              {                                  --line.Messages;                              }                              if (line.Messages <= 0)                              {                                  keysToRemove.Add(kvp.Key);                              }                          }                      }                      foreach (String key in keysToRemove)                      {                          m_FlowRateMap.Remove(key);                      }                      keysToRemove.Clear();                  }              } ' null'0'1000);
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: var results = LookupCardSet(query' 0.50/*min match*/' 0.50/*boost substrings*/);
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: var results = LookupCardSet(query' 0.50/*min match*/' 0.50/*boost substrings*/);
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,FindAndPrintMatch,The following statement contains a magic number: if (results.Count == 0)              {                  Message(responseTarget' "No reasonable matches found.");                }              else if (results.Max.MatchPercentage < .75)              {                  if (results.Count == 1)                  {                      Message(responseTarget' "This card was not found' did you mean {0}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentage: %{0}"' results.Max.MatchPercentage * 100);                  }                  else if (results.Count == 2)                  {                      Message(responseTarget' "This card was not found' did you mean {0} or {1}?"'                          results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          results.Min.Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1}"'                          results.Max.MatchPercentage * 100'                          results.Min.MatchPercentage * 100);                  }                  else                  {                      Message(responseTarget' "This card was not found' did you mean {0}' {1} or {2}?"'                           results.Max.Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(1).Item[0].GetmIRCName(Config.ControlCodes)'                          resultsEnum.ElementAt(2).Item[0].GetmIRCName(Config.ControlCodes));                      Console.WriteLine("Match percentages: %{0} %{1} %{2}"'                          results.Max.MatchPercentage * 100'                          resultsEnum.ElementAt(1).MatchPercentage * 100'                          resultsEnum.ElementAt(2).MatchPercentage * 100);                  }              }              else              {                  CardSet cs = results.Max.Item;                  if (index < 1 || index > cs.Count)                      index = 1;                  Card c = cs[index - 1];                    String message = c.GetFullText(Config.ControlCodes);                    if (cs.Count > 1)                  {                      message = message.Trim() + String.Format(" ({0} of {1} in the set)"' index' cs.Count);                  }                  Console.WriteLine("Match is %{0}"' results.Max.MatchPercentage * 100);                  Message(responseTarget' message.ToString());                  if (results.Count > 1 && results.Max.MatchPercentage < .90)                  {                      // If we're not very sure that this is the card we want' let's notice them with a few more                      StringBuilder noticeMessage = new StringBuilder("Other possible matches:");                      var enumerator = results.Reverse().GetEnumerator();                      enumerator.MoveNext(); // Skip first match                      for (int i = 0; i < 5 && enumerator.MoveNext();++i)                      {                          noticeMessage.Append(" ");                          noticeMessage.Append(enumerator.Current.Item[0].GetmIRCName(Config.ControlCodes));                      }                      var sendNoticeTask = Client.SendRawMessageAsync("NOTICE {0} :{1}"' ChannelUser.GetNickFromFullAddress(source)' noticeMessage.ToString());                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,GetVideoIDFromYoutubeUri,The following statement contains a magic number: if (isYoutube)              {                  // Path should look like /watch?v=<ID>                  if (uri.PathAndQuery.StartsWith("/watch"))                  {                      if (uri.Query != null)                      {                          int vStart = uri.Query.IndexOf("v=");                          if (vStart >= 0 )                          {                              vStart += 2;                              int vEnd = uri.Query.IndexOf('&'' vStart);                              if (vEnd < 0)                              {                                  vEnd = uri.Query.Length - 1;                              }                              return uri.Query.Substring(vStart'vEnd - vStart + 1);                          }                      }                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The following statement contains a magic number: lock (m_cardMap)              {                    // In this loop we calculate a match percentage on a specific card (kvp keys)                  // We track the closest match and return that one.                  // We will compare against all keys so this is omega(the number of cards)                  foreach (var cardMapKvp in m_cardMap.AsEnumerable())                  {                      if (cardMapKvp.Key.Length == 0)                          continue;                      // Match calculation                      // 1.) Fancy calculation                      // 2.) If the card name given is a substring of this card name' boost the percentage to allow for lazy matching of long names                        string testCardName = cardMapKvp.Key.ToLower();                        double percentMatch = 0;                        // Explanation:                      // We find the best matching word in the testCardString for each given word in the search string                      // When we find a match' we remove that test and search word from future consideration                      // We give 75% of the match as weight of the search string which matches' and 25% as weight of the test string matched                      // We repeat this until search words or all test words have been matched off                        // This map will have an entry for each search word                      // The result is the set of words in the testCardName sorted by how wel they match the key (search word)                      var searchWords = new Dictionary<String' SortedSet<MatchResult<String>>>();                        foreach (var word in searchString.Split(' '))                          searchWords.Add(word' new SortedSet<MatchResult<String>>());                        var testCardNameWords = new List<String>(testCardName.Split(' '));                        foreach (var searchWordsKvp in searchWords)                      {                          foreach (var testCardNameWord in testCardNameWords)                          {                              // Calculate match to word                              double match = 1 - (LevenshteinDistance(searchWordsKvp.Key' testCardNameWord) / (double)Math.Max(searchWordsKvp.Key.Length' testCardNameWord.Length));                              searchWordsKvp.Value.Add(new MatchResult<string>(testCardNameWord'match));                          }                                                }                        // Match all the search words off                      while (searchWords.Count > 0 && testCardNameWords.Count > 0)                      {                          KeyValuePair<String' SortedSet<MatchResult<String>>> highest = searchWords.ElementAt(0);                          foreach (var searchWordsKvp in searchWords)                          {                              if (searchWordsKvp.Value.Count == 0)                              {                                  // This should really never happen                                  Debug.Assert(false);                                  return resultList;                              }                              if (searchWordsKvp.Value.Reverse().First((t) => t.IsValid).MatchPercentage > highest.Value.Reverse().First((t) => t.IsValid).MatchPercentage)                              {                                  highest = searchWordsKvp;                              }                          }                            var maxValue = highest.Value.Reverse().First((t) => t.IsValid);                          // Remove the match from words so we track that we have already matched this word                          testCardNameWords.Remove(maxValue.Item);                            // Remove the matching search word from searchWords so we don't match it against more test words                          searchWords.Remove(highest.Key);                            // Remove one instance of this test word from the match sets of all the search words so we dont consider it in the next iterations                          foreach (var searchWordsKvp in searchWords)                          {                              searchWordsKvp.Value.Reverse().First<MatchResult<string>> ((test) => test.IsValid && test.Item.Equals(maxValue.Item)).IsValid = false;                          }                            // Ignore spaces since we parse on words                          double percentOfTestStringMatched = (double)maxValue.Item.Length / testCardName.Replace(" "' "").Length;                          double percentOfSearchStringMatched = (double)highest.Key.Length / searchString.Replace(" "' "").Length;                            // A manual knob - how much weight should the (already relative to size) search string match have vs the test string?                          // A heavier search string means  we assume the input is more likely to be what the user wanted                          double weightOfSearchString = .75;                          double weightOfTestString = 1 - weightOfSearchString;                            /*                          // Intense debugging                          if (testCardName.Equals("harvest"))                          {                              Console.WriteLine("{0} matches {1} {2}%"'highest.Key' maxValue.Item' maxValue.MatchPercentage * 100);                              Console.WriteLine("\tTest string percent: {0}% has weight {1}%"' percentOfTestStringMatched * 100' weightOfSearchString * 100);                              Console.WriteLine("\tSearch string percent: {0}% has weight {1}%"' percentOfSearchStringMatched * 100' weightOfTestString * 100);                              Console.WriteLine("\tTotal added contribution: {0}%"' percentOfSearchStringMatched * maxValue.MatchPercentage * weightOfSearchString + percentOfTestStringMatched * maxValue.MatchPercentage * weightOfTestString);                            }                          */                          percentMatch += percentOfSearchStringMatched * maxValue.MatchPercentage * weightOfSearchString                                          + percentOfTestStringMatched * maxValue.MatchPercentage * weightOfTestString;                        }                        // 2.) Substring                      // Boost the match percentage if the search string is a subtring of the card name                      // This allows lazy searches like "rag" to match "ragnarous" even though it is really a small percentage of the whole card                      // The caller sets the amount by which we boost these matches                      //if (percentMatch < 1 && testCardName.Contains(searchString)) percentMatch += boostSubstring;                        if (percentMatch >= minMatchPct)                      {                          MatchResult<CardSet> result = new MatchResult<CardSet>(cardMapKvp.Value'percentMatch == 1 ? 1 : Math.Min(0.99' percentMatch));                          resultList.Add(result);                      }                  }              }
Magic Number,HSBot,IRC,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IRC.cs,LookupCardSet,The following statement contains a magic number: lock (m_cardMap)              {                    // In this loop we calculate a match percentage on a specific card (kvp keys)                  // We track the closest match and return that one.                  // We will compare against all keys so this is omega(the number of cards)                  foreach (var cardMapKvp in m_cardMap.AsEnumerable())                  {                      if (cardMapKvp.Key.Length == 0)                          continue;                      // Match calculation                      // 1.) Fancy calculation                      // 2.) If the card name given is a substring of this card name' boost the percentage to allow for lazy matching of long names                        string testCardName = cardMapKvp.Key.ToLower();                        double percentMatch = 0;                        // Explanation:                      // We find the best matching word in the testCardString for each given word in the search string                      // When we find a match' we remove that test and search word from future consideration                      // We give 75% of the match as weight of the search string which matches' and 25% as weight of the test string matched                      // We repeat this until search words or all test words have been matched off                        // This map will have an entry for each search word                      // The result is the set of words in the testCardName sorted by how wel they match the key (search word)                      var searchWords = new Dictionary<String' SortedSet<MatchResult<String>>>();                        foreach (var word in searchString.Split(' '))                          searchWords.Add(word' new SortedSet<MatchResult<String>>());                        var testCardNameWords = new List<String>(testCardName.Split(' '));                        foreach (var searchWordsKvp in searchWords)                      {                          foreach (var testCardNameWord in testCardNameWords)                          {                              // Calculate match to word                              double match = 1 - (LevenshteinDistance(searchWordsKvp.Key' testCardNameWord) / (double)Math.Max(searchWordsKvp.Key.Length' testCardNameWord.Length));                              searchWordsKvp.Value.Add(new MatchResult<string>(testCardNameWord'match));                          }                                                }                        // Match all the search words off                      while (searchWords.Count > 0 && testCardNameWords.Count > 0)                      {                          KeyValuePair<String' SortedSet<MatchResult<String>>> highest = searchWords.ElementAt(0);                          foreach (var searchWordsKvp in searchWords)                          {                              if (searchWordsKvp.Value.Count == 0)                              {                                  // This should really never happen                                  Debug.Assert(false);                                  return resultList;                              }                              if (searchWordsKvp.Value.Reverse().First((t) => t.IsValid).MatchPercentage > highest.Value.Reverse().First((t) => t.IsValid).MatchPercentage)                              {                                  highest = searchWordsKvp;                              }                          }                            var maxValue = highest.Value.Reverse().First((t) => t.IsValid);                          // Remove the match from words so we track that we have already matched this word                          testCardNameWords.Remove(maxValue.Item);                            // Remove the matching search word from searchWords so we don't match it against more test words                          searchWords.Remove(highest.Key);                            // Remove one instance of this test word from the match sets of all the search words so we dont consider it in the next iterations                          foreach (var searchWordsKvp in searchWords)                          {                              searchWordsKvp.Value.Reverse().First<MatchResult<string>> ((test) => test.IsValid && test.Item.Equals(maxValue.Item)).IsValid = false;                          }                            // Ignore spaces since we parse on words                          double percentOfTestStringMatched = (double)maxValue.Item.Length / testCardName.Replace(" "' "").Length;                          double percentOfSearchStringMatched = (double)highest.Key.Length / searchString.Replace(" "' "").Length;                            // A manual knob - how much weight should the (already relative to size) search string match have vs the test string?                          // A heavier search string means  we assume the input is more likely to be what the user wanted                          double weightOfSearchString = .75;                          double weightOfTestString = 1 - weightOfSearchString;                            /*                          // Intense debugging                          if (testCardName.Equals("harvest"))                          {                              Console.WriteLine("{0} matches {1} {2}%"'highest.Key' maxValue.Item' maxValue.MatchPercentage * 100);                              Console.WriteLine("\tTest string percent: {0}% has weight {1}%"' percentOfTestStringMatched * 100' weightOfSearchString * 100);                              Console.WriteLine("\tSearch string percent: {0}% has weight {1}%"' percentOfSearchStringMatched * 100' weightOfTestString * 100);                              Console.WriteLine("\tTotal added contribution: {0}%"' percentOfSearchStringMatched * maxValue.MatchPercentage * weightOfSearchString + percentOfTestStringMatched * maxValue.MatchPercentage * weightOfTestString);                            }                          */                          percentMatch += percentOfSearchStringMatched * maxValue.MatchPercentage * weightOfSearchString                                          + percentOfTestStringMatched * maxValue.MatchPercentage * weightOfTestString;                        }                        // 2.) Substring                      // Boost the match percentage if the search string is a subtring of the card name                      // This allows lazy searches like "rag" to match "ragnarous" even though it is really a small percentage of the whole card                      // The caller sets the amount by which we boost these matches                      //if (percentMatch < 1 && testCardName.Contains(searchString)) percentMatch += boostSubstring;                        if (percentMatch >= minMatchPct)                      {                          MatchResult<CardSet> result = new MatchResult<CardSet>(cardMapKvp.Value'percentMatch == 1 ? 1 : Math.Min(0.99' percentMatch));                          resultList.Add(result);                      }                  }              }
Magic Number,HSBot,Program,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Program.cs,Main,The following statement contains a magic number: Console.CancelKeyPress += (s' e) => {                  irc.Client.SendRawMessageAsync("QUIT :Be right back!").Wait(5000);              };
Magic Number,HSBot,Program,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Program.cs,GetCardDataFile,The following statement contains a magic number: Object hsInstall = Microsoft.Win32.Registry.GetValue(@"HKEY_LOCAL_MACHINE\Software" + (IntPtr.Size == 8 ? @"\Wow6432Node" : "") + @"\Microsoft\Windows\CurrentVersion\Uninstall\Hearthstone"' "InstallLocation"' null);
Magic Number,HSBot,Program,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Program.cs,GetCardDataFile,The following statement contains a magic number: if (cardDataFile == null || !System.IO.File.Exists(cardDataFile))              {                  // Wait 20 seconds on input or proceed in case we are unattended                  Console.WriteLine("Hearthstone installation not found. Enter the absolute path to cardxml0.unity3d or nothing to use the same directory as HSBot.exe");                  String input = null;                  AutoResetEvent inputReceivedEvent = new AutoResetEvent(false);                  Thread getInputThread = new Thread(() => {                      input = Console.ReadLine();                      inputReceivedEvent.Set();                  });                  getInputThread.Start();                  inputReceivedEvent.WaitOne(20000);                  if (input == null)                  {                      // GTFO                      getInputThread.Interrupt();                  }                    if (!String.IsNullOrEmpty(input) && File.Exists(input) && Path.IsPathRooted(input))                  {                      cardDataFile = input;                  }                  else                  {                      Console.WriteLine("No or invalid path entered. Defaulting to local cardxml0.unity3d.");                      cardDataFile = Path.Combine(System.Environment.CurrentDirectory' "cardxml0.unity3d");                  }              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 3 && tokens[1].Equals("JOIN"))              {                  ieOnJoin(sender' tokens[0].Replace(":"' "")' tokens[2].Replace(":"' ""));                 }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 3 && tokens[1].Equals("JOIN"))              {                  ieOnJoin(sender' tokens[0].Replace(":"' "")' tokens[2].Replace(":"' ""));                 }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 3 && tokens[1].Equals("QUIT"))              {                  ieOnQuit(sender' tokens[0].Replace(":"' "")' message.Substring(message.IndexOf(":"' 1)));              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 4 && tokens[1].Equals("MODE"))              {                  ieOnMode(sender'                           tokens[0].Replace(":"' "")'                            tokens[2]'                            message.Substring(message.IndexOf(tokens[2]) + tokens[2].Length + 1));              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 4 && tokens[1].Equals("MODE"))              {                  ieOnMode(sender'                           tokens[0].Replace(":"' "")'                            tokens[2]'                            message.Substring(message.IndexOf(tokens[2]) + tokens[2].Length + 1));              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 4 && tokens[1].Equals("MODE"))              {                  ieOnMode(sender'                           tokens[0].Replace(":"' "")'                            tokens[2]'                            message.Substring(message.IndexOf(tokens[2]) + tokens[2].Length + 1));              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 4 && tokens[1].Equals("MODE"))              {                  ieOnMode(sender'                           tokens[0].Replace(":"' "")'                            tokens[2]'                            message.Substring(message.IndexOf(tokens[2]) + tokens[2].Length + 1));              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 3 && tokens[1].Equals("PART"))              {                  String reason = tokens.Length >= 4 ? message.Substring(message.IndexOf(':'' 1)) : null;                  ieOnPart(this' tokens[0].Replace(":"' "")' tokens[2]' reason);                               }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 3 && tokens[1].Equals("PART"))              {                  String reason = tokens.Length >= 4 ? message.Substring(message.IndexOf(':'' 1)) : null;                  ieOnPart(this' tokens[0].Replace(":"' "")' tokens[2]' reason);                               }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 3 && tokens[1].Equals("PART"))              {                  String reason = tokens.Length >= 4 ? message.Substring(message.IndexOf(':'' 1)) : null;                  ieOnPart(this' tokens[0].Replace(":"' "")' tokens[2]' reason);                               }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 5 && tokens[1].Equals("KICK"))              {                  String source = tokens[0].Replace(":"' "")' channel = tokens[2]' target = tokens[3];                  String reason = message.Substring(message.IndexOf(':'' 1));                  ieOnKick(this' source' target' channel' reason);              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 5 && tokens[1].Equals("KICK"))              {                  String source = tokens[0].Replace(":"' "")' channel = tokens[2]' target = tokens[3];                  String reason = message.Substring(message.IndexOf(':'' 1));                  ieOnKick(this' source' target' channel' reason);              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 5 && tokens[1].Equals("KICK"))              {                  String source = tokens[0].Replace(":"' "")' channel = tokens[2]' target = tokens[3];                  String reason = message.Substring(message.IndexOf(':'' 1));                  ieOnKick(this' source' target' channel' reason);              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 3 && tokens[1].Equals("NICK"))              {                  ieOnNick(sender' tokens[0].Replace(":"' "")' tokens[2].Replace(":"' ""));              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnMessageReceived,The following statement contains a magic number: if (tokens.Length >= 3 && tokens[1].Equals("NICK"))              {                  ieOnNick(sender' tokens[0].Replace(":"' "")' tokens[2].Replace(":"' ""));              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnNumericReceived,The following statement contains a magic number: if (numeric == 1)              {                  lock (m_channels)                  {                      m_channels.Clear();                   }                  RaiseEvent(OnConnect' sender);              }                // Parses numeric 5 (List of things the server supports) and calls event with the parsed list              else if (numeric == 5)              {                  // Parse parameters                  Dictionary<String' String> parameters = new Dictionary<string' string>();                  String[] tokens = other.Split(' ');                  foreach (String token in tokens)                  {                      int equalIndex = token.IndexOf('=');                      if (equalIndex >= 0)                      {                          parameters[token.Substring(0' equalIndex)] = token.Substring(equalIndex + 1);                      }                      else                      {                          parameters[token] = "";                      }                  }                      // try to update server info struct for values we care about                  String value;                  if (parameters.TryGetValue("PREFIX"' out value))                  {                      sender.ServerInfo.PREFIX = value;                  }                    if (parameters.TryGetValue("CHANMODES"' out value))                  {                      sender.ServerInfo.CHANMODES = value;                  }                    // If the server supports user-host names' request it                  if (parameters.ContainsKey("UHNAMES"))                  {                      var task = SendRawMessageAsync("PROTOCTL UHNAMES");                  }                    // If the server supports extended names' request it                  if (parameters.ContainsKey("NAMESX"))                  {                      var task = SendRawMessageAsync("PROTOCTL NAMESX");                  }                                      // Signal external events for isupport                  RaiseEvent(OnISupport' this' parameters);              }                     else if (numeric == 353)              {                  String[] words = other.Split(' ');                  String channel = words[1];                  String names = other.Substring(other.IndexOf(':') + 1).Trim();                  ieOnNames(sender' channel' names);                 }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ieOnNumericReceived,The following statement contains a magic number: if (numeric == 1)              {                  lock (m_channels)                  {                      m_channels.Clear();                   }                  RaiseEvent(OnConnect' sender);              }                // Parses numeric 5 (List of things the server supports) and calls event with the parsed list              else if (numeric == 5)              {                  // Parse parameters                  Dictionary<String' String> parameters = new Dictionary<string' string>();                  String[] tokens = other.Split(' ');                  foreach (String token in tokens)                  {                      int equalIndex = token.IndexOf('=');                      if (equalIndex >= 0)                      {                          parameters[token.Substring(0' equalIndex)] = token.Substring(equalIndex + 1);                      }                      else                      {                          parameters[token] = "";                      }                  }                      // try to update server info struct for values we care about                  String value;                  if (parameters.TryGetValue("PREFIX"' out value))                  {                      sender.ServerInfo.PREFIX = value;                  }                    if (parameters.TryGetValue("CHANMODES"' out value))                  {                      sender.ServerInfo.CHANMODES = value;                  }                    // If the server supports user-host names' request it                  if (parameters.ContainsKey("UHNAMES"))                  {                      var task = SendRawMessageAsync("PROTOCTL UHNAMES");                  }                    // If the server supports extended names' request it                  if (parameters.ContainsKey("NAMESX"))                  {                      var task = SendRawMessageAsync("PROTOCTL NAMESX");                  }                                      // Signal external events for isupport                  RaiseEvent(OnISupport' this' parameters);              }                     else if (numeric == 353)              {                  String[] words = other.Split(' ');                  String channel = words[1];                  String names = other.Substring(other.IndexOf(':') + 1).Trim();                  ieOnNames(sender' channel' names);                 }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,IrcClient,The following statement contains a magic number: Timeout = new TimeSpan(0' 2' 0);
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ConnectAsync,The following statement contains a magic number: try              {                  // Reset state                  lock (m_registrationMutex)                  {                      DisconnectInternal(hasWritingSemaphore); // Resets connection' resets timers' resets reading thread                      Nick = nick;                       Username = user;                      RealName = realname;                       Host = host;                      Port = port;                      Password = password;                      TCP = new TcpClient();                  }                    try                  {                      await TCP.ConnectAsync(host' port);                  } catch (Exception ex)                  {                      Exception = ex;                      RaiseEvent(OnException' this' ex);                      throw ex; // If connect failed' we want to make sure the caller knows about it                  }                    lock (m_registrationMutex)                  {                      // If connect succeeded                      Log.Info("TCP connect succeeded.");                      Connected = true;                  }                    // Setup reader and writer                  Log.Info("Creating stream writing and signalling reader. Have writing semaphore = {0}"' hasWritingSemaphore);                  m_streamWriter = new StreamWriter(TCP.GetStream()' Encoding);                  m_readingThread.Signal();                    // We must release writing semaphore so that the registration functions can write                  if (hasWritingSemaphore)                  {                      m_writingSemaphore.Release();                      hasWritingSemaphore = false;                  }                    lock (m_registrationMutex)                  {                      Debug.Assert(Connected);                       if (Connected)                      {                          RegisterWithServer();                          // Restart the timer for detecting timeout                          lock (m_timeoutTimer)                          {                              Log.Info("Starting timeout timer");                              m_timeoutTimer.Change(Timeout' Timeout);                          }                            // Restart the itmer for sending PINGs                          lock (m_pingTimer)                          {                              Log.Info("Starting ping timer");                              m_pingTimer.Change(TimeSpan.FromMilliseconds(Timeout.TotalMilliseconds / 2)' TimeSpan.FromMilliseconds(Timeout.TotalMilliseconds / 2));                          }                      }                  }                }              finally              {                  Log.Info("Done with connection' Connected={0} hasWritingSemaphore={1}"' Connected' hasWritingSemaphore);                  if (hasWritingSemaphore)                  {                      m_writingSemaphore.Release();                      hasWritingSemaphore = false;                  }              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,ConnectAsync,The following statement contains a magic number: try              {                  // Reset state                  lock (m_registrationMutex)                  {                      DisconnectInternal(hasWritingSemaphore); // Resets connection' resets timers' resets reading thread                      Nick = nick;                       Username = user;                      RealName = realname;                       Host = host;                      Port = port;                      Password = password;                      TCP = new TcpClient();                  }                    try                  {                      await TCP.ConnectAsync(host' port);                  } catch (Exception ex)                  {                      Exception = ex;                      RaiseEvent(OnException' this' ex);                      throw ex; // If connect failed' we want to make sure the caller knows about it                  }                    lock (m_registrationMutex)                  {                      // If connect succeeded                      Log.Info("TCP connect succeeded.");                      Connected = true;                  }                    // Setup reader and writer                  Log.Info("Creating stream writing and signalling reader. Have writing semaphore = {0}"' hasWritingSemaphore);                  m_streamWriter = new StreamWriter(TCP.GetStream()' Encoding);                  m_readingThread.Signal();                    // We must release writing semaphore so that the registration functions can write                  if (hasWritingSemaphore)                  {                      m_writingSemaphore.Release();                      hasWritingSemaphore = false;                  }                    lock (m_registrationMutex)                  {                      Debug.Assert(Connected);                       if (Connected)                      {                          RegisterWithServer();                          // Restart the timer for detecting timeout                          lock (m_timeoutTimer)                          {                              Log.Info("Starting timeout timer");                              m_timeoutTimer.Change(Timeout' Timeout);                          }                            // Restart the itmer for sending PINGs                          lock (m_pingTimer)                          {                              Log.Info("Starting ping timer");                              m_pingTimer.Change(TimeSpan.FromMilliseconds(Timeout.TotalMilliseconds / 2)' TimeSpan.FromMilliseconds(Timeout.TotalMilliseconds / 2));                          }                      }                  }                }              finally              {                  Log.Info("Done with connection' Connected={0} hasWritingSemaphore={1}"' Connected' hasWritingSemaphore);                  if (hasWritingSemaphore)                  {                      m_writingSemaphore.Release();                      hasWritingSemaphore = false;                  }              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,PrivmsgHandler,The following statement contains a magic number: if (words.Length >= 4 && OnRfcPrivmsg != null && words[1].Equals("PRIVMSG"' StringComparison.CurrentCultureIgnoreCase))              {                  String source = words[0];                  String target = words[2];                  String text = message.Substring(message.IndexOf(":"' 1) + 1);                  UpdateFullAddress(target' source);                  RaiseEvent(OnRfcPrivmsg' this' source' target' text);                                }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,PrivmsgHandler,The following statement contains a magic number: if (words.Length >= 4 && OnRfcPrivmsg != null && words[1].Equals("PRIVMSG"' StringComparison.CurrentCultureIgnoreCase))              {                  String source = words[0];                  String target = words[2];                  String text = message.Substring(message.IndexOf(":"' 1) + 1);                  UpdateFullAddress(target' source);                  RaiseEvent(OnRfcPrivmsg' this' source' target' text);                                }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,NumericHandler,The following statement contains a magic number: if (words.Length >= 3)              {                  int numeric;                  if (int.TryParse(words[1]' out numeric))                  {                      ieOnNumericReceived(this' words[0]' numeric' words[2]' words.Length > 3 ? message.Substring(message.IndexOf(words[2]) + words[2].Length + 1) : null);                  }              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,NumericHandler,The following statement contains a magic number: if (words.Length >= 3)              {                  int numeric;                  if (int.TryParse(words[1]' out numeric))                  {                      ieOnNumericReceived(this' words[0]' numeric' words[2]' words.Length > 3 ? message.Substring(message.IndexOf(words[2]) + words[2].Length + 1) : null);                  }              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,NumericHandler,The following statement contains a magic number: if (words.Length >= 3)              {                  int numeric;                  if (int.TryParse(words[1]' out numeric))                  {                      ieOnNumericReceived(this' words[0]' numeric' words[2]' words.Length > 3 ? message.Substring(message.IndexOf(words[2]) + words[2].Length + 1) : null);                  }              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,NumericHandler,The following statement contains a magic number: if (words.Length >= 3)              {                  int numeric;                  if (int.TryParse(words[1]' out numeric))                  {                      ieOnNumericReceived(this' words[0]' numeric' words[2]' words.Length > 3 ? message.Substring(message.IndexOf(words[2]) + words[2].Length + 1) : null);                  }              }
Magic Number,benbuzbee.LRTIRC,IrcClient,C:\repos\aca20031_hsbot\Hearthstone Item Bot\IrcClient.cs,NumericHandler,The following statement contains a magic number: if (words.Length >= 3)              {                  int numeric;                  if (int.TryParse(words[1]' out numeric))                  {                      ieOnNumericReceived(this' words[0]' numeric' words[2]' words.Length > 3 ? message.Substring(message.IndexOf(words[2]) + words[2].Length + 1) : null);                  }              }
Missing Default,HSBot.Cards,Card,C:\repos\aca20031_hsbot\Hearthstone Item Bot\Cards\Card.cs,GetFullText,The following switch statement is missing a default case: switch (Class)              {                  case ClassValues.ALL:                      sb.Append("- All classes ");                      break;                  case ClassValues.MAGE:                      sb.Append("- Mages ");                      break;                  case ClassValues.ROGUE:                      sb.Append("- Rogues ");                      break;                  case ClassValues.DRUID:                      sb.Append("- Druids ");                      break;                  case ClassValues.HUNTER:                      sb.Append("- Hunters ");                      break;                  case ClassValues.PALADIN:                      sb.Append("- Paladins ");                      break;                  case ClassValues.WARLOCK:                      sb.Append("- Warlocks ");                      break;                  case ClassValues.WARRIOR:                      sb.Append("- Warriors ");                      break;                  case ClassValues.PRIEST:                      sb.Append("- Priests ");                      break;                  case ClassValues.SHAMAN:                      sb.Append("- Shamans ");                      break;              }
