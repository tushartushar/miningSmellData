Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckService,Cyclomatic complexity of the method is 15
Complex Method,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,Cyclomatic complexity of the method is 31
Long Parameter List,CheckService,Config,C:\repos\partizanes_CheckService\CheckService\Config.cs,GetPrivateProfileString,The method has 6 parameters.
Long Statement,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckThread,The length of the statement  "	ConnectingString = "Provider=vfpoledb.1;Data Source=" + LsTradeDir + ";Mode=Read;Collating Sequence=MACHINE;CODEPAGE=1251"; " is 123.
Long Statement,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The length of the statement  "			OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2"); " is 120.
Long Statement,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The length of the statement  "					Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds); " is 157.
Magic Number,CheckService,Config,C:\repos\partizanes_CheckService\CheckService\Config.cs,GetParametr,The following statement contains a magic number: GetPrivateProfileString ("SETTINGS"' par' "null"' buffer' 50' Environment.CurrentDirectory + "\\config.ini");  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckThread,The following statement contains a magic number: while (true) {  	Color.WriteLineColor ("Начало проверки службы."' ConsoleColor.Green);  	CheckService ();  	int timeBetweenChecks = 60000 * (int.Parse (Config.GetParametr ("timeBetweenChecks")));  	Color.WriteLineColor ("Проверка отложена на 5 минут."' ConsoleColor.Green);  	Thread.Sleep (timeBetweenChecks);  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: try {  	Color.WriteLineColor ("Начало проверки времени запуска."' ConsoleColor.Green);  	using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  		OleDbconn.Open ();  		Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  		//Tn1 Время последнего удачного старта;  		//Tk1 Время последнего удачного окончания;  		//Tn2 Время последнего старта;  		//Tk2 Время последнего окончания;  		OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  		OleDbcmd.Connection = OleDbconn;  		OleDbcmd.CommandTimeout = 0;  		using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  			Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  			if (OleDbDr == null || !OleDbDr.HasRows) {  				Log.Write ("На текущий момент активных задач нет.");  				return;  			}  			while (OleDbDr.Read ()) {  				Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  				int id = Convert.ToInt32 (OleDbDr.GetValue (0));  				DateTime NowDate = DateTime.Now;  				DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  				TimeSpan diff = NowDate - StartOper;  				Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  				int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  				int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  				int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  				int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  				int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  				int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  				switch (id) {  				case 1:  					//Репликации 7min  					if (diff.TotalMinutes > replicationTime)  						RestartService (id);  					break;  				case 2:  					//Репликации ночные 20m  					if (diff.TotalMinutes > replicationNightTime)  						RestartService (id);  					break;  				case 3:  					//Выгрузка терминальных пользователей 5m  					if (diff.TotalMinutes > unloadingUserTimes)  						RestartService (id);  					break;  				case 4:  					//Прием реализации 7 m  					if (diff.TotalMinutes > loadingSalesTimes)  						RestartService (id);  					break;  				case 5:  					//Перерасчет агрегаций 2h  					if (diff.TotalMinutes > recalculationTime)  						RestartService (id);  					break;  				case 6:  					//Копия БД 10m  					if (diff.TotalMinutes > copybdTime)  						RestartService (id);  					break;  				}  			}  		}  	}  }  catch (System.Exception ex) {  	Log.Write (ex.Message);  	Log.Write (ConnectingString);  	Log.Write (LsTradeDir);  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: try {  	Color.WriteLineColor ("Начало проверки времени запуска."' ConsoleColor.Green);  	using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  		OleDbconn.Open ();  		Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  		//Tn1 Время последнего удачного старта;  		//Tk1 Время последнего удачного окончания;  		//Tn2 Время последнего старта;  		//Tk2 Время последнего окончания;  		OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  		OleDbcmd.Connection = OleDbconn;  		OleDbcmd.CommandTimeout = 0;  		using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  			Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  			if (OleDbDr == null || !OleDbDr.HasRows) {  				Log.Write ("На текущий момент активных задач нет.");  				return;  			}  			while (OleDbDr.Read ()) {  				Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  				int id = Convert.ToInt32 (OleDbDr.GetValue (0));  				DateTime NowDate = DateTime.Now;  				DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  				TimeSpan diff = NowDate - StartOper;  				Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  				int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  				int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  				int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  				int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  				int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  				int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  				switch (id) {  				case 1:  					//Репликации 7min  					if (diff.TotalMinutes > replicationTime)  						RestartService (id);  					break;  				case 2:  					//Репликации ночные 20m  					if (diff.TotalMinutes > replicationNightTime)  						RestartService (id);  					break;  				case 3:  					//Выгрузка терминальных пользователей 5m  					if (diff.TotalMinutes > unloadingUserTimes)  						RestartService (id);  					break;  				case 4:  					//Прием реализации 7 m  					if (diff.TotalMinutes > loadingSalesTimes)  						RestartService (id);  					break;  				case 5:  					//Перерасчет агрегаций 2h  					if (diff.TotalMinutes > recalculationTime)  						RestartService (id);  					break;  				case 6:  					//Копия БД 10m  					if (diff.TotalMinutes > copybdTime)  						RestartService (id);  					break;  				}  			}  		}  	}  }  catch (System.Exception ex) {  	Log.Write (ex.Message);  	Log.Write (ConnectingString);  	Log.Write (LsTradeDir);  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: try {  	Color.WriteLineColor ("Начало проверки времени запуска."' ConsoleColor.Green);  	using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  		OleDbconn.Open ();  		Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  		//Tn1 Время последнего удачного старта;  		//Tk1 Время последнего удачного окончания;  		//Tn2 Время последнего старта;  		//Tk2 Время последнего окончания;  		OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  		OleDbcmd.Connection = OleDbconn;  		OleDbcmd.CommandTimeout = 0;  		using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  			Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  			if (OleDbDr == null || !OleDbDr.HasRows) {  				Log.Write ("На текущий момент активных задач нет.");  				return;  			}  			while (OleDbDr.Read ()) {  				Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  				int id = Convert.ToInt32 (OleDbDr.GetValue (0));  				DateTime NowDate = DateTime.Now;  				DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  				TimeSpan diff = NowDate - StartOper;  				Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  				int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  				int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  				int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  				int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  				int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  				int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  				switch (id) {  				case 1:  					//Репликации 7min  					if (diff.TotalMinutes > replicationTime)  						RestartService (id);  					break;  				case 2:  					//Репликации ночные 20m  					if (diff.TotalMinutes > replicationNightTime)  						RestartService (id);  					break;  				case 3:  					//Выгрузка терминальных пользователей 5m  					if (diff.TotalMinutes > unloadingUserTimes)  						RestartService (id);  					break;  				case 4:  					//Прием реализации 7 m  					if (diff.TotalMinutes > loadingSalesTimes)  						RestartService (id);  					break;  				case 5:  					//Перерасчет агрегаций 2h  					if (diff.TotalMinutes > recalculationTime)  						RestartService (id);  					break;  				case 6:  					//Копия БД 10m  					if (diff.TotalMinutes > copybdTime)  						RestartService (id);  					break;  				}  			}  		}  	}  }  catch (System.Exception ex) {  	Log.Write (ex.Message);  	Log.Write (ConnectingString);  	Log.Write (LsTradeDir);  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: try {  	Color.WriteLineColor ("Начало проверки времени запуска."' ConsoleColor.Green);  	using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  		OleDbconn.Open ();  		Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  		//Tn1 Время последнего удачного старта;  		//Tk1 Время последнего удачного окончания;  		//Tn2 Время последнего старта;  		//Tk2 Время последнего окончания;  		OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  		OleDbcmd.Connection = OleDbconn;  		OleDbcmd.CommandTimeout = 0;  		using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  			Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  			if (OleDbDr == null || !OleDbDr.HasRows) {  				Log.Write ("На текущий момент активных задач нет.");  				return;  			}  			while (OleDbDr.Read ()) {  				Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  				int id = Convert.ToInt32 (OleDbDr.GetValue (0));  				DateTime NowDate = DateTime.Now;  				DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  				TimeSpan diff = NowDate - StartOper;  				Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  				int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  				int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  				int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  				int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  				int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  				int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  				switch (id) {  				case 1:  					//Репликации 7min  					if (diff.TotalMinutes > replicationTime)  						RestartService (id);  					break;  				case 2:  					//Репликации ночные 20m  					if (diff.TotalMinutes > replicationNightTime)  						RestartService (id);  					break;  				case 3:  					//Выгрузка терминальных пользователей 5m  					if (diff.TotalMinutes > unloadingUserTimes)  						RestartService (id);  					break;  				case 4:  					//Прием реализации 7 m  					if (diff.TotalMinutes > loadingSalesTimes)  						RestartService (id);  					break;  				case 5:  					//Перерасчет агрегаций 2h  					if (diff.TotalMinutes > recalculationTime)  						RestartService (id);  					break;  				case 6:  					//Копия БД 10m  					if (diff.TotalMinutes > copybdTime)  						RestartService (id);  					break;  				}  			}  		}  	}  }  catch (System.Exception ex) {  	Log.Write (ex.Message);  	Log.Write (ConnectingString);  	Log.Write (LsTradeDir);  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: try {  	Color.WriteLineColor ("Начало проверки времени запуска."' ConsoleColor.Green);  	using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  		OleDbconn.Open ();  		Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  		//Tn1 Время последнего удачного старта;  		//Tk1 Время последнего удачного окончания;  		//Tn2 Время последнего старта;  		//Tk2 Время последнего окончания;  		OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  		OleDbcmd.Connection = OleDbconn;  		OleDbcmd.CommandTimeout = 0;  		using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  			Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  			if (OleDbDr == null || !OleDbDr.HasRows) {  				Log.Write ("На текущий момент активных задач нет.");  				return;  			}  			while (OleDbDr.Read ()) {  				Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  				int id = Convert.ToInt32 (OleDbDr.GetValue (0));  				DateTime NowDate = DateTime.Now;  				DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  				TimeSpan diff = NowDate - StartOper;  				Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  				int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  				int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  				int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  				int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  				int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  				int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  				switch (id) {  				case 1:  					//Репликации 7min  					if (diff.TotalMinutes > replicationTime)  						RestartService (id);  					break;  				case 2:  					//Репликации ночные 20m  					if (diff.TotalMinutes > replicationNightTime)  						RestartService (id);  					break;  				case 3:  					//Выгрузка терминальных пользователей 5m  					if (diff.TotalMinutes > unloadingUserTimes)  						RestartService (id);  					break;  				case 4:  					//Прием реализации 7 m  					if (diff.TotalMinutes > loadingSalesTimes)  						RestartService (id);  					break;  				case 5:  					//Перерасчет агрегаций 2h  					if (diff.TotalMinutes > recalculationTime)  						RestartService (id);  					break;  				case 6:  					//Копия БД 10m  					if (diff.TotalMinutes > copybdTime)  						RestartService (id);  					break;  				}  			}  		}  	}  }  catch (System.Exception ex) {  	Log.Write (ex.Message);  	Log.Write (ConnectingString);  	Log.Write (LsTradeDir);  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: try {  	Color.WriteLineColor ("Начало проверки времени запуска."' ConsoleColor.Green);  	using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  		OleDbconn.Open ();  		Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  		//Tn1 Время последнего удачного старта;  		//Tk1 Время последнего удачного окончания;  		//Tn2 Время последнего старта;  		//Tk2 Время последнего окончания;  		OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  		OleDbcmd.Connection = OleDbconn;  		OleDbcmd.CommandTimeout = 0;  		using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  			Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  			if (OleDbDr == null || !OleDbDr.HasRows) {  				Log.Write ("На текущий момент активных задач нет.");  				return;  			}  			while (OleDbDr.Read ()) {  				Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  				int id = Convert.ToInt32 (OleDbDr.GetValue (0));  				DateTime NowDate = DateTime.Now;  				DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  				TimeSpan diff = NowDate - StartOper;  				Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  				int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  				int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  				int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  				int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  				int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  				int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  				switch (id) {  				case 1:  					//Репликации 7min  					if (diff.TotalMinutes > replicationTime)  						RestartService (id);  					break;  				case 2:  					//Репликации ночные 20m  					if (diff.TotalMinutes > replicationNightTime)  						RestartService (id);  					break;  				case 3:  					//Выгрузка терминальных пользователей 5m  					if (diff.TotalMinutes > unloadingUserTimes)  						RestartService (id);  					break;  				case 4:  					//Прием реализации 7 m  					if (diff.TotalMinutes > loadingSalesTimes)  						RestartService (id);  					break;  				case 5:  					//Перерасчет агрегаций 2h  					if (diff.TotalMinutes > recalculationTime)  						RestartService (id);  					break;  				case 6:  					//Копия БД 10m  					if (diff.TotalMinutes > copybdTime)  						RestartService (id);  					break;  				}  			}  		}  	}  }  catch (System.Exception ex) {  	Log.Write (ex.Message);  	Log.Write (ConnectingString);  	Log.Write (LsTradeDir);  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  	OleDbconn.Open ();  	Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  	//Tn1 Время последнего удачного старта;  	//Tk1 Время последнего удачного окончания;  	//Tn2 Время последнего старта;  	//Tk2 Время последнего окончания;  	OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  	OleDbcmd.Connection = OleDbconn;  	OleDbcmd.CommandTimeout = 0;  	using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  		Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  		if (OleDbDr == null || !OleDbDr.HasRows) {  			Log.Write ("На текущий момент активных задач нет.");  			return;  		}  		while (OleDbDr.Read ()) {  			Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  			int id = Convert.ToInt32 (OleDbDr.GetValue (0));  			DateTime NowDate = DateTime.Now;  			DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  			TimeSpan diff = NowDate - StartOper;  			Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  			int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  			int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  			int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  			int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  			int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  			int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  			switch (id) {  			case 1:  				//Репликации 7min  				if (diff.TotalMinutes > replicationTime)  					RestartService (id);  				break;  			case 2:  				//Репликации ночные 20m  				if (diff.TotalMinutes > replicationNightTime)  					RestartService (id);  				break;  			case 3:  				//Выгрузка терминальных пользователей 5m  				if (diff.TotalMinutes > unloadingUserTimes)  					RestartService (id);  				break;  			case 4:  				//Прием реализации 7 m  				if (diff.TotalMinutes > loadingSalesTimes)  					RestartService (id);  				break;  			case 5:  				//Перерасчет агрегаций 2h  				if (diff.TotalMinutes > recalculationTime)  					RestartService (id);  				break;  			case 6:  				//Копия БД 10m  				if (diff.TotalMinutes > copybdTime)  					RestartService (id);  				break;  			}  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  	OleDbconn.Open ();  	Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  	//Tn1 Время последнего удачного старта;  	//Tk1 Время последнего удачного окончания;  	//Tn2 Время последнего старта;  	//Tk2 Время последнего окончания;  	OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  	OleDbcmd.Connection = OleDbconn;  	OleDbcmd.CommandTimeout = 0;  	using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  		Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  		if (OleDbDr == null || !OleDbDr.HasRows) {  			Log.Write ("На текущий момент активных задач нет.");  			return;  		}  		while (OleDbDr.Read ()) {  			Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  			int id = Convert.ToInt32 (OleDbDr.GetValue (0));  			DateTime NowDate = DateTime.Now;  			DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  			TimeSpan diff = NowDate - StartOper;  			Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  			int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  			int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  			int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  			int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  			int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  			int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  			switch (id) {  			case 1:  				//Репликации 7min  				if (diff.TotalMinutes > replicationTime)  					RestartService (id);  				break;  			case 2:  				//Репликации ночные 20m  				if (diff.TotalMinutes > replicationNightTime)  					RestartService (id);  				break;  			case 3:  				//Выгрузка терминальных пользователей 5m  				if (diff.TotalMinutes > unloadingUserTimes)  					RestartService (id);  				break;  			case 4:  				//Прием реализации 7 m  				if (diff.TotalMinutes > loadingSalesTimes)  					RestartService (id);  				break;  			case 5:  				//Перерасчет агрегаций 2h  				if (diff.TotalMinutes > recalculationTime)  					RestartService (id);  				break;  			case 6:  				//Копия БД 10m  				if (diff.TotalMinutes > copybdTime)  					RestartService (id);  				break;  			}  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  	OleDbconn.Open ();  	Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  	//Tn1 Время последнего удачного старта;  	//Tk1 Время последнего удачного окончания;  	//Tn2 Время последнего старта;  	//Tk2 Время последнего окончания;  	OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  	OleDbcmd.Connection = OleDbconn;  	OleDbcmd.CommandTimeout = 0;  	using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  		Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  		if (OleDbDr == null || !OleDbDr.HasRows) {  			Log.Write ("На текущий момент активных задач нет.");  			return;  		}  		while (OleDbDr.Read ()) {  			Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  			int id = Convert.ToInt32 (OleDbDr.GetValue (0));  			DateTime NowDate = DateTime.Now;  			DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  			TimeSpan diff = NowDate - StartOper;  			Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  			int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  			int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  			int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  			int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  			int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  			int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  			switch (id) {  			case 1:  				//Репликации 7min  				if (diff.TotalMinutes > replicationTime)  					RestartService (id);  				break;  			case 2:  				//Репликации ночные 20m  				if (diff.TotalMinutes > replicationNightTime)  					RestartService (id);  				break;  			case 3:  				//Выгрузка терминальных пользователей 5m  				if (diff.TotalMinutes > unloadingUserTimes)  					RestartService (id);  				break;  			case 4:  				//Прием реализации 7 m  				if (diff.TotalMinutes > loadingSalesTimes)  					RestartService (id);  				break;  			case 5:  				//Перерасчет агрегаций 2h  				if (diff.TotalMinutes > recalculationTime)  					RestartService (id);  				break;  			case 6:  				//Копия БД 10m  				if (diff.TotalMinutes > copybdTime)  					RestartService (id);  				break;  			}  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  	OleDbconn.Open ();  	Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  	//Tn1 Время последнего удачного старта;  	//Tk1 Время последнего удачного окончания;  	//Tn2 Время последнего старта;  	//Tk2 Время последнего окончания;  	OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  	OleDbcmd.Connection = OleDbconn;  	OleDbcmd.CommandTimeout = 0;  	using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  		Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  		if (OleDbDr == null || !OleDbDr.HasRows) {  			Log.Write ("На текущий момент активных задач нет.");  			return;  		}  		while (OleDbDr.Read ()) {  			Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  			int id = Convert.ToInt32 (OleDbDr.GetValue (0));  			DateTime NowDate = DateTime.Now;  			DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  			TimeSpan diff = NowDate - StartOper;  			Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  			int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  			int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  			int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  			int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  			int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  			int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  			switch (id) {  			case 1:  				//Репликации 7min  				if (diff.TotalMinutes > replicationTime)  					RestartService (id);  				break;  			case 2:  				//Репликации ночные 20m  				if (diff.TotalMinutes > replicationNightTime)  					RestartService (id);  				break;  			case 3:  				//Выгрузка терминальных пользователей 5m  				if (diff.TotalMinutes > unloadingUserTimes)  					RestartService (id);  				break;  			case 4:  				//Прием реализации 7 m  				if (diff.TotalMinutes > loadingSalesTimes)  					RestartService (id);  				break;  			case 5:  				//Перерасчет агрегаций 2h  				if (diff.TotalMinutes > recalculationTime)  					RestartService (id);  				break;  			case 6:  				//Копия БД 10m  				if (diff.TotalMinutes > copybdTime)  					RestartService (id);  				break;  			}  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  	OleDbconn.Open ();  	Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  	//Tn1 Время последнего удачного старта;  	//Tk1 Время последнего удачного окончания;  	//Tn2 Время последнего старта;  	//Tk2 Время последнего окончания;  	OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  	OleDbcmd.Connection = OleDbconn;  	OleDbcmd.CommandTimeout = 0;  	using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  		Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  		if (OleDbDr == null || !OleDbDr.HasRows) {  			Log.Write ("На текущий момент активных задач нет.");  			return;  		}  		while (OleDbDr.Read ()) {  			Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  			int id = Convert.ToInt32 (OleDbDr.GetValue (0));  			DateTime NowDate = DateTime.Now;  			DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  			TimeSpan diff = NowDate - StartOper;  			Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  			int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  			int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  			int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  			int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  			int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  			int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  			switch (id) {  			case 1:  				//Репликации 7min  				if (diff.TotalMinutes > replicationTime)  					RestartService (id);  				break;  			case 2:  				//Репликации ночные 20m  				if (diff.TotalMinutes > replicationNightTime)  					RestartService (id);  				break;  			case 3:  				//Выгрузка терминальных пользователей 5m  				if (diff.TotalMinutes > unloadingUserTimes)  					RestartService (id);  				break;  			case 4:  				//Прием реализации 7 m  				if (diff.TotalMinutes > loadingSalesTimes)  					RestartService (id);  				break;  			case 5:  				//Перерасчет агрегаций 2h  				if (diff.TotalMinutes > recalculationTime)  					RestartService (id);  				break;  			case 6:  				//Копия БД 10m  				if (diff.TotalMinutes > copybdTime)  					RestartService (id);  				break;  			}  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbConnection OleDbconn = new OleDbConnection (ConnectingString)) {  	OleDbconn.Open ();  	Color.WriteLineColor ("Открытие соединения..."' ConsoleColor.Green);  	//Tn1 Время последнего удачного старта;  	//Tk1 Время последнего удачного окончания;  	//Tn2 Время последнего старта;  	//Tk2 Время последнего окончания;  	OleDbCommand OleDbcmd = new OleDbCommand (@"SELECT ischedule'Tn1'Tn2'Tk1'Tk2 FROM schedule WHERE Tn2 > Tk2 AND iz = 2");  	OleDbcmd.Connection = OleDbconn;  	OleDbcmd.CommandTimeout = 0;  	using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  		Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  		if (OleDbDr == null || !OleDbDr.HasRows) {  			Log.Write ("На текущий момент активных задач нет.");  			return;  		}  		while (OleDbDr.Read ()) {  			Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  			int id = Convert.ToInt32 (OleDbDr.GetValue (0));  			DateTime NowDate = DateTime.Now;  			DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  			TimeSpan diff = NowDate - StartOper;  			Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  			int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  			int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  			int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  			int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  			int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  			int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  			switch (id) {  			case 1:  				//Репликации 7min  				if (diff.TotalMinutes > replicationTime)  					RestartService (id);  				break;  			case 2:  				//Репликации ночные 20m  				if (diff.TotalMinutes > replicationNightTime)  					RestartService (id);  				break;  			case 3:  				//Выгрузка терминальных пользователей 5m  				if (diff.TotalMinutes > unloadingUserTimes)  					RestartService (id);  				break;  			case 4:  				//Прием реализации 7 m  				if (diff.TotalMinutes > loadingSalesTimes)  					RestartService (id);  				break;  			case 5:  				//Перерасчет агрегаций 2h  				if (diff.TotalMinutes > recalculationTime)  					RestartService (id);  				break;  			case 6:  				//Копия БД 10m  				if (diff.TotalMinutes > copybdTime)  					RestartService (id);  				break;  			}  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  	Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  	if (OleDbDr == null || !OleDbDr.HasRows) {  		Log.Write ("На текущий момент активных задач нет.");  		return;  	}  	while (OleDbDr.Read ()) {  		Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  		int id = Convert.ToInt32 (OleDbDr.GetValue (0));  		DateTime NowDate = DateTime.Now;  		DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  		TimeSpan diff = NowDate - StartOper;  		Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  		int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  		int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  		int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  		int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  		int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  		int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  		switch (id) {  		case 1:  			//Репликации 7min  			if (diff.TotalMinutes > replicationTime)  				RestartService (id);  			break;  		case 2:  			//Репликации ночные 20m  			if (diff.TotalMinutes > replicationNightTime)  				RestartService (id);  			break;  		case 3:  			//Выгрузка терминальных пользователей 5m  			if (diff.TotalMinutes > unloadingUserTimes)  				RestartService (id);  			break;  		case 4:  			//Прием реализации 7 m  			if (diff.TotalMinutes > loadingSalesTimes)  				RestartService (id);  			break;  		case 5:  			//Перерасчет агрегаций 2h  			if (diff.TotalMinutes > recalculationTime)  				RestartService (id);  			break;  		case 6:  			//Копия БД 10m  			if (diff.TotalMinutes > copybdTime)  				RestartService (id);  			break;  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  	Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  	if (OleDbDr == null || !OleDbDr.HasRows) {  		Log.Write ("На текущий момент активных задач нет.");  		return;  	}  	while (OleDbDr.Read ()) {  		Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  		int id = Convert.ToInt32 (OleDbDr.GetValue (0));  		DateTime NowDate = DateTime.Now;  		DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  		TimeSpan diff = NowDate - StartOper;  		Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  		int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  		int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  		int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  		int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  		int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  		int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  		switch (id) {  		case 1:  			//Репликации 7min  			if (diff.TotalMinutes > replicationTime)  				RestartService (id);  			break;  		case 2:  			//Репликации ночные 20m  			if (diff.TotalMinutes > replicationNightTime)  				RestartService (id);  			break;  		case 3:  			//Выгрузка терминальных пользователей 5m  			if (diff.TotalMinutes > unloadingUserTimes)  				RestartService (id);  			break;  		case 4:  			//Прием реализации 7 m  			if (diff.TotalMinutes > loadingSalesTimes)  				RestartService (id);  			break;  		case 5:  			//Перерасчет агрегаций 2h  			if (diff.TotalMinutes > recalculationTime)  				RestartService (id);  			break;  		case 6:  			//Копия БД 10m  			if (diff.TotalMinutes > copybdTime)  				RestartService (id);  			break;  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  	Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  	if (OleDbDr == null || !OleDbDr.HasRows) {  		Log.Write ("На текущий момент активных задач нет.");  		return;  	}  	while (OleDbDr.Read ()) {  		Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  		int id = Convert.ToInt32 (OleDbDr.GetValue (0));  		DateTime NowDate = DateTime.Now;  		DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  		TimeSpan diff = NowDate - StartOper;  		Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  		int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  		int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  		int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  		int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  		int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  		int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  		switch (id) {  		case 1:  			//Репликации 7min  			if (diff.TotalMinutes > replicationTime)  				RestartService (id);  			break;  		case 2:  			//Репликации ночные 20m  			if (diff.TotalMinutes > replicationNightTime)  				RestartService (id);  			break;  		case 3:  			//Выгрузка терминальных пользователей 5m  			if (diff.TotalMinutes > unloadingUserTimes)  				RestartService (id);  			break;  		case 4:  			//Прием реализации 7 m  			if (diff.TotalMinutes > loadingSalesTimes)  				RestartService (id);  			break;  		case 5:  			//Перерасчет агрегаций 2h  			if (diff.TotalMinutes > recalculationTime)  				RestartService (id);  			break;  		case 6:  			//Копия БД 10m  			if (diff.TotalMinutes > copybdTime)  				RestartService (id);  			break;  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  	Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  	if (OleDbDr == null || !OleDbDr.HasRows) {  		Log.Write ("На текущий момент активных задач нет.");  		return;  	}  	while (OleDbDr.Read ()) {  		Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  		int id = Convert.ToInt32 (OleDbDr.GetValue (0));  		DateTime NowDate = DateTime.Now;  		DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  		TimeSpan diff = NowDate - StartOper;  		Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  		int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  		int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  		int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  		int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  		int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  		int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  		switch (id) {  		case 1:  			//Репликации 7min  			if (diff.TotalMinutes > replicationTime)  				RestartService (id);  			break;  		case 2:  			//Репликации ночные 20m  			if (diff.TotalMinutes > replicationNightTime)  				RestartService (id);  			break;  		case 3:  			//Выгрузка терминальных пользователей 5m  			if (diff.TotalMinutes > unloadingUserTimes)  				RestartService (id);  			break;  		case 4:  			//Прием реализации 7 m  			if (diff.TotalMinutes > loadingSalesTimes)  				RestartService (id);  			break;  		case 5:  			//Перерасчет агрегаций 2h  			if (diff.TotalMinutes > recalculationTime)  				RestartService (id);  			break;  		case 6:  			//Копия БД 10m  			if (diff.TotalMinutes > copybdTime)  				RestartService (id);  			break;  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  	Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  	if (OleDbDr == null || !OleDbDr.HasRows) {  		Log.Write ("На текущий момент активных задач нет.");  		return;  	}  	while (OleDbDr.Read ()) {  		Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  		int id = Convert.ToInt32 (OleDbDr.GetValue (0));  		DateTime NowDate = DateTime.Now;  		DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  		TimeSpan diff = NowDate - StartOper;  		Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  		int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  		int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  		int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  		int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  		int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  		int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  		switch (id) {  		case 1:  			//Репликации 7min  			if (diff.TotalMinutes > replicationTime)  				RestartService (id);  			break;  		case 2:  			//Репликации ночные 20m  			if (diff.TotalMinutes > replicationNightTime)  				RestartService (id);  			break;  		case 3:  			//Выгрузка терминальных пользователей 5m  			if (diff.TotalMinutes > unloadingUserTimes)  				RestartService (id);  			break;  		case 4:  			//Прием реализации 7 m  			if (diff.TotalMinutes > loadingSalesTimes)  				RestartService (id);  			break;  		case 5:  			//Перерасчет агрегаций 2h  			if (diff.TotalMinutes > recalculationTime)  				RestartService (id);  			break;  		case 6:  			//Копия БД 10m  			if (diff.TotalMinutes > copybdTime)  				RestartService (id);  			break;  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: using (OleDbDataReader OleDbDr = OleDbcmd.ExecuteReader ()) {  	Color.WriteLineColor ("Запрос..."' ConsoleColor.Green);  	if (OleDbDr == null || !OleDbDr.HasRows) {  		Log.Write ("На текущий момент активных задач нет.");  		return;  	}  	while (OleDbDr.Read ()) {  		Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  		int id = Convert.ToInt32 (OleDbDr.GetValue (0));  		DateTime NowDate = DateTime.Now;  		DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  		TimeSpan diff = NowDate - StartOper;  		Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  		int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  		int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  		int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  		int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  		int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  		int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  		switch (id) {  		case 1:  			//Репликации 7min  			if (diff.TotalMinutes > replicationTime)  				RestartService (id);  			break;  		case 2:  			//Репликации ночные 20m  			if (diff.TotalMinutes > replicationNightTime)  				RestartService (id);  			break;  		case 3:  			//Выгрузка терминальных пользователей 5m  			if (diff.TotalMinutes > unloadingUserTimes)  				RestartService (id);  			break;  		case 4:  			//Прием реализации 7 m  			if (diff.TotalMinutes > loadingSalesTimes)  				RestartService (id);  			break;  		case 5:  			//Перерасчет агрегаций 2h  			if (diff.TotalMinutes > recalculationTime)  				RestartService (id);  			break;  		case 6:  			//Копия БД 10m  			if (diff.TotalMinutes > copybdTime)  				RestartService (id);  			break;  		}  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: while (OleDbDr.Read ()) {  	Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  	int id = Convert.ToInt32 (OleDbDr.GetValue (0));  	DateTime NowDate = DateTime.Now;  	DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  	TimeSpan diff = NowDate - StartOper;  	Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  	int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  	int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  	int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  	int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  	int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  	int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  	switch (id) {  	case 1:  		//Репликации 7min  		if (diff.TotalMinutes > replicationTime)  			RestartService (id);  		break;  	case 2:  		//Репликации ночные 20m  		if (diff.TotalMinutes > replicationNightTime)  			RestartService (id);  		break;  	case 3:  		//Выгрузка терминальных пользователей 5m  		if (diff.TotalMinutes > unloadingUserTimes)  			RestartService (id);  		break;  	case 4:  		//Прием реализации 7 m  		if (diff.TotalMinutes > loadingSalesTimes)  			RestartService (id);  		break;  	case 5:  		//Перерасчет агрегаций 2h  		if (diff.TotalMinutes > recalculationTime)  			RestartService (id);  		break;  	case 6:  		//Копия БД 10m  		if (diff.TotalMinutes > copybdTime)  			RestartService (id);  		break;  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: while (OleDbDr.Read ()) {  	Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  	int id = Convert.ToInt32 (OleDbDr.GetValue (0));  	DateTime NowDate = DateTime.Now;  	DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  	TimeSpan diff = NowDate - StartOper;  	Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  	int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  	int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  	int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  	int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  	int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  	int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  	switch (id) {  	case 1:  		//Репликации 7min  		if (diff.TotalMinutes > replicationTime)  			RestartService (id);  		break;  	case 2:  		//Репликации ночные 20m  		if (diff.TotalMinutes > replicationNightTime)  			RestartService (id);  		break;  	case 3:  		//Выгрузка терминальных пользователей 5m  		if (diff.TotalMinutes > unloadingUserTimes)  			RestartService (id);  		break;  	case 4:  		//Прием реализации 7 m  		if (diff.TotalMinutes > loadingSalesTimes)  			RestartService (id);  		break;  	case 5:  		//Перерасчет агрегаций 2h  		if (diff.TotalMinutes > recalculationTime)  			RestartService (id);  		break;  	case 6:  		//Копия БД 10m  		if (diff.TotalMinutes > copybdTime)  			RestartService (id);  		break;  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: while (OleDbDr.Read ()) {  	Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  	int id = Convert.ToInt32 (OleDbDr.GetValue (0));  	DateTime NowDate = DateTime.Now;  	DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  	TimeSpan diff = NowDate - StartOper;  	Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  	int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  	int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  	int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  	int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  	int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  	int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  	switch (id) {  	case 1:  		//Репликации 7min  		if (diff.TotalMinutes > replicationTime)  			RestartService (id);  		break;  	case 2:  		//Репликации ночные 20m  		if (diff.TotalMinutes > replicationNightTime)  			RestartService (id);  		break;  	case 3:  		//Выгрузка терминальных пользователей 5m  		if (diff.TotalMinutes > unloadingUserTimes)  			RestartService (id);  		break;  	case 4:  		//Прием реализации 7 m  		if (diff.TotalMinutes > loadingSalesTimes)  			RestartService (id);  		break;  	case 5:  		//Перерасчет агрегаций 2h  		if (diff.TotalMinutes > recalculationTime)  			RestartService (id);  		break;  	case 6:  		//Копия БД 10m  		if (diff.TotalMinutes > copybdTime)  			RestartService (id);  		break;  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: while (OleDbDr.Read ()) {  	Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  	int id = Convert.ToInt32 (OleDbDr.GetValue (0));  	DateTime NowDate = DateTime.Now;  	DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  	TimeSpan diff = NowDate - StartOper;  	Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  	int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  	int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  	int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  	int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  	int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  	int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  	switch (id) {  	case 1:  		//Репликации 7min  		if (diff.TotalMinutes > replicationTime)  			RestartService (id);  		break;  	case 2:  		//Репликации ночные 20m  		if (diff.TotalMinutes > replicationNightTime)  			RestartService (id);  		break;  	case 3:  		//Выгрузка терминальных пользователей 5m  		if (diff.TotalMinutes > unloadingUserTimes)  			RestartService (id);  		break;  	case 4:  		//Прием реализации 7 m  		if (diff.TotalMinutes > loadingSalesTimes)  			RestartService (id);  		break;  	case 5:  		//Перерасчет агрегаций 2h  		if (diff.TotalMinutes > recalculationTime)  			RestartService (id);  		break;  	case 6:  		//Копия БД 10m  		if (diff.TotalMinutes > copybdTime)  			RestartService (id);  		break;  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: while (OleDbDr.Read ()) {  	Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  	int id = Convert.ToInt32 (OleDbDr.GetValue (0));  	DateTime NowDate = DateTime.Now;  	DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  	TimeSpan diff = NowDate - StartOper;  	Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  	int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  	int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  	int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  	int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  	int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  	int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  	switch (id) {  	case 1:  		//Репликации 7min  		if (diff.TotalMinutes > replicationTime)  			RestartService (id);  		break;  	case 2:  		//Репликации ночные 20m  		if (diff.TotalMinutes > replicationNightTime)  			RestartService (id);  		break;  	case 3:  		//Выгрузка терминальных пользователей 5m  		if (diff.TotalMinutes > unloadingUserTimes)  			RestartService (id);  		break;  	case 4:  		//Прием реализации 7 m  		if (diff.TotalMinutes > loadingSalesTimes)  			RestartService (id);  		break;  	case 5:  		//Перерасчет агрегаций 2h  		if (diff.TotalMinutes > recalculationTime)  			RestartService (id);  		break;  	case 6:  		//Копия БД 10m  		if (diff.TotalMinutes > copybdTime)  			RestartService (id);  		break;  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: while (OleDbDr.Read ()) {  	Color.WriteLineColor ("Получение значений..."' ConsoleColor.Green);  	int id = Convert.ToInt32 (OleDbDr.GetValue (0));  	DateTime NowDate = DateTime.Now;  	DateTime StartOper = Convert.ToDateTime (OleDbDr.GetValue (2));  	TimeSpan diff = NowDate - StartOper;  	Log.Write ("Обнаружено активное задание: " + GetStringSname (id) + " .Время выполнения составляет: " + diff.Hours + "." + diff.Minutes + "." + diff.Seconds);  	int replicationTime = int.Parse (Config.GetParametr ("replicationTime"));  	int replicationNightTime = int.Parse (Config.GetParametr ("replicationNightTime"));  	int unloadingUserTimes = int.Parse (Config.GetParametr ("unloadingUserTimes"));  	int loadingSalesTimes = int.Parse (Config.GetParametr ("loadingSalesTimes"));  	int recalculationTime = int.Parse (Config.GetParametr ("recalculationTime"));  	int copybdTime = int.Parse (Config.GetParametr ("copybdTime"));  	switch (id) {  	case 1:  		//Репликации 7min  		if (diff.TotalMinutes > replicationTime)  			RestartService (id);  		break;  	case 2:  		//Репликации ночные 20m  		if (diff.TotalMinutes > replicationNightTime)  			RestartService (id);  		break;  	case 3:  		//Выгрузка терминальных пользователей 5m  		if (diff.TotalMinutes > unloadingUserTimes)  			RestartService (id);  		break;  	case 4:  		//Прием реализации 7 m  		if (diff.TotalMinutes > loadingSalesTimes)  			RestartService (id);  		break;  	case 5:  		//Перерасчет агрегаций 2h  		if (diff.TotalMinutes > recalculationTime)  			RestartService (id);  		break;  	case 6:  		//Копия БД 10m  		if (diff.TotalMinutes > copybdTime)  			RestartService (id);  		break;  	}  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: switch (id) {  case 1:  	//Репликации 7min  	if (diff.TotalMinutes > replicationTime)  		RestartService (id);  	break;  case 2:  	//Репликации ночные 20m  	if (diff.TotalMinutes > replicationNightTime)  		RestartService (id);  	break;  case 3:  	//Выгрузка терминальных пользователей 5m  	if (diff.TotalMinutes > unloadingUserTimes)  		RestartService (id);  	break;  case 4:  	//Прием реализации 7 m  	if (diff.TotalMinutes > loadingSalesTimes)  		RestartService (id);  	break;  case 5:  	//Перерасчет агрегаций 2h  	if (diff.TotalMinutes > recalculationTime)  		RestartService (id);  	break;  case 6:  	//Копия БД 10m  	if (diff.TotalMinutes > copybdTime)  		RestartService (id);  	break;  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: switch (id) {  case 1:  	//Репликации 7min  	if (diff.TotalMinutes > replicationTime)  		RestartService (id);  	break;  case 2:  	//Репликации ночные 20m  	if (diff.TotalMinutes > replicationNightTime)  		RestartService (id);  	break;  case 3:  	//Выгрузка терминальных пользователей 5m  	if (diff.TotalMinutes > unloadingUserTimes)  		RestartService (id);  	break;  case 4:  	//Прием реализации 7 m  	if (diff.TotalMinutes > loadingSalesTimes)  		RestartService (id);  	break;  case 5:  	//Перерасчет агрегаций 2h  	if (diff.TotalMinutes > recalculationTime)  		RestartService (id);  	break;  case 6:  	//Копия БД 10m  	if (diff.TotalMinutes > copybdTime)  		RestartService (id);  	break;  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: switch (id) {  case 1:  	//Репликации 7min  	if (diff.TotalMinutes > replicationTime)  		RestartService (id);  	break;  case 2:  	//Репликации ночные 20m  	if (diff.TotalMinutes > replicationNightTime)  		RestartService (id);  	break;  case 3:  	//Выгрузка терминальных пользователей 5m  	if (diff.TotalMinutes > unloadingUserTimes)  		RestartService (id);  	break;  case 4:  	//Прием реализации 7 m  	if (diff.TotalMinutes > loadingSalesTimes)  		RestartService (id);  	break;  case 5:  	//Перерасчет агрегаций 2h  	if (diff.TotalMinutes > recalculationTime)  		RestartService (id);  	break;  case 6:  	//Копия БД 10m  	if (diff.TotalMinutes > copybdTime)  		RestartService (id);  	break;  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: switch (id) {  case 1:  	//Репликации 7min  	if (diff.TotalMinutes > replicationTime)  		RestartService (id);  	break;  case 2:  	//Репликации ночные 20m  	if (diff.TotalMinutes > replicationNightTime)  		RestartService (id);  	break;  case 3:  	//Выгрузка терминальных пользователей 5m  	if (diff.TotalMinutes > unloadingUserTimes)  		RestartService (id);  	break;  case 4:  	//Прием реализации 7 m  	if (diff.TotalMinutes > loadingSalesTimes)  		RestartService (id);  	break;  case 5:  	//Перерасчет агрегаций 2h  	if (diff.TotalMinutes > recalculationTime)  		RestartService (id);  	break;  case 6:  	//Копия БД 10m  	if (diff.TotalMinutes > copybdTime)  		RestartService (id);  	break;  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following statement contains a magic number: switch (id) {  case 1:  	//Репликации 7min  	if (diff.TotalMinutes > replicationTime)  		RestartService (id);  	break;  case 2:  	//Репликации ночные 20m  	if (diff.TotalMinutes > replicationNightTime)  		RestartService (id);  	break;  case 3:  	//Выгрузка терминальных пользователей 5m  	if (diff.TotalMinutes > unloadingUserTimes)  		RestartService (id);  	break;  case 4:  	//Прием реализации 7 m  	if (diff.TotalMinutes > loadingSalesTimes)  		RestartService (id);  	break;  case 5:  	//Перерасчет агрегаций 2h  	if (diff.TotalMinutes > recalculationTime)  		RestartService (id);  	break;  case 6:  	//Копия БД 10m  	if (diff.TotalMinutes > copybdTime)  		RestartService (id);  	break;  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,GetStringSname,The following statement contains a magic number: switch (id) {  case 1:  	return @"Репликации";  case 2:  	return @"Репликации ночные";  case 3:  	return @"Выгрузка терминальных пользователей";  case 4:  	return @"Прием реализации";  case 5:  	return @"Перерасчет агрегаций";  case 6:  	return @"Копия БД";  default:  	return @"Неизвестная операция";  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,GetStringSname,The following statement contains a magic number: switch (id) {  case 1:  	return @"Репликации";  case 2:  	return @"Репликации ночные";  case 3:  	return @"Выгрузка терминальных пользователей";  case 4:  	return @"Прием реализации";  case 5:  	return @"Перерасчет агрегаций";  case 6:  	return @"Копия БД";  default:  	return @"Неизвестная операция";  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,GetStringSname,The following statement contains a magic number: switch (id) {  case 1:  	return @"Репликации";  case 2:  	return @"Репликации ночные";  case 3:  	return @"Выгрузка терминальных пользователей";  case 4:  	return @"Прием реализации";  case 5:  	return @"Перерасчет агрегаций";  case 6:  	return @"Копия БД";  default:  	return @"Неизвестная операция";  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,GetStringSname,The following statement contains a magic number: switch (id) {  case 1:  	return @"Репликации";  case 2:  	return @"Репликации ночные";  case 3:  	return @"Выгрузка терминальных пользователей";  case 4:  	return @"Прием реализации";  case 5:  	return @"Перерасчет агрегаций";  case 6:  	return @"Копия БД";  default:  	return @"Неизвестная операция";  }  
Magic Number,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,GetStringSname,The following statement contains a magic number: switch (id) {  case 1:  	return @"Репликации";  case 2:  	return @"Репликации ночные";  case 3:  	return @"Выгрузка терминальных пользователей";  case 4:  	return @"Прием реализации";  case 5:  	return @"Перерасчет агрегаций";  case 6:  	return @"Копия БД";  default:  	return @"Неизвестная операция";  }  
Missing Default,CheckService,Program,C:\repos\partizanes_CheckService\CheckService\Program.cs,CheckTimeOperation,The following switch statement is missing a default case: switch (id) {  case 1:  	//Репликации 7min  	if (diff.TotalMinutes > replicationTime)  		RestartService (id);  	break;  case 2:  	//Репликации ночные 20m  	if (diff.TotalMinutes > replicationNightTime)  		RestartService (id);  	break;  case 3:  	//Выгрузка терминальных пользователей 5m  	if (diff.TotalMinutes > unloadingUserTimes)  		RestartService (id);  	break;  case 4:  	//Прием реализации 7 m  	if (diff.TotalMinutes > loadingSalesTimes)  		RestartService (id);  	break;  case 5:  	//Перерасчет агрегаций 2h  	if (diff.TotalMinutes > recalculationTime)  		RestartService (id);  	break;  case 6:  	//Копия БД 10m  	if (diff.TotalMinutes > copybdTime)  		RestartService (id);  	break;  }  
