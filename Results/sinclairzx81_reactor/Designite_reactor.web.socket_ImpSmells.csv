Implementation smell,Namespace,Class,File,Method,Description
Long Method,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The method has 106 lines of code.
Complex Method,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,Cyclomatic complexity of the method is 9
Long Parameter List,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Frame,The method has 5 parameters. Parameters: fin' opcode' mask' payload' compressed
Long Parameter List,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,CreateFrame,The method has 5 parameters. Parameters: fin' opcode' mask' data' compressed
Long Parameter List,Reactor.Web.Socket.Protocol,Payload,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Payload.cs,Payload,The method has 5 parameters. Parameters: extData' appData' appDataStart' appDataLength' masked
Long Parameter List,Reactor.Web.Socket.Protocol,Util,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Util.cs,readBytes,The method has 5 parameters. Parameters: stream' buffer' offset' length' dest
Long Statement,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The length of the statement  "                throw new WebSocketException(CloseStatusCode.InconsistentData' "The payload data length of a control frame is greater than 125 bytes."); " is 136.
Long Statement,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The length of the statement  "                    throw new WebSocketException(CloseStatusCode.TooBig' "The 'Payload Data' length is greater than the allowable length."); " is 120.
Long Statement,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Print,The length of the statement  "            return String.Format(format' frame.Fin' frame.Rsv1' frame.Rsv2' frame.Rsv3' opcode' frame.Mask' payloadLen' extLen' key' data); " is 127.
Long Statement,Reactor.Web.Socket,ServerWebSocketUpgradeRequest,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\ServerWebSocketUpgradeRequest.cs,Create,The length of the statement  "                if (protocol == HttpVersion.Version11 && method.ToLower() == "get" && upgrade.ToLower().Contains("websocket") && connection.ToLower().Contains("upgrade")) " is 154.
Complex Conditional,Reactor.Web.Socket,ServerWebSocketUpgradeRequest,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\ServerWebSocketUpgradeRequest.cs,Create,The conditional expression  "protocol == HttpVersion.Version11 && method.ToLower() == "get" && upgrade.ToLower().Contains("websocket") && connection.ToLower().Contains("upgrade")"  is complex.
Empty Catch Block,Reactor.Web.Socket,WebSocketResponse,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\WebSocketResponse.cs,ParseResponseHeader,The method has an empty catch block.
Empty Catch Block,Reactor.Web.Socket,WebSocketResponse,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\WebSocketResponse.cs,ParseResponseBody,The method has an empty catch block.
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Frame,The following statement contains a magic number: var payloadLen = dataLen < 126 ? (byte)dataLen                                                                    : dataLen < 0x010000 ? (byte)126 : (byte)127;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Frame,The following statement contains a magic number: var payloadLen = dataLen < 126 ? (byte)dataLen                                                                    : dataLen < 0x010000 ? (byte)126 : (byte)127;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Frame,The following statement contains a magic number: var payloadLen = dataLen < 126 ? (byte)dataLen                                                                    : dataLen < 0x010000 ? (byte)126 : (byte)127;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Frame,The following statement contains a magic number: this.ExtPayloadLen = payloadLen < 126                              ? new byte[] { }                              : payloadLen == 126                                ? Util.ToByteArrayInternally(((ushort)dataLen)' ByteOrder.Big)                                : Util.ToByteArrayInternally(dataLen' ByteOrder.Big);
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Frame,The following statement contains a magic number: this.ExtPayloadLen = payloadLen < 126                              ? new byte[] { }                              : payloadLen == 126                                ? Util.ToByteArrayInternally(((ushort)dataLen)' ByteOrder.Big)                                : Util.ToByteArrayInternally(dataLen' ByteOrder.Big);
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,CreateMaskingKey,The following statement contains a magic number: var key = new byte[4];
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: var count = (long)(len / 4);
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: var rem = (int)(len % 4);
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: if (count < 10000)              {                  countDigit = 4;                    countFmt = "{0'4}";              }              else if (count < 0x010000)              {                  countDigit = 4;                    countFmt = "{0'4:X}";              }              else if (count < 0x0100000000)              {                  countDigit = 8;                    countFmt = "{0'8:X}";              }              else              {                  countDigit = 16;                    countFmt = "{0'16:X}";              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: if (count < 10000)              {                  countDigit = 4;                    countFmt = "{0'4}";              }              else if (count < 0x010000)              {                  countDigit = 4;                    countFmt = "{0'4:X}";              }              else if (count < 0x0100000000)              {                  countDigit = 8;                    countFmt = "{0'8:X}";              }              else              {                  countDigit = 16;                    countFmt = "{0'16:X}";              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: if (count < 10000)              {                  countDigit = 4;                    countFmt = "{0'4}";              }              else if (count < 0x010000)              {                  countDigit = 4;                    countFmt = "{0'4:X}";              }              else if (count < 0x0100000000)              {                  countDigit = 8;                    countFmt = "{0'8:X}";              }              else              {                  countDigit = 16;                    countFmt = "{0'16:X}";              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: if (count < 10000)              {                  countDigit = 4;                    countFmt = "{0'4}";              }              else if (count < 0x010000)              {                  countDigit = 4;                    countFmt = "{0'4:X}";              }              else if (count < 0x0100000000)              {                  countDigit = 8;                    countFmt = "{0'8:X}";              }              else              {                  countDigit = 16;                    countFmt = "{0'16:X}";              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: if (count < 10000)              {                  countDigit = 4;                    countFmt = "{0'4}";              }              else if (count < 0x010000)              {                  countDigit = 4;                    countFmt = "{0'4:X}";              }              else if (count < 0x0100000000)              {                  countDigit = 8;                    countFmt = "{0'8:X}";              }              else              {                  countDigit = 16;                    countFmt = "{0'16:X}";              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: var buffer = new StringBuilder(64);
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Dump,The following statement contains a magic number: for (i = 0; i <= count; i++)              {                  j = i * 4;                    if (i < count)                  {                      printLine(                        Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0')'                          Convert.ToString(frameAsBytes[j + 3]' 2).PadLeft(8' '0'));                  }                  else if (rem > 0)                  {                      printLine(                          Convert.ToString(frameAsBytes[j]' 2).PadLeft(8' '0')'                          rem >= 2 ? Convert.ToString(frameAsBytes[j + 1]' 2).PadLeft(8' '0') : String.Empty'                          rem == 3 ? Convert.ToString(frameAsBytes[j + 2]' 2).PadLeft(8' '0') : String.Empty'                          String.Empty);                  }              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: if (isControl(opcode) && payloadLen > 125)              {                  throw new WebSocketException(CloseStatusCode.InconsistentData' "The payload data length of a control frame is greater than 125 bytes.");              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: var extLen = payloadLen < 126                           ? 0                           : payloadLen == 126                             ? 2                             : 8;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: var extLen = payloadLen < 126                           ? 0                           : payloadLen == 126                             ? 2                             : 8;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: var extLen = payloadLen < 126                           ? 0                           : payloadLen == 126                             ? 2                             : 8;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: var extLen = payloadLen < 126                           ? 0                           : payloadLen == 126                             ? 2                             : 8;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: var maskingKey = masked ? Util.ReadBytes(stream' 4) : new byte[] { };
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: if (masked && maskingKey.Length != 4)              {                  throw new WebSocketException("The 'Masking Key' of a frame cannot be read from the data source.");              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: ulong dataLen = payloadLen < 126                              ? payloadLen                              : payloadLen == 126                                ? Util.ToUInt16(extPayloadLen' ByteOrder.Big)                                : Util.ToUInt64(extPayloadLen' ByteOrder.Big);
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: ulong dataLen = payloadLen < 126                              ? payloadLen                              : payloadLen == 126                                ? Util.ToUInt16(extPayloadLen' ByteOrder.Big)                                : Util.ToUInt64(extPayloadLen' ByteOrder.Big);
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: if (dataLen > 0)              {                  // Check if allowable payload data length.                  if (payloadLen > 126 && dataLen > Payload.MaxLength)                  {                      throw new WebSocketException(CloseStatusCode.TooBig' "The 'Payload Data' length is greater than the allowable length.");                  }                    data = payloadLen > 126                         ? Util.ReadBytes(stream' (long)dataLen' 1024)                         : Util.ReadBytes(stream' (int)dataLen);                    if (data.LongLength != (long)dataLen)                  {                      throw new WebSocketException("The 'Payload Data' of a frame cannot be read from the data source.");                  }              }              else              {                  data = new byte[] { };              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: if (dataLen > 0)              {                  // Check if allowable payload data length.                  if (payloadLen > 126 && dataLen > Payload.MaxLength)                  {                      throw new WebSocketException(CloseStatusCode.TooBig' "The 'Payload Data' length is greater than the allowable length.");                  }                    data = payloadLen > 126                         ? Util.ReadBytes(stream' (long)dataLen' 1024)                         : Util.ReadBytes(stream' (int)dataLen);                    if (data.LongLength != (long)dataLen)                  {                      throw new WebSocketException("The 'Payload Data' of a frame cannot be read from the data source.");                  }              }              else              {                  data = new byte[] { };              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: if (dataLen > 0)              {                  // Check if allowable payload data length.                  if (payloadLen > 126 && dataLen > Payload.MaxLength)                  {                      throw new WebSocketException(CloseStatusCode.TooBig' "The 'Payload Data' length is greater than the allowable length.");                  }                    data = payloadLen > 126                         ? Util.ReadBytes(stream' (long)dataLen' 1024)                         : Util.ReadBytes(stream' (int)dataLen);                    if (data.LongLength != (long)dataLen)                  {                      throw new WebSocketException("The 'Payload Data' of a frame cannot be read from the data source.");                  }              }              else              {                  data = new byte[] { };              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Print,The following statement contains a magic number: var extLen = size == 2                           ? Util.ToUInt16(ext' ByteOrder.Big).ToString()                           : size == 8                             ? Util.ToUInt64(ext' ByteOrder.Big).ToString()                             : String.Empty;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Print,The following statement contains a magic number: var extLen = size == 2                           ? Util.ToUInt16(ext' ByteOrder.Big).ToString()                           : size == 8                             ? Util.ToUInt64(ext' ByteOrder.Big).ToString()                             : String.Empty;
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: var header = Util.ReadBytes(stream' 2);
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,Parse,The following statement contains a magic number: if (header.Length != 2)              {                  throw new WebSocketException("The header part of a frame cannot be read from the data source.");              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,ToByteArray,The following statement contains a magic number: using (var buffer = new MemoryStream())              {                  int header = (int)Fin;                    header = (header << 1) + (int)Rsv1;                    header = (header << 1) + (int)Rsv2;                    header = (header << 1) + (int)Rsv3;                    header = (header << 4) + (int)Opcode;                    header = (header << 1) + (int)Mask;                    header = (header << 7) + (int)PayloadLen;                    buffer.Write(Util.ToByteArrayInternally((ushort)header' ByteOrder.Big)' 0' 2);                    if (this.PayloadLen > 125)                  {                      buffer.Write(this.ExtPayloadLen' 0' ExtPayloadLen.Length);                  }                    if (this.Mask == Mask.Mask)                  {                      buffer.Write(this.MaskingKey' 0' MaskingKey.Length);                  }                    if (this.PayloadLen > 0)                  {                      var data = this.Payload.ToByteArray();                        if (this.PayloadLen < 127)                      {                          buffer.Write(data' 0' data.Length);                      }                      else                      {                          Util.WriteBytes(buffer' data);                      }                  }                    buffer.Close();                    return buffer.ToArray();              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,ToByteArray,The following statement contains a magic number: using (var buffer = new MemoryStream())              {                  int header = (int)Fin;                    header = (header << 1) + (int)Rsv1;                    header = (header << 1) + (int)Rsv2;                    header = (header << 1) + (int)Rsv3;                    header = (header << 4) + (int)Opcode;                    header = (header << 1) + (int)Mask;                    header = (header << 7) + (int)PayloadLen;                    buffer.Write(Util.ToByteArrayInternally((ushort)header' ByteOrder.Big)' 0' 2);                    if (this.PayloadLen > 125)                  {                      buffer.Write(this.ExtPayloadLen' 0' ExtPayloadLen.Length);                  }                    if (this.Mask == Mask.Mask)                  {                      buffer.Write(this.MaskingKey' 0' MaskingKey.Length);                  }                    if (this.PayloadLen > 0)                  {                      var data = this.Payload.ToByteArray();                        if (this.PayloadLen < 127)                      {                          buffer.Write(data' 0' data.Length);                      }                      else                      {                          Util.WriteBytes(buffer' data);                      }                  }                    buffer.Close();                    return buffer.ToArray();              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,ToByteArray,The following statement contains a magic number: using (var buffer = new MemoryStream())              {                  int header = (int)Fin;                    header = (header << 1) + (int)Rsv1;                    header = (header << 1) + (int)Rsv2;                    header = (header << 1) + (int)Rsv3;                    header = (header << 4) + (int)Opcode;                    header = (header << 1) + (int)Mask;                    header = (header << 7) + (int)PayloadLen;                    buffer.Write(Util.ToByteArrayInternally((ushort)header' ByteOrder.Big)' 0' 2);                    if (this.PayloadLen > 125)                  {                      buffer.Write(this.ExtPayloadLen' 0' ExtPayloadLen.Length);                  }                    if (this.Mask == Mask.Mask)                  {                      buffer.Write(this.MaskingKey' 0' MaskingKey.Length);                  }                    if (this.PayloadLen > 0)                  {                      var data = this.Payload.ToByteArray();                        if (this.PayloadLen < 127)                      {                          buffer.Write(data' 0' data.Length);                      }                      else                      {                          Util.WriteBytes(buffer' data);                      }                  }                    buffer.Close();                    return buffer.ToArray();              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,ToByteArray,The following statement contains a magic number: using (var buffer = new MemoryStream())              {                  int header = (int)Fin;                    header = (header << 1) + (int)Rsv1;                    header = (header << 1) + (int)Rsv2;                    header = (header << 1) + (int)Rsv3;                    header = (header << 4) + (int)Opcode;                    header = (header << 1) + (int)Mask;                    header = (header << 7) + (int)PayloadLen;                    buffer.Write(Util.ToByteArrayInternally((ushort)header' ByteOrder.Big)' 0' 2);                    if (this.PayloadLen > 125)                  {                      buffer.Write(this.ExtPayloadLen' 0' ExtPayloadLen.Length);                  }                    if (this.Mask == Mask.Mask)                  {                      buffer.Write(this.MaskingKey' 0' MaskingKey.Length);                  }                    if (this.PayloadLen > 0)                  {                      var data = this.Payload.ToByteArray();                        if (this.PayloadLen < 127)                      {                          buffer.Write(data' 0' data.Length);                      }                      else                      {                          Util.WriteBytes(buffer' data);                      }                  }                    buffer.Close();                    return buffer.ToArray();              }
Magic Number,Reactor.Web.Socket.Protocol,Frame,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Frame.cs,ToByteArray,The following statement contains a magic number: using (var buffer = new MemoryStream())              {                  int header = (int)Fin;                    header = (header << 1) + (int)Rsv1;                    header = (header << 1) + (int)Rsv2;                    header = (header << 1) + (int)Rsv3;                    header = (header << 4) + (int)Opcode;                    header = (header << 1) + (int)Mask;                    header = (header << 7) + (int)PayloadLen;                    buffer.Write(Util.ToByteArrayInternally((ushort)header' ByteOrder.Big)' 0' 2);                    if (this.PayloadLen > 125)                  {                      buffer.Write(this.ExtPayloadLen' 0' ExtPayloadLen.Length);                  }                    if (this.Mask == Mask.Mask)                  {                      buffer.Write(this.MaskingKey' 0' MaskingKey.Length);                  }                    if (this.PayloadLen > 0)                  {                      var data = this.Payload.ToByteArray();                        if (this.PayloadLen < 127)                      {                          buffer.Write(data' 0' data.Length);                      }                      else                      {                          Util.WriteBytes(buffer' data);                      }                  }                    buffer.Close();                    return buffer.ToArray();              }
Magic Number,Reactor.Web.Socket.Protocol,Payload,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Payload.cs,Mask,The following statement contains a magic number: for (long i = 0; i < src.LongLength; i++)              {                  src[i] = (byte)(src[i] ^ key[i % 4]);              }
Magic Number,Reactor.Web.Socket.Protocol,Util,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Util.cs,CopyTo,The following statement contains a magic number: var bufferLen = 256;
Magic Number,Reactor.Web.Socket.Protocol,Util,C:\repos\sinclairzx81_reactor\reactor.web.socket\protocol\Util.cs,Append,The following statement contains a magic number: using (var buffer = new MemoryStream())              {                  var tmp = Util.ToByteArrayInternally(code' ByteOrder.Big);                    buffer.Write(tmp' 0' 2);                    if (reason != null && reason.Length > 0)                  {                      tmp = System.Text.Encoding.UTF8.GetBytes(reason);                        buffer.Write(tmp' 0' tmp.Length);                  }                    buffer.Close();                    return buffer.ToArray();              }
Magic Number,Reactor.Web.Socket,Transport,C:\repos\sinclairzx81_reactor\reactor.web.socket\Transport.cs,Send,The following statement contains a magic number: if(data.Length > (16384 - 4))               {                  callback(new WebSocketException("message is too large. maximum size is set to 16k (16384 - 4) bytes."));                    return;              }
Magic Number,Reactor.Web.Socket,Transport,C:\repos\sinclairzx81_reactor\reactor.web.socket\Transport.cs,Send,The following statement contains a magic number: if(data.Length > (16384 - 4))               {                  callback(new WebSocketException("message is too large. maximum size is set to 16k (16384 - 4) bytes."));                    return;              }
Magic Number,Reactor.Web.Socket,ServerWebSocketUpgradeResponse,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\ServerWebSocketUpgradeResponse.cs,CreateResponseKey,The following statement contains a magic number: var builder = new StringBuilder(secWebSocketKey' 64);
Magic Number,Reactor.Web.Socket,ServerWebSocketUpgradeResponse,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\ServerWebSocketUpgradeResponse.cs,Accept,The following statement contains a magic number: var buffer = new StringBuilder(64);
Magic Number,Reactor.Web.Socket,ServerWebSocketUpgradeResponse,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\ServerWebSocketUpgradeResponse.cs,Reject,The following statement contains a magic number: this.request.Context.Response.StatusCode = 401;
Magic Number,Reactor.Web.Socket,WebSocketRequest,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\WebSocketRequest.cs,GetResponse,The following statement contains a magic number: if (port == -1)              {                  switch(this.Uri.Scheme)                  {                      case "ws" : port = 80; break;                        case "wss": port = 443; break;                        default: break;                  }              }
Magic Number,Reactor.Web.Socket,WebSocketRequest,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\WebSocketRequest.cs,GetResponse,The following statement contains a magic number: if (port == -1)              {                  switch(this.Uri.Scheme)                  {                      case "ws" : port = 80; break;                        case "wss": port = 443; break;                        default: break;                  }              }
Magic Number,Reactor.Web.Socket,WebSocketRequest,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\WebSocketRequest.cs,CreateSecWebSocketKey,The following statement contains a magic number: var data = new byte[16];
Magic Number,Reactor.Web.Socket,WebSocketResponse,C:\repos\sinclairzx81_reactor\reactor.web.socket\request\WebSocketResponse.cs,ParseResponseBody,The following statement contains a magic number: try              {                  //---------------------------------------------                  // checking the body of the response. The goal                  // here is to extract any frames passed on the                   // request from the server' as is the case with                  // socket.io.                  //---------------------------------------------                    var data = buffer.ToString("utf8");                    if (data.Contains("\r\n"))                  {                      var split = data.Split(new string[] { "\r\n\r\n" }' StringSplitOptions.RemoveEmptyEntries);                        if (split.Length == 2)                      {                          var bytes = buffer.ToArray();                            //---------------------------------------------                          // scan for frames                          //---------------------------------------------                            var framedatalist = new List<List<byte>>();                            List<byte> framedata = null;                            foreach (var b in bytes)                          {                              if (b == 0x81)                              {                                  framedata = new List<byte>();                                    framedatalist.Add(framedata);                              }                              if (framedata != null)                              {                                  framedata.Add(b);                              }                          }                            //---------------------------------------------                          // add frame to frame list.                          //---------------------------------------------                            foreach (var item in framedatalist)                          {                              var frame = Reactor.Web.Socket.Protocol.Frame.Parse(item.ToArray()' true);                                this.Frames.Add(frame);                          }                      }                    }              }              catch              {                                }
Magic Number,Reactor.Web.Socket,Server,C:\repos\sinclairzx81_reactor\reactor.web.socket\Server.cs,Server,The following statement contains a magic number: this.server = Reactor.Http.Server.Create(context => {                    context.Response.StatusCode = 401;                    context.Response.ContentType = "text/plain";                    context.Response.Write("method not allowed");                    context.Response.End();                }).Listen(port);
Magic Number,Reactor.Web.Socket,Server,C:\repos\sinclairzx81_reactor\reactor.web.socket\Server.cs,Server,The following statement contains a magic number: if(this.server.OnContext == null)              {                  this.server.OnContext = context =>                  {                      context.Response.StatusCode = 401;                        context.Response.ContentType = "text/plain";                        context.Response.Write("method not allowed");                        context.Response.End();                  };              }
Magic Number,Reactor.Web.Socket,Socket,C:\repos\sinclairzx81_reactor\reactor.web.socket\Socket.cs,Socket,The following statement contains a magic number: request.GetResponse((exception' response) => {                    //---------------------------------------                  // check for handshake error                  //---------------------------------------                    if (exception != null)                  {                      if (this.OnError != null)                      {                          this.OnError(exception);                      }                        return;                  }                    //---------------------------------------                  // check for non upgrade errors                  //---------------------------------------                    if (response.StatusCode != 101)                  {                      if (this.OnError != null)                      {                          this.OnError(new Exception("server rejected connection"));                      }                        return;                  }                    //---------------------------------------                  // configure events                  //---------------------------------------                    this.transport = new Transport(response.Socket);                    //---------------------------------------                  // emit open                  //---------------------------------------                    if (this.OnOpen != null)                  {                      this.OnOpen();                  }                    this.transport.OnError += (error) =>                  {                      if (this.OnError != null)                      {                          this.OnError(error);                      }                  };                    this.transport.OnClose += () =>                  {                      this.State = SocketState.Closed;                        if (this.OnClose != null)                      {                          this.OnClose();                      }                  };                    this.transport.OnMessage += (message) =>                  {                      if (this.OnMessage != null)                      {                          this.OnMessage(message);                      }                  };                    //--------------------------------------------                  // accept any frames passed on the response.                  //--------------------------------------------                    foreach (var frame in response.Frames)                  {                      this.transport.AcceptFrame(frame);                  }              });
