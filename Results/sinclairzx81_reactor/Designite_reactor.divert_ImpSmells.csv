Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Reactor.Divert,WinDivert,C:\repos\sinclairzx81_reactor\reactor.divert\interop\WinDivert.cs,WinDivertRecv,The method has 5 parameters. Parameters: handle' pPacket' packetLen' pAddr' recvLen
Long Parameter List,Reactor.Divert,WinDivert,C:\repos\sinclairzx81_reactor\reactor.divert\interop\WinDivert.cs,WinDivertSend,The method has 5 parameters. Parameters: handle' pPacket' packetLen' pAddr' sendLen
Long Parameter List,Reactor.Divert,WinDivert,C:\repos\sinclairzx81_reactor\reactor.divert\interop\WinDivert.cs,WinDivertHelperParsePacket,The method has 10 parameters. Parameters: pPacket' packetLen' ppIpHdr' ppIpv6Hdr' ppIcmpHdr' ppIcmpv6Hdr' ppTcpHdr' ppUdpHdr' ppData' pDataLen
Magic Number,Reactor.Divert.Parsers,IpHeader,C:\repos\sinclairzx81_reactor\reactor.divert\parsers\IpHeader.cs,IpHeader,The following statement contains a magic number: using (var stream = new MemoryStream(data' 0' data.Length))              {                  using(var reader = new BinaryReader(stream))                  {                      //-----------------------------------------------                      // The first eight bits of the IP header contain the version and                      // header length so we read them                      //-----------------------------------------------                      this.byVersionAndHeaderLength = reader.ReadByte();                                            //-----------------------------------------------                      // The next eight bits contain the Differentiated services                      //-----------------------------------------------                      this.byDifferentiatedServices = reader.ReadByte();                        //-----------------------------------------------                      // Next eight bits hold the total length of the datagram                      //-----------------------------------------------                      this.usTotalLength            = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next sixteen have the identification bytes                      //-----------------------------------------------                      this.usIdentification         = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next sixteen bits contain the flags and fragmentation offset                      //-----------------------------------------------                      this.usFlagsAndOffset         = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next eight bits have the TTL value                      //-----------------------------------------------                      this.byTTL                    = reader.ReadByte();                        //-----------------------------------------------                      //Next eight represnts the protocol encapsulated in the datagram                      //-----------------------------------------------                      this.byProtocol               = reader.ReadByte();                        //-----------------------------------------------                      // Next sixteen bits contain the checksum of the header                      //-----------------------------------------------                        this.sChecksum                = IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // read source IP address                      //-----------------------------------------------                      this.uiSourceIPAddress        = (uint)(reader.ReadInt32());                        //-----------------------------------------------                      // read destination IP address                      //-----------------------------------------------                      this.uiDestinationIPAddress   = (uint)(reader.ReadInt32());                        //-----------------------------------------------                      // calculate the header length                      //-----------------------------------------------                      this.byHeaderLength           = byVersionAndHeaderLength;                        //-----------------------------------------------                      // The last four bits of the version and header length field contain the                      // header length' we perform some simple binary airthmatic operations to                      // extract them                      //-----------------------------------------------                                            this.byHeaderLength <<= 4;                        this.byHeaderLength >>= 4;                        //-----------------------------------------------                      // Multiply by four to get the exact header length                      //-----------------------------------------------                        byHeaderLength *= 4;                        System.Buffer.BlockCopy(data'                                               byHeaderLength'                                               byIPData'                                               0'                                               usTotalLength - byHeaderLength);                  }              }
Magic Number,Reactor.Divert.Parsers,IpHeader,C:\repos\sinclairzx81_reactor\reactor.divert\parsers\IpHeader.cs,IpHeader,The following statement contains a magic number: using (var stream = new MemoryStream(data' 0' data.Length))              {                  using(var reader = new BinaryReader(stream))                  {                      //-----------------------------------------------                      // The first eight bits of the IP header contain the version and                      // header length so we read them                      //-----------------------------------------------                      this.byVersionAndHeaderLength = reader.ReadByte();                                            //-----------------------------------------------                      // The next eight bits contain the Differentiated services                      //-----------------------------------------------                      this.byDifferentiatedServices = reader.ReadByte();                        //-----------------------------------------------                      // Next eight bits hold the total length of the datagram                      //-----------------------------------------------                      this.usTotalLength            = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next sixteen have the identification bytes                      //-----------------------------------------------                      this.usIdentification         = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next sixteen bits contain the flags and fragmentation offset                      //-----------------------------------------------                      this.usFlagsAndOffset         = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next eight bits have the TTL value                      //-----------------------------------------------                      this.byTTL                    = reader.ReadByte();                        //-----------------------------------------------                      //Next eight represnts the protocol encapsulated in the datagram                      //-----------------------------------------------                      this.byProtocol               = reader.ReadByte();                        //-----------------------------------------------                      // Next sixteen bits contain the checksum of the header                      //-----------------------------------------------                        this.sChecksum                = IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // read source IP address                      //-----------------------------------------------                      this.uiSourceIPAddress        = (uint)(reader.ReadInt32());                        //-----------------------------------------------                      // read destination IP address                      //-----------------------------------------------                      this.uiDestinationIPAddress   = (uint)(reader.ReadInt32());                        //-----------------------------------------------                      // calculate the header length                      //-----------------------------------------------                      this.byHeaderLength           = byVersionAndHeaderLength;                        //-----------------------------------------------                      // The last four bits of the version and header length field contain the                      // header length' we perform some simple binary airthmatic operations to                      // extract them                      //-----------------------------------------------                                            this.byHeaderLength <<= 4;                        this.byHeaderLength >>= 4;                        //-----------------------------------------------                      // Multiply by four to get the exact header length                      //-----------------------------------------------                        byHeaderLength *= 4;                        System.Buffer.BlockCopy(data'                                               byHeaderLength'                                               byIPData'                                               0'                                               usTotalLength - byHeaderLength);                  }              }
Magic Number,Reactor.Divert.Parsers,IpHeader,C:\repos\sinclairzx81_reactor\reactor.divert\parsers\IpHeader.cs,IpHeader,The following statement contains a magic number: using (var stream = new MemoryStream(data' 0' data.Length))              {                  using(var reader = new BinaryReader(stream))                  {                      //-----------------------------------------------                      // The first eight bits of the IP header contain the version and                      // header length so we read them                      //-----------------------------------------------                      this.byVersionAndHeaderLength = reader.ReadByte();                                            //-----------------------------------------------                      // The next eight bits contain the Differentiated services                      //-----------------------------------------------                      this.byDifferentiatedServices = reader.ReadByte();                        //-----------------------------------------------                      // Next eight bits hold the total length of the datagram                      //-----------------------------------------------                      this.usTotalLength            = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next sixteen have the identification bytes                      //-----------------------------------------------                      this.usIdentification         = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next sixteen bits contain the flags and fragmentation offset                      //-----------------------------------------------                      this.usFlagsAndOffset         = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Next eight bits have the TTL value                      //-----------------------------------------------                      this.byTTL                    = reader.ReadByte();                        //-----------------------------------------------                      //Next eight represnts the protocol encapsulated in the datagram                      //-----------------------------------------------                      this.byProtocol               = reader.ReadByte();                        //-----------------------------------------------                      // Next sixteen bits contain the checksum of the header                      //-----------------------------------------------                        this.sChecksum                = IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // read source IP address                      //-----------------------------------------------                      this.uiSourceIPAddress        = (uint)(reader.ReadInt32());                        //-----------------------------------------------                      // read destination IP address                      //-----------------------------------------------                      this.uiDestinationIPAddress   = (uint)(reader.ReadInt32());                        //-----------------------------------------------                      // calculate the header length                      //-----------------------------------------------                      this.byHeaderLength           = byVersionAndHeaderLength;                        //-----------------------------------------------                      // The last four bits of the version and header length field contain the                      // header length' we perform some simple binary airthmatic operations to                      // extract them                      //-----------------------------------------------                                            this.byHeaderLength <<= 4;                        this.byHeaderLength >>= 4;                        //-----------------------------------------------                      // Multiply by four to get the exact header length                      //-----------------------------------------------                        byHeaderLength *= 4;                        System.Buffer.BlockCopy(data'                                               byHeaderLength'                                               byIPData'                                               0'                                               usTotalLength - byHeaderLength);                  }              }
Magic Number,Reactor.Divert.Parsers,TcpHeader,C:\repos\sinclairzx81_reactor\reactor.divert\parsers\TcpHeader.cs,TcpHeader,The following statement contains a magic number: using (var stream = new MemoryStream(data' 0' data.Length))              {                  using(var reader = new BinaryReader(stream))                  {                      //-----------------------------------------------                      // The first sixteen bits contain the source port                      //-----------------------------------------------                      usSourcePort            = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16 ());                        //-----------------------------------------------                      // The next sixteen contain the destiination port                      //-----------------------------------------------                      usDestinationPort       = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16 ());                        //-----------------------------------------------                      // Next thirty two have the sequence number                      //-----------------------------------------------                      uiSequenceNumber        = (uint)IPAddress.NetworkToHostOrder(reader.ReadInt32());                        //-----------------------------------------------                      // Next thirty two have the acknowledgement number                      //-----------------------------------------------                      uiAcknowledgementNumber = (uint)IPAddress.NetworkToHostOrder(reader.ReadInt32());                        //-----------------------------------------------                      // The next sixteen bits hold the flags and the data offset                      //-----------------------------------------------                      usDataOffsetAndFlags    = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The next sixteen contain the window size                      //-----------------------------------------------                      usWindow                = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // In the next sixteen we have the checksum                      //-----------------------------------------------                      sChecksum               = (short)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The following sixteen contain the urgent pointer                      //-----------------------------------------------                      usUrgentPointer         = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The data offset indicates where the data begins' so using it we calculate the header length                      //-----------------------------------------------                      byHeaderLength          = (byte)(usDataOffsetAndFlags >> 12);                        byHeaderLength         *= 4;                        //-----------------------------------------------                      // Message length = Total length of the TCP packet - Header length                      //-----------------------------------------------                        usMessageLength         = (ushort)(data.Length - byHeaderLength);                        //-----------------------------------------------                      // Copy the TCP data into the data buffer                      //-----------------------------------------------                      System.Buffer.BlockCopy(data' byHeaderLength' byTCPData' 0' data.Length - byHeaderLength);                  }              }
Magic Number,Reactor.Divert.Parsers,TcpHeader,C:\repos\sinclairzx81_reactor\reactor.divert\parsers\TcpHeader.cs,TcpHeader,The following statement contains a magic number: using (var stream = new MemoryStream(data' 0' data.Length))              {                  using(var reader = new BinaryReader(stream))                  {                      //-----------------------------------------------                      // The first sixteen bits contain the source port                      //-----------------------------------------------                      usSourcePort            = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16 ());                        //-----------------------------------------------                      // The next sixteen contain the destiination port                      //-----------------------------------------------                      usDestinationPort       = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16 ());                        //-----------------------------------------------                      // Next thirty two have the sequence number                      //-----------------------------------------------                      uiSequenceNumber        = (uint)IPAddress.NetworkToHostOrder(reader.ReadInt32());                        //-----------------------------------------------                      // Next thirty two have the acknowledgement number                      //-----------------------------------------------                      uiAcknowledgementNumber = (uint)IPAddress.NetworkToHostOrder(reader.ReadInt32());                        //-----------------------------------------------                      // The next sixteen bits hold the flags and the data offset                      //-----------------------------------------------                      usDataOffsetAndFlags    = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The next sixteen contain the window size                      //-----------------------------------------------                      usWindow                = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // In the next sixteen we have the checksum                      //-----------------------------------------------                      sChecksum               = (short)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The following sixteen contain the urgent pointer                      //-----------------------------------------------                      usUrgentPointer         = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The data offset indicates where the data begins' so using it we calculate the header length                      //-----------------------------------------------                      byHeaderLength          = (byte)(usDataOffsetAndFlags >> 12);                        byHeaderLength         *= 4;                        //-----------------------------------------------                      // Message length = Total length of the TCP packet - Header length                      //-----------------------------------------------                        usMessageLength         = (ushort)(data.Length - byHeaderLength);                        //-----------------------------------------------                      // Copy the TCP data into the data buffer                      //-----------------------------------------------                      System.Buffer.BlockCopy(data' byHeaderLength' byTCPData' 0' data.Length - byHeaderLength);                  }              }
Magic Number,Reactor.Divert.Parsers,Udpheader,C:\repos\sinclairzx81_reactor\reactor.divert\parsers\UdpHeader.cs,Udpheader,The following statement contains a magic number: using(var stream = new MemoryStream(data' 0' data.Length))              {                  using (var reader = new BinaryReader(stream))                  {                      //-----------------------------------------------                      // The first sixteen bits contain the source port                      //-----------------------------------------------                        this.usSourcePort      = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The next sixteen bits contain the destination port                      //-----------------------------------------------                        this.usDestinationPort = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The next sixteen bits contain the length of the UDP packet                      //-----------------------------------------------                        this.usLength          = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The next sixteen bits contain the checksum                      //-----------------------------------------------                        this.sChecksum         = IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Copy the data carried by the UDP packet into the data buffer                      //-----------------------------------------------                        System.Buffer.BlockCopy(data'                                              8'                                                             byUDPData'                                              0'                                              data.Length - 8);                  }              }
Magic Number,Reactor.Divert.Parsers,Udpheader,C:\repos\sinclairzx81_reactor\reactor.divert\parsers\UdpHeader.cs,Udpheader,The following statement contains a magic number: using(var stream = new MemoryStream(data' 0' data.Length))              {                  using (var reader = new BinaryReader(stream))                  {                      //-----------------------------------------------                      // The first sixteen bits contain the source port                      //-----------------------------------------------                        this.usSourcePort      = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The next sixteen bits contain the destination port                      //-----------------------------------------------                        this.usDestinationPort = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The next sixteen bits contain the length of the UDP packet                      //-----------------------------------------------                        this.usLength          = (ushort)IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // The next sixteen bits contain the checksum                      //-----------------------------------------------                        this.sChecksum         = IPAddress.NetworkToHostOrder(reader.ReadInt16());                        //-----------------------------------------------                      // Copy the data carried by the UDP packet into the data buffer                      //-----------------------------------------------                        System.Buffer.BlockCopy(data'                                              8'                                                             byUDPData'                                              0'                                              data.Length - 8);                  }              }
