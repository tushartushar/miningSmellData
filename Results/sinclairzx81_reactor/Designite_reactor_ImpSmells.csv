Implementation smell,Namespace,Class,File,Method,Description
Long Method,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,AddHeader,The method has 115 lines of code.
Long Method,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The method has 113 lines of code.
Long Method,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The method has 161 lines of code.
Long Method,Reactor.Http,Request,C:\repos\sinclairzx81_reactor\reactor\http\Request.cs,Write,The method has 155 lines of code.
Long Method,Reactor.Udp,Socket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.cs,Stun,The method has 127 lines of code.
Long Method,Reactor.File,ReadStream,C:\repos\sinclairzx81_reactor\reactor\file\ReadStream.cs,Read,The method has 140 lines of code.
Complex Method,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,BeginRead,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,InternalWrite,Cyclomatic complexity of the method is 10
Complex Method,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,GetChunkSize,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,Cyclomatic complexity of the method is 11
Complex Method,Reactor.Net,EndPointListener,C:\repos\sinclairzx81_reactor\reactor\net\EndPointListener.cs,SearchListener,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,OnReadInternal,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,Close,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,IsPredefinedScheme,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FinishInitialization,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,Cyclomatic complexity of the method is 21
Complex Method,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 9
Complex Method,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 14
Complex Method,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,Cyclomatic complexity of the method is 10
Complex Method,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 10
Complex Method,Reactor.Net,ListenerPrefix,C:\repos\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,CheckUri,Cyclomatic complexity of the method is 9
Complex Method,Reactor.Net,RequestStream,C:\repos\sinclairzx81_reactor\reactor\net\RequestStream.cs,FillFromBuffer,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,WebHeaderCollection,C:\repos\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,GetValues_internal,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Http,Request,C:\repos\sinclairzx81_reactor\reactor\http\Request.cs,Write,Cyclomatic complexity of the method is 11
Long Parameter List,Reactor,IO,C:\repos\sinclairzx81_reactor\reactor\IO.cs,SendTo,The method has 6 parameters. Parameters: socket' sendbuffer' offset' count' endpoint' callback
Long Parameter List,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,ChunkedInputStream,The method has 5 parameters. Parameters: context' stream' buffer' offset' length
Long Parameter List,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The method has 5 parameters. Parameters: i' j' k' l' m
Long Parameter List,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,HttpConnection,The method has 5 parameters. Parameters: sock' epl' secure' cert' key
Long Parameter List,Reactor.Net,RequestStream,C:\repos\sinclairzx81_reactor\reactor\net\RequestStream.cs,RequestStream,The method has 5 parameters. Parameters: stream' buffer' offset' length' contentlength
Long Parameter List,Reactor.Net,RequestStream,C:\repos\sinclairzx81_reactor\reactor\net\RequestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Net,RequestStream,C:\repos\sinclairzx81_reactor\reactor\net\RequestStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Net,ResponseStream,C:\repos\sinclairzx81_reactor\reactor\net\ResponseStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Net,ResponseStream,C:\repos\sinclairzx81_reactor\reactor\net\ResponseStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Http,Request,C:\repos\sinclairzx81_reactor\reactor\http\Request.cs,Post,The method has 5 parameters. Parameters: Url' contentType' headers' buffer' callback
Long Parameter List,Reactor.Http,Request,C:\repos\sinclairzx81_reactor\reactor\http\Request.cs,Put,The method has 5 parameters. Parameters: Url' contentType' headers' buffer' callback
Long Parameter List,Reactor.Http,Request,C:\repos\sinclairzx81_reactor\reactor\http\Request.cs,Delete,The method has 5 parameters. Parameters: Url' contentType' headers' buffer' callback
Long Parameter List,Reactor.IP,Socket,C:\repos\sinclairzx81_reactor\reactor\ip\Socket.cs,Send,The method has 5 parameters. Parameters: address' port' data' index' count
Long Parameter List,Reactor.Udp,Socket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.cs,Send,The method has 5 parameters. Parameters: address' port' data' index' count
Long Parameter List,Reactor.File,ReadStream,C:\repos\sinclairzx81_reactor\reactor\file\ReadStream.cs,ReadStream,The method has 5 parameters. Parameters: filename' index' count' mode' share
Long Parameter List,Reactor.File,ReadStream,C:\repos\sinclairzx81_reactor\reactor\file\ReadStream.cs,Create,The method has 5 parameters. Parameters: filename' index' count' mode' share
Long Statement,Reactor.Net,ListenerAsyncResult,C:\repos\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The length of the statement  "                if ((schemes == AuthenticationSchemes.Basic || context.Listener.AuthenticationSchemes == AuthenticationSchemes.Negotiate) && context.Request.Headers["Authorization"] == null) " is 174.
Long Statement,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The length of the statement  "                msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1); " is 128.
Complex Conditional,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The conditional expression  "(ic >= 'A' && ic <= 'Z') ||                      (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&                       c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&                       c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&                       c != ']' && c != '?' && c != '=' && c != '{' && c != '}')"  is complex.
Complex Conditional,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,IsPredefinedScheme,The conditional expression  "(c == 'g' && scheme == "gopher") || (c == 'm' && scheme == "mailto")"  is complex.
Complex Conditional,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')"  is complex.
Complex Conditional,Reactor.Net,WebHeaderCollection,C:\repos\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,IsHeaderValue,The conditional expression  "c < 0x20 && (c != '\r' && c != '\n' && c != '\t')"  is complex.
Empty Catch Block,Reactor.Net,EndPointListener,C:\repos\sinclairzx81_reactor\reactor\net\EndPointListener.cs,LoadCertificateAndKey,The method has an empty catch block.
Empty Catch Block,Reactor.Net,EndPointListener,C:\repos\sinclairzx81_reactor\reactor\net\EndPointListener.cs,OnAccept,The method has an empty catch block.
Empty Catch Block,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,SendError,The method has an empty catch block.
Empty Catch Block,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,CloseSocket,The method has an empty catch block.
Empty Catch Block,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,Reactor.Net,ListenerAsyncResult,C:\repos\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,InvokeCallback,The method has an empty catch block.
Empty Catch Block,Reactor.Net,ResponseStream,C:\repos\sinclairzx81_reactor\reactor\net\ResponseStream.cs,InternalWrite,The method has an empty catch block.
Empty Catch Block,Reactor.Net,ResponseStream,C:\repos\sinclairzx81_reactor\reactor\net\ResponseStream.cs,EndWrite,The method has an empty catch block.
Empty Catch Block,Reactor.Http,Request,C:\repos\sinclairzx81_reactor\reactor\http\Request.cs,Write,The method has an empty catch block.
Empty Catch Block,Reactor.Udp,Socket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.cs,StunRequest,The method has an empty catch block.
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 2)              {                  Type actionType = typeof(Reactor.Action<'>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1] });                    var methodinfo = this.GetType().GetMethod("Handler2"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 3)              {                  Type actionType = typeof(Reactor.Action<''>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2] });                    var methodinfo = this.GetType().GetMethod("Handler3"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 3)              {                  Type actionType = typeof(Reactor.Action<''>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2] });                    var methodinfo = this.GetType().GetMethod("Handler3"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 3)              {                  Type actionType = typeof(Reactor.Action<''>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2] });                    var methodinfo = this.GetType().GetMethod("Handler3"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 4)              {                  Type actionType = typeof(Reactor.Action<'''>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2]' types[3] });                    var methodinfo = this.GetType().GetMethod("Handler4"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2]' types[3] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 4)              {                  Type actionType = typeof(Reactor.Action<'''>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2]' types[3] });                    var methodinfo = this.GetType().GetMethod("Handler4"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2]' types[3] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 4)              {                  Type actionType = typeof(Reactor.Action<'''>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2]' types[3] });                    var methodinfo = this.GetType().GetMethod("Handler4"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2]' types[3] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 4)              {                  Type actionType = typeof(Reactor.Action<'''>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2]' types[3] });                    var methodinfo = this.GetType().GetMethod("Handler4"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2]' types[3] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor,DynamicAction,C:\repos\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: if (types.Length == 4)              {                  Type actionType = typeof(Reactor.Action<'''>);                    Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2]' types[3] });                    var methodinfo = this.GetType().GetMethod("Handler4"' BindingFlags.NonPublic | BindingFlags.Instance);                    var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2]' types[3] });                    this.Delegate = Delegate.CreateDelegate(genericActionType' this' genericMethodInfo);              }
Magic Number,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,BeginRead,The following statement contains a magic number: ares.Buffer = new byte[8192];
Magic Number,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,BeginRead,The following statement contains a magic number: ares.Count = 8192;
Magic Number,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,OnRead,The following statement contains a magic number: try              {                  int nread = base.EndRead(base_ares);                                    decoder.Write(ares.Buffer' ares.Offset' nread);                                    nread = decoder.Read(rb.Buffer' rb.Offset' rb.Count);                                    rb.Offset += nread;                                    rb.Count -= nread;                                    if (rb.Count == 0 || !decoder.WantMore || nread == 0)                  {                      no_more_data = !decoder.WantMore && nread == 0;                        ares.Count = rb.InitialCount - rb.Count;                        ares.Complete();                        return;                  }                  ares.Offset = 0;                    ares.Count = Math.Min(8192' decoder.ChunkLeft + 6);                    base.BeginRead(ares.Buffer' ares.Offset' ares.Count' OnRead' rb);                }              catch (Exception e)              {                  context.Connection.SendError(e.Message' 400);                    ares.Complete(e);              }
Magic Number,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,OnRead,The following statement contains a magic number: try              {                  int nread = base.EndRead(base_ares);                                    decoder.Write(ares.Buffer' ares.Offset' nread);                                    nread = decoder.Read(rb.Buffer' rb.Offset' rb.Count);                                    rb.Offset += nread;                                    rb.Count -= nread;                                    if (rb.Count == 0 || !decoder.WantMore || nread == 0)                  {                      no_more_data = !decoder.WantMore && nread == 0;                        ares.Count = rb.InitialCount - rb.Count;                        ares.Complete();                        return;                  }                  ares.Offset = 0;                    ares.Count = Math.Min(8192' decoder.ChunkLeft + 6);                    base.BeginRead(ares.Buffer' ares.Offset' ares.Count' OnRead' rb);                }              catch (Exception e)              {                  context.Connection.SendError(e.Message' 400);                    ares.Complete(e);              }
Magic Number,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,OnRead,The following statement contains a magic number: try              {                  int nread = base.EndRead(base_ares);                                    decoder.Write(ares.Buffer' ares.Offset' nread);                                    nread = decoder.Read(rb.Buffer' rb.Offset' rb.Count);                                    rb.Offset += nread;                                    rb.Count -= nread;                                    if (rb.Count == 0 || !decoder.WantMore || nread == 0)                  {                      no_more_data = !decoder.WantMore && nread == 0;                        ares.Count = rb.InitialCount - rb.Count;                        ares.Complete();                        return;                  }                  ares.Offset = 0;                    ares.Count = Math.Min(8192' decoder.ChunkLeft + 6);                    base.BeginRead(ares.Buffer' ares.Offset' ares.Count' OnRead' rb);                }              catch (Exception e)              {                  context.Connection.SendError(e.Message' 400);                    ares.Complete(e);              }
Magic Number,Reactor.Net,ChunkedInputStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,EndRead,The following statement contains a magic number: if (my_ares.Error != null)              {                  throw new HttpListenerException(400' "I/O operation aborted: " + my_ares.Error.Message);              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,GetChunkSize,The following statement contains a magic number: while (offset < size)              {                  c = (char)buffer[offset++];                    if (c == '\r')                  {                      if (sawCR)                      {                          ThrowProtocolViolation("2 CR found");                      }                        sawCR = true;                        continue;                  }                    if (sawCR && c == '\n')                  {                      break;                  }                                    if (c == ' ')                  {                      gotit = true;                  }                    if (!gotit)                  {                      saved.Append(c);                  }                  if (saved.Length > 20)                  {                      ThrowProtocolViolation("chunk size too long.");                  }              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,GetChunkSize,The following statement contains a magic number: if (chunkSize == 0)              {                  trailerState = 2;                    return State.Trailer;              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: if (trailerState == 2 && (char)buffer[offset] == '\r' && saved.Length == 0)              {                  offset++;                    if (offset < size && (char)buffer[offset] == '\n')                  {                      offset++;                        return State.None;                  }                    offset--;              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4)              {                  c = (char)buffer[offset++];                    if ((st == 0 || st == 2) && c == '\r')                  {                      st++;                        continue;                  }                    if ((st == 1 || st == 3) && c == '\n')                  {                      st++;                        continue;                  }                    if (st > 0)                  {                      saved.Append(stString.Substring(0' saved.Length == 0 ? st - 2 : st));                                            st = 0;                                            if (saved.Length > 4196)                      {                          ThrowProtocolViolation("Error reading trailer (too long).");                      }                  }              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4)              {                  c = (char)buffer[offset++];                    if ((st == 0 || st == 2) && c == '\r')                  {                      st++;                        continue;                  }                    if ((st == 1 || st == 3) && c == '\n')                  {                      st++;                        continue;                  }                    if (st > 0)                  {                      saved.Append(stString.Substring(0' saved.Length == 0 ? st - 2 : st));                                            st = 0;                                            if (saved.Length > 4196)                      {                          ThrowProtocolViolation("Error reading trailer (too long).");                      }                  }              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4)              {                  c = (char)buffer[offset++];                    if ((st == 0 || st == 2) && c == '\r')                  {                      st++;                        continue;                  }                    if ((st == 1 || st == 3) && c == '\n')                  {                      st++;                        continue;                  }                    if (st > 0)                  {                      saved.Append(stString.Substring(0' saved.Length == 0 ? st - 2 : st));                                            st = 0;                                            if (saved.Length > 4196)                      {                          ThrowProtocolViolation("Error reading trailer (too long).");                      }                  }              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4)              {                  c = (char)buffer[offset++];                    if ((st == 0 || st == 2) && c == '\r')                  {                      st++;                        continue;                  }                    if ((st == 1 || st == 3) && c == '\n')                  {                      st++;                        continue;                  }                    if (st > 0)                  {                      saved.Append(stString.Substring(0' saved.Length == 0 ? st - 2 : st));                                            st = 0;                                            if (saved.Length > 4196)                      {                          ThrowProtocolViolation("Error reading trailer (too long).");                      }                  }              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4)              {                  c = (char)buffer[offset++];                    if ((st == 0 || st == 2) && c == '\r')                  {                      st++;                        continue;                  }                    if ((st == 1 || st == 3) && c == '\n')                  {                      st++;                        continue;                  }                    if (st > 0)                  {                      saved.Append(stString.Substring(0' saved.Length == 0 ? st - 2 : st));                                            st = 0;                                            if (saved.Length > 4196)                      {                          ThrowProtocolViolation("Error reading trailer (too long).");                      }                  }              }
Magic Number,Reactor.Net,ChunkStream,C:\repos\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: if (st < 4)              {                  trailerState = st;                                    if (offset < size)                  {                      ThrowProtocolViolation("Error reading trailer.");                  }                    return State.Trailer;              }
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,ToString,The following statement contains a magic number: StringBuilder result = new StringBuilder(64);
Magic Number,Reactor.Net,Cookie,C:\repos\sinclairzx81_reactor\reactor\net\Cookie.cs,ToClientString,The following statement contains a magic number: StringBuilder result = new StringBuilder(64);
Magic Number,Reactor.Net,EndPointListener,C:\repos\sinclairzx81_reactor\reactor\net\EndPointListener.cs,EndPointListener,The following statement contains a magic number: sock.Listen(500);
Magic Number,Reactor.Net,EndPointListener,C:\repos\sinclairzx81_reactor\reactor\net\EndPointListener.cs,AddSpecial,The following statement contains a magic number: foreach (ListenerPrefix p in coll)              {                  if (p.Path == prefix.Path) //TODO: code                  {                      throw new HttpListenerException(400' "Prefix already in use.");                  }              }
Magic Number,Reactor.Net,EndPointListener,C:\repos\sinclairzx81_reactor\reactor\net\EndPointListener.cs,AddPrefix,The following statement contains a magic number: do              {                  prefs = prefixes;                    if (prefs.ContainsKey(prefix))                  {                      HttpListener other = (HttpListener)prefs[prefix];                        if (other != listener) // TODO: code.                      {                          throw new HttpListenerException(400' "There's another listener for " + prefix);                      }                        return;                  }                    p2 = (Hashtable)prefs.Clone();                                    p2[prefix] = listener;                } while (Interlocked.CompareExchange(ref prefixes' p2' prefs) != prefs);
Magic Number,Reactor.Net,EndPointManager,C:\repos\sinclairzx81_reactor\reactor\net\EndPointManager.cs,AddPrefixInternal,The following statement contains a magic number: if (lp.Path.IndexOf('%') != -1)              {                  throw new HttpListenerException(400' "Invalid path.");              }
Magic Number,Reactor.Net,EndPointManager,C:\repos\sinclairzx81_reactor\reactor\net\EndPointManager.cs,AddPrefixInternal,The following statement contains a magic number: if (lp.Path.IndexOf("//"' StringComparison.Ordinal) != -1) // TODO: Code?              {                  throw new HttpListenerException(400' "Invalid path.");              }
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,BeginReadRequest,The following statement contains a magic number: try              {                  if (reuses == 1)                  {                      s_timeout = 15000;                  }                                    timer.Change(s_timeout' System.Threading.Timeout.Infinite);                                    stream.BeginRead(buffer' 0' BufferSize' onread_cb' this);              }              catch              {                  timer.Change(System.Threading.Timeout.Infinite' System.Threading.Timeout.Infinite);                    CloseSocket();                    Unbind();              }
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,OnReadInternal,The following statement contains a magic number: try              {                  nread = stream.EndRead(ares);                    ms.Write(buffer' 0' nread);                    if (ms.Length > 32768)                  {                      SendError("Bad request"' 400);                        Close(true);                        return;                  }              }              catch              {                  if (ms != null && ms.Length > 0)                  {                      SendError();                  }                  if (sock != null)                  {                      CloseSocket();                        Unbind();                  }                  return;              }
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,OnReadInternal,The following statement contains a magic number: try              {                  nread = stream.EndRead(ares);                    ms.Write(buffer' 0' nread);                    if (ms.Length > 32768)                  {                      SendError("Bad request"' 400);                        Close(true);                        return;                  }              }              catch              {                  if (ms != null && ms.Length > 0)                  {                      SendError();                  }                  if (sock != null)                  {                      CloseSocket();                        Unbind();                  }                  return;              }
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,OnReadInternal,The following statement contains a magic number: if (ProcessInput(ms))              {                  if (!context.HaveError)                  {                      context.Request.FinishInitialization();                  }                    if (context.HaveError)                  {                      SendError();                        Close(true);                        return;                  }                    if (!epl.BindContext(context))                  {                      SendError("Invalid host"' 400);                        Close(true);                        return;                  }                  HttpListener listener = context.Listener;                    if (last_listener != listener)                  {                      RemoveConnection();                        listener.AddConnection(this);                        last_listener = listener;                  }                    context_bound = true;                    listener.RegisterContext(context);                    return;              }
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,ProcessInput,The following statement contains a magic number: try              {                  line = ReadLine(buffer' position' len - position' ref used);                    position += used;              }              catch              {                  context.ErrorMessage = "Bad request";                    context.ErrorStatus = 400;                    return true;              }
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,ProcessInput,The following statement contains a magic number: do              {                  if (line == null)                  {                      break;                  }                  if (line == "")                  {                      if (input_state == InputState.RequestLine)                      {                          continue;                      }                      current_line = null;                                            ms           = null;                                            return true;                  }                    if (input_state == InputState.RequestLine)                  {                      context.Request.SetRequestLine(line);                        input_state = InputState.Headers;                  }                  else                  {                      try                      {                          context.Request.AddHeader(line);                      }                      catch (Exception e)                      {                          context.ErrorMessage = e.Message;                            context.ErrorStatus = 400;                            return true;                      }                  }                    if (context.HaveError)                  {                      return true;                  }                    if (position >= len)                  {                      break;                  }                  try                  {                      line = ReadLine(buffer' position' len - position' ref used);                        position += used;                  }                  catch                  {                      context.ErrorMessage = "Bad request";                        context.ErrorStatus = 400;                        return true;                  }                } while (line != null);
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,ProcessInput,The following statement contains a magic number: do              {                  if (line == null)                  {                      break;                  }                  if (line == "")                  {                      if (input_state == InputState.RequestLine)                      {                          continue;                      }                      current_line = null;                                            ms           = null;                                            return true;                  }                    if (input_state == InputState.RequestLine)                  {                      context.Request.SetRequestLine(line);                        input_state = InputState.Headers;                  }                  else                  {                      try                      {                          context.Request.AddHeader(line);                      }                      catch (Exception e)                      {                          context.ErrorMessage = e.Message;                            context.ErrorStatus = 400;                            return true;                      }                  }                    if (context.HaveError)                  {                      return true;                  }                    if (position >= len)                  {                      break;                  }                  try                  {                      line = ReadLine(buffer' position' len - position' ref used);                        position += used;                  }                  catch                  {                      context.ErrorMessage = "Bad request";                        context.ErrorStatus = 400;                        return true;                  }                } while (line != null);
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,ReadLine,The following statement contains a magic number: if (current_line == null)              {                  current_line = new StringBuilder(128);              }
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,ReadLine,The following statement contains a magic number: for (int i = offset; i < last && line_state != LineState.LF; i++)              {                  used++;                    byte b = buffer[i];                    if (b == 13)                  {                      line_state = LineState.CR;                  }                  else if (b == 10)                  {                      line_state = LineState.LF;                  }                  else                  {                      current_line.Append((char)b);                  }              }
Magic Number,Reactor.Net,HttpConnection,C:\repos\sinclairzx81_reactor\reactor\net\HttpConnection.cs,ReadLine,The following statement contains a magic number: for (int i = offset; i < last && line_state != LineState.LF; i++)              {                  used++;                    byte b = buffer[i];                    if (b == 13)                  {                      line_state = LineState.CR;                  }                  else if (b == 10)                  {                      line_state = LineState.LF;                  }                  else                  {                      current_line.Append((char)b);                  }              }
Magic Number,Reactor.Net,HttpListenerContext,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerContext.cs,ParseAuthentication,The following statement contains a magic number: if (header == null || header.Length < 2)              {                  return;              }
Magic Number,Reactor.Net,HttpListenerContext,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerContext.cs,ParseAuthentication,The following statement contains a magic number: string[] authenticationData = header.Split(new char[] { ' ' }' 2);
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: string[] parts = req.Split(separators' 3);
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts.Length != 3)              {                  context.ErrorMessage = "Invalid request line (parts).";                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: foreach (char c in method)              {                  int ic = (int)c;                    if ((ic >= 'A' && ic <= 'Z') ||                      (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&                       c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&                       c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&                       c != ']' && c != '?' && c != '=' && c != '{' && c != '}'))                  {                      continue;                  }                    context.ErrorMessage = "(Invalid verb)";                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: foreach (char c in method)              {                  int ic = (int)c;                    if ((ic >= 'A' && ic <= 'Z') ||                      (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&                       c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&                       c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&                       c != ']' && c != '?' && c != '=' && c != '{' && c != '}'))                  {                      continue;                  }                    context.ErrorMessage = "(Invalid verb)";                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts[2].Length != 8 || !parts[2].StartsWith("HTTP/"))              {                  context.ErrorMessage = "Invalid request line (version).";                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts[2].Length != 8 || !parts[2].StartsWith("HTTP/"))              {                  context.ErrorMessage = "Invalid request line (version).";                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts[2].Length != 8 || !parts[2].StartsWith("HTTP/"))              {                  context.ErrorMessage = "Invalid request line (version).";                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: try              {                  version = new Version(parts[2].Substring(5));                    if (version.Major < 1)                  {                      throw new Exception();                  }              }              catch              {                  context.ErrorMessage = "Invalid request line (version).";                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: try              {                  version = new Version(parts[2].Substring(5));                    if (version.Major < 1)                  {                      throw new Exception();                  }              }              catch              {                  context.ErrorMessage = "Invalid request line (version).";                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,IsPredefinedScheme,The following statement contains a magic number: if (scheme == null || scheme.Length < 3)              {                  return false;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,MaybeUri,The following statement contains a magic number: if (p >= 10)              {                  return false;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: if (version >= HttpVersion.Version11)              {                  string t_encoding = Headers["Transfer-Encoding"];                    is_chunked = (t_encoding != null && String.Compare(t_encoding' "chunked"' StringComparison.OrdinalIgnoreCase) == 0);                                    // 'identity' is not valid!                  if (t_encoding != null && !is_chunked)                  {                      context.Connection.SendError(null' 501);                        return;                  }              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: if (!is_chunked && !cl_set)              {                  if (String.Compare(method' "POST"' StringComparison.OrdinalIgnoreCase) == 0 ||                      String.Compare(method' "PUT"' StringComparison.OrdinalIgnoreCase) == 0)                  {                      context.Connection.SendError(null' 411);                        return;                  }              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,AddHeader,The following statement contains a magic number: if (colon == -1 || colon == 0)              {                  context.ErrorMessage = "Bad Request";                    context.ErrorStatus = 400;                    return;              }
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FlushInput,The following statement contains a magic number: int length = 2048;
Magic Number,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FlushInput,The following statement contains a magic number: while (true)              {                  // TODO: test if MS has a timeout when doing this                  try                  {                      IAsyncResult ares = InputStream.BeginRead(bytes' 0' length' null' null);                        if (!ares.IsCompleted && !ares.AsyncWaitHandle.WaitOne(1000))                      {                          return false;                      }                      if (InputStream.EndRead(ares) <= 0)                      {                          return true;                      }                  }                  catch                  {                      return false;                  }              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,AddHeader,The following statement contains a magic number: if (value.Length > 65535)              {                  throw new ArgumentOutOfRangeException("value");              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,AppendHeader,The following statement contains a magic number: if (value.Length > 65535)              {                  throw new ArgumentOutOfRangeException("value");              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,Redirect,The following statement contains a magic number: StatusCode = 302;
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: if (reuses >= 100)              {                  force_close_chunked = true;                    if (!conn_close)                  {                      headers.SetInternal("Connection"' "close");                        conn_close = true;                  }              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: if (!conn_close)              {                  headers.SetInternal("Keep-Alive"' String.Format("timeout=15'max={0}"' 100 - reuses));                    if (context.Request.ProtocolVersion <= HttpVersion.Version10)                  {                      headers.SetInternal("Connection"' "keep-alive");                  }              }
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: StreamWriter writer = new StreamWriter(ms' encoding' 256);
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: int preamble = (encoding.CodePage == 65001) ? 3 : encoding.GetPreamble().Length;
Magic Number,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: int preamble = (encoding.CodePage == 65001) ? 3 : encoding.GetPreamble().Length;
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255)              {                  foreach (byte b in e.GetBytes(new char[] { ch }))                  {                      buf.Add(b);                  }              }              else              {                  buf.Add((byte)ch);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                    if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                            if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                                i += 5;                          }                          else                          {                              WriteCharBytes(bytes' '%'' e);                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                            i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                  {                      WriteCharBytes(bytes' ' '' e);                  }                  else                  {                      WriteCharBytes(bytes' ch' e);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                    if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                            if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                                i += 5;                          }                          else                          {                              WriteCharBytes(bytes' '%'' e);                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                            i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                  {                      WriteCharBytes(bytes' ' '' e);                  }                  else                  {                      WriteCharBytes(bytes' ch' e);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                    if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                            if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                                i += 5;                          }                          else                          {                              WriteCharBytes(bytes' '%'' e);                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                            i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                  {                      WriteCharBytes(bytes' ' '' e);                  }                  else                  {                      WriteCharBytes(bytes' ch' e);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                    if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                            if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                                i += 5;                          }                          else                          {                              WriteCharBytes(bytes' '%'' e);                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                            i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                  {                      WriteCharBytes(bytes' ' '' e);                  }                  else                  {                      WriteCharBytes(bytes' ch' e);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                    if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                            if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                                i += 5;                          }                          else                          {                              WriteCharBytes(bytes' '%'' e);                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                            i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                  {                      WriteCharBytes(bytes' ' '' e);                  }                  else                  {                      WriteCharBytes(bytes' ch' e);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                    if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                            if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                                i += 5;                          }                          else                          {                              WriteCharBytes(bytes' '%'' e);                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                            i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                  {                      WriteCharBytes(bytes' ' '' e);                  }                  else                  {                      WriteCharBytes(bytes' ch' e);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  ch = s[i];                    if (ch == '%' && i + 2 < len && s[i + 1] != '%')                  {                      if (s[i + 1] == 'u' && i + 5 < len)                      {                          // unicode hex sequence                          xchar = GetChar(s' i + 2' 4);                            if (xchar != -1)                          {                              WriteCharBytes(bytes' (char)xchar' e);                                i += 5;                          }                          else                          {                              WriteCharBytes(bytes' '%'' e);                          }                      }                      else if ((xchar = GetChar(s' i + 1' 2)) != -1)                      {                          WriteCharBytes(bytes' (char)xchar' e);                            i += 2;                      }                      else                      {                          WriteCharBytes(bytes' '%'' e);                      }                      continue;                  }                    if (ch == '+')                  {                      WriteCharBytes(bytes' ' '' e);                  }                  else                  {                      WriteCharBytes(bytes' ch' e);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')              {                  return c - 'a' + 10;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')              {                  return c - 'A' + 10;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  int current = GetInt(bytes[i]);                    if (current == -1)                  {                      return -1;                  }                  value = (value << 4) + current;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                    if (c > 127)                  {                      return -1;                  }                    int current = GetInt((byte)c);                    if (current == -1)                  {                      return -1;                  }                    val = (val << 4) + current;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = str[i];                    if (c > 127)                  {                      return -1;                  }                    int current = GetInt((byte)c);                    if (current == -1)                  {                      return -1;                  }                    val = (val << 4) + current;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                                acc.SetLength(0);                          }                            xchar = GetChar(bytes' i + 2' 4);                            if (xchar != -1)                          {                              output.Append((char)xchar);                                i += 5;                                continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                            i += 2;                            continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                        acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                                acc.SetLength(0);                          }                            xchar = GetChar(bytes' i + 2' 4);                            if (xchar != -1)                          {                              output.Append((char)xchar);                                i += 5;                                continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                            i += 2;                            continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                        acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                                acc.SetLength(0);                          }                            xchar = GetChar(bytes' i + 2' 4);                            if (xchar != -1)                          {                              output.Append((char)xchar);                                i += 5;                                continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                            i += 2;                            continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                        acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                                acc.SetLength(0);                          }                            xchar = GetChar(bytes' i + 2' 4);                            if (xchar != -1)                          {                              output.Append((char)xchar);                                i += 5;                                continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                            i += 2;                            continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                        acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                                acc.SetLength(0);                          }                            xchar = GetChar(bytes' i + 2' 4);                            if (xchar != -1)                          {                              output.Append((char)xchar);                                i += 5;                                continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                            i += 2;                            continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                        acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                                acc.SetLength(0);                          }                            xchar = GetChar(bytes' i + 2' 4);                            if (xchar != -1)                          {                              output.Append((char)xchar);                                i += 5;                                continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                            i += 2;                            continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                        acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  if (bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%')                  {                      if (bytes[i + 1] == (byte)'u' && i + 5 < end)                      {                          if (acc.Length > 0)                          {                              output.Append(GetChars(acc' e));                                acc.SetLength(0);                          }                            xchar = GetChar(bytes' i + 2' 4);                            if (xchar != -1)                          {                              output.Append((char)xchar);                                i += 5;                                continue;                          }                      }                      else if ((xchar = GetChar(bytes' i + 1' 2)) != -1)                      {                          acc.WriteByte((byte)xchar);                            i += 2;                            continue;                      }                  }                    if (acc.Length > 0)                  {                      output.Append(GetChars(acc' e));                        acc.SetLength(0);                  }                    if (bytes[i] == '+')                  {                      output.Append(' ');                  }                  else                  {                      output.Append((char)bytes[i]);                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                    if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                        if (xchar != -1)                      {                          c = (char)xchar;                            i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                    if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                        if (xchar != -1)                      {                          c = (char)xchar;                            i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++)              {                  char c = (char)bytes[i];                    if (c == '+')                  {                      c = ' ';                  }                  else if (c == '%' && i < end - 2)                  {                      int xchar = GetChar(bytes' i + 1' 2);                        if (xchar != -1)                      {                          c = (char)xchar;                            i += 2;                      }                  }                  result.WriteByte((byte)c);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                    int i = (int)c;                    result.WriteByte((byte)'%');                                    result.WriteByte((byte)'u');                                    idx = i >> 12;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = (i >> 8) & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = (i >> 4) & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = i & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    return;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                    int i = (int)c;                    result.WriteByte((byte)'%');                                    result.WriteByte((byte)'u');                                    idx = i >> 12;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = (i >> 8) & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = (i >> 4) & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = i & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    return;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                    int i = (int)c;                    result.WriteByte((byte)'%');                                    result.WriteByte((byte)'u');                                    idx = i >> 12;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = (i >> 8) & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = (i >> 4) & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = i & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    return;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255)              {                  //FIXME: what happens when there is an internal error?                  //if (!isUnicode)                  //	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");                  int idx;                    int i = (int)c;                    result.WriteByte((byte)'%');                                    result.WriteByte((byte)'u');                                    idx = i >> 12;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = (i >> 8) & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = (i >> 4) & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    idx = i & 0x0F;                                    result.WriteByte((byte)hexChars[idx]);                                    return;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte)'%');                      result.WriteByte((byte)'u');                      result.WriteByte((byte)'0');                      result.WriteByte((byte)'0');                  }                  else                  {                      result.WriteByte((byte)'%');                  }                    int idx = ((int)c) >> 4;                    result.WriteByte((byte)hexChars[idx]);                    idx = ((int)c) & 0x0F;                    result.WriteByte((byte)hexChars[idx]);              }              else              {                  result.WriteByte((byte)c);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z'))              {                  if (isUnicode && c > 127)                  {                      result.WriteByte((byte)'%');                      result.WriteByte((byte)'u');                      result.WriteByte((byte)'0');                      result.WriteByte((byte)'0');                  }                  else                  {                      result.WriteByte((byte)'%');                  }                    int idx = ((int)c) >> 4;                    result.WriteByte((byte)hexChars[idx]);                    idx = ((int)c) & 0x0F;                    result.WriteByte((byte)hexChars[idx]);              }              else              {                  result.WriteByte((byte)c);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,CalculateKeyValue,The following statement contains a magic number: if (s.Length > 8)              {                  return 0;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,CalculateKeyValue,The following statement contains a magic number: for (int i = 0; i < s.Length; ++i)              {                  long ch = s[i];                    if (ch > 'z' || ch < '0')                  {                      return 0;                  }                    key |= ch << ((7 - i) * 8);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,CalculateKeyValue,The following statement contains a magic number: for (int i = 0; i < s.Length; ++i)              {                  long ch = s[i];                    if (ch > 'z' || ch < '0')                  {                      return 0;                  }                    key |= ch << ((7 - i) * 8);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = s[i];                    if (state == 0)                  {                      if (c == '&')                      {                          entity.Append(c);                            state = 1;                      }                      else                      {                          output.Append(c);                      }                      continue;                  }                    if (c == '&')                  {                      state = 1;                        if (digit_start > 0)                      {                          entity.Append(s' digit_start' i - digit_start);                            digit_start = 0;                      }                        output.Append(entity.ToString());                        entity.Length = 0;                        entity.Append('&');                        continue;                  }                    switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: for (i = 0; i < s.Length; i++)              {                  char c = s[i];                    switch (c)                  {                      case '&':                      case '"':                      case '<':                      case '>':                      case '\'':                          needEncode = true;                          break;                      default:                          if (c > 159)                          {                              needEncode = true;                              break;                          }                            continue;                  }                    break;              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: StringBuilder output = new StringBuilder(s' 0' i' s.Length * 2);
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: for (; i < s.Length; i++)              {                  var c = s[i];                    switch (c)                  {                      case '&':                          output.Append("&amp;");                          break;                      case '>':                          output.Append("&gt;");                          break;                      case '<':                          output.Append("&lt;");                          break;                      case '"':                          output.Append("&quot;");                          break;                      case '\'':                          output.Append("&#39;");                          break;                      default:                          // MS starts encoding with &# from 160 and stops at 255.                          // We don't do that. One reason is the 65308/65310 unicode                          // characters that look like '<' and '>'.                            if (c > 159)                          {                              output.Append("&#");                                if (char.IsSurrogate(c))                              {                                  output.Append(char.ConvertToUtf32(s' i++));                              }                              else                              {                                  output.Append(((int)c).ToString(CultureInfo.InvariantCulture));                              }                                output.Append(";");                          }                          else                          {                              output.Append(c);                          }                          break;                  }              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                    for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                        int idx = ((int)bIn[i]) >> 4;                        result.WriteByte((byte)hexChars[idx]);                        idx = ((int)bIn[i]) & 0x0F;                        result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                    result.WriteByte((byte)'2');                    result.WriteByte((byte)'0');              }              else              {                  result.WriteByte((byte)c);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                    for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                        int idx = ((int)bIn[i]) >> 4;                        result.WriteByte((byte)hexChars[idx]);                        idx = ((int)bIn[i]) & 0x0F;                        result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                    result.WriteByte((byte)'2');                    result.WriteByte((byte)'0');              }              else              {                  result.WriteByte((byte)c);              }
Magic Number,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126)              {                  byte[] bIn = Encoding.UTF8.GetBytes(c.ToString());                    for (int i = 0; i < bIn.Length; i++)                  {                      result.WriteByte((byte)'%');                        int idx = ((int)bIn[i]) >> 4;                        result.WriteByte((byte)hexChars[idx]);                        idx = ((int)bIn[i]) & 0x0F;                        result.WriteByte((byte)hexChars[idx]);                  }              }              else if (c == ' ')              {                  result.WriteByte((byte)'%');                    result.WriteByte((byte)'2');                    result.WriteByte((byte)'0');              }              else              {                  result.WriteByte((byte)c);              }
Magic Number,Reactor.Net,ListenerAsyncResult,C:\repos\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: if (InGet && (exc is ObjectDisposedException))              {                  exception = new HttpListenerException(500' "Listener closed");              }
Magic Number,Reactor.Net,ListenerAsyncResult,C:\repos\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: lock (locker)              {                  AuthenticationSchemes schemes = context.Listener.SelectAuthenticationScheme(context);                    if ((schemes == AuthenticationSchemes.Basic || context.Listener.AuthenticationSchemes == AuthenticationSchemes.Negotiate) && context.Request.Headers["Authorization"] == null)                  {                      context.Response.StatusCode = 401;                        context.Response.Headers["WWW-Authenticate"] = schemes + " realm=\"" + context.Listener.Realm + "\"";                                            context.Response.OutputStream.Close();                                            IAsyncResult ares = context.Listener.BeginGetContext(cb' state);                                            this.forward = (ListenerAsyncResult)ares;                                            lock (forward.locker)                      {                          if (handle != null)                          {                              forward.handle = handle;                          }                      }                      ListenerAsyncResult next = forward;                        for (int i = 0; next.forward != null; i++)                      {                          if (i > 20)                          {                              Complete(new HttpListenerException(400' "Too many authentication errors"));                          }                            next = next.forward;                      }                  }                  else                  {                      completed = true;                        this.synch = false;                        if (handle != null)                      {                          handle.Set();                      }                        if (cb != null)                      {                          ThreadPool.UnsafeQueueUserWorkItem(InvokeCB' this);                      }                  }              }
Magic Number,Reactor.Net,ListenerAsyncResult,C:\repos\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: lock (locker)              {                  AuthenticationSchemes schemes = context.Listener.SelectAuthenticationScheme(context);                    if ((schemes == AuthenticationSchemes.Basic || context.Listener.AuthenticationSchemes == AuthenticationSchemes.Negotiate) && context.Request.Headers["Authorization"] == null)                  {                      context.Response.StatusCode = 401;                        context.Response.Headers["WWW-Authenticate"] = schemes + " realm=\"" + context.Listener.Realm + "\"";                                            context.Response.OutputStream.Close();                                            IAsyncResult ares = context.Listener.BeginGetContext(cb' state);                                            this.forward = (ListenerAsyncResult)ares;                                            lock (forward.locker)                      {                          if (handle != null)                          {                              forward.handle = handle;                          }                      }                      ListenerAsyncResult next = forward;                        for (int i = 0; next.forward != null; i++)                      {                          if (i > 20)                          {                              Complete(new HttpListenerException(400' "Too many authentication errors"));                          }                            next = next.forward;                      }                  }                  else                  {                      completed = true;                        this.synch = false;                        if (handle != null)                      {                          handle.Set();                      }                        if (cb != null)                      {                          ThreadPool.UnsafeQueueUserWorkItem(InvokeCB' this);                      }                  }              }
Magic Number,Reactor.Net,ListenerAsyncResult,C:\repos\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: lock (locker)              {                  AuthenticationSchemes schemes = context.Listener.SelectAuthenticationScheme(context);                    if ((schemes == AuthenticationSchemes.Basic || context.Listener.AuthenticationSchemes == AuthenticationSchemes.Negotiate) && context.Request.Headers["Authorization"] == null)                  {                      context.Response.StatusCode = 401;                        context.Response.Headers["WWW-Authenticate"] = schemes + " realm=\"" + context.Listener.Realm + "\"";                                            context.Response.OutputStream.Close();                                            IAsyncResult ares = context.Listener.BeginGetContext(cb' state);                                            this.forward = (ListenerAsyncResult)ares;                                            lock (forward.locker)                      {                          if (handle != null)                          {                              forward.handle = handle;                          }                      }                      ListenerAsyncResult next = forward;                        for (int i = 0; next.forward != null; i++)                      {                          if (i > 20)                          {                              Complete(new HttpListenerException(400' "Too many authentication errors"));                          }                            next = next.forward;                      }                  }                  else                  {                      completed = true;                        this.synch = false;                        if (handle != null)                      {                          handle.Set();                      }                        if (cb != null)                      {                          ThreadPool.UnsafeQueueUserWorkItem(InvokeCB' this);                      }                  }              }
Magic Number,Reactor.Net,ListenerPrefix,C:\repos\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,Parse,The following statement contains a magic number: ushort default_port = 80;
Magic Number,Reactor.Net,ListenerPrefix,C:\repos\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,Parse,The following statement contains a magic number: if (uri.StartsWith("https://"))              {                  default_port = 443;                    secure = true;              }
Magic Number,Reactor.Net,ListenerPrefix,C:\repos\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,Parse,The following statement contains a magic number: int start_host = uri.IndexOf(':') + 3;
Magic Number,Reactor.Net,ListenerPrefix,C:\repos\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,CheckUri,The following statement contains a magic number: int start_host = uri.IndexOf(':') + 3;
Magic Number,Reactor.Net,ListenerPrefix,C:\repos\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,CheckUri,The following statement contains a magic number: if (colon > 0)              {                  root = uri.IndexOf('/'' colon' length - colon);                    if (root == -1)                  {                      throw new ArgumentException("No path specified.");                  }                    try                  {                      int p = Int32.Parse(uri.Substring(colon + 1' root - colon - 1));                        if (p <= 0 || p >= 65536)                      {                          throw new Exception();                      }                  }                  catch                  {                      throw new ArgumentException("Invalid port.");                  }              }              else              {                  root = uri.IndexOf('/'' start_host' length - start_host);                    if (root == -1)                  {                      throw new ArgumentException("No path specified.");                  }              }
Magic Number,Reactor.Net,ResponseStream,C:\repos\sinclairzx81_reactor\reactor\net\ResponseStream.cs,Write,The following statement contains a magic number: if (ms != null)              {                  long start = ms.Position; // After the possible preamble for the encoding                                    ms.Position = ms.Length;                    if (chunked)                  {                      bytes = GetChunkSizeBytes(count' false);                        ms.Write(bytes' 0' bytes.Length);                  }                    int new_count = Math.Min(count' 16384 - (int)ms.Position + (int)start);                                    ms.Write(buffer' offset' new_count);                                    count -= new_count;                                    offset += new_count;                                    InternalWrite(ms.GetBuffer()' (int)start' (int)(ms.Length - start));                                    ms.SetLength(0);                                    ms.Capacity = 0; // 'dispose' the buffer in ms.              }              else if (chunked)              {                  bytes = GetChunkSizeBytes(count' false);                    InternalWrite(bytes' 0' bytes.Length);              }
Magic Number,Reactor.Net,ResponseStream,C:\repos\sinclairzx81_reactor\reactor\net\ResponseStream.cs,Write,The following statement contains a magic number: if (chunked)              {                  InternalWrite(crlf' 0' 2);              }
Magic Number,Reactor.Net,ResponseStream,C:\repos\sinclairzx81_reactor\reactor\net\ResponseStream.cs,EndWrite,The following statement contains a magic number: if (ignore_errors)              {                  try                  {                      stream.EndWrite(ares);                        if (response.SendChunked)                      {                          stream.Write(crlf' 0' 2);                      }                  }                  catch { }              }              else              {                  stream.EndWrite(ares);                    if (response.SendChunked)                  {                      stream.Write(crlf' 0' 2);                  }              }
Magic Number,Reactor.Net,ResponseStream,C:\repos\sinclairzx81_reactor\reactor\net\ResponseStream.cs,EndWrite,The following statement contains a magic number: if (ignore_errors)              {                  try                  {                      stream.EndWrite(ares);                        if (response.SendChunked)                      {                          stream.Write(crlf' 0' 2);                      }                  }                  catch { }              }              else              {                  stream.EndWrite(ares);                    if (response.SendChunked)                  {                      stream.Write(crlf' 0' 2);                  }              }
Magic Number,Reactor.Net,WebHeaderCollection,C:\repos\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,IsHeaderValue,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = value[i];                    if (c == 127)                  {                      return false;                  }                    if (c < 0x20 && (c != '\r' && c != '\n' && c != '\t'))                  {                      return false;                  }                  if (c == '\n' && ++i < len)                  {                      c = value[i];                                            if (c != ' ' && c != '\t')                      {                          return false;                      }                  }              }
Magic Number,Reactor.Net,WebHeaderCollection,C:\repos\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,IsHeaderName,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  char c = name[i];                    if (c > 126 || !allowed_chars[c])                  {                      return false;                  }              }
Magic Number,Reactor.Udp,Socket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.cs,StunRequest,The following statement contains a magic number: Reactor.Timeout.Create(() => {                    if (!hasresponded) {                        this.OnMessage -= action;                        callback(null);                  }                }' 2000);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: if (data.Length < 20)              {                  throw new ArgumentException("Invalid STUN message value !");              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: int messageType = (data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: int messageLength = (data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: byte[] guid = new byte[16];
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: Array.Copy(data' offset' guid' 0' 16);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: offset += 16;
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: while ((offset - 20) < messageLength)              {                  ParseAttribute(data' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: byte[] msg = new byte[512];
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[offset++] = (byte)((int)this.Type >> 8);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: Array.Copy(TransactionID.ToByteArray()' 0' msg' offset' 16);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: offset += 16;
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: if (this.MappedAddress != null)              {                  StoreEndPoint(AttributeType.MappedAddress' this.MappedAddress' msg' ref offset);              }              else if (this.ResponseAddress != null)              {                  StoreEndPoint(AttributeType.ResponseAddress' this.ResponseAddress' msg' ref offset);              }              else if (this.ChangeRequest != null)              {                  // Attribute header                  msg[offset++] = (int)AttributeType.ChangeRequest >> 8;                    msg[offset++] = (int)AttributeType.ChangeRequest & 0xFF;                    msg[offset++] = 0;                    msg[offset++] = 4;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = 0;                    msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1);              }              else if (this.SourceAddress != null)              {                  StoreEndPoint(AttributeType.SourceAddress' this.SourceAddress' msg' ref offset);              }              else if (this.ChangedAddress != null)              {                  StoreEndPoint(AttributeType.ChangedAddress' this.ChangedAddress' msg' ref offset);              }              else if (this.UserName != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Username >> 8;                    msg[offset++] = (int)AttributeType.Username & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.Password != null)              {                  byte[] userBytes = Encoding.ASCII.GetBytes(this.UserName);                    msg[offset++] = (int)AttributeType.Password >> 8;                    msg[offset++] = (int)AttributeType.Password & 0xFF;                    msg[offset++] = (byte)(userBytes.Length >> 8);                    msg[offset++] = (byte)(userBytes.Length & 0xFF);                    Array.Copy(userBytes' 0' msg' offset' userBytes.Length);                    offset += userBytes.Length;              }              else if (this.ErrorCode != null)              {                  byte[] reasonBytes = Encoding.ASCII.GetBytes(this.ErrorCode.ReasonText);                    // Header                  msg[offset++] = 0;                    msg[offset++] = (int)AttributeType.ErrorCode;                    msg[offset++] = 0;                    msg[offset++] = (byte)(4 + reasonBytes.Length);                    // Empty                  msg[offset++] = 0;                    msg[offset++] = 0;                    // Class                  msg[offset++] = (byte)Math.Floor((double)(this.ErrorCode.Code / 100));                    // Number                  msg[offset++] = (byte)(this.ErrorCode.Code & 0xFF);                    // ReasonPhrase                  Array.Copy(reasonBytes' msg' reasonBytes.Length);                    offset += reasonBytes.Length;              }              else if (this.ReflectedFrom != null)              {                  StoreEndPoint(AttributeType.ReflectedFrom' this.ReflectedFrom' msg' ref offset);              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[3] = (byte)((offset - 20) & 0xFF);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[3] = (byte)((offset - 20) & 0xFF);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: AttributeType type = (AttributeType)(data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: int length = (data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: if (type == AttributeType.MappedAddress)              {                  MappedAddress = ParseEndPoint(data' ref offset);              }              // RESPONSE-ADDRESS              else if (type == AttributeType.ResponseAddress)              {                  ResponseAddress = ParseEndPoint(data' ref offset);              }                // CHANGE-REQUEST              else if (type == AttributeType.ChangeRequest)              {                  offset += 3;                    ChangeRequest = new ChangeRequest((data[offset] & 4) != 0' (data[offset] & 2) != 0);                    offset++;              }              // SOURCE-ADDRESS              else if (type == AttributeType.SourceAddress)              {                  SourceAddress = ParseEndPoint(data' ref offset);              }              // CHANGED-ADDRESS              else if (type == AttributeType.ChangedAddress)              {                  ChangedAddress = ParseEndPoint(data' ref offset);              }              // USERNAME              else if (type == AttributeType.Username)              {                  UserName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // PASSWORD              else if (type == AttributeType.Password)              {                  Password = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // MESSAGE-INTEGRITY              else if (type == AttributeType.MessageIntegrity)              {                  offset += length;              }                else if (type == AttributeType.ErrorCode)              {                  int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    ErrorCode = new ErrorCode(errorCode' Encoding.Default.GetString(data' offset + 4' length - 4));                    offset += length;              }                else if (type == AttributeType.UnknownAttribute)              {                  offset += length;              }                else if (type == AttributeType.ReflectedFrom)              {                  ReflectedFrom = ParseEndPoint(data' ref offset);              }                // XorMappedAddress              // XorOnly              // ServerName              else if (type == AttributeType.ServerName)              {                  ServerName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // Unknown              else              {                  offset += length;              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: if (type == AttributeType.MappedAddress)              {                  MappedAddress = ParseEndPoint(data' ref offset);              }              // RESPONSE-ADDRESS              else if (type == AttributeType.ResponseAddress)              {                  ResponseAddress = ParseEndPoint(data' ref offset);              }                // CHANGE-REQUEST              else if (type == AttributeType.ChangeRequest)              {                  offset += 3;                    ChangeRequest = new ChangeRequest((data[offset] & 4) != 0' (data[offset] & 2) != 0);                    offset++;              }              // SOURCE-ADDRESS              else if (type == AttributeType.SourceAddress)              {                  SourceAddress = ParseEndPoint(data' ref offset);              }              // CHANGED-ADDRESS              else if (type == AttributeType.ChangedAddress)              {                  ChangedAddress = ParseEndPoint(data' ref offset);              }              // USERNAME              else if (type == AttributeType.Username)              {                  UserName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // PASSWORD              else if (type == AttributeType.Password)              {                  Password = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // MESSAGE-INTEGRITY              else if (type == AttributeType.MessageIntegrity)              {                  offset += length;              }                else if (type == AttributeType.ErrorCode)              {                  int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    ErrorCode = new ErrorCode(errorCode' Encoding.Default.GetString(data' offset + 4' length - 4));                    offset += length;              }                else if (type == AttributeType.UnknownAttribute)              {                  offset += length;              }                else if (type == AttributeType.ReflectedFrom)              {                  ReflectedFrom = ParseEndPoint(data' ref offset);              }                // XorMappedAddress              // XorOnly              // ServerName              else if (type == AttributeType.ServerName)              {                  ServerName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // Unknown              else              {                  offset += length;              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: if (type == AttributeType.MappedAddress)              {                  MappedAddress = ParseEndPoint(data' ref offset);              }              // RESPONSE-ADDRESS              else if (type == AttributeType.ResponseAddress)              {                  ResponseAddress = ParseEndPoint(data' ref offset);              }                // CHANGE-REQUEST              else if (type == AttributeType.ChangeRequest)              {                  offset += 3;                    ChangeRequest = new ChangeRequest((data[offset] & 4) != 0' (data[offset] & 2) != 0);                    offset++;              }              // SOURCE-ADDRESS              else if (type == AttributeType.SourceAddress)              {                  SourceAddress = ParseEndPoint(data' ref offset);              }              // CHANGED-ADDRESS              else if (type == AttributeType.ChangedAddress)              {                  ChangedAddress = ParseEndPoint(data' ref offset);              }              // USERNAME              else if (type == AttributeType.Username)              {                  UserName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // PASSWORD              else if (type == AttributeType.Password)              {                  Password = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // MESSAGE-INTEGRITY              else if (type == AttributeType.MessageIntegrity)              {                  offset += length;              }                else if (type == AttributeType.ErrorCode)              {                  int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    ErrorCode = new ErrorCode(errorCode' Encoding.Default.GetString(data' offset + 4' length - 4));                    offset += length;              }                else if (type == AttributeType.UnknownAttribute)              {                  offset += length;              }                else if (type == AttributeType.ReflectedFrom)              {                  ReflectedFrom = ParseEndPoint(data' ref offset);              }                // XorMappedAddress              // XorOnly              // ServerName              else if (type == AttributeType.ServerName)              {                  ServerName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // Unknown              else              {                  offset += length;              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: if (type == AttributeType.MappedAddress)              {                  MappedAddress = ParseEndPoint(data' ref offset);              }              // RESPONSE-ADDRESS              else if (type == AttributeType.ResponseAddress)              {                  ResponseAddress = ParseEndPoint(data' ref offset);              }                // CHANGE-REQUEST              else if (type == AttributeType.ChangeRequest)              {                  offset += 3;                    ChangeRequest = new ChangeRequest((data[offset] & 4) != 0' (data[offset] & 2) != 0);                    offset++;              }              // SOURCE-ADDRESS              else if (type == AttributeType.SourceAddress)              {                  SourceAddress = ParseEndPoint(data' ref offset);              }              // CHANGED-ADDRESS              else if (type == AttributeType.ChangedAddress)              {                  ChangedAddress = ParseEndPoint(data' ref offset);              }              // USERNAME              else if (type == AttributeType.Username)              {                  UserName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // PASSWORD              else if (type == AttributeType.Password)              {                  Password = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // MESSAGE-INTEGRITY              else if (type == AttributeType.MessageIntegrity)              {                  offset += length;              }                else if (type == AttributeType.ErrorCode)              {                  int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    ErrorCode = new ErrorCode(errorCode' Encoding.Default.GetString(data' offset + 4' length - 4));                    offset += length;              }                else if (type == AttributeType.UnknownAttribute)              {                  offset += length;              }                else if (type == AttributeType.ReflectedFrom)              {                  ReflectedFrom = ParseEndPoint(data' ref offset);              }                // XorMappedAddress              // XorOnly              // ServerName              else if (type == AttributeType.ServerName)              {                  ServerName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // Unknown              else              {                  offset += length;              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: if (type == AttributeType.MappedAddress)              {                  MappedAddress = ParseEndPoint(data' ref offset);              }              // RESPONSE-ADDRESS              else if (type == AttributeType.ResponseAddress)              {                  ResponseAddress = ParseEndPoint(data' ref offset);              }                // CHANGE-REQUEST              else if (type == AttributeType.ChangeRequest)              {                  offset += 3;                    ChangeRequest = new ChangeRequest((data[offset] & 4) != 0' (data[offset] & 2) != 0);                    offset++;              }              // SOURCE-ADDRESS              else if (type == AttributeType.SourceAddress)              {                  SourceAddress = ParseEndPoint(data' ref offset);              }              // CHANGED-ADDRESS              else if (type == AttributeType.ChangedAddress)              {                  ChangedAddress = ParseEndPoint(data' ref offset);              }              // USERNAME              else if (type == AttributeType.Username)              {                  UserName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // PASSWORD              else if (type == AttributeType.Password)              {                  Password = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // MESSAGE-INTEGRITY              else if (type == AttributeType.MessageIntegrity)              {                  offset += length;              }                else if (type == AttributeType.ErrorCode)              {                  int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    ErrorCode = new ErrorCode(errorCode' Encoding.Default.GetString(data' offset + 4' length - 4));                    offset += length;              }                else if (type == AttributeType.UnknownAttribute)              {                  offset += length;              }                else if (type == AttributeType.ReflectedFrom)              {                  ReflectedFrom = ParseEndPoint(data' ref offset);              }                // XorMappedAddress              // XorOnly              // ServerName              else if (type == AttributeType.ServerName)              {                  ServerName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // Unknown              else              {                  offset += length;              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: if (type == AttributeType.MappedAddress)              {                  MappedAddress = ParseEndPoint(data' ref offset);              }              // RESPONSE-ADDRESS              else if (type == AttributeType.ResponseAddress)              {                  ResponseAddress = ParseEndPoint(data' ref offset);              }                // CHANGE-REQUEST              else if (type == AttributeType.ChangeRequest)              {                  offset += 3;                    ChangeRequest = new ChangeRequest((data[offset] & 4) != 0' (data[offset] & 2) != 0);                    offset++;              }              // SOURCE-ADDRESS              else if (type == AttributeType.SourceAddress)              {                  SourceAddress = ParseEndPoint(data' ref offset);              }              // CHANGED-ADDRESS              else if (type == AttributeType.ChangedAddress)              {                  ChangedAddress = ParseEndPoint(data' ref offset);              }              // USERNAME              else if (type == AttributeType.Username)              {                  UserName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // PASSWORD              else if (type == AttributeType.Password)              {                  Password = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // MESSAGE-INTEGRITY              else if (type == AttributeType.MessageIntegrity)              {                  offset += length;              }                else if (type == AttributeType.ErrorCode)              {                  int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    ErrorCode = new ErrorCode(errorCode' Encoding.Default.GetString(data' offset + 4' length - 4));                    offset += length;              }                else if (type == AttributeType.UnknownAttribute)              {                  offset += length;              }                else if (type == AttributeType.ReflectedFrom)              {                  ReflectedFrom = ParseEndPoint(data' ref offset);              }                // XorMappedAddress              // XorOnly              // ServerName              else if (type == AttributeType.ServerName)              {                  ServerName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // Unknown              else              {                  offset += length;              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: if (type == AttributeType.MappedAddress)              {                  MappedAddress = ParseEndPoint(data' ref offset);              }              // RESPONSE-ADDRESS              else if (type == AttributeType.ResponseAddress)              {                  ResponseAddress = ParseEndPoint(data' ref offset);              }                // CHANGE-REQUEST              else if (type == AttributeType.ChangeRequest)              {                  offset += 3;                    ChangeRequest = new ChangeRequest((data[offset] & 4) != 0' (data[offset] & 2) != 0);                    offset++;              }              // SOURCE-ADDRESS              else if (type == AttributeType.SourceAddress)              {                  SourceAddress = ParseEndPoint(data' ref offset);              }              // CHANGED-ADDRESS              else if (type == AttributeType.ChangedAddress)              {                  ChangedAddress = ParseEndPoint(data' ref offset);              }              // USERNAME              else if (type == AttributeType.Username)              {                  UserName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // PASSWORD              else if (type == AttributeType.Password)              {                  Password = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // MESSAGE-INTEGRITY              else if (type == AttributeType.MessageIntegrity)              {                  offset += length;              }                else if (type == AttributeType.ErrorCode)              {                  int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    ErrorCode = new ErrorCode(errorCode' Encoding.Default.GetString(data' offset + 4' length - 4));                    offset += length;              }                else if (type == AttributeType.UnknownAttribute)              {                  offset += length;              }                else if (type == AttributeType.ReflectedFrom)              {                  ReflectedFrom = ParseEndPoint(data' ref offset);              }                // XorMappedAddress              // XorOnly              // ServerName              else if (type == AttributeType.ServerName)              {                  ServerName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // Unknown              else              {                  offset += length;              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: if (type == AttributeType.MappedAddress)              {                  MappedAddress = ParseEndPoint(data' ref offset);              }              // RESPONSE-ADDRESS              else if (type == AttributeType.ResponseAddress)              {                  ResponseAddress = ParseEndPoint(data' ref offset);              }                // CHANGE-REQUEST              else if (type == AttributeType.ChangeRequest)              {                  offset += 3;                    ChangeRequest = new ChangeRequest((data[offset] & 4) != 0' (data[offset] & 2) != 0);                    offset++;              }              // SOURCE-ADDRESS              else if (type == AttributeType.SourceAddress)              {                  SourceAddress = ParseEndPoint(data' ref offset);              }              // CHANGED-ADDRESS              else if (type == AttributeType.ChangedAddress)              {                  ChangedAddress = ParseEndPoint(data' ref offset);              }              // USERNAME              else if (type == AttributeType.Username)              {                  UserName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // PASSWORD              else if (type == AttributeType.Password)              {                  Password = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // MESSAGE-INTEGRITY              else if (type == AttributeType.MessageIntegrity)              {                  offset += length;              }                else if (type == AttributeType.ErrorCode)              {                  int errorCode = (data[offset + 2] & 0x7) * 100 + (data[offset + 3] & 0xFF);                    ErrorCode = new ErrorCode(errorCode' Encoding.Default.GetString(data' offset + 4' length - 4));                    offset += length;              }                else if (type == AttributeType.UnknownAttribute)              {                  offset += length;              }                else if (type == AttributeType.ReflectedFrom)              {                  ReflectedFrom = ParseEndPoint(data' ref offset);              }                // XorMappedAddress              // XorOnly              // ServerName              else if (type == AttributeType.ServerName)              {                  ServerName = Encoding.Default.GetString(data' offset' length);                    offset += length;              }              // Unknown              else              {                  offset += length;              }
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseEndPoint,The following statement contains a magic number: int port = (data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseEndPoint,The following statement contains a magic number: byte[] ip = new byte[4];
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseEndPoint,The following statement contains a magic number: ip[2] = data[offset++];
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseEndPoint,The following statement contains a magic number: ip[3] = data[offset++];
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = (byte)((int)type >> 8);
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = 8;
Magic Number,Reactor.Udp,StunPacket,C:\repos\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = (byte)(endPoint.Port >> 8);
Duplicate Code,Reactor.Http,Response,C:\repos\sinclairzx81_reactor\reactor\http\Response.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 40)' (45' 69))
Duplicate Code,Reactor.Http,ServerRequest,C:\repos\sinclairzx81_reactor\reactor\http\ServerRequest.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 40)' (45' 69))
Duplicate Code,Reactor.Process,ReadStream,C:\repos\sinclairzx81_reactor\reactor\process\ReadStream.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 40)' (45' 69))
Duplicate Code,Reactor.Tls,Socket,C:\repos\sinclairzx81_reactor\reactor\tls\Socket.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((17' 41)' (46' 70))
Duplicate Code,Reactor.File,ReadStream,C:\repos\sinclairzx81_reactor\reactor\file\ReadStream.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((14' 40)' (84' 110)' (123' 149))
Duplicate Code,Reactor.File,ReadStream,C:\repos\sinclairzx81_reactor\reactor\file\ReadStream.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 35)' (45' 64)' (86' 105)' (125' 144))
Duplicate Code,Reactor.File,ReadStream,C:\repos\sinclairzx81_reactor\reactor\file\ReadStream.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 40)' (45' 69)' (86' 110)' (125' 149))
Duplicate Code,Reactor.Tcp,Socket,C:\repos\sinclairzx81_reactor\reactor\tcp\Socket.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 44)' (49' 73))
Missing Default,Reactor.Net,HttpListenerRequest,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,AddHeader,The following switch statement is missing a default case: switch (lower)              {                  case "accept-language":                        user_languages = val.Split('''); // yes' only split with a '''                        break;                    case "accept":                        accept_types = val.Split('''); // yes' only split with a '''                        break;                    case "content-length":                        try                      {                          //TODO: max. content_length?                          content_length = Int64.Parse(val.Trim());                                                    if (content_length < 0)                          {                              context.ErrorMessage = "Invalid Content-Length.";                          }                            cl_set = true;                      }                      catch                      {                          context.ErrorMessage = "Invalid Content-Length.";                      }                        break;                    case "referer":                      try                      {                          referrer = new Uri(val);                      }                      catch                      {                          referrer = new Uri("http://someone.is.screwing.with.the.headers.com/");                      }                      break;                    case "cookie":                      if (cookies == null)                      {                          cookies = new CookieCollection();                      }                        string[] cookieStrings = val.Split(new char[] { '''' ';' });                        Cookie current = null;                        int version = 0;                        foreach (string cookieString in cookieStrings)                      {                          string str = cookieString.Trim();                            if (str.Length == 0)                          {                              continue;                          }                            if (str.StartsWith("$Version"))                          {                              version = Int32.Parse(Unquote(str.Substring(str.IndexOf('=') + 1)));                          }                          else if (str.StartsWith("$Path"))                          {                              if (current != null)                              {                                  current.Path = str.Substring(str.IndexOf('=') + 1).Trim();                              }                          }                          else if (str.StartsWith("$Domain"))                          {                              if (current != null)                              {                                  current.Domain = str.Substring(str.IndexOf('=') + 1).Trim();                              }                          }                          else if (str.StartsWith("$Port"))                          {                              if (current != null)                              {                                  current.Port = str.Substring(str.IndexOf('=') + 1).Trim();                              }                          }                          else                          {                              if (current != null)                              {                                  cookies.Add(current);                              }                              current = new Cookie();                                int idx = str.IndexOf('=');                                if (idx > 0)                              {                                  current.Name = str.Substring(0' idx).Trim();                                    current.Value = str.Substring(idx + 1).Trim();                              }                              else                              {                                  current.Name = str.Trim();                                    current.Value = String.Empty;                              }                              current.Version = version;                          }                      }                      if (current != null)                      {                          cookies.Add(current);                      }                      break;              }
Missing Default,Reactor.Net,HttpListenerResponse,C:\repos\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following switch statement is missing a default case: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Missing Default,Reactor.Net,HttpUtility,C:\repos\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following switch statement is missing a default case: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
